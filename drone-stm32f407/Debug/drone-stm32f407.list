
drone-stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d164  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800d2f8  0800d2f8  0001d2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d580  0800d580  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d580  0800d580  0001d580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d588  0800d588  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d588  0800d588  0001d588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d58c  0800d58c  0001d58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          0000066c  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000704  20000704  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fed  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027bc  00000000  00000000  000350b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00037878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  00038a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002298d  00000000  00000000  00039bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001660a  00000000  00000000  0005c57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d07ac  00000000  00000000  00072b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143333  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005944  00000000  00000000  00143384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d2dc 	.word	0x0800d2dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800d2dc 	.word	0x0800d2dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f58:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f5c:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	609a      	str	r2, [r3, #8]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 8000f7e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fbe:	ed97 6a00 	vldr	s12, [r7]
 8000fc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff faaa 	bl	8000548 <__aeabi_f2d>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	ed93 7a04 	vldr	s14, [r3, #16]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	eef0 7ae7 	vabs.f32	s15, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	4680      	mov	r8, r0
 8001016:	4689      	mov	r9, r1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4640      	mov	r0, r8
 8001028:	4649      	mov	r1, r9
 800102a:	f7ff fae5 	bl	80005f8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff f929 	bl	800028c <__adddf3>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fdb1 	bl	8000ba8 <__aeabi_d2f>
 8001046:	4602      	mov	r2, r0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	ee07 3a90 	vmov	s15, r3
}
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001068 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e024      	b.n	80010c8 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d103      	bne.n	800108c <flash+0x24>
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <flash+0x78>)
 8001088:	f003 fcf1 	bl	8004a6e <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d103      	bne.n	800109a <flash+0x32>
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	4812      	ldr	r0, [pc, #72]	; (80010e0 <flash+0x78>)
 8001096:	f003 fcea 	bl	8004a6e <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800109a:	2032      	movs	r0, #50	; 0x32
 800109c:	f003 f944 	bl	8004328 <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d103      	bne.n	80010ae <flash+0x46>
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <flash+0x78>)
 80010aa:	f003 fce0 	bl	8004a6e <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d103      	bne.n	80010bc <flash+0x54>
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash+0x78>)
 80010b8:	f003 fcd9 	bl	8004a6e <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f003 f933 	bl	8004328 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbd6      	blt.n	800107e <flash+0x16>
  }

  HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f003 f929 	bl	8004328 <HAL_Delay>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020000 	.word	0x40020000

080010e4 <console>:

// Monitor console
void console(const char *str) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f86f 	bl	80001d0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <console+0x24>)
 80010fc:	f008 fb91 	bl	8009822 <HAL_UART_Transmit_IT>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000280 	.word	0x20000280

0800110c <send_data>:

char g_console_msg[256] = {0};
void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b093      	sub	sp, #76	; 0x4c
 8001110:	af08      	add	r7, sp, #32
 8001112:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001116:	edc7 0a08 	vstr	s1, [r7, #32]
 800111a:	ed87 1a07 	vstr	s2, [r7, #28]
 800111e:	edc7 1a06 	vstr	s3, [r7, #24]
 8001122:	ed87 2a05 	vstr	s4, [r7, #20]
 8001126:	edc7 2a04 	vstr	s5, [r7, #16]
 800112a:	ed87 3a03 	vstr	s6, [r7, #12]
 800112e:	edc7 3a02 	vstr	s7, [r7, #8]
 8001132:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 8001136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113a:	2100      	movs	r1, #0
 800113c:	4837      	ldr	r0, [pc, #220]	; (800121c <send_data+0x110>)
 800113e:	f009 faff 	bl	800a740 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8001142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001146:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001220 <send_data+0x114>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800114e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001152:	edd7 7a08 	vldr	s15, [r7, #32]
 8001156:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001220 <send_data+0x114>
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800115e:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001162:	edd7 7a07 	vldr	s15, [r7, #28]
 8001166:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001220 <send_data+0x114>
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8001176:	edd7 7a06 	vldr	s15, [r7, #24]
 800117a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001220 <send_data+0x114>
 800117e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800118a:	edd7 7a05 	vldr	s15, [r7, #20]
 800118e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001220 <send_data+0x114>
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119a:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 800119e:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001220 <send_data+0x114>
 80011a6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ae:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80011b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001220 <send_data+0x114>
 80011ba:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80011c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001220 <send_data+0x114>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d6:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001220 <send_data+0x114>
 80011e2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ea:	ee17 6a90 	vmov	r6, s15
 80011ee:	9606      	str	r6, [sp, #24]
 80011f0:	9505      	str	r5, [sp, #20]
 80011f2:	9404      	str	r4, [sp, #16]
 80011f4:	9003      	str	r0, [sp, #12]
 80011f6:	9102      	str	r1, [sp, #8]
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	ee16 3a10 	vmov	r3, s12
 8001200:	ee16 2a90 	vmov	r2, s13
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <send_data+0x118>)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <send_data+0x110>)
 8001208:	f009 faa2 	bl	800a750 <siprintf>
  console(g_console_msg);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <send_data+0x110>)
 800120e:	f7ff ff69 	bl	80010e4 <console>
}
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	; 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	bf00      	nop
 800121c:	200004b4 	.word	0x200004b4
 8001220:	47c35000 	.word	0x47c35000
 8001224:	0800d2f8 	.word	0x0800d2f8

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f003 f809 	bl	8004244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f8db 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 fc0b 	bl	8001a50 <MX_GPIO_Init>
  MX_I2C1_Init();
 800123a:	f000 f941 	bl	80014c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800123e:	f000 f9a3 	bl	8001588 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001242:	f000 fa65 	bl	8001710 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001246:	f000 faf9 	bl	800183c <MX_TIM3_Init>
  MX_TIM4_Init();
 800124a:	f000 fb45 	bl	80018d8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800124e:	f000 fbd5 	bl	80019fc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001252:	f000 f963 	bl	800151c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Turn off leds
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4855      	ldr	r0, [pc, #340]	; (80013b0 <main+0x188>)
 800125c:	f003 fbee 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4852      	ldr	r0, [pc, #328]	; (80013b0 <main+0x188>)
 8001266:	f003 fbe9 	bl	8004a3c <HAL_GPIO_WritePin>

  flash(1, 5);
 800126a:	2105      	movs	r1, #5
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fefb 	bl	8001068 <flash>

  // Initialise Kalman filters
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 1);
 8001272:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001276:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800127a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800127e:	484d      	ldr	r0, [pc, #308]	; (80013b4 <main+0x18c>)
 8001280:	f7ff fe64 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 1);
 8001284:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001288:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800128c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001290:	4849      	ldr	r0, [pc, #292]	; (80013b8 <main+0x190>)
 8001292:	f7ff fe5b 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 1);
 8001296:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800129a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800129e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012a2:	4846      	ldr	r0, [pc, #280]	; (80013bc <main+0x194>)
 80012a4:	f7ff fe52 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 1);
 80012a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012b4:	4842      	ldr	r0, [pc, #264]	; (80013c0 <main+0x198>)
 80012b6:	f7ff fe49 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 1);
 80012ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012c6:	483f      	ldr	r0, [pc, #252]	; (80013c4 <main+0x19c>)
 80012c8:	f7ff fe40 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 1);
 80012cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012d0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012d8:	483b      	ldr	r0, [pc, #236]	; (80013c8 <main+0x1a0>)
 80012da:	f7ff fe37 	bl	8000f4c <SimpleKalmanFilter_Init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 80012de:	2303      	movs	r3, #3
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2303      	movs	r3, #3
 80012e4:	2200      	movs	r2, #0
 80012e6:	4939      	ldr	r1, [pc, #228]	; (80013cc <main+0x1a4>)
 80012e8:	4839      	ldr	r0, [pc, #228]	; (80013d0 <main+0x1a8>)
 80012ea:	f000 fc30 	bl	8001b4e <MPU6050_init>
 80012ee:	60f8      	str	r0, [r7, #12]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <main+0xd0>
 80012f6:	e006      	b.n	8001306 <main+0xde>
    flash(2, error);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	2002      	movs	r0, #2
 8001300:	f7ff feb2 	bl	8001068 <flash>
  while (1) {
 8001304:	e7eb      	b.n	80012de <main+0xb6>
  }

  while (1) {
    int error = MS5611_init(
 8001306:	2277      	movs	r2, #119	; 0x77
 8001308:	4930      	ldr	r1, [pc, #192]	; (80013cc <main+0x1a4>)
 800130a:	4832      	ldr	r0, [pc, #200]	; (80013d4 <main+0x1ac>)
 800130c:	f000 ff98 	bl	8002240 <MS5611_init>
 8001310:	60b8      	str	r0, [r7, #8]
        &g_ms5611,
        &hi2c1,
        0x77);
    if (error == 0) break;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <main+0xfe>
    flash(2, error);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff fea2 	bl	8001068 <flash>
  while (1) {
 8001324:	e7ef      	b.n	8001306 <main+0xde>
    if (error == 0) break;
 8001326:	bf00      	nop
  }
  MS5611_set_oversampling(&g_ms5611, OSR_ULTRA_HIGH);
 8001328:	210c      	movs	r1, #12
 800132a:	482a      	ldr	r0, [pc, #168]	; (80013d4 <main+0x1ac>)
 800132c:	f000 ffda 	bl	80022e4 <MS5611_set_oversampling>

  // Initialise motor PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001330:	2100      	movs	r1, #0
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <main+0x1b0>)
 8001334:	f007 f850 	bl	80083d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001338:	2104      	movs	r1, #4
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <main+0x1b0>)
 800133c:	f007 f84c 	bl	80083d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001340:	2108      	movs	r1, #8
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <main+0x1b0>)
 8001344:	f007 f848 	bl	80083d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001348:	210c      	movs	r1, #12
 800134a:	4823      	ldr	r0, [pc, #140]	; (80013d8 <main+0x1b0>)
 800134c:	f007 f844 	bl	80083d8 <HAL_TIM_PWM_Start>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 8001350:	4822      	ldr	r0, [pc, #136]	; (80013dc <main+0x1b4>)
 8001352:	f006 ff77 	bl	8008244 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_control, 10);
 8001356:	220a      	movs	r2, #10
 8001358:	4921      	ldr	r1, [pc, #132]	; (80013e0 <main+0x1b8>)
 800135a:	4822      	ldr	r0, [pc, #136]	; (80013e4 <main+0x1bc>)
 800135c:	f008 faa6 	bl	80098ac <HAL_UART_Receive_IT>

    if (MS5611_read(&g_ms5611) != 0) {
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <main+0x1ac>)
 8001362:	f000 ffcf 	bl	8002304 <MS5611_read>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <main+0x14c>
      flash(2, 1);
 800136c:	2101      	movs	r1, #1
 800136e:	2002      	movs	r0, #2
 8001370:	f7ff fe7a 	bl	8001068 <flash>
    }

    float tem = MS5611_getTemperature(&g_ms5611);
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <main+0x1ac>)
 8001376:	f001 f90f 	bl	8002598 <MS5611_getTemperature>
 800137a:	ed87 0a01 	vstr	s0, [r7, #4]
    float psr = MS5611_getPressure(&g_ms5611);
 800137e:	4815      	ldr	r0, [pc, #84]	; (80013d4 <main+0x1ac>)
 8001380:	f001 f956 	bl	8002630 <MS5611_getPressure>
 8001384:	ed87 0a00 	vstr	s0, [r7]
    monitor[0] = tem;
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <main+0x1c0>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
    monitor[1] = tem;
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <main+0x1c0>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6053      	str	r3, [r2, #4]
    monitor[2] = tem;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <main+0x1c0>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6093      	str	r3, [r2, #8]
    monitor[3] = psr;
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <main+0x1c0>)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	60d3      	str	r3, [r2, #12]
    monitor[4] = psr;
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <main+0x1c0>)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	6113      	str	r3, [r2, #16]
    monitor[5] = psr;
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <main+0x1c0>)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6153      	str	r3, [r2, #20]
  {
 80013ac:	e7d3      	b.n	8001356 <main+0x12e>
 80013ae:	bf00      	nop
 80013b0:	40020000 	.word	0x40020000
 80013b4:	200002c4 	.word	0x200002c4
 80013b8:	200002dc 	.word	0x200002dc
 80013bc:	200002f4 	.word	0x200002f4
 80013c0:	2000030c 	.word	0x2000030c
 80013c4:	20000324 	.word	0x20000324
 80013c8:	2000033c 	.word	0x2000033c
 80013cc:	200000b4 	.word	0x200000b4
 80013d0:	20000444 	.word	0x20000444
 80013d4:	20000468 	.word	0x20000468
 80013d8:	20000160 	.word	0x20000160
 80013dc:	200001f0 	.word	0x200001f0
 80013e0:	200004a8 	.word	0x200004a8
 80013e4:	20000280 	.word	0x20000280
 80013e8:	200006c4 	.word	0x200006c4

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 f9a0 	bl	800a740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <SystemClock_Config+0xcc>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <SystemClock_Config+0xcc>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <SystemClock_Config+0xd0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xd0>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001460:	23a8      	movs	r3, #168	; 0xa8
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f006 f977 	bl	8007764 <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800147c:	f000 fb62 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001480:	230f      	movs	r3, #15
 8001482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001484:	2302      	movs	r3, #2
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001490:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001492:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2105      	movs	r1, #5
 800149e:	4618      	mov	r0, r3
 80014a0:	f006 fbd8 	bl	8007c54 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014aa:	f000 fb4b 	bl	8001b44 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	; 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f003 fad1 	bl	8004aa4 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 fb1c 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000b4 	.word	0x200000b4
 8001514:	40005400 	.word	0x40005400
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_SPI2_Init+0x64>)
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MX_SPI2_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI2_Init+0x64>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI2_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_SPI2_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI2_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI2_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI2_Init+0x64>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI2_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_SPI2_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI2_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_SPI2_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI2_Init+0x64>)
 8001568:	220a      	movs	r2, #10
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_SPI2_Init+0x64>)
 800156e:	f006 fd91 	bl	8008094 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001578:	f000 fae4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000108 	.word	0x20000108
 8001584:	40003800 	.word	0x40003800

08001588 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b096      	sub	sp, #88	; 0x58
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2220      	movs	r2, #32
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f009 f8bd 	bl	800a740 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c6:	4b50      	ldr	r3, [pc, #320]	; (8001708 <MX_TIM1_Init+0x180>)
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <MX_TIM1_Init+0x184>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <MX_TIM1_Init+0x180>)
 80015ce:	2215      	movs	r2, #21
 80015d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <MX_TIM1_Init+0x180>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80015d8:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <MX_TIM1_Init+0x180>)
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b49      	ldr	r3, [pc, #292]	; (8001708 <MX_TIM1_Init+0x180>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e6:	4b48      	ldr	r3, [pc, #288]	; (8001708 <MX_TIM1_Init+0x180>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b46      	ldr	r3, [pc, #280]	; (8001708 <MX_TIM1_Init+0x180>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015f2:	4845      	ldr	r0, [pc, #276]	; (8001708 <MX_TIM1_Init+0x180>)
 80015f4:	f006 fdd7 	bl	80081a6 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015fe:	f000 faa1 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800160c:	4619      	mov	r1, r3
 800160e:	483e      	ldr	r0, [pc, #248]	; (8001708 <MX_TIM1_Init+0x180>)
 8001610:	f007 fa6a 	bl	8008ae8 <HAL_TIM_ConfigClockSource>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800161a:	f000 fa93 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800161e:	483a      	ldr	r0, [pc, #232]	; (8001708 <MX_TIM1_Init+0x180>)
 8001620:	f006 fe80 	bl	8008324 <HAL_TIM_PWM_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800162a:	f000 fa8b 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163a:	4619      	mov	r1, r3
 800163c:	4832      	ldr	r0, [pc, #200]	; (8001708 <MX_TIM1_Init+0x180>)
 800163e:	f007 ffc1 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001648:	f000 fa7c 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164c:	2360      	movs	r3, #96	; 0x60
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	4825      	ldr	r0, [pc, #148]	; (8001708 <MX_TIM1_Init+0x180>)
 8001672:	f007 f977 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800167c:	f000 fa62 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	2204      	movs	r2, #4
 8001686:	4619      	mov	r1, r3
 8001688:	481f      	ldr	r0, [pc, #124]	; (8001708 <MX_TIM1_Init+0x180>)
 800168a:	f007 f96b 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001694:	f000 fa56 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	2208      	movs	r2, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	4819      	ldr	r0, [pc, #100]	; (8001708 <MX_TIM1_Init+0x180>)
 80016a2:	f007 f95f 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80016ac:	f000 fa4a 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	220c      	movs	r2, #12
 80016b6:	4619      	mov	r1, r3
 80016b8:	4813      	ldr	r0, [pc, #76]	; (8001708 <MX_TIM1_Init+0x180>)
 80016ba:	f007 f953 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80016c4:	f000 fa3e 	bl	8001b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM1_Init+0x180>)
 80016ec:	f007 ffe6 	bl	80096bc <HAL_TIMEx_ConfigBreakDeadTime>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80016f6:	f000 fa25 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM1_Init+0x180>)
 80016fc:	f001 f964 	bl	80029c8 <HAL_TIM_MspPostInit>

}
 8001700:	bf00      	nop
 8001702:	3758      	adds	r7, #88	; 0x58
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000160 	.word	0x20000160
 800170c:	40010000 	.word	0x40010000

08001710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	f107 0320 	add.w	r3, r7, #32
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001740:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <MX_TIM2_Init+0x128>)
 8001742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 8001748:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <MX_TIM2_Init+0x128>)
 800174a:	2215      	movs	r2, #21
 800174c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <MX_TIM2_Init+0x128>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <MX_TIM2_Init+0x128>)
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <MX_TIM2_Init+0x128>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b35      	ldr	r3, [pc, #212]	; (8001838 <MX_TIM2_Init+0x128>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001768:	4833      	ldr	r0, [pc, #204]	; (8001838 <MX_TIM2_Init+0x128>)
 800176a:	f006 fd1c 	bl	80081a6 <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001774:	f000 f9e6 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800177e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001782:	4619      	mov	r1, r3
 8001784:	482c      	ldr	r0, [pc, #176]	; (8001838 <MX_TIM2_Init+0x128>)
 8001786:	f007 f9af 	bl	8008ae8 <HAL_TIM_ConfigClockSource>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001790:	f000 f9d8 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001794:	4828      	ldr	r0, [pc, #160]	; (8001838 <MX_TIM2_Init+0x128>)
 8001796:	f006 fdc5 	bl	8008324 <HAL_TIM_PWM_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017a0:	f000 f9d0 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	4619      	mov	r1, r3
 80017b2:	4821      	ldr	r0, [pc, #132]	; (8001838 <MX_TIM2_Init+0x128>)
 80017b4:	f007 ff06 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017be:	f000 f9c1 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c2:	2360      	movs	r3, #96	; 0x60
 80017c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4817      	ldr	r0, [pc, #92]	; (8001838 <MX_TIM2_Init+0x128>)
 80017da:	f007 f8c3 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80017e4:	f000 f9ae 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2204      	movs	r2, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4812      	ldr	r0, [pc, #72]	; (8001838 <MX_TIM2_Init+0x128>)
 80017f0:	f007 f8b8 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80017fa:	f000 f9a3 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2208      	movs	r2, #8
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_TIM2_Init+0x128>)
 8001806:	f007 f8ad 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001810:	f000 f998 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	220c      	movs	r2, #12
 8001818:	4619      	mov	r1, r3
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM2_Init+0x128>)
 800181c:	f007 f8a2 	bl	8008964 <HAL_TIM_PWM_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001826:	f000 f98d 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM2_Init+0x128>)
 800182c:	f001 f8cc 	bl	80029c8 <HAL_TIM_MspPostInit>

}
 8001830:	bf00      	nop
 8001832:	3738      	adds	r7, #56	; 0x38
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200001a8 	.word	0x200001a8

0800183c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_TIM3_Init+0x94>)
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <MX_TIM3_Init+0x98>)
 800185c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001860:	2254      	movs	r2, #84	; 0x54
 8001862:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM3_Init+0x94>)
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_TIM3_Init+0x94>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800187e:	4814      	ldr	r0, [pc, #80]	; (80018d0 <MX_TIM3_Init+0x94>)
 8001880:	f006 fc91 	bl	80081a6 <HAL_TIM_Base_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800188a:	f000 f95b 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_TIM3_Init+0x94>)
 800189c:	f007 f924 	bl	8008ae8 <HAL_TIM_ConfigClockSource>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018a6:	f000 f94d 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_TIM3_Init+0x94>)
 80018b8:	f007 fe84 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018c2:	f000 f93f 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200001f0 	.word	0x200001f0
 80018d4:	40000400 	.word	0x40000400

080018d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001904:	4a3c      	ldr	r2, [pc, #240]	; (80019f8 <MX_TIM4_Init+0x120>)
 8001906:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <MX_TIM4_Init+0x11c>)
 800190a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800190e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001918:	f24a 4210 	movw	r2, #42000	; 0xa410
 800191c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800192a:	4832      	ldr	r0, [pc, #200]	; (80019f4 <MX_TIM4_Init+0x11c>)
 800192c:	f006 fc3b 	bl	80081a6 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001936:	f000 f905 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	482b      	ldr	r0, [pc, #172]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001948:	f007 f8ce 	bl	8008ae8 <HAL_TIM_ConfigClockSource>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001952:	f000 f8f7 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001956:	4827      	ldr	r0, [pc, #156]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001958:	f006 fe06 	bl	8008568 <HAL_TIM_IC_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001962:	f000 f8ef 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	481f      	ldr	r0, [pc, #124]	; (80019f4 <MX_TIM4_Init+0x11c>)
 8001976:	f007 fe25 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001980:	f000 f8e0 	bl	8001b44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001984:	230a      	movs	r3, #10
 8001986:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001988:	2301      	movs	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	4816      	ldr	r0, [pc, #88]	; (80019f4 <MX_TIM4_Init+0x11c>)
 800199c:	f006 ff45 	bl	800882a <HAL_TIM_IC_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80019a6:	f000 f8cd 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	2204      	movs	r2, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <MX_TIM4_Init+0x11c>)
 80019b2:	f006 ff3a 	bl	800882a <HAL_TIM_IC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 80019bc:	f000 f8c2 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	2208      	movs	r2, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <MX_TIM4_Init+0x11c>)
 80019c8:	f006 ff2f 	bl	800882a <HAL_TIM_IC_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 80019d2:	f000 f8b7 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	220c      	movs	r2, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_TIM4_Init+0x11c>)
 80019de:	f006 ff24 	bl	800882a <HAL_TIM_IC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 80019e8:	f000 f8ac 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000238 	.word	0x20000238
 80019f8:	40000800 	.word	0x40000800

080019fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART1_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART1_UART_Init+0x4c>)
 8001a34:	f007 fea8 	bl	8009788 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f000 f881 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000280 	.word	0x20000280
 8001a4c:	40011000 	.word	0x40011000

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a33      	ldr	r2, [pc, #204]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_GPIO_Init+0xec>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	21c0      	movs	r1, #192	; 0xc0
 8001b12:	480b      	ldr	r0, [pc, #44]	; (8001b40 <MX_GPIO_Init+0xf0>)
 8001b14:	f002 ff92 	bl	8004a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b18:	23c0      	movs	r3, #192	; 0xc0
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_GPIO_Init+0xf0>)
 8001b30:	f002 fdd0 	bl	80046d4 <HAL_GPIO_Init>

}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <Error_Handler+0x8>

08001b4e <MPU6050_init>:
#define MPU6050_I2C_ADDR 0xD0

uint8_t i2c_rx_buffer[32] = {0};

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b08a      	sub	sp, #40	; 0x28
 8001b52:	af02      	add	r7, sp, #8
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	4613      	mov	r3, r2
 8001b62:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	22d0      	movs	r2, #208	; 0xd0
 8001b6e:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	e00a      	b.n	8001b8c <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f85c 	bl	8005c38 <HAL_I2C_GetState>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d006      	beq.n	8001b94 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	ddf1      	ble.n	8001b76 <MPU6050_init+0x28>
 8001b92:	e000      	b.n	8001b96 <MPU6050_init+0x48>
      break;
 8001b94:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	dd01      	ble.n	8001ba0 <MPU6050_init+0x52>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e160      	b.n	8001e62 <MPU6050_init+0x314>

  // Check MPU id
  uint8_t whoiam = 0x75;
 8001ba0:	2375      	movs	r3, #117	; 0x75
 8001ba2:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	e011      	b.n	8001bce <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	b299      	uxth	r1, r3
 8001bb4:	f107 021b 	add.w	r2, r7, #27
 8001bb8:	2364      	movs	r3, #100	; 0x64
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f003 f8b5 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	ddea      	ble.n	8001baa <MPU6050_init+0x5c>
 8001bd4:	e000      	b.n	8001bd8 <MPU6050_init+0x8a>
      break;
 8001bd6:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	dd01      	ble.n	8001be2 <MPU6050_init+0x94>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e13f      	b.n	8001e62 <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e011      	b.n	8001c0c <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	f107 021a 	add.w	r2, r7, #26
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f003 f994 	bl	8004f28 <HAL_I2C_Master_Receive>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	ddea      	ble.n	8001be8 <MPU6050_init+0x9a>
 8001c12:	e000      	b.n	8001c16 <MPU6050_init+0xc8>
      break;
 8001c14:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	dd01      	ble.n	8001c20 <MPU6050_init+0xd2>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e120      	b.n	8001e62 <MPU6050_init+0x314>

  if (whoiam_res != 0x68) return 5;
 8001c20:	7ebb      	ldrb	r3, [r7, #26]
 8001c22:	2b68      	cmp	r3, #104	; 0x68
 8001c24:	d001      	beq.n	8001c2a <MPU6050_init+0xdc>
 8001c26:	2305      	movs	r3, #5
 8001c28:	e11b      	b.n	8001e62 <MPU6050_init+0x314>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001c2a:	236b      	movs	r3, #107	; 0x6b
 8001c2c:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e011      	b.n	8001c58 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	791b      	ldrb	r3, [r3, #4]
 8001c3c:	b299      	uxth	r1, r3
 8001c3e:	f107 0218 	add.w	r2, r7, #24
 8001c42:	2364      	movs	r3, #100	; 0x64
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2302      	movs	r3, #2
 8001c48:	f003 f870 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	ddea      	ble.n	8001c34 <MPU6050_init+0xe6>
 8001c5e:	e000      	b.n	8001c62 <MPU6050_init+0x114>
      break;
 8001c60:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	dd01      	ble.n	8001c6c <MPU6050_init+0x11e>
 8001c68:	2306      	movs	r3, #6
 8001c6a:	e0fa      	b.n	8001e62 <MPU6050_init+0x314>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 8001c6c:	2319      	movs	r3, #25
 8001c6e:	753b      	strb	r3, [r7, #20]
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	e011      	b.n	8001c9e <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	791b      	ldrb	r3, [r3, #4]
 8001c82:	b299      	uxth	r1, r3
 8001c84:	f107 0214 	add.w	r2, r7, #20
 8001c88:	2364      	movs	r3, #100	; 0x64
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f003 f84d 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	ddea      	ble.n	8001c7a <MPU6050_init+0x12c>
 8001ca4:	e000      	b.n	8001ca8 <MPU6050_init+0x15a>
      break;
 8001ca6:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	dd01      	ble.n	8001cb2 <MPU6050_init+0x164>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e0d7      	b.n	8001e62 <MPU6050_init+0x314>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001cb2:	231c      	movs	r3, #28
 8001cb4:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e011      	b.n	8001ce0 <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	791b      	ldrb	r3, [r3, #4]
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	f107 0213 	add.w	r2, r7, #19
 8001cca:	2364      	movs	r3, #100	; 0x64
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f003 f82c 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	ddea      	ble.n	8001cbc <MPU6050_init+0x16e>
 8001ce6:	e000      	b.n	8001cea <MPU6050_init+0x19c>
      break;
 8001ce8:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	dd01      	ble.n	8001cf4 <MPU6050_init+0x1a6>
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	e0b6      	b.n	8001e62 <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	e011      	b.n	8001d1e <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	791b      	ldrb	r3, [r3, #4]
 8001d02:	b299      	uxth	r1, r3
 8001d04:	f107 0213 	add.w	r2, r7, #19
 8001d08:	2364      	movs	r3, #100	; 0x64
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f003 f90b 	bl	8004f28 <HAL_I2C_Master_Receive>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	ddea      	ble.n	8001cfa <MPU6050_init+0x1ac>
 8001d24:	e000      	b.n	8001d28 <MPU6050_init+0x1da>
      break;
 8001d26:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	dd01      	ble.n	8001d32 <MPU6050_init+0x1e4>
 8001d2e:	2309      	movs	r3, #9
 8001d30:	e097      	b.n	8001e62 <MPU6050_init+0x314>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	f023 0318 	bic.w	r3, r3, #24
 8001d3a:	b25a      	sxtb	r2, r3
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e011      	b.n	8001d74 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	f107 0213 	add.w	r2, r7, #19
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2301      	movs	r3, #1
 8001d64:	f002 ffe2 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	ddea      	ble.n	8001d50 <MPU6050_init+0x202>
 8001d7a:	e000      	b.n	8001d7e <MPU6050_init+0x230>
      break;
 8001d7c:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	dd01      	ble.n	8001d88 <MPU6050_init+0x23a>
 8001d84:	230a      	movs	r3, #10
 8001d86:	e06c      	b.n	8001e62 <MPU6050_init+0x314>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001d88:	231b      	movs	r3, #27
 8001d8a:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	e011      	b.n	8001db6 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	791b      	ldrb	r3, [r3, #4]
 8001d9a:	b299      	uxth	r1, r3
 8001d9c:	f107 0212 	add.w	r2, r7, #18
 8001da0:	2364      	movs	r3, #100	; 0x64
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	f002 ffc1 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	3301      	adds	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	ddea      	ble.n	8001d92 <MPU6050_init+0x244>
 8001dbc:	e000      	b.n	8001dc0 <MPU6050_init+0x272>
      break;
 8001dbe:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	dd01      	ble.n	8001dca <MPU6050_init+0x27c>
 8001dc6:	230b      	movs	r3, #11
 8001dc8:	e04b      	b.n	8001e62 <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e011      	b.n	8001df4 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	f107 0212 	add.w	r2, r7, #18
 8001dde:	2364      	movs	r3, #100	; 0x64
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2301      	movs	r3, #1
 8001de4:	f003 f8a0 	bl	8004f28 <HAL_I2C_Master_Receive>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	ddea      	ble.n	8001dd0 <MPU6050_init+0x282>
 8001dfa:	e000      	b.n	8001dfe <MPU6050_init+0x2b0>
      break;
 8001dfc:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	dd01      	ble.n	8001e08 <MPU6050_init+0x2ba>
 8001e04:	230c      	movs	r3, #12
 8001e06:	e02c      	b.n	8001e62 <MPU6050_init+0x314>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	f023 0318 	bic.w	r3, r3, #24
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e011      	b.n	8001e4c <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	b299      	uxth	r1, r3
 8001e32:	f107 0212 	add.w	r2, r7, #18
 8001e36:	2364      	movs	r3, #100	; 0x64
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f002 ff76 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	ddea      	ble.n	8001e28 <MPU6050_init+0x2da>
 8001e52:	e000      	b.n	8001e56 <MPU6050_init+0x308>
      break;
 8001e54:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	dd01      	ble.n	8001e60 <MPU6050_init+0x312>
 8001e5c:	230d      	movs	r3, #13
 8001e5e:	e000      	b.n	8001e62 <MPU6050_init+0x314>

  return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read_IT(mpu6050->i2c, mpu6050->address, 0x3B, 1, i2c_rx_buffer, 14);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	791b      	ldrb	r3, [r3, #4]
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	230e      	movs	r3, #14
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <MPU6050_update+0x2c>)
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	223b      	movs	r2, #59	; 0x3b
 8001e8a:	f003 fa73 	bl	8005374 <HAL_I2C_Mem_Read_IT>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200005b4 	.word	0x200005b4

08001e9c <MPU6050_i2c_mem_read_cb_handler>:

void MPU6050_i2c_mem_read_cb_handler(mpu6050_t *mpu6050) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(i2c_rx_buffer[0] << 8 | i2c_rx_buffer[1]);
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(i2c_rx_buffer[2] << 8 | i2c_rx_buffer[3]);
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001ec6:	789b      	ldrb	r3, [r3, #2]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001ece:	78db      	ldrb	r3, [r3, #3]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(i2c_rx_buffer[4] << 8 | i2c_rx_buffer[5]);
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001ee6:	791b      	ldrb	r3, [r3, #4]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001eee:	795b      	ldrb	r3, [r3, #5]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (i2c_rx_buffer[6] << 8 | i2c_rx_buffer[7]);
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f06:	799b      	ldrb	r3, [r3, #6]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f0e:	79db      	ldrb	r3, [r3, #7]
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	4313      	orrs	r3, r2
 8001f14:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001fa8 <MPU6050_i2c_mem_read_cb_handler+0x10c>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001fac <MPU6050_i2c_mem_read_cb_handler+0x110>
 8001f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = (int16_t)(i2c_rx_buffer[8] << 8 | i2c_rx_buffer[9]);
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f3a:	7a1b      	ldrb	r3, [r3, #8]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f42:	7a5b      	ldrb	r3, [r3, #9]
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(i2c_rx_buffer[10] << 8 | i2c_rx_buffer[11]);
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f5a:	7a9b      	ldrb	r3, [r3, #10]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f62:	7adb      	ldrb	r3, [r3, #11]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = (int16_t)(i2c_rx_buffer[12] << 8 | i2c_rx_buffer[13]);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f7a:	7b1b      	ldrb	r3, [r3, #12]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f82:	7b5b      	ldrb	r3, [r3, #13]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	200005b4 	.word	0x200005b4
 8001fa8:	43aa0000 	.word	0x43aa0000
 8001fac:	42121eb8 	.word	0x42121eb8

08001fb0 <_command>:
#define MS5611_CMD_READ_PROM      0xA0
#define MS5611_CMD_RESET          0x1E
#define MS5611_CMD_CONVERT_D1     0x40
#define MS5611_CMD_CONVERT_D2     0x50

void _command(ms5611_t *ms5611, uint8_t command) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  ms5611->result = MS5611_NOT_READ;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <_command+0x40>)
 8001fc0:	619a      	str	r2, [r3, #24]
  if (HAL_I2C_Master_Transmit(ms5611->i2c, ms5611->address << 1, &command, 1, 100) == HAL_OK) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	791b      	ldrb	r3, [r3, #4]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	b299      	uxth	r1, r3
 8001fd0:	1cfa      	adds	r2, r7, #3
 8001fd2:	2364      	movs	r3, #100	; 0x64
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f002 fea8 	bl	8004d2c <HAL_I2C_Master_Transmit>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <_command+0x3a>
    ms5611->result = 0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
    return;
 8001fe8:	bf00      	nop
  }
}
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	fffffc19 	.word	0xfffffc19

08001ff4 <_convert>:

void _convert(ms5611_t *ms5611, uint8_t addr, uint8_t bits) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
 8002000:	4613      	mov	r3, r2
 8002002:	70bb      	strb	r3, [r7, #2]
  uint8_t index = bits;
 8002004:	78bb      	ldrb	r3, [r7, #2]
 8002006:	73fb      	strb	r3, [r7, #15]
  if (index < 8) index = 8;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b07      	cmp	r3, #7
 800200c:	d802      	bhi.n	8002014 <_convert+0x20>
 800200e:	2308      	movs	r3, #8
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e004      	b.n	800201e <_convert+0x2a>
  else if (index > 12) index = 12;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d901      	bls.n	800201e <_convert+0x2a>
 800201a:	230c      	movs	r3, #12
 800201c:	73fb      	strb	r3, [r7, #15]
  index -= 8;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3b08      	subs	r3, #8
 8002022:	73fb      	strb	r3, [r7, #15]
  uint8_t offset = index * 2;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	73bb      	strb	r3, [r7, #14]
  _command(ms5611, addr + offset);
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	4413      	add	r3, r2
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffbb 	bl	8001fb0 <_command>
  // uint16_t wait_time = del[index];
  // uint32_t start = micros();
  // while (micros() - start < wait_time) {
  //   delayMicroseconds(10);
  // }
  HAL_Delay(del[index]/1000);
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <_convert+0x68>)
 800203e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <_convert+0x6c>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f002 f96b 	bl	8004328 <HAL_Delay>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	0800d31c 	.word	0x0800d31c
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <_read_ADC>:

uint32_t _read_ADC(ms5611_t *ms5611) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af02      	add	r7, sp, #8
 800206a:	6078      	str	r0, [r7, #4]
  _command(ms5611, MS5611_CMD_READ_ADC);
 800206c:	2100      	movs	r1, #0
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff9e 	bl	8001fb0 <_command>
  if (ms5611->result == 0) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d126      	bne.n	80020ca <_read_ADC+0x66>
    uint8_t buf[3] = {0};
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_read_ADC+0x70>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	813b      	strh	r3, [r7, #8]
 8002082:	2300      	movs	r3, #0
 8002084:	72bb      	strb	r3, [r7, #10]
    if (HAL_I2C_Master_Receive(ms5611->i2c, (ms5611->address << 1) | 0x01, buf, 3, 100) != HAL_OK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	791b      	ldrb	r3, [r3, #4]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	b21b      	sxth	r3, r3
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	b21b      	sxth	r3, r3
 8002098:	b299      	uxth	r1, r3
 800209a:	f107 0208 	add.w	r2, r7, #8
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2303      	movs	r3, #3
 80020a4:	f002 ff40 	bl	8004f28 <HAL_I2C_Master_Receive>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <_read_ADC+0x50>
      ms5611->result = MS5611_NOT_READ;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <_read_ADC+0x74>)
 80020b2:	619a      	str	r2, [r3, #24]

    uint32_t raw_temperature = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | buf[2];
 80020b4:	7a3b      	ldrb	r3, [r7, #8]
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	461a      	mov	r2, r3
 80020ba:	7a7b      	ldrb	r3, [r7, #9]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	4313      	orrs	r3, r2
 80020c0:	7aba      	ldrb	r2, [r7, #10]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
    return raw_temperature;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	e000      	b.n	80020cc <_read_ADC+0x68>
  }

  return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	0800d318 	.word	0x0800d318
 80020d8:	fffffc19 	.word	0xfffffc19

080020dc <_read_PROM>:

uint16_t _read_PROM(ms5611_t *ms5611, uint8_t reg) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  // Last EEPROM register is CRC - Page 13 datasheet.
  uint8_t prom_CRC_reg = 7;
 80020e8:	2307      	movs	r3, #7
 80020ea:	73fb      	strb	r3, [r7, #15]
  if (reg > prom_CRC_reg) return 0;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d901      	bls.n	80020f8 <_read_PROM+0x1c>
 80020f4:	2300      	movs	r3, #0
 80020f6:	e02e      	b.n	8002156 <_read_PROM+0x7a>

  uint8_t offset = reg * 2;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	73bb      	strb	r3, [r7, #14]
  _command(ms5611, MS5611_CMD_READ_PROM + offset);
 80020fe:	7bbb      	ldrb	r3, [r7, #14]
 8002100:	3b60      	subs	r3, #96	; 0x60
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff52 	bl	8001fb0 <_command>
  if (ms5611->result == 0) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11f      	bne.n	8002154 <_read_PROM+0x78>
    uint8_t buf[2] = {0};
 8002114:	2300      	movs	r3, #0
 8002116:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Master_Receive(ms5611->i2c, ms5611->address << 1, buf, 2, 100) != HAL_OK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	b29b      	uxth	r3, r3
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	b299      	uxth	r1, r3
 8002126:	f107 0208 	add.w	r2, r7, #8
 800212a:	2364      	movs	r3, #100	; 0x64
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2302      	movs	r3, #2
 8002130:	f002 fefa 	bl	8004f28 <HAL_I2C_Master_Receive>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <_read_PROM+0x64>
      ms5611->result = MS5611_NOT_READ;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a08      	ldr	r2, [pc, #32]	; (8002160 <_read_PROM+0x84>)
 800213e:	619a      	str	r2, [r3, #24]

    uint16_t value = (int16_t) buf[0] << 8 | (int16_t) buf[1];
 8002140:	7a3b      	ldrb	r3, [r7, #8]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	b21a      	sxth	r2, r3
 8002146:	7a7b      	ldrb	r3, [r7, #9]
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21b      	sxth	r3, r3
 800214e:	81bb      	strh	r3, [r7, #12]
    return value;
 8002150:	89bb      	ldrh	r3, [r7, #12]
 8002152:	e000      	b.n	8002156 <_read_PROM+0x7a>
  }

  return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	fffffc19 	.word	0xfffffc19

08002164 <_reset>:

uint8_t _reset(ms5611_t *ms5611) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  _command(ms5611, MS5611_CMD_RESET);
 800216c:	211e      	movs	r1, #30
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff1e 	bl	8001fb0 <_command>
  // // While loop prevents blocking RTOS
  // uint32_t start = micros();
  // while (micros() - start < 2800) {
  //   delayMicroseconds(10);
  // }
  HAL_Delay(2800);
 8002174:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8002178:	f002 f8d6 	bl	8004328 <HAL_Delay>

  // Constants that were multiplied in read()
  // Do this once and you save CPU cycles
  ms5611->C[0] = 1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002182:	61da      	str	r2, [r3, #28]
  ms5611->C[1] = 32768L;          // SENSt1   = C[1] * 2^15
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 800218a:	621a      	str	r2, [r3, #32]
  ms5611->C[2] = 65536L;          // OFFt1    = C[2] * 2^16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f04f 428f 	mov.w	r2, #1199570944	; 0x47800000
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
  ms5611->C[3] = 3.90625E-3;      // TCS      = C[3] / 2^6
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
  ms5611->C[4] = 7.8125E-3;       // TCO      = C[4] / 2^7
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
  ms5611->C[5] = 256;             // Tref     = C[5] * 2^8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f04f 4287 	mov.w	r2, #1132462080	; 0x43800000
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->C[6] = 1.1920928955E-7; // TEMPSENS = C[6] / 2^23
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f04f 5250 	mov.w	r2, #872415232	; 0x34000000
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34

  // Read factory calibrations from EEPROM.
  uint8_t ROM_OK = 1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
  for (uint8_t reg = 0; reg < 7; reg++) {
 80021b8:	2300      	movs	r3, #0
 80021ba:	73bb      	strb	r3, [r7, #14]
 80021bc:	e038      	b.n	8002230 <_reset+0xcc>
    // Used indices match datasheet.
    // C[0] == manufacturer - read but not used;
    // C[7] == CRC - skipped.
    uint16_t tmp = _read_PROM(ms5611, reg);
 80021be:	7bbb      	ldrb	r3, [r7, #14]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff8a 	bl	80020dc <_read_PROM>
 80021c8:	4603      	mov	r3, r0
 80021ca:	81bb      	strh	r3, [r7, #12]
    ms5611->C[reg] *= tmp;
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	3306      	adds	r3, #6
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	ed93 7a00 	vldr	s14, [r3]
 80021dc:	89bb      	ldrh	r3, [r7, #12]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	3306      	adds	r3, #6
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	edc3 7a00 	vstr	s15, [r3]
    // ms5611->device_ID is a simple SHIFT XOR merge of PROM data
    ms5611->device_ID <<= 4;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	011a      	lsls	r2, r3, #4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
    ms5611->device_ID ^= tmp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002208:	89bb      	ldrh	r3, [r7, #12]
 800220a:	405a      	eors	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	639a      	str	r2, [r3, #56]	; 0x38

    if (reg > 0) {
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <_reset+0xc6>
      ROM_OK = ROM_OK && (tmp != 0);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <_reset+0xc2>
 800221c:	89bb      	ldrh	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <_reset+0xc2>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <_reset+0xc4>
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  for (uint8_t reg = 0; reg < 7; reg++) {
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	3301      	adds	r3, #1
 800222e:	73bb      	strb	r3, [r7, #14]
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d9c3      	bls.n	80021be <_reset+0x5a>
    }
  }

  return ROM_OK;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <MS5611_init>:

int MS5611_init(ms5611_t *ms5611, I2C_HandleTypeDef *i2c, uint8_t device_addr) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	71fb      	strb	r3, [r7, #7]
  ms5611->i2c = i2c;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	601a      	str	r2, [r3, #0]
  ms5611->address            = device_addr;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	711a      	strb	r2, [r3, #4]
  ms5611->sampling_rate      = OSR_STANDARD;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	220a      	movs	r2, #10
 800225e:	715a      	strb	r2, [r3, #5]
  ms5611->temperature        = MS5611_NOT_READ;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <MS5611_init+0xa0>)
 8002264:	609a      	str	r2, [r3, #8]
  ms5611->pressure           = MS5611_NOT_READ;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <MS5611_init+0xa0>)
 800226a:	60da      	str	r2, [r3, #12]
  ms5611->result             = MS5611_NOT_READ;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <MS5611_init+0xa0>)
 8002270:	619a      	str	r2, [r3, #24]
  ms5611->device_ID          = 0;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
  ms5611->pressure_offset    = 0;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  ms5611->temperature_offset = 0;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
  ms5611->compensation       = 1;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (ms5611->address < 0x76 || ms5611->address > 0x77) return 1;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	2b75      	cmp	r3, #117	; 0x75
 8002296:	d903      	bls.n	80022a0 <MS5611_init+0x60>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	791b      	ldrb	r3, [r3, #4]
 800229c:	2b77      	cmp	r3, #119	; 0x77
 800229e:	d901      	bls.n	80022a4 <MS5611_init+0x64>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e019      	b.n	80022d8 <MS5611_init+0x98>

  if (HAL_I2C_IsDeviceReady(ms5611->i2c, ms5611->address << 1, 100, 1000) != HAL_OK) return 2;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	791b      	ldrb	r3, [r3, #4]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	b299      	uxth	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b6:	2264      	movs	r2, #100	; 0x64
 80022b8:	f003 f91a 	bl	80054f0 <HAL_I2C_IsDeviceReady>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MS5611_init+0x86>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e008      	b.n	80022d8 <MS5611_init+0x98>

  if (!_reset(ms5611))
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff ff4c 	bl	8002164 <_reset>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <MS5611_init+0x96>
    return 3;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e000      	b.n	80022d8 <MS5611_init+0x98>

  return 0;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	fffffc19 	.word	0xfffffc19

080022e4 <MS5611_set_oversampling>:

void MS5611_set_oversampling(ms5611_t *ms5611, osr sampling_rate) {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  ms5611->sampling_rate = (uint8_t) sampling_rate;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	715a      	strb	r2, [r3, #5]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <MS5611_read>:

int MS5611_read(ms5611_t *ms5611) {
 8002304:	b5b0      	push	{r4, r5, r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  // VARIABLES NAMES BASED ON DATASHEET
  // ALL MAGIC NUMBERS ARE FROM DATASHEET

  _convert(ms5611, MS5611_CMD_CONVERT_D1, ms5611->sampling_rate);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	795b      	ldrb	r3, [r3, #5]
 8002310:	461a      	mov	r2, r3
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff fe6d 	bl	8001ff4 <_convert>
  if (ms5611->result) return 1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MS5611_read+0x22>
 8002322:	2301      	movs	r3, #1
 8002324:	e129      	b.n	800257a <MS5611_read+0x276>
  // NOTE: D1 and D2 seem reserved in MBED (NANO BLE)
  uint32_t _D1 = _read_ADC(ms5611);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fe9c 	bl	8002064 <_read_ADC>
 800232c:	61f8      	str	r0, [r7, #28]
  if (ms5611->result) return 2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MS5611_read+0x36>
 8002336:	2302      	movs	r3, #2
 8002338:	e11f      	b.n	800257a <MS5611_read+0x276>

  _convert(ms5611, MS5611_CMD_CONVERT_D2, ms5611->sampling_rate);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	795b      	ldrb	r3, [r3, #5]
 800233e:	461a      	mov	r2, r3
 8002340:	2150      	movs	r1, #80	; 0x50
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fe56 	bl	8001ff4 <_convert>
  if (ms5611->result) return 3;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MS5611_read+0x50>
 8002350:	2303      	movs	r3, #3
 8002352:	e112      	b.n	800257a <MS5611_read+0x276>
  uint32_t _D2 = _read_ADC(ms5611);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fe85 	bl	8002064 <_read_ADC>
 800235a:	61b8      	str	r0, [r7, #24]
  if (ms5611->result) return 4;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MS5611_read+0x64>
 8002364:	2304      	movs	r3, #4
 8002366:	e108      	b.n	800257a <MS5611_read+0x276>

  // TEMP & PRESS MATH - PAGE 7/20
  float dT = _D2 - ms5611->C[5];
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	edc7 7a05 	vstr	s15, [r7, #20]
  ms5611->temperature = 2000 + dT * ms5611->C[6];
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002386:	edd7 7a05 	vldr	s15, [r7, #20]
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002584 <MS5611_read+0x280>
 8002392:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239a:	ee17 2a90 	vmov	r2, s15
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]

  float offset =  ms5611->C[2] + dT * ms5611->C[4];
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80023ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float sens = ms5611->C[1] + dT * ms5611->C[3];
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	ed93 7a08 	vldr	s14, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80023ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  if (ms5611->compensation == 1) {
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f040 8098 	bne.w	8002516 <MS5611_read+0x212>
    // SECOND ORDER COMPENSATION - PAGE 8/20
    // COMMENT OUT < 2000 CORRECTION IF NOT NEEDED
    // NOTE TEMPERATURE IS IN 0.01 C
    if (ms5611->temperature < 2000) {
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80023ee:	f280 8092 	bge.w	8002516 <MS5611_read+0x212>
      float T2 = dT * dT * 4.6566128731E-10;
 80023f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80023f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023fa:	ee17 0a90 	vmov	r0, s15
 80023fe:	f7fe f8a3 	bl	8000548 <__aeabi_f2d>
 8002402:	f245 5269 	movw	r2, #21865	; 0x5569
 8002406:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800240a:	f7fe f8f5 	bl	80005f8 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fbc7 	bl	8000ba8 <__aeabi_d2f>
 800241a:	4603      	mov	r3, r0
 800241c:	613b      	str	r3, [r7, #16]
      float t = (ms5611->temperature - 2000) * (ms5611->temperature - 2000);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243a:	edc7 7a03 	vstr	s15, [r7, #12]
      float offset2 = 2.5 * t;
 800243e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002442:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      float sens2 = 1.25 * t;
 800244e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002452:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8002456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245a:	edc7 7a08 	vstr	s15, [r7, #32]
      // COMMENT OUT < -1500 CORRECTION IF NOT NEEDED
      if (ms5611->temperature < -1500) {
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	4a49      	ldr	r2, [pc, #292]	; (8002588 <MS5611_read+0x284>)
 8002464:	4293      	cmp	r3, r2
 8002466:	da36      	bge.n	80024d6 <MS5611_read+0x1d2>
        t = (ms5611->temperature + 1500) * (ms5611->temperature + 1500);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6892      	ldr	r2, [r2, #8]
 8002474:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002484:	edc7 7a03 	vstr	s15, [r7, #12]
        offset2 += 7 * t;
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        sens2 += 5.5 * t;
 80024a0:	6a38      	ldr	r0, [r7, #32]
 80024a2:	f7fe f851 	bl	8000548 <__aeabi_f2d>
 80024a6:	4604      	mov	r4, r0
 80024a8:	460d      	mov	r5, r1
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7fe f84c 	bl	8000548 <__aeabi_f2d>
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <MS5611_read+0x288>)
 80024b6:	f7fe f89f 	bl	80005f8 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd fee3 	bl	800028c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7fe fb6b 	bl	8000ba8 <__aeabi_d2f>
 80024d2:	4603      	mov	r3, r0
 80024d4:	623b      	str	r3, [r7, #32]
      }
      ms5611->temperature -= T2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ee:	ee17 2a90 	vmov	r2, s15
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	609a      	str	r2, [r3, #8]
      offset -= offset2;
 80024f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002502:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      sens -= sens2;
 8002506:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800250a:	edd7 7a08 	vldr	s15, [r7, #32]
 800250e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002512:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }
    // END SECOND ORDER COMPENSATION
  }

  ms5611->pressure = (_D1 * sens * 4.76837158205E-7 - offset) * 3.051757813E-5;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002520:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002528:	ee17 0a90 	vmov	r0, s15
 800252c:	f7fe f80c 	bl	8000548 <__aeabi_f2d>
 8002530:	f244 522d 	movw	r2, #17709	; 0x452d
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <MS5611_read+0x28c>)
 8002536:	f7fe f85f 	bl	80005f8 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4614      	mov	r4, r2
 8002540:	461d      	mov	r5, r3
 8002542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002544:	f7fe f800 	bl	8000548 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fd fe9a 	bl	8000288 <__aeabi_dsub>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <MS5611_read+0x290>)
 800255e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002562:	f7fe f849 	bl	80005f8 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe faf3 	bl	8000b58 <__aeabi_d2iz>
 8002572:	4602      	mov	r2, r0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	60da      	str	r2, [r3, #12]

  return 0;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3730      	adds	r7, #48	; 0x30
 800257e:	46bd      	mov	sp, r7
 8002580:	bdb0      	pop	{r4, r5, r7, pc}
 8002582:	bf00      	nop
 8002584:	44fa0000 	.word	0x44fa0000
 8002588:	fffffa24 	.word	0xfffffa24
 800258c:	40160000 	.word	0x40160000
 8002590:	3ea00000 	.word	0x3ea00000
 8002594:	000b424e 	.word	0x000b424e

08002598 <MS5611_getTemperature>:

float MS5611_getTemperature(ms5611_t *ms5611) {
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if (ms5611->temperature_offset == 0)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80025a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d111      	bne.n	80025d4 <MS5611_getTemperature+0x3c>
    return ms5611->temperature * 0.01;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffb5 	bl	8000524 <__aeabi_i2d>
 80025ba:	a31b      	add	r3, pc, #108	; (adr r3, 8002628 <MS5611_getTemperature+0x90>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fe f81a 	bl	80005f8 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7fe faec 	bl	8000ba8 <__aeabi_d2f>
 80025d0:	4603      	mov	r3, r0
 80025d2:	e01f      	b.n	8002614 <MS5611_getTemperature+0x7c>

  return ms5611->temperature * 0.01 + ms5611->temperature_offset;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffa3 	bl	8000524 <__aeabi_i2d>
 80025de:	a312      	add	r3, pc, #72	; (adr r3, 8002628 <MS5611_getTemperature+0x90>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fe f808 	bl	80005f8 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4614      	mov	r4, r2
 80025ee:	461d      	mov	r5, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffa7 	bl	8000548 <__aeabi_f2d>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd fe43 	bl	800028c <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe facb 	bl	8000ba8 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
};
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eeb0 0a67 	vmov.f32	s0, s15
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bdb0      	pop	{r4, r5, r7, pc}
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	47ae147b 	.word	0x47ae147b
 800262c:	3f847ae1 	.word	0x3f847ae1

08002630 <MS5611_getPressure>:

float MS5611_getPressure(ms5611_t *ms5611) {
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if (ms5611->pressure_offset == 0)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	edd3 7a04 	vldr	s15, [r3, #16]
 800263e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002646:	d111      	bne.n	800266c <MS5611_getPressure+0x3c>
    return ms5611->pressure * 0.01;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff69 	bl	8000524 <__aeabi_i2d>
 8002652:	a31b      	add	r3, pc, #108	; (adr r3, 80026c0 <MS5611_getPressure+0x90>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fd ffce 	bl	80005f8 <__aeabi_dmul>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fe faa0 	bl	8000ba8 <__aeabi_d2f>
 8002668:	4603      	mov	r3, r0
 800266a:	e01f      	b.n	80026ac <MS5611_getPressure+0x7c>

  return ms5611->pressure * 0.01 + ms5611->pressure_offset;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd ff57 	bl	8000524 <__aeabi_i2d>
 8002676:	a312      	add	r3, pc, #72	; (adr r3, 80026c0 <MS5611_getPressure+0x90>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fd ffbc 	bl	80005f8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4614      	mov	r4, r2
 8002686:	461d      	mov	r5, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff5b 	bl	8000548 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fd fdf7 	bl	800028c <__adddf3>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fe fa7f 	bl	8000ba8 <__aeabi_d2f>
 80026aa:	4603      	mov	r3, r0
};
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eeb0 0a67 	vmov.f32	s0, s15
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	f3af 8000 	nop.w
 80026c0:	47ae147b 	.word	0x47ae147b
 80026c4:	3f847ae1 	.word	0x3f847ae1

080026c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_MspInit+0x4c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_MspInit+0x4c>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_MspInit+0x4c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_MspInit+0x4c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_MspInit+0x4c>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_MspInit+0x4c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a21      	ldr	r2, [pc, #132]	; (80027bc <HAL_I2C_MspInit+0xa4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d13b      	bne.n	80027b2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_I2C_MspInit+0xa8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_I2C_MspInit+0xa8>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_I2C_MspInit+0xa8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002756:	23c0      	movs	r3, #192	; 0xc0
 8002758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800275a:	2312      	movs	r3, #18
 800275c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002766:	2304      	movs	r3, #4
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	4814      	ldr	r0, [pc, #80]	; (80027c4 <HAL_I2C_MspInit+0xac>)
 8002772:	f001 ffaf 	bl	80046d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_I2C_MspInit+0xa8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_I2C_MspInit+0xa8>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_I2C_MspInit+0xa8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	201f      	movs	r0, #31
 8002798:	f001 fec5 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800279c:	201f      	movs	r0, #31
 800279e:	f001 fede 	bl	800455e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2020      	movs	r0, #32
 80027a8:	f001 febd 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027ac:	2020      	movs	r0, #32
 80027ae:	f001 fed6 	bl	800455e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40005400 	.word	0x40005400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020400 	.word	0x40020400

080027c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_SPI_MspInit+0xc0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d14a      	bne.n	8002880 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_SPI_MspInit+0xc4>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a26      	ldr	r2, [pc, #152]	; (800288c <HAL_SPI_MspInit+0xc4>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_SPI_MspInit+0xc4>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_SPI_MspInit+0xc4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <HAL_SPI_MspInit+0xc4>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_SPI_MspInit+0xc4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_SPI_MspInit+0xc4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_SPI_MspInit+0xc4>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_SPI_MspInit+0xc4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800283e:	230c      	movs	r3, #12
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800284e:	2305      	movs	r3, #5
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	480d      	ldr	r0, [pc, #52]	; (8002890 <HAL_SPI_MspInit+0xc8>)
 800285a:	f001 ff3b 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800285e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002870:	2305      	movs	r3, #5
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <HAL_SPI_MspInit+0xcc>)
 800287c:	f001 ff2a 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40003800 	.word	0x40003800
 800288c:	40023800 	.word	0x40023800
 8002890:	40020800 	.word	0x40020800
 8002894:	40020400 	.word	0x40020400

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a3f      	ldr	r2, [pc, #252]	; (80029b4 <HAL_TIM_Base_MspInit+0x11c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a3d      	ldr	r2, [pc, #244]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028d6:	e069      	b.n	80029ac <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e0:	d10e      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
}
 80028fe:	e055      	b.n	80029ac <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <HAL_TIM_Base_MspInit+0x124>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d116      	bne.n	8002938 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	201d      	movs	r0, #29
 800292c:	f001 fdfb 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002930:	201d      	movs	r0, #29
 8002932:	f001 fe14 	bl	800455e <HAL_NVIC_EnableIRQ>
}
 8002936:	e039      	b.n	80029ac <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d134      	bne.n	80029ac <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_TIM_Base_MspInit+0x120>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800297a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800298c:	2302      	movs	r3, #2
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	480b      	ldr	r0, [pc, #44]	; (80029c4 <HAL_TIM_Base_MspInit+0x12c>)
 8002998:	f001 fe9c 	bl	80046d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	201e      	movs	r0, #30
 80029a2:	f001 fdc0 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029a6:	201e      	movs	r0, #30
 80029a8:	f001 fdd9 	bl	800455e <HAL_NVIC_EnableIRQ>
}
 80029ac:	bf00      	nop
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40020c00 	.word	0x40020c00

080029c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_TIM_MspPostInit+0xb0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d11f      	bne.n	8002a2a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_TIM_MspPostInit+0xb4>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_TIM_MspPostInit+0xb4>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_TIM_MspPostInit+0xb4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002a06:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4619      	mov	r1, r3
 8002a22:	4817      	ldr	r0, [pc, #92]	; (8002a80 <HAL_TIM_MspPostInit+0xb8>)
 8002a24:	f001 fe56 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a28:	e022      	b.n	8002a70 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d11d      	bne.n	8002a70 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_TIM_MspPostInit+0xb4>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_TIM_MspPostInit+0xb4>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6313      	str	r3, [r2, #48]	; 0x30
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_TIM_MspPostInit+0xb4>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a50:	230f      	movs	r3, #15
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a60:	2301      	movs	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	; (8002a84 <HAL_TIM_MspPostInit+0xbc>)
 8002a6c:	f001 fe32 	bl	80046d4 <HAL_GPIO_Init>
}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40020000 	.word	0x40020000

08002a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_UART_MspInit+0x94>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d134      	bne.n	8002b14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <HAL_UART_MspInit+0x98>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_UART_MspInit+0x98>)
 8002ab4:	f043 0310 	orr.w	r3, r3, #16
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_UART_MspInit+0x98>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_UART_MspInit+0x98>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_UART_MspInit+0x98>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_UART_MspInit+0x98>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af4:	2307      	movs	r3, #7
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	4809      	ldr	r0, [pc, #36]	; (8002b24 <HAL_UART_MspInit+0x9c>)
 8002b00:	f001 fde8 	bl	80046d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b04:	2200      	movs	r2, #0
 8002b06:	2100      	movs	r1, #0
 8002b08:	2025      	movs	r0, #37	; 0x25
 8002b0a:	f001 fd0c 	bl	8004526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b0e:	2025      	movs	r0, #37	; 0x25
 8002b10:	f001 fd25 	bl	800455e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b14:	bf00      	nop
 8002b16:	3728      	adds	r7, #40	; 0x28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40011000 	.word	0x40011000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020000 	.word	0x40020000

08002b28 <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b32:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b36:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	d501      	bpl.n	8002b50 <limit+0x28>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	e00b      	b.n	8002b68 <limit+0x40>
 8002b50:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	dd01      	ble.n	8002b66 <limit+0x3e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	e000      	b.n	8002b68 <limit+0x40>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	ee07 3a90 	vmov	s15, r3
}
 8002b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002b96:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <calc_angles>:

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles() {
 8002bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bbc:	af00      	add	r7, sp, #0
  // Angle calculation using integration
  gyro_angle[X] += (g_gx / (FREQ * SSF_GYRO));
 8002bbe:	4bd0      	ldr	r3, [pc, #832]	; (8002f00 <calc_angles+0x348>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fcc0 	bl	8000548 <__aeabi_f2d>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	460d      	mov	r5, r1
 8002bcc:	4bcd      	ldr	r3, [pc, #820]	; (8002f04 <calc_angles+0x34c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcb9 	bl	8000548 <__aeabi_f2d>
 8002bd6:	a3c2      	add	r3, pc, #776	; (adr r3, 8002ee0 <calc_angles+0x328>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd fe36 	bl	800084c <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4620      	mov	r0, r4
 8002be6:	4629      	mov	r1, r5
 8002be8:	f7fd fb50 	bl	800028c <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fd ffd8 	bl	8000ba8 <__aeabi_d2f>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4ac1      	ldr	r2, [pc, #772]	; (8002f00 <calc_angles+0x348>)
 8002bfc:	6013      	str	r3, [r2, #0]
  gyro_angle[Y] += (-g_gy / (FREQ * SSF_GYRO)); // Change sign to match the accelerometer's one
 8002bfe:	4bc0      	ldr	r3, [pc, #768]	; (8002f00 <calc_angles+0x348>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fca0 	bl	8000548 <__aeabi_f2d>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	460d      	mov	r5, r1
 8002c0c:	4bbe      	ldr	r3, [pc, #760]	; (8002f08 <calc_angles+0x350>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	eef1 7a67 	vneg.f32	s15, s15
 8002c16:	ee17 3a90 	vmov	r3, s15
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc94 	bl	8000548 <__aeabi_f2d>
 8002c20:	a3af      	add	r3, pc, #700	; (adr r3, 8002ee0 <calc_angles+0x328>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fe11 	bl	800084c <__aeabi_ddiv>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f7fd fb2b 	bl	800028c <__adddf3>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fd ffb3 	bl	8000ba8 <__aeabi_d2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4aae      	ldr	r2, [pc, #696]	; (8002f00 <calc_angles+0x348>)
 8002c46:	6053      	str	r3, [r2, #4]

  // Transfer roll to pitch if IMU has yawed
  gyro_angle[Y] += gyro_angle[X] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002c48:	4bad      	ldr	r3, [pc, #692]	; (8002f00 <calc_angles+0x348>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc7b 	bl	8000548 <__aeabi_f2d>
 8002c52:	4604      	mov	r4, r0
 8002c54:	460d      	mov	r5, r1
 8002c56:	4baa      	ldr	r3, [pc, #680]	; (8002f00 <calc_angles+0x348>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc74 	bl	8000548 <__aeabi_f2d>
 8002c60:	4680      	mov	r8, r0
 8002c62:	4689      	mov	r9, r1
 8002c64:	4ba9      	ldr	r3, [pc, #676]	; (8002f0c <calc_angles+0x354>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc6d 	bl	8000548 <__aeabi_f2d>
 8002c6e:	a39e      	add	r3, pc, #632	; (adr r3, 8002ee8 <calc_angles+0x330>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fcc0 	bl	80005f8 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	ec43 2b17 	vmov	d7, r2, r3
 8002c80:	eeb0 0a47 	vmov.f32	s0, s14
 8002c84:	eef0 0a67 	vmov.f32	s1, s15
 8002c88:	f008 f9d2 	bl	800b030 <sin>
 8002c8c:	ec53 2b10 	vmov	r2, r3, d0
 8002c90:	4640      	mov	r0, r8
 8002c92:	4649      	mov	r1, r9
 8002c94:	f7fd fcb0 	bl	80005f8 <__aeabi_dmul>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	f7fd faf4 	bl	800028c <__adddf3>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7fd ff7c 	bl	8000ba8 <__aeabi_d2f>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4a93      	ldr	r2, [pc, #588]	; (8002f00 <calc_angles+0x348>)
 8002cb4:	6053      	str	r3, [r2, #4]
  gyro_angle[X] -= gyro_angle[Y] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002cb6:	4b92      	ldr	r3, [pc, #584]	; (8002f00 <calc_angles+0x348>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fc44 	bl	8000548 <__aeabi_f2d>
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	460d      	mov	r5, r1
 8002cc4:	4b8e      	ldr	r3, [pc, #568]	; (8002f00 <calc_angles+0x348>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc3d 	bl	8000548 <__aeabi_f2d>
 8002cce:	4680      	mov	r8, r0
 8002cd0:	4689      	mov	r9, r1
 8002cd2:	4b8e      	ldr	r3, [pc, #568]	; (8002f0c <calc_angles+0x354>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc36 	bl	8000548 <__aeabi_f2d>
 8002cdc:	a382      	add	r3, pc, #520	; (adr r3, 8002ee8 <calc_angles+0x330>)
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f7fd fc89 	bl	80005f8 <__aeabi_dmul>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	ec43 2b17 	vmov	d7, r2, r3
 8002cee:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf2:	eef0 0a67 	vmov.f32	s1, s15
 8002cf6:	f008 f99b 	bl	800b030 <sin>
 8002cfa:	ec53 2b10 	vmov	r2, r3, d0
 8002cfe:	4640      	mov	r0, r8
 8002d00:	4649      	mov	r1, r9
 8002d02:	f7fd fc79 	bl	80005f8 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	f7fd fabb 	bl	8000288 <__aeabi_dsub>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f7fd ff45 	bl	8000ba8 <__aeabi_d2f>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a77      	ldr	r2, [pc, #476]	; (8002f00 <calc_angles+0x348>)
 8002d22:	6013      	str	r3, [r2, #0]

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  acc_total_vector = sqrt(pow(g_ax, 2) + pow(g_ay, 2) + pow(g_az, 2));
 8002d24:	4b7a      	ldr	r3, [pc, #488]	; (8002f10 <calc_angles+0x358>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fc0d 	bl	8000548 <__aeabi_f2d>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002ef0 <calc_angles+0x338>
 8002d36:	ec43 2b10 	vmov	d0, r2, r3
 8002d3a:	f008 fa05 	bl	800b148 <pow>
 8002d3e:	ec55 4b10 	vmov	r4, r5, d0
 8002d42:	4b74      	ldr	r3, [pc, #464]	; (8002f14 <calc_angles+0x35c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fbfe 	bl	8000548 <__aeabi_f2d>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8002ef0 <calc_angles+0x338>
 8002d54:	ec43 2b10 	vmov	d0, r2, r3
 8002d58:	f008 f9f6 	bl	800b148 <pow>
 8002d5c:	ec53 2b10 	vmov	r2, r3, d0
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fa92 	bl	800028c <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	4b69      	ldr	r3, [pc, #420]	; (8002f18 <calc_angles+0x360>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fbe7 	bl	8000548 <__aeabi_f2d>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8002ef0 <calc_angles+0x338>
 8002d82:	ec43 2b10 	vmov	d0, r2, r3
 8002d86:	f008 f9df 	bl	800b148 <pow>
 8002d8a:	ec53 2b10 	vmov	r2, r3, d0
 8002d8e:	4620      	mov	r0, r4
 8002d90:	4629      	mov	r1, r5
 8002d92:	f7fd fa7b 	bl	800028c <__adddf3>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	ec43 2b17 	vmov	d7, r2, r3
 8002d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002da2:	eef0 0a67 	vmov.f32	s1, s15
 8002da6:	f008 fa3f 	bl	800b228 <sqrt>
 8002daa:	ec53 2b10 	vmov	r2, r3, d0
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd fed1 	bl	8000b58 <__aeabi_d2iz>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <calc_angles+0x364>)
 8002dba:	6013      	str	r3, [r2, #0]

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(g_ax) < acc_total_vector) {
 8002dbc:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <calc_angles+0x358>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc6:	ee17 3a90 	vmov	r3, s15
 8002dca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002dce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002dd2:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <calc_angles+0x364>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	da24      	bge.n	8002e24 <calc_angles+0x26c>
    acc_angle[X] = asin((float)g_ay / acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8002dda:	4b4e      	ldr	r3, [pc, #312]	; (8002f14 <calc_angles+0x35c>)
 8002ddc:	ed93 7a00 	vldr	s14, [r3]
 8002de0:	4b4e      	ldr	r3, [pc, #312]	; (8002f1c <calc_angles+0x364>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002df0:	ee16 0a90 	vmov	r0, s13
 8002df4:	f7fd fba8 	bl	8000548 <__aeabi_f2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	ec43 2b10 	vmov	d0, r2, r3
 8002e00:	f008 f96e 	bl	800b0e0 <asin>
 8002e04:	ec51 0b10 	vmov	r0, r1, d0
 8002e08:	a33b      	add	r3, pc, #236	; (adr r3, 8002ef8 <calc_angles+0x340>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f7fd fbf3 	bl	80005f8 <__aeabi_dmul>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd fec5 	bl	8000ba8 <__aeabi_d2f>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a3f      	ldr	r2, [pc, #252]	; (8002f20 <calc_angles+0x368>)
 8002e22:	6013      	str	r3, [r2, #0]
  }

  if (abs(g_ay) < acc_total_vector) {
 8002e24:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <calc_angles+0x35c>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2e:	ee17 3a90 	vmov	r3, s15
 8002e32:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e36:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <calc_angles+0x364>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	da24      	bge.n	8002e8c <calc_angles+0x2d4>
    acc_angle[Y] = asin((float)g_ax / acc_total_vector) * (180 / M_PI);
 8002e42:	4b33      	ldr	r3, [pc, #204]	; (8002f10 <calc_angles+0x358>)
 8002e44:	ed93 7a00 	vldr	s14, [r3]
 8002e48:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <calc_angles+0x364>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e58:	ee16 0a90 	vmov	r0, s13
 8002e5c:	f7fd fb74 	bl	8000548 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	ec43 2b10 	vmov	d0, r2, r3
 8002e68:	f008 f93a 	bl	800b0e0 <asin>
 8002e6c:	ec51 0b10 	vmov	r0, r1, d0
 8002e70:	a321      	add	r3, pc, #132	; (adr r3, 8002ef8 <calc_angles+0x340>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fbbf 	bl	80005f8 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fe91 	bl	8000ba8 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <calc_angles+0x368>)
 8002e8a:	6053      	str	r3, [r2, #4]
  }

  if (initialized == 1) {
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <calc_angles+0x36c>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d178      	bne.n	8002f86 <calc_angles+0x3ce>
    // Correct the drift of the gyro with the accelerometer
    gyro_angle[X] = gyro_angle[X] * 0.5 + acc_angle[X] * 0.5;
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <calc_angles+0x348>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb55 	bl	8000548 <__aeabi_f2d>
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <calc_angles+0x370>)
 8002ea4:	f7fd fba8 	bl	80005f8 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	461d      	mov	r5, r3
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <calc_angles+0x368>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb47 	bl	8000548 <__aeabi_f2d>
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <calc_angles+0x370>)
 8002ec0:	f7fd fb9a 	bl	80005f8 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f9de 	bl	800028c <__adddf3>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	e028      	b.n	8002f2c <calc_angles+0x374>
 8002eda:	bf00      	nop
 8002edc:	f3af 8000 	nop.w
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40c99600 	.word	0x40c99600
 8002ee8:	fb7aa1c6 	.word	0xfb7aa1c6
 8002eec:	3eb65a3c 	.word	0x3eb65a3c
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40000000 	.word	0x40000000
 8002ef8:	1a63c1f8 	.word	0x1a63c1f8
 8002efc:	404ca5dc 	.word	0x404ca5dc
 8002f00:	200005ec 	.word	0x200005ec
 8002f04:	200005e0 	.word	0x200005e0
 8002f08:	200005e4 	.word	0x200005e4
 8002f0c:	200005e8 	.word	0x200005e8
 8002f10:	200005d4 	.word	0x200005d4
 8002f14:	200005d8 	.word	0x200005d8
 8002f18:	200005dc 	.word	0x200005dc
 8002f1c:	20000610 	.word	0x20000610
 8002f20:	200005f8 	.word	0x200005f8
 8002f24:	20000614 	.word	0x20000614
 8002f28:	3fe00000 	.word	0x3fe00000
 8002f2c:	f7fd fe3c 	bl	8000ba8 <__aeabi_d2f>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <calc_angles+0x510>)
 8002f34:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = gyro_angle[Y] * 0.5 + acc_angle[Y] * 0.5;
 8002f36:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <calc_angles+0x510>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fb04 	bl	8000548 <__aeabi_f2d>
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	4b61      	ldr	r3, [pc, #388]	; (80030cc <calc_angles+0x514>)
 8002f46:	f7fd fb57 	bl	80005f8 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4614      	mov	r4, r2
 8002f50:	461d      	mov	r5, r3
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <calc_angles+0x518>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd faf6 	bl	8000548 <__aeabi_f2d>
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	4b5a      	ldr	r3, [pc, #360]	; (80030cc <calc_angles+0x514>)
 8002f62:	f7fd fb49 	bl	80005f8 <__aeabi_dmul>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f7fd f98d 	bl	800028c <__adddf3>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7fd fe15 	bl	8000ba8 <__aeabi_d2f>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a51      	ldr	r2, [pc, #324]	; (80030c8 <calc_angles+0x510>)
 8002f82:	6053      	str	r3, [r2, #4]
 8002f84:	e00a      	b.n	8002f9c <calc_angles+0x3e4>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    gyro_angle[X] = acc_angle[X];
 8002f86:	4b52      	ldr	r3, [pc, #328]	; (80030d0 <calc_angles+0x518>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a4f      	ldr	r2, [pc, #316]	; (80030c8 <calc_angles+0x510>)
 8002f8c:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = acc_angle[Y];
 8002f8e:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <calc_angles+0x518>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a4d      	ldr	r2, [pc, #308]	; (80030c8 <calc_angles+0x510>)
 8002f94:	6053      	str	r3, [r2, #4]

    initialized = 1;
 8002f96:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <calc_angles+0x51c>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
  }

  // To dampen the pitch and roll angles a complementary filter is used
  measures[ROLL] = measures[ROLL] * 0.9 + gyro_angle[X] * 0.1;
 8002f9c:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <calc_angles+0x520>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fad1 	bl	8000548 <__aeabi_f2d>
 8002fa6:	a342      	add	r3, pc, #264	; (adr r3, 80030b0 <calc_angles+0x4f8>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f7fd fb24 	bl	80005f8 <__aeabi_dmul>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <calc_angles+0x510>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fac3 	bl	8000548 <__aeabi_f2d>
 8002fc2:	a33d      	add	r3, pc, #244	; (adr r3, 80030b8 <calc_angles+0x500>)
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f7fd fb16 	bl	80005f8 <__aeabi_dmul>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	f7fd f95a 	bl	800028c <__adddf3>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fde2 	bl	8000ba8 <__aeabi_d2f>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4a3c      	ldr	r2, [pc, #240]	; (80030d8 <calc_angles+0x520>)
 8002fe8:	6093      	str	r3, [r2, #8]
  measures[PITCH] = measures[PITCH] * 0.9 + gyro_angle[Y] * 0.1;
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <calc_angles+0x520>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd faaa 	bl	8000548 <__aeabi_f2d>
 8002ff4:	a32e      	add	r3, pc, #184	; (adr r3, 80030b0 <calc_angles+0x4f8>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd fafd 	bl	80005f8 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4614      	mov	r4, r2
 8003004:	461d      	mov	r5, r3
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <calc_angles+0x510>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fa9c 	bl	8000548 <__aeabi_f2d>
 8003010:	a329      	add	r3, pc, #164	; (adr r3, 80030b8 <calc_angles+0x500>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f7fd faef 	bl	80005f8 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4620      	mov	r0, r4
 8003020:	4629      	mov	r1, r5
 8003022:	f7fd f933 	bl	800028c <__adddf3>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fdbb 	bl	8000ba8 <__aeabi_d2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <calc_angles+0x520>)
 8003036:	6053      	str	r3, [r2, #4]
  measures[YAW] = -g_gz / SSF_GYRO; // Store the angular motion for this axis
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <calc_angles+0x524>)
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	eeb1 7a67 	vneg.f32	s14, s15
 8003042:	eddf 6a27 	vldr	s13, [pc, #156]	; 80030e0 <calc_angles+0x528>
 8003046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <calc_angles+0x520>)
 800304c:	edc3 7a00 	vstr	s15, [r3]

  // Norm [-1, 1]
  g_angle_x = -measures[PITCH];
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <calc_angles+0x520>)
 8003052:	edd3 7a01 	vldr	s15, [r3, #4]
 8003056:	eef1 7a67 	vneg.f32	s15, s15
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <calc_angles+0x52c>)
 800305c:	edc3 7a00 	vstr	s15, [r3]
  g_angle_y = measures[ROLL];
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <calc_angles+0x520>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <calc_angles+0x530>)
 8003066:	6013      	str	r3, [r2, #0]
  g_angle_z += measures[YAW]*0.001;
 8003068:	4b20      	ldr	r3, [pc, #128]	; (80030ec <calc_angles+0x534>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa6b 	bl	8000548 <__aeabi_f2d>
 8003072:	4604      	mov	r4, r0
 8003074:	460d      	mov	r5, r1
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <calc_angles+0x520>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa64 	bl	8000548 <__aeabi_f2d>
 8003080:	a30f      	add	r3, pc, #60	; (adr r3, 80030c0 <calc_angles+0x508>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fab7 	bl	80005f8 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f7fd f8fb 	bl	800028c <__adddf3>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd83 	bl	8000ba8 <__aeabi_d2f>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a11      	ldr	r2, [pc, #68]	; (80030ec <calc_angles+0x534>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030ae:	bf00      	nop
 80030b0:	cccccccd 	.word	0xcccccccd
 80030b4:	3feccccc 	.word	0x3feccccc
 80030b8:	9999999a 	.word	0x9999999a
 80030bc:	3fb99999 	.word	0x3fb99999
 80030c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030c4:	3f50624d 	.word	0x3f50624d
 80030c8:	200005ec 	.word	0x200005ec
 80030cc:	3fe00000 	.word	0x3fe00000
 80030d0:	200005f8 	.word	0x200005f8
 80030d4:	20000614 	.word	0x20000614
 80030d8:	20000604 	.word	0x20000604
 80030dc:	200005e8 	.word	0x200005e8
 80030e0:	42830000 	.word	0x42830000
 80030e4:	20000618 	.word	0x20000618
 80030e8:	2000061c 	.word	0x2000061c
 80030ec:	20000620 	.word	0x20000620

080030f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <NMI_Handler+0x4>

080030f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030fa:	e7fe      	b.n	80030fa <HardFault_Handler+0x4>

080030fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <MemManage_Handler+0x4>

08003102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003106:	e7fe      	b.n	8003106 <BusFault_Handler+0x4>

08003108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800310c:	e7fe      	b.n	800310c <UsageFault_Handler+0x4>

0800310e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800313c:	f001 f8d4 	bl	80042e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	0000      	movs	r0, r0
	...

08003148 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  // Activate reading
  MPU6050_update(&g_mpu6050);
 800314e:	48d0      	ldr	r0, [pc, #832]	; (8003490 <TIM3_IRQHandler+0x348>)
 8003150:	f7fe fe8c 	bl	8001e6c <MPU6050_update>

  // Raw 6-axis, remove noise
  g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], g_mpu6050.ax) + g_ax_offset;
 8003154:	4bce      	ldr	r3, [pc, #824]	; (8003490 <TIM3_IRQHandler+0x348>)
 8003156:	edd3 7a02 	vldr	s15, [r3, #8]
 800315a:	eeb0 0a67 	vmov.f32	s0, s15
 800315e:	48cd      	ldr	r0, [pc, #820]	; (8003494 <TIM3_IRQHandler+0x34c>)
 8003160:	f7fd ff0d 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003164:	eeb0 7a40 	vmov.f32	s14, s0
 8003168:	4bcb      	ldr	r3, [pc, #812]	; (8003498 <TIM3_IRQHandler+0x350>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003172:	4bca      	ldr	r3, [pc, #808]	; (800349c <TIM3_IRQHandler+0x354>)
 8003174:	edc3 7a00 	vstr	s15, [r3]
  g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], g_mpu6050.ay) + g_ay_offset;
 8003178:	4bc5      	ldr	r3, [pc, #788]	; (8003490 <TIM3_IRQHandler+0x348>)
 800317a:	edd3 7a03 	vldr	s15, [r3, #12]
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	48c7      	ldr	r0, [pc, #796]	; (80034a0 <TIM3_IRQHandler+0x358>)
 8003184:	f7fd fefb 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003188:	eeb0 7a40 	vmov.f32	s14, s0
 800318c:	4bc5      	ldr	r3, [pc, #788]	; (80034a4 <TIM3_IRQHandler+0x35c>)
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	4bc4      	ldr	r3, [pc, #784]	; (80034a8 <TIM3_IRQHandler+0x360>)
 8003198:	edc3 7a00 	vstr	s15, [r3]
  g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], g_mpu6050.az) + g_az_offset;
 800319c:	4bbc      	ldr	r3, [pc, #752]	; (8003490 <TIM3_IRQHandler+0x348>)
 800319e:	edd3 7a04 	vldr	s15, [r3, #16]
 80031a2:	eeb0 0a67 	vmov.f32	s0, s15
 80031a6:	48c1      	ldr	r0, [pc, #772]	; (80034ac <TIM3_IRQHandler+0x364>)
 80031a8:	f7fd fee9 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80031ac:	eeb0 7a40 	vmov.f32	s14, s0
 80031b0:	4bbf      	ldr	r3, [pc, #764]	; (80034b0 <TIM3_IRQHandler+0x368>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ba:	4bbe      	ldr	r3, [pc, #760]	; (80034b4 <TIM3_IRQHandler+0x36c>)
 80031bc:	edc3 7a00 	vstr	s15, [r3]
  g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], g_mpu6050.gx) + g_gx_offset;
 80031c0:	4bb3      	ldr	r3, [pc, #716]	; (8003490 <TIM3_IRQHandler+0x348>)
 80031c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80031c6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ca:	48bb      	ldr	r0, [pc, #748]	; (80034b8 <TIM3_IRQHandler+0x370>)
 80031cc:	f7fd fed7 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80031d0:	eeb0 7a40 	vmov.f32	s14, s0
 80031d4:	4bb9      	ldr	r3, [pc, #740]	; (80034bc <TIM3_IRQHandler+0x374>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031de:	4bb8      	ldr	r3, [pc, #736]	; (80034c0 <TIM3_IRQHandler+0x378>)
 80031e0:	edc3 7a00 	vstr	s15, [r3]
  g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], g_mpu6050.gy) + g_gy_offset;
 80031e4:	4baa      	ldr	r3, [pc, #680]	; (8003490 <TIM3_IRQHandler+0x348>)
 80031e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80031ea:	eeb0 0a67 	vmov.f32	s0, s15
 80031ee:	48b5      	ldr	r0, [pc, #724]	; (80034c4 <TIM3_IRQHandler+0x37c>)
 80031f0:	f7fd fec5 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80031f4:	eeb0 7a40 	vmov.f32	s14, s0
 80031f8:	4bb3      	ldr	r3, [pc, #716]	; (80034c8 <TIM3_IRQHandler+0x380>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	4bb2      	ldr	r3, [pc, #712]	; (80034cc <TIM3_IRQHandler+0x384>)
 8003204:	edc3 7a00 	vstr	s15, [r3]
  g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], g_mpu6050.gz) + g_gz_offset;
 8003208:	4ba1      	ldr	r3, [pc, #644]	; (8003490 <TIM3_IRQHandler+0x348>)
 800320a:	edd3 7a08 	vldr	s15, [r3, #32]
 800320e:	eeb0 0a67 	vmov.f32	s0, s15
 8003212:	48af      	ldr	r0, [pc, #700]	; (80034d0 <TIM3_IRQHandler+0x388>)
 8003214:	f7fd feb3 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003218:	eeb0 7a40 	vmov.f32	s14, s0
 800321c:	4bad      	ldr	r3, [pc, #692]	; (80034d4 <TIM3_IRQHandler+0x38c>)
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	4bac      	ldr	r3, [pc, #688]	; (80034d8 <TIM3_IRQHandler+0x390>)
 8003228:	edc3 7a00 	vstr	s15, [r3]

  calc_angles();
 800322c:	f7ff fcc4 	bl	8002bb8 <calc_angles>

  g_gyro_x = limit(g_gx, -2000, 2000) / 2000;
 8003230:	4ba3      	ldr	r3, [pc, #652]	; (80034c0 <TIM3_IRQHandler+0x378>)
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 80034dc <TIM3_IRQHandler+0x394>
 800323a:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80034e0 <TIM3_IRQHandler+0x398>
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	f7ff fc71 	bl	8002b28 <limit>
 8003246:	eeb0 7a40 	vmov.f32	s14, s0
 800324a:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80034dc <TIM3_IRQHandler+0x394>
 800324e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003252:	4ba4      	ldr	r3, [pc, #656]	; (80034e4 <TIM3_IRQHandler+0x39c>)
 8003254:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_y = limit(g_gy, -2000, 2000) / 2000;
 8003258:	4b9c      	ldr	r3, [pc, #624]	; (80034cc <TIM3_IRQHandler+0x384>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 80034dc <TIM3_IRQHandler+0x394>
 8003262:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80034e0 <TIM3_IRQHandler+0x398>
 8003266:	eeb0 0a67 	vmov.f32	s0, s15
 800326a:	f7ff fc5d 	bl	8002b28 <limit>
 800326e:	eeb0 7a40 	vmov.f32	s14, s0
 8003272:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80034dc <TIM3_IRQHandler+0x394>
 8003276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800327a:	4b9b      	ldr	r3, [pc, #620]	; (80034e8 <TIM3_IRQHandler+0x3a0>)
 800327c:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_z = limit(g_gz, -2000, 2000) / 2000;
 8003280:	4b95      	ldr	r3, [pc, #596]	; (80034d8 <TIM3_IRQHandler+0x390>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	ed9f 1a95 	vldr	s2, [pc, #596]	; 80034dc <TIM3_IRQHandler+0x394>
 800328a:	eddf 0a95 	vldr	s1, [pc, #596]	; 80034e0 <TIM3_IRQHandler+0x398>
 800328e:	eeb0 0a67 	vmov.f32	s0, s15
 8003292:	f7ff fc49 	bl	8002b28 <limit>
 8003296:	eeb0 7a40 	vmov.f32	s14, s0
 800329a:	eddf 6a90 	vldr	s13, [pc, #576]	; 80034dc <TIM3_IRQHandler+0x394>
 800329e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032a2:	4b92      	ldr	r3, [pc, #584]	; (80034ec <TIM3_IRQHandler+0x3a4>)
 80032a4:	edc3 7a00 	vstr	s15, [r3]

  // Control pitch, roll, yaw using offsets
  float angle_x = limit(g_angle_x, -90, 90) / 90 - 0.01*g_pitch;
 80032a8:	4b91      	ldr	r3, [pc, #580]	; (80034f0 <TIM3_IRQHandler+0x3a8>)
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	ed9f 1a91 	vldr	s2, [pc, #580]	; 80034f4 <TIM3_IRQHandler+0x3ac>
 80032b2:	eddf 0a91 	vldr	s1, [pc, #580]	; 80034f8 <TIM3_IRQHandler+0x3b0>
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	f7ff fc35 	bl	8002b28 <limit>
 80032be:	eef0 7a40 	vmov.f32	s15, s0
 80032c2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80034f4 <TIM3_IRQHandler+0x3ac>
 80032c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032ca:	ee16 0a90 	vmov	r0, s13
 80032ce:	f7fd f93b 	bl	8000548 <__aeabi_f2d>
 80032d2:	4604      	mov	r4, r0
 80032d4:	460d      	mov	r5, r1
 80032d6:	4b89      	ldr	r3, [pc, #548]	; (80034fc <TIM3_IRQHandler+0x3b4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f934 	bl	8000548 <__aeabi_f2d>
 80032e0:	a369      	add	r3, pc, #420	; (adr r3, 8003488 <TIM3_IRQHandler+0x340>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f987 	bl	80005f8 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fc ffc9 	bl	8000288 <__aeabi_dsub>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	f7fd fc53 	bl	8000ba8 <__aeabi_d2f>
 8003302:	4603      	mov	r3, r0
 8003304:	60fb      	str	r3, [r7, #12]
  float angle_y = limit(g_angle_y, -90, 90) / 90 - 0.01*g_roll;
 8003306:	4b7e      	ldr	r3, [pc, #504]	; (8003500 <TIM3_IRQHandler+0x3b8>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ed9f 1a79 	vldr	s2, [pc, #484]	; 80034f4 <TIM3_IRQHandler+0x3ac>
 8003310:	eddf 0a79 	vldr	s1, [pc, #484]	; 80034f8 <TIM3_IRQHandler+0x3b0>
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f7ff fc06 	bl	8002b28 <limit>
 800331c:	eef0 7a40 	vmov.f32	s15, s0
 8003320:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80034f4 <TIM3_IRQHandler+0x3ac>
 8003324:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003328:	ee16 0a90 	vmov	r0, s13
 800332c:	f7fd f90c 	bl	8000548 <__aeabi_f2d>
 8003330:	4604      	mov	r4, r0
 8003332:	460d      	mov	r5, r1
 8003334:	4b73      	ldr	r3, [pc, #460]	; (8003504 <TIM3_IRQHandler+0x3bc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f905 	bl	8000548 <__aeabi_f2d>
 800333e:	a352      	add	r3, pc, #328	; (adr r3, 8003488 <TIM3_IRQHandler+0x340>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd f958 	bl	80005f8 <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fc ff9a 	bl	8000288 <__aeabi_dsub>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f7fd fc24 	bl	8000ba8 <__aeabi_d2f>
 8003360:	4603      	mov	r3, r0
 8003362:	60bb      	str	r3, [r7, #8]
  float angle_z = limit(g_angle_z, -90, 90) / 90 - 0.01*g_yaw;
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <TIM3_IRQHandler+0x3c0>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ed9f 1a62 	vldr	s2, [pc, #392]	; 80034f4 <TIM3_IRQHandler+0x3ac>
 800336e:	eddf 0a62 	vldr	s1, [pc, #392]	; 80034f8 <TIM3_IRQHandler+0x3b0>
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	f7ff fbd7 	bl	8002b28 <limit>
 800337a:	eef0 7a40 	vmov.f32	s15, s0
 800337e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80034f4 <TIM3_IRQHandler+0x3ac>
 8003382:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003386:	ee16 0a90 	vmov	r0, s13
 800338a:	f7fd f8dd 	bl	8000548 <__aeabi_f2d>
 800338e:	4604      	mov	r4, r0
 8003390:	460d      	mov	r5, r1
 8003392:	4b5e      	ldr	r3, [pc, #376]	; (800350c <TIM3_IRQHandler+0x3c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8d6 	bl	8000548 <__aeabi_f2d>
 800339c:	a33a      	add	r3, pc, #232	; (adr r3, 8003488 <TIM3_IRQHandler+0x340>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f7fd f929 	bl	80005f8 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4620      	mov	r0, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	f7fc ff6b 	bl	8000288 <__aeabi_dsub>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f7fd fbf5 	bl	8000ba8 <__aeabi_d2f>
 80033be:	4603      	mov	r3, r0
 80033c0:	607b      	str	r3, [r7, #4]

  if (g_thrust <= -99 && g_yaw <= -99
 80033c2:	4b53      	ldr	r3, [pc, #332]	; (8003510 <TIM3_IRQHandler+0x3c8>)
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003514 <TIM3_IRQHandler+0x3cc>
 80033cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	d820      	bhi.n	8003418 <TIM3_IRQHandler+0x2d0>
 80033d6:	4b4d      	ldr	r3, [pc, #308]	; (800350c <TIM3_IRQHandler+0x3c4>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003514 <TIM3_IRQHandler+0x3cc>
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	d816      	bhi.n	8003418 <TIM3_IRQHandler+0x2d0>
      && g_pitch <= -99 && g_roll >= 98) {
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <TIM3_IRQHandler+0x3b4>)
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003514 <TIM3_IRQHandler+0x3cc>
 80033f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fc:	d80c      	bhi.n	8003418 <TIM3_IRQHandler+0x2d0>
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <TIM3_IRQHandler+0x3bc>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003518 <TIM3_IRQHandler+0x3d0>
 8003408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003410:	db02      	blt.n	8003418 <TIM3_IRQHandler+0x2d0>
    fly_mode = ready;
 8003412:	4b42      	ldr	r3, [pc, #264]	; (800351c <TIM3_IRQHandler+0x3d4>)
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
  }

  g_conn_lost_counter += 1;
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <TIM3_IRQHandler+0x3d8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <TIM3_IRQHandler+0x3d8>)
 8003420:	6013      	str	r3, [r2, #0]
  if (g_conn_lost_counter > MAX_LOST_CONN_COUNTER || g_conn_lost_counter < 0) {
 8003422:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <TIM3_IRQHandler+0x3d8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b32      	cmp	r3, #50	; 0x32
 8003428:	dc03      	bgt.n	8003432 <TIM3_IRQHandler+0x2ea>
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <TIM3_IRQHandler+0x3d8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	da14      	bge.n	800345c <TIM3_IRQHandler+0x314>
    g_I_pitch_accumulated = 0;
 8003432:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <TIM3_IRQHandler+0x3dc>)
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
    g_I_roll_accumulated = 0;
 800343a:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <TIM3_IRQHandler+0x3e0>)
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    g_I_yaw_accumulated = 0;
 8003442:	4b3a      	ldr	r3, [pc, #232]	; (800352c <TIM3_IRQHandler+0x3e4>)
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 800344a:	230f      	movs	r3, #15
 800344c:	220f      	movs	r2, #15
 800344e:	210f      	movs	r1, #15
 8003450:	200f      	movs	r0, #15
 8003452:	f7ff fb93 	bl	8002b7c <ctl_motors_speed>
    fly_mode = init;
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <TIM3_IRQHandler+0x3d4>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 800345c:	4b2f      	ldr	r3, [pc, #188]	; (800351c <TIM3_IRQHandler+0x3d4>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b06      	cmp	r3, #6
 8003462:	f200 83aa 	bhi.w	8003bba <TIM3_IRQHandler+0xa72>
 8003466:	a201      	add	r2, pc, #4	; (adr r2, 800346c <TIM3_IRQHandler+0x324>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	08003531 	.word	0x08003531
 8003470:	08003557 	.word	0x08003557
 8003474:	0800359d 	.word	0x0800359d
 8003478:	080035b3 	.word	0x080035b3
 800347c:	080035c9 	.word	0x080035c9
 8003480:	080035df 	.word	0x080035df
 8003484:	080036b5 	.word	0x080036b5
 8003488:	47ae147b 	.word	0x47ae147b
 800348c:	3f847ae1 	.word	0x3f847ae1
 8003490:	20000444 	.word	0x20000444
 8003494:	200002c4 	.word	0x200002c4
 8003498:	20000004 	.word	0x20000004
 800349c:	200005d4 	.word	0x200005d4
 80034a0:	200002dc 	.word	0x200002dc
 80034a4:	20000008 	.word	0x20000008
 80034a8:	200005d8 	.word	0x200005d8
 80034ac:	200002f4 	.word	0x200002f4
 80034b0:	2000000c 	.word	0x2000000c
 80034b4:	200005dc 	.word	0x200005dc
 80034b8:	2000030c 	.word	0x2000030c
 80034bc:	20000010 	.word	0x20000010
 80034c0:	200005e0 	.word	0x200005e0
 80034c4:	20000324 	.word	0x20000324
 80034c8:	20000014 	.word	0x20000014
 80034cc:	200005e4 	.word	0x200005e4
 80034d0:	2000033c 	.word	0x2000033c
 80034d4:	20000018 	.word	0x20000018
 80034d8:	200005e8 	.word	0x200005e8
 80034dc:	44fa0000 	.word	0x44fa0000
 80034e0:	c4fa0000 	.word	0xc4fa0000
 80034e4:	20000624 	.word	0x20000624
 80034e8:	20000628 	.word	0x20000628
 80034ec:	2000062c 	.word	0x2000062c
 80034f0:	20000618 	.word	0x20000618
 80034f4:	42b40000 	.word	0x42b40000
 80034f8:	c2b40000 	.word	0xc2b40000
 80034fc:	200006b8 	.word	0x200006b8
 8003500:	2000061c 	.word	0x2000061c
 8003504:	200006bc 	.word	0x200006bc
 8003508:	20000620 	.word	0x20000620
 800350c:	200006c0 	.word	0x200006c0
 8003510:	200006b4 	.word	0x200006b4
 8003514:	c2c60000 	.word	0xc2c60000
 8003518:	42c40000 	.word	0x42c40000
 800351c:	20000630 	.word	0x20000630
 8003520:	20000000 	.word	0x20000000
 8003524:	2000063c 	.word	0x2000063c
 8003528:	2000064c 	.word	0x2000064c
 800352c:	2000065c 	.word	0x2000065c
    case init:
      g_I_pitch_accumulated = 0;
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <TIM3_IRQHandler+0x540>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003538:	4b54      	ldr	r3, [pc, #336]	; (800368c <TIM3_IRQHandler+0x544>)
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <TIM3_IRQHandler+0x548>)
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003548:	230f      	movs	r3, #15
 800354a:	220f      	movs	r2, #15
 800354c:	210f      	movs	r1, #15
 800354e:	200f      	movs	r0, #15
 8003550:	f7ff fb14 	bl	8002b7c <ctl_motors_speed>
      break;
 8003554:	e331      	b.n	8003bba <TIM3_IRQHandler+0xa72>
    case ready:
      g_I_pitch_accumulated = 0;
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <TIM3_IRQHandler+0x540>)
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 800355e:	4b4b      	ldr	r3, [pc, #300]	; (800368c <TIM3_IRQHandler+0x544>)
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <TIM3_IRQHandler+0x548>)
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800356e:	f240 2323 	movw	r3, #547	; 0x223
 8003572:	f240 2223 	movw	r2, #547	; 0x223
 8003576:	f240 2123 	movw	r1, #547	; 0x223
 800357a:	f240 2023 	movw	r0, #547	; 0x223
 800357e:	f7ff fafd 	bl	8002b7c <ctl_motors_speed>
      if (g_thrust > 0) {
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <TIM3_IRQHandler+0x54c>)
 8003584:	edd3 7a00 	vldr	s15, [r3]
 8003588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	dc00      	bgt.n	8003594 <TIM3_IRQHandler+0x44c>
        fly_mode = testing_2;
      }

      break;
 8003592:	e312      	b.n	8003bba <TIM3_IRQHandler+0xa72>
        fly_mode = testing_2;
 8003594:	4b40      	ldr	r3, [pc, #256]	; (8003698 <TIM3_IRQHandler+0x550>)
 8003596:	2206      	movs	r2, #6
 8003598:	701a      	strb	r2, [r3, #0]
      break;
 800359a:	e30e      	b.n	8003bba <TIM3_IRQHandler+0xa72>
    case holding:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800359c:	f240 2323 	movw	r3, #547	; 0x223
 80035a0:	f240 2223 	movw	r2, #547	; 0x223
 80035a4:	f240 2123 	movw	r1, #547	; 0x223
 80035a8:	f240 2023 	movw	r0, #547	; 0x223
 80035ac:	f7ff fae6 	bl	8002b7c <ctl_motors_speed>
      break;
 80035b0:	e303      	b.n	8003bba <TIM3_IRQHandler+0xa72>
    case moving:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 80035b2:	f240 2323 	movw	r3, #547	; 0x223
 80035b6:	f240 2223 	movw	r2, #547	; 0x223
 80035ba:	f240 2123 	movw	r1, #547	; 0x223
 80035be:	f240 2023 	movw	r0, #547	; 0x223
 80035c2:	f7ff fadb 	bl	8002b7c <ctl_motors_speed>
      break;
 80035c6:	e2f8      	b.n	8003bba <TIM3_IRQHandler+0xa72>
    case landing:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 80035c8:	f240 2323 	movw	r3, #547	; 0x223
 80035cc:	f240 2223 	movw	r2, #547	; 0x223
 80035d0:	f240 2123 	movw	r1, #547	; 0x223
 80035d4:	f240 2023 	movw	r0, #547	; 0x223
 80035d8:	f7ff fad0 	bl	8002b7c <ctl_motors_speed>
      break;
 80035dc:	e2ed      	b.n	8003bba <TIM3_IRQHandler+0xa72>
    case testing_1:
      g_sig1 = MIN_SPEED + g_thrust;
 80035de:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <TIM3_IRQHandler+0x54c>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800369c <TIM3_IRQHandler+0x554>
 80035e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ec:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <TIM3_IRQHandler+0x558>)
 80035ee:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 80035f2:	4b28      	ldr	r3, [pc, #160]	; (8003694 <TIM3_IRQHandler+0x54c>)
 80035f4:	edd3 7a00 	vldr	s15, [r3]
 80035f8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800369c <TIM3_IRQHandler+0x554>
 80035fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003600:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <TIM3_IRQHandler+0x55c>)
 8003602:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <TIM3_IRQHandler+0x54c>)
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800369c <TIM3_IRQHandler+0x554>
 8003610:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <TIM3_IRQHandler+0x560>)
 8003616:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 800361a:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <TIM3_IRQHandler+0x54c>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800369c <TIM3_IRQHandler+0x554>
 8003624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003628:	4b20      	ldr	r3, [pc, #128]	; (80036ac <TIM3_IRQHandler+0x564>)
 800362a:	edc3 7a00 	vstr	s15, [r3]
      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <TIM3_IRQHandler+0x558>)
 8003630:	edd3 7a00 	vldr	s15, [r3]
 8003634:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <TIM3_IRQHandler+0x55c>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <TIM3_IRQHandler+0x560>)
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800364c:	4b17      	ldr	r3, [pc, #92]	; (80036ac <TIM3_IRQHandler+0x564>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003656:	ee17 3a90 	vmov	r3, s15
 800365a:	ee16 2a10 	vmov	r2, s12
 800365e:	ee16 1a90 	vmov	r1, s13
 8003662:	ee17 0a10 	vmov	r0, s14
 8003666:	f7ff fa89 	bl	8002b7c <ctl_motors_speed>

      if (g_thrust <= -99) {
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <TIM3_IRQHandler+0x54c>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80036b0 <TIM3_IRQHandler+0x568>
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	d900      	bls.n	8003680 <TIM3_IRQHandler+0x538>
        fly_mode = init;
      }

      break;
 800367e:	e29c      	b.n	8003bba <TIM3_IRQHandler+0xa72>
        fly_mode = init;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <TIM3_IRQHandler+0x550>)
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
      break;
 8003686:	e298      	b.n	8003bba <TIM3_IRQHandler+0xa72>
 8003688:	2000063c 	.word	0x2000063c
 800368c:	2000064c 	.word	0x2000064c
 8003690:	2000065c 	.word	0x2000065c
 8003694:	200006b4 	.word	0x200006b4
 8003698:	20000630 	.word	0x20000630
 800369c:	4408c000 	.word	0x4408c000
 80036a0:	20000664 	.word	0x20000664
 80036a4:	20000668 	.word	0x20000668
 80036a8:	2000066c 	.word	0x2000066c
 80036ac:	20000670 	.word	0x20000670
 80036b0:	c2c60000 	.word	0xc2c60000
    case testing_2:
      g_P_pitch = angle_x*g_P_pitch_gain;
 80036b4:	4bd0      	ldr	r3, [pc, #832]	; (80039f8 <TIM3_IRQHandler+0x8b0>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c8:	4bcc      	ldr	r3, [pc, #816]	; (80039fc <TIM3_IRQHandler+0x8b4>)
 80036ca:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_x*ACCUMULATION_TIME; // 0.005 = 1/FREQ
 80036ce:	4bcc      	ldr	r3, [pc, #816]	; (8003a00 <TIM3_IRQHandler+0x8b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc ff38 	bl	8000548 <__aeabi_f2d>
 80036d8:	4604      	mov	r4, r0
 80036da:	460d      	mov	r5, r1
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7fc ff33 	bl	8000548 <__aeabi_f2d>
 80036e2:	a3c3      	add	r3, pc, #780	; (adr r3, 80039f0 <TIM3_IRQHandler+0x8a8>)
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f7fc ff86 	bl	80005f8 <__aeabi_dmul>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fc fdca 	bl	800028c <__adddf3>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fd fa52 	bl	8000ba8 <__aeabi_d2f>
 8003704:	4603      	mov	r3, r0
 8003706:	4abe      	ldr	r2, [pc, #760]	; (8003a00 <TIM3_IRQHandler+0x8b8>)
 8003708:	6013      	str	r3, [r2, #0]
      g_I_pitch = limit(g_I_pitch_accumulated*g_I_pitch_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 800370a:	4bbe      	ldr	r3, [pc, #760]	; (8003a04 <TIM3_IRQHandler+0x8bc>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003716:	4bba      	ldr	r3, [pc, #744]	; (8003a00 <TIM3_IRQHandler+0x8b8>)
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003720:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 8003a08 <TIM3_IRQHandler+0x8c0>
 8003724:	eddf 0ab9 	vldr	s1, [pc, #740]	; 8003a0c <TIM3_IRQHandler+0x8c4>
 8003728:	eeb0 0a67 	vmov.f32	s0, s15
 800372c:	f7ff f9fc 	bl	8002b28 <limit>
 8003730:	eef0 7a40 	vmov.f32	s15, s0
 8003734:	4bb6      	ldr	r3, [pc, #728]	; (8003a10 <TIM3_IRQHandler+0x8c8>)
 8003736:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = g_gyro_y*g_D_pitch_gain;
 800373a:	4bb6      	ldr	r3, [pc, #728]	; (8003a14 <TIM3_IRQHandler+0x8cc>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003746:	4bb4      	ldr	r3, [pc, #720]	; (8003a18 <TIM3_IRQHandler+0x8d0>)
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003750:	4bb2      	ldr	r3, [pc, #712]	; (8003a1c <TIM3_IRQHandler+0x8d4>)
 8003752:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = angle_y*g_P_roll_gain;
 8003756:	4bb2      	ldr	r3, [pc, #712]	; (8003a20 <TIM3_IRQHandler+0x8d8>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003762:	edd7 7a02 	vldr	s15, [r7, #8]
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	4bae      	ldr	r3, [pc, #696]	; (8003a24 <TIM3_IRQHandler+0x8dc>)
 800376c:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_y*ACCUMULATION_TIME;
 8003770:	4bad      	ldr	r3, [pc, #692]	; (8003a28 <TIM3_IRQHandler+0x8e0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7fc fee7 	bl	8000548 <__aeabi_f2d>
 800377a:	4604      	mov	r4, r0
 800377c:	460d      	mov	r5, r1
 800377e:	68b8      	ldr	r0, [r7, #8]
 8003780:	f7fc fee2 	bl	8000548 <__aeabi_f2d>
 8003784:	a39a      	add	r3, pc, #616	; (adr r3, 80039f0 <TIM3_IRQHandler+0x8a8>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fc ff35 	bl	80005f8 <__aeabi_dmul>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4620      	mov	r0, r4
 8003794:	4629      	mov	r1, r5
 8003796:	f7fc fd79 	bl	800028c <__adddf3>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	f7fd fa01 	bl	8000ba8 <__aeabi_d2f>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4a9f      	ldr	r2, [pc, #636]	; (8003a28 <TIM3_IRQHandler+0x8e0>)
 80037aa:	6013      	str	r3, [r2, #0]
      g_I_roll = limit(g_I_roll_accumulated*g_I_roll_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 80037ac:	4b9f      	ldr	r3, [pc, #636]	; (8003a2c <TIM3_IRQHandler+0x8e4>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b8:	4b9b      	ldr	r3, [pc, #620]	; (8003a28 <TIM3_IRQHandler+0x8e0>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8003a08 <TIM3_IRQHandler+0x8c0>
 80037c6:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003a0c <TIM3_IRQHandler+0x8c4>
 80037ca:	eeb0 0a67 	vmov.f32	s0, s15
 80037ce:	f7ff f9ab 	bl	8002b28 <limit>
 80037d2:	eef0 7a40 	vmov.f32	s15, s0
 80037d6:	4b96      	ldr	r3, [pc, #600]	; (8003a30 <TIM3_IRQHandler+0x8e8>)
 80037d8:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = g_gyro_x*g_D_roll_gain;
 80037dc:	4b95      	ldr	r3, [pc, #596]	; (8003a34 <TIM3_IRQHandler+0x8ec>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e8:	4b93      	ldr	r3, [pc, #588]	; (8003a38 <TIM3_IRQHandler+0x8f0>)
 80037ea:	edd3 7a00 	vldr	s15, [r3]
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	4b92      	ldr	r3, [pc, #584]	; (8003a3c <TIM3_IRQHandler+0x8f4>)
 80037f4:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = angle_z*g_P_yaw_gain;
 80037f8:	4b91      	ldr	r3, [pc, #580]	; (8003a40 <TIM3_IRQHandler+0x8f8>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003804:	edd7 7a01 	vldr	s15, [r7, #4]
 8003808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380c:	4b8d      	ldr	r3, [pc, #564]	; (8003a44 <TIM3_IRQHandler+0x8fc>)
 800380e:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_z*ACCUMULATION_TIME;
 8003812:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <TIM3_IRQHandler+0x900>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fe96 	bl	8000548 <__aeabi_f2d>
 800381c:	4604      	mov	r4, r0
 800381e:	460d      	mov	r5, r1
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fc fe91 	bl	8000548 <__aeabi_f2d>
 8003826:	a372      	add	r3, pc, #456	; (adr r3, 80039f0 <TIM3_IRQHandler+0x8a8>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fc fee4 	bl	80005f8 <__aeabi_dmul>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4620      	mov	r0, r4
 8003836:	4629      	mov	r1, r5
 8003838:	f7fc fd28 	bl	800028c <__adddf3>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f7fd f9b0 	bl	8000ba8 <__aeabi_d2f>
 8003848:	4603      	mov	r3, r0
 800384a:	4a7f      	ldr	r2, [pc, #508]	; (8003a48 <TIM3_IRQHandler+0x900>)
 800384c:	6013      	str	r3, [r2, #0]
      g_I_yaw = limit(g_I_yaw_accumulated*g_I_yaw_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 800384e:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <TIM3_IRQHandler+0x904>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385a:	4b7b      	ldr	r3, [pc, #492]	; (8003a48 <TIM3_IRQHandler+0x900>)
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003864:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8003a08 <TIM3_IRQHandler+0x8c0>
 8003868:	eddf 0a68 	vldr	s1, [pc, #416]	; 8003a0c <TIM3_IRQHandler+0x8c4>
 800386c:	eeb0 0a67 	vmov.f32	s0, s15
 8003870:	f7ff f95a 	bl	8002b28 <limit>
 8003874:	eef0 7a40 	vmov.f32	s15, s0
 8003878:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <TIM3_IRQHandler+0x908>)
 800387a:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = g_gyro_z*g_D_yaw_gain;
 800387e:	4b75      	ldr	r3, [pc, #468]	; (8003a54 <TIM3_IRQHandler+0x90c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388a:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <TIM3_IRQHandler+0x910>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003894:	4b71      	ldr	r3, [pc, #452]	; (8003a5c <TIM3_IRQHandler+0x914>)
 8003896:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + g_thrust;
 800389a:	4b71      	ldr	r3, [pc, #452]	; (8003a60 <TIM3_IRQHandler+0x918>)
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003a64 <TIM3_IRQHandler+0x91c>
 80038a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ac:	ee17 3a90 	vmov	r3, s15
 80038b0:	603b      	str	r3, [r7, #0]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <TIM3_IRQHandler+0x8b4>)
 80038be:	edd3 6a00 	vldr	s13, [r3]
 80038c2:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <TIM3_IRQHandler+0x8c8>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038cc:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <TIM3_IRQHandler+0x8d4>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038da:	4b52      	ldr	r3, [pc, #328]	; (8003a24 <TIM3_IRQHandler+0x8dc>)
 80038dc:	edd3 6a00 	vldr	s13, [r3]
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <TIM3_IRQHandler+0x8e8>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <TIM3_IRQHandler+0x8f4>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038f8:	4b52      	ldr	r3, [pc, #328]	; (8003a44 <TIM3_IRQHandler+0x8fc>)
 80038fa:	edd3 6a00 	vldr	s13, [r3]
 80038fe:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <TIM3_IRQHandler+0x908>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003908:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <TIM3_IRQHandler+0x914>)
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003916:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <TIM3_IRQHandler+0x920>)
 8003918:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003926:	4b35      	ldr	r3, [pc, #212]	; (80039fc <TIM3_IRQHandler+0x8b4>)
 8003928:	edd3 6a00 	vldr	s13, [r3]
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <TIM3_IRQHandler+0x8c8>)
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003936:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <TIM3_IRQHandler+0x8d4>)
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003944:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <TIM3_IRQHandler+0x8dc>)
 8003946:	edd3 6a00 	vldr	s13, [r3]
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <TIM3_IRQHandler+0x8e8>)
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003954:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <TIM3_IRQHandler+0x8f4>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <TIM3_IRQHandler+0x8fc>)
 8003964:	edd3 6a00 	vldr	s13, [r3]
 8003968:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <TIM3_IRQHandler+0x908>)
 800396a:	edd3 7a00 	vldr	s15, [r3]
 800396e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003972:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <TIM3_IRQHandler+0x914>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003980:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <TIM3_IRQHandler+0x924>)
 8003982:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <TIM3_IRQHandler+0x8b4>)
 8003992:	edd3 6a00 	vldr	s13, [r3]
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <TIM3_IRQHandler+0x8c8>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <TIM3_IRQHandler+0x8d4>)
 80039a2:	edd3 7a00 	vldr	s15, [r3]
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <TIM3_IRQHandler+0x8dc>)
 80039b0:	edd3 6a00 	vldr	s13, [r3]
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <TIM3_IRQHandler+0x8e8>)
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <TIM3_IRQHandler+0x8f4>)
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <TIM3_IRQHandler+0x8fc>)
 80039ce:	edd3 6a00 	vldr	s13, [r3]
 80039d2:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <TIM3_IRQHandler+0x908>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <TIM3_IRQHandler+0x914>)
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ea:	e041      	b.n	8003a70 <TIM3_IRQHandler+0x928>
 80039ec:	f3af 8000 	nop.w
 80039f0:	1eb851ec 	.word	0x1eb851ec
 80039f4:	3fb1eb85 	.word	0x3fb1eb85
 80039f8:	2000001c 	.word	0x2000001c
 80039fc:	20000634 	.word	0x20000634
 8003a00:	2000063c 	.word	0x2000063c
 8003a04:	2000001d 	.word	0x2000001d
 8003a08:	42c80000 	.word	0x42c80000
 8003a0c:	c2c80000 	.word	0xc2c80000
 8003a10:	20000638 	.word	0x20000638
 8003a14:	2000001e 	.word	0x2000001e
 8003a18:	20000628 	.word	0x20000628
 8003a1c:	20000640 	.word	0x20000640
 8003a20:	2000001f 	.word	0x2000001f
 8003a24:	20000644 	.word	0x20000644
 8003a28:	2000064c 	.word	0x2000064c
 8003a2c:	20000020 	.word	0x20000020
 8003a30:	20000648 	.word	0x20000648
 8003a34:	20000021 	.word	0x20000021
 8003a38:	20000624 	.word	0x20000624
 8003a3c:	20000650 	.word	0x20000650
 8003a40:	20000022 	.word	0x20000022
 8003a44:	20000654 	.word	0x20000654
 8003a48:	2000065c 	.word	0x2000065c
 8003a4c:	20000023 	.word	0x20000023
 8003a50:	20000658 	.word	0x20000658
 8003a54:	20000024 	.word	0x20000024
 8003a58:	2000062c 	.word	0x2000062c
 8003a5c:	20000660 	.word	0x20000660
 8003a60:	200006b4 	.word	0x200006b4
 8003a64:	4408c000 	.word	0x4408c000
 8003a68:	20000664 	.word	0x20000664
 8003a6c:	20000668 	.word	0x20000668
 8003a70:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <TIM3_IRQHandler+0xa80>)
 8003a72:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a80:	4b52      	ldr	r3, [pc, #328]	; (8003bcc <TIM3_IRQHandler+0xa84>)
 8003a82:	edd3 6a00 	vldr	s13, [r3]
 8003a86:	4b52      	ldr	r3, [pc, #328]	; (8003bd0 <TIM3_IRQHandler+0xa88>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a90:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <TIM3_IRQHandler+0xa8c>)
 8003a92:	edd3 7a00 	vldr	s15, [r3]
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <TIM3_IRQHandler+0xa90>)
 8003aa0:	edd3 6a00 	vldr	s13, [r3]
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <TIM3_IRQHandler+0xa94>)
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003aae:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <TIM3_IRQHandler+0xa98>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003abc:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <TIM3_IRQHandler+0xa9c>)
 8003abe:	edd3 6a00 	vldr	s13, [r3]
 8003ac2:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <TIM3_IRQHandler+0xaa0>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003acc:	4b47      	ldr	r3, [pc, #284]	; (8003bec <TIM3_IRQHandler+0xaa4>)
 8003ace:	edd3 7a00 	vldr	s15, [r3]
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ada:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <TIM3_IRQHandler+0xaa8>)
 8003adc:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003ae0:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <TIM3_IRQHandler+0xaac>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8003bf8 <TIM3_IRQHandler+0xab0>
 8003aea:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003bfc <TIM3_IRQHandler+0xab4>
 8003aee:	eeb0 0a67 	vmov.f32	s0, s15
 8003af2:	f7ff f819 	bl	8002b28 <limit>
 8003af6:	eef0 7a40 	vmov.f32	s15, s0
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <TIM3_IRQHandler+0xaac>)
 8003afc:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 8003b00:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <TIM3_IRQHandler+0xab8>)
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8003bf8 <TIM3_IRQHandler+0xab0>
 8003b0a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8003bfc <TIM3_IRQHandler+0xab4>
 8003b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b12:	f7ff f809 	bl	8002b28 <limit>
 8003b16:	eef0 7a40 	vmov.f32	s15, s0
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <TIM3_IRQHandler+0xab8>)
 8003b1c:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <TIM3_IRQHandler+0xa80>)
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8003bf8 <TIM3_IRQHandler+0xab0>
 8003b2a:	eddf 0a34 	vldr	s1, [pc, #208]	; 8003bfc <TIM3_IRQHandler+0xab4>
 8003b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b32:	f7fe fff9 	bl	8002b28 <limit>
 8003b36:	eef0 7a40 	vmov.f32	s15, s0
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <TIM3_IRQHandler+0xa80>)
 8003b3c:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <TIM3_IRQHandler+0xaa8>)
 8003b42:	edd3 7a00 	vldr	s15, [r3]
 8003b46:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8003bf8 <TIM3_IRQHandler+0xab0>
 8003b4a:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003bfc <TIM3_IRQHandler+0xab4>
 8003b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b52:	f7fe ffe9 	bl	8002b28 <limit>
 8003b56:	eef0 7a40 	vmov.f32	s15, s0
 8003b5a:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <TIM3_IRQHandler+0xaa8>)
 8003b5c:	edc3 7a00 	vstr	s15, [r3]

      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <TIM3_IRQHandler+0xaac>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <TIM3_IRQHandler+0xab8>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <TIM3_IRQHandler+0xa80>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <TIM3_IRQHandler+0xaa8>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b88:	ee17 3a90 	vmov	r3, s15
 8003b8c:	ee16 2a10 	vmov	r2, s12
 8003b90:	ee16 1a90 	vmov	r1, s13
 8003b94:	ee17 0a10 	vmov	r0, s14
 8003b98:	f7fe fff0 	bl	8002b7c <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <TIM3_IRQHandler+0xabc>)
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003c08 <TIM3_IRQHandler+0xac0>
 8003ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	d900      	bls.n	8003bb2 <TIM3_IRQHandler+0xa6a>
        fly_mode = init;
      }

      break;
 8003bb0:	e002      	b.n	8003bb8 <TIM3_IRQHandler+0xa70>
        fly_mode = init;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <TIM3_IRQHandler+0xac4>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
      break;
 8003bb8:	bf00      	nop
  monitor[4] = g_sig4;
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bba:	4815      	ldr	r0, [pc, #84]	; (8003c10 <TIM3_IRQHandler+0xac8>)
 8003bbc:	f004 fd2d 	bl	800861a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc8:	2000066c 	.word	0x2000066c
 8003bcc:	20000634 	.word	0x20000634
 8003bd0:	20000638 	.word	0x20000638
 8003bd4:	20000640 	.word	0x20000640
 8003bd8:	20000644 	.word	0x20000644
 8003bdc:	20000648 	.word	0x20000648
 8003be0:	20000650 	.word	0x20000650
 8003be4:	20000654 	.word	0x20000654
 8003be8:	20000658 	.word	0x20000658
 8003bec:	20000660 	.word	0x20000660
 8003bf0:	20000670 	.word	0x20000670
 8003bf4:	20000664 	.word	0x20000664
 8003bf8:	446cc000 	.word	0x446cc000
 8003bfc:	4408c000 	.word	0x4408c000
 8003c00:	20000668 	.word	0x20000668
 8003c04:	200006b4 	.word	0x200006b4
 8003c08:	c2c60000 	.word	0xc2c60000
 8003c0c:	20000630 	.word	0x20000630
 8003c10:	200001f0 	.word	0x200001f0

08003c14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <TIM4_IRQHandler+0x10>)
 8003c1a:	f004 fcfe 	bl	800861a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000238 	.word	0x20000238

08003c28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <I2C1_EV_IRQHandler+0x10>)
 8003c2e:	f001 fd8d 	bl	800574c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200000b4 	.word	0x200000b4

08003c3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <I2C1_ER_IRQHandler+0x10>)
 8003c42:	f001 fef4 	bl	8005a2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200000b4 	.word	0x200000b4

08003c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c54:	4802      	ldr	r0, [pc, #8]	; (8003c60 <USART1_IRQHandler+0x10>)
 8003c56:	f005 fe59 	bl	800990c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000280 	.word	0x20000280

08003c64 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8003c80:	4b87      	ldr	r3, [pc, #540]	; (8003ea0 <HAL_UART_RxCpltCallback+0x228>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
  // To know whether this timer is hanging
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);

  // Serialise control values
  static uint8_t g_control_1st_idx = 0;
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8003c86:	4b87      	ldr	r3, [pc, #540]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2bfe      	cmp	r3, #254	; 0xfe
 8003c8c:	d102      	bne.n	8003c94 <HAL_UART_RxCpltCallback+0x1c>
 8003c8e:	4b86      	ldr	r3, [pc, #536]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8003c94:	4b83      	ldr	r3, [pc, #524]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2bfe      	cmp	r3, #254	; 0xfe
 8003c9a:	d102      	bne.n	8003ca2 <HAL_UART_RxCpltCallback+0x2a>
 8003c9c:	4b82      	ldr	r3, [pc, #520]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8003ca2:	4b80      	ldr	r3, [pc, #512]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003ca4:	789b      	ldrb	r3, [r3, #2]
 8003ca6:	2bfe      	cmp	r3, #254	; 0xfe
 8003ca8:	d102      	bne.n	8003cb0 <HAL_UART_RxCpltCallback+0x38>
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003cac:	2203      	movs	r2, #3
 8003cae:	701a      	strb	r2, [r3, #0]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8003cb0:	4b7c      	ldr	r3, [pc, #496]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003cb2:	78db      	ldrb	r3, [r3, #3]
 8003cb4:	2bfe      	cmp	r3, #254	; 0xfe
 8003cb6:	d102      	bne.n	8003cbe <HAL_UART_RxCpltCallback+0x46>
 8003cb8:	4b7b      	ldr	r3, [pc, #492]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003cba:	2204      	movs	r2, #4
 8003cbc:	701a      	strb	r2, [r3, #0]
  if (g_control[4] == 254) g_control_1st_idx = 5;
 8003cbe:	4b79      	ldr	r3, [pc, #484]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003cc0:	791b      	ldrb	r3, [r3, #4]
 8003cc2:	2bfe      	cmp	r3, #254	; 0xfe
 8003cc4:	d102      	bne.n	8003ccc <HAL_UART_RxCpltCallback+0x54>
 8003cc6:	4b78      	ldr	r3, [pc, #480]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003cc8:	2205      	movs	r2, #5
 8003cca:	701a      	strb	r2, [r3, #0]
  if (g_control[5] == 254) g_control_1st_idx = 6;
 8003ccc:	4b75      	ldr	r3, [pc, #468]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003cce:	795b      	ldrb	r3, [r3, #5]
 8003cd0:	2bfe      	cmp	r3, #254	; 0xfe
 8003cd2:	d102      	bne.n	8003cda <HAL_UART_RxCpltCallback+0x62>
 8003cd4:	4b74      	ldr	r3, [pc, #464]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003cd6:	2206      	movs	r2, #6
 8003cd8:	701a      	strb	r2, [r3, #0]
  if (g_control[6] == 254) g_control_1st_idx = 7;
 8003cda:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003cdc:	799b      	ldrb	r3, [r3, #6]
 8003cde:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce0:	d102      	bne.n	8003ce8 <HAL_UART_RxCpltCallback+0x70>
 8003ce2:	4b71      	ldr	r3, [pc, #452]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	701a      	strb	r2, [r3, #0]
  if (g_control[7] == 254) g_control_1st_idx = 8;
 8003ce8:	4b6e      	ldr	r3, [pc, #440]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003cea:	79db      	ldrb	r3, [r3, #7]
 8003cec:	2bfe      	cmp	r3, #254	; 0xfe
 8003cee:	d102      	bne.n	8003cf6 <HAL_UART_RxCpltCallback+0x7e>
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	701a      	strb	r2, [r3, #0]
  if (g_control[8] == 254) g_control_1st_idx = 9;
 8003cf6:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003cf8:	7a1b      	ldrb	r3, [r3, #8]
 8003cfa:	2bfe      	cmp	r3, #254	; 0xfe
 8003cfc:	d102      	bne.n	8003d04 <HAL_UART_RxCpltCallback+0x8c>
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003d00:	2209      	movs	r2, #9
 8003d02:	701a      	strb	r2, [r3, #0]
  if (g_control[9] == 254) g_control_1st_idx = 0;
 8003d04:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003d06:	7a5b      	ldrb	r3, [r3, #9]
 8003d08:	2bfe      	cmp	r3, #254	; 0xfe
 8003d0a:	d102      	bne.n	8003d12 <HAL_UART_RxCpltCallback+0x9a>
 8003d0c:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
  g_P_pitch_gain = g_control[g_control_1st_idx];
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003d1a:	5c9a      	ldrb	r2, [r3, r2]
 8003d1c:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_UART_RxCpltCallback+0x234>)
 8003d1e:	701a      	strb	r2, [r3, #0]
  g_I_pitch_gain = g_control[(g_control_1st_idx+1)%10];
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	1c59      	adds	r1, r3, #1
 8003d26:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003d28:	fb83 2301 	smull	r2, r3, r3, r1
 8003d2c:	109a      	asrs	r2, r3, #2
 8003d2e:	17cb      	asrs	r3, r1, #31
 8003d30:	1ad2      	subs	r2, r2, r3
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	1aca      	subs	r2, r1, r3
 8003d3c:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003d3e:	5c9a      	ldrb	r2, [r3, r2]
 8003d40:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_UART_RxCpltCallback+0x23c>)
 8003d42:	701a      	strb	r2, [r3, #0]
  g_D_pitch_gain = g_control[(g_control_1st_idx+2)%10];
 8003d44:	4b58      	ldr	r3, [pc, #352]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	1c99      	adds	r1, r3, #2
 8003d4a:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003d4c:	fb83 2301 	smull	r2, r3, r3, r1
 8003d50:	109a      	asrs	r2, r3, #2
 8003d52:	17cb      	asrs	r3, r1, #31
 8003d54:	1ad2      	subs	r2, r2, r3
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	1aca      	subs	r2, r1, r3
 8003d60:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003d62:	5c9a      	ldrb	r2, [r3, r2]
 8003d64:	4b54      	ldr	r3, [pc, #336]	; (8003eb8 <HAL_UART_RxCpltCallback+0x240>)
 8003d66:	701a      	strb	r2, [r3, #0]
  g_P_roll_gain = g_control[(g_control_1st_idx+3)%10];
 8003d68:	4b4f      	ldr	r3, [pc, #316]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	1cd9      	adds	r1, r3, #3
 8003d6e:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003d70:	fb83 2301 	smull	r2, r3, r3, r1
 8003d74:	109a      	asrs	r2, r3, #2
 8003d76:	17cb      	asrs	r3, r1, #31
 8003d78:	1ad2      	subs	r2, r2, r3
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	1aca      	subs	r2, r1, r3
 8003d84:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003d86:	5c9a      	ldrb	r2, [r3, r2]
 8003d88:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <HAL_UART_RxCpltCallback+0x244>)
 8003d8a:	701a      	strb	r2, [r3, #0]
  g_I_roll_gain = g_control[(g_control_1st_idx+4)%10];
 8003d8c:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	1d19      	adds	r1, r3, #4
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003d94:	fb83 2301 	smull	r2, r3, r3, r1
 8003d98:	109a      	asrs	r2, r3, #2
 8003d9a:	17cb      	asrs	r3, r1, #31
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	1aca      	subs	r2, r1, r3
 8003da8:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003daa:	5c9a      	ldrb	r2, [r3, r2]
 8003dac:	4b44      	ldr	r3, [pc, #272]	; (8003ec0 <HAL_UART_RxCpltCallback+0x248>)
 8003dae:	701a      	strb	r2, [r3, #0]
  g_D_roll_gain = g_control[(g_control_1st_idx+5)%10];
 8003db0:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	1d59      	adds	r1, r3, #5
 8003db6:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003db8:	fb83 2301 	smull	r2, r3, r3, r1
 8003dbc:	109a      	asrs	r2, r3, #2
 8003dbe:	17cb      	asrs	r3, r1, #31
 8003dc0:	1ad2      	subs	r2, r2, r3
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	1aca      	subs	r2, r1, r3
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003dce:	5c9a      	ldrb	r2, [r3, r2]
 8003dd0:	4b3c      	ldr	r3, [pc, #240]	; (8003ec4 <HAL_UART_RxCpltCallback+0x24c>)
 8003dd2:	701a      	strb	r2, [r3, #0]
  g_P_yaw_gain = g_control[(g_control_1st_idx+6)%10];
 8003dd4:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	1d99      	adds	r1, r3, #6
 8003dda:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003ddc:	fb83 2301 	smull	r2, r3, r3, r1
 8003de0:	109a      	asrs	r2, r3, #2
 8003de2:	17cb      	asrs	r3, r1, #31
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	1aca      	subs	r2, r1, r3
 8003df0:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003df2:	5c9a      	ldrb	r2, [r3, r2]
 8003df4:	4b34      	ldr	r3, [pc, #208]	; (8003ec8 <HAL_UART_RxCpltCallback+0x250>)
 8003df6:	701a      	strb	r2, [r3, #0]
  g_I_yaw_gain = g_control[(g_control_1st_idx+7)%10];
 8003df8:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	1dd9      	adds	r1, r3, #7
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003e00:	fb83 2301 	smull	r2, r3, r3, r1
 8003e04:	109a      	asrs	r2, r3, #2
 8003e06:	17cb      	asrs	r3, r1, #31
 8003e08:	1ad2      	subs	r2, r2, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	1aca      	subs	r2, r1, r3
 8003e14:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003e16:	5c9a      	ldrb	r2, [r3, r2]
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_UART_RxCpltCallback+0x254>)
 8003e1a:	701a      	strb	r2, [r3, #0]
  g_D_yaw_gain = g_control[(g_control_1st_idx+8)%10];
 8003e1c:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_UART_RxCpltCallback+0x230>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f103 0108 	add.w	r1, r3, #8
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <HAL_UART_RxCpltCallback+0x238>)
 8003e26:	fb83 2301 	smull	r2, r3, r3, r1
 8003e2a:	109a      	asrs	r2, r3, #2
 8003e2c:	17cb      	asrs	r3, r1, #31
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	1aca      	subs	r2, r1, r3
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_UART_RxCpltCallback+0x22c>)
 8003e3c:	5c9a      	ldrb	r2, [r3, r2]
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_UART_RxCpltCallback+0x258>)
 8003e40:	701a      	strb	r2, [r3, #0]

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e4e:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e50:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e54:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e56:	ed93 6a03 	vldr	s12, [r3, #12]
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e5c:	edd3 5a04 	vldr	s11, [r3, #16]
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e62:	ed93 5a05 	vldr	s10, [r3, #20]
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e68:	edd3 4a06 	vldr	s9, [r3, #24]
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e6e:	edd3 3a07 	vldr	s7, [r3, #28]
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8003e74:	ed93 4a08 	vldr	s8, [r3, #32]
 8003e78:	eeb0 3a64 	vmov.f32	s6, s9
 8003e7c:	eef0 2a45 	vmov.f32	s5, s10
 8003e80:	eeb0 2a65 	vmov.f32	s4, s11
 8003e84:	eef0 1a46 	vmov.f32	s3, s12
 8003e88:	eeb0 1a66 	vmov.f32	s2, s13
 8003e8c:	eef0 0a47 	vmov.f32	s1, s14
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	f7fd f93a 	bl	800110c <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	200004a8 	.word	0x200004a8
 8003ea8:	200006e8 	.word	0x200006e8
 8003eac:	2000001c 	.word	0x2000001c
 8003eb0:	66666667 	.word	0x66666667
 8003eb4:	2000001d 	.word	0x2000001d
 8003eb8:	2000001e 	.word	0x2000001e
 8003ebc:	2000001f 	.word	0x2000001f
 8003ec0:	20000020 	.word	0x20000020
 8003ec4:	20000021 	.word	0x20000021
 8003ec8:	20000022 	.word	0x20000022
 8003ecc:	20000023 	.word	0x20000023
 8003ed0:	20000024 	.word	0x20000024
 8003ed4:	200006c4 	.word	0x200006c4

08003ed8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7f1b      	ldrb	r3, [r3, #28]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d12f      	bne.n	8003f48 <HAL_TIM_IC_CaptureCallback+0x70>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eec:	488a      	ldr	r0, [pc, #552]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003eee:	f000 fd8d 	bl	8004a0c <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIM_IC_CaptureCallback+0x30>
      pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4888      	ldr	r0, [pc, #544]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8003efc:	f004 febc 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b86      	ldr	r3, [pc, #536]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8003f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0c:	4882      	ldr	r0, [pc, #520]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f0e:	f000 fd7d 	bl	8004a0c <HAL_GPIO_ReadPin>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d117      	bne.n	8003f48 <HAL_TIM_IC_CaptureCallback+0x70>
      pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4880      	ldr	r0, [pc, #512]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f1c:	f004 feac 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b7e      	ldr	r3, [pc, #504]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f26:	605a      	str	r2, [r3, #4]
      int value = pwm_in[1] - pwm_in[0];
 8003f28:	4b7d      	ldr	r3, [pc, #500]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4b7c      	ldr	r3, [pc, #496]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	617b      	str	r3, [r7, #20]
      if (value >= 200 && value < 400) {
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2bc7      	cmp	r3, #199	; 0xc7
 8003f38:	dd06      	ble.n	8003f48 <HAL_TIM_IC_CaptureCallback+0x70>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003f40:	da02      	bge.n	8003f48 <HAL_TIM_IC_CaptureCallback+0x70>
        pwm_in[2] = value;
 8003f42:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	6093      	str	r3, [r2, #8]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7f1b      	ldrb	r3, [r3, #28]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d12f      	bne.n	8003fb0 <HAL_TIM_IC_CaptureCallback+0xd8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8003f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f54:	4870      	ldr	r0, [pc, #448]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f56:	f000 fd59 	bl	8004a0c <HAL_GPIO_ReadPin>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IC_CaptureCallback+0x98>
      pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003f60:	2104      	movs	r1, #4
 8003f62:	486e      	ldr	r0, [pc, #440]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f64:	f004 fe88 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f6e:	60da      	str	r2, [r3, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f74:	4868      	ldr	r0, [pc, #416]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f76:	f000 fd49 	bl	8004a0c <HAL_GPIO_ReadPin>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d117      	bne.n	8003fb0 <HAL_TIM_IC_CaptureCallback+0xd8>
      pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003f80:	2104      	movs	r1, #4
 8003f82:	4866      	ldr	r0, [pc, #408]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f84:	f004 fe78 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b64      	ldr	r3, [pc, #400]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f8e:	611a      	str	r2, [r3, #16]
      int value = pwm_in[4] - pwm_in[3];
 8003f90:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	4b62      	ldr	r3, [pc, #392]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	613b      	str	r3, [r7, #16]
      if (value >= 200 && value < 400) {
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2bc7      	cmp	r3, #199	; 0xc7
 8003fa0:	dd06      	ble.n	8003fb0 <HAL_TIM_IC_CaptureCallback+0xd8>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003fa8:	da02      	bge.n	8003fb0 <HAL_TIM_IC_CaptureCallback+0xd8>
        pwm_in[5] = value;
 8003faa:	4a5d      	ldr	r2, [pc, #372]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6153      	str	r3, [r2, #20]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7f1b      	ldrb	r3, [r3, #28]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d12f      	bne.n	8004018 <HAL_TIM_IC_CaptureCallback+0x140>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003fb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fbc:	4856      	ldr	r0, [pc, #344]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fbe:	f000 fd25 	bl	8004a0c <HAL_GPIO_ReadPin>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IC_CaptureCallback+0x100>
      pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003fc8:	2108      	movs	r1, #8
 8003fca:	4854      	ldr	r0, [pc, #336]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fcc:	f004 fe54 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b52      	ldr	r3, [pc, #328]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fd6:	619a      	str	r2, [r3, #24]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8003fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fdc:	484e      	ldr	r0, [pc, #312]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fde:	f000 fd15 	bl	8004a0c <HAL_GPIO_ReadPin>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d117      	bne.n	8004018 <HAL_TIM_IC_CaptureCallback+0x140>
      pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003fe8:	2108      	movs	r1, #8
 8003fea:	484c      	ldr	r0, [pc, #304]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fec:	f004 fe44 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ff6:	61da      	str	r2, [r3, #28]
      int value = pwm_in[7] - pwm_in[6];
 8003ff8:	4b49      	ldr	r3, [pc, #292]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	4b48      	ldr	r3, [pc, #288]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	60fb      	str	r3, [r7, #12]
      if (value >= 200 && value < 400) {
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2bc7      	cmp	r3, #199	; 0xc7
 8004008:	dd06      	ble.n	8004018 <HAL_TIM_IC_CaptureCallback+0x140>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004010:	da02      	bge.n	8004018 <HAL_TIM_IC_CaptureCallback+0x140>
        pwm_in[8] = value;
 8004012:	4a43      	ldr	r2, [pc, #268]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6213      	str	r3, [r2, #32]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	7f1b      	ldrb	r3, [r3, #28]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d12f      	bne.n	8004080 <HAL_TIM_IC_CaptureCallback+0x1a8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8004020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004024:	483c      	ldr	r0, [pc, #240]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004026:	f000 fcf1 	bl	8004a0c <HAL_GPIO_ReadPin>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <HAL_TIM_IC_CaptureCallback+0x168>
      pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004030:	210c      	movs	r1, #12
 8004032:	483a      	ldr	r0, [pc, #232]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8004034:	f004 fe20 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8004038:	4603      	mov	r3, r0
 800403a:	461a      	mov	r2, r3
 800403c:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8004040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004044:	4834      	ldr	r0, [pc, #208]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004046:	f000 fce1 	bl	8004a0c <HAL_GPIO_ReadPin>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d117      	bne.n	8004080 <HAL_TIM_IC_CaptureCallback+0x1a8>
      pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004050:	210c      	movs	r1, #12
 8004052:	4832      	ldr	r0, [pc, #200]	; (800411c <HAL_TIM_IC_CaptureCallback+0x244>)
 8004054:	f004 fe10 	bl	8008c78 <HAL_TIM_ReadCapturedValue>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
      int value = pwm_in[10] - pwm_in[9];
 8004060:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004064:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	60bb      	str	r3, [r7, #8]
      if (value >= 200 && value < 400) {
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2bc7      	cmp	r3, #199	; 0xc7
 8004070:	dd06      	ble.n	8004080 <HAL_TIM_IC_CaptureCallback+0x1a8>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004078:	da02      	bge.n	8004080 <HAL_TIM_IC_CaptureCallback+0x1a8>
        pwm_in[11] = value;
 800407a:	4a29      	ldr	r2, [pc, #164]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
    }
  }

  g_thrust = SimpleKalmanFilter_updateEstimate(&g_filters[6], pwm_in[5] - 300);
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004090:	eeb0 0a67 	vmov.f32	s0, s15
 8004094:	4823      	ldr	r0, [pc, #140]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8004096:	f7fc ff72 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 800409a:	eef0 7a40 	vmov.f32	s15, s0
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x250>)
 80040a0:	edc3 7a00 	vstr	s15, [r3]
  g_yaw = SimpleKalmanFilter_updateEstimate(&g_filters[7], pwm_in[2] - 300);
 80040a4:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b4:	eeb0 0a67 	vmov.f32	s0, s15
 80040b8:	481c      	ldr	r0, [pc, #112]	; (800412c <HAL_TIM_IC_CaptureCallback+0x254>)
 80040ba:	f7fc ff60 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80040be:	eef0 7a40 	vmov.f32	s15, s0
 80040c2:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x258>)
 80040c4:	edc3 7a00 	vstr	s15, [r3]
  g_pitch = SimpleKalmanFilter_updateEstimate(&g_filters[8], pwm_in[8] - 300);
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	eeb0 0a67 	vmov.f32	s0, s15
 80040dc:	4815      	ldr	r0, [pc, #84]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80040de:	f7fc ff4e 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80040e2:	eef0 7a40 	vmov.f32	s15, s0
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <HAL_TIM_IC_CaptureCallback+0x260>)
 80040e8:	edc3 7a00 	vstr	s15, [r3]
  g_roll = SimpleKalmanFilter_updateEstimate(&g_filters[9], pwm_in[11] - 300);
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	480e      	ldr	r0, [pc, #56]	; (800413c <HAL_TIM_IC_CaptureCallback+0x264>)
 8004102:	f7fc ff3c 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8004106:	eef0 7a40 	vmov.f32	s15, s0
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x268>)
 800410c:	edc3 7a00 	vstr	s15, [r3]
  monitor[2] = 0;
  monitor[3] = g_pitch;
  monitor[4] = g_roll;
  monitor[5] = 0;
#endif
}
 8004110:	bf00      	nop
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40020c00 	.word	0x40020c00
 800411c:	20000238 	.word	0x20000238
 8004120:	20000674 	.word	0x20000674
 8004124:	20000354 	.word	0x20000354
 8004128:	200006b4 	.word	0x200006b4
 800412c:	2000036c 	.word	0x2000036c
 8004130:	200006c0 	.word	0x200006c0
 8004134:	20000384 	.word	0x20000384
 8004138:	200006b8 	.word	0x200006b8
 800413c:	2000039c 	.word	0x2000039c
 8004140:	200006bc 	.word	0x200006bc

08004144 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  MPU6050_i2c_mem_read_cb_handler(&g_mpu6050);
 800414c:	4803      	ldr	r0, [pc, #12]	; (800415c <HAL_I2C_MemRxCpltCallback+0x18>)
 800414e:	f7fd fea5 	bl	8001e9c <MPU6050_i2c_mem_read_cb_handler>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000444 	.word	0x20000444

08004160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <_sbrk+0x5c>)
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <_sbrk+0x60>)
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <_sbrk+0x64>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <_sbrk+0x64>)
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <_sbrk+0x68>)
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <_sbrk+0x64>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d207      	bcs.n	80041a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004190:	f006 faac 	bl	800a6ec <__errno>
 8004194:	4603      	mov	r3, r0
 8004196:	220c      	movs	r2, #12
 8004198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800419e:	e009      	b.n	80041b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <_sbrk+0x64>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <_sbrk+0x64>)
 80041b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20020000 	.word	0x20020000
 80041c0:	00000400 	.word	0x00000400
 80041c4:	200006ec 	.word	0x200006ec
 80041c8:	20000708 	.word	0x20000708

080041cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <SystemInit+0x20>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <SystemInit+0x20>)
 80041d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041f4:	480d      	ldr	r0, [pc, #52]	; (800422c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041f6:	490e      	ldr	r1, [pc, #56]	; (8004230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041f8:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041fc:	e002      	b.n	8004204 <LoopCopyDataInit>

080041fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004202:	3304      	adds	r3, #4

08004204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004208:	d3f9      	bcc.n	80041fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800420a:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800420c:	4c0b      	ldr	r4, [pc, #44]	; (800423c <LoopFillZerobss+0x26>)
  movs r3, #0
 800420e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004210:	e001      	b.n	8004216 <LoopFillZerobss>

08004212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004214:	3204      	adds	r2, #4

08004216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004218:	d3fb      	bcc.n	8004212 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800421a:	f7ff ffd7 	bl	80041cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800421e:	f006 fa6b 	bl	800a6f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004222:	f7fd f801 	bl	8001228 <main>
  bx  lr    
 8004226:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800422c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004230:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004234:	0800d590 	.word	0x0800d590
  ldr r2, =_sbss
 8004238:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800423c:	20000704 	.word	0x20000704

08004240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004240:	e7fe      	b.n	8004240 <ADC_IRQHandler>
	...

08004244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_Init+0x40>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <HAL_Init+0x40>)
 800424e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_Init+0x40>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <HAL_Init+0x40>)
 800425a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800425e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_Init+0x40>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a07      	ldr	r2, [pc, #28]	; (8004284 <HAL_Init+0x40>)
 8004266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800426c:	2003      	movs	r0, #3
 800426e:	f000 f94f 	bl	8004510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004272:	200f      	movs	r0, #15
 8004274:	f000 f808 	bl	8004288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004278:	f7fe fa26 	bl	80026c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00

08004288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_InitTick+0x54>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_InitTick+0x58>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	4619      	mov	r1, r3
 800429a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800429e:	fbb3 f3f1 	udiv	r3, r3, r1
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f967 	bl	800457a <HAL_SYSTICK_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00e      	b.n	80042d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b0f      	cmp	r3, #15
 80042ba:	d80a      	bhi.n	80042d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042bc:	2200      	movs	r2, #0
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c4:	f000 f92f 	bl	8004526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042c8:	4a06      	ldr	r2, [pc, #24]	; (80042e4 <HAL_InitTick+0x5c>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000028 	.word	0x20000028
 80042e0:	20000030 	.word	0x20000030
 80042e4:	2000002c 	.word	0x2000002c

080042e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_IncTick+0x20>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_IncTick+0x24>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_IncTick+0x24>)
 80042fa:	6013      	str	r3, [r2, #0]
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000030 	.word	0x20000030
 800430c:	200006f0 	.word	0x200006f0

08004310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return uwTick;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_GetTick+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	200006f0 	.word	0x200006f0

08004328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7ff ffee 	bl	8004310 <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004340:	d005      	beq.n	800434e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_Delay+0x44>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800434e:	bf00      	nop
 8004350:	f7ff ffde 	bl	8004310 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d8f7      	bhi.n	8004350 <HAL_Delay+0x28>
  {
  }
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000030 	.word	0x20000030

08004370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800438c:	4013      	ands	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800439c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043a2:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <__NVIC_SetPriorityGrouping+0x44>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	60d3      	str	r3, [r2, #12]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000ed00 	.word	0xe000ed00

080043b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <__NVIC_GetPriorityGrouping+0x18>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	f003 0307 	and.w	r3, r3, #7
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	db0b      	blt.n	80043fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	f003 021f 	and.w	r2, r3, #31
 80043ec:	4907      	ldr	r1, [pc, #28]	; (800440c <__NVIC_EnableIRQ+0x38>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2001      	movs	r0, #1
 80043f6:	fa00 f202 	lsl.w	r2, r0, r2
 80043fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e000e100 	.word	0xe000e100

08004410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	2b00      	cmp	r3, #0
 8004422:	db0a      	blt.n	800443a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	490c      	ldr	r1, [pc, #48]	; (800445c <__NVIC_SetPriority+0x4c>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	440b      	add	r3, r1
 8004434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004438:	e00a      	b.n	8004450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4908      	ldr	r1, [pc, #32]	; (8004460 <__NVIC_SetPriority+0x50>)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	3b04      	subs	r3, #4
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	440b      	add	r3, r1
 800444e:	761a      	strb	r2, [r3, #24]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f1c3 0307 	rsb	r3, r3, #7
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf28      	it	cs
 8004482:	2304      	movcs	r3, #4
 8004484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3304      	adds	r3, #4
 800448a:	2b06      	cmp	r3, #6
 800448c:	d902      	bls.n	8004494 <NVIC_EncodePriority+0x30>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3b03      	subs	r3, #3
 8004492:	e000      	b.n	8004496 <NVIC_EncodePriority+0x32>
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	401a      	ands	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43d9      	mvns	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	4313      	orrs	r3, r2
         );
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044dc:	d301      	bcc.n	80044e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044de:	2301      	movs	r3, #1
 80044e0:	e00f      	b.n	8004502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <SysTick_Config+0x40>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ea:	210f      	movs	r1, #15
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f0:	f7ff ff8e 	bl	8004410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <SysTick_Config+0x40>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fa:	4b04      	ldr	r3, [pc, #16]	; (800450c <SysTick_Config+0x40>)
 80044fc:	2207      	movs	r2, #7
 80044fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	e000e010 	.word	0xe000e010

08004510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ff29 	bl	8004370 <__NVIC_SetPriorityGrouping>
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	4603      	mov	r3, r0
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004538:	f7ff ff3e 	bl	80043b8 <__NVIC_GetPriorityGrouping>
 800453c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff ff8e 	bl	8004464 <NVIC_EncodePriority>
 8004548:	4602      	mov	r2, r0
 800454a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ff5d 	bl	8004410 <__NVIC_SetPriority>
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff31 	bl	80043d4 <__NVIC_EnableIRQ>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ffa2 	bl	80044cc <SysTick_Config>
 8004588:	4603      	mov	r3, r0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045a0:	f7ff feb6 	bl	8004310 <HAL_GetTick>
 80045a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d008      	beq.n	80045c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2280      	movs	r2, #128	; 0x80
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e052      	b.n	800466a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0216 	bic.w	r2, r2, #22
 80045d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d103      	bne.n	80045f4 <HAL_DMA_Abort+0x62>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0208 	bic.w	r2, r2, #8
 8004602:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004614:	e013      	b.n	800463e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004616:	f7ff fe7b 	bl	8004310 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b05      	cmp	r3, #5
 8004622:	d90c      	bls.n	800463e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2203      	movs	r2, #3
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e015      	b.n	800466a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e4      	bne.n	8004616 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	223f      	movs	r2, #63	; 0x3f
 8004652:	409a      	lsls	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2280      	movs	r2, #128	; 0x80
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e00c      	b.n	80046aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2205      	movs	r2, #5
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c4:	b2db      	uxtb	r3, r3
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e16b      	b.n	80049c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f0:	2201      	movs	r2, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	f040 815a 	bne.w	80049c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b01      	cmp	r3, #1
 8004718:	d005      	beq.n	8004726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004722:	2b02      	cmp	r3, #2
 8004724:	d130      	bne.n	8004788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	2203      	movs	r2, #3
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800475c:	2201      	movs	r2, #1
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 0201 	and.w	r2, r3, #1
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b03      	cmp	r3, #3
 8004792:	d017      	beq.n	80047c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d123      	bne.n	8004818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	220f      	movs	r2, #15
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	08da      	lsrs	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3208      	adds	r2, #8
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	2203      	movs	r2, #3
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0203 	and.w	r2, r3, #3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80b4 	beq.w	80049c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	4b60      	ldr	r3, [pc, #384]	; (80049e0 <HAL_GPIO_Init+0x30c>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	4a5f      	ldr	r2, [pc, #380]	; (80049e0 <HAL_GPIO_Init+0x30c>)
 8004864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004868:	6453      	str	r3, [r2, #68]	; 0x44
 800486a:	4b5d      	ldr	r3, [pc, #372]	; (80049e0 <HAL_GPIO_Init+0x30c>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004876:	4a5b      	ldr	r2, [pc, #364]	; (80049e4 <HAL_GPIO_Init+0x310>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <HAL_GPIO_Init+0x314>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d02b      	beq.n	80048fa <HAL_GPIO_Init+0x226>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a51      	ldr	r2, [pc, #324]	; (80049ec <HAL_GPIO_Init+0x318>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d025      	beq.n	80048f6 <HAL_GPIO_Init+0x222>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a50      	ldr	r2, [pc, #320]	; (80049f0 <HAL_GPIO_Init+0x31c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01f      	beq.n	80048f2 <HAL_GPIO_Init+0x21e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4f      	ldr	r2, [pc, #316]	; (80049f4 <HAL_GPIO_Init+0x320>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d019      	beq.n	80048ee <HAL_GPIO_Init+0x21a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4e      	ldr	r2, [pc, #312]	; (80049f8 <HAL_GPIO_Init+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_GPIO_Init+0x216>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4d      	ldr	r2, [pc, #308]	; (80049fc <HAL_GPIO_Init+0x328>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00d      	beq.n	80048e6 <HAL_GPIO_Init+0x212>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4c      	ldr	r2, [pc, #304]	; (8004a00 <HAL_GPIO_Init+0x32c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <HAL_GPIO_Init+0x20e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <HAL_GPIO_Init+0x330>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_GPIO_Init+0x20a>
 80048da:	2307      	movs	r3, #7
 80048dc:	e00e      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048de:	2308      	movs	r3, #8
 80048e0:	e00c      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048e2:	2306      	movs	r3, #6
 80048e4:	e00a      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048e6:	2305      	movs	r3, #5
 80048e8:	e008      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048ea:	2304      	movs	r3, #4
 80048ec:	e006      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048ee:	2303      	movs	r3, #3
 80048f0:	e004      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e002      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <HAL_GPIO_Init+0x228>
 80048fa:	2300      	movs	r3, #0
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	f002 0203 	and.w	r2, r2, #3
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	4093      	lsls	r3, r2
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800490c:	4935      	ldr	r1, [pc, #212]	; (80049e4 <HAL_GPIO_Init+0x310>)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	3302      	adds	r3, #2
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800491a:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_GPIO_Init+0x334>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800493e:	4a32      	ldr	r2, [pc, #200]	; (8004a08 <HAL_GPIO_Init+0x334>)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004944:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <HAL_GPIO_Init+0x334>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004968:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <HAL_GPIO_Init+0x334>)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800496e:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <HAL_GPIO_Init+0x334>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004992:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <HAL_GPIO_Init+0x334>)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_GPIO_Init+0x334>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049bc:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <HAL_GPIO_Init+0x334>)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3301      	adds	r3, #1
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b0f      	cmp	r3, #15
 80049cc:	f67f ae90 	bls.w	80046f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	3724      	adds	r7, #36	; 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40013800 	.word	0x40013800
 80049e8:	40020000 	.word	0x40020000
 80049ec:	40020400 	.word	0x40020400
 80049f0:	40020800 	.word	0x40020800
 80049f4:	40020c00 	.word	0x40020c00
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40021400 	.word	0x40021400
 8004a00:	40021800 	.word	0x40021800
 8004a04:	40021c00 	.word	0x40021c00
 8004a08:	40013c00 	.word	0x40013c00

08004a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	e001      	b.n	8004a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a4c:	787b      	ldrb	r3, [r7, #1]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a58:	e003      	b.n	8004a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a5a:	887b      	ldrh	r3, [r7, #2]
 8004a5c:	041a      	lsls	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	619a      	str	r2, [r3, #24]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a80:	887a      	ldrh	r2, [r7, #2]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4013      	ands	r3, r2
 8004a86:	041a      	lsls	r2, r3, #16
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43d9      	mvns	r1, r3
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	400b      	ands	r3, r1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e12b      	b.n	8004d0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd fe24 	bl	8002718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2224      	movs	r2, #36	; 0x24
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b08:	f003 fa9c 	bl	8008044 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4a81      	ldr	r2, [pc, #516]	; (8004d18 <HAL_I2C_Init+0x274>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d807      	bhi.n	8004b28 <HAL_I2C_Init+0x84>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a80      	ldr	r2, [pc, #512]	; (8004d1c <HAL_I2C_Init+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	bf94      	ite	ls
 8004b20:	2301      	movls	r3, #1
 8004b22:	2300      	movhi	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e006      	b.n	8004b36 <HAL_I2C_Init+0x92>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a7d      	ldr	r2, [pc, #500]	; (8004d20 <HAL_I2C_Init+0x27c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	bf94      	ite	ls
 8004b30:	2301      	movls	r3, #1
 8004b32:	2300      	movhi	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e0e7      	b.n	8004d0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a78      	ldr	r2, [pc, #480]	; (8004d24 <HAL_I2C_Init+0x280>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0c9b      	lsrs	r3, r3, #18
 8004b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a6a      	ldr	r2, [pc, #424]	; (8004d18 <HAL_I2C_Init+0x274>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d802      	bhi.n	8004b78 <HAL_I2C_Init+0xd4>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3301      	adds	r3, #1
 8004b76:	e009      	b.n	8004b8c <HAL_I2C_Init+0xe8>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	4a69      	ldr	r2, [pc, #420]	; (8004d28 <HAL_I2C_Init+0x284>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	495c      	ldr	r1, [pc, #368]	; (8004d18 <HAL_I2C_Init+0x274>)
 8004ba8:	428b      	cmp	r3, r1
 8004baa:	d819      	bhi.n	8004be0 <HAL_I2C_Init+0x13c>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e59      	subs	r1, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bc0:	400b      	ands	r3, r1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_I2C_Init+0x138>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1e59      	subs	r1, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bda:	e051      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	e04f      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d111      	bne.n	8004c0c <HAL_I2C_Init+0x168>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1e58      	subs	r0, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	440b      	add	r3, r1
 8004bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e012      	b.n	8004c32 <HAL_I2C_Init+0x18e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1e58      	subs	r0, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	0099      	lsls	r1, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c22:	3301      	adds	r3, #1
 8004c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_I2C_Init+0x196>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e022      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10e      	bne.n	8004c60 <HAL_I2C_Init+0x1bc>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1e58      	subs	r0, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	440b      	add	r3, r1
 8004c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	e00f      	b.n	8004c80 <HAL_I2C_Init+0x1dc>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1e58      	subs	r0, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	0099      	lsls	r1, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	6809      	ldr	r1, [r1, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6911      	ldr	r1, [r2, #16]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68d2      	ldr	r2, [r2, #12]
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	000186a0 	.word	0x000186a0
 8004d1c:	001e847f 	.word	0x001e847f
 8004d20:	003d08ff 	.word	0x003d08ff
 8004d24:	431bde83 	.word	0x431bde83
 8004d28:	10624dd3 	.word	0x10624dd3

08004d2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	461a      	mov	r2, r3
 8004d38:	460b      	mov	r3, r1
 8004d3a:	817b      	strh	r3, [r7, #10]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d40:	f7ff fae6 	bl	8004310 <HAL_GetTick>
 8004d44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	f040 80e0 	bne.w	8004f14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2319      	movs	r3, #25
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4970      	ldr	r1, [pc, #448]	; (8004f20 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f002 fad6 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0d3      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_I2C_Master_Transmit+0x50>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0cc      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d007      	beq.n	8004da2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2221      	movs	r2, #33	; 0x21
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2210      	movs	r2, #16
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	893a      	ldrh	r2, [r7, #8]
 8004dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a50      	ldr	r2, [pc, #320]	; (8004f24 <HAL_I2C_Master_Transmit+0x1f8>)
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004de4:	8979      	ldrh	r1, [r7, #10]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a3a      	ldr	r2, [r7, #32]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f002 f898 	bl	8006f20 <I2C_MasterRequestWrite>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e08d      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e10:	e066      	b.n	8004ee0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	6a39      	ldr	r1, [r7, #32]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f002 fb50 	bl	80074bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d107      	bne.n	8004e3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e06b      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_I2C_Master_Transmit+0x188>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d017      	beq.n	8004eb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	6a39      	ldr	r1, [r7, #32]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f002 fb40 	bl	800753e <I2C_WaitOnBTFFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d107      	bne.n	8004edc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e01a      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d194      	bne.n	8004e12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e000      	b.n	8004f16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
  }
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	00100002 	.word	0x00100002
 8004f24:	ffff0000 	.word	0xffff0000

08004f28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	; 0x30
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	461a      	mov	r2, r3
 8004f34:	460b      	mov	r3, r1
 8004f36:	817b      	strh	r3, [r7, #10]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f3c:	f7ff f9e8 	bl	8004310 <HAL_GetTick>
 8004f40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	f040 820b 	bne.w	8005366 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2319      	movs	r3, #25
 8004f56:	2201      	movs	r2, #1
 8004f58:	497c      	ldr	r1, [pc, #496]	; (800514c <HAL_I2C_Master_Receive+0x224>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f002 f9d8 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
 8004f68:	e1fe      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_I2C_Master_Receive+0x50>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e1f7      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d007      	beq.n	8004f9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2222      	movs	r2, #34	; 0x22
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	893a      	ldrh	r2, [r7, #8]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <HAL_I2C_Master_Receive+0x228>)
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fe0:	8979      	ldrh	r1, [r7, #10]
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f002 f81c 	bl	8007024 <I2C_MasterRequestRead>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e1b8      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e18c      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502a:	2b01      	cmp	r3, #1
 800502c:	d11b      	bne.n	8005066 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	e16c      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	2b02      	cmp	r3, #2
 800506c:	d11b      	bne.n	80050a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	e14c      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050cc:	e138      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	f200 80f1 	bhi.w	80052ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d123      	bne.n	8005128 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f002 fa9d 	bl	8007624 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e139      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005126:	e10b      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	2b02      	cmp	r3, #2
 800512e:	d14e      	bne.n	80051ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	4906      	ldr	r1, [pc, #24]	; (8005154 <HAL_I2C_Master_Receive+0x22c>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f002 f8e8 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e10e      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
 800514a:	bf00      	nop
 800514c:	00100002 	.word	0x00100002
 8005150:	ffff0000 	.word	0xffff0000
 8005154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051cc:	e0b8      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	4966      	ldr	r1, [pc, #408]	; (8005370 <HAL_I2C_Master_Receive+0x448>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f002 f899 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0bf      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2200      	movs	r2, #0
 8005232:	494f      	ldr	r1, [pc, #316]	; (8005370 <HAL_I2C_Master_Receive+0x448>)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f002 f86b 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e091      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b8:	e042      	b.n	8005340 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f002 f9b0 	bl	8007624 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e04c      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d118      	bne.n	8005340 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f aec2 	bne.w	80050ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3728      	adds	r7, #40	; 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	00010004 	.word	0x00010004

08005374 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b20      	cmp	r3, #32
 800539c:	f040 809a 	bne.w	80054d4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053a0:	4b50      	ldr	r3, [pc, #320]	; (80054e4 <HAL_I2C_Mem_Read_IT+0x170>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	08db      	lsrs	r3, r3, #3
 80053a6:	4a50      	ldr	r2, [pc, #320]	; (80054e8 <HAL_I2C_Mem_Read_IT+0x174>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	0a1a      	lsrs	r2, r3, #8
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009a      	lsls	r2, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	3b01      	subs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d116      	bne.n	80053f4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e070      	b.n	80054d6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d0db      	beq.n	80053ba <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_I2C_Mem_Read_IT+0x9c>
 800540c:	2302      	movs	r3, #2
 800540e:	e062      	b.n	80054d6 <HAL_I2C_Mem_Read_IT+0x162>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b01      	cmp	r3, #1
 8005424:	d007      	beq.n	8005436 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005444:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2222      	movs	r2, #34	; 0x22
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2240      	movs	r2, #64	; 0x40
 8005452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <HAL_I2C_Mem_Read_IT+0x178>)
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005478:	897a      	ldrh	r2, [r7, #10]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800547e:	893a      	ldrh	r2, [r7, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800549e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80054ce:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000028 	.word	0x20000028
 80054e8:	14f8b589 	.word	0x14f8b589
 80054ec:	ffff0000 	.word	0xffff0000

080054f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	460b      	mov	r3, r1
 80054fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005500:	f7fe ff06 	bl	8004310 <HAL_GetTick>
 8005504:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	f040 8111 	bne.w	800573a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2319      	movs	r3, #25
 800551e:	2201      	movs	r2, #1
 8005520:	4988      	ldr	r1, [pc, #544]	; (8005744 <HAL_I2C_IsDeviceReady+0x254>)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f001 fef4 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	e104      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_I2C_IsDeviceReady+0x50>
 800553c:	2302      	movs	r3, #2
 800553e:	e0fd      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d007      	beq.n	8005566 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005574:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2224      	movs	r2, #36	; 0x24
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a70      	ldr	r2, [pc, #448]	; (8005748 <HAL_I2C_IsDeviceReady+0x258>)
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005598:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f001 feb2 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c0:	d103      	bne.n	80055ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e0b6      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80055de:	f7fe fe97 	bl	8004310 <HAL_GetTick>
 80055e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005612:	e025      	b.n	8005660 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005614:	f7fe fe7c 	bl	8004310 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <HAL_I2C_IsDeviceReady+0x13a>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	22a0      	movs	r2, #160	; 0xa0
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2ba0      	cmp	r3, #160	; 0xa0
 800566a:	d005      	beq.n	8005678 <HAL_I2C_IsDeviceReady+0x188>
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <HAL_I2C_IsDeviceReady+0x188>
 8005672:	7dbb      	ldrb	r3, [r7, #22]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0cd      	beq.n	8005614 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d129      	bne.n	80056e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2319      	movs	r3, #25
 80056ba:	2201      	movs	r2, #1
 80056bc:	4921      	ldr	r1, [pc, #132]	; (8005744 <HAL_I2C_IsDeviceReady+0x254>)
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f001 fe26 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e036      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	e02c      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2319      	movs	r3, #25
 8005702:	2201      	movs	r2, #1
 8005704:	490f      	ldr	r1, [pc, #60]	; (8005744 <HAL_I2C_IsDeviceReady+0x254>)
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f001 fe02 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e012      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3301      	adds	r3, #1
 800571a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	f4ff af32 	bcc.w	800558a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
  }
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	00100002 	.word	0x00100002
 8005748:	ffff0000 	.word	0xffff0000

0800574c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b10      	cmp	r3, #16
 800577a:	d003      	beq.n	8005784 <HAL_I2C_EV_IRQHandler+0x38>
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	f040 80c1 	bne.w	8005906 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10d      	bne.n	80057ba <HAL_I2C_EV_IRQHandler+0x6e>
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057a4:	d003      	beq.n	80057ae <HAL_I2C_EV_IRQHandler+0x62>
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057ac:	d101      	bne.n	80057b2 <HAL_I2C_EV_IRQHandler+0x66>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <HAL_I2C_EV_IRQHandler+0x68>
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	f000 8132 	beq.w	8005a1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <HAL_I2C_EV_IRQHandler+0x92>
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	0a5b      	lsrs	r3, r3, #9
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d006      	beq.n	80057de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 ffac 	bl	800772e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fd87 	bl	80062ea <I2C_Master_SB>
 80057dc:	e092      	b.n	8005904 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <HAL_I2C_EV_IRQHandler+0xb2>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	0a5b      	lsrs	r3, r3, #9
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fdfd 	bl	80063f6 <I2C_Master_ADD10>
 80057fc:	e082      	b.n	8005904 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_I2C_EV_IRQHandler+0xd2>
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	0a5b      	lsrs	r3, r3, #9
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fe17 	bl	800644a <I2C_Master_ADDR>
 800581c:	e072      	b.n	8005904 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d03b      	beq.n	80058a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005838:	f000 80f3 	beq.w	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	09db      	lsrs	r3, r3, #7
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00f      	beq.n	8005868 <HAL_I2C_EV_IRQHandler+0x11c>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	0a9b      	lsrs	r3, r3, #10
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_I2C_EV_IRQHandler+0x11c>
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	089b      	lsrs	r3, r3, #2
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d103      	bne.n	8005868 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9f7 	bl	8005c54 <I2C_MasterTransmit_TXE>
 8005866:	e04d      	b.n	8005904 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80d6 	beq.w	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	0a5b      	lsrs	r3, r3, #9
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80cf 	beq.w	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	2b21      	cmp	r3, #33	; 0x21
 8005888:	d103      	bne.n	8005892 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa7e 	bl	8005d8c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005890:	e0c7      	b.n	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	f040 80c4 	bne.w	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 faec 	bl	8005e78 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058a0:	e0bf      	b.n	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b0:	f000 80b7 	beq.w	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00f      	beq.n	80058e0 <HAL_I2C_EV_IRQHandler+0x194>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	0a9b      	lsrs	r3, r3, #10
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <HAL_I2C_EV_IRQHandler+0x194>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb61 	bl	8005fa0 <I2C_MasterReceive_RXNE>
 80058de:	e011      	b.n	8005904 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 809a 	beq.w	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	0a5b      	lsrs	r3, r3, #9
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8093 	beq.w	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fc0a 	bl	8006116 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005902:	e08e      	b.n	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005904:	e08d      	b.n	8005a22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	e007      	b.n	8005928 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d012      	beq.n	800595a <HAL_I2C_EV_IRQHandler+0x20e>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	0a5b      	lsrs	r3, r3, #9
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00c      	beq.n	800595a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 ffc8 	bl	80068e8 <I2C_Slave_ADDR>
 8005958:	e066      	b.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HAL_I2C_EV_IRQHandler+0x22e>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	0a5b      	lsrs	r3, r3, #9
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 f802 	bl	800697c <I2C_Slave_STOPF>
 8005978:	e056      	b.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	2b21      	cmp	r3, #33	; 0x21
 800597e:	d002      	beq.n	8005986 <HAL_I2C_EV_IRQHandler+0x23a>
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	2b29      	cmp	r3, #41	; 0x29
 8005984:	d125      	bne.n	80059d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	09db      	lsrs	r3, r3, #7
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00f      	beq.n	80059b2 <HAL_I2C_EV_IRQHandler+0x266>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	0a9b      	lsrs	r3, r3, #10
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_I2C_EV_IRQHandler+0x266>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	089b      	lsrs	r3, r3, #2
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fede 	bl	800676c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059b0:	e039      	b.n	8005a26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	089b      	lsrs	r3, r3, #2
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d033      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x2da>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	0a5b      	lsrs	r3, r3, #9
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d02d      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 ff0b 	bl	80067e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059d0:	e029      	b.n	8005a26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00f      	beq.n	80059fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	0a9b      	lsrs	r3, r3, #10
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 ff16 	bl	8006828 <I2C_SlaveReceive_RXNE>
 80059fc:	e014      	b.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00e      	beq.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	0a5b      	lsrs	r3, r3, #9
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 ff44 	bl	80068a4 <I2C_SlaveReceive_BTF>
 8005a1c:	e004      	b.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08a      	sub	sp, #40	; 0x28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005a46:	2300      	movs	r3, #0
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00e      	beq.n	8005a7c <HAL_I2C_ER_IRQHandler+0x4e>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a7a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	0a5b      	lsrs	r3, r3, #9
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x78>
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	f043 0302 	orr.w	r3, r3, #2
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005aa4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	0a9b      	lsrs	r3, r3, #10
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d03f      	beq.n	8005b32 <HAL_I2C_ER_IRQHandler+0x104>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d039      	beq.n	8005b32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005abe:	7efb      	ldrb	r3, [r7, #27]
 8005ac0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005ad8:	7ebb      	ldrb	r3, [r7, #26]
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d112      	bne.n	8005b04 <HAL_I2C_ER_IRQHandler+0xd6>
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10f      	bne.n	8005b04 <HAL_I2C_ER_IRQHandler+0xd6>
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	2b21      	cmp	r3, #33	; 0x21
 8005ae8:	d008      	beq.n	8005afc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005aea:	7cfb      	ldrb	r3, [r7, #19]
 8005aec:	2b29      	cmp	r3, #41	; 0x29
 8005aee:	d005      	beq.n	8005afc <HAL_I2C_ER_IRQHandler+0xce>
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	2b28      	cmp	r3, #40	; 0x28
 8005af4:	d106      	bne.n	8005b04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b21      	cmp	r3, #33	; 0x21
 8005afa:	d103      	bne.n	8005b04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 f86d 	bl	8006bdc <I2C_Slave_AF>
 8005b02:	e016      	b.n	8005b32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b16:	7efb      	ldrb	r3, [r7, #27]
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d002      	beq.n	8005b22 <HAL_I2C_ER_IRQHandler+0xf4>
 8005b1c:	7efb      	ldrb	r3, [r7, #27]
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d107      	bne.n	8005b32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	0adb      	lsrs	r3, r3, #11
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00e      	beq.n	8005b5c <HAL_I2C_ER_IRQHandler+0x12e>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	f043 0308 	orr.w	r3, r3, #8
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005b5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 f8a4 	bl	8006cbc <I2C_ITError>
  }
}
 8005b74:	bf00      	nop
 8005b76:	3728      	adds	r7, #40	; 0x28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c46:	b2db      	uxtb	r3, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d150      	bne.n	8005d1c <I2C_MasterTransmit_TXE+0xc8>
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b21      	cmp	r3, #33	; 0x21
 8005c7e:	d14d      	bne.n	8005d1c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d01d      	beq.n	8005cc2 <I2C_MasterTransmit_TXE+0x6e>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d01a      	beq.n	8005cc2 <I2C_MasterTransmit_TXE+0x6e>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c92:	d016      	beq.n	8005cc2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ca2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2211      	movs	r2, #17
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff ff5e 	bl	8005b7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cc0:	e060      	b.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cd0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d107      	bne.n	8005d0c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff79 	bl	8005bfc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d0a:	e03b      	b.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ff31 	bl	8005b7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d1a:	e033      	b.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b21      	cmp	r3, #33	; 0x21
 8005d20:	d005      	beq.n	8005d2e <I2C_MasterTransmit_TXE+0xda>
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d12d      	bne.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b22      	cmp	r3, #34	; 0x22
 8005d2c:	d12a      	bne.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d108      	bne.n	8005d4a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d46:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d48:	e01c      	b.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d103      	bne.n	8005d5e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f88e 	bl	8005e78 <I2C_MemoryTransmit_TXE_BTF>
}
 8005d5c:	e012      	b.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d82:	e7ff      	b.n	8005d84 <I2C_MasterTransmit_TXE+0x130>
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b21      	cmp	r3, #33	; 0x21
 8005da4:	d164      	bne.n	8005e70 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d012      	beq.n	8005dd6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005dd4:	e04c      	b.n	8005e70 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d01d      	beq.n	8005e18 <I2C_MasterTransmit_BTF+0x8c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d01a      	beq.n	8005e18 <I2C_MasterTransmit_BTF+0x8c>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005de8:	d016      	beq.n	8005e18 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005df8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2211      	movs	r2, #17
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff feb3 	bl	8005b7c <HAL_I2C_MasterTxCpltCallback>
}
 8005e16:	e02b      	b.n	8005e70 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e26:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e36:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d107      	bne.n	8005e62 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fece 	bl	8005bfc <HAL_I2C_MemTxCpltCallback>
}
 8005e60:	e006      	b.n	8005e70 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff fe86 	bl	8005b7c <HAL_I2C_MasterTxCpltCallback>
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11d      	bne.n	8005ecc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10b      	bne.n	8005eb0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea8:	1c9a      	adds	r2, r3, #2
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005eae:	e073      	b.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	121b      	asrs	r3, r3, #8
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005eca:	e065      	b.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d10b      	bne.n	8005eec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005eea:	e055      	b.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d151      	bne.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b22      	cmp	r3, #34	; 0x22
 8005ef8:	d10d      	bne.n	8005f16 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f08:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f14:	e040      	b.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b21      	cmp	r3, #33	; 0x21
 8005f24:	d112      	bne.n	8005f4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	781a      	ldrb	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f4a:	e025      	b.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d120      	bne.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b21      	cmp	r3, #33	; 0x21
 8005f5a:	d11d      	bne.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f6a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fe32 	bl	8005bfc <HAL_I2C_MemTxCpltCallback>
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b22      	cmp	r3, #34	; 0x22
 8005fb2:	f040 80ac 	bne.w	800610e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d921      	bls.n	8006008 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	f040 808c 	bne.w	800610e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006004:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006006:	e082      	b.n	800610e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	2b02      	cmp	r3, #2
 800600e:	d075      	beq.n	80060fc <I2C_MasterReceive_RXNE+0x15c>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d002      	beq.n	800601c <I2C_MasterReceive_RXNE+0x7c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d16f      	bne.n	80060fc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 facf 	bl	80075c0 <I2C_WaitOnSTOPRequestThroughIT>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d142      	bne.n	80060ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006036:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006046:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d10a      	bne.n	8006098 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fe f857 	bl	8004144 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006096:	e03a      	b.n	800610e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2212      	movs	r2, #18
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fd72 	bl	8005b90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060ac:	e02f      	b.n	800610e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fd8b 	bl	8005c10 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060fa:	e008      	b.n	800610e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610a:	605a      	str	r2, [r3, #4]
}
 800610c:	e7ff      	b.n	800610e <I2C_MasterReceive_RXNE+0x16e>
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b04      	cmp	r3, #4
 800612c:	d11b      	bne.n	8006166 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006164:	e0bd      	b.n	80062e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b03      	cmp	r3, #3
 800616e:	d129      	bne.n	80061c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b04      	cmp	r3, #4
 8006184:	d00a      	beq.n	800619c <I2C_MasterReceive_BTF+0x86>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d007      	beq.n	800619c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061c2:	e08e      	b.n	80062e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d176      	bne.n	80062bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d002      	beq.n	80061da <I2C_MasterReceive_BTF+0xc4>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d108      	bne.n	80061ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e019      	b.n	8006220 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d002      	beq.n	80061f8 <I2C_MasterReceive_BTF+0xe2>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d108      	bne.n	800620a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e00a      	b.n	8006220 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b10      	cmp	r3, #16
 800620e:	d007      	beq.n	8006220 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800627a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	d10a      	bne.n	80062a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fd ff50 	bl	8004144 <HAL_I2C_MemRxCpltCallback>
}
 80062a4:	e01d      	b.n	80062e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2212      	movs	r2, #18
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fc6b 	bl	8005b90 <HAL_I2C_MasterRxCpltCallback>
}
 80062ba:	e012      	b.n	80062e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d117      	bne.n	800632e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006316:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006318:	e067      	b.n	80063ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]
}
 800632c:	e05d      	b.n	80063ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006336:	d133      	bne.n	80063a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b21      	cmp	r3, #33	; 0x21
 8006342:	d109      	bne.n	8006358 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006354:	611a      	str	r2, [r3, #16]
 8006356:	e008      	b.n	800636a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <I2C_Master_SB+0x92>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d032      	beq.n	80063ea <I2C_Master_SB+0x100>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d02d      	beq.n	80063ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639c:	605a      	str	r2, [r3, #4]
}
 800639e:	e024      	b.n	80063ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10e      	bne.n	80063c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	11db      	asrs	r3, r3, #7
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0306 	and.w	r3, r3, #6
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f063 030f 	orn	r3, r3, #15
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	611a      	str	r2, [r3, #16]
}
 80063c4:	e011      	b.n	80063ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d10d      	bne.n	80063ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	11db      	asrs	r3, r3, #7
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f003 0306 	and.w	r3, r3, #6
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f063 030e 	orn	r3, r3, #14
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	611a      	str	r2, [r3, #16]
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	b2da      	uxtb	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <I2C_Master_ADD10+0x26>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d108      	bne.n	800642e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <I2C_Master_ADD10+0x48>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800643c:	605a      	str	r2, [r3, #4]
  }
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800644a:	b480      	push	{r7}
 800644c:	b091      	sub	sp, #68	; 0x44
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b22      	cmp	r3, #34	; 0x22
 8006472:	f040 8169 	bne.w	8006748 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <I2C_Master_ADDR+0x54>
 800647e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d10b      	bne.n	800649e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006486:	2300      	movs	r3, #0
 8006488:	633b      	str	r3, [r7, #48]	; 0x30
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	633b      	str	r3, [r7, #48]	; 0x30
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	633b      	str	r3, [r7, #48]	; 0x30
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	e160      	b.n	8006760 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11d      	bne.n	80064e2 <I2C_Master_ADDR+0x98>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064ae:	d118      	bne.n	80064e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b0:	2300      	movs	r3, #0
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	651a      	str	r2, [r3, #80]	; 0x50
 80064e0:	e13e      	b.n	8006760 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d113      	bne.n	8006514 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ec:	2300      	movs	r3, #0
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e115      	b.n	8006740 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	f040 808a 	bne.w	8006634 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006526:	d137      	bne.n	8006598 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006536:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006546:	d113      	bne.n	8006570 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006556:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	e0e7      	b.n	8006740 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006570:	2300      	movs	r3, #0
 8006572:	623b      	str	r3, [r7, #32]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e0d3      	b.n	8006740 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	2b08      	cmp	r3, #8
 800659c:	d02e      	beq.n	80065fc <I2C_Master_ADDR+0x1b2>
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d02b      	beq.n	80065fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	2b12      	cmp	r3, #18
 80065a8:	d102      	bne.n	80065b0 <I2C_Master_ADDR+0x166>
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d125      	bne.n	80065fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d00e      	beq.n	80065d4 <I2C_Master_ADDR+0x18a>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d00b      	beq.n	80065d4 <I2C_Master_ADDR+0x18a>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d008      	beq.n	80065d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e007      	b.n	80065e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e4:	2300      	movs	r3, #0
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	e0a1      	b.n	8006740 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	61bb      	str	r3, [r7, #24]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e085      	b.n	8006740 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d14d      	bne.n	80066da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	2b04      	cmp	r3, #4
 8006642:	d016      	beq.n	8006672 <I2C_Master_ADDR+0x228>
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	2b02      	cmp	r3, #2
 8006648:	d013      	beq.n	8006672 <I2C_Master_ADDR+0x228>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	2b10      	cmp	r3, #16
 800664e:	d010      	beq.n	8006672 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e007      	b.n	8006682 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006680:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800668c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006690:	d117      	bne.n	80066c2 <I2C_Master_ADDR+0x278>
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006698:	d00b      	beq.n	80066b2 <I2C_Master_ADDR+0x268>
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	2b01      	cmp	r3, #1
 800669e:	d008      	beq.n	80066b2 <I2C_Master_ADDR+0x268>
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d005      	beq.n	80066b2 <I2C_Master_ADDR+0x268>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d002      	beq.n	80066b2 <I2C_Master_ADDR+0x268>
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d107      	bne.n	80066c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	e032      	b.n	8006740 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f8:	d117      	bne.n	800672a <I2C_Master_ADDR+0x2e0>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006700:	d00b      	beq.n	800671a <I2C_Master_ADDR+0x2d0>
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	2b01      	cmp	r3, #1
 8006706:	d008      	beq.n	800671a <I2C_Master_ADDR+0x2d0>
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	2b08      	cmp	r3, #8
 800670c:	d005      	beq.n	800671a <I2C_Master_ADDR+0x2d0>
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	2b10      	cmp	r3, #16
 8006712:	d002      	beq.n	800671a <I2C_Master_ADDR+0x2d0>
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	2b20      	cmp	r3, #32
 8006718:	d107      	bne.n	800672a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006728:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672a:	2300      	movs	r3, #0
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006746:	e00b      	b.n	8006760 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
}
 800675e:	e7ff      	b.n	8006760 <I2C_Master_ADDR+0x316>
 8006760:	bf00      	nop
 8006762:	3744      	adds	r7, #68	; 0x44
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02b      	beq.n	80067de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d114      	bne.n	80067de <I2C_SlaveTransmit_TXE+0x72>
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b29      	cmp	r3, #41	; 0x29
 80067b8:	d111      	bne.n	80067de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2221      	movs	r2, #33	; 0x21
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2228      	movs	r2, #40	; 0x28
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff f9e3 	bl	8005ba4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d011      	beq.n	800681c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006836:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d02c      	beq.n	800689c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d114      	bne.n	800689c <I2C_SlaveReceive_RXNE+0x74>
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b2a      	cmp	r3, #42	; 0x2a
 8006876:	d111      	bne.n	800689c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006886:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2222      	movs	r2, #34	; 0x22
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2228      	movs	r2, #40	; 0x28
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff f98e 	bl	8005bb8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d012      	beq.n	80068dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006902:	2b28      	cmp	r3, #40	; 0x28
 8006904:	d127      	bne.n	8006956 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006914:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	089b      	lsrs	r3, r3, #2
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006922:	2301      	movs	r3, #1
 8006924:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	09db      	lsrs	r3, r3, #7
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	81bb      	strh	r3, [r7, #12]
 8006938:	e002      	b.n	8006940 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006948:	89ba      	ldrh	r2, [r7, #12]
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff f93c 	bl	8005bcc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006954:	e00e      	b.n	8006974 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006956:	2300      	movs	r3, #0
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800699a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800699c:	2300      	movs	r3, #0
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	60bb      	str	r3, [r7, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d8:	d172      	bne.n	8006ac0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b22      	cmp	r3, #34	; 0x22
 80069de:	d002      	beq.n	80069e6 <I2C_Slave_STOPF+0x6a>
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	2b2a      	cmp	r3, #42	; 0x2a
 80069e4:	d135      	bne.n	8006a52 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f043 0204 	orr.w	r2, r3, #4
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fd fe49 	bl	80046b6 <HAL_DMA_GetState>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d049      	beq.n	8006abe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	4a69      	ldr	r2, [pc, #420]	; (8006bd4 <I2C_Slave_STOPF+0x258>)
 8006a30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fd fe1b 	bl	8004672 <HAL_DMA_Abort_IT>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d03d      	beq.n	8006abe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a50:	e035      	b.n	8006abe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f043 0204 	orr.w	r2, r3, #4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fd fe13 	bl	80046b6 <HAL_DMA_GetState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d014      	beq.n	8006ac0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9a:	4a4e      	ldr	r2, [pc, #312]	; (8006bd4 <I2C_Slave_STOPF+0x258>)
 8006a9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fd fde5 	bl	8004672 <HAL_DMA_Abort_IT>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	e000      	b.n	8006ac0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006abe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d03e      	beq.n	8006b48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d112      	bne.n	8006afe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d112      	bne.n	8006b32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	f043 0204 	orr.w	r2, r3, #4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8b3 	bl	8006cbc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006b56:	e039      	b.n	8006bcc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b5c:	d109      	bne.n	8006b72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2228      	movs	r2, #40	; 0x28
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff f823 	bl	8005bb8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b28      	cmp	r3, #40	; 0x28
 8006b7c:	d111      	bne.n	8006ba2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <I2C_Slave_STOPF+0x25c>)
 8006b82:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff f824 	bl	8005be8 <HAL_I2C_ListenCpltCallback>
}
 8006ba0:	e014      	b.n	8006bcc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	2b22      	cmp	r3, #34	; 0x22
 8006ba8:	d002      	beq.n	8006bb0 <I2C_Slave_STOPF+0x234>
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b22      	cmp	r3, #34	; 0x22
 8006bae:	d10d      	bne.n	8006bcc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fe fff6 	bl	8005bb8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006bcc:	bf00      	nop
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	080071c1 	.word	0x080071c1
 8006bd8:	ffff0000 	.word	0xffff0000

08006bdc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d002      	beq.n	8006bfe <I2C_Slave_AF+0x22>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d129      	bne.n	8006c52 <I2C_Slave_AF+0x76>
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	2b28      	cmp	r3, #40	; 0x28
 8006c02:	d126      	bne.n	8006c52 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a2c      	ldr	r2, [pc, #176]	; (8006cb8 <I2C_Slave_AF+0xdc>)
 8006c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c18:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c22:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fe ffcc 	bl	8005be8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006c50:	e02e      	b.n	8006cb0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b21      	cmp	r3, #33	; 0x21
 8006c56:	d126      	bne.n	8006ca6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <I2C_Slave_AF+0xdc>)
 8006c5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2221      	movs	r2, #33	; 0x21
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fe ff80 	bl	8005ba4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ca4:	e004      	b.n	8006cb0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cae:	615a      	str	r2, [r3, #20]
}
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	ffff0000 	.word	0xffff0000

08006cbc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d002      	beq.n	8006ce0 <I2C_ITError+0x24>
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d10a      	bne.n	8006cf6 <I2C_ITError+0x3a>
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	2b22      	cmp	r3, #34	; 0x22
 8006ce4:	d107      	bne.n	8006cf6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cf4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cfc:	2b28      	cmp	r3, #40	; 0x28
 8006cfe:	d107      	bne.n	8006d10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2228      	movs	r2, #40	; 0x28
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d0e:	e015      	b.n	8006d3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1e:	d00a      	beq.n	8006d36 <I2C_ITError+0x7a>
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b60      	cmp	r3, #96	; 0x60
 8006d24:	d007      	beq.n	8006d36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4a:	d162      	bne.n	8006e12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d020      	beq.n	8006dac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	4a6a      	ldr	r2, [pc, #424]	; (8006f18 <I2C_ITError+0x25c>)
 8006d70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fd fc7b 	bl	8004672 <HAL_DMA_Abort_IT>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 8089 	beq.w	8006e96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0201 	bic.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006da6:	4610      	mov	r0, r2
 8006da8:	4798      	blx	r3
 8006daa:	e074      	b.n	8006e96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	4a59      	ldr	r2, [pc, #356]	; (8006f18 <I2C_ITError+0x25c>)
 8006db2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fd fc5a 	bl	8004672 <HAL_DMA_Abort_IT>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d068      	beq.n	8006e96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d10b      	bne.n	8006dea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0201 	bic.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	e041      	b.n	8006e96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b60      	cmp	r3, #96	; 0x60
 8006e1c:	d125      	bne.n	8006e6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d10b      	bne.n	8006e52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0201 	bic.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fe fede 	bl	8005c24 <HAL_I2C_AbortCpltCallback>
 8006e68:	e015      	b.n	8006e96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d10b      	bne.n	8006e90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fe febd 	bl	8005c10 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10e      	bne.n	8006ec4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ed2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eda:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d113      	bne.n	8006f10 <I2C_ITError+0x254>
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b28      	cmp	r3, #40	; 0x28
 8006eec:	d110      	bne.n	8006f10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <I2C_ITError+0x260>)
 8006ef2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fe fe6c 	bl	8005be8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	080071c1 	.word	0x080071c1
 8006f1c:	ffff0000 	.word	0xffff0000

08006f20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d006      	beq.n	8006f4a <I2C_MasterRequestWrite+0x2a>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d003      	beq.n	8006f4a <I2C_MasterRequestWrite+0x2a>
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f48:	d108      	bne.n	8006f5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e00b      	b.n	8006f74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	2b12      	cmp	r3, #18
 8006f62:	d107      	bne.n	8006f74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f9c5 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00d      	beq.n	8006fa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9a:	d103      	bne.n	8006fa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e035      	b.n	8007014 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fb0:	d108      	bne.n	8006fc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fb2:	897b      	ldrh	r3, [r7, #10]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fc0:	611a      	str	r2, [r3, #16]
 8006fc2:	e01b      	b.n	8006ffc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006fc4:	897b      	ldrh	r3, [r7, #10]
 8006fc6:	11db      	asrs	r3, r3, #7
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 0306 	and.w	r3, r3, #6
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f063 030f 	orn	r3, r3, #15
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	490e      	ldr	r1, [pc, #56]	; (800701c <I2C_MasterRequestWrite+0xfc>)
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f9eb 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e010      	b.n	8007014 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ff2:	897b      	ldrh	r3, [r7, #10]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	4907      	ldr	r1, [pc, #28]	; (8007020 <I2C_MasterRequestWrite+0x100>)
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f9db 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	00010008 	.word	0x00010008
 8007020:	00010002 	.word	0x00010002

08007024 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	607a      	str	r2, [r7, #4]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	460b      	mov	r3, r1
 8007032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007048:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b08      	cmp	r3, #8
 800704e:	d006      	beq.n	800705e <I2C_MasterRequestRead+0x3a>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d003      	beq.n	800705e <I2C_MasterRequestRead+0x3a>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800705c:	d108      	bne.n	8007070 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e00b      	b.n	8007088 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	2b11      	cmp	r3, #17
 8007076:	d107      	bne.n	8007088 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f93b 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ae:	d103      	bne.n	80070b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e079      	b.n	80071b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c4:	d108      	bne.n	80070d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070c6:	897b      	ldrh	r3, [r7, #10]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	611a      	str	r2, [r3, #16]
 80070d6:	e05f      	b.n	8007198 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070d8:	897b      	ldrh	r3, [r7, #10]
 80070da:	11db      	asrs	r3, r3, #7
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0306 	and.w	r3, r3, #6
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f063 030f 	orn	r3, r3, #15
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4930      	ldr	r1, [pc, #192]	; (80071b8 <I2C_MasterRequestRead+0x194>)
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f961 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e054      	b.n	80071b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007106:	897b      	ldrh	r3, [r7, #10]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4929      	ldr	r1, [pc, #164]	; (80071bc <I2C_MasterRequestRead+0x198>)
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f951 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e044      	b.n	80071b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	613b      	str	r3, [r7, #16]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800714a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f8d9 	bl	8007310 <I2C_WaitOnFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00d      	beq.n	8007180 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007172:	d103      	bne.n	800717c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800717a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e017      	b.n	80071b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007180:	897b      	ldrh	r3, [r7, #10]
 8007182:	11db      	asrs	r3, r3, #7
 8007184:	b2db      	uxtb	r3, r3
 8007186:	f003 0306 	and.w	r3, r3, #6
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f063 030e 	orn	r3, r3, #14
 8007190:	b2da      	uxtb	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4907      	ldr	r1, [pc, #28]	; (80071bc <I2C_MasterRequestRead+0x198>)
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f90d 	bl	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	00010008 	.word	0x00010008
 80071bc:	00010002 	.word	0x00010002

080071c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80071da:	4b4b      	ldr	r3, [pc, #300]	; (8007308 <I2C_DMAAbort+0x148>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	4a4a      	ldr	r2, [pc, #296]	; (800730c <I2C_DMAAbort+0x14c>)
 80071e2:	fba2 2303 	umull	r2, r3, r2, r3
 80071e6:	0a1a      	lsrs	r2, r3, #8
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	00da      	lsls	r2, r3, #3
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007206:	e00a      	b.n	800721e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3b01      	subs	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800721c:	d0ea      	beq.n	80071f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	2200      	movs	r2, #0
 800722c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	2200      	movs	r2, #0
 800723c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2200      	movs	r2, #0
 8007262:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	2200      	movs	r2, #0
 8007272:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0201 	bic.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b60      	cmp	r3, #96	; 0x60
 800728e:	d10e      	bne.n	80072ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072a6:	6978      	ldr	r0, [r7, #20]
 80072a8:	f7fe fcbc 	bl	8005c24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072ac:	e027      	b.n	80072fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072ae:	7cfb      	ldrb	r3, [r7, #19]
 80072b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072b4:	2b28      	cmp	r3, #40	; 0x28
 80072b6:	d117      	bne.n	80072e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2228      	movs	r2, #40	; 0x28
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072e6:	e007      	b.n	80072f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80072f8:	6978      	ldr	r0, [r7, #20]
 80072fa:	f7fe fc89 	bl	8005c10 <HAL_I2C_ErrorCallback>
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000028 	.word	0x20000028
 800730c:	14f8b589 	.word	0x14f8b589

08007310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007320:	e025      	b.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007328:	d021      	beq.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fc fff1 	bl	8004310 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d116      	bne.n	800736e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e023      	b.n	80073b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b01      	cmp	r3, #1
 8007376:	d10d      	bne.n	8007394 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	43da      	mvns	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4013      	ands	r3, r2
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	e00c      	b.n	80073ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	43da      	mvns	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4013      	ands	r3, r2
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf0c      	ite	eq
 80073a6:	2301      	moveq	r3, #1
 80073a8:	2300      	movne	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d0b6      	beq.n	8007322 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073cc:	e051      	b.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073dc:	d123      	bne.n	8007426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f043 0204 	orr.w	r2, r3, #4
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e046      	b.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800742c:	d021      	beq.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800742e:	f7fc ff6f 	bl	8004310 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d116      	bne.n	8007472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f043 0220 	orr.w	r2, r3, #32
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e020      	b.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d10c      	bne.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	43da      	mvns	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4013      	ands	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	bf14      	ite	ne
 800748e:	2301      	movne	r3, #1
 8007490:	2300      	moveq	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	e00b      	b.n	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	43da      	mvns	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4013      	ands	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf14      	ite	ne
 80074a8:	2301      	movne	r3, #1
 80074aa:	2300      	moveq	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d18d      	bne.n	80073ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074c8:	e02d      	b.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f900 	bl	80076d0 <I2C_IsAcknowledgeFailed>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e02d      	b.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e0:	d021      	beq.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e2:	f7fc ff15 	bl	8004310 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d116      	bne.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e007      	b.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007530:	2b80      	cmp	r3, #128	; 0x80
 8007532:	d1ca      	bne.n	80074ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800754a:	e02d      	b.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f8bf 	bl	80076d0 <I2C_IsAcknowledgeFailed>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e02d      	b.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007562:	d021      	beq.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007564:	f7fc fed4 	bl	8004310 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d116      	bne.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e007      	b.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d1ca      	bne.n	800754c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80075cc:	4b13      	ldr	r3, [pc, #76]	; (800761c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	08db      	lsrs	r3, r3, #3
 80075d2:	4a13      	ldr	r2, [pc, #76]	; (8007620 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80075d4:	fba2 2303 	umull	r2, r3, r2, r3
 80075d8:	0a1a      	lsrs	r2, r3, #8
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e008      	b.n	8007610 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760c:	d0e9      	beq.n	80075e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	20000028 	.word	0x20000028
 8007620:	14f8b589 	.word	0x14f8b589

08007624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007630:	e042      	b.n	80076b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b10      	cmp	r3, #16
 800763e:	d119      	bne.n	8007674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0210 	mvn.w	r2, #16
 8007648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e029      	b.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007674:	f7fc fe4c 	bl	8004310 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	d302      	bcc.n	800768a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d116      	bne.n	80076b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	f043 0220 	orr.w	r2, r3, #32
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e007      	b.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d1b5      	bne.n	8007632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e6:	d11b      	bne.n	8007720 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	f043 0204 	orr.w	r2, r3, #4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800773e:	d103      	bne.n	8007748 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007746:	e007      	b.n	8007758 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007750:	d102      	bne.n	8007758 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2208      	movs	r2, #8
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e267      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d075      	beq.n	800786e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007782:	4b88      	ldr	r3, [pc, #544]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d00c      	beq.n	80077a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800778e:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007796:	2b08      	cmp	r3, #8
 8007798:	d112      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800779a:	4b82      	ldr	r3, [pc, #520]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077a6:	d10b      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a8:	4b7e      	ldr	r3, [pc, #504]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d05b      	beq.n	800786c <HAL_RCC_OscConfig+0x108>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d157      	bne.n	800786c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e242      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c8:	d106      	bne.n	80077d8 <HAL_RCC_OscConfig+0x74>
 80077ca:	4b76      	ldr	r3, [pc, #472]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a75      	ldr	r2, [pc, #468]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e01d      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x98>
 80077e2:	4b70      	ldr	r3, [pc, #448]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a6f      	ldr	r2, [pc, #444]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4b6d      	ldr	r3, [pc, #436]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6c      	ldr	r2, [pc, #432]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077fc:	4b69      	ldr	r3, [pc, #420]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a68      	ldr	r2, [pc, #416]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	4b66      	ldr	r3, [pc, #408]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a65      	ldr	r2, [pc, #404]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800780e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800781c:	f7fc fd78 	bl	8004310 <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007824:	f7fc fd74 	bl	8004310 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	; 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e207      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007836:	4b5b      	ldr	r3, [pc, #364]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0f0      	beq.n	8007824 <HAL_RCC_OscConfig+0xc0>
 8007842:	e014      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007844:	f7fc fd64 	bl	8004310 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800784c:	f7fc fd60 	bl	8004310 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b64      	cmp	r3, #100	; 0x64
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1f3      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800785e:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0xe8>
 800786a:	e000      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d063      	beq.n	8007942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787a:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007886:	4b47      	ldr	r3, [pc, #284]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800788e:	2b08      	cmp	r3, #8
 8007890:	d11c      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007892:	4b44      	ldr	r3, [pc, #272]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d116      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800789e:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d001      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e1c7      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b6:	4b3b      	ldr	r3, [pc, #236]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4937      	ldr	r1, [pc, #220]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ca:	e03a      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d4:	4b34      	ldr	r3, [pc, #208]	; (80079a8 <HAL_RCC_OscConfig+0x244>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078da:	f7fc fd19 	bl	8004310 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e2:	f7fc fd15 	bl	8004310 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e1a8      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007900:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4925      	ldr	r1, [pc, #148]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007910:	4313      	orrs	r3, r2
 8007912:	600b      	str	r3, [r1, #0]
 8007914:	e015      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <HAL_RCC_OscConfig+0x244>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fc fcf8 	bl	8004310 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007924:	f7fc fcf4 	bl	8004310 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e187      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007936:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d036      	beq.n	80079bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007956:	4b15      	ldr	r3, [pc, #84]	; (80079ac <HAL_RCC_OscConfig+0x248>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795c:	f7fc fcd8 	bl	8004310 <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007964:	f7fc fcd4 	bl	8004310 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e167      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x200>
 8007982:	e01b      	b.n	80079bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <HAL_RCC_OscConfig+0x248>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798a:	f7fc fcc1 	bl	8004310 <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	e00e      	b.n	80079b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007992:	f7fc fcbd 	bl	8004310 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d907      	bls.n	80079b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e150      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
 80079a4:	40023800 	.word	0x40023800
 80079a8:	42470000 	.word	0x42470000
 80079ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b0:	4b88      	ldr	r3, [pc, #544]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1ea      	bne.n	8007992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8097 	beq.w	8007af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ce:	4b81      	ldr	r3, [pc, #516]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10f      	bne.n	80079fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	4b7d      	ldr	r3, [pc, #500]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	4a7c      	ldr	r2, [pc, #496]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ea:	4b7a      	ldr	r3, [pc, #488]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fa:	4b77      	ldr	r3, [pc, #476]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d118      	bne.n	8007a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a06:	4b74      	ldr	r3, [pc, #464]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a73      	ldr	r2, [pc, #460]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a12:	f7fc fc7d 	bl	8004310 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a1a:	f7fc fc79 	bl	8004310 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e10c      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a2c:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f0      	beq.n	8007a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <HAL_RCC_OscConfig+0x2ea>
 8007a40:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a63      	ldr	r2, [pc, #396]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4c:	e01c      	b.n	8007a88 <HAL_RCC_OscConfig+0x324>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCC_OscConfig+0x30c>
 8007a56:	4b5f      	ldr	r3, [pc, #380]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	4a5e      	ldr	r2, [pc, #376]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	f043 0304 	orr.w	r3, r3, #4
 8007a60:	6713      	str	r3, [r2, #112]	; 0x70
 8007a62:	4b5c      	ldr	r3, [pc, #368]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a5b      	ldr	r2, [pc, #364]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	e00b      	b.n	8007a88 <HAL_RCC_OscConfig+0x324>
 8007a70:	4b58      	ldr	r3, [pc, #352]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a74:	4a57      	ldr	r2, [pc, #348]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7c:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a80:	4a54      	ldr	r2, [pc, #336]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a82:	f023 0304 	bic.w	r3, r3, #4
 8007a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d015      	beq.n	8007abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a90:	f7fc fc3e 	bl	8004310 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a96:	e00a      	b.n	8007aae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a98:	f7fc fc3a 	bl	8004310 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e0cb      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aae:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0ee      	beq.n	8007a98 <HAL_RCC_OscConfig+0x334>
 8007aba:	e014      	b.n	8007ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007abc:	f7fc fc28 	bl	8004310 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ac2:	e00a      	b.n	8007ada <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ac4:	f7fc fc24 	bl	8004310 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e0b5      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ada:	4b3e      	ldr	r3, [pc, #248]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1ee      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d105      	bne.n	8007af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aec:	4b39      	ldr	r3, [pc, #228]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	4a38      	ldr	r2, [pc, #224]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80a1 	beq.w	8007c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b02:	4b34      	ldr	r3, [pc, #208]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d05c      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d141      	bne.n	8007b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b16:	4b31      	ldr	r3, [pc, #196]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b1c:	f7fc fbf8 	bl	8004310 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b24:	f7fc fbf4 	bl	8004310 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e087      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b36:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f0      	bne.n	8007b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	491b      	ldr	r1, [pc, #108]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b6c:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b72:	f7fc fbcd 	bl	8004310 <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b78:	e008      	b.n	8007b8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b7a:	f7fc fbc9 	bl	8004310 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e05c      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b8c:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0f0      	beq.n	8007b7a <HAL_RCC_OscConfig+0x416>
 8007b98:	e054      	b.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba0:	f7fc fbb6 	bl	8004310 <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba8:	f7fc fbb2 	bl	8004310 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e045      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f0      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x444>
 8007bc6:	e03d      	b.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d107      	bne.n	8007be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e038      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000
 8007bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <HAL_RCC_OscConfig+0x4ec>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d028      	beq.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d121      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d11a      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c10:	4013      	ands	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d111      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d107      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d001      	beq.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40023800 	.word	0x40023800

08007c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e0cc      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c68:	4b68      	ldr	r3, [pc, #416]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d90c      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c76:	4b65      	ldr	r3, [pc, #404]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b63      	ldr	r3, [pc, #396]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0b8      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d020      	beq.n	8007cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ca8:	4b59      	ldr	r3, [pc, #356]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	4a58      	ldr	r2, [pc, #352]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cc0:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	4a52      	ldr	r2, [pc, #328]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ccc:	4b50      	ldr	r3, [pc, #320]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	494d      	ldr	r1, [pc, #308]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d044      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d119      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e07f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d003      	beq.n	8007d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d107      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d12:	4b3f      	ldr	r3, [pc, #252]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e06f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d22:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e067      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d32:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f023 0203 	bic.w	r2, r3, #3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4934      	ldr	r1, [pc, #208]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d44:	f7fc fae4 	bl	8004310 <HAL_GetTick>
 8007d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d4c:	f7fc fae0 	bl	8004310 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e04f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 020c 	and.w	r2, r3, #12
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d1eb      	bne.n	8007d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d74:	4b25      	ldr	r3, [pc, #148]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d20c      	bcs.n	8007d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d82:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8a:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e032      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007da8:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4916      	ldr	r1, [pc, #88]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dc6:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	490e      	ldr	r1, [pc, #56]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dda:	f000 f821 	bl	8007e20 <HAL_RCC_GetSysClockFreq>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	490a      	ldr	r1, [pc, #40]	; (8007e14 <HAL_RCC_ClockConfig+0x1c0>)
 8007dec:	5ccb      	ldrb	r3, [r1, r3]
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <HAL_RCC_ClockConfig+0x1c4>)
 8007df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <HAL_RCC_ClockConfig+0x1c8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fc fa44 	bl	8004288 <HAL_InitTick>

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40023c00 	.word	0x40023c00
 8007e10:	40023800 	.word	0x40023800
 8007e14:	0800d328 	.word	0x0800d328
 8007e18:	20000028 	.word	0x20000028
 8007e1c:	2000002c 	.word	0x2000002c

08007e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e24:	b094      	sub	sp, #80	; 0x50
 8007e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e30:	2300      	movs	r3, #0
 8007e32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e38:	4b79      	ldr	r3, [pc, #484]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 030c 	and.w	r3, r3, #12
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d00d      	beq.n	8007e60 <HAL_RCC_GetSysClockFreq+0x40>
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	f200 80e1 	bhi.w	800800c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_RCC_GetSysClockFreq+0x34>
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d003      	beq.n	8007e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e52:	e0db      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e54:	4b73      	ldr	r3, [pc, #460]	; (8008024 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e58:	e0db      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e5a:	4b73      	ldr	r3, [pc, #460]	; (8008028 <HAL_RCC_GetSysClockFreq+0x208>)
 8007e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e5e:	e0d8      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e60:	4b6f      	ldr	r3, [pc, #444]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e6a:	4b6d      	ldr	r3, [pc, #436]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d063      	beq.n	8007f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e76:	4b6a      	ldr	r3, [pc, #424]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	099b      	lsrs	r3, r3, #6
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e88:	633b      	str	r3, [r7, #48]	; 0x30
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e92:	4622      	mov	r2, r4
 8007e94:	462b      	mov	r3, r5
 8007e96:	f04f 0000 	mov.w	r0, #0
 8007e9a:	f04f 0100 	mov.w	r1, #0
 8007e9e:	0159      	lsls	r1, r3, #5
 8007ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ea4:	0150      	lsls	r0, r2, #5
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4621      	mov	r1, r4
 8007eac:	1a51      	subs	r1, r2, r1
 8007eae:	6139      	str	r1, [r7, #16]
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	018b      	lsls	r3, r1, #6
 8007ec8:	4651      	mov	r1, sl
 8007eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ece:	4651      	mov	r1, sl
 8007ed0:	018a      	lsls	r2, r1, #6
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8007ed8:	4659      	mov	r1, fp
 8007eda:	eb63 0901 	sbc.w	r9, r3, r1
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ef2:	4690      	mov	r8, r2
 8007ef4:	4699      	mov	r9, r3
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	eb18 0303 	adds.w	r3, r8, r3
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	462b      	mov	r3, r5
 8007f00:	eb49 0303 	adc.w	r3, r9, r3
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f12:	4629      	mov	r1, r5
 8007f14:	024b      	lsls	r3, r1, #9
 8007f16:	4621      	mov	r1, r4
 8007f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	024a      	lsls	r2, r1, #9
 8007f20:	4610      	mov	r0, r2
 8007f22:	4619      	mov	r1, r3
 8007f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f26:	2200      	movs	r2, #0
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f30:	f7f8 fe8a 	bl	8000c48 <__aeabi_uldivmod>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4613      	mov	r3, r2
 8007f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f3c:	e058      	b.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f3e:	4b38      	ldr	r3, [pc, #224]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	099b      	lsrs	r3, r3, #6
 8007f44:	2200      	movs	r2, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	4611      	mov	r1, r2
 8007f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f4e:	623b      	str	r3, [r7, #32]
 8007f50:	2300      	movs	r3, #0
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
 8007f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f58:	4642      	mov	r2, r8
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	f04f 0000 	mov.w	r0, #0
 8007f60:	f04f 0100 	mov.w	r1, #0
 8007f64:	0159      	lsls	r1, r3, #5
 8007f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f6a:	0150      	lsls	r0, r2, #5
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4641      	mov	r1, r8
 8007f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f76:	4649      	mov	r1, r9
 8007f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	f04f 0300 	mov.w	r3, #0
 8007f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f90:	ebb2 040a 	subs.w	r4, r2, sl
 8007f94:	eb63 050b 	sbc.w	r5, r3, fp
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	00eb      	lsls	r3, r5, #3
 8007fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fa6:	00e2      	lsls	r2, r4, #3
 8007fa8:	4614      	mov	r4, r2
 8007faa:	461d      	mov	r5, r3
 8007fac:	4643      	mov	r3, r8
 8007fae:	18e3      	adds	r3, r4, r3
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	eb45 0303 	adc.w	r3, r5, r3
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	028b      	lsls	r3, r1, #10
 8007fca:	4621      	mov	r1, r4
 8007fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	028a      	lsls	r2, r1, #10
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fda:	2200      	movs	r2, #0
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	61fa      	str	r2, [r7, #28]
 8007fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fe4:	f7f8 fe30 	bl	8000c48 <__aeabi_uldivmod>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4613      	mov	r3, r2
 8007fee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008004:	fbb2 f3f3 	udiv	r3, r2, r3
 8008008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800800a:	e002      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <HAL_RCC_GetSysClockFreq+0x204>)
 800800e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008014:	4618      	mov	r0, r3
 8008016:	3750      	adds	r7, #80	; 0x50
 8008018:	46bd      	mov	sp, r7
 800801a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800801e:	bf00      	nop
 8008020:	40023800 	.word	0x40023800
 8008024:	00f42400 	.word	0x00f42400
 8008028:	007a1200 	.word	0x007a1200

0800802c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008030:	4b03      	ldr	r3, [pc, #12]	; (8008040 <HAL_RCC_GetHCLKFreq+0x14>)
 8008032:	681b      	ldr	r3, [r3, #0]
}
 8008034:	4618      	mov	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000028 	.word	0x20000028

08008044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008048:	f7ff fff0 	bl	800802c <HAL_RCC_GetHCLKFreq>
 800804c:	4602      	mov	r2, r0
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	0a9b      	lsrs	r3, r3, #10
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	4903      	ldr	r1, [pc, #12]	; (8008068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800805a:	5ccb      	ldrb	r3, [r1, r3]
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008060:	4618      	mov	r0, r3
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40023800 	.word	0x40023800
 8008068:	0800d338 	.word	0x0800d338

0800806c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008070:	f7ff ffdc 	bl	800802c <HAL_RCC_GetHCLKFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	0b5b      	lsrs	r3, r3, #13
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	4903      	ldr	r1, [pc, #12]	; (8008090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40023800 	.word	0x40023800
 8008090:	0800d338 	.word	0x0800d338

08008094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e07b      	b.n	800819e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d108      	bne.n	80080c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080b6:	d009      	beq.n	80080cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	61da      	str	r2, [r3, #28]
 80080be:	e005      	b.n	80080cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa fb6e 	bl	80027c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008150:	ea42 0103 	orr.w	r1, r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	0c1b      	lsrs	r3, r3, #16
 800816a:	f003 0104 	and.w	r1, r3, #4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	f003 0210 	and.w	r2, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800818c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e041      	b.n	800823c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d106      	bne.n	80081d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7fa fb63 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f000 fdb3 	bl	8008d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b01      	cmp	r3, #1
 8008256:	d001      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e04e      	b.n	80082fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f042 0201 	orr.w	r2, r2, #1
 8008272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a23      	ldr	r2, [pc, #140]	; (8008308 <HAL_TIM_Base_Start_IT+0xc4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d022      	beq.n	80082c4 <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008286:	d01d      	beq.n	80082c4 <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1f      	ldr	r2, [pc, #124]	; (800830c <HAL_TIM_Base_Start_IT+0xc8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d018      	beq.n	80082c4 <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1e      	ldr	r2, [pc, #120]	; (8008310 <HAL_TIM_Base_Start_IT+0xcc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <HAL_TIM_Base_Start_IT+0x80>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1c      	ldr	r2, [pc, #112]	; (8008314 <HAL_TIM_Base_Start_IT+0xd0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00e      	beq.n	80082c4 <HAL_TIM_Base_Start_IT+0x80>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1b      	ldr	r2, [pc, #108]	; (8008318 <HAL_TIM_Base_Start_IT+0xd4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_TIM_Base_Start_IT+0x80>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a19      	ldr	r2, [pc, #100]	; (800831c <HAL_TIM_Base_Start_IT+0xd8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_TIM_Base_Start_IT+0x80>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a18      	ldr	r2, [pc, #96]	; (8008320 <HAL_TIM_Base_Start_IT+0xdc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d111      	bne.n	80082e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	d010      	beq.n	80082f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0201 	orr.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e6:	e007      	b.n	80082f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40010000 	.word	0x40010000
 800830c:	40000400 	.word	0x40000400
 8008310:	40000800 	.word	0x40000800
 8008314:	40000c00 	.word	0x40000c00
 8008318:	40010400 	.word	0x40010400
 800831c:	40014000 	.word	0x40014000
 8008320:	40001800 	.word	0x40001800

08008324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e041      	b.n	80083ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f839 	bl	80083c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3304      	adds	r3, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f000 fcf4 	bl	8008d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
	...

080083d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <HAL_TIM_PWM_Start+0x24>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	bf14      	ite	ne
 80083f4:	2301      	movne	r3, #1
 80083f6:	2300      	moveq	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	e022      	b.n	8008442 <HAL_TIM_PWM_Start+0x6a>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d109      	bne.n	8008416 <HAL_TIM_PWM_Start+0x3e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b01      	cmp	r3, #1
 800840c:	bf14      	ite	ne
 800840e:	2301      	movne	r3, #1
 8008410:	2300      	moveq	r3, #0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	e015      	b.n	8008442 <HAL_TIM_PWM_Start+0x6a>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d109      	bne.n	8008430 <HAL_TIM_PWM_Start+0x58>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	bf14      	ite	ne
 8008428:	2301      	movne	r3, #1
 800842a:	2300      	moveq	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	e008      	b.n	8008442 <HAL_TIM_PWM_Start+0x6a>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b01      	cmp	r3, #1
 800843a:	bf14      	ite	ne
 800843c:	2301      	movne	r3, #1
 800843e:	2300      	moveq	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e07c      	b.n	8008544 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <HAL_TIM_PWM_Start+0x82>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008458:	e013      	b.n	8008482 <HAL_TIM_PWM_Start+0xaa>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b04      	cmp	r3, #4
 800845e:	d104      	bne.n	800846a <HAL_TIM_PWM_Start+0x92>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008468:	e00b      	b.n	8008482 <HAL_TIM_PWM_Start+0xaa>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b08      	cmp	r3, #8
 800846e:	d104      	bne.n	800847a <HAL_TIM_PWM_Start+0xa2>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008478:	e003      	b.n	8008482 <HAL_TIM_PWM_Start+0xaa>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2202      	movs	r2, #2
 800847e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2201      	movs	r2, #1
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	4618      	mov	r0, r3
 800848c:	f001 f874 	bl	8009578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a2d      	ldr	r2, [pc, #180]	; (800854c <HAL_TIM_PWM_Start+0x174>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d004      	beq.n	80084a4 <HAL_TIM_PWM_Start+0xcc>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a2c      	ldr	r2, [pc, #176]	; (8008550 <HAL_TIM_PWM_Start+0x178>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d101      	bne.n	80084a8 <HAL_TIM_PWM_Start+0xd0>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e000      	b.n	80084aa <HAL_TIM_PWM_Start+0xd2>
 80084a8:	2300      	movs	r3, #0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d007      	beq.n	80084be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a22      	ldr	r2, [pc, #136]	; (800854c <HAL_TIM_PWM_Start+0x174>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d022      	beq.n	800850e <HAL_TIM_PWM_Start+0x136>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d0:	d01d      	beq.n	800850e <HAL_TIM_PWM_Start+0x136>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1f      	ldr	r2, [pc, #124]	; (8008554 <HAL_TIM_PWM_Start+0x17c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d018      	beq.n	800850e <HAL_TIM_PWM_Start+0x136>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1d      	ldr	r2, [pc, #116]	; (8008558 <HAL_TIM_PWM_Start+0x180>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <HAL_TIM_PWM_Start+0x136>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1c      	ldr	r2, [pc, #112]	; (800855c <HAL_TIM_PWM_Start+0x184>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00e      	beq.n	800850e <HAL_TIM_PWM_Start+0x136>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a16      	ldr	r2, [pc, #88]	; (8008550 <HAL_TIM_PWM_Start+0x178>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d009      	beq.n	800850e <HAL_TIM_PWM_Start+0x136>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a18      	ldr	r2, [pc, #96]	; (8008560 <HAL_TIM_PWM_Start+0x188>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d004      	beq.n	800850e <HAL_TIM_PWM_Start+0x136>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a16      	ldr	r2, [pc, #88]	; (8008564 <HAL_TIM_PWM_Start+0x18c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d111      	bne.n	8008532 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f003 0307 	and.w	r3, r3, #7
 8008518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b06      	cmp	r3, #6
 800851e:	d010      	beq.n	8008542 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008530:	e007      	b.n	8008542 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0201 	orr.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40010000 	.word	0x40010000
 8008550:	40010400 	.word	0x40010400
 8008554:	40000400 	.word	0x40000400
 8008558:	40000800 	.word	0x40000800
 800855c:	40000c00 	.word	0x40000c00
 8008560:	40014000 	.word	0x40014000
 8008564:	40001800 	.word	0x40001800

08008568 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e041      	b.n	80085fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f839 	bl	8008606 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f000 fbd2 	bl	8008d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b02      	cmp	r3, #2
 800862e:	d122      	bne.n	8008676 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b02      	cmp	r3, #2
 800863c:	d11b      	bne.n	8008676 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f06f 0202 	mvn.w	r2, #2
 8008646:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7fb fc3b 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8008662:	e005      	b.n	8008670 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fb55 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fb5c 	bl	8008d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b04      	cmp	r3, #4
 8008682:	d122      	bne.n	80086ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b04      	cmp	r3, #4
 8008690:	d11b      	bne.n	80086ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f06f 0204 	mvn.w	r2, #4
 800869a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fb fc11 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 80086b6:	e005      	b.n	80086c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fb2b 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fb32 	bl	8008d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	f003 0308 	and.w	r3, r3, #8
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d122      	bne.n	800871e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f003 0308 	and.w	r3, r3, #8
 80086e2:	2b08      	cmp	r3, #8
 80086e4:	d11b      	bne.n	800871e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f06f 0208 	mvn.w	r2, #8
 80086ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2204      	movs	r2, #4
 80086f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fb fbe7 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 800870a:	e005      	b.n	8008718 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb01 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fb08 	bl	8008d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b10      	cmp	r3, #16
 800872a:	d122      	bne.n	8008772 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0310 	and.w	r3, r3, #16
 8008736:	2b10      	cmp	r3, #16
 8008738:	d11b      	bne.n	8008772 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f06f 0210 	mvn.w	r2, #16
 8008742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2208      	movs	r2, #8
 8008748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7fb fbbd 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 800875e:	e005      	b.n	800876c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fad7 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fade 	bl	8008d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b01      	cmp	r3, #1
 800877e:	d10e      	bne.n	800879e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b01      	cmp	r3, #1
 800878c:	d107      	bne.n	800879e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f06f 0201 	mvn.w	r2, #1
 8008796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fab1 	bl	8008d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a8:	2b80      	cmp	r3, #128	; 0x80
 80087aa:	d10e      	bne.n	80087ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b6:	2b80      	cmp	r3, #128	; 0x80
 80087b8:	d107      	bne.n	80087ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 ffd5 	bl	8009774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d4:	2b40      	cmp	r3, #64	; 0x40
 80087d6:	d10e      	bne.n	80087f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e2:	2b40      	cmp	r3, #64	; 0x40
 80087e4:	d107      	bne.n	80087f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 faa3 	bl	8008d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b20      	cmp	r3, #32
 8008802:	d10e      	bne.n	8008822 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b20      	cmp	r3, #32
 8008810:	d107      	bne.n	8008822 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f06f 0220 	mvn.w	r2, #32
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 ff9f 	bl	8009760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008844:	2302      	movs	r3, #2
 8008846:	e088      	b.n	800895a <HAL_TIM_IC_ConfigChannel+0x130>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d11b      	bne.n	800888e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6819      	ldr	r1, [r3, #0]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f000 fcc3 	bl	80091f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	699a      	ldr	r2, [r3, #24]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 020c 	bic.w	r2, r2, #12
 8008878:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6999      	ldr	r1, [r3, #24]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	619a      	str	r2, [r3, #24]
 800888c:	e060      	b.n	8008950 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b04      	cmp	r3, #4
 8008892:	d11c      	bne.n	80088ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6819      	ldr	r1, [r3, #0]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f000 fd47 	bl	8009336 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80088b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6999      	ldr	r1, [r3, #24]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	021a      	lsls	r2, r3, #8
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	619a      	str	r2, [r3, #24]
 80088cc:	e040      	b.n	8008950 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d11b      	bne.n	800890c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6819      	ldr	r1, [r3, #0]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f000 fd94 	bl	8009410 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	69da      	ldr	r2, [r3, #28]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 020c 	bic.w	r2, r2, #12
 80088f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69d9      	ldr	r1, [r3, #28]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	61da      	str	r2, [r3, #28]
 800890a:	e021      	b.n	8008950 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b0c      	cmp	r3, #12
 8008910:	d11c      	bne.n	800894c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6819      	ldr	r1, [r3, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f000 fdb1 	bl	8009488 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69da      	ldr	r2, [r3, #28]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008934:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69d9      	ldr	r1, [r3, #28]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	021a      	lsls	r2, r3, #8
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	61da      	str	r2, [r3, #28]
 800894a:	e001      	b.n	8008950 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008958:	7dfb      	ldrb	r3, [r7, #23]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800897e:	2302      	movs	r3, #2
 8008980:	e0ae      	b.n	8008ae0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b0c      	cmp	r3, #12
 800898e:	f200 809f 	bhi.w	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	080089cd 	.word	0x080089cd
 800899c:	08008ad1 	.word	0x08008ad1
 80089a0:	08008ad1 	.word	0x08008ad1
 80089a4:	08008ad1 	.word	0x08008ad1
 80089a8:	08008a0d 	.word	0x08008a0d
 80089ac:	08008ad1 	.word	0x08008ad1
 80089b0:	08008ad1 	.word	0x08008ad1
 80089b4:	08008ad1 	.word	0x08008ad1
 80089b8:	08008a4f 	.word	0x08008a4f
 80089bc:	08008ad1 	.word	0x08008ad1
 80089c0:	08008ad1 	.word	0x08008ad1
 80089c4:	08008ad1 	.word	0x08008ad1
 80089c8:	08008a8f 	.word	0x08008a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fa5c 	bl	8008e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0208 	orr.w	r2, r2, #8
 80089e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0204 	bic.w	r2, r2, #4
 80089f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6999      	ldr	r1, [r3, #24]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	619a      	str	r2, [r3, #24]
      break;
 8008a0a:	e064      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68b9      	ldr	r1, [r7, #8]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 faac 	bl	8008f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6999      	ldr	r1, [r3, #24]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	021a      	lsls	r2, r3, #8
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	619a      	str	r2, [r3, #24]
      break;
 8008a4c:	e043      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fb01 	bl	800905c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0208 	orr.w	r2, r2, #8
 8008a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0204 	bic.w	r2, r2, #4
 8008a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69d9      	ldr	r1, [r3, #28]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	61da      	str	r2, [r3, #28]
      break;
 8008a8c:	e023      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fb55 	bl	8009144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69da      	ldr	r2, [r3, #28]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69da      	ldr	r2, [r3, #28]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69d9      	ldr	r1, [r3, #28]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	021a      	lsls	r2, r3, #8
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	61da      	str	r2, [r3, #28]
      break;
 8008ace:	e002      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_TIM_ConfigClockSource+0x1c>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e0b4      	b.n	8008c6e <HAL_TIM_ConfigClockSource+0x186>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b3c:	d03e      	beq.n	8008bbc <HAL_TIM_ConfigClockSource+0xd4>
 8008b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b42:	f200 8087 	bhi.w	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4a:	f000 8086 	beq.w	8008c5a <HAL_TIM_ConfigClockSource+0x172>
 8008b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b52:	d87f      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b54:	2b70      	cmp	r3, #112	; 0x70
 8008b56:	d01a      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0xa6>
 8008b58:	2b70      	cmp	r3, #112	; 0x70
 8008b5a:	d87b      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b5c:	2b60      	cmp	r3, #96	; 0x60
 8008b5e:	d050      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x11a>
 8008b60:	2b60      	cmp	r3, #96	; 0x60
 8008b62:	d877      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b64:	2b50      	cmp	r3, #80	; 0x50
 8008b66:	d03c      	beq.n	8008be2 <HAL_TIM_ConfigClockSource+0xfa>
 8008b68:	2b50      	cmp	r3, #80	; 0x50
 8008b6a:	d873      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d058      	beq.n	8008c22 <HAL_TIM_ConfigClockSource+0x13a>
 8008b70:	2b40      	cmp	r3, #64	; 0x40
 8008b72:	d86f      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b74:	2b30      	cmp	r3, #48	; 0x30
 8008b76:	d064      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x15a>
 8008b78:	2b30      	cmp	r3, #48	; 0x30
 8008b7a:	d86b      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d060      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x15a>
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d867      	bhi.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d05c      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x15a>
 8008b88:	2b10      	cmp	r3, #16
 8008b8a:	d05a      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x15a>
 8008b8c:	e062      	b.n	8008c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	6899      	ldr	r1, [r3, #8]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f000 fccb 	bl	8009538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	609a      	str	r2, [r3, #8]
      break;
 8008bba:	e04f      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	6899      	ldr	r1, [r3, #8]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f000 fcb4 	bl	8009538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bde:	609a      	str	r2, [r3, #8]
      break;
 8008be0:	e03c      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	6859      	ldr	r1, [r3, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f000 fb72 	bl	80092d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2150      	movs	r1, #80	; 0x50
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fc81 	bl	8009502 <TIM_ITRx_SetConfig>
      break;
 8008c00:	e02c      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6859      	ldr	r1, [r3, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f000 fbce 	bl	80093b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2160      	movs	r1, #96	; 0x60
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fc71 	bl	8009502 <TIM_ITRx_SetConfig>
      break;
 8008c20:	e01c      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6859      	ldr	r1, [r3, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f000 fb52 	bl	80092d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2140      	movs	r1, #64	; 0x40
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fc61 	bl	8009502 <TIM_ITRx_SetConfig>
      break;
 8008c40:	e00c      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f000 fc58 	bl	8009502 <TIM_ITRx_SetConfig>
      break;
 8008c52:	e003      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	73fb      	strb	r3, [r7, #15]
      break;
 8008c58:	e000      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b0c      	cmp	r3, #12
 8008c8a:	d831      	bhi.n	8008cf0 <HAL_TIM_ReadCapturedValue+0x78>
 8008c8c:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008cc9 	.word	0x08008cc9
 8008c98:	08008cf1 	.word	0x08008cf1
 8008c9c:	08008cf1 	.word	0x08008cf1
 8008ca0:	08008cf1 	.word	0x08008cf1
 8008ca4:	08008cd3 	.word	0x08008cd3
 8008ca8:	08008cf1 	.word	0x08008cf1
 8008cac:	08008cf1 	.word	0x08008cf1
 8008cb0:	08008cf1 	.word	0x08008cf1
 8008cb4:	08008cdd 	.word	0x08008cdd
 8008cb8:	08008cf1 	.word	0x08008cf1
 8008cbc:	08008cf1 	.word	0x08008cf1
 8008cc0:	08008cf1 	.word	0x08008cf1
 8008cc4:	08008ce7 	.word	0x08008ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cce:	60fb      	str	r3, [r7, #12]

      break;
 8008cd0:	e00f      	b.n	8008cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	60fb      	str	r3, [r7, #12]

      break;
 8008cda:	e00a      	b.n	8008cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce2:	60fb      	str	r3, [r7, #12]

      break;
 8008ce4:	e005      	b.n	8008cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cec:	60fb      	str	r3, [r7, #12]

      break;
 8008cee:	e000      	b.n	8008cf2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008cf0:	bf00      	nop
  }

  return tmpreg;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a40      	ldr	r2, [pc, #256]	; (8008e64 <TIM_Base_SetConfig+0x114>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d013      	beq.n	8008d90 <TIM_Base_SetConfig+0x40>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6e:	d00f      	beq.n	8008d90 <TIM_Base_SetConfig+0x40>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a3d      	ldr	r2, [pc, #244]	; (8008e68 <TIM_Base_SetConfig+0x118>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d00b      	beq.n	8008d90 <TIM_Base_SetConfig+0x40>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a3c      	ldr	r2, [pc, #240]	; (8008e6c <TIM_Base_SetConfig+0x11c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d007      	beq.n	8008d90 <TIM_Base_SetConfig+0x40>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a3b      	ldr	r2, [pc, #236]	; (8008e70 <TIM_Base_SetConfig+0x120>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d003      	beq.n	8008d90 <TIM_Base_SetConfig+0x40>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a3a      	ldr	r2, [pc, #232]	; (8008e74 <TIM_Base_SetConfig+0x124>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d108      	bne.n	8008da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a2f      	ldr	r2, [pc, #188]	; (8008e64 <TIM_Base_SetConfig+0x114>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d02b      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db0:	d027      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a2c      	ldr	r2, [pc, #176]	; (8008e68 <TIM_Base_SetConfig+0x118>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d023      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a2b      	ldr	r2, [pc, #172]	; (8008e6c <TIM_Base_SetConfig+0x11c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d01f      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a2a      	ldr	r2, [pc, #168]	; (8008e70 <TIM_Base_SetConfig+0x120>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d01b      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a29      	ldr	r2, [pc, #164]	; (8008e74 <TIM_Base_SetConfig+0x124>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d017      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a28      	ldr	r2, [pc, #160]	; (8008e78 <TIM_Base_SetConfig+0x128>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d013      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a27      	ldr	r2, [pc, #156]	; (8008e7c <TIM_Base_SetConfig+0x12c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00f      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a26      	ldr	r2, [pc, #152]	; (8008e80 <TIM_Base_SetConfig+0x130>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00b      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a25      	ldr	r2, [pc, #148]	; (8008e84 <TIM_Base_SetConfig+0x134>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d007      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a24      	ldr	r2, [pc, #144]	; (8008e88 <TIM_Base_SetConfig+0x138>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d003      	beq.n	8008e02 <TIM_Base_SetConfig+0xb2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a23      	ldr	r2, [pc, #140]	; (8008e8c <TIM_Base_SetConfig+0x13c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d108      	bne.n	8008e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a0a      	ldr	r2, [pc, #40]	; (8008e64 <TIM_Base_SetConfig+0x114>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d003      	beq.n	8008e48 <TIM_Base_SetConfig+0xf8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a0c      	ldr	r2, [pc, #48]	; (8008e74 <TIM_Base_SetConfig+0x124>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d103      	bne.n	8008e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	615a      	str	r2, [r3, #20]
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40000400 	.word	0x40000400
 8008e6c:	40000800 	.word	0x40000800
 8008e70:	40000c00 	.word	0x40000c00
 8008e74:	40010400 	.word	0x40010400
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	40014400 	.word	0x40014400
 8008e80:	40014800 	.word	0x40014800
 8008e84:	40001800 	.word	0x40001800
 8008e88:	40001c00 	.word	0x40001c00
 8008e8c:	40002000 	.word	0x40002000

08008e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f023 0302 	bic.w	r3, r3, #2
 8008ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a20      	ldr	r2, [pc, #128]	; (8008f68 <TIM_OC1_SetConfig+0xd8>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d003      	beq.n	8008ef4 <TIM_OC1_SetConfig+0x64>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <TIM_OC1_SetConfig+0xdc>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d10c      	bne.n	8008f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f023 0308 	bic.w	r3, r3, #8
 8008efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f023 0304 	bic.w	r3, r3, #4
 8008f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a15      	ldr	r2, [pc, #84]	; (8008f68 <TIM_OC1_SetConfig+0xd8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_OC1_SetConfig+0x8e>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a14      	ldr	r2, [pc, #80]	; (8008f6c <TIM_OC1_SetConfig+0xdc>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d111      	bne.n	8008f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	621a      	str	r2, [r3, #32]
}
 8008f5c:	bf00      	nop
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40010400 	.word	0x40010400

08008f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	f023 0210 	bic.w	r2, r3, #16
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f023 0320 	bic.w	r3, r3, #32
 8008fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a22      	ldr	r2, [pc, #136]	; (8009054 <TIM_OC2_SetConfig+0xe4>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_OC2_SetConfig+0x68>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a21      	ldr	r2, [pc, #132]	; (8009058 <TIM_OC2_SetConfig+0xe8>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d10d      	bne.n	8008ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a17      	ldr	r2, [pc, #92]	; (8009054 <TIM_OC2_SetConfig+0xe4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_OC2_SetConfig+0x94>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a16      	ldr	r2, [pc, #88]	; (8009058 <TIM_OC2_SetConfig+0xe8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d113      	bne.n	800902c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800900a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	4313      	orrs	r3, r2
 800902a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40010000 	.word	0x40010000
 8009058:	40010400 	.word	0x40010400

0800905c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800908a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0303 	bic.w	r3, r3, #3
 8009092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	021b      	lsls	r3, r3, #8
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a21      	ldr	r2, [pc, #132]	; (800913c <TIM_OC3_SetConfig+0xe0>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d003      	beq.n	80090c2 <TIM_OC3_SetConfig+0x66>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a20      	ldr	r2, [pc, #128]	; (8009140 <TIM_OC3_SetConfig+0xe4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d10d      	bne.n	80090de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	021b      	lsls	r3, r3, #8
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a16      	ldr	r2, [pc, #88]	; (800913c <TIM_OC3_SetConfig+0xe0>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d003      	beq.n	80090ee <TIM_OC3_SetConfig+0x92>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a15      	ldr	r2, [pc, #84]	; (8009140 <TIM_OC3_SetConfig+0xe4>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d113      	bne.n	8009116 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4313      	orrs	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	4313      	orrs	r3, r2
 8009114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	621a      	str	r2, [r3, #32]
}
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	40010000 	.word	0x40010000
 8009140:	40010400 	.word	0x40010400

08009144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800917a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	021b      	lsls	r3, r3, #8
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	4313      	orrs	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800918e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	031b      	lsls	r3, r3, #12
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a12      	ldr	r2, [pc, #72]	; (80091e8 <TIM_OC4_SetConfig+0xa4>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d003      	beq.n	80091ac <TIM_OC4_SetConfig+0x68>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a11      	ldr	r2, [pc, #68]	; (80091ec <TIM_OC4_SetConfig+0xa8>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d109      	bne.n	80091c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	019b      	lsls	r3, r3, #6
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	4313      	orrs	r3, r2
 80091be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	621a      	str	r2, [r3, #32]
}
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40010000 	.word	0x40010000
 80091ec:	40010400 	.word	0x40010400

080091f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	f023 0201 	bic.w	r2, r3, #1
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4a28      	ldr	r2, [pc, #160]	; (80092bc <TIM_TI1_SetConfig+0xcc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d01b      	beq.n	8009256 <TIM_TI1_SetConfig+0x66>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009224:	d017      	beq.n	8009256 <TIM_TI1_SetConfig+0x66>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4a25      	ldr	r2, [pc, #148]	; (80092c0 <TIM_TI1_SetConfig+0xd0>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d013      	beq.n	8009256 <TIM_TI1_SetConfig+0x66>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4a24      	ldr	r2, [pc, #144]	; (80092c4 <TIM_TI1_SetConfig+0xd4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00f      	beq.n	8009256 <TIM_TI1_SetConfig+0x66>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	4a23      	ldr	r2, [pc, #140]	; (80092c8 <TIM_TI1_SetConfig+0xd8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d00b      	beq.n	8009256 <TIM_TI1_SetConfig+0x66>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4a22      	ldr	r2, [pc, #136]	; (80092cc <TIM_TI1_SetConfig+0xdc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d007      	beq.n	8009256 <TIM_TI1_SetConfig+0x66>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <TIM_TI1_SetConfig+0xe0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d003      	beq.n	8009256 <TIM_TI1_SetConfig+0x66>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <TIM_TI1_SetConfig+0xe4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d101      	bne.n	800925a <TIM_TI1_SetConfig+0x6a>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <TIM_TI1_SetConfig+0x6c>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d008      	beq.n	8009272 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f023 0303 	bic.w	r3, r3, #3
 8009266:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e003      	b.n	800927a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f043 0301 	orr.w	r3, r3, #1
 8009278:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	011b      	lsls	r3, r3, #4
 8009286:	b2db      	uxtb	r3, r3
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f023 030a 	bic.w	r3, r3, #10
 8009294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f003 030a 	and.w	r3, r3, #10
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	621a      	str	r2, [r3, #32]
}
 80092ae:	bf00      	nop
 80092b0:	371c      	adds	r7, #28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	40010000 	.word	0x40010000
 80092c0:	40000400 	.word	0x40000400
 80092c4:	40000800 	.word	0x40000800
 80092c8:	40000c00 	.word	0x40000c00
 80092cc:	40010400 	.word	0x40010400
 80092d0:	40014000 	.word	0x40014000
 80092d4:	40001800 	.word	0x40001800

080092d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	f023 0201 	bic.w	r2, r3, #1
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	4313      	orrs	r3, r2
 800930c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f023 030a 	bic.w	r3, r3, #10
 8009314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4313      	orrs	r3, r2
 800931c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	621a      	str	r2, [r3, #32]
}
 800932a:	bf00      	nop
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009336:	b480      	push	{r7}
 8009338:	b087      	sub	sp, #28
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	f023 0210 	bic.w	r2, r3, #16
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009362:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4313      	orrs	r3, r2
 800936c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	031b      	lsls	r3, r3, #12
 800937a:	b29b      	uxth	r3, r3
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009388:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	4313      	orrs	r3, r2
 8009396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	621a      	str	r2, [r3, #32]
}
 80093a4:	bf00      	nop
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	f023 0210 	bic.w	r2, r3, #16
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	031b      	lsls	r3, r3, #12
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	621a      	str	r2, [r3, #32]
}
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f023 0303 	bic.w	r3, r3, #3
 800943c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4313      	orrs	r3, r2
 8009444:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800944c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	b2db      	uxtb	r3, r3
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	4313      	orrs	r3, r2
 8009458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009460:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	021b      	lsls	r3, r3, #8
 8009466:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	621a      	str	r2, [r3, #32]
}
 800947c:	bf00      	nop
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	4313      	orrs	r3, r2
 80094be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	031b      	lsls	r3, r3, #12
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80094da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	031b      	lsls	r3, r3, #12
 80094e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	621a      	str	r2, [r3, #32]
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	f043 0307 	orr.w	r3, r3, #7
 8009524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	609a      	str	r2, [r3, #8]
}
 800952c:	bf00      	nop
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	021a      	lsls	r2, r3, #8
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	431a      	orrs	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4313      	orrs	r3, r2
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	4313      	orrs	r3, r2
 8009564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	609a      	str	r2, [r3, #8]
}
 800956c:	bf00      	nop
 800956e:	371c      	adds	r7, #28
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f003 031f 	and.w	r3, r3, #31
 800958a:	2201      	movs	r2, #1
 800958c:	fa02 f303 	lsl.w	r3, r2, r3
 8009590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1a      	ldr	r2, [r3, #32]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	43db      	mvns	r3, r3
 800959a:	401a      	ands	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a1a      	ldr	r2, [r3, #32]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	fa01 f303 	lsl.w	r3, r1, r3
 80095b0:	431a      	orrs	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	621a      	str	r2, [r3, #32]
}
 80095b6:	bf00      	nop
 80095b8:	371c      	adds	r7, #28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
	...

080095c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095d8:	2302      	movs	r3, #2
 80095da:	e05a      	b.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a21      	ldr	r2, [pc, #132]	; (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d022      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009628:	d01d      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1d      	ldr	r2, [pc, #116]	; (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d018      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1b      	ldr	r2, [pc, #108]	; (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d013      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1a      	ldr	r2, [pc, #104]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00e      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a18      	ldr	r2, [pc, #96]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d009      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a17      	ldr	r2, [pc, #92]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d004      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d10c      	bne.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800966c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4313      	orrs	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40000400 	.word	0x40000400
 80096a8:	40000800 	.word	0x40000800
 80096ac:	40000c00 	.word	0x40000c00
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40001800 	.word	0x40001800

080096bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d101      	bne.n	80096d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096d4:	2302      	movs	r3, #2
 80096d6:	e03d      	b.n	8009754 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4313      	orrs	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	4313      	orrs	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	4313      	orrs	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e03f      	b.n	800981a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7f9 f96a 	bl	8002a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2224      	movs	r2, #36	; 0x24
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fd19 	bl	800a204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691a      	ldr	r2, [r3, #16]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	695a      	ldr	r2, [r3, #20]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	4613      	mov	r3, r2
 800982e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b20      	cmp	r3, #32
 800983a:	d130      	bne.n	800989e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <HAL_UART_Transmit_IT+0x26>
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e029      	b.n	80098a0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_UART_Transmit_IT+0x38>
 8009856:	2302      	movs	r3, #2
 8009858:	e022      	b.n	80098a0 <HAL_UART_Transmit_IT+0x7e>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	88fa      	ldrh	r2, [r7, #6]
 800986c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	88fa      	ldrh	r2, [r7, #6]
 8009872:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2221      	movs	r2, #33	; 0x21
 800987e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009898:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	e000      	b.n	80098a0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800989e:	2302      	movs	r3, #2
  }
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	4613      	mov	r3, r2
 80098b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	d11d      	bne.n	8009902 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <HAL_UART_Receive_IT+0x26>
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e016      	b.n	8009904 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_UART_Receive_IT+0x38>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e00f      	b.n	8009904 <HAL_UART_Receive_IT+0x58>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80098f2:	88fb      	ldrh	r3, [r7, #6]
 80098f4:	461a      	mov	r2, r3
 80098f6:	68b9      	ldr	r1, [r7, #8]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 faab 	bl	8009e54 <UART_Start_Receive_IT>
 80098fe:	4603      	mov	r3, r0
 8009900:	e000      	b.n	8009904 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009902:	2302      	movs	r3, #2
  }
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b0ba      	sub	sp, #232	; 0xe8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009932:	2300      	movs	r3, #0
 8009934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009938:	2300      	movs	r3, #0
 800993a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800993e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800994a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10f      	bne.n	8009972 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <HAL_UART_IRQHandler+0x66>
 800995e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb8f 	bl	800a08e <UART_Receive_IT>
      return;
 8009970:	e256      	b.n	8009e20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80de 	beq.w	8009b38 <HAL_UART_IRQHandler+0x22c>
 800997c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800998c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 80d1 	beq.w	8009b38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00b      	beq.n	80099ba <HAL_UART_IRQHandler+0xae>
 80099a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d005      	beq.n	80099ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	f043 0201 	orr.w	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00b      	beq.n	80099de <HAL_UART_IRQHandler+0xd2>
 80099c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f043 0202 	orr.w	r2, r3, #2
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00b      	beq.n	8009a02 <HAL_UART_IRQHandler+0xf6>
 80099ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d005      	beq.n	8009a02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fa:	f043 0204 	orr.w	r2, r3, #4
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a06:	f003 0308 	and.w	r3, r3, #8
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d011      	beq.n	8009a32 <HAL_UART_IRQHandler+0x126>
 8009a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	f043 0208 	orr.w	r2, r3, #8
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 81ed 	beq.w	8009e16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d008      	beq.n	8009a5a <HAL_UART_IRQHandler+0x14e>
 8009a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb1a 	bl	800a08e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	bf0c      	ite	eq
 8009a68:	2301      	moveq	r3, #1
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	f003 0308 	and.w	r3, r3, #8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <HAL_UART_IRQHandler+0x17a>
 8009a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d04f      	beq.n	8009b26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa22 	bl	8009ed0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a96:	2b40      	cmp	r3, #64	; 0x40
 8009a98:	d141      	bne.n	8009b1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3314      	adds	r3, #20
 8009aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1d9      	bne.n	8009a9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d013      	beq.n	8009b16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	4a7d      	ldr	r2, [pc, #500]	; (8009ce8 <HAL_UART_IRQHandler+0x3dc>)
 8009af4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fa fdb9 	bl	8004672 <HAL_DMA_Abort_IT>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d016      	beq.n	8009b34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b14:	e00e      	b.n	8009b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f986 	bl	8009e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1c:	e00a      	b.n	8009b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f982 	bl	8009e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b24:	e006      	b.n	8009b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f97e 	bl	8009e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009b32:	e170      	b.n	8009e16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b34:	bf00      	nop
    return;
 8009b36:	e16e      	b.n	8009e16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	f040 814a 	bne.w	8009dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b46:	f003 0310 	and.w	r3, r3, #16
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8143 	beq.w	8009dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b54:	f003 0310 	and.w	r3, r3, #16
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 813c 	beq.w	8009dd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60bb      	str	r3, [r7, #8]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60bb      	str	r3, [r7, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	60bb      	str	r3, [r7, #8]
 8009b72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7e:	2b40      	cmp	r3, #64	; 0x40
 8009b80:	f040 80b4 	bne.w	8009cec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8140 	beq.w	8009e1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	f080 8139 	bcs.w	8009e1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bba:	f000 8088 	beq.w	8009cce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	330c      	adds	r3, #12
 8009be6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1d9      	bne.n	8009bbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3314      	adds	r3, #20
 8009c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c1c:	f023 0301 	bic.w	r3, r3, #1
 8009c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3314      	adds	r3, #20
 8009c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e1      	bne.n	8009c0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3314      	adds	r3, #20
 8009c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e3      	bne.n	8009c46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	330c      	adds	r3, #12
 8009c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c9e:	f023 0310 	bic.w	r3, r3, #16
 8009ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e3      	bne.n	8009c8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fa fc62 	bl	8004592 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f8ac 	bl	8009e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ce4:	e099      	b.n	8009e1a <HAL_UART_IRQHandler+0x50e>
 8009ce6:	bf00      	nop
 8009ce8:	08009f97 	.word	0x08009f97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 808b 	beq.w	8009e1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 8086 	beq.w	8009e1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	330c      	adds	r3, #12
 8009d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	330c      	adds	r3, #12
 8009d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d36:	647a      	str	r2, [r7, #68]	; 0x44
 8009d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d3e:	e841 2300 	strex	r3, r2, [r1]
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1e3      	bne.n	8009d12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3314      	adds	r3, #20
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	623b      	str	r3, [r7, #32]
   return(result);
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3314      	adds	r3, #20
 8009d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8009d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e3      	bne.n	8009d4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2220      	movs	r2, #32
 8009d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	330c      	adds	r3, #12
 8009d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0310 	bic.w	r3, r3, #16
 8009da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	330c      	adds	r3, #12
 8009db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009db4:	61fa      	str	r2, [r7, #28]
 8009db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e3      	bne.n	8009d90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f834 	bl	8009e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dd4:	e023      	b.n	8009e1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d009      	beq.n	8009df6 <HAL_UART_IRQHandler+0x4ea>
 8009de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f8e5 	bl	8009fbe <UART_Transmit_IT>
    return;
 8009df4:	e014      	b.n	8009e20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00e      	beq.n	8009e20 <HAL_UART_IRQHandler+0x514>
 8009e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d008      	beq.n	8009e20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f925 	bl	800a05e <UART_EndTransmit_IT>
    return;
 8009e14:	e004      	b.n	8009e20 <HAL_UART_IRQHandler+0x514>
    return;
 8009e16:	bf00      	nop
 8009e18:	e002      	b.n	8009e20 <HAL_UART_IRQHandler+0x514>
      return;
 8009e1a:	bf00      	nop
 8009e1c:	e000      	b.n	8009e20 <HAL_UART_IRQHandler+0x514>
      return;
 8009e1e:	bf00      	nop
  }
}
 8009e20:	37e8      	adds	r7, #232	; 0xe8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop

08009e28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	88fa      	ldrh	r2, [r7, #6]
 8009e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	88fa      	ldrh	r2, [r7, #6]
 8009e72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2222      	movs	r2, #34	; 0x22
 8009e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d007      	beq.n	8009ea2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68da      	ldr	r2, [r3, #12]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ea0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	695a      	ldr	r2, [r3, #20]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f042 0201 	orr.w	r2, r2, #1
 8009eb0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68da      	ldr	r2, [r3, #12]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f042 0220 	orr.w	r2, r2, #32
 8009ec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b095      	sub	sp, #84	; 0x54
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	330c      	adds	r3, #12
 8009ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	330c      	adds	r3, #12
 8009ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ef8:	643a      	str	r2, [r7, #64]	; 0x40
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f00:	e841 2300 	strex	r3, r2, [r1]
 8009f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e5      	bne.n	8009ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3314      	adds	r3, #20
 8009f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3314      	adds	r3, #20
 8009f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e5      	bne.n	8009f0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d119      	bne.n	8009f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	330c      	adds	r3, #12
 8009f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	e853 3f00 	ldrex	r3, [r3]
 8009f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f023 0310 	bic.w	r3, r3, #16
 8009f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	330c      	adds	r3, #12
 8009f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f68:	61ba      	str	r2, [r7, #24]
 8009f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6c:	6979      	ldr	r1, [r7, #20]
 8009f6e:	69ba      	ldr	r2, [r7, #24]
 8009f70:	e841 2300 	strex	r3, r2, [r1]
 8009f74:	613b      	str	r3, [r7, #16]
   return(result);
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1e5      	bne.n	8009f48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f8a:	bf00      	nop
 8009f8c:	3754      	adds	r7, #84	; 0x54
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff ff39 	bl	8009e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b085      	sub	sp, #20
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b21      	cmp	r3, #33	; 0x21
 8009fd0:	d13e      	bne.n	800a050 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fda:	d114      	bne.n	800a006 <UART_Transmit_IT+0x48>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d110      	bne.n	800a006 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ff8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	1c9a      	adds	r2, r3, #2
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	621a      	str	r2, [r3, #32]
 800a004:	e008      	b.n	800a018 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	6211      	str	r1, [r2, #32]
 800a010:	781a      	ldrb	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	3b01      	subs	r3, #1
 800a020:	b29b      	uxth	r3, r3
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	4619      	mov	r1, r3
 800a026:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10f      	bne.n	800a04c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a03a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a04a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e000      	b.n	800a052 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a050:	2302      	movs	r3, #2
  }
}
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a074:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7f9 fdf0 	bl	8003c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b08c      	sub	sp, #48	; 0x30
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b22      	cmp	r3, #34	; 0x22
 800a0a0:	f040 80ab 	bne.w	800a1fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ac:	d117      	bne.n	800a0de <UART_Receive_IT+0x50>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d113      	bne.n	800a0de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d6:	1c9a      	adds	r2, r3, #2
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	629a      	str	r2, [r3, #40]	; 0x28
 800a0dc:	e026      	b.n	800a12c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f0:	d007      	beq.n	800a102 <UART_Receive_IT+0x74>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10a      	bne.n	800a110 <UART_Receive_IT+0x82>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	701a      	strb	r2, [r3, #0]
 800a10e:	e008      	b.n	800a122 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	b2db      	uxtb	r3, r3
 800a118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a120:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a130:	b29b      	uxth	r3, r3
 800a132:	3b01      	subs	r3, #1
 800a134:	b29b      	uxth	r3, r3
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	4619      	mov	r1, r3
 800a13a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d15a      	bne.n	800a1f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 0220 	bic.w	r2, r2, #32
 800a14e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68da      	ldr	r2, [r3, #12]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a15e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	695a      	ldr	r2, [r3, #20]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f022 0201 	bic.w	r2, r2, #1
 800a16e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d135      	bne.n	800a1ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	330c      	adds	r3, #12
 800a18c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	613b      	str	r3, [r7, #16]
   return(result);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f023 0310 	bic.w	r3, r3, #16
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	330c      	adds	r3, #12
 800a1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a6:	623a      	str	r2, [r7, #32]
 800a1a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	69f9      	ldr	r1, [r7, #28]
 800a1ac:	6a3a      	ldr	r2, [r7, #32]
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e5      	bne.n	800a186 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b10      	cmp	r3, #16
 800a1c6:	d10a      	bne.n	800a1de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff fe29 	bl	8009e3c <HAL_UARTEx_RxEventCallback>
 800a1ea:	e002      	b.n	800a1f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7f9 fd43 	bl	8003c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e002      	b.n	800a1fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e000      	b.n	800a1fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a1fa:	2302      	movs	r3, #2
  }
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3730      	adds	r7, #48	; 0x30
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a208:	b0c0      	sub	sp, #256	; 0x100
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a220:	68d9      	ldr	r1, [r3, #12]
 800a222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	ea40 0301 	orr.w	r3, r0, r1
 800a22c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	431a      	orrs	r2, r3
 800a23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	431a      	orrs	r2, r3
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a25c:	f021 010c 	bic.w	r1, r1, #12
 800a260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a26a:	430b      	orrs	r3, r1
 800a26c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27e:	6999      	ldr	r1, [r3, #24]
 800a280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	ea40 0301 	orr.w	r3, r0, r1
 800a28a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4b8f      	ldr	r3, [pc, #572]	; (800a4d0 <UART_SetConfig+0x2cc>)
 800a294:	429a      	cmp	r2, r3
 800a296:	d005      	beq.n	800a2a4 <UART_SetConfig+0xa0>
 800a298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b8d      	ldr	r3, [pc, #564]	; (800a4d4 <UART_SetConfig+0x2d0>)
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d104      	bne.n	800a2ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2a4:	f7fd fee2 	bl	800806c <HAL_RCC_GetPCLK2Freq>
 800a2a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2ac:	e003      	b.n	800a2b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2ae:	f7fd fec9 	bl	8008044 <HAL_RCC_GetPCLK1Freq>
 800a2b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2c0:	f040 810c 	bne.w	800a4dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a2d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	462b      	mov	r3, r5
 800a2da:	1891      	adds	r1, r2, r2
 800a2dc:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2de:	415b      	adcs	r3, r3
 800a2e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	eb12 0801 	adds.w	r8, r2, r1
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	eb43 0901 	adc.w	r9, r3, r1
 800a2f2:	f04f 0200 	mov.w	r2, #0
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a306:	4690      	mov	r8, r2
 800a308:	4699      	mov	r9, r3
 800a30a:	4623      	mov	r3, r4
 800a30c:	eb18 0303 	adds.w	r3, r8, r3
 800a310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a314:	462b      	mov	r3, r5
 800a316:	eb49 0303 	adc.w	r3, r9, r3
 800a31a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a31e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a32a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a32e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a332:	460b      	mov	r3, r1
 800a334:	18db      	adds	r3, r3, r3
 800a336:	653b      	str	r3, [r7, #80]	; 0x50
 800a338:	4613      	mov	r3, r2
 800a33a:	eb42 0303 	adc.w	r3, r2, r3
 800a33e:	657b      	str	r3, [r7, #84]	; 0x54
 800a340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a348:	f7f6 fc7e 	bl	8000c48 <__aeabi_uldivmod>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4b61      	ldr	r3, [pc, #388]	; (800a4d8 <UART_SetConfig+0x2d4>)
 800a352:	fba3 2302 	umull	r2, r3, r3, r2
 800a356:	095b      	lsrs	r3, r3, #5
 800a358:	011c      	lsls	r4, r3, #4
 800a35a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a364:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a36c:	4642      	mov	r2, r8
 800a36e:	464b      	mov	r3, r9
 800a370:	1891      	adds	r1, r2, r2
 800a372:	64b9      	str	r1, [r7, #72]	; 0x48
 800a374:	415b      	adcs	r3, r3
 800a376:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a37c:	4641      	mov	r1, r8
 800a37e:	eb12 0a01 	adds.w	sl, r2, r1
 800a382:	4649      	mov	r1, r9
 800a384:	eb43 0b01 	adc.w	fp, r3, r1
 800a388:	f04f 0200 	mov.w	r2, #0
 800a38c:	f04f 0300 	mov.w	r3, #0
 800a390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a39c:	4692      	mov	sl, r2
 800a39e:	469b      	mov	fp, r3
 800a3a0:	4643      	mov	r3, r8
 800a3a2:	eb1a 0303 	adds.w	r3, sl, r3
 800a3a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	eb4b 0303 	adc.w	r3, fp, r3
 800a3b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	18db      	adds	r3, r3, r3
 800a3cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	eb42 0303 	adc.w	r3, r2, r3
 800a3d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a3d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a3de:	f7f6 fc33 	bl	8000c48 <__aeabi_uldivmod>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	4b3b      	ldr	r3, [pc, #236]	; (800a4d8 <UART_SetConfig+0x2d4>)
 800a3ea:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ee:	095b      	lsrs	r3, r3, #5
 800a3f0:	2264      	movs	r2, #100	; 0x64
 800a3f2:	fb02 f303 	mul.w	r3, r2, r3
 800a3f6:	1acb      	subs	r3, r1, r3
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3fe:	4b36      	ldr	r3, [pc, #216]	; (800a4d8 <UART_SetConfig+0x2d4>)
 800a400:	fba3 2302 	umull	r2, r3, r3, r2
 800a404:	095b      	lsrs	r3, r3, #5
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a40c:	441c      	add	r4, r3
 800a40e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a412:	2200      	movs	r2, #0
 800a414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a418:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a41c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a420:	4642      	mov	r2, r8
 800a422:	464b      	mov	r3, r9
 800a424:	1891      	adds	r1, r2, r2
 800a426:	63b9      	str	r1, [r7, #56]	; 0x38
 800a428:	415b      	adcs	r3, r3
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a42c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a430:	4641      	mov	r1, r8
 800a432:	1851      	adds	r1, r2, r1
 800a434:	6339      	str	r1, [r7, #48]	; 0x30
 800a436:	4649      	mov	r1, r9
 800a438:	414b      	adcs	r3, r1
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34
 800a43c:	f04f 0200 	mov.w	r2, #0
 800a440:	f04f 0300 	mov.w	r3, #0
 800a444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a448:	4659      	mov	r1, fp
 800a44a:	00cb      	lsls	r3, r1, #3
 800a44c:	4651      	mov	r1, sl
 800a44e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a452:	4651      	mov	r1, sl
 800a454:	00ca      	lsls	r2, r1, #3
 800a456:	4610      	mov	r0, r2
 800a458:	4619      	mov	r1, r3
 800a45a:	4603      	mov	r3, r0
 800a45c:	4642      	mov	r2, r8
 800a45e:	189b      	adds	r3, r3, r2
 800a460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a464:	464b      	mov	r3, r9
 800a466:	460a      	mov	r2, r1
 800a468:	eb42 0303 	adc.w	r3, r2, r3
 800a46c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a47c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a484:	460b      	mov	r3, r1
 800a486:	18db      	adds	r3, r3, r3
 800a488:	62bb      	str	r3, [r7, #40]	; 0x28
 800a48a:	4613      	mov	r3, r2
 800a48c:	eb42 0303 	adc.w	r3, r2, r3
 800a490:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a49a:	f7f6 fbd5 	bl	8000c48 <__aeabi_uldivmod>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <UART_SetConfig+0x2d4>)
 800a4a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4a8:	095b      	lsrs	r3, r3, #5
 800a4aa:	2164      	movs	r1, #100	; 0x64
 800a4ac:	fb01 f303 	mul.w	r3, r1, r3
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	00db      	lsls	r3, r3, #3
 800a4b4:	3332      	adds	r3, #50	; 0x32
 800a4b6:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <UART_SetConfig+0x2d4>)
 800a4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4bc:	095b      	lsrs	r3, r3, #5
 800a4be:	f003 0207 	and.w	r2, r3, #7
 800a4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4422      	add	r2, r4
 800a4ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4cc:	e105      	b.n	800a6da <UART_SetConfig+0x4d6>
 800a4ce:	bf00      	nop
 800a4d0:	40011000 	.word	0x40011000
 800a4d4:	40011400 	.word	0x40011400
 800a4d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	1891      	adds	r1, r2, r2
 800a4f4:	6239      	str	r1, [r7, #32]
 800a4f6:	415b      	adcs	r3, r3
 800a4f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4fe:	4641      	mov	r1, r8
 800a500:	1854      	adds	r4, r2, r1
 800a502:	4649      	mov	r1, r9
 800a504:	eb43 0501 	adc.w	r5, r3, r1
 800a508:	f04f 0200 	mov.w	r2, #0
 800a50c:	f04f 0300 	mov.w	r3, #0
 800a510:	00eb      	lsls	r3, r5, #3
 800a512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a516:	00e2      	lsls	r2, r4, #3
 800a518:	4614      	mov	r4, r2
 800a51a:	461d      	mov	r5, r3
 800a51c:	4643      	mov	r3, r8
 800a51e:	18e3      	adds	r3, r4, r3
 800a520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a524:	464b      	mov	r3, r9
 800a526:	eb45 0303 	adc.w	r3, r5, r3
 800a52a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a53a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a53e:	f04f 0200 	mov.w	r2, #0
 800a542:	f04f 0300 	mov.w	r3, #0
 800a546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a54a:	4629      	mov	r1, r5
 800a54c:	008b      	lsls	r3, r1, #2
 800a54e:	4621      	mov	r1, r4
 800a550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a554:	4621      	mov	r1, r4
 800a556:	008a      	lsls	r2, r1, #2
 800a558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a55c:	f7f6 fb74 	bl	8000c48 <__aeabi_uldivmod>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4b60      	ldr	r3, [pc, #384]	; (800a6e8 <UART_SetConfig+0x4e4>)
 800a566:	fba3 2302 	umull	r2, r3, r3, r2
 800a56a:	095b      	lsrs	r3, r3, #5
 800a56c:	011c      	lsls	r4, r3, #4
 800a56e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a572:	2200      	movs	r2, #0
 800a574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a578:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a57c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a580:	4642      	mov	r2, r8
 800a582:	464b      	mov	r3, r9
 800a584:	1891      	adds	r1, r2, r2
 800a586:	61b9      	str	r1, [r7, #24]
 800a588:	415b      	adcs	r3, r3
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a590:	4641      	mov	r1, r8
 800a592:	1851      	adds	r1, r2, r1
 800a594:	6139      	str	r1, [r7, #16]
 800a596:	4649      	mov	r1, r9
 800a598:	414b      	adcs	r3, r1
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5a8:	4659      	mov	r1, fp
 800a5aa:	00cb      	lsls	r3, r1, #3
 800a5ac:	4651      	mov	r1, sl
 800a5ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5b2:	4651      	mov	r1, sl
 800a5b4:	00ca      	lsls	r2, r1, #3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4642      	mov	r2, r8
 800a5be:	189b      	adds	r3, r3, r2
 800a5c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5c4:	464b      	mov	r3, r9
 800a5c6:	460a      	mov	r2, r1
 800a5c8:	eb42 0303 	adc.w	r3, r2, r3
 800a5cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5dc:	f04f 0200 	mov.w	r2, #0
 800a5e0:	f04f 0300 	mov.w	r3, #0
 800a5e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	008b      	lsls	r3, r1, #2
 800a5ec:	4641      	mov	r1, r8
 800a5ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5f2:	4641      	mov	r1, r8
 800a5f4:	008a      	lsls	r2, r1, #2
 800a5f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5fa:	f7f6 fb25 	bl	8000c48 <__aeabi_uldivmod>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4b39      	ldr	r3, [pc, #228]	; (800a6e8 <UART_SetConfig+0x4e4>)
 800a604:	fba3 1302 	umull	r1, r3, r3, r2
 800a608:	095b      	lsrs	r3, r3, #5
 800a60a:	2164      	movs	r1, #100	; 0x64
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	3332      	adds	r3, #50	; 0x32
 800a616:	4a34      	ldr	r2, [pc, #208]	; (800a6e8 <UART_SetConfig+0x4e4>)
 800a618:	fba2 2303 	umull	r2, r3, r2, r3
 800a61c:	095b      	lsrs	r3, r3, #5
 800a61e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a622:	441c      	add	r4, r3
 800a624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a628:	2200      	movs	r2, #0
 800a62a:	673b      	str	r3, [r7, #112]	; 0x70
 800a62c:	677a      	str	r2, [r7, #116]	; 0x74
 800a62e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a632:	4642      	mov	r2, r8
 800a634:	464b      	mov	r3, r9
 800a636:	1891      	adds	r1, r2, r2
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	415b      	adcs	r3, r3
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a642:	4641      	mov	r1, r8
 800a644:	1851      	adds	r1, r2, r1
 800a646:	6039      	str	r1, [r7, #0]
 800a648:	4649      	mov	r1, r9
 800a64a:	414b      	adcs	r3, r1
 800a64c:	607b      	str	r3, [r7, #4]
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a65a:	4659      	mov	r1, fp
 800a65c:	00cb      	lsls	r3, r1, #3
 800a65e:	4651      	mov	r1, sl
 800a660:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a664:	4651      	mov	r1, sl
 800a666:	00ca      	lsls	r2, r1, #3
 800a668:	4610      	mov	r0, r2
 800a66a:	4619      	mov	r1, r3
 800a66c:	4603      	mov	r3, r0
 800a66e:	4642      	mov	r2, r8
 800a670:	189b      	adds	r3, r3, r2
 800a672:	66bb      	str	r3, [r7, #104]	; 0x68
 800a674:	464b      	mov	r3, r9
 800a676:	460a      	mov	r2, r1
 800a678:	eb42 0303 	adc.w	r3, r2, r3
 800a67c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a67e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	663b      	str	r3, [r7, #96]	; 0x60
 800a688:	667a      	str	r2, [r7, #100]	; 0x64
 800a68a:	f04f 0200 	mov.w	r2, #0
 800a68e:	f04f 0300 	mov.w	r3, #0
 800a692:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a696:	4649      	mov	r1, r9
 800a698:	008b      	lsls	r3, r1, #2
 800a69a:	4641      	mov	r1, r8
 800a69c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6a0:	4641      	mov	r1, r8
 800a6a2:	008a      	lsls	r2, r1, #2
 800a6a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6a8:	f7f6 face 	bl	8000c48 <__aeabi_uldivmod>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <UART_SetConfig+0x4e4>)
 800a6b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b6:	095b      	lsrs	r3, r3, #5
 800a6b8:	2164      	movs	r1, #100	; 0x64
 800a6ba:	fb01 f303 	mul.w	r3, r1, r3
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	3332      	adds	r3, #50	; 0x32
 800a6c4:	4a08      	ldr	r2, [pc, #32]	; (800a6e8 <UART_SetConfig+0x4e4>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	f003 020f 	and.w	r2, r3, #15
 800a6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4422      	add	r2, r4
 800a6d8:	609a      	str	r2, [r3, #8]
}
 800a6da:	bf00      	nop
 800a6dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6e6:	bf00      	nop
 800a6e8:	51eb851f 	.word	0x51eb851f

0800a6ec <__errno>:
 800a6ec:	4b01      	ldr	r3, [pc, #4]	; (800a6f4 <__errno+0x8>)
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	20000034 	.word	0x20000034

0800a6f8 <__libc_init_array>:
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	4d0d      	ldr	r5, [pc, #52]	; (800a730 <__libc_init_array+0x38>)
 800a6fc:	4c0d      	ldr	r4, [pc, #52]	; (800a734 <__libc_init_array+0x3c>)
 800a6fe:	1b64      	subs	r4, r4, r5
 800a700:	10a4      	asrs	r4, r4, #2
 800a702:	2600      	movs	r6, #0
 800a704:	42a6      	cmp	r6, r4
 800a706:	d109      	bne.n	800a71c <__libc_init_array+0x24>
 800a708:	4d0b      	ldr	r5, [pc, #44]	; (800a738 <__libc_init_array+0x40>)
 800a70a:	4c0c      	ldr	r4, [pc, #48]	; (800a73c <__libc_init_array+0x44>)
 800a70c:	f002 fde6 	bl	800d2dc <_init>
 800a710:	1b64      	subs	r4, r4, r5
 800a712:	10a4      	asrs	r4, r4, #2
 800a714:	2600      	movs	r6, #0
 800a716:	42a6      	cmp	r6, r4
 800a718:	d105      	bne.n	800a726 <__libc_init_array+0x2e>
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
 800a71c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a720:	4798      	blx	r3
 800a722:	3601      	adds	r6, #1
 800a724:	e7ee      	b.n	800a704 <__libc_init_array+0xc>
 800a726:	f855 3b04 	ldr.w	r3, [r5], #4
 800a72a:	4798      	blx	r3
 800a72c:	3601      	adds	r6, #1
 800a72e:	e7f2      	b.n	800a716 <__libc_init_array+0x1e>
 800a730:	0800d588 	.word	0x0800d588
 800a734:	0800d588 	.word	0x0800d588
 800a738:	0800d588 	.word	0x0800d588
 800a73c:	0800d58c 	.word	0x0800d58c

0800a740 <memset>:
 800a740:	4402      	add	r2, r0
 800a742:	4603      	mov	r3, r0
 800a744:	4293      	cmp	r3, r2
 800a746:	d100      	bne.n	800a74a <memset+0xa>
 800a748:	4770      	bx	lr
 800a74a:	f803 1b01 	strb.w	r1, [r3], #1
 800a74e:	e7f9      	b.n	800a744 <memset+0x4>

0800a750 <siprintf>:
 800a750:	b40e      	push	{r1, r2, r3}
 800a752:	b500      	push	{lr}
 800a754:	b09c      	sub	sp, #112	; 0x70
 800a756:	ab1d      	add	r3, sp, #116	; 0x74
 800a758:	9002      	str	r0, [sp, #8]
 800a75a:	9006      	str	r0, [sp, #24]
 800a75c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a760:	4809      	ldr	r0, [pc, #36]	; (800a788 <siprintf+0x38>)
 800a762:	9107      	str	r1, [sp, #28]
 800a764:	9104      	str	r1, [sp, #16]
 800a766:	4909      	ldr	r1, [pc, #36]	; (800a78c <siprintf+0x3c>)
 800a768:	f853 2b04 	ldr.w	r2, [r3], #4
 800a76c:	9105      	str	r1, [sp, #20]
 800a76e:	6800      	ldr	r0, [r0, #0]
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	a902      	add	r1, sp, #8
 800a774:	f000 f868 	bl	800a848 <_svfiprintf_r>
 800a778:	9b02      	ldr	r3, [sp, #8]
 800a77a:	2200      	movs	r2, #0
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	b01c      	add	sp, #112	; 0x70
 800a780:	f85d eb04 	ldr.w	lr, [sp], #4
 800a784:	b003      	add	sp, #12
 800a786:	4770      	bx	lr
 800a788:	20000034 	.word	0x20000034
 800a78c:	ffff0208 	.word	0xffff0208

0800a790 <__ssputs_r>:
 800a790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a794:	688e      	ldr	r6, [r1, #8]
 800a796:	429e      	cmp	r6, r3
 800a798:	4682      	mov	sl, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	4690      	mov	r8, r2
 800a79e:	461f      	mov	r7, r3
 800a7a0:	d838      	bhi.n	800a814 <__ssputs_r+0x84>
 800a7a2:	898a      	ldrh	r2, [r1, #12]
 800a7a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7a8:	d032      	beq.n	800a810 <__ssputs_r+0x80>
 800a7aa:	6825      	ldr	r5, [r4, #0]
 800a7ac:	6909      	ldr	r1, [r1, #16]
 800a7ae:	eba5 0901 	sub.w	r9, r5, r1
 800a7b2:	6965      	ldr	r5, [r4, #20]
 800a7b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7bc:	3301      	adds	r3, #1
 800a7be:	444b      	add	r3, r9
 800a7c0:	106d      	asrs	r5, r5, #1
 800a7c2:	429d      	cmp	r5, r3
 800a7c4:	bf38      	it	cc
 800a7c6:	461d      	movcc	r5, r3
 800a7c8:	0553      	lsls	r3, r2, #21
 800a7ca:	d531      	bpl.n	800a830 <__ssputs_r+0xa0>
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	f000 fb63 	bl	800ae98 <_malloc_r>
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	b950      	cbnz	r0, 800a7ec <__ssputs_r+0x5c>
 800a7d6:	230c      	movs	r3, #12
 800a7d8:	f8ca 3000 	str.w	r3, [sl]
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ec:	6921      	ldr	r1, [r4, #16]
 800a7ee:	464a      	mov	r2, r9
 800a7f0:	f000 fabe 	bl	800ad70 <memcpy>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	6126      	str	r6, [r4, #16]
 800a802:	6165      	str	r5, [r4, #20]
 800a804:	444e      	add	r6, r9
 800a806:	eba5 0509 	sub.w	r5, r5, r9
 800a80a:	6026      	str	r6, [r4, #0]
 800a80c:	60a5      	str	r5, [r4, #8]
 800a80e:	463e      	mov	r6, r7
 800a810:	42be      	cmp	r6, r7
 800a812:	d900      	bls.n	800a816 <__ssputs_r+0x86>
 800a814:	463e      	mov	r6, r7
 800a816:	6820      	ldr	r0, [r4, #0]
 800a818:	4632      	mov	r2, r6
 800a81a:	4641      	mov	r1, r8
 800a81c:	f000 fab6 	bl	800ad8c <memmove>
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	1b9b      	subs	r3, r3, r6
 800a824:	60a3      	str	r3, [r4, #8]
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	4433      	add	r3, r6
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	2000      	movs	r0, #0
 800a82e:	e7db      	b.n	800a7e8 <__ssputs_r+0x58>
 800a830:	462a      	mov	r2, r5
 800a832:	f000 fba5 	bl	800af80 <_realloc_r>
 800a836:	4606      	mov	r6, r0
 800a838:	2800      	cmp	r0, #0
 800a83a:	d1e1      	bne.n	800a800 <__ssputs_r+0x70>
 800a83c:	6921      	ldr	r1, [r4, #16]
 800a83e:	4650      	mov	r0, sl
 800a840:	f000 fabe 	bl	800adc0 <_free_r>
 800a844:	e7c7      	b.n	800a7d6 <__ssputs_r+0x46>
	...

0800a848 <_svfiprintf_r>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	4698      	mov	r8, r3
 800a84e:	898b      	ldrh	r3, [r1, #12]
 800a850:	061b      	lsls	r3, r3, #24
 800a852:	b09d      	sub	sp, #116	; 0x74
 800a854:	4607      	mov	r7, r0
 800a856:	460d      	mov	r5, r1
 800a858:	4614      	mov	r4, r2
 800a85a:	d50e      	bpl.n	800a87a <_svfiprintf_r+0x32>
 800a85c:	690b      	ldr	r3, [r1, #16]
 800a85e:	b963      	cbnz	r3, 800a87a <_svfiprintf_r+0x32>
 800a860:	2140      	movs	r1, #64	; 0x40
 800a862:	f000 fb19 	bl	800ae98 <_malloc_r>
 800a866:	6028      	str	r0, [r5, #0]
 800a868:	6128      	str	r0, [r5, #16]
 800a86a:	b920      	cbnz	r0, 800a876 <_svfiprintf_r+0x2e>
 800a86c:	230c      	movs	r3, #12
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a874:	e0d1      	b.n	800aa1a <_svfiprintf_r+0x1d2>
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	616b      	str	r3, [r5, #20]
 800a87a:	2300      	movs	r3, #0
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	2320      	movs	r3, #32
 800a880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a884:	f8cd 800c 	str.w	r8, [sp, #12]
 800a888:	2330      	movs	r3, #48	; 0x30
 800a88a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa34 <_svfiprintf_r+0x1ec>
 800a88e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a892:	f04f 0901 	mov.w	r9, #1
 800a896:	4623      	mov	r3, r4
 800a898:	469a      	mov	sl, r3
 800a89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89e:	b10a      	cbz	r2, 800a8a4 <_svfiprintf_r+0x5c>
 800a8a0:	2a25      	cmp	r2, #37	; 0x25
 800a8a2:	d1f9      	bne.n	800a898 <_svfiprintf_r+0x50>
 800a8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a8:	d00b      	beq.n	800a8c2 <_svfiprintf_r+0x7a>
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff ff6d 	bl	800a790 <__ssputs_r>
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f000 80aa 	beq.w	800aa10 <_svfiprintf_r+0x1c8>
 800a8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8be:	445a      	add	r2, fp
 800a8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 80a2 	beq.w	800aa10 <_svfiprintf_r+0x1c8>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d6:	f10a 0a01 	add.w	sl, sl, #1
 800a8da:	9304      	str	r3, [sp, #16]
 800a8dc:	9307      	str	r3, [sp, #28]
 800a8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e4:	4654      	mov	r4, sl
 800a8e6:	2205      	movs	r2, #5
 800a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ec:	4851      	ldr	r0, [pc, #324]	; (800aa34 <_svfiprintf_r+0x1ec>)
 800a8ee:	f7f5 fc77 	bl	80001e0 <memchr>
 800a8f2:	9a04      	ldr	r2, [sp, #16]
 800a8f4:	b9d8      	cbnz	r0, 800a92e <_svfiprintf_r+0xe6>
 800a8f6:	06d0      	lsls	r0, r2, #27
 800a8f8:	bf44      	itt	mi
 800a8fa:	2320      	movmi	r3, #32
 800a8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a900:	0711      	lsls	r1, r2, #28
 800a902:	bf44      	itt	mi
 800a904:	232b      	movmi	r3, #43	; 0x2b
 800a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b2a      	cmp	r3, #42	; 0x2a
 800a910:	d015      	beq.n	800a93e <_svfiprintf_r+0xf6>
 800a912:	9a07      	ldr	r2, [sp, #28]
 800a914:	4654      	mov	r4, sl
 800a916:	2000      	movs	r0, #0
 800a918:	f04f 0c0a 	mov.w	ip, #10
 800a91c:	4621      	mov	r1, r4
 800a91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a922:	3b30      	subs	r3, #48	; 0x30
 800a924:	2b09      	cmp	r3, #9
 800a926:	d94e      	bls.n	800a9c6 <_svfiprintf_r+0x17e>
 800a928:	b1b0      	cbz	r0, 800a958 <_svfiprintf_r+0x110>
 800a92a:	9207      	str	r2, [sp, #28]
 800a92c:	e014      	b.n	800a958 <_svfiprintf_r+0x110>
 800a92e:	eba0 0308 	sub.w	r3, r0, r8
 800a932:	fa09 f303 	lsl.w	r3, r9, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	46a2      	mov	sl, r4
 800a93c:	e7d2      	b.n	800a8e4 <_svfiprintf_r+0x9c>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9103      	str	r1, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfbb      	ittet	lt
 800a94a:	425b      	neglt	r3, r3
 800a94c:	f042 0202 	orrlt.w	r2, r2, #2
 800a950:	9307      	strge	r3, [sp, #28]
 800a952:	9307      	strlt	r3, [sp, #28]
 800a954:	bfb8      	it	lt
 800a956:	9204      	strlt	r2, [sp, #16]
 800a958:	7823      	ldrb	r3, [r4, #0]
 800a95a:	2b2e      	cmp	r3, #46	; 0x2e
 800a95c:	d10c      	bne.n	800a978 <_svfiprintf_r+0x130>
 800a95e:	7863      	ldrb	r3, [r4, #1]
 800a960:	2b2a      	cmp	r3, #42	; 0x2a
 800a962:	d135      	bne.n	800a9d0 <_svfiprintf_r+0x188>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9203      	str	r2, [sp, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bfb8      	it	lt
 800a970:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a974:	3402      	adds	r4, #2
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa44 <_svfiprintf_r+0x1fc>
 800a97c:	7821      	ldrb	r1, [r4, #0]
 800a97e:	2203      	movs	r2, #3
 800a980:	4650      	mov	r0, sl
 800a982:	f7f5 fc2d 	bl	80001e0 <memchr>
 800a986:	b140      	cbz	r0, 800a99a <_svfiprintf_r+0x152>
 800a988:	2340      	movs	r3, #64	; 0x40
 800a98a:	eba0 000a 	sub.w	r0, r0, sl
 800a98e:	fa03 f000 	lsl.w	r0, r3, r0
 800a992:	9b04      	ldr	r3, [sp, #16]
 800a994:	4303      	orrs	r3, r0
 800a996:	3401      	adds	r4, #1
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99e:	4826      	ldr	r0, [pc, #152]	; (800aa38 <_svfiprintf_r+0x1f0>)
 800a9a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a4:	2206      	movs	r2, #6
 800a9a6:	f7f5 fc1b 	bl	80001e0 <memchr>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d038      	beq.n	800aa20 <_svfiprintf_r+0x1d8>
 800a9ae:	4b23      	ldr	r3, [pc, #140]	; (800aa3c <_svfiprintf_r+0x1f4>)
 800a9b0:	bb1b      	cbnz	r3, 800a9fa <_svfiprintf_r+0x1b2>
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	3307      	adds	r3, #7
 800a9b6:	f023 0307 	bic.w	r3, r3, #7
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	9303      	str	r3, [sp, #12]
 800a9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c0:	4433      	add	r3, r6
 800a9c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c4:	e767      	b.n	800a896 <_svfiprintf_r+0x4e>
 800a9c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	e7a5      	b.n	800a91c <_svfiprintf_r+0xd4>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	3401      	adds	r4, #1
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	f04f 0c0a 	mov.w	ip, #10
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e2:	3a30      	subs	r2, #48	; 0x30
 800a9e4:	2a09      	cmp	r2, #9
 800a9e6:	d903      	bls.n	800a9f0 <_svfiprintf_r+0x1a8>
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0c5      	beq.n	800a978 <_svfiprintf_r+0x130>
 800a9ec:	9105      	str	r1, [sp, #20]
 800a9ee:	e7c3      	b.n	800a978 <_svfiprintf_r+0x130>
 800a9f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e7f0      	b.n	800a9dc <_svfiprintf_r+0x194>
 800a9fa:	ab03      	add	r3, sp, #12
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4b0f      	ldr	r3, [pc, #60]	; (800aa40 <_svfiprintf_r+0x1f8>)
 800aa02:	a904      	add	r1, sp, #16
 800aa04:	4638      	mov	r0, r7
 800aa06:	f3af 8000 	nop.w
 800aa0a:	1c42      	adds	r2, r0, #1
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	d1d6      	bne.n	800a9be <_svfiprintf_r+0x176>
 800aa10:	89ab      	ldrh	r3, [r5, #12]
 800aa12:	065b      	lsls	r3, r3, #25
 800aa14:	f53f af2c 	bmi.w	800a870 <_svfiprintf_r+0x28>
 800aa18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa1a:	b01d      	add	sp, #116	; 0x74
 800aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa20:	ab03      	add	r3, sp, #12
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	462a      	mov	r2, r5
 800aa26:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <_svfiprintf_r+0x1f8>)
 800aa28:	a904      	add	r1, sp, #16
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f000 f87a 	bl	800ab24 <_printf_i>
 800aa30:	e7eb      	b.n	800aa0a <_svfiprintf_r+0x1c2>
 800aa32:	bf00      	nop
 800aa34:	0800d340 	.word	0x0800d340
 800aa38:	0800d34a 	.word	0x0800d34a
 800aa3c:	00000000 	.word	0x00000000
 800aa40:	0800a791 	.word	0x0800a791
 800aa44:	0800d346 	.word	0x0800d346

0800aa48 <_printf_common>:
 800aa48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	4616      	mov	r6, r2
 800aa4e:	4699      	mov	r9, r3
 800aa50:	688a      	ldr	r2, [r1, #8]
 800aa52:	690b      	ldr	r3, [r1, #16]
 800aa54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	bfb8      	it	lt
 800aa5c:	4613      	movlt	r3, r2
 800aa5e:	6033      	str	r3, [r6, #0]
 800aa60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa64:	4607      	mov	r7, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	b10a      	cbz	r2, 800aa6e <_printf_common+0x26>
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	6033      	str	r3, [r6, #0]
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	0699      	lsls	r1, r3, #26
 800aa72:	bf42      	ittt	mi
 800aa74:	6833      	ldrmi	r3, [r6, #0]
 800aa76:	3302      	addmi	r3, #2
 800aa78:	6033      	strmi	r3, [r6, #0]
 800aa7a:	6825      	ldr	r5, [r4, #0]
 800aa7c:	f015 0506 	ands.w	r5, r5, #6
 800aa80:	d106      	bne.n	800aa90 <_printf_common+0x48>
 800aa82:	f104 0a19 	add.w	sl, r4, #25
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	6832      	ldr	r2, [r6, #0]
 800aa8a:	1a9b      	subs	r3, r3, r2
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dc26      	bgt.n	800aade <_printf_common+0x96>
 800aa90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa94:	1e13      	subs	r3, r2, #0
 800aa96:	6822      	ldr	r2, [r4, #0]
 800aa98:	bf18      	it	ne
 800aa9a:	2301      	movne	r3, #1
 800aa9c:	0692      	lsls	r2, r2, #26
 800aa9e:	d42b      	bmi.n	800aaf8 <_printf_common+0xb0>
 800aaa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	47c0      	blx	r8
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d01e      	beq.n	800aaec <_printf_common+0xa4>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	68e5      	ldr	r5, [r4, #12]
 800aab2:	6832      	ldr	r2, [r6, #0]
 800aab4:	f003 0306 	and.w	r3, r3, #6
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	bf08      	it	eq
 800aabc:	1aad      	subeq	r5, r5, r2
 800aabe:	68a3      	ldr	r3, [r4, #8]
 800aac0:	6922      	ldr	r2, [r4, #16]
 800aac2:	bf0c      	ite	eq
 800aac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aac8:	2500      	movne	r5, #0
 800aaca:	4293      	cmp	r3, r2
 800aacc:	bfc4      	itt	gt
 800aace:	1a9b      	subgt	r3, r3, r2
 800aad0:	18ed      	addgt	r5, r5, r3
 800aad2:	2600      	movs	r6, #0
 800aad4:	341a      	adds	r4, #26
 800aad6:	42b5      	cmp	r5, r6
 800aad8:	d11a      	bne.n	800ab10 <_printf_common+0xc8>
 800aada:	2000      	movs	r0, #0
 800aadc:	e008      	b.n	800aaf0 <_printf_common+0xa8>
 800aade:	2301      	movs	r3, #1
 800aae0:	4652      	mov	r2, sl
 800aae2:	4649      	mov	r1, r9
 800aae4:	4638      	mov	r0, r7
 800aae6:	47c0      	blx	r8
 800aae8:	3001      	adds	r0, #1
 800aaea:	d103      	bne.n	800aaf4 <_printf_common+0xac>
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf4:	3501      	adds	r5, #1
 800aaf6:	e7c6      	b.n	800aa86 <_printf_common+0x3e>
 800aaf8:	18e1      	adds	r1, r4, r3
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	2030      	movs	r0, #48	; 0x30
 800aafe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab02:	4422      	add	r2, r4
 800ab04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab0c:	3302      	adds	r3, #2
 800ab0e:	e7c7      	b.n	800aaa0 <_printf_common+0x58>
 800ab10:	2301      	movs	r3, #1
 800ab12:	4622      	mov	r2, r4
 800ab14:	4649      	mov	r1, r9
 800ab16:	4638      	mov	r0, r7
 800ab18:	47c0      	blx	r8
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	d0e6      	beq.n	800aaec <_printf_common+0xa4>
 800ab1e:	3601      	adds	r6, #1
 800ab20:	e7d9      	b.n	800aad6 <_printf_common+0x8e>
	...

0800ab24 <_printf_i>:
 800ab24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	7e0f      	ldrb	r7, [r1, #24]
 800ab2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab2c:	2f78      	cmp	r7, #120	; 0x78
 800ab2e:	4691      	mov	r9, r2
 800ab30:	4680      	mov	r8, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	469a      	mov	sl, r3
 800ab36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab3a:	d807      	bhi.n	800ab4c <_printf_i+0x28>
 800ab3c:	2f62      	cmp	r7, #98	; 0x62
 800ab3e:	d80a      	bhi.n	800ab56 <_printf_i+0x32>
 800ab40:	2f00      	cmp	r7, #0
 800ab42:	f000 80d8 	beq.w	800acf6 <_printf_i+0x1d2>
 800ab46:	2f58      	cmp	r7, #88	; 0x58
 800ab48:	f000 80a3 	beq.w	800ac92 <_printf_i+0x16e>
 800ab4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab54:	e03a      	b.n	800abcc <_printf_i+0xa8>
 800ab56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab5a:	2b15      	cmp	r3, #21
 800ab5c:	d8f6      	bhi.n	800ab4c <_printf_i+0x28>
 800ab5e:	a101      	add	r1, pc, #4	; (adr r1, 800ab64 <_printf_i+0x40>)
 800ab60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab64:	0800abbd 	.word	0x0800abbd
 800ab68:	0800abd1 	.word	0x0800abd1
 800ab6c:	0800ab4d 	.word	0x0800ab4d
 800ab70:	0800ab4d 	.word	0x0800ab4d
 800ab74:	0800ab4d 	.word	0x0800ab4d
 800ab78:	0800ab4d 	.word	0x0800ab4d
 800ab7c:	0800abd1 	.word	0x0800abd1
 800ab80:	0800ab4d 	.word	0x0800ab4d
 800ab84:	0800ab4d 	.word	0x0800ab4d
 800ab88:	0800ab4d 	.word	0x0800ab4d
 800ab8c:	0800ab4d 	.word	0x0800ab4d
 800ab90:	0800acdd 	.word	0x0800acdd
 800ab94:	0800ac01 	.word	0x0800ac01
 800ab98:	0800acbf 	.word	0x0800acbf
 800ab9c:	0800ab4d 	.word	0x0800ab4d
 800aba0:	0800ab4d 	.word	0x0800ab4d
 800aba4:	0800acff 	.word	0x0800acff
 800aba8:	0800ab4d 	.word	0x0800ab4d
 800abac:	0800ac01 	.word	0x0800ac01
 800abb0:	0800ab4d 	.word	0x0800ab4d
 800abb4:	0800ab4d 	.word	0x0800ab4d
 800abb8:	0800acc7 	.word	0x0800acc7
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	1d1a      	adds	r2, r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	602a      	str	r2, [r5, #0]
 800abc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abcc:	2301      	movs	r3, #1
 800abce:	e0a3      	b.n	800ad18 <_printf_i+0x1f4>
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	6829      	ldr	r1, [r5, #0]
 800abd4:	0606      	lsls	r6, r0, #24
 800abd6:	f101 0304 	add.w	r3, r1, #4
 800abda:	d50a      	bpl.n	800abf2 <_printf_i+0xce>
 800abdc:	680e      	ldr	r6, [r1, #0]
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	da03      	bge.n	800abec <_printf_i+0xc8>
 800abe4:	232d      	movs	r3, #45	; 0x2d
 800abe6:	4276      	negs	r6, r6
 800abe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abec:	485e      	ldr	r0, [pc, #376]	; (800ad68 <_printf_i+0x244>)
 800abee:	230a      	movs	r3, #10
 800abf0:	e019      	b.n	800ac26 <_printf_i+0x102>
 800abf2:	680e      	ldr	r6, [r1, #0]
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abfa:	bf18      	it	ne
 800abfc:	b236      	sxthne	r6, r6
 800abfe:	e7ef      	b.n	800abe0 <_printf_i+0xbc>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	6820      	ldr	r0, [r4, #0]
 800ac04:	1d19      	adds	r1, r3, #4
 800ac06:	6029      	str	r1, [r5, #0]
 800ac08:	0601      	lsls	r1, r0, #24
 800ac0a:	d501      	bpl.n	800ac10 <_printf_i+0xec>
 800ac0c:	681e      	ldr	r6, [r3, #0]
 800ac0e:	e002      	b.n	800ac16 <_printf_i+0xf2>
 800ac10:	0646      	lsls	r6, r0, #25
 800ac12:	d5fb      	bpl.n	800ac0c <_printf_i+0xe8>
 800ac14:	881e      	ldrh	r6, [r3, #0]
 800ac16:	4854      	ldr	r0, [pc, #336]	; (800ad68 <_printf_i+0x244>)
 800ac18:	2f6f      	cmp	r7, #111	; 0x6f
 800ac1a:	bf0c      	ite	eq
 800ac1c:	2308      	moveq	r3, #8
 800ac1e:	230a      	movne	r3, #10
 800ac20:	2100      	movs	r1, #0
 800ac22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac26:	6865      	ldr	r5, [r4, #4]
 800ac28:	60a5      	str	r5, [r4, #8]
 800ac2a:	2d00      	cmp	r5, #0
 800ac2c:	bfa2      	ittt	ge
 800ac2e:	6821      	ldrge	r1, [r4, #0]
 800ac30:	f021 0104 	bicge.w	r1, r1, #4
 800ac34:	6021      	strge	r1, [r4, #0]
 800ac36:	b90e      	cbnz	r6, 800ac3c <_printf_i+0x118>
 800ac38:	2d00      	cmp	r5, #0
 800ac3a:	d04d      	beq.n	800acd8 <_printf_i+0x1b4>
 800ac3c:	4615      	mov	r5, r2
 800ac3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac42:	fb03 6711 	mls	r7, r3, r1, r6
 800ac46:	5dc7      	ldrb	r7, [r0, r7]
 800ac48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac4c:	4637      	mov	r7, r6
 800ac4e:	42bb      	cmp	r3, r7
 800ac50:	460e      	mov	r6, r1
 800ac52:	d9f4      	bls.n	800ac3e <_printf_i+0x11a>
 800ac54:	2b08      	cmp	r3, #8
 800ac56:	d10b      	bne.n	800ac70 <_printf_i+0x14c>
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	07de      	lsls	r6, r3, #31
 800ac5c:	d508      	bpl.n	800ac70 <_printf_i+0x14c>
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	6861      	ldr	r1, [r4, #4]
 800ac62:	4299      	cmp	r1, r3
 800ac64:	bfde      	ittt	le
 800ac66:	2330      	movle	r3, #48	; 0x30
 800ac68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac70:	1b52      	subs	r2, r2, r5
 800ac72:	6122      	str	r2, [r4, #16]
 800ac74:	f8cd a000 	str.w	sl, [sp]
 800ac78:	464b      	mov	r3, r9
 800ac7a:	aa03      	add	r2, sp, #12
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4640      	mov	r0, r8
 800ac80:	f7ff fee2 	bl	800aa48 <_printf_common>
 800ac84:	3001      	adds	r0, #1
 800ac86:	d14c      	bne.n	800ad22 <_printf_i+0x1fe>
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac8c:	b004      	add	sp, #16
 800ac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac92:	4835      	ldr	r0, [pc, #212]	; (800ad68 <_printf_i+0x244>)
 800ac94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac98:	6829      	ldr	r1, [r5, #0]
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800aca0:	6029      	str	r1, [r5, #0]
 800aca2:	061d      	lsls	r5, r3, #24
 800aca4:	d514      	bpl.n	800acd0 <_printf_i+0x1ac>
 800aca6:	07df      	lsls	r7, r3, #31
 800aca8:	bf44      	itt	mi
 800acaa:	f043 0320 	orrmi.w	r3, r3, #32
 800acae:	6023      	strmi	r3, [r4, #0]
 800acb0:	b91e      	cbnz	r6, 800acba <_printf_i+0x196>
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	f023 0320 	bic.w	r3, r3, #32
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	2310      	movs	r3, #16
 800acbc:	e7b0      	b.n	800ac20 <_printf_i+0xfc>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	f043 0320 	orr.w	r3, r3, #32
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	2378      	movs	r3, #120	; 0x78
 800acc8:	4828      	ldr	r0, [pc, #160]	; (800ad6c <_printf_i+0x248>)
 800acca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acce:	e7e3      	b.n	800ac98 <_printf_i+0x174>
 800acd0:	0659      	lsls	r1, r3, #25
 800acd2:	bf48      	it	mi
 800acd4:	b2b6      	uxthmi	r6, r6
 800acd6:	e7e6      	b.n	800aca6 <_printf_i+0x182>
 800acd8:	4615      	mov	r5, r2
 800acda:	e7bb      	b.n	800ac54 <_printf_i+0x130>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	6826      	ldr	r6, [r4, #0]
 800ace0:	6961      	ldr	r1, [r4, #20]
 800ace2:	1d18      	adds	r0, r3, #4
 800ace4:	6028      	str	r0, [r5, #0]
 800ace6:	0635      	lsls	r5, r6, #24
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	d501      	bpl.n	800acf0 <_printf_i+0x1cc>
 800acec:	6019      	str	r1, [r3, #0]
 800acee:	e002      	b.n	800acf6 <_printf_i+0x1d2>
 800acf0:	0670      	lsls	r0, r6, #25
 800acf2:	d5fb      	bpl.n	800acec <_printf_i+0x1c8>
 800acf4:	8019      	strh	r1, [r3, #0]
 800acf6:	2300      	movs	r3, #0
 800acf8:	6123      	str	r3, [r4, #16]
 800acfa:	4615      	mov	r5, r2
 800acfc:	e7ba      	b.n	800ac74 <_printf_i+0x150>
 800acfe:	682b      	ldr	r3, [r5, #0]
 800ad00:	1d1a      	adds	r2, r3, #4
 800ad02:	602a      	str	r2, [r5, #0]
 800ad04:	681d      	ldr	r5, [r3, #0]
 800ad06:	6862      	ldr	r2, [r4, #4]
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f7f5 fa68 	bl	80001e0 <memchr>
 800ad10:	b108      	cbz	r0, 800ad16 <_printf_i+0x1f2>
 800ad12:	1b40      	subs	r0, r0, r5
 800ad14:	6060      	str	r0, [r4, #4]
 800ad16:	6863      	ldr	r3, [r4, #4]
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad20:	e7a8      	b.n	800ac74 <_printf_i+0x150>
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	462a      	mov	r2, r5
 800ad26:	4649      	mov	r1, r9
 800ad28:	4640      	mov	r0, r8
 800ad2a:	47d0      	blx	sl
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d0ab      	beq.n	800ac88 <_printf_i+0x164>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	079b      	lsls	r3, r3, #30
 800ad34:	d413      	bmi.n	800ad5e <_printf_i+0x23a>
 800ad36:	68e0      	ldr	r0, [r4, #12]
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	4298      	cmp	r0, r3
 800ad3c:	bfb8      	it	lt
 800ad3e:	4618      	movlt	r0, r3
 800ad40:	e7a4      	b.n	800ac8c <_printf_i+0x168>
 800ad42:	2301      	movs	r3, #1
 800ad44:	4632      	mov	r2, r6
 800ad46:	4649      	mov	r1, r9
 800ad48:	4640      	mov	r0, r8
 800ad4a:	47d0      	blx	sl
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d09b      	beq.n	800ac88 <_printf_i+0x164>
 800ad50:	3501      	adds	r5, #1
 800ad52:	68e3      	ldr	r3, [r4, #12]
 800ad54:	9903      	ldr	r1, [sp, #12]
 800ad56:	1a5b      	subs	r3, r3, r1
 800ad58:	42ab      	cmp	r3, r5
 800ad5a:	dcf2      	bgt.n	800ad42 <_printf_i+0x21e>
 800ad5c:	e7eb      	b.n	800ad36 <_printf_i+0x212>
 800ad5e:	2500      	movs	r5, #0
 800ad60:	f104 0619 	add.w	r6, r4, #25
 800ad64:	e7f5      	b.n	800ad52 <_printf_i+0x22e>
 800ad66:	bf00      	nop
 800ad68:	0800d351 	.word	0x0800d351
 800ad6c:	0800d362 	.word	0x0800d362

0800ad70 <memcpy>:
 800ad70:	440a      	add	r2, r1
 800ad72:	4291      	cmp	r1, r2
 800ad74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ad78:	d100      	bne.n	800ad7c <memcpy+0xc>
 800ad7a:	4770      	bx	lr
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad86:	4291      	cmp	r1, r2
 800ad88:	d1f9      	bne.n	800ad7e <memcpy+0xe>
 800ad8a:	bd10      	pop	{r4, pc}

0800ad8c <memmove>:
 800ad8c:	4288      	cmp	r0, r1
 800ad8e:	b510      	push	{r4, lr}
 800ad90:	eb01 0402 	add.w	r4, r1, r2
 800ad94:	d902      	bls.n	800ad9c <memmove+0x10>
 800ad96:	4284      	cmp	r4, r0
 800ad98:	4623      	mov	r3, r4
 800ad9a:	d807      	bhi.n	800adac <memmove+0x20>
 800ad9c:	1e43      	subs	r3, r0, #1
 800ad9e:	42a1      	cmp	r1, r4
 800ada0:	d008      	beq.n	800adb4 <memmove+0x28>
 800ada2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ada6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adaa:	e7f8      	b.n	800ad9e <memmove+0x12>
 800adac:	4402      	add	r2, r0
 800adae:	4601      	mov	r1, r0
 800adb0:	428a      	cmp	r2, r1
 800adb2:	d100      	bne.n	800adb6 <memmove+0x2a>
 800adb4:	bd10      	pop	{r4, pc}
 800adb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adbe:	e7f7      	b.n	800adb0 <memmove+0x24>

0800adc0 <_free_r>:
 800adc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adc2:	2900      	cmp	r1, #0
 800adc4:	d044      	beq.n	800ae50 <_free_r+0x90>
 800adc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adca:	9001      	str	r0, [sp, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f1a1 0404 	sub.w	r4, r1, #4
 800add2:	bfb8      	it	lt
 800add4:	18e4      	addlt	r4, r4, r3
 800add6:	f000 f913 	bl	800b000 <__malloc_lock>
 800adda:	4a1e      	ldr	r2, [pc, #120]	; (800ae54 <_free_r+0x94>)
 800addc:	9801      	ldr	r0, [sp, #4]
 800adde:	6813      	ldr	r3, [r2, #0]
 800ade0:	b933      	cbnz	r3, 800adf0 <_free_r+0x30>
 800ade2:	6063      	str	r3, [r4, #4]
 800ade4:	6014      	str	r4, [r2, #0]
 800ade6:	b003      	add	sp, #12
 800ade8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adec:	f000 b90e 	b.w	800b00c <__malloc_unlock>
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	d908      	bls.n	800ae06 <_free_r+0x46>
 800adf4:	6825      	ldr	r5, [r4, #0]
 800adf6:	1961      	adds	r1, r4, r5
 800adf8:	428b      	cmp	r3, r1
 800adfa:	bf01      	itttt	eq
 800adfc:	6819      	ldreq	r1, [r3, #0]
 800adfe:	685b      	ldreq	r3, [r3, #4]
 800ae00:	1949      	addeq	r1, r1, r5
 800ae02:	6021      	streq	r1, [r4, #0]
 800ae04:	e7ed      	b.n	800ade2 <_free_r+0x22>
 800ae06:	461a      	mov	r2, r3
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	b10b      	cbz	r3, 800ae10 <_free_r+0x50>
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d9fa      	bls.n	800ae06 <_free_r+0x46>
 800ae10:	6811      	ldr	r1, [r2, #0]
 800ae12:	1855      	adds	r5, r2, r1
 800ae14:	42a5      	cmp	r5, r4
 800ae16:	d10b      	bne.n	800ae30 <_free_r+0x70>
 800ae18:	6824      	ldr	r4, [r4, #0]
 800ae1a:	4421      	add	r1, r4
 800ae1c:	1854      	adds	r4, r2, r1
 800ae1e:	42a3      	cmp	r3, r4
 800ae20:	6011      	str	r1, [r2, #0]
 800ae22:	d1e0      	bne.n	800ade6 <_free_r+0x26>
 800ae24:	681c      	ldr	r4, [r3, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	6053      	str	r3, [r2, #4]
 800ae2a:	4421      	add	r1, r4
 800ae2c:	6011      	str	r1, [r2, #0]
 800ae2e:	e7da      	b.n	800ade6 <_free_r+0x26>
 800ae30:	d902      	bls.n	800ae38 <_free_r+0x78>
 800ae32:	230c      	movs	r3, #12
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	e7d6      	b.n	800ade6 <_free_r+0x26>
 800ae38:	6825      	ldr	r5, [r4, #0]
 800ae3a:	1961      	adds	r1, r4, r5
 800ae3c:	428b      	cmp	r3, r1
 800ae3e:	bf04      	itt	eq
 800ae40:	6819      	ldreq	r1, [r3, #0]
 800ae42:	685b      	ldreq	r3, [r3, #4]
 800ae44:	6063      	str	r3, [r4, #4]
 800ae46:	bf04      	itt	eq
 800ae48:	1949      	addeq	r1, r1, r5
 800ae4a:	6021      	streq	r1, [r4, #0]
 800ae4c:	6054      	str	r4, [r2, #4]
 800ae4e:	e7ca      	b.n	800ade6 <_free_r+0x26>
 800ae50:	b003      	add	sp, #12
 800ae52:	bd30      	pop	{r4, r5, pc}
 800ae54:	200006f4 	.word	0x200006f4

0800ae58 <sbrk_aligned>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	4e0e      	ldr	r6, [pc, #56]	; (800ae94 <sbrk_aligned+0x3c>)
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	6831      	ldr	r1, [r6, #0]
 800ae60:	4605      	mov	r5, r0
 800ae62:	b911      	cbnz	r1, 800ae6a <sbrk_aligned+0x12>
 800ae64:	f000 f8bc 	bl	800afe0 <_sbrk_r>
 800ae68:	6030      	str	r0, [r6, #0]
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f000 f8b7 	bl	800afe0 <_sbrk_r>
 800ae72:	1c43      	adds	r3, r0, #1
 800ae74:	d00a      	beq.n	800ae8c <sbrk_aligned+0x34>
 800ae76:	1cc4      	adds	r4, r0, #3
 800ae78:	f024 0403 	bic.w	r4, r4, #3
 800ae7c:	42a0      	cmp	r0, r4
 800ae7e:	d007      	beq.n	800ae90 <sbrk_aligned+0x38>
 800ae80:	1a21      	subs	r1, r4, r0
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f8ac 	bl	800afe0 <_sbrk_r>
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d101      	bne.n	800ae90 <sbrk_aligned+0x38>
 800ae8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae90:	4620      	mov	r0, r4
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	200006f8 	.word	0x200006f8

0800ae98 <_malloc_r>:
 800ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	1ccd      	adds	r5, r1, #3
 800ae9e:	f025 0503 	bic.w	r5, r5, #3
 800aea2:	3508      	adds	r5, #8
 800aea4:	2d0c      	cmp	r5, #12
 800aea6:	bf38      	it	cc
 800aea8:	250c      	movcc	r5, #12
 800aeaa:	2d00      	cmp	r5, #0
 800aeac:	4607      	mov	r7, r0
 800aeae:	db01      	blt.n	800aeb4 <_malloc_r+0x1c>
 800aeb0:	42a9      	cmp	r1, r5
 800aeb2:	d905      	bls.n	800aec0 <_malloc_r+0x28>
 800aeb4:	230c      	movs	r3, #12
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	2600      	movs	r6, #0
 800aeba:	4630      	mov	r0, r6
 800aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec0:	4e2e      	ldr	r6, [pc, #184]	; (800af7c <_malloc_r+0xe4>)
 800aec2:	f000 f89d 	bl	800b000 <__malloc_lock>
 800aec6:	6833      	ldr	r3, [r6, #0]
 800aec8:	461c      	mov	r4, r3
 800aeca:	bb34      	cbnz	r4, 800af1a <_malloc_r+0x82>
 800aecc:	4629      	mov	r1, r5
 800aece:	4638      	mov	r0, r7
 800aed0:	f7ff ffc2 	bl	800ae58 <sbrk_aligned>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	4604      	mov	r4, r0
 800aed8:	d14d      	bne.n	800af76 <_malloc_r+0xde>
 800aeda:	6834      	ldr	r4, [r6, #0]
 800aedc:	4626      	mov	r6, r4
 800aede:	2e00      	cmp	r6, #0
 800aee0:	d140      	bne.n	800af64 <_malloc_r+0xcc>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	4631      	mov	r1, r6
 800aee6:	4638      	mov	r0, r7
 800aee8:	eb04 0803 	add.w	r8, r4, r3
 800aeec:	f000 f878 	bl	800afe0 <_sbrk_r>
 800aef0:	4580      	cmp	r8, r0
 800aef2:	d13a      	bne.n	800af6a <_malloc_r+0xd2>
 800aef4:	6821      	ldr	r1, [r4, #0]
 800aef6:	3503      	adds	r5, #3
 800aef8:	1a6d      	subs	r5, r5, r1
 800aefa:	f025 0503 	bic.w	r5, r5, #3
 800aefe:	3508      	adds	r5, #8
 800af00:	2d0c      	cmp	r5, #12
 800af02:	bf38      	it	cc
 800af04:	250c      	movcc	r5, #12
 800af06:	4629      	mov	r1, r5
 800af08:	4638      	mov	r0, r7
 800af0a:	f7ff ffa5 	bl	800ae58 <sbrk_aligned>
 800af0e:	3001      	adds	r0, #1
 800af10:	d02b      	beq.n	800af6a <_malloc_r+0xd2>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	442b      	add	r3, r5
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	e00e      	b.n	800af38 <_malloc_r+0xa0>
 800af1a:	6822      	ldr	r2, [r4, #0]
 800af1c:	1b52      	subs	r2, r2, r5
 800af1e:	d41e      	bmi.n	800af5e <_malloc_r+0xc6>
 800af20:	2a0b      	cmp	r2, #11
 800af22:	d916      	bls.n	800af52 <_malloc_r+0xba>
 800af24:	1961      	adds	r1, r4, r5
 800af26:	42a3      	cmp	r3, r4
 800af28:	6025      	str	r5, [r4, #0]
 800af2a:	bf18      	it	ne
 800af2c:	6059      	strne	r1, [r3, #4]
 800af2e:	6863      	ldr	r3, [r4, #4]
 800af30:	bf08      	it	eq
 800af32:	6031      	streq	r1, [r6, #0]
 800af34:	5162      	str	r2, [r4, r5]
 800af36:	604b      	str	r3, [r1, #4]
 800af38:	4638      	mov	r0, r7
 800af3a:	f104 060b 	add.w	r6, r4, #11
 800af3e:	f000 f865 	bl	800b00c <__malloc_unlock>
 800af42:	f026 0607 	bic.w	r6, r6, #7
 800af46:	1d23      	adds	r3, r4, #4
 800af48:	1af2      	subs	r2, r6, r3
 800af4a:	d0b6      	beq.n	800aeba <_malloc_r+0x22>
 800af4c:	1b9b      	subs	r3, r3, r6
 800af4e:	50a3      	str	r3, [r4, r2]
 800af50:	e7b3      	b.n	800aeba <_malloc_r+0x22>
 800af52:	6862      	ldr	r2, [r4, #4]
 800af54:	42a3      	cmp	r3, r4
 800af56:	bf0c      	ite	eq
 800af58:	6032      	streq	r2, [r6, #0]
 800af5a:	605a      	strne	r2, [r3, #4]
 800af5c:	e7ec      	b.n	800af38 <_malloc_r+0xa0>
 800af5e:	4623      	mov	r3, r4
 800af60:	6864      	ldr	r4, [r4, #4]
 800af62:	e7b2      	b.n	800aeca <_malloc_r+0x32>
 800af64:	4634      	mov	r4, r6
 800af66:	6876      	ldr	r6, [r6, #4]
 800af68:	e7b9      	b.n	800aede <_malloc_r+0x46>
 800af6a:	230c      	movs	r3, #12
 800af6c:	603b      	str	r3, [r7, #0]
 800af6e:	4638      	mov	r0, r7
 800af70:	f000 f84c 	bl	800b00c <__malloc_unlock>
 800af74:	e7a1      	b.n	800aeba <_malloc_r+0x22>
 800af76:	6025      	str	r5, [r4, #0]
 800af78:	e7de      	b.n	800af38 <_malloc_r+0xa0>
 800af7a:	bf00      	nop
 800af7c:	200006f4 	.word	0x200006f4

0800af80 <_realloc_r>:
 800af80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af84:	4680      	mov	r8, r0
 800af86:	4614      	mov	r4, r2
 800af88:	460e      	mov	r6, r1
 800af8a:	b921      	cbnz	r1, 800af96 <_realloc_r+0x16>
 800af8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af90:	4611      	mov	r1, r2
 800af92:	f7ff bf81 	b.w	800ae98 <_malloc_r>
 800af96:	b92a      	cbnz	r2, 800afa4 <_realloc_r+0x24>
 800af98:	f7ff ff12 	bl	800adc0 <_free_r>
 800af9c:	4625      	mov	r5, r4
 800af9e:	4628      	mov	r0, r5
 800afa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa4:	f000 f838 	bl	800b018 <_malloc_usable_size_r>
 800afa8:	4284      	cmp	r4, r0
 800afaa:	4607      	mov	r7, r0
 800afac:	d802      	bhi.n	800afb4 <_realloc_r+0x34>
 800afae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afb2:	d812      	bhi.n	800afda <_realloc_r+0x5a>
 800afb4:	4621      	mov	r1, r4
 800afb6:	4640      	mov	r0, r8
 800afb8:	f7ff ff6e 	bl	800ae98 <_malloc_r>
 800afbc:	4605      	mov	r5, r0
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d0ed      	beq.n	800af9e <_realloc_r+0x1e>
 800afc2:	42bc      	cmp	r4, r7
 800afc4:	4622      	mov	r2, r4
 800afc6:	4631      	mov	r1, r6
 800afc8:	bf28      	it	cs
 800afca:	463a      	movcs	r2, r7
 800afcc:	f7ff fed0 	bl	800ad70 <memcpy>
 800afd0:	4631      	mov	r1, r6
 800afd2:	4640      	mov	r0, r8
 800afd4:	f7ff fef4 	bl	800adc0 <_free_r>
 800afd8:	e7e1      	b.n	800af9e <_realloc_r+0x1e>
 800afda:	4635      	mov	r5, r6
 800afdc:	e7df      	b.n	800af9e <_realloc_r+0x1e>
	...

0800afe0 <_sbrk_r>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	4d06      	ldr	r5, [pc, #24]	; (800affc <_sbrk_r+0x1c>)
 800afe4:	2300      	movs	r3, #0
 800afe6:	4604      	mov	r4, r0
 800afe8:	4608      	mov	r0, r1
 800afea:	602b      	str	r3, [r5, #0]
 800afec:	f7f9 f8b8 	bl	8004160 <_sbrk>
 800aff0:	1c43      	adds	r3, r0, #1
 800aff2:	d102      	bne.n	800affa <_sbrk_r+0x1a>
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	b103      	cbz	r3, 800affa <_sbrk_r+0x1a>
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	bd38      	pop	{r3, r4, r5, pc}
 800affc:	200006fc 	.word	0x200006fc

0800b000 <__malloc_lock>:
 800b000:	4801      	ldr	r0, [pc, #4]	; (800b008 <__malloc_lock+0x8>)
 800b002:	f000 b811 	b.w	800b028 <__retarget_lock_acquire_recursive>
 800b006:	bf00      	nop
 800b008:	20000700 	.word	0x20000700

0800b00c <__malloc_unlock>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__malloc_unlock+0x8>)
 800b00e:	f000 b80c 	b.w	800b02a <__retarget_lock_release_recursive>
 800b012:	bf00      	nop
 800b014:	20000700 	.word	0x20000700

0800b018 <_malloc_usable_size_r>:
 800b018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b01c:	1f18      	subs	r0, r3, #4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bfbc      	itt	lt
 800b022:	580b      	ldrlt	r3, [r1, r0]
 800b024:	18c0      	addlt	r0, r0, r3
 800b026:	4770      	bx	lr

0800b028 <__retarget_lock_acquire_recursive>:
 800b028:	4770      	bx	lr

0800b02a <__retarget_lock_release_recursive>:
 800b02a:	4770      	bx	lr
 800b02c:	0000      	movs	r0, r0
	...

0800b030 <sin>:
 800b030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b032:	ec53 2b10 	vmov	r2, r3, d0
 800b036:	4828      	ldr	r0, [pc, #160]	; (800b0d8 <sin+0xa8>)
 800b038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b03c:	4281      	cmp	r1, r0
 800b03e:	dc07      	bgt.n	800b050 <sin+0x20>
 800b040:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b0d0 <sin+0xa0>
 800b044:	2000      	movs	r0, #0
 800b046:	b005      	add	sp, #20
 800b048:	f85d eb04 	ldr.w	lr, [sp], #4
 800b04c:	f001 bf34 	b.w	800ceb8 <__kernel_sin>
 800b050:	4822      	ldr	r0, [pc, #136]	; (800b0dc <sin+0xac>)
 800b052:	4281      	cmp	r1, r0
 800b054:	dd09      	ble.n	800b06a <sin+0x3a>
 800b056:	ee10 0a10 	vmov	r0, s0
 800b05a:	4619      	mov	r1, r3
 800b05c:	f7f5 f914 	bl	8000288 <__aeabi_dsub>
 800b060:	ec41 0b10 	vmov	d0, r0, r1
 800b064:	b005      	add	sp, #20
 800b066:	f85d fb04 	ldr.w	pc, [sp], #4
 800b06a:	4668      	mov	r0, sp
 800b06c:	f001 f84c 	bl	800c108 <__ieee754_rem_pio2>
 800b070:	f000 0003 	and.w	r0, r0, #3
 800b074:	2801      	cmp	r0, #1
 800b076:	d00c      	beq.n	800b092 <sin+0x62>
 800b078:	2802      	cmp	r0, #2
 800b07a:	d011      	beq.n	800b0a0 <sin+0x70>
 800b07c:	b9f0      	cbnz	r0, 800b0bc <sin+0x8c>
 800b07e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b082:	ed9d 0b00 	vldr	d0, [sp]
 800b086:	2001      	movs	r0, #1
 800b088:	f001 ff16 	bl	800ceb8 <__kernel_sin>
 800b08c:	ec51 0b10 	vmov	r0, r1, d0
 800b090:	e7e6      	b.n	800b060 <sin+0x30>
 800b092:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b096:	ed9d 0b00 	vldr	d0, [sp]
 800b09a:	f001 faf5 	bl	800c688 <__kernel_cos>
 800b09e:	e7f5      	b.n	800b08c <sin+0x5c>
 800b0a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0a4:	ed9d 0b00 	vldr	d0, [sp]
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	f001 ff05 	bl	800ceb8 <__kernel_sin>
 800b0ae:	ec53 2b10 	vmov	r2, r3, d0
 800b0b2:	ee10 0a10 	vmov	r0, s0
 800b0b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0ba:	e7d1      	b.n	800b060 <sin+0x30>
 800b0bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0c0:	ed9d 0b00 	vldr	d0, [sp]
 800b0c4:	f001 fae0 	bl	800c688 <__kernel_cos>
 800b0c8:	e7f1      	b.n	800b0ae <sin+0x7e>
 800b0ca:	bf00      	nop
 800b0cc:	f3af 8000 	nop.w
	...
 800b0d8:	3fe921fb 	.word	0x3fe921fb
 800b0dc:	7fefffff 	.word	0x7fefffff

0800b0e0 <asin>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	ed2d 8b02 	vpush	{d8}
 800b0e6:	ec55 4b10 	vmov	r4, r5, d0
 800b0ea:	f000 f8c9 	bl	800b280 <__ieee754_asin>
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	462b      	mov	r3, r5
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	eeb0 8a40 	vmov.f32	s16, s0
 800b0fa:	eef0 8a60 	vmov.f32	s17, s1
 800b0fe:	f7f5 fd15 	bl	8000b2c <__aeabi_dcmpun>
 800b102:	b9a8      	cbnz	r0, 800b130 <asin+0x50>
 800b104:	ec45 4b10 	vmov	d0, r4, r5
 800b108:	f001 ffc4 	bl	800d094 <fabs>
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <asin+0x60>)
 800b10e:	ec51 0b10 	vmov	r0, r1, d0
 800b112:	2200      	movs	r2, #0
 800b114:	f7f5 fd00 	bl	8000b18 <__aeabi_dcmpgt>
 800b118:	b150      	cbz	r0, 800b130 <asin+0x50>
 800b11a:	f7ff fae7 	bl	800a6ec <__errno>
 800b11e:	ecbd 8b02 	vpop	{d8}
 800b122:	2321      	movs	r3, #33	; 0x21
 800b124:	6003      	str	r3, [r0, #0]
 800b126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b12a:	4806      	ldr	r0, [pc, #24]	; (800b144 <asin+0x64>)
 800b12c:	f002 b848 	b.w	800d1c0 <nan>
 800b130:	eeb0 0a48 	vmov.f32	s0, s16
 800b134:	eef0 0a68 	vmov.f32	s1, s17
 800b138:	ecbd 8b02 	vpop	{d8}
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	bf00      	nop
 800b140:	3ff00000 	.word	0x3ff00000
 800b144:	0800d345 	.word	0x0800d345

0800b148 <pow>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	ed2d 8b02 	vpush	{d8}
 800b14e:	eeb0 8a40 	vmov.f32	s16, s0
 800b152:	eef0 8a60 	vmov.f32	s17, s1
 800b156:	ec55 4b11 	vmov	r4, r5, d1
 800b15a:	f000 faa5 	bl	800b6a8 <__ieee754_pow>
 800b15e:	4622      	mov	r2, r4
 800b160:	462b      	mov	r3, r5
 800b162:	4620      	mov	r0, r4
 800b164:	4629      	mov	r1, r5
 800b166:	ec57 6b10 	vmov	r6, r7, d0
 800b16a:	f7f5 fcdf 	bl	8000b2c <__aeabi_dcmpun>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d13b      	bne.n	800b1ea <pow+0xa2>
 800b172:	ec51 0b18 	vmov	r0, r1, d8
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	f7f5 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b17e:	b1b8      	cbz	r0, 800b1b0 <pow+0x68>
 800b180:	2200      	movs	r2, #0
 800b182:	2300      	movs	r3, #0
 800b184:	4620      	mov	r0, r4
 800b186:	4629      	mov	r1, r5
 800b188:	f7f5 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d146      	bne.n	800b21e <pow+0xd6>
 800b190:	ec45 4b10 	vmov	d0, r4, r5
 800b194:	f001 ff87 	bl	800d0a6 <finite>
 800b198:	b338      	cbz	r0, 800b1ea <pow+0xa2>
 800b19a:	2200      	movs	r2, #0
 800b19c:	2300      	movs	r3, #0
 800b19e:	4620      	mov	r0, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	f7f5 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800b1a6:	b300      	cbz	r0, 800b1ea <pow+0xa2>
 800b1a8:	f7ff faa0 	bl	800a6ec <__errno>
 800b1ac:	2322      	movs	r3, #34	; 0x22
 800b1ae:	e01b      	b.n	800b1e8 <pow+0xa0>
 800b1b0:	ec47 6b10 	vmov	d0, r6, r7
 800b1b4:	f001 ff77 	bl	800d0a6 <finite>
 800b1b8:	b9e0      	cbnz	r0, 800b1f4 <pow+0xac>
 800b1ba:	eeb0 0a48 	vmov.f32	s0, s16
 800b1be:	eef0 0a68 	vmov.f32	s1, s17
 800b1c2:	f001 ff70 	bl	800d0a6 <finite>
 800b1c6:	b1a8      	cbz	r0, 800b1f4 <pow+0xac>
 800b1c8:	ec45 4b10 	vmov	d0, r4, r5
 800b1cc:	f001 ff6b 	bl	800d0a6 <finite>
 800b1d0:	b180      	cbz	r0, 800b1f4 <pow+0xac>
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7f5 fca7 	bl	8000b2c <__aeabi_dcmpun>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d0e2      	beq.n	800b1a8 <pow+0x60>
 800b1e2:	f7ff fa83 	bl	800a6ec <__errno>
 800b1e6:	2321      	movs	r3, #33	; 0x21
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	ecbd 8b02 	vpop	{d8}
 800b1ee:	ec47 6b10 	vmov	d0, r6, r7
 800b1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f5 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 800b200:	2800      	cmp	r0, #0
 800b202:	d0f2      	beq.n	800b1ea <pow+0xa2>
 800b204:	eeb0 0a48 	vmov.f32	s0, s16
 800b208:	eef0 0a68 	vmov.f32	s1, s17
 800b20c:	f001 ff4b 	bl	800d0a6 <finite>
 800b210:	2800      	cmp	r0, #0
 800b212:	d0ea      	beq.n	800b1ea <pow+0xa2>
 800b214:	ec45 4b10 	vmov	d0, r4, r5
 800b218:	f001 ff45 	bl	800d0a6 <finite>
 800b21c:	e7c3      	b.n	800b1a6 <pow+0x5e>
 800b21e:	4f01      	ldr	r7, [pc, #4]	; (800b224 <pow+0xdc>)
 800b220:	2600      	movs	r6, #0
 800b222:	e7e2      	b.n	800b1ea <pow+0xa2>
 800b224:	3ff00000 	.word	0x3ff00000

0800b228 <sqrt>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	ed2d 8b02 	vpush	{d8}
 800b22e:	ec55 4b10 	vmov	r4, r5, d0
 800b232:	f001 f975 	bl	800c520 <__ieee754_sqrt>
 800b236:	4622      	mov	r2, r4
 800b238:	462b      	mov	r3, r5
 800b23a:	4620      	mov	r0, r4
 800b23c:	4629      	mov	r1, r5
 800b23e:	eeb0 8a40 	vmov.f32	s16, s0
 800b242:	eef0 8a60 	vmov.f32	s17, s1
 800b246:	f7f5 fc71 	bl	8000b2c <__aeabi_dcmpun>
 800b24a:	b990      	cbnz	r0, 800b272 <sqrt+0x4a>
 800b24c:	2200      	movs	r2, #0
 800b24e:	2300      	movs	r3, #0
 800b250:	4620      	mov	r0, r4
 800b252:	4629      	mov	r1, r5
 800b254:	f7f5 fc42 	bl	8000adc <__aeabi_dcmplt>
 800b258:	b158      	cbz	r0, 800b272 <sqrt+0x4a>
 800b25a:	f7ff fa47 	bl	800a6ec <__errno>
 800b25e:	2321      	movs	r3, #33	; 0x21
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	2200      	movs	r2, #0
 800b264:	2300      	movs	r3, #0
 800b266:	4610      	mov	r0, r2
 800b268:	4619      	mov	r1, r3
 800b26a:	f7f5 faef 	bl	800084c <__aeabi_ddiv>
 800b26e:	ec41 0b18 	vmov	d8, r0, r1
 800b272:	eeb0 0a48 	vmov.f32	s0, s16
 800b276:	eef0 0a68 	vmov.f32	s1, s17
 800b27a:	ecbd 8b02 	vpop	{d8}
 800b27e:	bd38      	pop	{r3, r4, r5, pc}

0800b280 <__ieee754_asin>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	ed2d 8b04 	vpush	{d8-d9}
 800b288:	ec55 4b10 	vmov	r4, r5, d0
 800b28c:	4bcc      	ldr	r3, [pc, #816]	; (800b5c0 <__ieee754_asin+0x340>)
 800b28e:	b083      	sub	sp, #12
 800b290:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b294:	4598      	cmp	r8, r3
 800b296:	9501      	str	r5, [sp, #4]
 800b298:	dd35      	ble.n	800b306 <__ieee754_asin+0x86>
 800b29a:	ee10 3a10 	vmov	r3, s0
 800b29e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b2a2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b2a6:	ea58 0303 	orrs.w	r3, r8, r3
 800b2aa:	d117      	bne.n	800b2dc <__ieee754_asin+0x5c>
 800b2ac:	a3aa      	add	r3, pc, #680	; (adr r3, 800b558 <__ieee754_asin+0x2d8>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	ee10 0a10 	vmov	r0, s0
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7f5 f99e 	bl	80005f8 <__aeabi_dmul>
 800b2bc:	a3a8      	add	r3, pc, #672	; (adr r3, 800b560 <__ieee754_asin+0x2e0>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	460f      	mov	r7, r1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f5 f995 	bl	80005f8 <__aeabi_dmul>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	4639      	mov	r1, r7
 800b2d6:	f7f4 ffd9 	bl	800028c <__adddf3>
 800b2da:	e00b      	b.n	800b2f4 <__ieee754_asin+0x74>
 800b2dc:	ee10 2a10 	vmov	r2, s0
 800b2e0:	462b      	mov	r3, r5
 800b2e2:	ee10 0a10 	vmov	r0, s0
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f4 ffce 	bl	8000288 <__aeabi_dsub>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	f7f5 faac 	bl	800084c <__aeabi_ddiv>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	460d      	mov	r5, r1
 800b2f8:	ec45 4b10 	vmov	d0, r4, r5
 800b2fc:	b003      	add	sp, #12
 800b2fe:	ecbd 8b04 	vpop	{d8-d9}
 800b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b306:	4baf      	ldr	r3, [pc, #700]	; (800b5c4 <__ieee754_asin+0x344>)
 800b308:	4598      	cmp	r8, r3
 800b30a:	dc11      	bgt.n	800b330 <__ieee754_asin+0xb0>
 800b30c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b310:	f280 80ae 	bge.w	800b470 <__ieee754_asin+0x1f0>
 800b314:	a394      	add	r3, pc, #592	; (adr r3, 800b568 <__ieee754_asin+0x2e8>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	ee10 0a10 	vmov	r0, s0
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f4 ffb4 	bl	800028c <__adddf3>
 800b324:	4ba8      	ldr	r3, [pc, #672]	; (800b5c8 <__ieee754_asin+0x348>)
 800b326:	2200      	movs	r2, #0
 800b328:	f7f5 fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d1e3      	bne.n	800b2f8 <__ieee754_asin+0x78>
 800b330:	ec45 4b10 	vmov	d0, r4, r5
 800b334:	f001 feae 	bl	800d094 <fabs>
 800b338:	49a3      	ldr	r1, [pc, #652]	; (800b5c8 <__ieee754_asin+0x348>)
 800b33a:	ec53 2b10 	vmov	r2, r3, d0
 800b33e:	2000      	movs	r0, #0
 800b340:	f7f4 ffa2 	bl	8000288 <__aeabi_dsub>
 800b344:	4ba1      	ldr	r3, [pc, #644]	; (800b5cc <__ieee754_asin+0x34c>)
 800b346:	2200      	movs	r2, #0
 800b348:	f7f5 f956 	bl	80005f8 <__aeabi_dmul>
 800b34c:	a388      	add	r3, pc, #544	; (adr r3, 800b570 <__ieee754_asin+0x2f0>)
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	4604      	mov	r4, r0
 800b354:	460d      	mov	r5, r1
 800b356:	f7f5 f94f 	bl	80005f8 <__aeabi_dmul>
 800b35a:	a387      	add	r3, pc, #540	; (adr r3, 800b578 <__ieee754_asin+0x2f8>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f4 ff94 	bl	800028c <__adddf3>
 800b364:	4622      	mov	r2, r4
 800b366:	462b      	mov	r3, r5
 800b368:	f7f5 f946 	bl	80005f8 <__aeabi_dmul>
 800b36c:	a384      	add	r3, pc, #528	; (adr r3, 800b580 <__ieee754_asin+0x300>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f7f4 ff89 	bl	8000288 <__aeabi_dsub>
 800b376:	4622      	mov	r2, r4
 800b378:	462b      	mov	r3, r5
 800b37a:	f7f5 f93d 	bl	80005f8 <__aeabi_dmul>
 800b37e:	a382      	add	r3, pc, #520	; (adr r3, 800b588 <__ieee754_asin+0x308>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f7f4 ff82 	bl	800028c <__adddf3>
 800b388:	4622      	mov	r2, r4
 800b38a:	462b      	mov	r3, r5
 800b38c:	f7f5 f934 	bl	80005f8 <__aeabi_dmul>
 800b390:	a37f      	add	r3, pc, #508	; (adr r3, 800b590 <__ieee754_asin+0x310>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff77 	bl	8000288 <__aeabi_dsub>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	f7f5 f92b 	bl	80005f8 <__aeabi_dmul>
 800b3a2:	a37d      	add	r3, pc, #500	; (adr r3, 800b598 <__ieee754_asin+0x318>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff70 	bl	800028c <__adddf3>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	a37a      	add	r3, pc, #488	; (adr r3, 800b5a0 <__ieee754_asin+0x320>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	ec41 0b18 	vmov	d8, r0, r1
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7f5 f919 	bl	80005f8 <__aeabi_dmul>
 800b3c6:	a378      	add	r3, pc, #480	; (adr r3, 800b5a8 <__ieee754_asin+0x328>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff5c 	bl	8000288 <__aeabi_dsub>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f5 f910 	bl	80005f8 <__aeabi_dmul>
 800b3d8:	a375      	add	r3, pc, #468	; (adr r3, 800b5b0 <__ieee754_asin+0x330>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 ff55 	bl	800028c <__adddf3>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	f7f5 f907 	bl	80005f8 <__aeabi_dmul>
 800b3ea:	a373      	add	r3, pc, #460	; (adr r3, 800b5b8 <__ieee754_asin+0x338>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 ff4a 	bl	8000288 <__aeabi_dsub>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	462b      	mov	r3, r5
 800b3f8:	f7f5 f8fe 	bl	80005f8 <__aeabi_dmul>
 800b3fc:	4b72      	ldr	r3, [pc, #456]	; (800b5c8 <__ieee754_asin+0x348>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	f7f4 ff44 	bl	800028c <__adddf3>
 800b404:	ec45 4b10 	vmov	d0, r4, r5
 800b408:	4606      	mov	r6, r0
 800b40a:	460f      	mov	r7, r1
 800b40c:	f001 f888 	bl	800c520 <__ieee754_sqrt>
 800b410:	4b6f      	ldr	r3, [pc, #444]	; (800b5d0 <__ieee754_asin+0x350>)
 800b412:	4598      	cmp	r8, r3
 800b414:	ec5b ab10 	vmov	sl, fp, d0
 800b418:	f340 80dc 	ble.w	800b5d4 <__ieee754_asin+0x354>
 800b41c:	4632      	mov	r2, r6
 800b41e:	463b      	mov	r3, r7
 800b420:	ec51 0b18 	vmov	r0, r1, d8
 800b424:	f7f5 fa12 	bl	800084c <__aeabi_ddiv>
 800b428:	4652      	mov	r2, sl
 800b42a:	465b      	mov	r3, fp
 800b42c:	f7f5 f8e4 	bl	80005f8 <__aeabi_dmul>
 800b430:	4652      	mov	r2, sl
 800b432:	465b      	mov	r3, fp
 800b434:	f7f4 ff2a 	bl	800028c <__adddf3>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	f7f4 ff26 	bl	800028c <__adddf3>
 800b440:	a347      	add	r3, pc, #284	; (adr r3, 800b560 <__ieee754_asin+0x2e0>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f7f4 ff1f 	bl	8000288 <__aeabi_dsub>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	a142      	add	r1, pc, #264	; (adr r1, 800b558 <__ieee754_asin+0x2d8>)
 800b450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b454:	f7f4 ff18 	bl	8000288 <__aeabi_dsub>
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bfdc      	itt	le
 800b45e:	4602      	movle	r2, r0
 800b460:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	bfdc      	itt	le
 800b46a:	4614      	movle	r4, r2
 800b46c:	461d      	movle	r5, r3
 800b46e:	e743      	b.n	800b2f8 <__ieee754_asin+0x78>
 800b470:	ee10 2a10 	vmov	r2, s0
 800b474:	ee10 0a10 	vmov	r0, s0
 800b478:	462b      	mov	r3, r5
 800b47a:	4629      	mov	r1, r5
 800b47c:	f7f5 f8bc 	bl	80005f8 <__aeabi_dmul>
 800b480:	a33b      	add	r3, pc, #236	; (adr r3, 800b570 <__ieee754_asin+0x2f0>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	4606      	mov	r6, r0
 800b488:	460f      	mov	r7, r1
 800b48a:	f7f5 f8b5 	bl	80005f8 <__aeabi_dmul>
 800b48e:	a33a      	add	r3, pc, #232	; (adr r3, 800b578 <__ieee754_asin+0x2f8>)
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	f7f4 fefa 	bl	800028c <__adddf3>
 800b498:	4632      	mov	r2, r6
 800b49a:	463b      	mov	r3, r7
 800b49c:	f7f5 f8ac 	bl	80005f8 <__aeabi_dmul>
 800b4a0:	a337      	add	r3, pc, #220	; (adr r3, 800b580 <__ieee754_asin+0x300>)
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	f7f4 feef 	bl	8000288 <__aeabi_dsub>
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	f7f5 f8a3 	bl	80005f8 <__aeabi_dmul>
 800b4b2:	a335      	add	r3, pc, #212	; (adr r3, 800b588 <__ieee754_asin+0x308>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f7f4 fee8 	bl	800028c <__adddf3>
 800b4bc:	4632      	mov	r2, r6
 800b4be:	463b      	mov	r3, r7
 800b4c0:	f7f5 f89a 	bl	80005f8 <__aeabi_dmul>
 800b4c4:	a332      	add	r3, pc, #200	; (adr r3, 800b590 <__ieee754_asin+0x310>)
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	f7f4 fedd 	bl	8000288 <__aeabi_dsub>
 800b4ce:	4632      	mov	r2, r6
 800b4d0:	463b      	mov	r3, r7
 800b4d2:	f7f5 f891 	bl	80005f8 <__aeabi_dmul>
 800b4d6:	a330      	add	r3, pc, #192	; (adr r3, 800b598 <__ieee754_asin+0x318>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f4 fed6 	bl	800028c <__adddf3>
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	f7f5 f888 	bl	80005f8 <__aeabi_dmul>
 800b4e8:	a32d      	add	r3, pc, #180	; (adr r3, 800b5a0 <__ieee754_asin+0x320>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	4680      	mov	r8, r0
 800b4f0:	4689      	mov	r9, r1
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	f7f5 f87f 	bl	80005f8 <__aeabi_dmul>
 800b4fa:	a32b      	add	r3, pc, #172	; (adr r3, 800b5a8 <__ieee754_asin+0x328>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f4 fec2 	bl	8000288 <__aeabi_dsub>
 800b504:	4632      	mov	r2, r6
 800b506:	463b      	mov	r3, r7
 800b508:	f7f5 f876 	bl	80005f8 <__aeabi_dmul>
 800b50c:	a328      	add	r3, pc, #160	; (adr r3, 800b5b0 <__ieee754_asin+0x330>)
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	f7f4 febb 	bl	800028c <__adddf3>
 800b516:	4632      	mov	r2, r6
 800b518:	463b      	mov	r3, r7
 800b51a:	f7f5 f86d 	bl	80005f8 <__aeabi_dmul>
 800b51e:	a326      	add	r3, pc, #152	; (adr r3, 800b5b8 <__ieee754_asin+0x338>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 feb0 	bl	8000288 <__aeabi_dsub>
 800b528:	4632      	mov	r2, r6
 800b52a:	463b      	mov	r3, r7
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	4b25      	ldr	r3, [pc, #148]	; (800b5c8 <__ieee754_asin+0x348>)
 800b532:	2200      	movs	r2, #0
 800b534:	f7f4 feaa 	bl	800028c <__adddf3>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4640      	mov	r0, r8
 800b53e:	4649      	mov	r1, r9
 800b540:	f7f5 f984 	bl	800084c <__aeabi_ddiv>
 800b544:	4622      	mov	r2, r4
 800b546:	462b      	mov	r3, r5
 800b548:	f7f5 f856 	bl	80005f8 <__aeabi_dmul>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	e6bf      	b.n	800b2d6 <__ieee754_asin+0x56>
 800b556:	bf00      	nop
 800b558:	54442d18 	.word	0x54442d18
 800b55c:	3ff921fb 	.word	0x3ff921fb
 800b560:	33145c07 	.word	0x33145c07
 800b564:	3c91a626 	.word	0x3c91a626
 800b568:	8800759c 	.word	0x8800759c
 800b56c:	7e37e43c 	.word	0x7e37e43c
 800b570:	0dfdf709 	.word	0x0dfdf709
 800b574:	3f023de1 	.word	0x3f023de1
 800b578:	7501b288 	.word	0x7501b288
 800b57c:	3f49efe0 	.word	0x3f49efe0
 800b580:	b5688f3b 	.word	0xb5688f3b
 800b584:	3fa48228 	.word	0x3fa48228
 800b588:	0e884455 	.word	0x0e884455
 800b58c:	3fc9c155 	.word	0x3fc9c155
 800b590:	03eb6f7d 	.word	0x03eb6f7d
 800b594:	3fd4d612 	.word	0x3fd4d612
 800b598:	55555555 	.word	0x55555555
 800b59c:	3fc55555 	.word	0x3fc55555
 800b5a0:	b12e9282 	.word	0xb12e9282
 800b5a4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b5a8:	1b8d0159 	.word	0x1b8d0159
 800b5ac:	3fe6066c 	.word	0x3fe6066c
 800b5b0:	9c598ac8 	.word	0x9c598ac8
 800b5b4:	40002ae5 	.word	0x40002ae5
 800b5b8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b5bc:	40033a27 	.word	0x40033a27
 800b5c0:	3fefffff 	.word	0x3fefffff
 800b5c4:	3fdfffff 	.word	0x3fdfffff
 800b5c8:	3ff00000 	.word	0x3ff00000
 800b5cc:	3fe00000 	.word	0x3fe00000
 800b5d0:	3fef3332 	.word	0x3fef3332
 800b5d4:	ee10 2a10 	vmov	r2, s0
 800b5d8:	ee10 0a10 	vmov	r0, s0
 800b5dc:	465b      	mov	r3, fp
 800b5de:	4659      	mov	r1, fp
 800b5e0:	f7f4 fe54 	bl	800028c <__adddf3>
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	463b      	mov	r3, r7
 800b5e8:	ec41 0b19 	vmov	d9, r0, r1
 800b5ec:	ec51 0b18 	vmov	r0, r1, d8
 800b5f0:	f7f5 f92c 	bl	800084c <__aeabi_ddiv>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	ec51 0b19 	vmov	r0, r1, d9
 800b5fc:	f7f4 fffc 	bl	80005f8 <__aeabi_dmul>
 800b600:	f04f 0800 	mov.w	r8, #0
 800b604:	4606      	mov	r6, r0
 800b606:	460f      	mov	r7, r1
 800b608:	4642      	mov	r2, r8
 800b60a:	465b      	mov	r3, fp
 800b60c:	4640      	mov	r0, r8
 800b60e:	4659      	mov	r1, fp
 800b610:	f7f4 fff2 	bl	80005f8 <__aeabi_dmul>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4620      	mov	r0, r4
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7f4 fe34 	bl	8000288 <__aeabi_dsub>
 800b620:	4642      	mov	r2, r8
 800b622:	4604      	mov	r4, r0
 800b624:	460d      	mov	r5, r1
 800b626:	465b      	mov	r3, fp
 800b628:	4650      	mov	r0, sl
 800b62a:	4659      	mov	r1, fp
 800b62c:	f7f4 fe2e 	bl	800028c <__adddf3>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4620      	mov	r0, r4
 800b636:	4629      	mov	r1, r5
 800b638:	f7f5 f908 	bl	800084c <__aeabi_ddiv>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	f7f4 fe24 	bl	800028c <__adddf3>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	a113      	add	r1, pc, #76	; (adr r1, 800b698 <__ieee754_asin+0x418>)
 800b64a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b64e:	f7f4 fe1b 	bl	8000288 <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4630      	mov	r0, r6
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f4 fe15 	bl	8000288 <__aeabi_dsub>
 800b65e:	4642      	mov	r2, r8
 800b660:	4604      	mov	r4, r0
 800b662:	460d      	mov	r5, r1
 800b664:	465b      	mov	r3, fp
 800b666:	4640      	mov	r0, r8
 800b668:	4659      	mov	r1, fp
 800b66a:	f7f4 fe0f 	bl	800028c <__adddf3>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	a10b      	add	r1, pc, #44	; (adr r1, 800b6a0 <__ieee754_asin+0x420>)
 800b674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b678:	f7f4 fe06 	bl	8000288 <__aeabi_dsub>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f7f4 fe00 	bl	8000288 <__aeabi_dsub>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	a104      	add	r1, pc, #16	; (adr r1, 800b6a0 <__ieee754_asin+0x420>)
 800b68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b692:	e6df      	b.n	800b454 <__ieee754_asin+0x1d4>
 800b694:	f3af 8000 	nop.w
 800b698:	33145c07 	.word	0x33145c07
 800b69c:	3c91a626 	.word	0x3c91a626
 800b6a0:	54442d18 	.word	0x54442d18
 800b6a4:	3fe921fb 	.word	0x3fe921fb

0800b6a8 <__ieee754_pow>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	ed2d 8b06 	vpush	{d8-d10}
 800b6b0:	b089      	sub	sp, #36	; 0x24
 800b6b2:	ed8d 1b00 	vstr	d1, [sp]
 800b6b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b6ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b6be:	ea58 0102 	orrs.w	r1, r8, r2
 800b6c2:	ec57 6b10 	vmov	r6, r7, d0
 800b6c6:	d115      	bne.n	800b6f4 <__ieee754_pow+0x4c>
 800b6c8:	19b3      	adds	r3, r6, r6
 800b6ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b6ce:	4152      	adcs	r2, r2
 800b6d0:	4299      	cmp	r1, r3
 800b6d2:	4b89      	ldr	r3, [pc, #548]	; (800b8f8 <__ieee754_pow+0x250>)
 800b6d4:	4193      	sbcs	r3, r2
 800b6d6:	f080 84d2 	bcs.w	800c07e <__ieee754_pow+0x9d6>
 800b6da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6de:	4630      	mov	r0, r6
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	f7f4 fdd3 	bl	800028c <__adddf3>
 800b6e6:	ec41 0b10 	vmov	d0, r0, r1
 800b6ea:	b009      	add	sp, #36	; 0x24
 800b6ec:	ecbd 8b06 	vpop	{d8-d10}
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	4b81      	ldr	r3, [pc, #516]	; (800b8fc <__ieee754_pow+0x254>)
 800b6f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b6fa:	429c      	cmp	r4, r3
 800b6fc:	ee10 aa10 	vmov	sl, s0
 800b700:	463d      	mov	r5, r7
 800b702:	dc06      	bgt.n	800b712 <__ieee754_pow+0x6a>
 800b704:	d101      	bne.n	800b70a <__ieee754_pow+0x62>
 800b706:	2e00      	cmp	r6, #0
 800b708:	d1e7      	bne.n	800b6da <__ieee754_pow+0x32>
 800b70a:	4598      	cmp	r8, r3
 800b70c:	dc01      	bgt.n	800b712 <__ieee754_pow+0x6a>
 800b70e:	d10f      	bne.n	800b730 <__ieee754_pow+0x88>
 800b710:	b172      	cbz	r2, 800b730 <__ieee754_pow+0x88>
 800b712:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b716:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b71a:	ea55 050a 	orrs.w	r5, r5, sl
 800b71e:	d1dc      	bne.n	800b6da <__ieee754_pow+0x32>
 800b720:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b724:	18db      	adds	r3, r3, r3
 800b726:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b72a:	4152      	adcs	r2, r2
 800b72c:	429d      	cmp	r5, r3
 800b72e:	e7d0      	b.n	800b6d2 <__ieee754_pow+0x2a>
 800b730:	2d00      	cmp	r5, #0
 800b732:	da3b      	bge.n	800b7ac <__ieee754_pow+0x104>
 800b734:	4b72      	ldr	r3, [pc, #456]	; (800b900 <__ieee754_pow+0x258>)
 800b736:	4598      	cmp	r8, r3
 800b738:	dc51      	bgt.n	800b7de <__ieee754_pow+0x136>
 800b73a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b73e:	4598      	cmp	r8, r3
 800b740:	f340 84ac 	ble.w	800c09c <__ieee754_pow+0x9f4>
 800b744:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b748:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b74c:	2b14      	cmp	r3, #20
 800b74e:	dd0f      	ble.n	800b770 <__ieee754_pow+0xc8>
 800b750:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b754:	fa22 f103 	lsr.w	r1, r2, r3
 800b758:	fa01 f303 	lsl.w	r3, r1, r3
 800b75c:	4293      	cmp	r3, r2
 800b75e:	f040 849d 	bne.w	800c09c <__ieee754_pow+0x9f4>
 800b762:	f001 0101 	and.w	r1, r1, #1
 800b766:	f1c1 0302 	rsb	r3, r1, #2
 800b76a:	9304      	str	r3, [sp, #16]
 800b76c:	b182      	cbz	r2, 800b790 <__ieee754_pow+0xe8>
 800b76e:	e05f      	b.n	800b830 <__ieee754_pow+0x188>
 800b770:	2a00      	cmp	r2, #0
 800b772:	d15b      	bne.n	800b82c <__ieee754_pow+0x184>
 800b774:	f1c3 0314 	rsb	r3, r3, #20
 800b778:	fa48 f103 	asr.w	r1, r8, r3
 800b77c:	fa01 f303 	lsl.w	r3, r1, r3
 800b780:	4543      	cmp	r3, r8
 800b782:	f040 8488 	bne.w	800c096 <__ieee754_pow+0x9ee>
 800b786:	f001 0101 	and.w	r1, r1, #1
 800b78a:	f1c1 0302 	rsb	r3, r1, #2
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	4b5c      	ldr	r3, [pc, #368]	; (800b904 <__ieee754_pow+0x25c>)
 800b792:	4598      	cmp	r8, r3
 800b794:	d132      	bne.n	800b7fc <__ieee754_pow+0x154>
 800b796:	f1b9 0f00 	cmp.w	r9, #0
 800b79a:	f280 8478 	bge.w	800c08e <__ieee754_pow+0x9e6>
 800b79e:	4959      	ldr	r1, [pc, #356]	; (800b904 <__ieee754_pow+0x25c>)
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	463b      	mov	r3, r7
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	f7f5 f851 	bl	800084c <__aeabi_ddiv>
 800b7aa:	e79c      	b.n	800b6e6 <__ieee754_pow+0x3e>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	2a00      	cmp	r2, #0
 800b7b2:	d13d      	bne.n	800b830 <__ieee754_pow+0x188>
 800b7b4:	4b51      	ldr	r3, [pc, #324]	; (800b8fc <__ieee754_pow+0x254>)
 800b7b6:	4598      	cmp	r8, r3
 800b7b8:	d1ea      	bne.n	800b790 <__ieee754_pow+0xe8>
 800b7ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b7c6:	f000 845a 	beq.w	800c07e <__ieee754_pow+0x9d6>
 800b7ca:	4b4f      	ldr	r3, [pc, #316]	; (800b908 <__ieee754_pow+0x260>)
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	dd08      	ble.n	800b7e2 <__ieee754_pow+0x13a>
 800b7d0:	f1b9 0f00 	cmp.w	r9, #0
 800b7d4:	f2c0 8457 	blt.w	800c086 <__ieee754_pow+0x9de>
 800b7d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7dc:	e783      	b.n	800b6e6 <__ieee754_pow+0x3e>
 800b7de:	2302      	movs	r3, #2
 800b7e0:	e7e5      	b.n	800b7ae <__ieee754_pow+0x106>
 800b7e2:	f1b9 0f00 	cmp.w	r9, #0
 800b7e6:	f04f 0000 	mov.w	r0, #0
 800b7ea:	f04f 0100 	mov.w	r1, #0
 800b7ee:	f6bf af7a 	bge.w	800b6e6 <__ieee754_pow+0x3e>
 800b7f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b7f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b7fa:	e774      	b.n	800b6e6 <__ieee754_pow+0x3e>
 800b7fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b800:	d106      	bne.n	800b810 <__ieee754_pow+0x168>
 800b802:	4632      	mov	r2, r6
 800b804:	463b      	mov	r3, r7
 800b806:	4630      	mov	r0, r6
 800b808:	4639      	mov	r1, r7
 800b80a:	f7f4 fef5 	bl	80005f8 <__aeabi_dmul>
 800b80e:	e76a      	b.n	800b6e6 <__ieee754_pow+0x3e>
 800b810:	4b3e      	ldr	r3, [pc, #248]	; (800b90c <__ieee754_pow+0x264>)
 800b812:	4599      	cmp	r9, r3
 800b814:	d10c      	bne.n	800b830 <__ieee754_pow+0x188>
 800b816:	2d00      	cmp	r5, #0
 800b818:	db0a      	blt.n	800b830 <__ieee754_pow+0x188>
 800b81a:	ec47 6b10 	vmov	d0, r6, r7
 800b81e:	b009      	add	sp, #36	; 0x24
 800b820:	ecbd 8b06 	vpop	{d8-d10}
 800b824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	f000 be7a 	b.w	800c520 <__ieee754_sqrt>
 800b82c:	2300      	movs	r3, #0
 800b82e:	9304      	str	r3, [sp, #16]
 800b830:	ec47 6b10 	vmov	d0, r6, r7
 800b834:	f001 fc2e 	bl	800d094 <fabs>
 800b838:	ec51 0b10 	vmov	r0, r1, d0
 800b83c:	f1ba 0f00 	cmp.w	sl, #0
 800b840:	d129      	bne.n	800b896 <__ieee754_pow+0x1ee>
 800b842:	b124      	cbz	r4, 800b84e <__ieee754_pow+0x1a6>
 800b844:	4b2f      	ldr	r3, [pc, #188]	; (800b904 <__ieee754_pow+0x25c>)
 800b846:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d123      	bne.n	800b896 <__ieee754_pow+0x1ee>
 800b84e:	f1b9 0f00 	cmp.w	r9, #0
 800b852:	da05      	bge.n	800b860 <__ieee754_pow+0x1b8>
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	2000      	movs	r0, #0
 800b85a:	492a      	ldr	r1, [pc, #168]	; (800b904 <__ieee754_pow+0x25c>)
 800b85c:	f7f4 fff6 	bl	800084c <__aeabi_ddiv>
 800b860:	2d00      	cmp	r5, #0
 800b862:	f6bf af40 	bge.w	800b6e6 <__ieee754_pow+0x3e>
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b86c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b870:	4323      	orrs	r3, r4
 800b872:	d108      	bne.n	800b886 <__ieee754_pow+0x1de>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4610      	mov	r0, r2
 800b87a:	4619      	mov	r1, r3
 800b87c:	f7f4 fd04 	bl	8000288 <__aeabi_dsub>
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	e78f      	b.n	800b7a6 <__ieee754_pow+0xfe>
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	f47f af2c 	bne.w	800b6e6 <__ieee754_pow+0x3e>
 800b88e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b892:	4619      	mov	r1, r3
 800b894:	e727      	b.n	800b6e6 <__ieee754_pow+0x3e>
 800b896:	0feb      	lsrs	r3, r5, #31
 800b898:	3b01      	subs	r3, #1
 800b89a:	9306      	str	r3, [sp, #24]
 800b89c:	9a06      	ldr	r2, [sp, #24]
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	d102      	bne.n	800b8aa <__ieee754_pow+0x202>
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	463b      	mov	r3, r7
 800b8a8:	e7e6      	b.n	800b878 <__ieee754_pow+0x1d0>
 800b8aa:	4b19      	ldr	r3, [pc, #100]	; (800b910 <__ieee754_pow+0x268>)
 800b8ac:	4598      	cmp	r8, r3
 800b8ae:	f340 80fb 	ble.w	800baa8 <__ieee754_pow+0x400>
 800b8b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8b6:	4598      	cmp	r8, r3
 800b8b8:	4b13      	ldr	r3, [pc, #76]	; (800b908 <__ieee754_pow+0x260>)
 800b8ba:	dd0c      	ble.n	800b8d6 <__ieee754_pow+0x22e>
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	dc0f      	bgt.n	800b8e0 <__ieee754_pow+0x238>
 800b8c0:	f1b9 0f00 	cmp.w	r9, #0
 800b8c4:	da0f      	bge.n	800b8e6 <__ieee754_pow+0x23e>
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	b009      	add	sp, #36	; 0x24
 800b8ca:	ecbd 8b06 	vpop	{d8-d10}
 800b8ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d2:	f001 bbd6 	b.w	800d082 <__math_oflow>
 800b8d6:	429c      	cmp	r4, r3
 800b8d8:	dbf2      	blt.n	800b8c0 <__ieee754_pow+0x218>
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <__ieee754_pow+0x25c>)
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	dd19      	ble.n	800b914 <__ieee754_pow+0x26c>
 800b8e0:	f1b9 0f00 	cmp.w	r9, #0
 800b8e4:	dcef      	bgt.n	800b8c6 <__ieee754_pow+0x21e>
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	b009      	add	sp, #36	; 0x24
 800b8ea:	ecbd 8b06 	vpop	{d8-d10}
 800b8ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f2:	f001 bbbd 	b.w	800d070 <__math_uflow>
 800b8f6:	bf00      	nop
 800b8f8:	fff00000 	.word	0xfff00000
 800b8fc:	7ff00000 	.word	0x7ff00000
 800b900:	433fffff 	.word	0x433fffff
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	3fefffff 	.word	0x3fefffff
 800b90c:	3fe00000 	.word	0x3fe00000
 800b910:	41e00000 	.word	0x41e00000
 800b914:	4b60      	ldr	r3, [pc, #384]	; (800ba98 <__ieee754_pow+0x3f0>)
 800b916:	2200      	movs	r2, #0
 800b918:	f7f4 fcb6 	bl	8000288 <__aeabi_dsub>
 800b91c:	a354      	add	r3, pc, #336	; (adr r3, 800ba70 <__ieee754_pow+0x3c8>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	4604      	mov	r4, r0
 800b924:	460d      	mov	r5, r1
 800b926:	f7f4 fe67 	bl	80005f8 <__aeabi_dmul>
 800b92a:	a353      	add	r3, pc, #332	; (adr r3, 800ba78 <__ieee754_pow+0x3d0>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	4606      	mov	r6, r0
 800b932:	460f      	mov	r7, r1
 800b934:	4620      	mov	r0, r4
 800b936:	4629      	mov	r1, r5
 800b938:	f7f4 fe5e 	bl	80005f8 <__aeabi_dmul>
 800b93c:	4b57      	ldr	r3, [pc, #348]	; (800ba9c <__ieee754_pow+0x3f4>)
 800b93e:	4682      	mov	sl, r0
 800b940:	468b      	mov	fp, r1
 800b942:	2200      	movs	r2, #0
 800b944:	4620      	mov	r0, r4
 800b946:	4629      	mov	r1, r5
 800b948:	f7f4 fe56 	bl	80005f8 <__aeabi_dmul>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	a14b      	add	r1, pc, #300	; (adr r1, 800ba80 <__ieee754_pow+0x3d8>)
 800b952:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b956:	f7f4 fc97 	bl	8000288 <__aeabi_dsub>
 800b95a:	4622      	mov	r2, r4
 800b95c:	462b      	mov	r3, r5
 800b95e:	f7f4 fe4b 	bl	80005f8 <__aeabi_dmul>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	2000      	movs	r0, #0
 800b968:	494d      	ldr	r1, [pc, #308]	; (800baa0 <__ieee754_pow+0x3f8>)
 800b96a:	f7f4 fc8d 	bl	8000288 <__aeabi_dsub>
 800b96e:	4622      	mov	r2, r4
 800b970:	4680      	mov	r8, r0
 800b972:	4689      	mov	r9, r1
 800b974:	462b      	mov	r3, r5
 800b976:	4620      	mov	r0, r4
 800b978:	4629      	mov	r1, r5
 800b97a:	f7f4 fe3d 	bl	80005f8 <__aeabi_dmul>
 800b97e:	4602      	mov	r2, r0
 800b980:	460b      	mov	r3, r1
 800b982:	4640      	mov	r0, r8
 800b984:	4649      	mov	r1, r9
 800b986:	f7f4 fe37 	bl	80005f8 <__aeabi_dmul>
 800b98a:	a33f      	add	r3, pc, #252	; (adr r3, 800ba88 <__ieee754_pow+0x3e0>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fe32 	bl	80005f8 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4650      	mov	r0, sl
 800b99a:	4659      	mov	r1, fp
 800b99c:	f7f4 fc74 	bl	8000288 <__aeabi_dsub>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4680      	mov	r8, r0
 800b9a6:	4689      	mov	r9, r1
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7f4 fc6e 	bl	800028c <__adddf3>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	463b      	mov	r3, r7
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	f7f4 fc65 	bl	8000288 <__aeabi_dsub>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f4 fc5f 	bl	8000288 <__aeabi_dsub>
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	9a06      	ldr	r2, [sp, #24]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	4682      	mov	sl, r0
 800b9d4:	468b      	mov	fp, r1
 800b9d6:	f040 81e7 	bne.w	800bda8 <__ieee754_pow+0x700>
 800b9da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ba90 <__ieee754_pow+0x3e8>
 800b9de:	eeb0 8a47 	vmov.f32	s16, s14
 800b9e2:	eef0 8a67 	vmov.f32	s17, s15
 800b9e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9f4:	f7f4 fc48 	bl	8000288 <__aeabi_dsub>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	f7f4 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ba00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba04:	4680      	mov	r8, r0
 800ba06:	4689      	mov	r9, r1
 800ba08:	4650      	mov	r0, sl
 800ba0a:	4659      	mov	r1, fp
 800ba0c:	f7f4 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4640      	mov	r0, r8
 800ba16:	4649      	mov	r1, r9
 800ba18:	f7f4 fc38 	bl	800028c <__adddf3>
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	4680      	mov	r8, r0
 800ba22:	4689      	mov	r9, r1
 800ba24:	4620      	mov	r0, r4
 800ba26:	4629      	mov	r1, r5
 800ba28:	f7f4 fde6 	bl	80005f8 <__aeabi_dmul>
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4604      	mov	r4, r0
 800ba30:	460d      	mov	r5, r1
 800ba32:	4602      	mov	r2, r0
 800ba34:	4649      	mov	r1, r9
 800ba36:	4640      	mov	r0, r8
 800ba38:	f7f4 fc28 	bl	800028c <__adddf3>
 800ba3c:	4b19      	ldr	r3, [pc, #100]	; (800baa4 <__ieee754_pow+0x3fc>)
 800ba3e:	4299      	cmp	r1, r3
 800ba40:	ec45 4b19 	vmov	d9, r4, r5
 800ba44:	4606      	mov	r6, r0
 800ba46:	460f      	mov	r7, r1
 800ba48:	468b      	mov	fp, r1
 800ba4a:	f340 82f1 	ble.w	800c030 <__ieee754_pow+0x988>
 800ba4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba56:	4303      	orrs	r3, r0
 800ba58:	f000 81e4 	beq.w	800be24 <__ieee754_pow+0x77c>
 800ba5c:	ec51 0b18 	vmov	r0, r1, d8
 800ba60:	2200      	movs	r2, #0
 800ba62:	2300      	movs	r3, #0
 800ba64:	f7f5 f83a 	bl	8000adc <__aeabi_dcmplt>
 800ba68:	3800      	subs	r0, #0
 800ba6a:	bf18      	it	ne
 800ba6c:	2001      	movne	r0, #1
 800ba6e:	e72b      	b.n	800b8c8 <__ieee754_pow+0x220>
 800ba70:	60000000 	.word	0x60000000
 800ba74:	3ff71547 	.word	0x3ff71547
 800ba78:	f85ddf44 	.word	0xf85ddf44
 800ba7c:	3e54ae0b 	.word	0x3e54ae0b
 800ba80:	55555555 	.word	0x55555555
 800ba84:	3fd55555 	.word	0x3fd55555
 800ba88:	652b82fe 	.word	0x652b82fe
 800ba8c:	3ff71547 	.word	0x3ff71547
 800ba90:	00000000 	.word	0x00000000
 800ba94:	bff00000 	.word	0xbff00000
 800ba98:	3ff00000 	.word	0x3ff00000
 800ba9c:	3fd00000 	.word	0x3fd00000
 800baa0:	3fe00000 	.word	0x3fe00000
 800baa4:	408fffff 	.word	0x408fffff
 800baa8:	4bd5      	ldr	r3, [pc, #852]	; (800be00 <__ieee754_pow+0x758>)
 800baaa:	402b      	ands	r3, r5
 800baac:	2200      	movs	r2, #0
 800baae:	b92b      	cbnz	r3, 800babc <__ieee754_pow+0x414>
 800bab0:	4bd4      	ldr	r3, [pc, #848]	; (800be04 <__ieee754_pow+0x75c>)
 800bab2:	f7f4 fda1 	bl	80005f8 <__aeabi_dmul>
 800bab6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800baba:	460c      	mov	r4, r1
 800babc:	1523      	asrs	r3, r4, #20
 800babe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bac2:	4413      	add	r3, r2
 800bac4:	9305      	str	r3, [sp, #20]
 800bac6:	4bd0      	ldr	r3, [pc, #832]	; (800be08 <__ieee754_pow+0x760>)
 800bac8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bacc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bad0:	429c      	cmp	r4, r3
 800bad2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bad6:	dd08      	ble.n	800baea <__ieee754_pow+0x442>
 800bad8:	4bcc      	ldr	r3, [pc, #816]	; (800be0c <__ieee754_pow+0x764>)
 800bada:	429c      	cmp	r4, r3
 800badc:	f340 8162 	ble.w	800bda4 <__ieee754_pow+0x6fc>
 800bae0:	9b05      	ldr	r3, [sp, #20]
 800bae2:	3301      	adds	r3, #1
 800bae4:	9305      	str	r3, [sp, #20]
 800bae6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800baea:	2400      	movs	r4, #0
 800baec:	00e3      	lsls	r3, r4, #3
 800baee:	9307      	str	r3, [sp, #28]
 800baf0:	4bc7      	ldr	r3, [pc, #796]	; (800be10 <__ieee754_pow+0x768>)
 800baf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800baf6:	ed93 7b00 	vldr	d7, [r3]
 800bafa:	4629      	mov	r1, r5
 800bafc:	ec53 2b17 	vmov	r2, r3, d7
 800bb00:	eeb0 9a47 	vmov.f32	s18, s14
 800bb04:	eef0 9a67 	vmov.f32	s19, s15
 800bb08:	4682      	mov	sl, r0
 800bb0a:	f7f4 fbbd 	bl	8000288 <__aeabi_dsub>
 800bb0e:	4652      	mov	r2, sl
 800bb10:	4606      	mov	r6, r0
 800bb12:	460f      	mov	r7, r1
 800bb14:	462b      	mov	r3, r5
 800bb16:	ec51 0b19 	vmov	r0, r1, d9
 800bb1a:	f7f4 fbb7 	bl	800028c <__adddf3>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	2000      	movs	r0, #0
 800bb24:	49bb      	ldr	r1, [pc, #748]	; (800be14 <__ieee754_pow+0x76c>)
 800bb26:	f7f4 fe91 	bl	800084c <__aeabi_ddiv>
 800bb2a:	ec41 0b1a 	vmov	d10, r0, r1
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4630      	mov	r0, r6
 800bb34:	4639      	mov	r1, r7
 800bb36:	f7f4 fd5f 	bl	80005f8 <__aeabi_dmul>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb40:	9302      	str	r3, [sp, #8]
 800bb42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb46:	46ab      	mov	fp, r5
 800bb48:	106d      	asrs	r5, r5, #1
 800bb4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb52:	ec41 0b18 	vmov	d8, r0, r1
 800bb56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4649      	mov	r1, r9
 800bb60:	4614      	mov	r4, r2
 800bb62:	461d      	mov	r5, r3
 800bb64:	f7f4 fd48 	bl	80005f8 <__aeabi_dmul>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	4639      	mov	r1, r7
 800bb70:	f7f4 fb8a 	bl	8000288 <__aeabi_dsub>
 800bb74:	ec53 2b19 	vmov	r2, r3, d9
 800bb78:	4606      	mov	r6, r0
 800bb7a:	460f      	mov	r7, r1
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7f4 fb82 	bl	8000288 <__aeabi_dsub>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4650      	mov	r0, sl
 800bb8a:	4659      	mov	r1, fp
 800bb8c:	f7f4 fb7c 	bl	8000288 <__aeabi_dsub>
 800bb90:	4642      	mov	r2, r8
 800bb92:	464b      	mov	r3, r9
 800bb94:	f7f4 fd30 	bl	80005f8 <__aeabi_dmul>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	4639      	mov	r1, r7
 800bba0:	f7f4 fb72 	bl	8000288 <__aeabi_dsub>
 800bba4:	ec53 2b1a 	vmov	r2, r3, d10
 800bba8:	f7f4 fd26 	bl	80005f8 <__aeabi_dmul>
 800bbac:	ec53 2b18 	vmov	r2, r3, d8
 800bbb0:	ec41 0b19 	vmov	d9, r0, r1
 800bbb4:	ec51 0b18 	vmov	r0, r1, d8
 800bbb8:	f7f4 fd1e 	bl	80005f8 <__aeabi_dmul>
 800bbbc:	a37c      	add	r3, pc, #496	; (adr r3, 800bdb0 <__ieee754_pow+0x708>)
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	460d      	mov	r5, r1
 800bbc6:	f7f4 fd17 	bl	80005f8 <__aeabi_dmul>
 800bbca:	a37b      	add	r3, pc, #492	; (adr r3, 800bdb8 <__ieee754_pow+0x710>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 fb5c 	bl	800028c <__adddf3>
 800bbd4:	4622      	mov	r2, r4
 800bbd6:	462b      	mov	r3, r5
 800bbd8:	f7f4 fd0e 	bl	80005f8 <__aeabi_dmul>
 800bbdc:	a378      	add	r3, pc, #480	; (adr r3, 800bdc0 <__ieee754_pow+0x718>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	f7f4 fb53 	bl	800028c <__adddf3>
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	462b      	mov	r3, r5
 800bbea:	f7f4 fd05 	bl	80005f8 <__aeabi_dmul>
 800bbee:	a376      	add	r3, pc, #472	; (adr r3, 800bdc8 <__ieee754_pow+0x720>)
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	f7f4 fb4a 	bl	800028c <__adddf3>
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	462b      	mov	r3, r5
 800bbfc:	f7f4 fcfc 	bl	80005f8 <__aeabi_dmul>
 800bc00:	a373      	add	r3, pc, #460	; (adr r3, 800bdd0 <__ieee754_pow+0x728>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f7f4 fb41 	bl	800028c <__adddf3>
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	462b      	mov	r3, r5
 800bc0e:	f7f4 fcf3 	bl	80005f8 <__aeabi_dmul>
 800bc12:	a371      	add	r3, pc, #452	; (adr r3, 800bdd8 <__ieee754_pow+0x730>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f4 fb38 	bl	800028c <__adddf3>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460f      	mov	r7, r1
 800bc22:	462b      	mov	r3, r5
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fce6 	bl	80005f8 <__aeabi_dmul>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4630      	mov	r0, r6
 800bc32:	4639      	mov	r1, r7
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	4642      	mov	r2, r8
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	464b      	mov	r3, r9
 800bc40:	ec51 0b18 	vmov	r0, r1, d8
 800bc44:	f7f4 fb22 	bl	800028c <__adddf3>
 800bc48:	ec53 2b19 	vmov	r2, r3, d9
 800bc4c:	f7f4 fcd4 	bl	80005f8 <__aeabi_dmul>
 800bc50:	4622      	mov	r2, r4
 800bc52:	462b      	mov	r3, r5
 800bc54:	f7f4 fb1a 	bl	800028c <__adddf3>
 800bc58:	4642      	mov	r2, r8
 800bc5a:	4682      	mov	sl, r0
 800bc5c:	468b      	mov	fp, r1
 800bc5e:	464b      	mov	r3, r9
 800bc60:	4640      	mov	r0, r8
 800bc62:	4649      	mov	r1, r9
 800bc64:	f7f4 fcc8 	bl	80005f8 <__aeabi_dmul>
 800bc68:	4b6b      	ldr	r3, [pc, #428]	; (800be18 <__ieee754_pow+0x770>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	f7f4 fb0c 	bl	800028c <__adddf3>
 800bc74:	4652      	mov	r2, sl
 800bc76:	465b      	mov	r3, fp
 800bc78:	f7f4 fb08 	bl	800028c <__adddf3>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	460d      	mov	r5, r1
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	4640      	mov	r0, r8
 800bc88:	4649      	mov	r1, r9
 800bc8a:	f7f4 fcb5 	bl	80005f8 <__aeabi_dmul>
 800bc8e:	4b62      	ldr	r3, [pc, #392]	; (800be18 <__ieee754_pow+0x770>)
 800bc90:	4680      	mov	r8, r0
 800bc92:	4689      	mov	r9, r1
 800bc94:	2200      	movs	r2, #0
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 faf5 	bl	8000288 <__aeabi_dsub>
 800bc9e:	4632      	mov	r2, r6
 800bca0:	463b      	mov	r3, r7
 800bca2:	f7f4 faf1 	bl	8000288 <__aeabi_dsub>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4650      	mov	r0, sl
 800bcac:	4659      	mov	r1, fp
 800bcae:	f7f4 faeb 	bl	8000288 <__aeabi_dsub>
 800bcb2:	ec53 2b18 	vmov	r2, r3, d8
 800bcb6:	f7f4 fc9f 	bl	80005f8 <__aeabi_dmul>
 800bcba:	4622      	mov	r2, r4
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	ec51 0b19 	vmov	r0, r1, d9
 800bcc6:	f7f4 fc97 	bl	80005f8 <__aeabi_dmul>
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4630      	mov	r0, r6
 800bcd0:	4639      	mov	r1, r7
 800bcd2:	f7f4 fadb 	bl	800028c <__adddf3>
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	460f      	mov	r7, r1
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 fad3 	bl	800028c <__adddf3>
 800bce6:	a33e      	add	r3, pc, #248	; (adr r3, 800bde0 <__ieee754_pow+0x738>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	2000      	movs	r0, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	f7f4 fc81 	bl	80005f8 <__aeabi_dmul>
 800bcf6:	4642      	mov	r2, r8
 800bcf8:	ec41 0b18 	vmov	d8, r0, r1
 800bcfc:	464b      	mov	r3, r9
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 fac1 	bl	8000288 <__aeabi_dsub>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	f7f4 fabb 	bl	8000288 <__aeabi_dsub>
 800bd12:	a335      	add	r3, pc, #212	; (adr r3, 800bde8 <__ieee754_pow+0x740>)
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	f7f4 fc6e 	bl	80005f8 <__aeabi_dmul>
 800bd1c:	a334      	add	r3, pc, #208	; (adr r3, 800bdf0 <__ieee754_pow+0x748>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	4606      	mov	r6, r0
 800bd24:	460f      	mov	r7, r1
 800bd26:	4620      	mov	r0, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 fc65 	bl	80005f8 <__aeabi_dmul>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4630      	mov	r0, r6
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 faa9 	bl	800028c <__adddf3>
 800bd3a:	9a07      	ldr	r2, [sp, #28]
 800bd3c:	4b37      	ldr	r3, [pc, #220]	; (800be1c <__ieee754_pow+0x774>)
 800bd3e:	4413      	add	r3, r2
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	f7f4 faa2 	bl	800028c <__adddf3>
 800bd48:	4682      	mov	sl, r0
 800bd4a:	9805      	ldr	r0, [sp, #20]
 800bd4c:	468b      	mov	fp, r1
 800bd4e:	f7f4 fbe9 	bl	8000524 <__aeabi_i2d>
 800bd52:	9a07      	ldr	r2, [sp, #28]
 800bd54:	4b32      	ldr	r3, [pc, #200]	; (800be20 <__ieee754_pow+0x778>)
 800bd56:	4413      	add	r3, r2
 800bd58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	460f      	mov	r7, r1
 800bd60:	4652      	mov	r2, sl
 800bd62:	465b      	mov	r3, fp
 800bd64:	ec51 0b18 	vmov	r0, r1, d8
 800bd68:	f7f4 fa90 	bl	800028c <__adddf3>
 800bd6c:	4642      	mov	r2, r8
 800bd6e:	464b      	mov	r3, r9
 800bd70:	f7f4 fa8c 	bl	800028c <__adddf3>
 800bd74:	4632      	mov	r2, r6
 800bd76:	463b      	mov	r3, r7
 800bd78:	f7f4 fa88 	bl	800028c <__adddf3>
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	4632      	mov	r2, r6
 800bd80:	463b      	mov	r3, r7
 800bd82:	4604      	mov	r4, r0
 800bd84:	460d      	mov	r5, r1
 800bd86:	f7f4 fa7f 	bl	8000288 <__aeabi_dsub>
 800bd8a:	4642      	mov	r2, r8
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	f7f4 fa7b 	bl	8000288 <__aeabi_dsub>
 800bd92:	ec53 2b18 	vmov	r2, r3, d8
 800bd96:	f7f4 fa77 	bl	8000288 <__aeabi_dsub>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	4650      	mov	r0, sl
 800bda0:	4659      	mov	r1, fp
 800bda2:	e610      	b.n	800b9c6 <__ieee754_pow+0x31e>
 800bda4:	2401      	movs	r4, #1
 800bda6:	e6a1      	b.n	800baec <__ieee754_pow+0x444>
 800bda8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bdf8 <__ieee754_pow+0x750>
 800bdac:	e617      	b.n	800b9de <__ieee754_pow+0x336>
 800bdae:	bf00      	nop
 800bdb0:	4a454eef 	.word	0x4a454eef
 800bdb4:	3fca7e28 	.word	0x3fca7e28
 800bdb8:	93c9db65 	.word	0x93c9db65
 800bdbc:	3fcd864a 	.word	0x3fcd864a
 800bdc0:	a91d4101 	.word	0xa91d4101
 800bdc4:	3fd17460 	.word	0x3fd17460
 800bdc8:	518f264d 	.word	0x518f264d
 800bdcc:	3fd55555 	.word	0x3fd55555
 800bdd0:	db6fabff 	.word	0xdb6fabff
 800bdd4:	3fdb6db6 	.word	0x3fdb6db6
 800bdd8:	33333303 	.word	0x33333303
 800bddc:	3fe33333 	.word	0x3fe33333
 800bde0:	e0000000 	.word	0xe0000000
 800bde4:	3feec709 	.word	0x3feec709
 800bde8:	dc3a03fd 	.word	0xdc3a03fd
 800bdec:	3feec709 	.word	0x3feec709
 800bdf0:	145b01f5 	.word	0x145b01f5
 800bdf4:	be3e2fe0 	.word	0xbe3e2fe0
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	3ff00000 	.word	0x3ff00000
 800be00:	7ff00000 	.word	0x7ff00000
 800be04:	43400000 	.word	0x43400000
 800be08:	0003988e 	.word	0x0003988e
 800be0c:	000bb679 	.word	0x000bb679
 800be10:	0800d378 	.word	0x0800d378
 800be14:	3ff00000 	.word	0x3ff00000
 800be18:	40080000 	.word	0x40080000
 800be1c:	0800d398 	.word	0x0800d398
 800be20:	0800d388 	.word	0x0800d388
 800be24:	a3b5      	add	r3, pc, #724	; (adr r3, 800c0fc <__ieee754_pow+0xa54>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	4640      	mov	r0, r8
 800be2c:	4649      	mov	r1, r9
 800be2e:	f7f4 fa2d 	bl	800028c <__adddf3>
 800be32:	4622      	mov	r2, r4
 800be34:	ec41 0b1a 	vmov	d10, r0, r1
 800be38:	462b      	mov	r3, r5
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 fa23 	bl	8000288 <__aeabi_dsub>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	ec51 0b1a 	vmov	r0, r1, d10
 800be4a:	f7f4 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	f47f ae04 	bne.w	800ba5c <__ieee754_pow+0x3b4>
 800be54:	4aa4      	ldr	r2, [pc, #656]	; (800c0e8 <__ieee754_pow+0xa40>)
 800be56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be5a:	4293      	cmp	r3, r2
 800be5c:	f340 8108 	ble.w	800c070 <__ieee754_pow+0x9c8>
 800be60:	151b      	asrs	r3, r3, #20
 800be62:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be66:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be6a:	fa4a f303 	asr.w	r3, sl, r3
 800be6e:	445b      	add	r3, fp
 800be70:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800be74:	4e9d      	ldr	r6, [pc, #628]	; (800c0ec <__ieee754_pow+0xa44>)
 800be76:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800be7a:	4116      	asrs	r6, r2
 800be7c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800be80:	2000      	movs	r0, #0
 800be82:	ea23 0106 	bic.w	r1, r3, r6
 800be86:	f1c2 0214 	rsb	r2, r2, #20
 800be8a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800be8e:	fa4a fa02 	asr.w	sl, sl, r2
 800be92:	f1bb 0f00 	cmp.w	fp, #0
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	bfb8      	it	lt
 800bea0:	f1ca 0a00 	rsblt	sl, sl, #0
 800bea4:	f7f4 f9f0 	bl	8000288 <__aeabi_dsub>
 800bea8:	ec41 0b19 	vmov	d9, r0, r1
 800beac:	4642      	mov	r2, r8
 800beae:	464b      	mov	r3, r9
 800beb0:	ec51 0b19 	vmov	r0, r1, d9
 800beb4:	f7f4 f9ea 	bl	800028c <__adddf3>
 800beb8:	a37b      	add	r3, pc, #492	; (adr r3, 800c0a8 <__ieee754_pow+0xa00>)
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	2000      	movs	r0, #0
 800bec0:	4604      	mov	r4, r0
 800bec2:	460d      	mov	r5, r1
 800bec4:	f7f4 fb98 	bl	80005f8 <__aeabi_dmul>
 800bec8:	ec53 2b19 	vmov	r2, r3, d9
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 f9d8 	bl	8000288 <__aeabi_dsub>
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	4640      	mov	r0, r8
 800bede:	4649      	mov	r1, r9
 800bee0:	f7f4 f9d2 	bl	8000288 <__aeabi_dsub>
 800bee4:	a372      	add	r3, pc, #456	; (adr r3, 800c0b0 <__ieee754_pow+0xa08>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f7f4 fb85 	bl	80005f8 <__aeabi_dmul>
 800beee:	a372      	add	r3, pc, #456	; (adr r3, 800c0b8 <__ieee754_pow+0xa10>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	4680      	mov	r8, r0
 800bef6:	4689      	mov	r9, r1
 800bef8:	4620      	mov	r0, r4
 800befa:	4629      	mov	r1, r5
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4640      	mov	r0, r8
 800bf06:	4649      	mov	r1, r9
 800bf08:	f7f4 f9c0 	bl	800028c <__adddf3>
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	460d      	mov	r5, r1
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4630      	mov	r0, r6
 800bf16:	4639      	mov	r1, r7
 800bf18:	f7f4 f9b8 	bl	800028c <__adddf3>
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	463b      	mov	r3, r7
 800bf20:	4680      	mov	r8, r0
 800bf22:	4689      	mov	r9, r1
 800bf24:	f7f4 f9b0 	bl	8000288 <__aeabi_dsub>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	f7f4 f9aa 	bl	8000288 <__aeabi_dsub>
 800bf34:	4642      	mov	r2, r8
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	464b      	mov	r3, r9
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	4649      	mov	r1, r9
 800bf40:	f7f4 fb5a 	bl	80005f8 <__aeabi_dmul>
 800bf44:	a35e      	add	r3, pc, #376	; (adr r3, 800c0c0 <__ieee754_pow+0xa18>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	f7f4 fb53 	bl	80005f8 <__aeabi_dmul>
 800bf52:	a35d      	add	r3, pc, #372	; (adr r3, 800c0c8 <__ieee754_pow+0xa20>)
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	f7f4 f996 	bl	8000288 <__aeabi_dsub>
 800bf5c:	4622      	mov	r2, r4
 800bf5e:	462b      	mov	r3, r5
 800bf60:	f7f4 fb4a 	bl	80005f8 <__aeabi_dmul>
 800bf64:	a35a      	add	r3, pc, #360	; (adr r3, 800c0d0 <__ieee754_pow+0xa28>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	f7f4 f98f 	bl	800028c <__adddf3>
 800bf6e:	4622      	mov	r2, r4
 800bf70:	462b      	mov	r3, r5
 800bf72:	f7f4 fb41 	bl	80005f8 <__aeabi_dmul>
 800bf76:	a358      	add	r3, pc, #352	; (adr r3, 800c0d8 <__ieee754_pow+0xa30>)
 800bf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7c:	f7f4 f984 	bl	8000288 <__aeabi_dsub>
 800bf80:	4622      	mov	r2, r4
 800bf82:	462b      	mov	r3, r5
 800bf84:	f7f4 fb38 	bl	80005f8 <__aeabi_dmul>
 800bf88:	a355      	add	r3, pc, #340	; (adr r3, 800c0e0 <__ieee754_pow+0xa38>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	f7f4 f97d 	bl	800028c <__adddf3>
 800bf92:	4622      	mov	r2, r4
 800bf94:	462b      	mov	r3, r5
 800bf96:	f7f4 fb2f 	bl	80005f8 <__aeabi_dmul>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	4649      	mov	r1, r9
 800bfa2:	f7f4 f971 	bl	8000288 <__aeabi_dsub>
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	460d      	mov	r5, r1
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4640      	mov	r0, r8
 800bfb0:	4649      	mov	r1, r9
 800bfb2:	f7f4 fb21 	bl	80005f8 <__aeabi_dmul>
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	ec41 0b19 	vmov	d9, r0, r1
 800bfbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	f7f4 f960 	bl	8000288 <__aeabi_dsub>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	ec51 0b19 	vmov	r0, r1, d9
 800bfd0:	f7f4 fc3c 	bl	800084c <__aeabi_ddiv>
 800bfd4:	4632      	mov	r2, r6
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	460d      	mov	r5, r1
 800bfda:	463b      	mov	r3, r7
 800bfdc:	4640      	mov	r0, r8
 800bfde:	4649      	mov	r1, r9
 800bfe0:	f7f4 fb0a 	bl	80005f8 <__aeabi_dmul>
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	463b      	mov	r3, r7
 800bfe8:	f7f4 f950 	bl	800028c <__adddf3>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4620      	mov	r0, r4
 800bff2:	4629      	mov	r1, r5
 800bff4:	f7f4 f948 	bl	8000288 <__aeabi_dsub>
 800bff8:	4642      	mov	r2, r8
 800bffa:	464b      	mov	r3, r9
 800bffc:	f7f4 f944 	bl	8000288 <__aeabi_dsub>
 800c000:	460b      	mov	r3, r1
 800c002:	4602      	mov	r2, r0
 800c004:	493a      	ldr	r1, [pc, #232]	; (800c0f0 <__ieee754_pow+0xa48>)
 800c006:	2000      	movs	r0, #0
 800c008:	f7f4 f93e 	bl	8000288 <__aeabi_dsub>
 800c00c:	ec41 0b10 	vmov	d0, r0, r1
 800c010:	ee10 3a90 	vmov	r3, s1
 800c014:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c01c:	da2b      	bge.n	800c076 <__ieee754_pow+0x9ce>
 800c01e:	4650      	mov	r0, sl
 800c020:	f001 f8d6 	bl	800d1d0 <scalbn>
 800c024:	ec51 0b10 	vmov	r0, r1, d0
 800c028:	ec53 2b18 	vmov	r2, r3, d8
 800c02c:	f7ff bbed 	b.w	800b80a <__ieee754_pow+0x162>
 800c030:	4b30      	ldr	r3, [pc, #192]	; (800c0f4 <__ieee754_pow+0xa4c>)
 800c032:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c036:	429e      	cmp	r6, r3
 800c038:	f77f af0c 	ble.w	800be54 <__ieee754_pow+0x7ac>
 800c03c:	4b2e      	ldr	r3, [pc, #184]	; (800c0f8 <__ieee754_pow+0xa50>)
 800c03e:	440b      	add	r3, r1
 800c040:	4303      	orrs	r3, r0
 800c042:	d009      	beq.n	800c058 <__ieee754_pow+0x9b0>
 800c044:	ec51 0b18 	vmov	r0, r1, d8
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f7f4 fd46 	bl	8000adc <__aeabi_dcmplt>
 800c050:	3800      	subs	r0, #0
 800c052:	bf18      	it	ne
 800c054:	2001      	movne	r0, #1
 800c056:	e447      	b.n	800b8e8 <__ieee754_pow+0x240>
 800c058:	4622      	mov	r2, r4
 800c05a:	462b      	mov	r3, r5
 800c05c:	f7f4 f914 	bl	8000288 <__aeabi_dsub>
 800c060:	4642      	mov	r2, r8
 800c062:	464b      	mov	r3, r9
 800c064:	f7f4 fd4e 	bl	8000b04 <__aeabi_dcmpge>
 800c068:	2800      	cmp	r0, #0
 800c06a:	f43f aef3 	beq.w	800be54 <__ieee754_pow+0x7ac>
 800c06e:	e7e9      	b.n	800c044 <__ieee754_pow+0x99c>
 800c070:	f04f 0a00 	mov.w	sl, #0
 800c074:	e71a      	b.n	800beac <__ieee754_pow+0x804>
 800c076:	ec51 0b10 	vmov	r0, r1, d0
 800c07a:	4619      	mov	r1, r3
 800c07c:	e7d4      	b.n	800c028 <__ieee754_pow+0x980>
 800c07e:	491c      	ldr	r1, [pc, #112]	; (800c0f0 <__ieee754_pow+0xa48>)
 800c080:	2000      	movs	r0, #0
 800c082:	f7ff bb30 	b.w	800b6e6 <__ieee754_pow+0x3e>
 800c086:	2000      	movs	r0, #0
 800c088:	2100      	movs	r1, #0
 800c08a:	f7ff bb2c 	b.w	800b6e6 <__ieee754_pow+0x3e>
 800c08e:	4630      	mov	r0, r6
 800c090:	4639      	mov	r1, r7
 800c092:	f7ff bb28 	b.w	800b6e6 <__ieee754_pow+0x3e>
 800c096:	9204      	str	r2, [sp, #16]
 800c098:	f7ff bb7a 	b.w	800b790 <__ieee754_pow+0xe8>
 800c09c:	2300      	movs	r3, #0
 800c09e:	f7ff bb64 	b.w	800b76a <__ieee754_pow+0xc2>
 800c0a2:	bf00      	nop
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	3fe62e43 	.word	0x3fe62e43
 800c0b0:	fefa39ef 	.word	0xfefa39ef
 800c0b4:	3fe62e42 	.word	0x3fe62e42
 800c0b8:	0ca86c39 	.word	0x0ca86c39
 800c0bc:	be205c61 	.word	0xbe205c61
 800c0c0:	72bea4d0 	.word	0x72bea4d0
 800c0c4:	3e663769 	.word	0x3e663769
 800c0c8:	c5d26bf1 	.word	0xc5d26bf1
 800c0cc:	3ebbbd41 	.word	0x3ebbbd41
 800c0d0:	af25de2c 	.word	0xaf25de2c
 800c0d4:	3f11566a 	.word	0x3f11566a
 800c0d8:	16bebd93 	.word	0x16bebd93
 800c0dc:	3f66c16c 	.word	0x3f66c16c
 800c0e0:	5555553e 	.word	0x5555553e
 800c0e4:	3fc55555 	.word	0x3fc55555
 800c0e8:	3fe00000 	.word	0x3fe00000
 800c0ec:	000fffff 	.word	0x000fffff
 800c0f0:	3ff00000 	.word	0x3ff00000
 800c0f4:	4090cbff 	.word	0x4090cbff
 800c0f8:	3f6f3400 	.word	0x3f6f3400
 800c0fc:	652b82fe 	.word	0x652b82fe
 800c100:	3c971547 	.word	0x3c971547
 800c104:	00000000 	.word	0x00000000

0800c108 <__ieee754_rem_pio2>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	ed2d 8b02 	vpush	{d8}
 800c110:	ec55 4b10 	vmov	r4, r5, d0
 800c114:	4bca      	ldr	r3, [pc, #808]	; (800c440 <__ieee754_rem_pio2+0x338>)
 800c116:	b08b      	sub	sp, #44	; 0x2c
 800c118:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c11c:	4598      	cmp	r8, r3
 800c11e:	4682      	mov	sl, r0
 800c120:	9502      	str	r5, [sp, #8]
 800c122:	dc08      	bgt.n	800c136 <__ieee754_rem_pio2+0x2e>
 800c124:	2200      	movs	r2, #0
 800c126:	2300      	movs	r3, #0
 800c128:	ed80 0b00 	vstr	d0, [r0]
 800c12c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c130:	f04f 0b00 	mov.w	fp, #0
 800c134:	e028      	b.n	800c188 <__ieee754_rem_pio2+0x80>
 800c136:	4bc3      	ldr	r3, [pc, #780]	; (800c444 <__ieee754_rem_pio2+0x33c>)
 800c138:	4598      	cmp	r8, r3
 800c13a:	dc78      	bgt.n	800c22e <__ieee754_rem_pio2+0x126>
 800c13c:	9b02      	ldr	r3, [sp, #8]
 800c13e:	4ec2      	ldr	r6, [pc, #776]	; (800c448 <__ieee754_rem_pio2+0x340>)
 800c140:	2b00      	cmp	r3, #0
 800c142:	ee10 0a10 	vmov	r0, s0
 800c146:	a3b0      	add	r3, pc, #704	; (adr r3, 800c408 <__ieee754_rem_pio2+0x300>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	4629      	mov	r1, r5
 800c14e:	dd39      	ble.n	800c1c4 <__ieee754_rem_pio2+0xbc>
 800c150:	f7f4 f89a 	bl	8000288 <__aeabi_dsub>
 800c154:	45b0      	cmp	r8, r6
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	d01b      	beq.n	800c194 <__ieee754_rem_pio2+0x8c>
 800c15c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c410 <__ieee754_rem_pio2+0x308>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	f7f4 f891 	bl	8000288 <__aeabi_dsub>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	e9ca 2300 	strd	r2, r3, [sl]
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 f889 	bl	8000288 <__aeabi_dsub>
 800c176:	a3a6      	add	r3, pc, #664	; (adr r3, 800c410 <__ieee754_rem_pio2+0x308>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	f7f4 f884 	bl	8000288 <__aeabi_dsub>
 800c180:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c184:	f04f 0b01 	mov.w	fp, #1
 800c188:	4658      	mov	r0, fp
 800c18a:	b00b      	add	sp, #44	; 0x2c
 800c18c:	ecbd 8b02 	vpop	{d8}
 800c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c194:	a3a0      	add	r3, pc, #640	; (adr r3, 800c418 <__ieee754_rem_pio2+0x310>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f4 f875 	bl	8000288 <__aeabi_dsub>
 800c19e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c420 <__ieee754_rem_pio2+0x318>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	f7f4 f86e 	bl	8000288 <__aeabi_dsub>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	e9ca 2300 	strd	r2, r3, [sl]
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	f7f4 f866 	bl	8000288 <__aeabi_dsub>
 800c1bc:	a398      	add	r3, pc, #608	; (adr r3, 800c420 <__ieee754_rem_pio2+0x318>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	e7db      	b.n	800c17c <__ieee754_rem_pio2+0x74>
 800c1c4:	f7f4 f862 	bl	800028c <__adddf3>
 800c1c8:	45b0      	cmp	r8, r6
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	460d      	mov	r5, r1
 800c1ce:	d016      	beq.n	800c1fe <__ieee754_rem_pio2+0xf6>
 800c1d0:	a38f      	add	r3, pc, #572	; (adr r3, 800c410 <__ieee754_rem_pio2+0x308>)
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	f7f4 f859 	bl	800028c <__adddf3>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	e9ca 2300 	strd	r2, r3, [sl]
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7f4 f84f 	bl	8000288 <__aeabi_dsub>
 800c1ea:	a389      	add	r3, pc, #548	; (adr r3, 800c410 <__ieee754_rem_pio2+0x308>)
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	f7f4 f84c 	bl	800028c <__adddf3>
 800c1f4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c1f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c1fc:	e7c4      	b.n	800c188 <__ieee754_rem_pio2+0x80>
 800c1fe:	a386      	add	r3, pc, #536	; (adr r3, 800c418 <__ieee754_rem_pio2+0x310>)
 800c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c204:	f7f4 f842 	bl	800028c <__adddf3>
 800c208:	a385      	add	r3, pc, #532	; (adr r3, 800c420 <__ieee754_rem_pio2+0x318>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	4604      	mov	r4, r0
 800c210:	460d      	mov	r5, r1
 800c212:	f7f4 f83b 	bl	800028c <__adddf3>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	e9ca 2300 	strd	r2, r3, [sl]
 800c21e:	4620      	mov	r0, r4
 800c220:	4629      	mov	r1, r5
 800c222:	f7f4 f831 	bl	8000288 <__aeabi_dsub>
 800c226:	a37e      	add	r3, pc, #504	; (adr r3, 800c420 <__ieee754_rem_pio2+0x318>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	e7e0      	b.n	800c1f0 <__ieee754_rem_pio2+0xe8>
 800c22e:	4b87      	ldr	r3, [pc, #540]	; (800c44c <__ieee754_rem_pio2+0x344>)
 800c230:	4598      	cmp	r8, r3
 800c232:	f300 80d9 	bgt.w	800c3e8 <__ieee754_rem_pio2+0x2e0>
 800c236:	f000 ff2d 	bl	800d094 <fabs>
 800c23a:	ec55 4b10 	vmov	r4, r5, d0
 800c23e:	ee10 0a10 	vmov	r0, s0
 800c242:	a379      	add	r3, pc, #484	; (adr r3, 800c428 <__ieee754_rem_pio2+0x320>)
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	4629      	mov	r1, r5
 800c24a:	f7f4 f9d5 	bl	80005f8 <__aeabi_dmul>
 800c24e:	4b80      	ldr	r3, [pc, #512]	; (800c450 <__ieee754_rem_pio2+0x348>)
 800c250:	2200      	movs	r2, #0
 800c252:	f7f4 f81b 	bl	800028c <__adddf3>
 800c256:	f7f4 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800c25a:	4683      	mov	fp, r0
 800c25c:	f7f4 f962 	bl	8000524 <__aeabi_i2d>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	ec43 2b18 	vmov	d8, r2, r3
 800c268:	a367      	add	r3, pc, #412	; (adr r3, 800c408 <__ieee754_rem_pio2+0x300>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f4 f9c3 	bl	80005f8 <__aeabi_dmul>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4620      	mov	r0, r4
 800c278:	4629      	mov	r1, r5
 800c27a:	f7f4 f805 	bl	8000288 <__aeabi_dsub>
 800c27e:	a364      	add	r3, pc, #400	; (adr r3, 800c410 <__ieee754_rem_pio2+0x308>)
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	4606      	mov	r6, r0
 800c286:	460f      	mov	r7, r1
 800c288:	ec51 0b18 	vmov	r0, r1, d8
 800c28c:	f7f4 f9b4 	bl	80005f8 <__aeabi_dmul>
 800c290:	f1bb 0f1f 	cmp.w	fp, #31
 800c294:	4604      	mov	r4, r0
 800c296:	460d      	mov	r5, r1
 800c298:	dc0d      	bgt.n	800c2b6 <__ieee754_rem_pio2+0x1ae>
 800c29a:	4b6e      	ldr	r3, [pc, #440]	; (800c454 <__ieee754_rem_pio2+0x34c>)
 800c29c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a4:	4543      	cmp	r3, r8
 800c2a6:	d006      	beq.n	800c2b6 <__ieee754_rem_pio2+0x1ae>
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	f7f3 ffea 	bl	8000288 <__aeabi_dsub>
 800c2b4:	e00f      	b.n	800c2d6 <__ieee754_rem_pio2+0x1ce>
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	4639      	mov	r1, r7
 800c2be:	f7f3 ffe3 	bl	8000288 <__aeabi_dsub>
 800c2c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c2c6:	9303      	str	r3, [sp, #12]
 800c2c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c2cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c2d0:	f1b8 0f10 	cmp.w	r8, #16
 800c2d4:	dc02      	bgt.n	800c2dc <__ieee754_rem_pio2+0x1d4>
 800c2d6:	e9ca 0100 	strd	r0, r1, [sl]
 800c2da:	e039      	b.n	800c350 <__ieee754_rem_pio2+0x248>
 800c2dc:	a34e      	add	r3, pc, #312	; (adr r3, 800c418 <__ieee754_rem_pio2+0x310>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	ec51 0b18 	vmov	r0, r1, d8
 800c2e6:	f7f4 f987 	bl	80005f8 <__aeabi_dmul>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	4639      	mov	r1, r7
 800c2f6:	f7f3 ffc7 	bl	8000288 <__aeabi_dsub>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	4680      	mov	r8, r0
 800c300:	4689      	mov	r9, r1
 800c302:	4630      	mov	r0, r6
 800c304:	4639      	mov	r1, r7
 800c306:	f7f3 ffbf 	bl	8000288 <__aeabi_dsub>
 800c30a:	4622      	mov	r2, r4
 800c30c:	462b      	mov	r3, r5
 800c30e:	f7f3 ffbb 	bl	8000288 <__aeabi_dsub>
 800c312:	a343      	add	r3, pc, #268	; (adr r3, 800c420 <__ieee754_rem_pio2+0x318>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	4604      	mov	r4, r0
 800c31a:	460d      	mov	r5, r1
 800c31c:	ec51 0b18 	vmov	r0, r1, d8
 800c320:	f7f4 f96a 	bl	80005f8 <__aeabi_dmul>
 800c324:	4622      	mov	r2, r4
 800c326:	462b      	mov	r3, r5
 800c328:	f7f3 ffae 	bl	8000288 <__aeabi_dsub>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4604      	mov	r4, r0
 800c332:	460d      	mov	r5, r1
 800c334:	4640      	mov	r0, r8
 800c336:	4649      	mov	r1, r9
 800c338:	f7f3 ffa6 	bl	8000288 <__aeabi_dsub>
 800c33c:	9a03      	ldr	r2, [sp, #12]
 800c33e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	2b31      	cmp	r3, #49	; 0x31
 800c346:	dc24      	bgt.n	800c392 <__ieee754_rem_pio2+0x28a>
 800c348:	e9ca 0100 	strd	r0, r1, [sl]
 800c34c:	4646      	mov	r6, r8
 800c34e:	464f      	mov	r7, r9
 800c350:	e9da 8900 	ldrd	r8, r9, [sl]
 800c354:	4630      	mov	r0, r6
 800c356:	4642      	mov	r2, r8
 800c358:	464b      	mov	r3, r9
 800c35a:	4639      	mov	r1, r7
 800c35c:	f7f3 ff94 	bl	8000288 <__aeabi_dsub>
 800c360:	462b      	mov	r3, r5
 800c362:	4622      	mov	r2, r4
 800c364:	f7f3 ff90 	bl	8000288 <__aeabi_dsub>
 800c368:	9b02      	ldr	r3, [sp, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c370:	f6bf af0a 	bge.w	800c188 <__ieee754_rem_pio2+0x80>
 800c374:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c378:	f8ca 3004 	str.w	r3, [sl, #4]
 800c37c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c380:	f8ca 8000 	str.w	r8, [sl]
 800c384:	f8ca 0008 	str.w	r0, [sl, #8]
 800c388:	f8ca 300c 	str.w	r3, [sl, #12]
 800c38c:	f1cb 0b00 	rsb	fp, fp, #0
 800c390:	e6fa      	b.n	800c188 <__ieee754_rem_pio2+0x80>
 800c392:	a327      	add	r3, pc, #156	; (adr r3, 800c430 <__ieee754_rem_pio2+0x328>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	ec51 0b18 	vmov	r0, r1, d8
 800c39c:	f7f4 f92c 	bl	80005f8 <__aeabi_dmul>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4640      	mov	r0, r8
 800c3aa:	4649      	mov	r1, r9
 800c3ac:	f7f3 ff6c 	bl	8000288 <__aeabi_dsub>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	460f      	mov	r7, r1
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	f7f3 ff64 	bl	8000288 <__aeabi_dsub>
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	462b      	mov	r3, r5
 800c3c4:	f7f3 ff60 	bl	8000288 <__aeabi_dsub>
 800c3c8:	a31b      	add	r3, pc, #108	; (adr r3, 800c438 <__ieee754_rem_pio2+0x330>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	ec51 0b18 	vmov	r0, r1, d8
 800c3d6:	f7f4 f90f 	bl	80005f8 <__aeabi_dmul>
 800c3da:	4622      	mov	r2, r4
 800c3dc:	462b      	mov	r3, r5
 800c3de:	f7f3 ff53 	bl	8000288 <__aeabi_dsub>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	e75f      	b.n	800c2a8 <__ieee754_rem_pio2+0x1a0>
 800c3e8:	4b1b      	ldr	r3, [pc, #108]	; (800c458 <__ieee754_rem_pio2+0x350>)
 800c3ea:	4598      	cmp	r8, r3
 800c3ec:	dd36      	ble.n	800c45c <__ieee754_rem_pio2+0x354>
 800c3ee:	ee10 2a10 	vmov	r2, s0
 800c3f2:	462b      	mov	r3, r5
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	f7f3 ff46 	bl	8000288 <__aeabi_dsub>
 800c3fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c400:	e9ca 0100 	strd	r0, r1, [sl]
 800c404:	e694      	b.n	800c130 <__ieee754_rem_pio2+0x28>
 800c406:	bf00      	nop
 800c408:	54400000 	.word	0x54400000
 800c40c:	3ff921fb 	.word	0x3ff921fb
 800c410:	1a626331 	.word	0x1a626331
 800c414:	3dd0b461 	.word	0x3dd0b461
 800c418:	1a600000 	.word	0x1a600000
 800c41c:	3dd0b461 	.word	0x3dd0b461
 800c420:	2e037073 	.word	0x2e037073
 800c424:	3ba3198a 	.word	0x3ba3198a
 800c428:	6dc9c883 	.word	0x6dc9c883
 800c42c:	3fe45f30 	.word	0x3fe45f30
 800c430:	2e000000 	.word	0x2e000000
 800c434:	3ba3198a 	.word	0x3ba3198a
 800c438:	252049c1 	.word	0x252049c1
 800c43c:	397b839a 	.word	0x397b839a
 800c440:	3fe921fb 	.word	0x3fe921fb
 800c444:	4002d97b 	.word	0x4002d97b
 800c448:	3ff921fb 	.word	0x3ff921fb
 800c44c:	413921fb 	.word	0x413921fb
 800c450:	3fe00000 	.word	0x3fe00000
 800c454:	0800d3a8 	.word	0x0800d3a8
 800c458:	7fefffff 	.word	0x7fefffff
 800c45c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c460:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c464:	ee10 0a10 	vmov	r0, s0
 800c468:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c46c:	ee10 6a10 	vmov	r6, s0
 800c470:	460f      	mov	r7, r1
 800c472:	f7f4 fb71 	bl	8000b58 <__aeabi_d2iz>
 800c476:	f7f4 f855 	bl	8000524 <__aeabi_i2d>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	4630      	mov	r0, r6
 800c480:	4639      	mov	r1, r7
 800c482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c486:	f7f3 feff 	bl	8000288 <__aeabi_dsub>
 800c48a:	4b23      	ldr	r3, [pc, #140]	; (800c518 <__ieee754_rem_pio2+0x410>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	f7f4 f8b3 	bl	80005f8 <__aeabi_dmul>
 800c492:	460f      	mov	r7, r1
 800c494:	4606      	mov	r6, r0
 800c496:	f7f4 fb5f 	bl	8000b58 <__aeabi_d2iz>
 800c49a:	f7f4 f843 	bl	8000524 <__aeabi_i2d>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c4aa:	f7f3 feed 	bl	8000288 <__aeabi_dsub>
 800c4ae:	4b1a      	ldr	r3, [pc, #104]	; (800c518 <__ieee754_rem_pio2+0x410>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f7f4 f8a1 	bl	80005f8 <__aeabi_dmul>
 800c4b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4ba:	ad04      	add	r5, sp, #16
 800c4bc:	f04f 0803 	mov.w	r8, #3
 800c4c0:	46a9      	mov	r9, r5
 800c4c2:	2600      	movs	r6, #0
 800c4c4:	2700      	movs	r7, #0
 800c4c6:	4632      	mov	r2, r6
 800c4c8:	463b      	mov	r3, r7
 800c4ca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c4ce:	46c3      	mov	fp, r8
 800c4d0:	3d08      	subs	r5, #8
 800c4d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c4d6:	f7f4 faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d1f3      	bne.n	800c4c6 <__ieee754_rem_pio2+0x3be>
 800c4de:	4b0f      	ldr	r3, [pc, #60]	; (800c51c <__ieee754_rem_pio2+0x414>)
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	465b      	mov	r3, fp
 800c4ea:	4651      	mov	r1, sl
 800c4ec:	4648      	mov	r0, r9
 800c4ee:	f000 f993 	bl	800c818 <__kernel_rem_pio2>
 800c4f2:	9b02      	ldr	r3, [sp, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	4683      	mov	fp, r0
 800c4f8:	f6bf ae46 	bge.w	800c188 <__ieee754_rem_pio2+0x80>
 800c4fc:	e9da 2100 	ldrd	r2, r1, [sl]
 800c500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c504:	e9ca 2300 	strd	r2, r3, [sl]
 800c508:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c50c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c510:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c514:	e73a      	b.n	800c38c <__ieee754_rem_pio2+0x284>
 800c516:	bf00      	nop
 800c518:	41700000 	.word	0x41700000
 800c51c:	0800d428 	.word	0x0800d428

0800c520 <__ieee754_sqrt>:
 800c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	ec55 4b10 	vmov	r4, r5, d0
 800c528:	4e55      	ldr	r6, [pc, #340]	; (800c680 <__ieee754_sqrt+0x160>)
 800c52a:	43ae      	bics	r6, r5
 800c52c:	ee10 0a10 	vmov	r0, s0
 800c530:	ee10 3a10 	vmov	r3, s0
 800c534:	462a      	mov	r2, r5
 800c536:	4629      	mov	r1, r5
 800c538:	d110      	bne.n	800c55c <__ieee754_sqrt+0x3c>
 800c53a:	ee10 2a10 	vmov	r2, s0
 800c53e:	462b      	mov	r3, r5
 800c540:	f7f4 f85a 	bl	80005f8 <__aeabi_dmul>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f3 fe9e 	bl	800028c <__adddf3>
 800c550:	4604      	mov	r4, r0
 800c552:	460d      	mov	r5, r1
 800c554:	ec45 4b10 	vmov	d0, r4, r5
 800c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c55c:	2d00      	cmp	r5, #0
 800c55e:	dc10      	bgt.n	800c582 <__ieee754_sqrt+0x62>
 800c560:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c564:	4330      	orrs	r0, r6
 800c566:	d0f5      	beq.n	800c554 <__ieee754_sqrt+0x34>
 800c568:	b15d      	cbz	r5, 800c582 <__ieee754_sqrt+0x62>
 800c56a:	ee10 2a10 	vmov	r2, s0
 800c56e:	462b      	mov	r3, r5
 800c570:	ee10 0a10 	vmov	r0, s0
 800c574:	f7f3 fe88 	bl	8000288 <__aeabi_dsub>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	f7f4 f966 	bl	800084c <__aeabi_ddiv>
 800c580:	e7e6      	b.n	800c550 <__ieee754_sqrt+0x30>
 800c582:	1512      	asrs	r2, r2, #20
 800c584:	d074      	beq.n	800c670 <__ieee754_sqrt+0x150>
 800c586:	07d4      	lsls	r4, r2, #31
 800c588:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c58c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c594:	bf5e      	ittt	pl
 800c596:	0fda      	lsrpl	r2, r3, #31
 800c598:	005b      	lslpl	r3, r3, #1
 800c59a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c59e:	2400      	movs	r4, #0
 800c5a0:	0fda      	lsrs	r2, r3, #31
 800c5a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c5a6:	107f      	asrs	r7, r7, #1
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	2516      	movs	r5, #22
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c5b2:	1886      	adds	r6, r0, r2
 800c5b4:	428e      	cmp	r6, r1
 800c5b6:	bfde      	ittt	le
 800c5b8:	1b89      	suble	r1, r1, r6
 800c5ba:	18b0      	addle	r0, r6, r2
 800c5bc:	18a4      	addle	r4, r4, r2
 800c5be:	0049      	lsls	r1, r1, #1
 800c5c0:	3d01      	subs	r5, #1
 800c5c2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c5c6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c5ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c5ce:	d1f0      	bne.n	800c5b2 <__ieee754_sqrt+0x92>
 800c5d0:	462a      	mov	r2, r5
 800c5d2:	f04f 0e20 	mov.w	lr, #32
 800c5d6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c5da:	4281      	cmp	r1, r0
 800c5dc:	eb06 0c05 	add.w	ip, r6, r5
 800c5e0:	dc02      	bgt.n	800c5e8 <__ieee754_sqrt+0xc8>
 800c5e2:	d113      	bne.n	800c60c <__ieee754_sqrt+0xec>
 800c5e4:	459c      	cmp	ip, r3
 800c5e6:	d811      	bhi.n	800c60c <__ieee754_sqrt+0xec>
 800c5e8:	f1bc 0f00 	cmp.w	ip, #0
 800c5ec:	eb0c 0506 	add.w	r5, ip, r6
 800c5f0:	da43      	bge.n	800c67a <__ieee754_sqrt+0x15a>
 800c5f2:	2d00      	cmp	r5, #0
 800c5f4:	db41      	blt.n	800c67a <__ieee754_sqrt+0x15a>
 800c5f6:	f100 0801 	add.w	r8, r0, #1
 800c5fa:	1a09      	subs	r1, r1, r0
 800c5fc:	459c      	cmp	ip, r3
 800c5fe:	bf88      	it	hi
 800c600:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800c604:	eba3 030c 	sub.w	r3, r3, ip
 800c608:	4432      	add	r2, r6
 800c60a:	4640      	mov	r0, r8
 800c60c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c610:	f1be 0e01 	subs.w	lr, lr, #1
 800c614:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c618:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c61c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c620:	d1db      	bne.n	800c5da <__ieee754_sqrt+0xba>
 800c622:	430b      	orrs	r3, r1
 800c624:	d006      	beq.n	800c634 <__ieee754_sqrt+0x114>
 800c626:	1c50      	adds	r0, r2, #1
 800c628:	bf13      	iteet	ne
 800c62a:	3201      	addne	r2, #1
 800c62c:	3401      	addeq	r4, #1
 800c62e:	4672      	moveq	r2, lr
 800c630:	f022 0201 	bicne.w	r2, r2, #1
 800c634:	1063      	asrs	r3, r4, #1
 800c636:	0852      	lsrs	r2, r2, #1
 800c638:	07e1      	lsls	r1, r4, #31
 800c63a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c63e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c642:	bf48      	it	mi
 800c644:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c648:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c64c:	4614      	mov	r4, r2
 800c64e:	e781      	b.n	800c554 <__ieee754_sqrt+0x34>
 800c650:	0ad9      	lsrs	r1, r3, #11
 800c652:	3815      	subs	r0, #21
 800c654:	055b      	lsls	r3, r3, #21
 800c656:	2900      	cmp	r1, #0
 800c658:	d0fa      	beq.n	800c650 <__ieee754_sqrt+0x130>
 800c65a:	02cd      	lsls	r5, r1, #11
 800c65c:	d50a      	bpl.n	800c674 <__ieee754_sqrt+0x154>
 800c65e:	f1c2 0420 	rsb	r4, r2, #32
 800c662:	fa23 f404 	lsr.w	r4, r3, r4
 800c666:	1e55      	subs	r5, r2, #1
 800c668:	4093      	lsls	r3, r2
 800c66a:	4321      	orrs	r1, r4
 800c66c:	1b42      	subs	r2, r0, r5
 800c66e:	e78a      	b.n	800c586 <__ieee754_sqrt+0x66>
 800c670:	4610      	mov	r0, r2
 800c672:	e7f0      	b.n	800c656 <__ieee754_sqrt+0x136>
 800c674:	0049      	lsls	r1, r1, #1
 800c676:	3201      	adds	r2, #1
 800c678:	e7ef      	b.n	800c65a <__ieee754_sqrt+0x13a>
 800c67a:	4680      	mov	r8, r0
 800c67c:	e7bd      	b.n	800c5fa <__ieee754_sqrt+0xda>
 800c67e:	bf00      	nop
 800c680:	7ff00000 	.word	0x7ff00000
 800c684:	00000000 	.word	0x00000000

0800c688 <__kernel_cos>:
 800c688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	ec57 6b10 	vmov	r6, r7, d0
 800c690:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c694:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c698:	ed8d 1b00 	vstr	d1, [sp]
 800c69c:	da07      	bge.n	800c6ae <__kernel_cos+0x26>
 800c69e:	ee10 0a10 	vmov	r0, s0
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	f7f4 fa58 	bl	8000b58 <__aeabi_d2iz>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f000 8088 	beq.w	800c7be <__kernel_cos+0x136>
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	f7f3 ff9f 	bl	80005f8 <__aeabi_dmul>
 800c6ba:	4b51      	ldr	r3, [pc, #324]	; (800c800 <__kernel_cos+0x178>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	f7f3 ff99 	bl	80005f8 <__aeabi_dmul>
 800c6c6:	a340      	add	r3, pc, #256	; (adr r3, 800c7c8 <__kernel_cos+0x140>)
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	468b      	mov	fp, r1
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	f7f3 ff90 	bl	80005f8 <__aeabi_dmul>
 800c6d8:	a33d      	add	r3, pc, #244	; (adr r3, 800c7d0 <__kernel_cos+0x148>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f3 fdd5 	bl	800028c <__adddf3>
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	462b      	mov	r3, r5
 800c6e6:	f7f3 ff87 	bl	80005f8 <__aeabi_dmul>
 800c6ea:	a33b      	add	r3, pc, #236	; (adr r3, 800c7d8 <__kernel_cos+0x150>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 fdca 	bl	8000288 <__aeabi_dsub>
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	462b      	mov	r3, r5
 800c6f8:	f7f3 ff7e 	bl	80005f8 <__aeabi_dmul>
 800c6fc:	a338      	add	r3, pc, #224	; (adr r3, 800c7e0 <__kernel_cos+0x158>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 fdc3 	bl	800028c <__adddf3>
 800c706:	4622      	mov	r2, r4
 800c708:	462b      	mov	r3, r5
 800c70a:	f7f3 ff75 	bl	80005f8 <__aeabi_dmul>
 800c70e:	a336      	add	r3, pc, #216	; (adr r3, 800c7e8 <__kernel_cos+0x160>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	f7f3 fdb8 	bl	8000288 <__aeabi_dsub>
 800c718:	4622      	mov	r2, r4
 800c71a:	462b      	mov	r3, r5
 800c71c:	f7f3 ff6c 	bl	80005f8 <__aeabi_dmul>
 800c720:	a333      	add	r3, pc, #204	; (adr r3, 800c7f0 <__kernel_cos+0x168>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 fdb1 	bl	800028c <__adddf3>
 800c72a:	4622      	mov	r2, r4
 800c72c:	462b      	mov	r3, r5
 800c72e:	f7f3 ff63 	bl	80005f8 <__aeabi_dmul>
 800c732:	4622      	mov	r2, r4
 800c734:	462b      	mov	r3, r5
 800c736:	f7f3 ff5f 	bl	80005f8 <__aeabi_dmul>
 800c73a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c73e:	4604      	mov	r4, r0
 800c740:	460d      	mov	r5, r1
 800c742:	4630      	mov	r0, r6
 800c744:	4639      	mov	r1, r7
 800c746:	f7f3 ff57 	bl	80005f8 <__aeabi_dmul>
 800c74a:	460b      	mov	r3, r1
 800c74c:	4602      	mov	r2, r0
 800c74e:	4629      	mov	r1, r5
 800c750:	4620      	mov	r0, r4
 800c752:	f7f3 fd99 	bl	8000288 <__aeabi_dsub>
 800c756:	4b2b      	ldr	r3, [pc, #172]	; (800c804 <__kernel_cos+0x17c>)
 800c758:	4598      	cmp	r8, r3
 800c75a:	4606      	mov	r6, r0
 800c75c:	460f      	mov	r7, r1
 800c75e:	dc10      	bgt.n	800c782 <__kernel_cos+0xfa>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4650      	mov	r0, sl
 800c766:	4659      	mov	r1, fp
 800c768:	f7f3 fd8e 	bl	8000288 <__aeabi_dsub>
 800c76c:	460b      	mov	r3, r1
 800c76e:	4926      	ldr	r1, [pc, #152]	; (800c808 <__kernel_cos+0x180>)
 800c770:	4602      	mov	r2, r0
 800c772:	2000      	movs	r0, #0
 800c774:	f7f3 fd88 	bl	8000288 <__aeabi_dsub>
 800c778:	ec41 0b10 	vmov	d0, r0, r1
 800c77c:	b003      	add	sp, #12
 800c77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c782:	4b22      	ldr	r3, [pc, #136]	; (800c80c <__kernel_cos+0x184>)
 800c784:	4920      	ldr	r1, [pc, #128]	; (800c808 <__kernel_cos+0x180>)
 800c786:	4598      	cmp	r8, r3
 800c788:	bfcc      	ite	gt
 800c78a:	4d21      	ldrgt	r5, [pc, #132]	; (800c810 <__kernel_cos+0x188>)
 800c78c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c790:	2400      	movs	r4, #0
 800c792:	4622      	mov	r2, r4
 800c794:	462b      	mov	r3, r5
 800c796:	2000      	movs	r0, #0
 800c798:	f7f3 fd76 	bl	8000288 <__aeabi_dsub>
 800c79c:	4622      	mov	r2, r4
 800c79e:	4680      	mov	r8, r0
 800c7a0:	4689      	mov	r9, r1
 800c7a2:	462b      	mov	r3, r5
 800c7a4:	4650      	mov	r0, sl
 800c7a6:	4659      	mov	r1, fp
 800c7a8:	f7f3 fd6e 	bl	8000288 <__aeabi_dsub>
 800c7ac:	4632      	mov	r2, r6
 800c7ae:	463b      	mov	r3, r7
 800c7b0:	f7f3 fd6a 	bl	8000288 <__aeabi_dsub>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	e7da      	b.n	800c774 <__kernel_cos+0xec>
 800c7be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c7f8 <__kernel_cos+0x170>
 800c7c2:	e7db      	b.n	800c77c <__kernel_cos+0xf4>
 800c7c4:	f3af 8000 	nop.w
 800c7c8:	be8838d4 	.word	0xbe8838d4
 800c7cc:	bda8fae9 	.word	0xbda8fae9
 800c7d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c7d4:	3e21ee9e 	.word	0x3e21ee9e
 800c7d8:	809c52ad 	.word	0x809c52ad
 800c7dc:	3e927e4f 	.word	0x3e927e4f
 800c7e0:	19cb1590 	.word	0x19cb1590
 800c7e4:	3efa01a0 	.word	0x3efa01a0
 800c7e8:	16c15177 	.word	0x16c15177
 800c7ec:	3f56c16c 	.word	0x3f56c16c
 800c7f0:	5555554c 	.word	0x5555554c
 800c7f4:	3fa55555 	.word	0x3fa55555
 800c7f8:	00000000 	.word	0x00000000
 800c7fc:	3ff00000 	.word	0x3ff00000
 800c800:	3fe00000 	.word	0x3fe00000
 800c804:	3fd33332 	.word	0x3fd33332
 800c808:	3ff00000 	.word	0x3ff00000
 800c80c:	3fe90000 	.word	0x3fe90000
 800c810:	3fd20000 	.word	0x3fd20000
 800c814:	00000000 	.word	0x00000000

0800c818 <__kernel_rem_pio2>:
 800c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	ed2d 8b02 	vpush	{d8}
 800c820:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c824:	f112 0f14 	cmn.w	r2, #20
 800c828:	9308      	str	r3, [sp, #32]
 800c82a:	9101      	str	r1, [sp, #4]
 800c82c:	4bc4      	ldr	r3, [pc, #784]	; (800cb40 <__kernel_rem_pio2+0x328>)
 800c82e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c830:	900b      	str	r0, [sp, #44]	; 0x2c
 800c832:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c836:	9302      	str	r3, [sp, #8]
 800c838:	9b08      	ldr	r3, [sp, #32]
 800c83a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c83e:	bfa8      	it	ge
 800c840:	1ed4      	subge	r4, r2, #3
 800c842:	9306      	str	r3, [sp, #24]
 800c844:	bfb2      	itee	lt
 800c846:	2400      	movlt	r4, #0
 800c848:	2318      	movge	r3, #24
 800c84a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c84e:	f06f 0317 	mvn.w	r3, #23
 800c852:	fb04 3303 	mla	r3, r4, r3, r3
 800c856:	eb03 0a02 	add.w	sl, r3, r2
 800c85a:	9b02      	ldr	r3, [sp, #8]
 800c85c:	9a06      	ldr	r2, [sp, #24]
 800c85e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800cb30 <__kernel_rem_pio2+0x318>
 800c862:	eb03 0802 	add.w	r8, r3, r2
 800c866:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c868:	1aa7      	subs	r7, r4, r2
 800c86a:	ae22      	add	r6, sp, #136	; 0x88
 800c86c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c870:	2500      	movs	r5, #0
 800c872:	4545      	cmp	r5, r8
 800c874:	dd13      	ble.n	800c89e <__kernel_rem_pio2+0x86>
 800c876:	9b08      	ldr	r3, [sp, #32]
 800c878:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800cb30 <__kernel_rem_pio2+0x318>
 800c87c:	aa22      	add	r2, sp, #136	; 0x88
 800c87e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c882:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c886:	f04f 0800 	mov.w	r8, #0
 800c88a:	9b02      	ldr	r3, [sp, #8]
 800c88c:	4598      	cmp	r8, r3
 800c88e:	dc2f      	bgt.n	800c8f0 <__kernel_rem_pio2+0xd8>
 800c890:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c894:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c898:	462f      	mov	r7, r5
 800c89a:	2600      	movs	r6, #0
 800c89c:	e01b      	b.n	800c8d6 <__kernel_rem_pio2+0xbe>
 800c89e:	42ef      	cmn	r7, r5
 800c8a0:	d407      	bmi.n	800c8b2 <__kernel_rem_pio2+0x9a>
 800c8a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c8a6:	f7f3 fe3d 	bl	8000524 <__aeabi_i2d>
 800c8aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c8ae:	3501      	adds	r5, #1
 800c8b0:	e7df      	b.n	800c872 <__kernel_rem_pio2+0x5a>
 800c8b2:	ec51 0b18 	vmov	r0, r1, d8
 800c8b6:	e7f8      	b.n	800c8aa <__kernel_rem_pio2+0x92>
 800c8b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c8c0:	f7f3 fe9a 	bl	80005f8 <__aeabi_dmul>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8cc:	f7f3 fcde 	bl	800028c <__adddf3>
 800c8d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8d4:	3601      	adds	r6, #1
 800c8d6:	9b06      	ldr	r3, [sp, #24]
 800c8d8:	429e      	cmp	r6, r3
 800c8da:	f1a7 0708 	sub.w	r7, r7, #8
 800c8de:	ddeb      	ble.n	800c8b8 <__kernel_rem_pio2+0xa0>
 800c8e0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c8e4:	f108 0801 	add.w	r8, r8, #1
 800c8e8:	ecab 7b02 	vstmia	fp!, {d7}
 800c8ec:	3508      	adds	r5, #8
 800c8ee:	e7cc      	b.n	800c88a <__kernel_rem_pio2+0x72>
 800c8f0:	9b02      	ldr	r3, [sp, #8]
 800c8f2:	aa0e      	add	r2, sp, #56	; 0x38
 800c8f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8f8:	930d      	str	r3, [sp, #52]	; 0x34
 800c8fa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c8fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c900:	9c02      	ldr	r4, [sp, #8]
 800c902:	930c      	str	r3, [sp, #48]	; 0x30
 800c904:	00e3      	lsls	r3, r4, #3
 800c906:	930a      	str	r3, [sp, #40]	; 0x28
 800c908:	ab9a      	add	r3, sp, #616	; 0x268
 800c90a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c90e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c912:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c916:	ab72      	add	r3, sp, #456	; 0x1c8
 800c918:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c91c:	46c3      	mov	fp, r8
 800c91e:	46a1      	mov	r9, r4
 800c920:	f1b9 0f00 	cmp.w	r9, #0
 800c924:	f1a5 0508 	sub.w	r5, r5, #8
 800c928:	dc77      	bgt.n	800ca1a <__kernel_rem_pio2+0x202>
 800c92a:	ec47 6b10 	vmov	d0, r6, r7
 800c92e:	4650      	mov	r0, sl
 800c930:	f000 fc4e 	bl	800d1d0 <scalbn>
 800c934:	ec57 6b10 	vmov	r6, r7, d0
 800c938:	2200      	movs	r2, #0
 800c93a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c93e:	ee10 0a10 	vmov	r0, s0
 800c942:	4639      	mov	r1, r7
 800c944:	f7f3 fe58 	bl	80005f8 <__aeabi_dmul>
 800c948:	ec41 0b10 	vmov	d0, r0, r1
 800c94c:	f000 fbb8 	bl	800d0c0 <floor>
 800c950:	4b7c      	ldr	r3, [pc, #496]	; (800cb44 <__kernel_rem_pio2+0x32c>)
 800c952:	ec51 0b10 	vmov	r0, r1, d0
 800c956:	2200      	movs	r2, #0
 800c958:	f7f3 fe4e 	bl	80005f8 <__aeabi_dmul>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4630      	mov	r0, r6
 800c962:	4639      	mov	r1, r7
 800c964:	f7f3 fc90 	bl	8000288 <__aeabi_dsub>
 800c968:	460f      	mov	r7, r1
 800c96a:	4606      	mov	r6, r0
 800c96c:	f7f4 f8f4 	bl	8000b58 <__aeabi_d2iz>
 800c970:	9004      	str	r0, [sp, #16]
 800c972:	f7f3 fdd7 	bl	8000524 <__aeabi_i2d>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	4630      	mov	r0, r6
 800c97c:	4639      	mov	r1, r7
 800c97e:	f7f3 fc83 	bl	8000288 <__aeabi_dsub>
 800c982:	f1ba 0f00 	cmp.w	sl, #0
 800c986:	4606      	mov	r6, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	dd6d      	ble.n	800ca68 <__kernel_rem_pio2+0x250>
 800c98c:	1e62      	subs	r2, r4, #1
 800c98e:	ab0e      	add	r3, sp, #56	; 0x38
 800c990:	9d04      	ldr	r5, [sp, #16]
 800c992:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c996:	f1ca 0118 	rsb	r1, sl, #24
 800c99a:	fa40 f301 	asr.w	r3, r0, r1
 800c99e:	441d      	add	r5, r3
 800c9a0:	408b      	lsls	r3, r1
 800c9a2:	1ac0      	subs	r0, r0, r3
 800c9a4:	ab0e      	add	r3, sp, #56	; 0x38
 800c9a6:	9504      	str	r5, [sp, #16]
 800c9a8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c9ac:	f1ca 0317 	rsb	r3, sl, #23
 800c9b0:	fa40 fb03 	asr.w	fp, r0, r3
 800c9b4:	f1bb 0f00 	cmp.w	fp, #0
 800c9b8:	dd65      	ble.n	800ca86 <__kernel_rem_pio2+0x26e>
 800c9ba:	9b04      	ldr	r3, [sp, #16]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	3301      	adds	r3, #1
 800c9c0:	9304      	str	r3, [sp, #16]
 800c9c2:	4615      	mov	r5, r2
 800c9c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c9c8:	4294      	cmp	r4, r2
 800c9ca:	f300 809c 	bgt.w	800cb06 <__kernel_rem_pio2+0x2ee>
 800c9ce:	f1ba 0f00 	cmp.w	sl, #0
 800c9d2:	dd07      	ble.n	800c9e4 <__kernel_rem_pio2+0x1cc>
 800c9d4:	f1ba 0f01 	cmp.w	sl, #1
 800c9d8:	f000 80c0 	beq.w	800cb5c <__kernel_rem_pio2+0x344>
 800c9dc:	f1ba 0f02 	cmp.w	sl, #2
 800c9e0:	f000 80c6 	beq.w	800cb70 <__kernel_rem_pio2+0x358>
 800c9e4:	f1bb 0f02 	cmp.w	fp, #2
 800c9e8:	d14d      	bne.n	800ca86 <__kernel_rem_pio2+0x26e>
 800c9ea:	4632      	mov	r2, r6
 800c9ec:	463b      	mov	r3, r7
 800c9ee:	4956      	ldr	r1, [pc, #344]	; (800cb48 <__kernel_rem_pio2+0x330>)
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	f7f3 fc49 	bl	8000288 <__aeabi_dsub>
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	460f      	mov	r7, r1
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	d043      	beq.n	800ca86 <__kernel_rem_pio2+0x26e>
 800c9fe:	4650      	mov	r0, sl
 800ca00:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cb38 <__kernel_rem_pio2+0x320>
 800ca04:	f000 fbe4 	bl	800d1d0 <scalbn>
 800ca08:	4630      	mov	r0, r6
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	ec53 2b10 	vmov	r2, r3, d0
 800ca10:	f7f3 fc3a 	bl	8000288 <__aeabi_dsub>
 800ca14:	4606      	mov	r6, r0
 800ca16:	460f      	mov	r7, r1
 800ca18:	e035      	b.n	800ca86 <__kernel_rem_pio2+0x26e>
 800ca1a:	4b4c      	ldr	r3, [pc, #304]	; (800cb4c <__kernel_rem_pio2+0x334>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	f7f3 fde9 	bl	80005f8 <__aeabi_dmul>
 800ca26:	f7f4 f897 	bl	8000b58 <__aeabi_d2iz>
 800ca2a:	f7f3 fd7b 	bl	8000524 <__aeabi_i2d>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	ec43 2b18 	vmov	d8, r2, r3
 800ca36:	4b46      	ldr	r3, [pc, #280]	; (800cb50 <__kernel_rem_pio2+0x338>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f7f3 fddd 	bl	80005f8 <__aeabi_dmul>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f7f3 fc1f 	bl	8000288 <__aeabi_dsub>
 800ca4a:	f7f4 f885 	bl	8000b58 <__aeabi_d2iz>
 800ca4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca52:	f84b 0b04 	str.w	r0, [fp], #4
 800ca56:	ec51 0b18 	vmov	r0, r1, d8
 800ca5a:	f7f3 fc17 	bl	800028c <__adddf3>
 800ca5e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ca62:	4606      	mov	r6, r0
 800ca64:	460f      	mov	r7, r1
 800ca66:	e75b      	b.n	800c920 <__kernel_rem_pio2+0x108>
 800ca68:	d106      	bne.n	800ca78 <__kernel_rem_pio2+0x260>
 800ca6a:	1e63      	subs	r3, r4, #1
 800ca6c:	aa0e      	add	r2, sp, #56	; 0x38
 800ca6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ca72:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ca76:	e79d      	b.n	800c9b4 <__kernel_rem_pio2+0x19c>
 800ca78:	4b36      	ldr	r3, [pc, #216]	; (800cb54 <__kernel_rem_pio2+0x33c>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f7f4 f842 	bl	8000b04 <__aeabi_dcmpge>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d13d      	bne.n	800cb00 <__kernel_rem_pio2+0x2e8>
 800ca84:	4683      	mov	fp, r0
 800ca86:	2200      	movs	r2, #0
 800ca88:	2300      	movs	r3, #0
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	f7f4 f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	f000 80c0 	beq.w	800cc18 <__kernel_rem_pio2+0x400>
 800ca98:	1e65      	subs	r5, r4, #1
 800ca9a:	462b      	mov	r3, r5
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	9902      	ldr	r1, [sp, #8]
 800caa0:	428b      	cmp	r3, r1
 800caa2:	da6c      	bge.n	800cb7e <__kernel_rem_pio2+0x366>
 800caa4:	2a00      	cmp	r2, #0
 800caa6:	f000 8089 	beq.w	800cbbc <__kernel_rem_pio2+0x3a4>
 800caaa:	ab0e      	add	r3, sp, #56	; 0x38
 800caac:	f1aa 0a18 	sub.w	sl, sl, #24
 800cab0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 80ad 	beq.w	800cc14 <__kernel_rem_pio2+0x3fc>
 800caba:	4650      	mov	r0, sl
 800cabc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cb38 <__kernel_rem_pio2+0x320>
 800cac0:	f000 fb86 	bl	800d1d0 <scalbn>
 800cac4:	ab9a      	add	r3, sp, #616	; 0x268
 800cac6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800caca:	ec57 6b10 	vmov	r6, r7, d0
 800cace:	00ec      	lsls	r4, r5, #3
 800cad0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800cad4:	46aa      	mov	sl, r5
 800cad6:	f1ba 0f00 	cmp.w	sl, #0
 800cada:	f280 80d6 	bge.w	800cc8a <__kernel_rem_pio2+0x472>
 800cade:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800cb30 <__kernel_rem_pio2+0x318>
 800cae2:	462e      	mov	r6, r5
 800cae4:	2e00      	cmp	r6, #0
 800cae6:	f2c0 8104 	blt.w	800ccf2 <__kernel_rem_pio2+0x4da>
 800caea:	ab72      	add	r3, sp, #456	; 0x1c8
 800caec:	ed8d 8b06 	vstr	d8, [sp, #24]
 800caf0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800cb58 <__kernel_rem_pio2+0x340>
 800caf4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800caf8:	f04f 0800 	mov.w	r8, #0
 800cafc:	1baf      	subs	r7, r5, r6
 800cafe:	e0ea      	b.n	800ccd6 <__kernel_rem_pio2+0x4be>
 800cb00:	f04f 0b02 	mov.w	fp, #2
 800cb04:	e759      	b.n	800c9ba <__kernel_rem_pio2+0x1a2>
 800cb06:	f8d8 3000 	ldr.w	r3, [r8]
 800cb0a:	b955      	cbnz	r5, 800cb22 <__kernel_rem_pio2+0x30a>
 800cb0c:	b123      	cbz	r3, 800cb18 <__kernel_rem_pio2+0x300>
 800cb0e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cb12:	f8c8 3000 	str.w	r3, [r8]
 800cb16:	2301      	movs	r3, #1
 800cb18:	3201      	adds	r2, #1
 800cb1a:	f108 0804 	add.w	r8, r8, #4
 800cb1e:	461d      	mov	r5, r3
 800cb20:	e752      	b.n	800c9c8 <__kernel_rem_pio2+0x1b0>
 800cb22:	1acb      	subs	r3, r1, r3
 800cb24:	f8c8 3000 	str.w	r3, [r8]
 800cb28:	462b      	mov	r3, r5
 800cb2a:	e7f5      	b.n	800cb18 <__kernel_rem_pio2+0x300>
 800cb2c:	f3af 8000 	nop.w
	...
 800cb3c:	3ff00000 	.word	0x3ff00000
 800cb40:	0800d570 	.word	0x0800d570
 800cb44:	40200000 	.word	0x40200000
 800cb48:	3ff00000 	.word	0x3ff00000
 800cb4c:	3e700000 	.word	0x3e700000
 800cb50:	41700000 	.word	0x41700000
 800cb54:	3fe00000 	.word	0x3fe00000
 800cb58:	0800d530 	.word	0x0800d530
 800cb5c:	1e62      	subs	r2, r4, #1
 800cb5e:	ab0e      	add	r3, sp, #56	; 0x38
 800cb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cb68:	a90e      	add	r1, sp, #56	; 0x38
 800cb6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cb6e:	e739      	b.n	800c9e4 <__kernel_rem_pio2+0x1cc>
 800cb70:	1e62      	subs	r2, r4, #1
 800cb72:	ab0e      	add	r3, sp, #56	; 0x38
 800cb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cb7c:	e7f4      	b.n	800cb68 <__kernel_rem_pio2+0x350>
 800cb7e:	a90e      	add	r1, sp, #56	; 0x38
 800cb80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	430a      	orrs	r2, r1
 800cb88:	e789      	b.n	800ca9e <__kernel_rem_pio2+0x286>
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cb90:	2900      	cmp	r1, #0
 800cb92:	d0fa      	beq.n	800cb8a <__kernel_rem_pio2+0x372>
 800cb94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb96:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cb9a:	446a      	add	r2, sp
 800cb9c:	3a98      	subs	r2, #152	; 0x98
 800cb9e:	920a      	str	r2, [sp, #40]	; 0x28
 800cba0:	9a08      	ldr	r2, [sp, #32]
 800cba2:	18e3      	adds	r3, r4, r3
 800cba4:	18a5      	adds	r5, r4, r2
 800cba6:	aa22      	add	r2, sp, #136	; 0x88
 800cba8:	f104 0801 	add.w	r8, r4, #1
 800cbac:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	9b04      	ldr	r3, [sp, #16]
 800cbb4:	4543      	cmp	r3, r8
 800cbb6:	da04      	bge.n	800cbc2 <__kernel_rem_pio2+0x3aa>
 800cbb8:	461c      	mov	r4, r3
 800cbba:	e6a3      	b.n	800c904 <__kernel_rem_pio2+0xec>
 800cbbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e7e4      	b.n	800cb8c <__kernel_rem_pio2+0x374>
 800cbc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbc4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cbc8:	f7f3 fcac 	bl	8000524 <__aeabi_i2d>
 800cbcc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cbd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd2:	46ab      	mov	fp, r5
 800cbd4:	461c      	mov	r4, r3
 800cbd6:	f04f 0900 	mov.w	r9, #0
 800cbda:	2600      	movs	r6, #0
 800cbdc:	2700      	movs	r7, #0
 800cbde:	9b06      	ldr	r3, [sp, #24]
 800cbe0:	4599      	cmp	r9, r3
 800cbe2:	dd06      	ble.n	800cbf2 <__kernel_rem_pio2+0x3da>
 800cbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cbea:	f108 0801 	add.w	r8, r8, #1
 800cbee:	930a      	str	r3, [sp, #40]	; 0x28
 800cbf0:	e7df      	b.n	800cbb2 <__kernel_rem_pio2+0x39a>
 800cbf2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cbf6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cbfa:	f7f3 fcfd 	bl	80005f8 <__aeabi_dmul>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4630      	mov	r0, r6
 800cc04:	4639      	mov	r1, r7
 800cc06:	f7f3 fb41 	bl	800028c <__adddf3>
 800cc0a:	f109 0901 	add.w	r9, r9, #1
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460f      	mov	r7, r1
 800cc12:	e7e4      	b.n	800cbde <__kernel_rem_pio2+0x3c6>
 800cc14:	3d01      	subs	r5, #1
 800cc16:	e748      	b.n	800caaa <__kernel_rem_pio2+0x292>
 800cc18:	ec47 6b10 	vmov	d0, r6, r7
 800cc1c:	f1ca 0000 	rsb	r0, sl, #0
 800cc20:	f000 fad6 	bl	800d1d0 <scalbn>
 800cc24:	ec57 6b10 	vmov	r6, r7, d0
 800cc28:	4ba0      	ldr	r3, [pc, #640]	; (800ceac <__kernel_rem_pio2+0x694>)
 800cc2a:	ee10 0a10 	vmov	r0, s0
 800cc2e:	2200      	movs	r2, #0
 800cc30:	4639      	mov	r1, r7
 800cc32:	f7f3 ff67 	bl	8000b04 <__aeabi_dcmpge>
 800cc36:	b1f8      	cbz	r0, 800cc78 <__kernel_rem_pio2+0x460>
 800cc38:	4b9d      	ldr	r3, [pc, #628]	; (800ceb0 <__kernel_rem_pio2+0x698>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	4639      	mov	r1, r7
 800cc40:	f7f3 fcda 	bl	80005f8 <__aeabi_dmul>
 800cc44:	f7f3 ff88 	bl	8000b58 <__aeabi_d2iz>
 800cc48:	4680      	mov	r8, r0
 800cc4a:	f7f3 fc6b 	bl	8000524 <__aeabi_i2d>
 800cc4e:	4b97      	ldr	r3, [pc, #604]	; (800ceac <__kernel_rem_pio2+0x694>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	f7f3 fcd1 	bl	80005f8 <__aeabi_dmul>
 800cc56:	460b      	mov	r3, r1
 800cc58:	4602      	mov	r2, r0
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7f3 fb13 	bl	8000288 <__aeabi_dsub>
 800cc62:	f7f3 ff79 	bl	8000b58 <__aeabi_d2iz>
 800cc66:	1c65      	adds	r5, r4, #1
 800cc68:	ab0e      	add	r3, sp, #56	; 0x38
 800cc6a:	f10a 0a18 	add.w	sl, sl, #24
 800cc6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cc72:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cc76:	e720      	b.n	800caba <__kernel_rem_pio2+0x2a2>
 800cc78:	4630      	mov	r0, r6
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	f7f3 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800cc80:	ab0e      	add	r3, sp, #56	; 0x38
 800cc82:	4625      	mov	r5, r4
 800cc84:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cc88:	e717      	b.n	800caba <__kernel_rem_pio2+0x2a2>
 800cc8a:	ab0e      	add	r3, sp, #56	; 0x38
 800cc8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cc90:	f7f3 fc48 	bl	8000524 <__aeabi_i2d>
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	f7f3 fcae 	bl	80005f8 <__aeabi_dmul>
 800cc9c:	4b84      	ldr	r3, [pc, #528]	; (800ceb0 <__kernel_rem_pio2+0x698>)
 800cc9e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cca2:	2200      	movs	r2, #0
 800cca4:	4630      	mov	r0, r6
 800cca6:	4639      	mov	r1, r7
 800cca8:	f7f3 fca6 	bl	80005f8 <__aeabi_dmul>
 800ccac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ccb0:	4606      	mov	r6, r0
 800ccb2:	460f      	mov	r7, r1
 800ccb4:	e70f      	b.n	800cad6 <__kernel_rem_pio2+0x2be>
 800ccb6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ccba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ccbe:	f7f3 fc9b 	bl	80005f8 <__aeabi_dmul>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccca:	f7f3 fadf 	bl	800028c <__adddf3>
 800ccce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ccd2:	f108 0801 	add.w	r8, r8, #1
 800ccd6:	9b02      	ldr	r3, [sp, #8]
 800ccd8:	4598      	cmp	r8, r3
 800ccda:	dc01      	bgt.n	800cce0 <__kernel_rem_pio2+0x4c8>
 800ccdc:	45b8      	cmp	r8, r7
 800ccde:	ddea      	ble.n	800ccb6 <__kernel_rem_pio2+0x49e>
 800cce0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800cce4:	ab4a      	add	r3, sp, #296	; 0x128
 800cce6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ccea:	ed87 7b00 	vstr	d7, [r7]
 800ccee:	3e01      	subs	r6, #1
 800ccf0:	e6f8      	b.n	800cae4 <__kernel_rem_pio2+0x2cc>
 800ccf2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	dc0b      	bgt.n	800cd10 <__kernel_rem_pio2+0x4f8>
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	dc35      	bgt.n	800cd68 <__kernel_rem_pio2+0x550>
 800ccfc:	d059      	beq.n	800cdb2 <__kernel_rem_pio2+0x59a>
 800ccfe:	9b04      	ldr	r3, [sp, #16]
 800cd00:	f003 0007 	and.w	r0, r3, #7
 800cd04:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cd08:	ecbd 8b02 	vpop	{d8}
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d1f3      	bne.n	800ccfe <__kernel_rem_pio2+0x4e6>
 800cd16:	ab4a      	add	r3, sp, #296	; 0x128
 800cd18:	4423      	add	r3, r4
 800cd1a:	9306      	str	r3, [sp, #24]
 800cd1c:	461c      	mov	r4, r3
 800cd1e:	469a      	mov	sl, r3
 800cd20:	9502      	str	r5, [sp, #8]
 800cd22:	9b02      	ldr	r3, [sp, #8]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f1aa 0a08 	sub.w	sl, sl, #8
 800cd2a:	dc6b      	bgt.n	800ce04 <__kernel_rem_pio2+0x5ec>
 800cd2c:	46aa      	mov	sl, r5
 800cd2e:	f1ba 0f01 	cmp.w	sl, #1
 800cd32:	f1a4 0408 	sub.w	r4, r4, #8
 800cd36:	f300 8085 	bgt.w	800ce44 <__kernel_rem_pio2+0x62c>
 800cd3a:	9c06      	ldr	r4, [sp, #24]
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	3408      	adds	r4, #8
 800cd40:	2100      	movs	r1, #0
 800cd42:	2d01      	cmp	r5, #1
 800cd44:	f300 809d 	bgt.w	800ce82 <__kernel_rem_pio2+0x66a>
 800cd48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cd4c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800cd50:	f1bb 0f00 	cmp.w	fp, #0
 800cd54:	f040 809b 	bne.w	800ce8e <__kernel_rem_pio2+0x676>
 800cd58:	9b01      	ldr	r3, [sp, #4]
 800cd5a:	e9c3 5600 	strd	r5, r6, [r3]
 800cd5e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cd62:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cd66:	e7ca      	b.n	800ccfe <__kernel_rem_pio2+0x4e6>
 800cd68:	3408      	adds	r4, #8
 800cd6a:	ab4a      	add	r3, sp, #296	; 0x128
 800cd6c:	441c      	add	r4, r3
 800cd6e:	462e      	mov	r6, r5
 800cd70:	2000      	movs	r0, #0
 800cd72:	2100      	movs	r1, #0
 800cd74:	2e00      	cmp	r6, #0
 800cd76:	da36      	bge.n	800cde6 <__kernel_rem_pio2+0x5ce>
 800cd78:	f1bb 0f00 	cmp.w	fp, #0
 800cd7c:	d039      	beq.n	800cdf2 <__kernel_rem_pio2+0x5da>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd84:	9c01      	ldr	r4, [sp, #4]
 800cd86:	e9c4 2300 	strd	r2, r3, [r4]
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cd92:	f7f3 fa79 	bl	8000288 <__aeabi_dsub>
 800cd96:	ae4c      	add	r6, sp, #304	; 0x130
 800cd98:	2401      	movs	r4, #1
 800cd9a:	42a5      	cmp	r5, r4
 800cd9c:	da2c      	bge.n	800cdf8 <__kernel_rem_pio2+0x5e0>
 800cd9e:	f1bb 0f00 	cmp.w	fp, #0
 800cda2:	d002      	beq.n	800cdaa <__kernel_rem_pio2+0x592>
 800cda4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cda8:	4619      	mov	r1, r3
 800cdaa:	9b01      	ldr	r3, [sp, #4]
 800cdac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cdb0:	e7a5      	b.n	800ccfe <__kernel_rem_pio2+0x4e6>
 800cdb2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800cdb6:	eb0d 0403 	add.w	r4, sp, r3
 800cdba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	da09      	bge.n	800cdda <__kernel_rem_pio2+0x5c2>
 800cdc6:	f1bb 0f00 	cmp.w	fp, #0
 800cdca:	d002      	beq.n	800cdd2 <__kernel_rem_pio2+0x5ba>
 800cdcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	9b01      	ldr	r3, [sp, #4]
 800cdd4:	e9c3 0100 	strd	r0, r1, [r3]
 800cdd8:	e791      	b.n	800ccfe <__kernel_rem_pio2+0x4e6>
 800cdda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cdde:	f7f3 fa55 	bl	800028c <__adddf3>
 800cde2:	3d01      	subs	r5, #1
 800cde4:	e7ed      	b.n	800cdc2 <__kernel_rem_pio2+0x5aa>
 800cde6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cdea:	f7f3 fa4f 	bl	800028c <__adddf3>
 800cdee:	3e01      	subs	r6, #1
 800cdf0:	e7c0      	b.n	800cd74 <__kernel_rem_pio2+0x55c>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	e7c5      	b.n	800cd84 <__kernel_rem_pio2+0x56c>
 800cdf8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cdfc:	f7f3 fa46 	bl	800028c <__adddf3>
 800ce00:	3401      	adds	r4, #1
 800ce02:	e7ca      	b.n	800cd9a <__kernel_rem_pio2+0x582>
 800ce04:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ce0c:	9b02      	ldr	r3, [sp, #8]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	9302      	str	r3, [sp, #8]
 800ce12:	4632      	mov	r2, r6
 800ce14:	463b      	mov	r3, r7
 800ce16:	4640      	mov	r0, r8
 800ce18:	4649      	mov	r1, r9
 800ce1a:	f7f3 fa37 	bl	800028c <__adddf3>
 800ce1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4640      	mov	r0, r8
 800ce28:	4649      	mov	r1, r9
 800ce2a:	f7f3 fa2d 	bl	8000288 <__aeabi_dsub>
 800ce2e:	4632      	mov	r2, r6
 800ce30:	463b      	mov	r3, r7
 800ce32:	f7f3 fa2b 	bl	800028c <__adddf3>
 800ce36:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ce3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce3e:	ed8a 7b00 	vstr	d7, [sl]
 800ce42:	e76e      	b.n	800cd22 <__kernel_rem_pio2+0x50a>
 800ce44:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ce48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4632      	mov	r2, r6
 800ce50:	463b      	mov	r3, r7
 800ce52:	4649      	mov	r1, r9
 800ce54:	f7f3 fa1a 	bl	800028c <__adddf3>
 800ce58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	460b      	mov	r3, r1
 800ce60:	4640      	mov	r0, r8
 800ce62:	4649      	mov	r1, r9
 800ce64:	f7f3 fa10 	bl	8000288 <__aeabi_dsub>
 800ce68:	4632      	mov	r2, r6
 800ce6a:	463b      	mov	r3, r7
 800ce6c:	f7f3 fa0e 	bl	800028c <__adddf3>
 800ce70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce78:	ed84 7b00 	vstr	d7, [r4]
 800ce7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ce80:	e755      	b.n	800cd2e <__kernel_rem_pio2+0x516>
 800ce82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ce86:	f7f3 fa01 	bl	800028c <__adddf3>
 800ce8a:	3d01      	subs	r5, #1
 800ce8c:	e759      	b.n	800cd42 <__kernel_rem_pio2+0x52a>
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	9a01      	ldr	r2, [sp, #4]
 800ce92:	601d      	str	r5, [r3, #0]
 800ce94:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ce98:	605c      	str	r4, [r3, #4]
 800ce9a:	609f      	str	r7, [r3, #8]
 800ce9c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cea0:	60d3      	str	r3, [r2, #12]
 800cea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cea6:	6110      	str	r0, [r2, #16]
 800cea8:	6153      	str	r3, [r2, #20]
 800ceaa:	e728      	b.n	800ccfe <__kernel_rem_pio2+0x4e6>
 800ceac:	41700000 	.word	0x41700000
 800ceb0:	3e700000 	.word	0x3e700000
 800ceb4:	00000000 	.word	0x00000000

0800ceb8 <__kernel_sin>:
 800ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	ed2d 8b04 	vpush	{d8-d9}
 800cec0:	eeb0 8a41 	vmov.f32	s16, s2
 800cec4:	eef0 8a61 	vmov.f32	s17, s3
 800cec8:	ec55 4b10 	vmov	r4, r5, d0
 800cecc:	b083      	sub	sp, #12
 800cece:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ced2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ced6:	9001      	str	r0, [sp, #4]
 800ced8:	da06      	bge.n	800cee8 <__kernel_sin+0x30>
 800ceda:	ee10 0a10 	vmov	r0, s0
 800cede:	4629      	mov	r1, r5
 800cee0:	f7f3 fe3a 	bl	8000b58 <__aeabi_d2iz>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d051      	beq.n	800cf8c <__kernel_sin+0xd4>
 800cee8:	4622      	mov	r2, r4
 800ceea:	462b      	mov	r3, r5
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	f7f3 fb82 	bl	80005f8 <__aeabi_dmul>
 800cef4:	4682      	mov	sl, r0
 800cef6:	468b      	mov	fp, r1
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4620      	mov	r0, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	f7f3 fb7a 	bl	80005f8 <__aeabi_dmul>
 800cf04:	a341      	add	r3, pc, #260	; (adr r3, 800d00c <__kernel_sin+0x154>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	4680      	mov	r8, r0
 800cf0c:	4689      	mov	r9, r1
 800cf0e:	4650      	mov	r0, sl
 800cf10:	4659      	mov	r1, fp
 800cf12:	f7f3 fb71 	bl	80005f8 <__aeabi_dmul>
 800cf16:	a33f      	add	r3, pc, #252	; (adr r3, 800d014 <__kernel_sin+0x15c>)
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	f7f3 f9b4 	bl	8000288 <__aeabi_dsub>
 800cf20:	4652      	mov	r2, sl
 800cf22:	465b      	mov	r3, fp
 800cf24:	f7f3 fb68 	bl	80005f8 <__aeabi_dmul>
 800cf28:	a33c      	add	r3, pc, #240	; (adr r3, 800d01c <__kernel_sin+0x164>)
 800cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2e:	f7f3 f9ad 	bl	800028c <__adddf3>
 800cf32:	4652      	mov	r2, sl
 800cf34:	465b      	mov	r3, fp
 800cf36:	f7f3 fb5f 	bl	80005f8 <__aeabi_dmul>
 800cf3a:	a33a      	add	r3, pc, #232	; (adr r3, 800d024 <__kernel_sin+0x16c>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	f7f3 f9a2 	bl	8000288 <__aeabi_dsub>
 800cf44:	4652      	mov	r2, sl
 800cf46:	465b      	mov	r3, fp
 800cf48:	f7f3 fb56 	bl	80005f8 <__aeabi_dmul>
 800cf4c:	a337      	add	r3, pc, #220	; (adr r3, 800d02c <__kernel_sin+0x174>)
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	f7f3 f99b 	bl	800028c <__adddf3>
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	4606      	mov	r6, r0
 800cf5a:	460f      	mov	r7, r1
 800cf5c:	b9eb      	cbnz	r3, 800cf9a <__kernel_sin+0xe2>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	4650      	mov	r0, sl
 800cf64:	4659      	mov	r1, fp
 800cf66:	f7f3 fb47 	bl	80005f8 <__aeabi_dmul>
 800cf6a:	a325      	add	r3, pc, #148	; (adr r3, 800d000 <__kernel_sin+0x148>)
 800cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf70:	f7f3 f98a 	bl	8000288 <__aeabi_dsub>
 800cf74:	4642      	mov	r2, r8
 800cf76:	464b      	mov	r3, r9
 800cf78:	f7f3 fb3e 	bl	80005f8 <__aeabi_dmul>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4620      	mov	r0, r4
 800cf82:	4629      	mov	r1, r5
 800cf84:	f7f3 f982 	bl	800028c <__adddf3>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	460d      	mov	r5, r1
 800cf8c:	ec45 4b10 	vmov	d0, r4, r5
 800cf90:	b003      	add	sp, #12
 800cf92:	ecbd 8b04 	vpop	{d8-d9}
 800cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9a:	4b1b      	ldr	r3, [pc, #108]	; (800d008 <__kernel_sin+0x150>)
 800cf9c:	ec51 0b18 	vmov	r0, r1, d8
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f7f3 fb29 	bl	80005f8 <__aeabi_dmul>
 800cfa6:	4632      	mov	r2, r6
 800cfa8:	ec41 0b19 	vmov	d9, r0, r1
 800cfac:	463b      	mov	r3, r7
 800cfae:	4640      	mov	r0, r8
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	f7f3 fb21 	bl	80005f8 <__aeabi_dmul>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	ec51 0b19 	vmov	r0, r1, d9
 800cfbe:	f7f3 f963 	bl	8000288 <__aeabi_dsub>
 800cfc2:	4652      	mov	r2, sl
 800cfc4:	465b      	mov	r3, fp
 800cfc6:	f7f3 fb17 	bl	80005f8 <__aeabi_dmul>
 800cfca:	ec53 2b18 	vmov	r2, r3, d8
 800cfce:	f7f3 f95b 	bl	8000288 <__aeabi_dsub>
 800cfd2:	a30b      	add	r3, pc, #44	; (adr r3, 800d000 <__kernel_sin+0x148>)
 800cfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd8:	4606      	mov	r6, r0
 800cfda:	460f      	mov	r7, r1
 800cfdc:	4640      	mov	r0, r8
 800cfde:	4649      	mov	r1, r9
 800cfe0:	f7f3 fb0a 	bl	80005f8 <__aeabi_dmul>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4630      	mov	r0, r6
 800cfea:	4639      	mov	r1, r7
 800cfec:	f7f3 f94e 	bl	800028c <__adddf3>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	4620      	mov	r0, r4
 800cff6:	4629      	mov	r1, r5
 800cff8:	f7f3 f946 	bl	8000288 <__aeabi_dsub>
 800cffc:	e7c4      	b.n	800cf88 <__kernel_sin+0xd0>
 800cffe:	bf00      	nop
 800d000:	55555549 	.word	0x55555549
 800d004:	3fc55555 	.word	0x3fc55555
 800d008:	3fe00000 	.word	0x3fe00000
 800d00c:	5acfd57c 	.word	0x5acfd57c
 800d010:	3de5d93a 	.word	0x3de5d93a
 800d014:	8a2b9ceb 	.word	0x8a2b9ceb
 800d018:	3e5ae5e6 	.word	0x3e5ae5e6
 800d01c:	57b1fe7d 	.word	0x57b1fe7d
 800d020:	3ec71de3 	.word	0x3ec71de3
 800d024:	19c161d5 	.word	0x19c161d5
 800d028:	3f2a01a0 	.word	0x3f2a01a0
 800d02c:	1110f8a6 	.word	0x1110f8a6
 800d030:	3f811111 	.word	0x3f811111

0800d034 <with_errno>:
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	4604      	mov	r4, r0
 800d038:	460d      	mov	r5, r1
 800d03a:	4616      	mov	r6, r2
 800d03c:	f7fd fb56 	bl	800a6ec <__errno>
 800d040:	4629      	mov	r1, r5
 800d042:	6006      	str	r6, [r0, #0]
 800d044:	4620      	mov	r0, r4
 800d046:	bd70      	pop	{r4, r5, r6, pc}

0800d048 <xflow>:
 800d048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d04a:	4614      	mov	r4, r2
 800d04c:	461d      	mov	r5, r3
 800d04e:	b108      	cbz	r0, 800d054 <xflow+0xc>
 800d050:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d054:	e9cd 2300 	strd	r2, r3, [sp]
 800d058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d05c:	4620      	mov	r0, r4
 800d05e:	4629      	mov	r1, r5
 800d060:	f7f3 faca 	bl	80005f8 <__aeabi_dmul>
 800d064:	2222      	movs	r2, #34	; 0x22
 800d066:	b003      	add	sp, #12
 800d068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d06c:	f7ff bfe2 	b.w	800d034 <with_errno>

0800d070 <__math_uflow>:
 800d070:	b508      	push	{r3, lr}
 800d072:	2200      	movs	r2, #0
 800d074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d078:	f7ff ffe6 	bl	800d048 <xflow>
 800d07c:	ec41 0b10 	vmov	d0, r0, r1
 800d080:	bd08      	pop	{r3, pc}

0800d082 <__math_oflow>:
 800d082:	b508      	push	{r3, lr}
 800d084:	2200      	movs	r2, #0
 800d086:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d08a:	f7ff ffdd 	bl	800d048 <xflow>
 800d08e:	ec41 0b10 	vmov	d0, r0, r1
 800d092:	bd08      	pop	{r3, pc}

0800d094 <fabs>:
 800d094:	ec51 0b10 	vmov	r0, r1, d0
 800d098:	ee10 2a10 	vmov	r2, s0
 800d09c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d0a0:	ec43 2b10 	vmov	d0, r2, r3
 800d0a4:	4770      	bx	lr

0800d0a6 <finite>:
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	ed8d 0b00 	vstr	d0, [sp]
 800d0ac:	9801      	ldr	r0, [sp, #4]
 800d0ae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d0b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d0b6:	0fc0      	lsrs	r0, r0, #31
 800d0b8:	b002      	add	sp, #8
 800d0ba:	4770      	bx	lr
 800d0bc:	0000      	movs	r0, r0
	...

0800d0c0 <floor>:
 800d0c0:	ec51 0b10 	vmov	r0, r1, d0
 800d0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d0cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d0d0:	2e13      	cmp	r6, #19
 800d0d2:	ee10 5a10 	vmov	r5, s0
 800d0d6:	ee10 8a10 	vmov	r8, s0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	dc32      	bgt.n	800d144 <floor+0x84>
 800d0de:	2e00      	cmp	r6, #0
 800d0e0:	da14      	bge.n	800d10c <floor+0x4c>
 800d0e2:	a333      	add	r3, pc, #204	; (adr r3, 800d1b0 <floor+0xf0>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	f7f3 f8d0 	bl	800028c <__adddf3>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f7f3 fd12 	bl	8000b18 <__aeabi_dcmpgt>
 800d0f4:	b138      	cbz	r0, 800d106 <floor+0x46>
 800d0f6:	2c00      	cmp	r4, #0
 800d0f8:	da57      	bge.n	800d1aa <floor+0xea>
 800d0fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d0fe:	431d      	orrs	r5, r3
 800d100:	d001      	beq.n	800d106 <floor+0x46>
 800d102:	4c2d      	ldr	r4, [pc, #180]	; (800d1b8 <floor+0xf8>)
 800d104:	2500      	movs	r5, #0
 800d106:	4621      	mov	r1, r4
 800d108:	4628      	mov	r0, r5
 800d10a:	e025      	b.n	800d158 <floor+0x98>
 800d10c:	4f2b      	ldr	r7, [pc, #172]	; (800d1bc <floor+0xfc>)
 800d10e:	4137      	asrs	r7, r6
 800d110:	ea01 0307 	and.w	r3, r1, r7
 800d114:	4303      	orrs	r3, r0
 800d116:	d01f      	beq.n	800d158 <floor+0x98>
 800d118:	a325      	add	r3, pc, #148	; (adr r3, 800d1b0 <floor+0xf0>)
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	f7f3 f8b5 	bl	800028c <__adddf3>
 800d122:	2200      	movs	r2, #0
 800d124:	2300      	movs	r3, #0
 800d126:	f7f3 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d0eb      	beq.n	800d106 <floor+0x46>
 800d12e:	2c00      	cmp	r4, #0
 800d130:	bfbe      	ittt	lt
 800d132:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d136:	fa43 f606 	asrlt.w	r6, r3, r6
 800d13a:	19a4      	addlt	r4, r4, r6
 800d13c:	ea24 0407 	bic.w	r4, r4, r7
 800d140:	2500      	movs	r5, #0
 800d142:	e7e0      	b.n	800d106 <floor+0x46>
 800d144:	2e33      	cmp	r6, #51	; 0x33
 800d146:	dd0b      	ble.n	800d160 <floor+0xa0>
 800d148:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d14c:	d104      	bne.n	800d158 <floor+0x98>
 800d14e:	ee10 2a10 	vmov	r2, s0
 800d152:	460b      	mov	r3, r1
 800d154:	f7f3 f89a 	bl	800028c <__adddf3>
 800d158:	ec41 0b10 	vmov	d0, r0, r1
 800d15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d160:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d168:	fa23 f707 	lsr.w	r7, r3, r7
 800d16c:	4207      	tst	r7, r0
 800d16e:	d0f3      	beq.n	800d158 <floor+0x98>
 800d170:	a30f      	add	r3, pc, #60	; (adr r3, 800d1b0 <floor+0xf0>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	f7f3 f889 	bl	800028c <__adddf3>
 800d17a:	2200      	movs	r2, #0
 800d17c:	2300      	movs	r3, #0
 800d17e:	f7f3 fccb 	bl	8000b18 <__aeabi_dcmpgt>
 800d182:	2800      	cmp	r0, #0
 800d184:	d0bf      	beq.n	800d106 <floor+0x46>
 800d186:	2c00      	cmp	r4, #0
 800d188:	da02      	bge.n	800d190 <floor+0xd0>
 800d18a:	2e14      	cmp	r6, #20
 800d18c:	d103      	bne.n	800d196 <floor+0xd6>
 800d18e:	3401      	adds	r4, #1
 800d190:	ea25 0507 	bic.w	r5, r5, r7
 800d194:	e7b7      	b.n	800d106 <floor+0x46>
 800d196:	2301      	movs	r3, #1
 800d198:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d19c:	fa03 f606 	lsl.w	r6, r3, r6
 800d1a0:	4435      	add	r5, r6
 800d1a2:	4545      	cmp	r5, r8
 800d1a4:	bf38      	it	cc
 800d1a6:	18e4      	addcc	r4, r4, r3
 800d1a8:	e7f2      	b.n	800d190 <floor+0xd0>
 800d1aa:	2500      	movs	r5, #0
 800d1ac:	462c      	mov	r4, r5
 800d1ae:	e7aa      	b.n	800d106 <floor+0x46>
 800d1b0:	8800759c 	.word	0x8800759c
 800d1b4:	7e37e43c 	.word	0x7e37e43c
 800d1b8:	bff00000 	.word	0xbff00000
 800d1bc:	000fffff 	.word	0x000fffff

0800d1c0 <nan>:
 800d1c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d1c8 <nan+0x8>
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	00000000 	.word	0x00000000
 800d1cc:	7ff80000 	.word	0x7ff80000

0800d1d0 <scalbn>:
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	ec55 4b10 	vmov	r4, r5, d0
 800d1d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d1da:	4606      	mov	r6, r0
 800d1dc:	462b      	mov	r3, r5
 800d1de:	b99a      	cbnz	r2, 800d208 <scalbn+0x38>
 800d1e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d1e4:	4323      	orrs	r3, r4
 800d1e6:	d036      	beq.n	800d256 <scalbn+0x86>
 800d1e8:	4b39      	ldr	r3, [pc, #228]	; (800d2d0 <scalbn+0x100>)
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	ee10 0a10 	vmov	r0, s0
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f7f3 fa01 	bl	80005f8 <__aeabi_dmul>
 800d1f6:	4b37      	ldr	r3, [pc, #220]	; (800d2d4 <scalbn+0x104>)
 800d1f8:	429e      	cmp	r6, r3
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	460d      	mov	r5, r1
 800d1fe:	da10      	bge.n	800d222 <scalbn+0x52>
 800d200:	a32b      	add	r3, pc, #172	; (adr r3, 800d2b0 <scalbn+0xe0>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	e03a      	b.n	800d27e <scalbn+0xae>
 800d208:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d20c:	428a      	cmp	r2, r1
 800d20e:	d10c      	bne.n	800d22a <scalbn+0x5a>
 800d210:	ee10 2a10 	vmov	r2, s0
 800d214:	4620      	mov	r0, r4
 800d216:	4629      	mov	r1, r5
 800d218:	f7f3 f838 	bl	800028c <__adddf3>
 800d21c:	4604      	mov	r4, r0
 800d21e:	460d      	mov	r5, r1
 800d220:	e019      	b.n	800d256 <scalbn+0x86>
 800d222:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d226:	460b      	mov	r3, r1
 800d228:	3a36      	subs	r2, #54	; 0x36
 800d22a:	4432      	add	r2, r6
 800d22c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d230:	428a      	cmp	r2, r1
 800d232:	dd08      	ble.n	800d246 <scalbn+0x76>
 800d234:	2d00      	cmp	r5, #0
 800d236:	a120      	add	r1, pc, #128	; (adr r1, 800d2b8 <scalbn+0xe8>)
 800d238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d23c:	da1c      	bge.n	800d278 <scalbn+0xa8>
 800d23e:	a120      	add	r1, pc, #128	; (adr r1, 800d2c0 <scalbn+0xf0>)
 800d240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d244:	e018      	b.n	800d278 <scalbn+0xa8>
 800d246:	2a00      	cmp	r2, #0
 800d248:	dd08      	ble.n	800d25c <scalbn+0x8c>
 800d24a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d24e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d252:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d256:	ec45 4b10 	vmov	d0, r4, r5
 800d25a:	bd70      	pop	{r4, r5, r6, pc}
 800d25c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d260:	da19      	bge.n	800d296 <scalbn+0xc6>
 800d262:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d266:	429e      	cmp	r6, r3
 800d268:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d26c:	dd0a      	ble.n	800d284 <scalbn+0xb4>
 800d26e:	a112      	add	r1, pc, #72	; (adr r1, 800d2b8 <scalbn+0xe8>)
 800d270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e2      	bne.n	800d23e <scalbn+0x6e>
 800d278:	a30f      	add	r3, pc, #60	; (adr r3, 800d2b8 <scalbn+0xe8>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f9bb 	bl	80005f8 <__aeabi_dmul>
 800d282:	e7cb      	b.n	800d21c <scalbn+0x4c>
 800d284:	a10a      	add	r1, pc, #40	; (adr r1, 800d2b0 <scalbn+0xe0>)
 800d286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0b8      	beq.n	800d200 <scalbn+0x30>
 800d28e:	a10e      	add	r1, pc, #56	; (adr r1, 800d2c8 <scalbn+0xf8>)
 800d290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d294:	e7b4      	b.n	800d200 <scalbn+0x30>
 800d296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d29a:	3236      	adds	r2, #54	; 0x36
 800d29c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <scalbn+0x108>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	e7e8      	b.n	800d27e <scalbn+0xae>
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	c2f8f359 	.word	0xc2f8f359
 800d2b4:	01a56e1f 	.word	0x01a56e1f
 800d2b8:	8800759c 	.word	0x8800759c
 800d2bc:	7e37e43c 	.word	0x7e37e43c
 800d2c0:	8800759c 	.word	0x8800759c
 800d2c4:	fe37e43c 	.word	0xfe37e43c
 800d2c8:	c2f8f359 	.word	0xc2f8f359
 800d2cc:	81a56e1f 	.word	0x81a56e1f
 800d2d0:	43500000 	.word	0x43500000
 800d2d4:	ffff3cb0 	.word	0xffff3cb0
 800d2d8:	3c900000 	.word	0x3c900000

0800d2dc <_init>:
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2de:	bf00      	nop
 800d2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2e2:	bc08      	pop	{r3}
 800d2e4:	469e      	mov	lr, r3
 800d2e6:	4770      	bx	lr

0800d2e8 <_fini>:
 800d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ea:	bf00      	nop
 800d2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ee:	bc08      	pop	{r3}
 800d2f0:	469e      	mov	lr, r3
 800d2f2:	4770      	bx	lr
