
drone-stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800dcd0  0800dcd0  0001dcd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df60  0800df60  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800df60  0800df60  0001df60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df68  0800df68  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df68  0800df68  0001df68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df6c  0800df6c  0001df6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800df70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000694  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000072c  2000072c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f6a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002777  00000000  00000000  00035032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  000377b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  000389d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ab9  00000000  00000000  00039b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016725  00000000  00000000  0005c5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d087d  00000000  00000000  00072d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143583  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b0c  00000000  00000000  001435d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcb8 	.word	0x0800dcb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800dcb8 	.word	0x0800dcb8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f58:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f5c:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	609a      	str	r2, [r3, #8]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 8000f7e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fbe:	ed97 6a00 	vldr	s12, [r7]
 8000fc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff faaa 	bl	8000548 <__aeabi_f2d>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	ed93 7a04 	vldr	s14, [r3, #16]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	eef0 7ae7 	vabs.f32	s15, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	4680      	mov	r8, r0
 8001016:	4689      	mov	r9, r1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4640      	mov	r0, r8
 8001028:	4649      	mov	r1, r9
 800102a:	f7ff fae5 	bl	80005f8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff f929 	bl	800028c <__adddf3>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fdb1 	bl	8000ba8 <__aeabi_d2f>
 8001046:	4602      	mov	r2, r0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	ee07 3a90 	vmov	s15, r3
}
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001068 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e024      	b.n	80010c8 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d103      	bne.n	800108c <flash+0x24>
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <flash+0x78>)
 8001088:	f003 fce7 	bl	8004a5a <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d103      	bne.n	800109a <flash+0x32>
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	4812      	ldr	r0, [pc, #72]	; (80010e0 <flash+0x78>)
 8001096:	f003 fce0 	bl	8004a5a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800109a:	2032      	movs	r0, #50	; 0x32
 800109c:	f003 f93a 	bl	8004314 <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d103      	bne.n	80010ae <flash+0x46>
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <flash+0x78>)
 80010aa:	f003 fcd6 	bl	8004a5a <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d103      	bne.n	80010bc <flash+0x54>
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash+0x78>)
 80010b8:	f003 fccf 	bl	8004a5a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f003 f929 	bl	8004314 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbd6      	blt.n	800107e <flash+0x16>
  }

  HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f003 f91f 	bl	8004314 <HAL_Delay>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020000 	.word	0x40020000

080010e4 <console>:

// Monitor console
void console(const char *str) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f86f 	bl	80001d0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <console+0x24>)
 80010fc:	f008 fcb3 	bl	8009a66 <HAL_UART_Transmit_IT>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000280 	.word	0x20000280

0800110c <send_data>:

char g_console_msg[256] = {0};
void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b093      	sub	sp, #76	; 0x4c
 8001110:	af08      	add	r7, sp, #32
 8001112:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001116:	edc7 0a08 	vstr	s1, [r7, #32]
 800111a:	ed87 1a07 	vstr	s2, [r7, #28]
 800111e:	edc7 1a06 	vstr	s3, [r7, #24]
 8001122:	ed87 2a05 	vstr	s4, [r7, #20]
 8001126:	edc7 2a04 	vstr	s5, [r7, #16]
 800112a:	ed87 3a03 	vstr	s6, [r7, #12]
 800112e:	edc7 3a02 	vstr	s7, [r7, #8]
 8001132:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 8001136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113a:	2100      	movs	r1, #0
 800113c:	4837      	ldr	r0, [pc, #220]	; (800121c <send_data+0x110>)
 800113e:	f009 fc21 	bl	800a984 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8001142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001146:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001220 <send_data+0x114>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800114e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001152:	edd7 7a08 	vldr	s15, [r7, #32]
 8001156:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001220 <send_data+0x114>
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800115e:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001162:	edd7 7a07 	vldr	s15, [r7, #28]
 8001166:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001220 <send_data+0x114>
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8001176:	edd7 7a06 	vldr	s15, [r7, #24]
 800117a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001220 <send_data+0x114>
 800117e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800118a:	edd7 7a05 	vldr	s15, [r7, #20]
 800118e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001220 <send_data+0x114>
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119a:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 800119e:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001220 <send_data+0x114>
 80011a6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ae:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80011b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001220 <send_data+0x114>
 80011ba:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80011c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001220 <send_data+0x114>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d6:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001220 <send_data+0x114>
 80011e2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ea:	ee17 6a90 	vmov	r6, s15
 80011ee:	9606      	str	r6, [sp, #24]
 80011f0:	9505      	str	r5, [sp, #20]
 80011f2:	9404      	str	r4, [sp, #16]
 80011f4:	9003      	str	r0, [sp, #12]
 80011f6:	9102      	str	r1, [sp, #8]
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	ee16 3a10 	vmov	r3, s12
 8001200:	ee16 2a90 	vmov	r2, s13
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <send_data+0x118>)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <send_data+0x110>)
 8001208:	f009 fbc4 	bl	800a994 <siprintf>
  console(g_console_msg);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <send_data+0x110>)
 800120e:	f7ff ff69 	bl	80010e4 <console>
}
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	; 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	bf00      	nop
 800121c:	200004d4 	.word	0x200004d4
 8001220:	47c35000 	.word	0x47c35000
 8001224:	0800dcd0 	.word	0x0800dcd0

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f002 ffff 	bl	8004230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f8b9 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 fbe9 	bl	8001a0c <MX_GPIO_Init>
  MX_I2C1_Init();
 800123a:	f000 f91f 	bl	800147c <MX_I2C1_Init>
  MX_TIM1_Init();
 800123e:	f000 f981 	bl	8001544 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001242:	f000 fa43 	bl	80016cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001246:	f000 fad7 	bl	80017f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800124a:	f000 fb23 	bl	8001894 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800124e:	f000 fbb3 	bl	80019b8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001252:	f000 f941 	bl	80014d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Turn off leds
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4844      	ldr	r0, [pc, #272]	; (800136c <main+0x144>)
 800125c:	f003 fbe4 	bl	8004a28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4841      	ldr	r0, [pc, #260]	; (800136c <main+0x144>)
 8001266:	f003 fbdf 	bl	8004a28 <HAL_GPIO_WritePin>

  flash(1, 5);
 800126a:	2105      	movs	r1, #5
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fefb 	bl	8001068 <flash>

  // Initialise Kalman filters
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 1);
 8001272:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001276:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800127a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800127e:	483c      	ldr	r0, [pc, #240]	; (8001370 <main+0x148>)
 8001280:	f7ff fe64 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 1);
 8001284:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001288:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800128c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001290:	4838      	ldr	r0, [pc, #224]	; (8001374 <main+0x14c>)
 8001292:	f7ff fe5b 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 1);
 8001296:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800129a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800129e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012a2:	4835      	ldr	r0, [pc, #212]	; (8001378 <main+0x150>)
 80012a4:	f7ff fe52 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 1);
 80012a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012b4:	4831      	ldr	r0, [pc, #196]	; (800137c <main+0x154>)
 80012b6:	f7ff fe49 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 1);
 80012ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <main+0x158>)
 80012c8:	f7ff fe40 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 1);
 80012cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012d0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012d8:	482a      	ldr	r0, [pc, #168]	; (8001384 <main+0x15c>)
 80012da:	f7ff fe37 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[6], 2, 2, 1);
 80012de:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012e2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012e6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <main+0x160>)
 80012ec:	f7ff fe2e 	bl	8000f4c <SimpleKalmanFilter_Init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 80012f0:	2303      	movs	r3, #3
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2303      	movs	r3, #3
 80012f6:	2200      	movs	r2, #0
 80012f8:	4924      	ldr	r1, [pc, #144]	; (800138c <main+0x164>)
 80012fa:	4825      	ldr	r0, [pc, #148]	; (8001390 <main+0x168>)
 80012fc:	f000 fc05 	bl	8001b0a <MPU6050_init>
 8001300:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d100      	bne.n	800130a <main+0xe2>
 8001308:	e006      	b.n	8001318 <main+0xf0>
    flash(2, error);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	2002      	movs	r0, #2
 8001312:	f7ff fea9 	bl	8001068 <flash>
  while (1) {
 8001316:	e7eb      	b.n	80012f0 <main+0xc8>
  }

  while (1) {
    int error = MS5611_init(
 8001318:	491c      	ldr	r1, [pc, #112]	; (800138c <main+0x164>)
 800131a:	481e      	ldr	r0, [pc, #120]	; (8001394 <main+0x16c>)
 800131c:	f000 ff8c 	bl	8002238 <MS5611_init>
 8001320:	6038      	str	r0, [r7, #0]
        &g_ms5611,
        &hi2c1);
    if (error == 0) break;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <main+0x10e>
    flash(2, error);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4619      	mov	r1, r3
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff fe9a 	bl	8001068 <flash>
  while (1) {
 8001334:	e7f0      	b.n	8001318 <main+0xf0>
    if (error == 0) break;
 8001336:	bf00      	nop
  }

  // Initialise motor PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001338:	2100      	movs	r1, #0
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <main+0x170>)
 800133c:	f007 f96e 	bl	800861c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001340:	2104      	movs	r1, #4
 8001342:	4815      	ldr	r0, [pc, #84]	; (8001398 <main+0x170>)
 8001344:	f007 f96a 	bl	800861c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001348:	2108      	movs	r1, #8
 800134a:	4813      	ldr	r0, [pc, #76]	; (8001398 <main+0x170>)
 800134c:	f007 f966 	bl	800861c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001350:	210c      	movs	r1, #12
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <main+0x170>)
 8001354:	f007 f962 	bl	800861c <HAL_TIM_PWM_Start>

  // Run timers after sensors have been setup
  HAL_TIM_Base_Start_IT(&htim3);
 8001358:	4810      	ldr	r0, [pc, #64]	; (800139c <main+0x174>)
 800135a:	f007 f895 	bl	8008488 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_control, 10);
 800135e:	220a      	movs	r2, #10
 8001360:	490f      	ldr	r1, [pc, #60]	; (80013a0 <main+0x178>)
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <main+0x17c>)
 8001364:	f008 fbc4 	bl	8009af0 <HAL_UART_Receive_IT>
 8001368:	e7f9      	b.n	800135e <main+0x136>
 800136a:	bf00      	nop
 800136c:	40020000 	.word	0x40020000
 8001370:	200002c4 	.word	0x200002c4
 8001374:	200002dc 	.word	0x200002dc
 8001378:	200002f4 	.word	0x200002f4
 800137c:	2000030c 	.word	0x2000030c
 8001380:	20000324 	.word	0x20000324
 8001384:	2000033c 	.word	0x2000033c
 8001388:	20000354 	.word	0x20000354
 800138c:	200000b4 	.word	0x200000b4
 8001390:	20000444 	.word	0x20000444
 8001394:	20000468 	.word	0x20000468
 8001398:	20000160 	.word	0x20000160
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	200004c8 	.word	0x200004c8
 80013a4:	20000280 	.word	0x20000280

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f009 fae4 	bl	800a984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemClock_Config+0xd0>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001418:	2304      	movs	r3, #4
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800141c:	23a8      	movs	r3, #168	; 0xa8
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001424:	2304      	movs	r3, #4
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f006 fabb 	bl	80079a8 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001438:	f000 fb62 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001448:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800144e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001452:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2105      	movs	r1, #5
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fd1c 	bl	8007e98 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001466:	f000 fb4b 	bl	8001b00 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_I2C1_Init+0x50>)
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_I2C1_Init+0x50>)
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_I2C1_Init+0x58>)
 800148a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_I2C1_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_I2C1_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_I2C1_Init+0x50>)
 800149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_I2C1_Init+0x50>)
 80014ba:	f003 fae9 	bl	8004a90 <HAL_I2C_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014c4:	f000 fb1c 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000b4 	.word	0x200000b4
 80014d0:	40005400 	.word	0x40005400
 80014d4:	000186a0 	.word	0x000186a0

080014d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_SPI2_Init+0x64>)
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <MX_SPI2_Init+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_SPI2_Init+0x64>)
 80014e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_SPI2_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_SPI2_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_SPI2_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_SPI2_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_SPI2_Init+0x64>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_SPI2_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_SPI2_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_SPI2_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_SPI2_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_SPI2_Init+0x64>)
 8001524:	220a      	movs	r2, #10
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_SPI2_Init+0x64>)
 800152a:	f006 fed5 	bl	80082d8 <HAL_SPI_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001534:	f000 fae4 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000108 	.word	0x20000108
 8001540:	40003800 	.word	0x40003800

08001544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b096      	sub	sp, #88	; 0x58
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2220      	movs	r2, #32
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f009 fa01 	bl	800a984 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001582:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <MX_TIM1_Init+0x180>)
 8001584:	4a50      	ldr	r2, [pc, #320]	; (80016c8 <MX_TIM1_Init+0x184>)
 8001586:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 8001588:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <MX_TIM1_Init+0x180>)
 800158a:	2215      	movs	r2, #21
 800158c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <MX_TIM1_Init+0x180>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001594:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <MX_TIM1_Init+0x180>)
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <MX_TIM1_Init+0x180>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a2:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <MX_TIM1_Init+0x180>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <MX_TIM1_Init+0x180>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ae:	4845      	ldr	r0, [pc, #276]	; (80016c4 <MX_TIM1_Init+0x180>)
 80015b0:	f006 ff1b 	bl	80083ea <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015ba:	f000 faa1 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015c8:	4619      	mov	r1, r3
 80015ca:	483e      	ldr	r0, [pc, #248]	; (80016c4 <MX_TIM1_Init+0x180>)
 80015cc:	f007 fbae 	bl	8008d2c <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015d6:	f000 fa93 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015da:	483a      	ldr	r0, [pc, #232]	; (80016c4 <MX_TIM1_Init+0x180>)
 80015dc:	f006 ffc4 	bl	8008568 <HAL_TIM_PWM_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015e6:	f000 fa8b 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015f6:	4619      	mov	r1, r3
 80015f8:	4832      	ldr	r0, [pc, #200]	; (80016c4 <MX_TIM1_Init+0x180>)
 80015fa:	f008 f905 	bl	8009808 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001604:	f000 fa7c 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	2360      	movs	r3, #96	; 0x60
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	4825      	ldr	r0, [pc, #148]	; (80016c4 <MX_TIM1_Init+0x180>)
 800162e:	f007 fabb 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001638:	f000 fa62 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2204      	movs	r2, #4
 8001642:	4619      	mov	r1, r3
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <MX_TIM1_Init+0x180>)
 8001646:	f007 faaf 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001650:	f000 fa56 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	2208      	movs	r2, #8
 800165a:	4619      	mov	r1, r3
 800165c:	4819      	ldr	r0, [pc, #100]	; (80016c4 <MX_TIM1_Init+0x180>)
 800165e:	f007 faa3 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001668:	f000 fa4a 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	220c      	movs	r2, #12
 8001672:	4619      	mov	r1, r3
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <MX_TIM1_Init+0x180>)
 8001676:	f007 fa97 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001680:	f000 fa3e 	bl	8001b00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <MX_TIM1_Init+0x180>)
 80016a8:	f008 f92a 	bl	8009900 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80016b2:	f000 fa25 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <MX_TIM1_Init+0x180>)
 80016b8:	f001 f950 	bl	800295c <HAL_TIM_MspPostInit>

}
 80016bc:	bf00      	nop
 80016be:	3758      	adds	r7, #88	; 0x58
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000160 	.word	0x20000160
 80016c8:	40010000 	.word	0x40010000

080016cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <MX_TIM2_Init+0x128>)
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001706:	2215      	movs	r2, #21
 8001708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <MX_TIM2_Init+0x128>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <MX_TIM2_Init+0x128>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001724:	4833      	ldr	r0, [pc, #204]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001726:	f006 fe60 	bl	80083ea <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001730:	f000 f9e6 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173e:	4619      	mov	r1, r3
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001742:	f007 faf3 	bl	8008d2c <HAL_TIM_ConfigClockSource>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800174c:	f000 f9d8 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001750:	4828      	ldr	r0, [pc, #160]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001752:	f006 ff09 	bl	8008568 <HAL_TIM_PWM_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800175c:	f000 f9d0 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	4619      	mov	r1, r3
 800176e:	4821      	ldr	r0, [pc, #132]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001770:	f008 f84a 	bl	8009808 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800177a:	f000 f9c1 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177e:	2360      	movs	r3, #96	; 0x60
 8001780:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <MX_TIM2_Init+0x128>)
 8001796:	f007 fa07 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80017a0:	f000 f9ae 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2204      	movs	r2, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4812      	ldr	r0, [pc, #72]	; (80017f4 <MX_TIM2_Init+0x128>)
 80017ac:	f007 f9fc 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80017b6:	f000 f9a3 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2208      	movs	r2, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <MX_TIM2_Init+0x128>)
 80017c2:	f007 f9f1 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80017cc:	f000 f998 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	220c      	movs	r2, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM2_Init+0x128>)
 80017d8:	f007 f9e6 	bl	8008ba8 <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80017e2:	f000 f98d 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM2_Init+0x128>)
 80017e8:	f001 f8b8 	bl	800295c <HAL_TIM_MspPostInit>

}
 80017ec:	bf00      	nop
 80017ee:	3738      	adds	r7, #56	; 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200001a8 	.word	0x200001a8

080017f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	463b      	mov	r3, r7
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_TIM3_Init+0x94>)
 8001816:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <MX_TIM3_Init+0x98>)
 8001818:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_TIM3_Init+0x94>)
 800181c:	2254      	movs	r2, #84	; 0x54
 800181e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_TIM3_Init+0x94>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM3_Init+0x94>)
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_TIM3_Init+0x94>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM3_Init+0x94>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800183a:	4814      	ldr	r0, [pc, #80]	; (800188c <MX_TIM3_Init+0x94>)
 800183c:	f006 fdd5 	bl	80083ea <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001846:	f000 f95b 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4619      	mov	r1, r3
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_TIM3_Init+0x94>)
 8001858:	f007 fa68 	bl	8008d2c <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001862:	f000 f94d 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	4619      	mov	r1, r3
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <MX_TIM3_Init+0x94>)
 8001874:	f007 ffc8 	bl	8009808 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800187e:	f000 f93f 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200001f0 	.word	0x200001f0
 8001890:	40000400 	.word	0x40000400

08001894 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018b2:	463b      	mov	r3, r7
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018be:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <MX_TIM4_Init+0x11c>)
 80018c0:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <MX_TIM4_Init+0x120>)
 80018c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 80018c4:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <MX_TIM4_Init+0x11c>)
 80018c6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80018ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <MX_TIM4_Init+0x11c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000;
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <MX_TIM4_Init+0x11c>)
 80018d4:	f24a 4210 	movw	r2, #42000	; 0xa410
 80018d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <MX_TIM4_Init+0x11c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <MX_TIM4_Init+0x11c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018e6:	4832      	ldr	r0, [pc, #200]	; (80019b0 <MX_TIM4_Init+0x11c>)
 80018e8:	f006 fd7f 	bl	80083ea <HAL_TIM_Base_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80018f2:	f000 f905 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018fc:	f107 0318 	add.w	r3, r7, #24
 8001900:	4619      	mov	r1, r3
 8001902:	482b      	ldr	r0, [pc, #172]	; (80019b0 <MX_TIM4_Init+0x11c>)
 8001904:	f007 fa12 	bl	8008d2c <HAL_TIM_ConfigClockSource>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800190e:	f000 f8f7 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001912:	4827      	ldr	r0, [pc, #156]	; (80019b0 <MX_TIM4_Init+0x11c>)
 8001914:	f006 ff4a 	bl	80087ac <HAL_TIM_IC_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800191e:	f000 f8ef 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	4619      	mov	r1, r3
 8001930:	481f      	ldr	r0, [pc, #124]	; (80019b0 <MX_TIM4_Init+0x11c>)
 8001932:	f007 ff69 	bl	8009808 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800193c:	f000 f8e0 	bl	8001b00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001940:	230a      	movs	r3, #10
 8001942:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001944:	2301      	movs	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	4619      	mov	r1, r3
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <MX_TIM4_Init+0x11c>)
 8001958:	f007 f889 	bl	8008a6e <HAL_TIM_IC_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001962:	f000 f8cd 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	2204      	movs	r2, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4810      	ldr	r0, [pc, #64]	; (80019b0 <MX_TIM4_Init+0x11c>)
 800196e:	f007 f87e 	bl	8008a6e <HAL_TIM_IC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001978:	f000 f8c2 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	2208      	movs	r2, #8
 8001980:	4619      	mov	r1, r3
 8001982:	480b      	ldr	r0, [pc, #44]	; (80019b0 <MX_TIM4_Init+0x11c>)
 8001984:	f007 f873 	bl	8008a6e <HAL_TIM_IC_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 800198e:	f000 f8b7 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	220c      	movs	r2, #12
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM4_Init+0x11c>)
 800199a:	f007 f868 	bl	8008a6e <HAL_TIM_IC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 80019a4:	f000 f8ac 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000238 	.word	0x20000238
 80019b4:	40000800 	.word	0x40000800

080019b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <MX_USART1_UART_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USART1_UART_Init+0x4c>)
 80019f0:	f007 ffec 	bl	80099cc <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019fa:	f000 f881 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000280 	.word	0x20000280
 8001a08:	40011000 	.word	0x40011000

08001a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a33      	ldr	r2, [pc, #204]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a80:	f043 0310 	orr.w	r3, r3, #16
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_GPIO_Init+0xec>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	21c0      	movs	r1, #192	; 0xc0
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <MX_GPIO_Init+0xf0>)
 8001ad0:	f002 ffaa 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad4:	23c0      	movs	r3, #192	; 0xc0
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_GPIO_Init+0xf0>)
 8001aec:	f002 fde8 	bl	80046c0 <HAL_GPIO_Init>

}
 8001af0:	bf00      	nop
 8001af2:	3730      	adds	r7, #48	; 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>

08001b0a <MPU6050_init>:
#define MPU6050_I2C_ADDR 0xD0

uint8_t i2c_rx_buffer[32] = {0};

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b08a      	sub	sp, #40	; 0x28
 8001b0e:	af02      	add	r7, sp, #8
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	4611      	mov	r1, r2
 8001b16:	461a      	mov	r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	22d0      	movs	r2, #208	; 0xd0
 8001b2a:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	e00a      	b.n	8001b48 <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 f8b8 	bl	8005cac <HAL_I2C_GetState>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d006      	beq.n	8001b50 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	ddf1      	ble.n	8001b32 <MPU6050_init+0x28>
 8001b4e:	e000      	b.n	8001b52 <MPU6050_init+0x48>
      break;
 8001b50:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	dd01      	ble.n	8001b5c <MPU6050_init+0x52>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e160      	b.n	8001e1e <MPU6050_init+0x314>

  // Check MPU id
  uint8_t whoiam = 0x75;
 8001b5c:	2375      	movs	r3, #117	; 0x75
 8001b5e:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	e011      	b.n	8001b8a <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	b299      	uxth	r1, r3
 8001b70:	f107 021b 	add.w	r2, r7, #27
 8001b74:	2364      	movs	r3, #100	; 0x64
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f003 f8cd 	bl	8004d18 <HAL_I2C_Master_Transmit>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	ddea      	ble.n	8001b66 <MPU6050_init+0x5c>
 8001b90:	e000      	b.n	8001b94 <MPU6050_init+0x8a>
      break;
 8001b92:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	dd01      	ble.n	8001b9e <MPU6050_init+0x94>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e13f      	b.n	8001e1e <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e011      	b.n	8001bc8 <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	b299      	uxth	r1, r3
 8001bae:	f107 021a 	add.w	r2, r7, #26
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f003 f9ac 	bl	8004f14 <HAL_I2C_Master_Receive>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	ddea      	ble.n	8001ba4 <MPU6050_init+0x9a>
 8001bce:	e000      	b.n	8001bd2 <MPU6050_init+0xc8>
      break;
 8001bd0:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	dd01      	ble.n	8001bdc <MPU6050_init+0xd2>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e120      	b.n	8001e1e <MPU6050_init+0x314>

  if (whoiam_res != 0x68) return 5;
 8001bdc:	7ebb      	ldrb	r3, [r7, #26]
 8001bde:	2b68      	cmp	r3, #104	; 0x68
 8001be0:	d001      	beq.n	8001be6 <MPU6050_init+0xdc>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e11b      	b.n	8001e1e <MPU6050_init+0x314>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001be6:	236b      	movs	r3, #107	; 0x6b
 8001be8:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e011      	b.n	8001c14 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	791b      	ldrb	r3, [r3, #4]
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	f107 0218 	add.w	r2, r7, #24
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2302      	movs	r3, #2
 8001c04:	f003 f888 	bl	8004d18 <HAL_I2C_Master_Transmit>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	ddea      	ble.n	8001bf0 <MPU6050_init+0xe6>
 8001c1a:	e000      	b.n	8001c1e <MPU6050_init+0x114>
      break;
 8001c1c:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	dd01      	ble.n	8001c28 <MPU6050_init+0x11e>
 8001c24:	2306      	movs	r3, #6
 8001c26:	e0fa      	b.n	8001e1e <MPU6050_init+0x314>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 8001c28:	2319      	movs	r3, #25
 8001c2a:	753b      	strb	r3, [r7, #20]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e011      	b.n	8001c5a <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	791b      	ldrb	r3, [r3, #4]
 8001c3e:	b299      	uxth	r1, r3
 8001c40:	f107 0214 	add.w	r2, r7, #20
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f003 f865 	bl	8004d18 <HAL_I2C_Master_Transmit>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	ddea      	ble.n	8001c36 <MPU6050_init+0x12c>
 8001c60:	e000      	b.n	8001c64 <MPU6050_init+0x15a>
      break;
 8001c62:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	dd01      	ble.n	8001c6e <MPU6050_init+0x164>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e0d7      	b.n	8001e1e <MPU6050_init+0x314>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001c6e:	231c      	movs	r3, #28
 8001c70:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e011      	b.n	8001c9c <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	b299      	uxth	r1, r3
 8001c82:	f107 0213 	add.w	r2, r7, #19
 8001c86:	2364      	movs	r3, #100	; 0x64
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f003 f844 	bl	8004d18 <HAL_I2C_Master_Transmit>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	ddea      	ble.n	8001c78 <MPU6050_init+0x16e>
 8001ca2:	e000      	b.n	8001ca6 <MPU6050_init+0x19c>
      break;
 8001ca4:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	dd01      	ble.n	8001cb0 <MPU6050_init+0x1a6>
 8001cac:	2308      	movs	r3, #8
 8001cae:	e0b6      	b.n	8001e1e <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	e011      	b.n	8001cda <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	791b      	ldrb	r3, [r3, #4]
 8001cbe:	b299      	uxth	r1, r3
 8001cc0:	f107 0213 	add.w	r2, r7, #19
 8001cc4:	2364      	movs	r3, #100	; 0x64
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f003 f923 	bl	8004f14 <HAL_I2C_Master_Receive>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	ddea      	ble.n	8001cb6 <MPU6050_init+0x1ac>
 8001ce0:	e000      	b.n	8001ce4 <MPU6050_init+0x1da>
      break;
 8001ce2:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	dd01      	ble.n	8001cee <MPU6050_init+0x1e4>
 8001cea:	2309      	movs	r3, #9
 8001cec:	e097      	b.n	8001e1e <MPU6050_init+0x314>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001cee:	7cfb      	ldrb	r3, [r7, #19]
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	f023 0318 	bic.w	r3, r3, #24
 8001cf6:	b25a      	sxtb	r2, r3
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e011      	b.n	8001d30 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	791b      	ldrb	r3, [r3, #4]
 8001d14:	b299      	uxth	r1, r3
 8001d16:	f107 0213 	add.w	r2, r7, #19
 8001d1a:	2364      	movs	r3, #100	; 0x64
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f002 fffa 	bl	8004d18 <HAL_I2C_Master_Transmit>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	ddea      	ble.n	8001d0c <MPU6050_init+0x202>
 8001d36:	e000      	b.n	8001d3a <MPU6050_init+0x230>
      break;
 8001d38:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	dd01      	ble.n	8001d44 <MPU6050_init+0x23a>
 8001d40:	230a      	movs	r3, #10
 8001d42:	e06c      	b.n	8001e1e <MPU6050_init+0x314>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001d44:	231b      	movs	r3, #27
 8001d46:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	e011      	b.n	8001d72 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	791b      	ldrb	r3, [r3, #4]
 8001d56:	b299      	uxth	r1, r3
 8001d58:	f107 0212 	add.w	r2, r7, #18
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2301      	movs	r3, #1
 8001d62:	f002 ffd9 	bl	8004d18 <HAL_I2C_Master_Transmit>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	ddea      	ble.n	8001d4e <MPU6050_init+0x244>
 8001d78:	e000      	b.n	8001d7c <MPU6050_init+0x272>
      break;
 8001d7a:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	dd01      	ble.n	8001d86 <MPU6050_init+0x27c>
 8001d82:	230b      	movs	r3, #11
 8001d84:	e04b      	b.n	8001e1e <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e011      	b.n	8001db0 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	791b      	ldrb	r3, [r3, #4]
 8001d94:	b299      	uxth	r1, r3
 8001d96:	f107 0212 	add.w	r2, r7, #18
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f003 f8b8 	bl	8004f14 <HAL_I2C_Master_Receive>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	ddea      	ble.n	8001d8c <MPU6050_init+0x282>
 8001db6:	e000      	b.n	8001dba <MPU6050_init+0x2b0>
      break;
 8001db8:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	dd01      	ble.n	8001dc4 <MPU6050_init+0x2ba>
 8001dc0:	230c      	movs	r3, #12
 8001dc2:	e02c      	b.n	8001e1e <MPU6050_init+0x314>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	f023 0318 	bic.w	r3, r3, #24
 8001dcc:	b25a      	sxtb	r2, r3
 8001dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e011      	b.n	8001e08 <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	b299      	uxth	r1, r3
 8001dee:	f107 0212 	add.w	r2, r7, #18
 8001df2:	2364      	movs	r3, #100	; 0x64
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	f002 ff8e 	bl	8004d18 <HAL_I2C_Master_Transmit>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	ddea      	ble.n	8001de4 <MPU6050_init+0x2da>
 8001e0e:	e000      	b.n	8001e12 <MPU6050_init+0x308>
      break;
 8001e10:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	dd01      	ble.n	8001e1c <MPU6050_init+0x312>
 8001e18:	230d      	movs	r3, #13
 8001e1a:	e000      	b.n	8001e1e <MPU6050_init+0x314>

  return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, i2c_rx_buffer, 14, 10);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	230e      	movs	r3, #14
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MPU6050_update+0x34>)
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	223b      	movs	r2, #59	; 0x3b
 8001e4a:	f003 fa89 	bl	8005360 <HAL_I2C_Mem_Read>
  MPU6050_parse_6axis(mpu6050);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f806 	bl	8001e60 <MPU6050_parse_6axis>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200005d4 	.word	0x200005d4

08001e60 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(i2c_rx_buffer[0] << 8 | i2c_rx_buffer[1]);
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(i2c_rx_buffer[2] << 8 | i2c_rx_buffer[3]);
 8001e88:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001e8a:	789b      	ldrb	r3, [r3, #2]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(i2c_rx_buffer[4] << 8 | i2c_rx_buffer[5]);
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001eb2:	795b      	ldrb	r3, [r3, #5]
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (i2c_rx_buffer[6] << 8 | i2c_rx_buffer[7]);
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001eca:	799b      	ldrb	r3, [r3, #6]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001ed2:	79db      	ldrb	r3, [r3, #7]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001f6c <MPU6050_parse_6axis+0x10c>
 8001eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eee:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001f70 <MPU6050_parse_6axis+0x110>
 8001ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = (int16_t)(i2c_rx_buffer[8] << 8 | i2c_rx_buffer[9]);
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001efe:	7a1b      	ldrb	r3, [r3, #8]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001f06:	7a5b      	ldrb	r3, [r3, #9]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(i2c_rx_buffer[10] << 8 | i2c_rx_buffer[11]);
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001f1e:	7a9b      	ldrb	r3, [r3, #10]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001f26:	7adb      	ldrb	r3, [r3, #11]
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = (int16_t)(i2c_rx_buffer[12] << 8 | i2c_rx_buffer[13]);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001f3e:	7b1b      	ldrb	r3, [r3, #12]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MPU6050_parse_6axis+0x108>)
 8001f46:	7b5b      	ldrb	r3, [r3, #13]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	200005d4 	.word	0x200005d4
 8001f6c:	43aa0000 	.word	0x43aa0000
 8001f70:	42121eb8 	.word	0x42121eb8

08001f74 <_reset>:
#define TEMP_OSR_512 0x52
#define TEMP_OSR_1024 0x54
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

void _reset(ms5611_t *ms5611) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_RESET;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	221e      	movs	r2, #30
 8001f80:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1 , &ms5611->tx, 1, 100);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f103 0216 	add.w	r2, r3, #22
 8001f8c:	2364      	movs	r3, #100	; 0x64
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	21ee      	movs	r1, #238	; 0xee
 8001f94:	f002 fec0 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8001f98:	200a      	movs	r0, #10
 8001f9a:	f002 f9bb 	bl	8004314 <HAL_Delay>

  // For Temperature > 20 Celsius
  ms5611->T2 = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
  ms5611->OFF2 = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50
  ms5611->SENS2 = 0;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_read_PROM>:

void _read_PROM(ms5611_t *ms5611) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_PROM_C0;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	22a0      	movs	r2, #160	; 0xa0
 8001fc4:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f103 0216 	add.w	r2, r3, #22
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	21ee      	movs	r1, #238	; 0xee
 8001fd8:	f002 fe9e 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	2364      	movs	r3, #100	; 0x64
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	21ee      	movs	r1, #238	; 0xee
 8001fec:	f002 ff92 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[0] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	791b      	ldrb	r3, [r3, #4]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	795b      	ldrb	r3, [r3, #5]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21b      	sxth	r3, r3
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	831a      	strh	r2, [r3, #24]
  HAL_Delay(10);
 8002008:	200a      	movs	r0, #10
 800200a:	f002 f983 	bl	8004314 <HAL_Delay>

  ms5611->tx = CMD_PROM_C1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	22a2      	movs	r2, #162	; 0xa2
 8002012:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0216 	add.w	r2, r3, #22
 800201e:	2364      	movs	r3, #100	; 0x64
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2301      	movs	r3, #1
 8002024:	21ee      	movs	r1, #238	; 0xee
 8002026:	f002 fe77 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	1d1a      	adds	r2, r3, #4
 8002032:	2364      	movs	r3, #100	; 0x64
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2302      	movs	r3, #2
 8002038:	21ee      	movs	r1, #238	; 0xee
 800203a:	f002 ff6b 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[1] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	791b      	ldrb	r3, [r3, #4]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	795b      	ldrb	r3, [r3, #5]
 800204a:	b21b      	sxth	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b21b      	sxth	r3, r3
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	835a      	strh	r2, [r3, #26]
  HAL_Delay(10);
 8002056:	200a      	movs	r0, #10
 8002058:	f002 f95c 	bl	8004314 <HAL_Delay>

  ms5611->tx = CMD_PROM_C2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	22a4      	movs	r2, #164	; 0xa4
 8002060:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f103 0216 	add.w	r2, r3, #22
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2301      	movs	r3, #1
 8002072:	21ee      	movs	r1, #238	; 0xee
 8002074:	f002 fe50 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	1d1a      	adds	r2, r3, #4
 8002080:	2364      	movs	r3, #100	; 0x64
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2302      	movs	r3, #2
 8002086:	21ee      	movs	r1, #238	; 0xee
 8002088:	f002 ff44 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[2] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	791b      	ldrb	r3, [r3, #4]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	b21a      	sxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	795b      	ldrb	r3, [r3, #5]
 8002098:	b21b      	sxth	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b21b      	sxth	r3, r3
 800209e:	b29a      	uxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	839a      	strh	r2, [r3, #28]
  HAL_Delay(10);
 80020a4:	200a      	movs	r0, #10
 80020a6:	f002 f935 	bl	8004314 <HAL_Delay>

  ms5611->tx = CMD_PROM_C3;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	22a6      	movs	r2, #166	; 0xa6
 80020ae:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 0216 	add.w	r2, r3, #22
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	21ee      	movs	r1, #238	; 0xee
 80020c2:	f002 fe29 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	1d1a      	adds	r2, r3, #4
 80020ce:	2364      	movs	r3, #100	; 0x64
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2302      	movs	r3, #2
 80020d4:	21ee      	movs	r1, #238	; 0xee
 80020d6:	f002 ff1d 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[3] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	791b      	ldrb	r3, [r3, #4]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	795b      	ldrb	r3, [r3, #5]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	83da      	strh	r2, [r3, #30]
  HAL_Delay(10);
 80020f2:	200a      	movs	r0, #10
 80020f4:	f002 f90e 	bl	8004314 <HAL_Delay>

  ms5611->tx = CMD_PROM_C4;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	22a8      	movs	r2, #168	; 0xa8
 80020fc:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 0216 	add.w	r2, r3, #22
 8002108:	2364      	movs	r3, #100	; 0x64
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2301      	movs	r3, #1
 800210e:	21ee      	movs	r1, #238	; 0xee
 8002110:	f002 fe02 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1d1a      	adds	r2, r3, #4
 800211c:	2364      	movs	r3, #100	; 0x64
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2302      	movs	r3, #2
 8002122:	21ee      	movs	r1, #238	; 0xee
 8002124:	f002 fef6 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[4] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	795b      	ldrb	r3, [r3, #5]
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21b      	sxth	r3, r3
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	841a      	strh	r2, [r3, #32]
  HAL_Delay(10);
 8002140:	200a      	movs	r0, #10
 8002142:	f002 f8e7 	bl	8004314 <HAL_Delay>

  ms5611->tx = CMD_PROM_C5;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	22aa      	movs	r2, #170	; 0xaa
 800214a:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0216 	add.w	r2, r3, #22
 8002156:	2364      	movs	r3, #100	; 0x64
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2301      	movs	r3, #1
 800215c:	21ee      	movs	r1, #238	; 0xee
 800215e:	f002 fddb 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	1d1a      	adds	r2, r3, #4
 800216a:	2364      	movs	r3, #100	; 0x64
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2302      	movs	r3, #2
 8002170:	21ee      	movs	r1, #238	; 0xee
 8002172:	f002 fecf 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[5] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	791b      	ldrb	r3, [r3, #4]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	b21a      	sxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	795b      	ldrb	r3, [r3, #5]
 8002182:	b21b      	sxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b21b      	sxth	r3, r3
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	845a      	strh	r2, [r3, #34]	; 0x22
  HAL_Delay(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f002 f8c0 	bl	8004314 <HAL_Delay>

  ms5611->tx = CMD_PROM_C6;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	22ac      	movs	r2, #172	; 0xac
 8002198:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0216 	add.w	r2, r3, #22
 80021a4:	2364      	movs	r3, #100	; 0x64
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2301      	movs	r3, #1
 80021aa:	21ee      	movs	r1, #238	; 0xee
 80021ac:	f002 fdb4 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1d1a      	adds	r2, r3, #4
 80021b8:	2364      	movs	r3, #100	; 0x64
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2302      	movs	r3, #2
 80021be:	21ee      	movs	r1, #238	; 0xee
 80021c0:	f002 fea8 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[6] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	791b      	ldrb	r3, [r3, #4]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	795b      	ldrb	r3, [r3, #5]
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	849a      	strh	r2, [r3, #36]	; 0x24
  HAL_Delay(10);
 80021dc:	200a      	movs	r0, #10
 80021de:	f002 f899 	bl	8004314 <HAL_Delay>

  ms5611->tx = CMD_PROM_C7;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	22ae      	movs	r2, #174	; 0xae
 80021e6:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f103 0216 	add.w	r2, r3, #22
 80021f2:	2364      	movs	r3, #100	; 0x64
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	21ee      	movs	r1, #238	; 0xee
 80021fa:	f002 fd8d 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	1d1a      	adds	r2, r3, #4
 8002206:	2364      	movs	r3, #100	; 0x64
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2302      	movs	r3, #2
 800220c:	21ee      	movs	r1, #238	; 0xee
 800220e:	f002 fe81 	bl	8004f14 <HAL_I2C_Master_Receive>
  ms5611->C[7] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	791b      	ldrb	r3, [r3, #4]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b21a      	sxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	795b      	ldrb	r3, [r3, #5]
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21b      	sxth	r3, r3
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_Delay(10);
 800222a:	200a      	movs	r0, #10
 800222c:	f002 f872 	bl	8004314 <HAL_Delay>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <MS5611_init>:

int MS5611_init(ms5611_t *ms5611, I2C_HandleTypeDef *i2c) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  ms5611->i2c = i2c;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	601a      	str	r2, [r3, #0]

  _reset(ms5611);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fe93 	bl	8001f74 <_reset>
  _read_PROM(ms5611);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff feb2 	bl	8001fb8 <_read_PROM>

  return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <MS5611_req_temperature>:

void MS5611_req_temperature(ms5611_t *ms5611, OSR osr) {
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af02      	add	r7, sp, #8
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = TEMP_OSR_256 + (2 * osr);
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	3328      	adds	r3, #40	; 0x28
 800226e:	b2db      	uxtb	r3, r3
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0216 	add.w	r2, r3, #22
 8002282:	2364      	movs	r3, #100	; 0x64
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	21ee      	movs	r1, #238	; 0xee
 800228a:	f002 fd45 	bl	8004d18 <HAL_I2C_Master_Transmit>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <MS5611_req_pressure>:

void MS5611_req_pressure(ms5611_t *ms5611, OSR osr) {
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af02      	add	r7, sp, #8
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = PRESSURE_OSR_256 + (2 * osr);
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	3320      	adds	r3, #32
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f103 0216 	add.w	r2, r3, #22
 80022ba:	2364      	movs	r3, #100	; 0x64
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	21ee      	movs	r1, #238	; 0xee
 80022c2:	f002 fd29 	bl	8004d18 <HAL_I2C_Master_Transmit>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <MS5611_read_temperature>:

void MS5611_read_temperature(ms5611_t *ms5611) {
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af02      	add	r7, sp, #8
 80022d4:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f103 0216 	add.w	r2, r3, #22
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2301      	movs	r3, #1
 80022ec:	21ee      	movs	r1, #238	; 0xee
 80022ee:	f002 fd13 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_temp, 3, 100);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f103 0210 	add.w	r2, r3, #16
 80022fc:	2364      	movs	r3, #100	; 0x64
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2303      	movs	r3, #3
 8002302:	21ef      	movs	r1, #239	; 0xef
 8002304:	f002 fe06 	bl	8004f14 <HAL_I2C_Master_Receive>
//  HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1 , 0x00, 1, ms5611->rx_temp, 3, 100);

  ms5611->digi_tem_D2 = (ms5611->rx_temp[0] << 16) | (ms5611->rx_temp[1] << 8) | ms5611->rx_temp[2];
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7c1b      	ldrb	r3, [r3, #16]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7c5b      	ldrb	r3, [r3, #17]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	4313      	orrs	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	7c92      	ldrb	r2, [r2, #18]
 800231a:	4313      	orrs	r3, r2
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <MS5611_read_pressure>:

void MS5611_read_pressure(ms5611_t *ms5611) {
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af02      	add	r7, sp, #8
 8002330:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f103 0216 	add.w	r2, r3, #22
 8002342:	2364      	movs	r3, #100	; 0x64
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	21ee      	movs	r1, #238	; 0xee
 800234a:	f002 fce5 	bl	8004d18 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_press, 3, 100);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 0213 	add.w	r2, r3, #19
 8002358:	2364      	movs	r3, #100	; 0x64
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2303      	movs	r3, #3
 800235e:	21ef      	movs	r1, #239	; 0xef
 8002360:	f002 fdd8 	bl	8004f14 <HAL_I2C_Master_Receive>
  //HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1, 0x00, 1, ms5611->rx_press, 3, 100);

  ms5611->digi_psr_D1 = ms5611->rx_press[0] << 16 | ms5611->rx_press[1] << 8 | ms5611->rx_press[2];
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7cdb      	ldrb	r3, [r3, #19]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7d1b      	ldrb	r3, [r3, #20]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	4313      	orrs	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	7d52      	ldrb	r2, [r2, #21]
 8002376:	4313      	orrs	r3, r2
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <MS5611_calc_temperature>:

void MS5611_calc_temperature(ms5611_t *ms5611) {
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  ms5611->dT = ms5611->C[5];
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT <<= 8; // Calculated up to C5 * 2^8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT *= -1; // Apply negative sign
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	425a      	negs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT += ms5611->digi_tem_D2; // = D2 - C5 * 2^8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	4413      	add	r3, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30

  ms5611->TEMP = ms5611->dT * ms5611->C[6];
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80023c6:	fb03 f202 	mul.w	r2, r3, r2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	15da      	asrs	r2, r3, #23
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP += 2000;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <MS5611_calc_pressure>:

void MS5611_calc_pressure(ms5611_t *ms5611) {
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b08c      	sub	sp, #48	; 0x30
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  ms5611->OFF = ms5611->C[2];
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	8b9b      	ldrh	r3, [r3, #28]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2200      	movs	r2, #0
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	61fa      	str	r2, [r7, #28]
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800240c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
  ms5611->OFF <<= 16; // Calculated up to C2 * 2^16
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002416:	f04f 0000 	mov.w	r0, #0
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	0419      	lsls	r1, r3, #16
 8002420:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002424:	0410      	lsls	r0, r2, #16
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
  ms5611->OFF += (ms5611->C[4] * ms5611->dT) >> 7;
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	8c1b      	ldrh	r3, [r3, #32]
 8002436:	461a      	mov	r2, r3
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	11db      	asrs	r3, r3, #7
 8002442:	17da      	asrs	r2, r3, #31
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	627a      	str	r2, [r7, #36]	; 0x24
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	18c3      	adds	r3, r0, r3
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	eb41 0303 	adc.w	r3, r1, r3
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800245c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38


  ms5611->SENS = ms5611->C[1];
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	8b5b      	ldrh	r3, [r3, #26]
 8002464:	b29b      	uxth	r3, r3
 8002466:	2200      	movs	r2, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	60fa      	str	r2, [r7, #12]
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002472:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
  ms5611->SENS <<= 15; // Calculated up to C1 * 2^15
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	03cb      	lsls	r3, r1, #15
 8002486:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 800248a:	03c2      	lsls	r2, r0, #15
 800248c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800248e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  ms5611->SENS += (ms5611->C[3] * ms5611->dT) >>8;
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800249a:	8bc9      	ldrh	r1, [r1, #30]
 800249c:	4608      	mov	r0, r1
 800249e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024a0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80024a2:	fb00 f101 	mul.w	r1, r0, r1
 80024a6:	1209      	asrs	r1, r1, #8
 80024a8:	17c8      	asrs	r0, r1, #31
 80024aa:	468a      	mov	sl, r1
 80024ac:	4683      	mov	fp, r0
 80024ae:	eb12 010a 	adds.w	r1, r2, sl
 80024b2:	6039      	str	r1, [r7, #0]
 80024b4:	eb43 030b 	adc.w	r3, r3, fp
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80024c0:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

  ms5611->P = ((ms5611->digi_psr_D1 * ms5611->SENS) / pow(2, 21) - ms5611->OFF) / pow(2, 15);
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	2200      	movs	r2, #0
 80024ca:	4698      	mov	r8, r3
 80024cc:	4691      	mov	r9, r2
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80024d4:	fb02 f009 	mul.w	r0, r2, r9
 80024d8:	fb08 f103 	mul.w	r1, r8, r3
 80024dc:	4401      	add	r1, r0
 80024de:	fba8 4502 	umull	r4, r5, r8, r2
 80024e2:	194b      	adds	r3, r1, r5
 80024e4:	461d      	mov	r5, r3
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fe f857 	bl	800059c <__aeabi_l2d>
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <MS5611_calc_pressure+0x158>)
 80024f4:	f7fe f9aa 	bl	800084c <__aeabi_ddiv>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4614      	mov	r4, r2
 80024fe:	461d      	mov	r5, r3
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe f847 	bl	800059c <__aeabi_l2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fd feb7 	bl	8000288 <__aeabi_dsub>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <MS5611_calc_pressure+0x15c>)
 8002528:	f7fe f990 	bl	800084c <__aeabi_ddiv>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe fb10 	bl	8000b58 <__aeabi_d2iz>
 8002538:	4602      	mov	r2, r0
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	649a      	str	r2, [r3, #72]	; 0x48
}
 800253e:	bf00      	nop
 8002540:	3730      	adds	r7, #48	; 0x30
 8002542:	46bd      	mov	sp, r7
 8002544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002548:	41400000 	.word	0x41400000
 800254c:	40e00000 	.word	0x40e00000

08002550 <MS5611_calc_altitude>:

#define SEA_PRESSURE 1013.25f
void MS5611_calc_altitude(ms5611_t *ms5611) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  float temperature = (float)ms5611->TEMP/100.f;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80025d4 <MS5611_calc_altitude+0x84>
 8002568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256c:	edc7 7a03 	vstr	s15, [r7, #12]
  float pressure = (float)ms5611->P/100.f;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80025d4 <MS5611_calc_altitude+0x84>
 8002580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002584:	edc7 7a02 	vstr	s15, [r7, #8]
  ms5611->altitude = (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002588:	edd7 7a02 	vldr	s15, [r7, #8]
 800258c:	eddf 6a12 	vldr	s13, [pc, #72]	; 80025d8 <MS5611_calc_altitude+0x88>
 8002590:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002594:	eddf 0a11 	vldr	s1, [pc, #68]	; 80025dc <MS5611_calc_altitude+0x8c>
 8002598:	eeb0 0a47 	vmov.f32	s0, s14
 800259c:	f008 ff90 	bl	800b4c0 <powf>
 80025a0:	eef0 7a40 	vmov.f32	s15, s0
 80025a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80025e0 <MS5611_calc_altitude+0x90>
 80025b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025bc:	eddf 6a09 	vldr	s13, [pc, #36]	; 80025e4 <MS5611_calc_altitude+0x94>
 80025c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	42c80000 	.word	0x42c80000
 80025d8:	447d5000 	.word	0x447d5000
 80025dc:	3e42c9b7 	.word	0x3e42c9b7
 80025e0:	43889333 	.word	0x43889333
 80025e4:	3bd4fdf4 	.word	0x3bd4fdf4

080025e8 <MS5611_update>:
// Counter checks depend on timer frequency
#define STEP_1 0
#define STEP_2 2
#define STEP_3 4
#define STEP_END 6
void MS5611_update(ms5611_t *ms5611) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  static int counter = 0;

  if (counter == STEP_1) {
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <MS5611_update+0x70>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <MS5611_update+0x18>
    MS5611_req_temperature(ms5611, OSR_4096);
 80025f8:	2104      	movs	r1, #4
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fe2f 	bl	800225e <MS5611_req_temperature>
  }

  if (counter == STEP_2) {
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <MS5611_update+0x70>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d109      	bne.n	800261c <MS5611_update+0x34>
    MS5611_read_temperature(ms5611);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fe60 	bl	80022ce <MS5611_read_temperature>
    MS5611_calc_temperature(ms5611);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff feb9 	bl	8002386 <MS5611_calc_temperature>
    MS5611_req_pressure(ms5611, OSR_4096);
 8002614:	2104      	movs	r1, #4
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fe3d 	bl	8002296 <MS5611_req_pressure>
  }

  if (counter == STEP_3) {
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MS5611_update+0x70>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d108      	bne.n	8002636 <MS5611_update+0x4e>
    MS5611_read_pressure(ms5611);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fe80 	bl	800232a <MS5611_read_pressure>
    MS5611_calc_pressure(ms5611);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fee0 	bl	80023f0 <MS5611_calc_pressure>
    MS5611_calc_altitude(ms5611);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff8d 	bl	8002550 <MS5611_calc_altitude>
  }

  counter += 1;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <MS5611_update+0x70>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <MS5611_update+0x70>)
 800263e:	6013      	str	r3, [r2, #0]
  if (counter >= STEP_END)
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <MS5611_update+0x70>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b05      	cmp	r3, #5
 8002646:	dd02      	ble.n	800264e <MS5611_update+0x66>
    counter = 0;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <MS5611_update+0x70>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200005f4 	.word	0x200005f4

0800265c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_MspInit+0x4c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_MspInit+0x4c>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <HAL_I2C_MspInit+0xa4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d13b      	bne.n	8002746 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_I2C_MspInit+0xa8>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_I2C_MspInit+0xa8>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_I2C_MspInit+0xa8>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026ea:	23c0      	movs	r3, #192	; 0xc0
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ee:	2312      	movs	r3, #18
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026fa:	2304      	movs	r3, #4
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4814      	ldr	r0, [pc, #80]	; (8002758 <HAL_I2C_MspInit+0xac>)
 8002706:	f001 ffdb 	bl	80046c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_I2C_MspInit+0xa8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_I2C_MspInit+0xa8>)
 8002714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_I2C_MspInit+0xa8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	201f      	movs	r0, #31
 800272c:	f001 fef1 	bl	8004512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002730:	201f      	movs	r0, #31
 8002732:	f001 ff0a 	bl	800454a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2020      	movs	r0, #32
 800273c:	f001 fee9 	bl	8004512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002740:	2020      	movs	r0, #32
 8002742:	f001 ff02 	bl	800454a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40005400 	.word	0x40005400
 8002754:	40023800 	.word	0x40023800
 8002758:	40020400 	.word	0x40020400

0800275c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_SPI_MspInit+0xc0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d14a      	bne.n	8002814 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a26      	ldr	r2, [pc, #152]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_SPI_MspInit+0xc4>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027d2:	230c      	movs	r3, #12
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027e2:	2305      	movs	r3, #5
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	480d      	ldr	r0, [pc, #52]	; (8002824 <HAL_SPI_MspInit+0xc8>)
 80027ee:	f001 ff67 	bl	80046c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002804:	2305      	movs	r3, #5
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4619      	mov	r1, r3
 800280e:	4806      	ldr	r0, [pc, #24]	; (8002828 <HAL_SPI_MspInit+0xcc>)
 8002810:	f001 ff56 	bl	80046c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002814:	bf00      	nop
 8002816:	3728      	adds	r7, #40	; 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40003800 	.word	0x40003800
 8002820:	40023800 	.word	0x40023800
 8002824:	40020800 	.word	0x40020800
 8002828:	40020400 	.word	0x40020400

0800282c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3f      	ldr	r2, [pc, #252]	; (8002948 <HAL_TIM_Base_MspInit+0x11c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10e      	bne.n	800286c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	4b3e      	ldr	r3, [pc, #248]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a3d      	ldr	r2, [pc, #244]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800286a:	e069      	b.n	8002940 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a33      	ldr	r2, [pc, #204]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
}
 8002892:	e055      	b.n	8002940 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <HAL_TIM_Base_MspInit+0x124>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d116      	bne.n	80028cc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a29      	ldr	r2, [pc, #164]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	201d      	movs	r0, #29
 80028c0:	f001 fe27 	bl	8004512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028c4:	201d      	movs	r0, #29
 80028c6:	f001 fe40 	bl	800454a <HAL_NVIC_EnableIRQ>
}
 80028ca:	e039      	b.n	8002940 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_TIM_Base_MspInit+0x128>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d134      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_TIM_Base_MspInit+0x120>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800290e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002920:	2302      	movs	r3, #2
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <HAL_TIM_Base_MspInit+0x12c>)
 800292c:	f001 fec8 	bl	80046c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	201e      	movs	r0, #30
 8002936:	f001 fdec 	bl	8004512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800293a:	201e      	movs	r0, #30
 800293c:	f001 fe05 	bl	800454a <HAL_NVIC_EnableIRQ>
}
 8002940:	bf00      	nop
 8002942:	3730      	adds	r7, #48	; 0x30
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40010000 	.word	0x40010000
 800294c:	40023800 	.word	0x40023800
 8002950:	40000400 	.word	0x40000400
 8002954:	40000800 	.word	0x40000800
 8002958:	40020c00 	.word	0x40020c00

0800295c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <HAL_TIM_MspPostInit+0xb0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d11f      	bne.n	80029be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_TIM_MspPostInit+0xb4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_TIM_MspPostInit+0xb4>)
 8002988:	f043 0310 	orr.w	r3, r3, #16
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_TIM_MspPostInit+0xb4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800299a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4817      	ldr	r0, [pc, #92]	; (8002a14 <HAL_TIM_MspPostInit+0xb8>)
 80029b8:	f001 fe82 	bl	80046c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029bc:	e022      	b.n	8002a04 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c6:	d11d      	bne.n	8002a04 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_TIM_MspPostInit+0xb4>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_TIM_MspPostInit+0xb4>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6313      	str	r3, [r2, #48]	; 0x30
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_TIM_MspPostInit+0xb4>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80029e4:	230f      	movs	r3, #15
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	4806      	ldr	r0, [pc, #24]	; (8002a18 <HAL_TIM_MspPostInit+0xbc>)
 8002a00:	f001 fe5e 	bl	80046c0 <HAL_GPIO_Init>
}
 8002a04:	bf00      	nop
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40020000 	.word	0x40020000

08002a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_UART_MspInit+0x94>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d134      	bne.n	8002aa8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a48:	f043 0310 	orr.w	r3, r3, #16
 8002a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a88:	2307      	movs	r3, #7
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <HAL_UART_MspInit+0x9c>)
 8002a94:	f001 fe14 	bl	80046c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2025      	movs	r0, #37	; 0x25
 8002a9e:	f001 fd38 	bl	8004512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aa2:	2025      	movs	r0, #37	; 0x25
 8002aa4:	f001 fd51 	bl	800454a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002aa8:	bf00      	nop
 8002aaa:	3728      	adds	r7, #40	; 0x28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40011000 	.word	0x40011000
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020000 	.word	0x40020000

08002abc <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	ed87 0a03 	vstr	s0, [r7, #12]
 8002ac6:	edc7 0a02 	vstr	s1, [r7, #8]
 8002aca:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002ace:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	d501      	bpl.n	8002ae4 <limit+0x28>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	e00b      	b.n	8002afc <limit+0x40>
 8002ae4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	dd01      	ble.n	8002afa <limit+0x3e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	e000      	b.n	8002afc <limit+0x40>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	ee07 3a90 	vmov	s15, r3
}
 8002b00:	eeb0 0a67 	vmov.f32	s0, s15
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <ctl_motors_speed+0x34>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <ctl_motors_speed+0x34>)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002b2a:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <ctl_motors_speed+0x34>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <ctl_motors_speed+0x34>)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000

08002b48 <calc_angles>:

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles() {
 8002b48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b4c:	af00      	add	r7, sp, #0
  // Angle calculation using integration
  gyro_angle[X] += (g_gx / (FREQ * SSF_GYRO));
 8002b4e:	4bd0      	ldr	r3, [pc, #832]	; (8002e90 <calc_angles+0x348>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fcf8 	bl	8000548 <__aeabi_f2d>
 8002b58:	4604      	mov	r4, r0
 8002b5a:	460d      	mov	r5, r1
 8002b5c:	4bcd      	ldr	r3, [pc, #820]	; (8002e94 <calc_angles+0x34c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fcf1 	bl	8000548 <__aeabi_f2d>
 8002b66:	a3c2      	add	r3, pc, #776	; (adr r3, 8002e70 <calc_angles+0x328>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f7fd fe6e 	bl	800084c <__aeabi_ddiv>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f7fd fb88 	bl	800028c <__adddf3>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7fe f810 	bl	8000ba8 <__aeabi_d2f>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4ac1      	ldr	r2, [pc, #772]	; (8002e90 <calc_angles+0x348>)
 8002b8c:	6013      	str	r3, [r2, #0]
  gyro_angle[Y] += (-g_gy / (FREQ * SSF_GYRO)); // Change sign to match the accelerometer's one
 8002b8e:	4bc0      	ldr	r3, [pc, #768]	; (8002e90 <calc_angles+0x348>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fcd8 	bl	8000548 <__aeabi_f2d>
 8002b98:	4604      	mov	r4, r0
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	4bbe      	ldr	r3, [pc, #760]	; (8002e98 <calc_angles+0x350>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	eef1 7a67 	vneg.f32	s15, s15
 8002ba6:	ee17 3a90 	vmov	r3, s15
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fccc 	bl	8000548 <__aeabi_f2d>
 8002bb0:	a3af      	add	r3, pc, #700	; (adr r3, 8002e70 <calc_angles+0x328>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fe49 	bl	800084c <__aeabi_ddiv>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f7fd fb63 	bl	800028c <__adddf3>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f7fd ffeb 	bl	8000ba8 <__aeabi_d2f>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4aae      	ldr	r2, [pc, #696]	; (8002e90 <calc_angles+0x348>)
 8002bd6:	6053      	str	r3, [r2, #4]

  // Transfer roll to pitch if IMU has yawed
  gyro_angle[Y] += gyro_angle[X] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002bd8:	4bad      	ldr	r3, [pc, #692]	; (8002e90 <calc_angles+0x348>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fcb3 	bl	8000548 <__aeabi_f2d>
 8002be2:	4604      	mov	r4, r0
 8002be4:	460d      	mov	r5, r1
 8002be6:	4baa      	ldr	r3, [pc, #680]	; (8002e90 <calc_angles+0x348>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcac 	bl	8000548 <__aeabi_f2d>
 8002bf0:	4680      	mov	r8, r0
 8002bf2:	4689      	mov	r9, r1
 8002bf4:	4ba9      	ldr	r3, [pc, #676]	; (8002e9c <calc_angles+0x354>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fca5 	bl	8000548 <__aeabi_f2d>
 8002bfe:	a39e      	add	r3, pc, #632	; (adr r3, 8002e78 <calc_angles+0x330>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fcf8 	bl	80005f8 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	ec43 2b17 	vmov	d7, r2, r3
 8002c10:	eeb0 0a47 	vmov.f32	s0, s14
 8002c14:	eef0 0a67 	vmov.f32	s1, s15
 8002c18:	f008 fb2a 	bl	800b270 <sin>
 8002c1c:	ec53 2b10 	vmov	r2, r3, d0
 8002c20:	4640      	mov	r0, r8
 8002c22:	4649      	mov	r1, r9
 8002c24:	f7fd fce8 	bl	80005f8 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	4629      	mov	r1, r5
 8002c30:	f7fd fb2c 	bl	800028c <__adddf3>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fd ffb4 	bl	8000ba8 <__aeabi_d2f>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a93      	ldr	r2, [pc, #588]	; (8002e90 <calc_angles+0x348>)
 8002c44:	6053      	str	r3, [r2, #4]
  gyro_angle[X] -= gyro_angle[Y] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002c46:	4b92      	ldr	r3, [pc, #584]	; (8002e90 <calc_angles+0x348>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fc7c 	bl	8000548 <__aeabi_f2d>
 8002c50:	4604      	mov	r4, r0
 8002c52:	460d      	mov	r5, r1
 8002c54:	4b8e      	ldr	r3, [pc, #568]	; (8002e90 <calc_angles+0x348>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc75 	bl	8000548 <__aeabi_f2d>
 8002c5e:	4680      	mov	r8, r0
 8002c60:	4689      	mov	r9, r1
 8002c62:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <calc_angles+0x354>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fc6e 	bl	8000548 <__aeabi_f2d>
 8002c6c:	a382      	add	r3, pc, #520	; (adr r3, 8002e78 <calc_angles+0x330>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f7fd fcc1 	bl	80005f8 <__aeabi_dmul>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	ec43 2b17 	vmov	d7, r2, r3
 8002c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c82:	eef0 0a67 	vmov.f32	s1, s15
 8002c86:	f008 faf3 	bl	800b270 <sin>
 8002c8a:	ec53 2b10 	vmov	r2, r3, d0
 8002c8e:	4640      	mov	r0, r8
 8002c90:	4649      	mov	r1, r9
 8002c92:	f7fd fcb1 	bl	80005f8 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd faf3 	bl	8000288 <__aeabi_dsub>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff7d 	bl	8000ba8 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a77      	ldr	r2, [pc, #476]	; (8002e90 <calc_angles+0x348>)
 8002cb2:	6013      	str	r3, [r2, #0]

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  acc_total_vector = sqrt(pow(g_ax, 2) + pow(g_ay, 2) + pow(g_az, 2));
 8002cb4:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <calc_angles+0x358>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc45 	bl	8000548 <__aeabi_f2d>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002e80 <calc_angles+0x338>
 8002cc6:	ec43 2b10 	vmov	d0, r2, r3
 8002cca:	f008 fb5d 	bl	800b388 <pow>
 8002cce:	ec55 4b10 	vmov	r4, r5, d0
 8002cd2:	4b74      	ldr	r3, [pc, #464]	; (8002ea4 <calc_angles+0x35c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc36 	bl	8000548 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8002e80 <calc_angles+0x338>
 8002ce4:	ec43 2b10 	vmov	d0, r2, r3
 8002ce8:	f008 fb4e 	bl	800b388 <pow>
 8002cec:	ec53 2b10 	vmov	r2, r3, d0
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	f7fd faca 	bl	800028c <__adddf3>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	461d      	mov	r5, r3
 8002d00:	4b69      	ldr	r3, [pc, #420]	; (8002ea8 <calc_angles+0x360>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc1f 	bl	8000548 <__aeabi_f2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8002e80 <calc_angles+0x338>
 8002d12:	ec43 2b10 	vmov	d0, r2, r3
 8002d16:	f008 fb37 	bl	800b388 <pow>
 8002d1a:	ec53 2b10 	vmov	r2, r3, d0
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fab3 	bl	800028c <__adddf3>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	ec43 2b17 	vmov	d7, r2, r3
 8002d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d32:	eef0 0a67 	vmov.f32	s1, s15
 8002d36:	f008 fb97 	bl	800b468 <sqrt>
 8002d3a:	ec53 2b10 	vmov	r2, r3, d0
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ff09 	bl	8000b58 <__aeabi_d2iz>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <calc_angles+0x364>)
 8002d4a:	6013      	str	r3, [r2, #0]

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(g_ax) < acc_total_vector) {
 8002d4c:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <calc_angles+0x358>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d56:	ee17 3a90 	vmov	r3, s15
 8002d5a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002d5e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002d62:	4b52      	ldr	r3, [pc, #328]	; (8002eac <calc_angles+0x364>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	da24      	bge.n	8002db4 <calc_angles+0x26c>
    acc_angle[X] = asin((float)g_ay / acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8002d6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <calc_angles+0x35c>)
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <calc_angles+0x364>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d80:	ee16 0a90 	vmov	r0, s13
 8002d84:	f7fd fbe0 	bl	8000548 <__aeabi_f2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	ec43 2b10 	vmov	d0, r2, r3
 8002d90:	f008 fac6 	bl	800b320 <asin>
 8002d94:	ec51 0b10 	vmov	r0, r1, d0
 8002d98:	a33b      	add	r3, pc, #236	; (adr r3, 8002e88 <calc_angles+0x340>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f7fd fc2b 	bl	80005f8 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd fefd 	bl	8000ba8 <__aeabi_d2f>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4a3f      	ldr	r2, [pc, #252]	; (8002eb0 <calc_angles+0x368>)
 8002db2:	6013      	str	r3, [r2, #0]
  }

  if (abs(g_ay) < acc_total_vector) {
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <calc_angles+0x35c>)
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dbe:	ee17 3a90 	vmov	r3, s15
 8002dc2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002dc6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002dca:	4b38      	ldr	r3, [pc, #224]	; (8002eac <calc_angles+0x364>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	da24      	bge.n	8002e1c <calc_angles+0x2d4>
    acc_angle[Y] = asin((float)g_ax / acc_total_vector) * (180 / M_PI);
 8002dd2:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <calc_angles+0x358>)
 8002dd4:	ed93 7a00 	vldr	s14, [r3]
 8002dd8:	4b34      	ldr	r3, [pc, #208]	; (8002eac <calc_angles+0x364>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002de8:	ee16 0a90 	vmov	r0, s13
 8002dec:	f7fd fbac 	bl	8000548 <__aeabi_f2d>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	ec43 2b10 	vmov	d0, r2, r3
 8002df8:	f008 fa92 	bl	800b320 <asin>
 8002dfc:	ec51 0b10 	vmov	r0, r1, d0
 8002e00:	a321      	add	r3, pc, #132	; (adr r3, 8002e88 <calc_angles+0x340>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fbf7 	bl	80005f8 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7fd fec9 	bl	8000ba8 <__aeabi_d2f>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <calc_angles+0x368>)
 8002e1a:	6053      	str	r3, [r2, #4]
  }

  if (initialized == 1) {
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <calc_angles+0x36c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d178      	bne.n	8002f16 <calc_angles+0x3ce>
    // Correct the drift of the gyro with the accelerometer
    gyro_angle[X] = gyro_angle[X] * 0.5 + acc_angle[X] * 0.5;
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <calc_angles+0x348>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fb8d 	bl	8000548 <__aeabi_f2d>
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <calc_angles+0x370>)
 8002e34:	f7fd fbe0 	bl	80005f8 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <calc_angles+0x368>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb7f 	bl	8000548 <__aeabi_f2d>
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <calc_angles+0x370>)
 8002e50:	f7fd fbd2 	bl	80005f8 <__aeabi_dmul>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4620      	mov	r0, r4
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	f7fd fa16 	bl	800028c <__adddf3>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	e028      	b.n	8002ebc <calc_angles+0x374>
 8002e6a:	bf00      	nop
 8002e6c:	f3af 8000 	nop.w
 8002e70:	00000000 	.word	0x00000000
 8002e74:	40c99600 	.word	0x40c99600
 8002e78:	fb7aa1c6 	.word	0xfb7aa1c6
 8002e7c:	3eb65a3c 	.word	0x3eb65a3c
 8002e80:	00000000 	.word	0x00000000
 8002e84:	40000000 	.word	0x40000000
 8002e88:	1a63c1f8 	.word	0x1a63c1f8
 8002e8c:	404ca5dc 	.word	0x404ca5dc
 8002e90:	20000610 	.word	0x20000610
 8002e94:	20000604 	.word	0x20000604
 8002e98:	20000608 	.word	0x20000608
 8002e9c:	2000060c 	.word	0x2000060c
 8002ea0:	200005f8 	.word	0x200005f8
 8002ea4:	200005fc 	.word	0x200005fc
 8002ea8:	20000600 	.word	0x20000600
 8002eac:	20000634 	.word	0x20000634
 8002eb0:	2000061c 	.word	0x2000061c
 8002eb4:	20000638 	.word	0x20000638
 8002eb8:	3fe00000 	.word	0x3fe00000
 8002ebc:	f7fd fe74 	bl	8000ba8 <__aeabi_d2f>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4a65      	ldr	r2, [pc, #404]	; (8003058 <calc_angles+0x510>)
 8002ec4:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = gyro_angle[Y] * 0.5 + acc_angle[Y] * 0.5;
 8002ec6:	4b64      	ldr	r3, [pc, #400]	; (8003058 <calc_angles+0x510>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fb3c 	bl	8000548 <__aeabi_f2d>
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <calc_angles+0x514>)
 8002ed6:	f7fd fb8f 	bl	80005f8 <__aeabi_dmul>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4614      	mov	r4, r2
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <calc_angles+0x518>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb2e 	bl	8000548 <__aeabi_f2d>
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	4b5a      	ldr	r3, [pc, #360]	; (800305c <calc_angles+0x514>)
 8002ef2:	f7fd fb81 	bl	80005f8 <__aeabi_dmul>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4620      	mov	r0, r4
 8002efc:	4629      	mov	r1, r5
 8002efe:	f7fd f9c5 	bl	800028c <__adddf3>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7fd fe4d 	bl	8000ba8 <__aeabi_d2f>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4a51      	ldr	r2, [pc, #324]	; (8003058 <calc_angles+0x510>)
 8002f12:	6053      	str	r3, [r2, #4]
 8002f14:	e00a      	b.n	8002f2c <calc_angles+0x3e4>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    gyro_angle[X] = acc_angle[X];
 8002f16:	4b52      	ldr	r3, [pc, #328]	; (8003060 <calc_angles+0x518>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <calc_angles+0x510>)
 8002f1c:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = acc_angle[Y];
 8002f1e:	4b50      	ldr	r3, [pc, #320]	; (8003060 <calc_angles+0x518>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a4d      	ldr	r2, [pc, #308]	; (8003058 <calc_angles+0x510>)
 8002f24:	6053      	str	r3, [r2, #4]

    initialized = 1;
 8002f26:	4b4f      	ldr	r3, [pc, #316]	; (8003064 <calc_angles+0x51c>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
  }

  // To dampen the pitch and roll angles a complementary filter is used
  measures[ROLL] = measures[ROLL] * 0.9 + gyro_angle[X] * 0.1;
 8002f2c:	4b4e      	ldr	r3, [pc, #312]	; (8003068 <calc_angles+0x520>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fb09 	bl	8000548 <__aeabi_f2d>
 8002f36:	a342      	add	r3, pc, #264	; (adr r3, 8003040 <calc_angles+0x4f8>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd fb5c 	bl	80005f8 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	4b43      	ldr	r3, [pc, #268]	; (8003058 <calc_angles+0x510>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fafb 	bl	8000548 <__aeabi_f2d>
 8002f52:	a33d      	add	r3, pc, #244	; (adr r3, 8003048 <calc_angles+0x500>)
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f7fd fb4e 	bl	80005f8 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f992 	bl	800028c <__adddf3>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe1a 	bl	8000ba8 <__aeabi_d2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <calc_angles+0x520>)
 8002f78:	6093      	str	r3, [r2, #8]
  measures[PITCH] = measures[PITCH] * 0.9 + gyro_angle[Y] * 0.1;
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <calc_angles+0x520>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fae2 	bl	8000548 <__aeabi_f2d>
 8002f84:	a32e      	add	r3, pc, #184	; (adr r3, 8003040 <calc_angles+0x4f8>)
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f7fd fb35 	bl	80005f8 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4614      	mov	r4, r2
 8002f94:	461d      	mov	r5, r3
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <calc_angles+0x510>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fad4 	bl	8000548 <__aeabi_f2d>
 8002fa0:	a329      	add	r3, pc, #164	; (adr r3, 8003048 <calc_angles+0x500>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f7fd fb27 	bl	80005f8 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4620      	mov	r0, r4
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	f7fd f96b 	bl	800028c <__adddf3>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7fd fdf3 	bl	8000ba8 <__aeabi_d2f>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a28      	ldr	r2, [pc, #160]	; (8003068 <calc_angles+0x520>)
 8002fc6:	6053      	str	r3, [r2, #4]
  measures[YAW] = -g_gz / SSF_GYRO; // Store the angular motion for this axis
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <calc_angles+0x524>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	eeb1 7a67 	vneg.f32	s14, s15
 8002fd2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8003070 <calc_angles+0x528>
 8002fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fda:	4b23      	ldr	r3, [pc, #140]	; (8003068 <calc_angles+0x520>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]

  // Norm [-1, 1]
  g_angle_x = -measures[PITCH];
 8002fe0:	4b21      	ldr	r3, [pc, #132]	; (8003068 <calc_angles+0x520>)
 8002fe2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fe6:	eef1 7a67 	vneg.f32	s15, s15
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <calc_angles+0x52c>)
 8002fec:	edc3 7a00 	vstr	s15, [r3]
  g_angle_y = measures[ROLL];
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <calc_angles+0x520>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <calc_angles+0x530>)
 8002ff6:	6013      	str	r3, [r2, #0]
  g_angle_z += measures[YAW]*0.001;
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <calc_angles+0x534>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd faa3 	bl	8000548 <__aeabi_f2d>
 8003002:	4604      	mov	r4, r0
 8003004:	460d      	mov	r5, r1
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <calc_angles+0x520>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fa9c 	bl	8000548 <__aeabi_f2d>
 8003010:	a30f      	add	r3, pc, #60	; (adr r3, 8003050 <calc_angles+0x508>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f7fd faef 	bl	80005f8 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4620      	mov	r0, r4
 8003020:	4629      	mov	r1, r5
 8003022:	f7fd f933 	bl	800028c <__adddf3>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fdbb 	bl	8000ba8 <__aeabi_d2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <calc_angles+0x534>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800303e:	bf00      	nop
 8003040:	cccccccd 	.word	0xcccccccd
 8003044:	3feccccc 	.word	0x3feccccc
 8003048:	9999999a 	.word	0x9999999a
 800304c:	3fb99999 	.word	0x3fb99999
 8003050:	d2f1a9fc 	.word	0xd2f1a9fc
 8003054:	3f50624d 	.word	0x3f50624d
 8003058:	20000610 	.word	0x20000610
 800305c:	3fe00000 	.word	0x3fe00000
 8003060:	2000061c 	.word	0x2000061c
 8003064:	20000638 	.word	0x20000638
 8003068:	20000628 	.word	0x20000628
 800306c:	2000060c 	.word	0x2000060c
 8003070:	42830000 	.word	0x42830000
 8003074:	2000063c 	.word	0x2000063c
 8003078:	20000640 	.word	0x20000640
 800307c:	20000644 	.word	0x20000644

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <NMI_Handler+0x4>

08003086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <HardFault_Handler+0x4>

0800308c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <MemManage_Handler+0x4>

08003092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <UsageFault_Handler+0x4>

0800309e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030cc:	f001 f902 	bl	80042d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	0000      	movs	r0, r0
	...

080030d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  // Activate reading
  MPU6050_update(&g_mpu6050);
 80030de:	48ca      	ldr	r0, [pc, #808]	; (8003408 <TIM3_IRQHandler+0x330>)
 80030e0:	f7fe fea2 	bl	8001e28 <MPU6050_update>
  MS5611_update(&g_ms5611);
 80030e4:	48c9      	ldr	r0, [pc, #804]	; (800340c <TIM3_IRQHandler+0x334>)
 80030e6:	f7ff fa7f 	bl	80025e8 <MS5611_update>

  // Raw 6-axis, remove noise
  g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], g_mpu6050.ax) + g_ax_offset;
 80030ea:	4bc7      	ldr	r3, [pc, #796]	; (8003408 <TIM3_IRQHandler+0x330>)
 80030ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80030f0:	eeb0 0a67 	vmov.f32	s0, s15
 80030f4:	48c6      	ldr	r0, [pc, #792]	; (8003410 <TIM3_IRQHandler+0x338>)
 80030f6:	f7fd ff42 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80030fa:	eeb0 7a40 	vmov.f32	s14, s0
 80030fe:	4bc5      	ldr	r3, [pc, #788]	; (8003414 <TIM3_IRQHandler+0x33c>)
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	4bc3      	ldr	r3, [pc, #780]	; (8003418 <TIM3_IRQHandler+0x340>)
 800310a:	edc3 7a00 	vstr	s15, [r3]
  g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], g_mpu6050.ay) + g_ay_offset;
 800310e:	4bbe      	ldr	r3, [pc, #760]	; (8003408 <TIM3_IRQHandler+0x330>)
 8003110:	edd3 7a03 	vldr	s15, [r3, #12]
 8003114:	eeb0 0a67 	vmov.f32	s0, s15
 8003118:	48c0      	ldr	r0, [pc, #768]	; (800341c <TIM3_IRQHandler+0x344>)
 800311a:	f7fd ff30 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 800311e:	eeb0 7a40 	vmov.f32	s14, s0
 8003122:	4bbf      	ldr	r3, [pc, #764]	; (8003420 <TIM3_IRQHandler+0x348>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312c:	4bbd      	ldr	r3, [pc, #756]	; (8003424 <TIM3_IRQHandler+0x34c>)
 800312e:	edc3 7a00 	vstr	s15, [r3]
  g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], g_mpu6050.az) + g_az_offset;
 8003132:	4bb5      	ldr	r3, [pc, #724]	; (8003408 <TIM3_IRQHandler+0x330>)
 8003134:	edd3 7a04 	vldr	s15, [r3, #16]
 8003138:	eeb0 0a67 	vmov.f32	s0, s15
 800313c:	48ba      	ldr	r0, [pc, #744]	; (8003428 <TIM3_IRQHandler+0x350>)
 800313e:	f7fd ff1e 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003142:	eeb0 7a40 	vmov.f32	s14, s0
 8003146:	4bb9      	ldr	r3, [pc, #740]	; (800342c <TIM3_IRQHandler+0x354>)
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003150:	4bb7      	ldr	r3, [pc, #732]	; (8003430 <TIM3_IRQHandler+0x358>)
 8003152:	edc3 7a00 	vstr	s15, [r3]
  g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], g_mpu6050.gx) + g_gx_offset;
 8003156:	4bac      	ldr	r3, [pc, #688]	; (8003408 <TIM3_IRQHandler+0x330>)
 8003158:	edd3 7a06 	vldr	s15, [r3, #24]
 800315c:	eeb0 0a67 	vmov.f32	s0, s15
 8003160:	48b4      	ldr	r0, [pc, #720]	; (8003434 <TIM3_IRQHandler+0x35c>)
 8003162:	f7fd ff0c 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003166:	eeb0 7a40 	vmov.f32	s14, s0
 800316a:	4bb3      	ldr	r3, [pc, #716]	; (8003438 <TIM3_IRQHandler+0x360>)
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	4bb1      	ldr	r3, [pc, #708]	; (800343c <TIM3_IRQHandler+0x364>)
 8003176:	edc3 7a00 	vstr	s15, [r3]
  g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], g_mpu6050.gy) + g_gy_offset;
 800317a:	4ba3      	ldr	r3, [pc, #652]	; (8003408 <TIM3_IRQHandler+0x330>)
 800317c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003180:	eeb0 0a67 	vmov.f32	s0, s15
 8003184:	48ae      	ldr	r0, [pc, #696]	; (8003440 <TIM3_IRQHandler+0x368>)
 8003186:	f7fd fefa 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 800318a:	eeb0 7a40 	vmov.f32	s14, s0
 800318e:	4bad      	ldr	r3, [pc, #692]	; (8003444 <TIM3_IRQHandler+0x36c>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003198:	4bab      	ldr	r3, [pc, #684]	; (8003448 <TIM3_IRQHandler+0x370>)
 800319a:	edc3 7a00 	vstr	s15, [r3]
  g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], g_mpu6050.gz) + g_gz_offset;
 800319e:	4b9a      	ldr	r3, [pc, #616]	; (8003408 <TIM3_IRQHandler+0x330>)
 80031a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80031a4:	eeb0 0a67 	vmov.f32	s0, s15
 80031a8:	48a8      	ldr	r0, [pc, #672]	; (800344c <TIM3_IRQHandler+0x374>)
 80031aa:	f7fd fee8 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80031ae:	eeb0 7a40 	vmov.f32	s14, s0
 80031b2:	4ba7      	ldr	r3, [pc, #668]	; (8003450 <TIM3_IRQHandler+0x378>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	4ba5      	ldr	r3, [pc, #660]	; (8003454 <TIM3_IRQHandler+0x37c>)
 80031be:	edc3 7a00 	vstr	s15, [r3]
  g_altitude = g_ms5611.altitude;
 80031c2:	4b92      	ldr	r3, [pc, #584]	; (800340c <TIM3_IRQHandler+0x334>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	4aa4      	ldr	r2, [pc, #656]	; (8003458 <TIM3_IRQHandler+0x380>)
 80031c8:	6013      	str	r3, [r2, #0]

  calc_angles();
 80031ca:	f7ff fcbd 	bl	8002b48 <calc_angles>

  g_gyro_x = limit(g_gx, -2000, 2000) / 2000;
 80031ce:	4b9b      	ldr	r3, [pc, #620]	; (800343c <TIM3_IRQHandler+0x364>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ed9f 1aa1 	vldr	s2, [pc, #644]	; 800345c <TIM3_IRQHandler+0x384>
 80031d8:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8003460 <TIM3_IRQHandler+0x388>
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	f7ff fc6c 	bl	8002abc <limit>
 80031e4:	eeb0 7a40 	vmov.f32	s14, s0
 80031e8:	eddf 6a9c 	vldr	s13, [pc, #624]	; 800345c <TIM3_IRQHandler+0x384>
 80031ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f0:	4b9c      	ldr	r3, [pc, #624]	; (8003464 <TIM3_IRQHandler+0x38c>)
 80031f2:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_y = limit(g_gy, -2000, 2000) / 2000;
 80031f6:	4b94      	ldr	r3, [pc, #592]	; (8003448 <TIM3_IRQHandler+0x370>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ed9f 1a97 	vldr	s2, [pc, #604]	; 800345c <TIM3_IRQHandler+0x384>
 8003200:	eddf 0a97 	vldr	s1, [pc, #604]	; 8003460 <TIM3_IRQHandler+0x388>
 8003204:	eeb0 0a67 	vmov.f32	s0, s15
 8003208:	f7ff fc58 	bl	8002abc <limit>
 800320c:	eeb0 7a40 	vmov.f32	s14, s0
 8003210:	eddf 6a92 	vldr	s13, [pc, #584]	; 800345c <TIM3_IRQHandler+0x384>
 8003214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003218:	4b93      	ldr	r3, [pc, #588]	; (8003468 <TIM3_IRQHandler+0x390>)
 800321a:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_z = limit(g_gz, -2000, 2000) / 2000;
 800321e:	4b8d      	ldr	r3, [pc, #564]	; (8003454 <TIM3_IRQHandler+0x37c>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800345c <TIM3_IRQHandler+0x384>
 8003228:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8003460 <TIM3_IRQHandler+0x388>
 800322c:	eeb0 0a67 	vmov.f32	s0, s15
 8003230:	f7ff fc44 	bl	8002abc <limit>
 8003234:	eeb0 7a40 	vmov.f32	s14, s0
 8003238:	eddf 6a88 	vldr	s13, [pc, #544]	; 800345c <TIM3_IRQHandler+0x384>
 800323c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003240:	4b8a      	ldr	r3, [pc, #552]	; (800346c <TIM3_IRQHandler+0x394>)
 8003242:	edc3 7a00 	vstr	s15, [r3]

  // Control pitch, roll, yaw using offsets
  float angle_x = limit(g_angle_x, -90, 90) / 90 - 0.01*g_pitch;
 8003246:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <TIM3_IRQHandler+0x398>)
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ed9f 1a89 	vldr	s2, [pc, #548]	; 8003474 <TIM3_IRQHandler+0x39c>
 8003250:	eddf 0a89 	vldr	s1, [pc, #548]	; 8003478 <TIM3_IRQHandler+0x3a0>
 8003254:	eeb0 0a67 	vmov.f32	s0, s15
 8003258:	f7ff fc30 	bl	8002abc <limit>
 800325c:	eef0 7a40 	vmov.f32	s15, s0
 8003260:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003474 <TIM3_IRQHandler+0x39c>
 8003264:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003268:	ee16 0a90 	vmov	r0, s13
 800326c:	f7fd f96c 	bl	8000548 <__aeabi_f2d>
 8003270:	4604      	mov	r4, r0
 8003272:	460d      	mov	r5, r1
 8003274:	4b81      	ldr	r3, [pc, #516]	; (800347c <TIM3_IRQHandler+0x3a4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd f965 	bl	8000548 <__aeabi_f2d>
 800327e:	a360      	add	r3, pc, #384	; (adr r3, 8003400 <TIM3_IRQHandler+0x328>)
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f7fd f9b8 	bl	80005f8 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4620      	mov	r0, r4
 800328e:	4629      	mov	r1, r5
 8003290:	f7fc fffa 	bl	8000288 <__aeabi_dsub>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	f7fd fc84 	bl	8000ba8 <__aeabi_d2f>
 80032a0:	4603      	mov	r3, r0
 80032a2:	60fb      	str	r3, [r7, #12]
  float angle_y = limit(g_angle_y, -90, 90) / 90 - 0.01*g_roll;
 80032a4:	4b76      	ldr	r3, [pc, #472]	; (8003480 <TIM3_IRQHandler+0x3a8>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8003474 <TIM3_IRQHandler+0x39c>
 80032ae:	eddf 0a72 	vldr	s1, [pc, #456]	; 8003478 <TIM3_IRQHandler+0x3a0>
 80032b2:	eeb0 0a67 	vmov.f32	s0, s15
 80032b6:	f7ff fc01 	bl	8002abc <limit>
 80032ba:	eef0 7a40 	vmov.f32	s15, s0
 80032be:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003474 <TIM3_IRQHandler+0x39c>
 80032c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032c6:	ee16 0a90 	vmov	r0, s13
 80032ca:	f7fd f93d 	bl	8000548 <__aeabi_f2d>
 80032ce:	4604      	mov	r4, r0
 80032d0:	460d      	mov	r5, r1
 80032d2:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <TIM3_IRQHandler+0x3ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f936 	bl	8000548 <__aeabi_f2d>
 80032dc:	a348      	add	r3, pc, #288	; (adr r3, 8003400 <TIM3_IRQHandler+0x328>)
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f7fd f989 	bl	80005f8 <__aeabi_dmul>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4620      	mov	r0, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	f7fc ffcb 	bl	8000288 <__aeabi_dsub>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	f7fd fc55 	bl	8000ba8 <__aeabi_d2f>
 80032fe:	4603      	mov	r3, r0
 8003300:	60bb      	str	r3, [r7, #8]
  float angle_z = limit(g_angle_z, -90, 90) / 90 - 0.01*g_yaw;
 8003302:	4b61      	ldr	r3, [pc, #388]	; (8003488 <TIM3_IRQHandler+0x3b0>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8003474 <TIM3_IRQHandler+0x39c>
 800330c:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8003478 <TIM3_IRQHandler+0x3a0>
 8003310:	eeb0 0a67 	vmov.f32	s0, s15
 8003314:	f7ff fbd2 	bl	8002abc <limit>
 8003318:	eef0 7a40 	vmov.f32	s15, s0
 800331c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003474 <TIM3_IRQHandler+0x39c>
 8003320:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003324:	ee16 0a90 	vmov	r0, s13
 8003328:	f7fd f90e 	bl	8000548 <__aeabi_f2d>
 800332c:	4604      	mov	r4, r0
 800332e:	460d      	mov	r5, r1
 8003330:	4b56      	ldr	r3, [pc, #344]	; (800348c <TIM3_IRQHandler+0x3b4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f907 	bl	8000548 <__aeabi_f2d>
 800333a:	a331      	add	r3, pc, #196	; (adr r3, 8003400 <TIM3_IRQHandler+0x328>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fd f95a 	bl	80005f8 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4620      	mov	r0, r4
 800334a:	4629      	mov	r1, r5
 800334c:	f7fc ff9c 	bl	8000288 <__aeabi_dsub>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	f7fd fc26 	bl	8000ba8 <__aeabi_d2f>
 800335c:	4603      	mov	r3, r0
 800335e:	607b      	str	r3, [r7, #4]

  if (g_thrust <= -99 && g_yaw <= -99
 8003360:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <TIM3_IRQHandler+0x3b8>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003494 <TIM3_IRQHandler+0x3bc>
 800336a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	d820      	bhi.n	80033b6 <TIM3_IRQHandler+0x2de>
 8003374:	4b45      	ldr	r3, [pc, #276]	; (800348c <TIM3_IRQHandler+0x3b4>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003494 <TIM3_IRQHandler+0x3bc>
 800337e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	d816      	bhi.n	80033b6 <TIM3_IRQHandler+0x2de>
      && g_pitch <= -99 && g_roll >= 98) {
 8003388:	4b3c      	ldr	r3, [pc, #240]	; (800347c <TIM3_IRQHandler+0x3a4>)
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003494 <TIM3_IRQHandler+0x3bc>
 8003392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	d80c      	bhi.n	80033b6 <TIM3_IRQHandler+0x2de>
 800339c:	4b39      	ldr	r3, [pc, #228]	; (8003484 <TIM3_IRQHandler+0x3ac>)
 800339e:	edd3 7a00 	vldr	s15, [r3]
 80033a2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003498 <TIM3_IRQHandler+0x3c0>
 80033a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	db02      	blt.n	80033b6 <TIM3_IRQHandler+0x2de>
    fly_mode = ready;
 80033b0:	4b3a      	ldr	r3, [pc, #232]	; (800349c <TIM3_IRQHandler+0x3c4>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
  }

  g_conn_lost_counter += 1;
 80033b6:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <TIM3_IRQHandler+0x3c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	4a38      	ldr	r2, [pc, #224]	; (80034a0 <TIM3_IRQHandler+0x3c8>)
 80033be:	6013      	str	r3, [r2, #0]
  if (g_conn_lost_counter > MAX_LOST_CONN_COUNTER || g_conn_lost_counter < 0) {
 80033c0:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <TIM3_IRQHandler+0x3c8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b32      	cmp	r3, #50	; 0x32
 80033c6:	dc03      	bgt.n	80033d0 <TIM3_IRQHandler+0x2f8>
 80033c8:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <TIM3_IRQHandler+0x3c8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da14      	bge.n	80033fa <TIM3_IRQHandler+0x322>
    g_I_pitch_accumulated = 0;
 80033d0:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <TIM3_IRQHandler+0x3cc>)
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
    g_I_roll_accumulated = 0;
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <TIM3_IRQHandler+0x3d0>)
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
    g_I_yaw_accumulated = 0;
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <TIM3_IRQHandler+0x3d4>)
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80033e8:	230f      	movs	r3, #15
 80033ea:	220f      	movs	r2, #15
 80033ec:	210f      	movs	r1, #15
 80033ee:	200f      	movs	r0, #15
 80033f0:	f7ff fb8e 	bl	8002b10 <ctl_motors_speed>
    fly_mode = init;
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <TIM3_IRQHandler+0x3c4>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 80033fa:	4b28      	ldr	r3, [pc, #160]	; (800349c <TIM3_IRQHandler+0x3c4>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	e057      	b.n	80034b0 <TIM3_IRQHandler+0x3d8>
 8003400:	47ae147b 	.word	0x47ae147b
 8003404:	3f847ae1 	.word	0x3f847ae1
 8003408:	20000444 	.word	0x20000444
 800340c:	20000468 	.word	0x20000468
 8003410:	200002c4 	.word	0x200002c4
 8003414:	20000004 	.word	0x20000004
 8003418:	200005f8 	.word	0x200005f8
 800341c:	200002dc 	.word	0x200002dc
 8003420:	20000008 	.word	0x20000008
 8003424:	200005fc 	.word	0x200005fc
 8003428:	200002f4 	.word	0x200002f4
 800342c:	2000000c 	.word	0x2000000c
 8003430:	20000600 	.word	0x20000600
 8003434:	2000030c 	.word	0x2000030c
 8003438:	20000010 	.word	0x20000010
 800343c:	20000604 	.word	0x20000604
 8003440:	20000324 	.word	0x20000324
 8003444:	20000014 	.word	0x20000014
 8003448:	20000608 	.word	0x20000608
 800344c:	2000033c 	.word	0x2000033c
 8003450:	20000018 	.word	0x20000018
 8003454:	2000060c 	.word	0x2000060c
 8003458:	20000654 	.word	0x20000654
 800345c:	44fa0000 	.word	0x44fa0000
 8003460:	c4fa0000 	.word	0xc4fa0000
 8003464:	20000648 	.word	0x20000648
 8003468:	2000064c 	.word	0x2000064c
 800346c:	20000650 	.word	0x20000650
 8003470:	2000063c 	.word	0x2000063c
 8003474:	42b40000 	.word	0x42b40000
 8003478:	c2b40000 	.word	0xc2b40000
 800347c:	200006e0 	.word	0x200006e0
 8003480:	20000640 	.word	0x20000640
 8003484:	200006e4 	.word	0x200006e4
 8003488:	20000644 	.word	0x20000644
 800348c:	200006e8 	.word	0x200006e8
 8003490:	200006dc 	.word	0x200006dc
 8003494:	c2c60000 	.word	0xc2c60000
 8003498:	42c40000 	.word	0x42c40000
 800349c:	20000658 	.word	0x20000658
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000664 	.word	0x20000664
 80034a8:	20000674 	.word	0x20000674
 80034ac:	20000684 	.word	0x20000684
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	f200 835a 	bhi.w	8003b6a <TIM3_IRQHandler+0xa92>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <TIM3_IRQHandler+0x3e4>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034d9 	.word	0x080034d9
 80034c0:	080034ff 	.word	0x080034ff
 80034c4:	08003545 	.word	0x08003545
 80034c8:	0800355b 	.word	0x0800355b
 80034cc:	08003571 	.word	0x08003571
 80034d0:	08003587 	.word	0x08003587
 80034d4:	0800365d 	.word	0x0800365d
    case init:
      g_I_pitch_accumulated = 0;
 80034d8:	4b55      	ldr	r3, [pc, #340]	; (8003630 <TIM3_IRQHandler+0x558>)
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 80034e0:	4b54      	ldr	r3, [pc, #336]	; (8003634 <TIM3_IRQHandler+0x55c>)
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <TIM3_IRQHandler+0x560>)
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80034f0:	230f      	movs	r3, #15
 80034f2:	220f      	movs	r2, #15
 80034f4:	210f      	movs	r1, #15
 80034f6:	200f      	movs	r0, #15
 80034f8:	f7ff fb0a 	bl	8002b10 <ctl_motors_speed>
      break;
 80034fc:	e335      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
    case ready:
      g_I_pitch_accumulated = 0;
 80034fe:	4b4c      	ldr	r3, [pc, #304]	; (8003630 <TIM3_IRQHandler+0x558>)
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003506:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <TIM3_IRQHandler+0x55c>)
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 800350e:	4b4a      	ldr	r3, [pc, #296]	; (8003638 <TIM3_IRQHandler+0x560>)
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003516:	f240 2323 	movw	r3, #547	; 0x223
 800351a:	f240 2223 	movw	r2, #547	; 0x223
 800351e:	f240 2123 	movw	r1, #547	; 0x223
 8003522:	f240 2023 	movw	r0, #547	; 0x223
 8003526:	f7ff faf3 	bl	8002b10 <ctl_motors_speed>
      if (g_thrust > 0) {
 800352a:	4b44      	ldr	r3, [pc, #272]	; (800363c <TIM3_IRQHandler+0x564>)
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	dc00      	bgt.n	800353c <TIM3_IRQHandler+0x464>
        fly_mode = testing_2;
      }

      break;
 800353a:	e316      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
        fly_mode = testing_2;
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <TIM3_IRQHandler+0x568>)
 800353e:	2206      	movs	r2, #6
 8003540:	701a      	strb	r2, [r3, #0]
      break;
 8003542:	e312      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
    case holding:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003544:	f240 2323 	movw	r3, #547	; 0x223
 8003548:	f240 2223 	movw	r2, #547	; 0x223
 800354c:	f240 2123 	movw	r1, #547	; 0x223
 8003550:	f240 2023 	movw	r0, #547	; 0x223
 8003554:	f7ff fadc 	bl	8002b10 <ctl_motors_speed>
      break;
 8003558:	e307      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
    case moving:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800355a:	f240 2323 	movw	r3, #547	; 0x223
 800355e:	f240 2223 	movw	r2, #547	; 0x223
 8003562:	f240 2123 	movw	r1, #547	; 0x223
 8003566:	f240 2023 	movw	r0, #547	; 0x223
 800356a:	f7ff fad1 	bl	8002b10 <ctl_motors_speed>
      break;
 800356e:	e2fc      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
    case landing:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003570:	f240 2323 	movw	r3, #547	; 0x223
 8003574:	f240 2223 	movw	r2, #547	; 0x223
 8003578:	f240 2123 	movw	r1, #547	; 0x223
 800357c:	f240 2023 	movw	r0, #547	; 0x223
 8003580:	f7ff fac6 	bl	8002b10 <ctl_motors_speed>
      break;
 8003584:	e2f1      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
    case testing_1:
      g_sig1 = MIN_SPEED + g_thrust;
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <TIM3_IRQHandler+0x564>)
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003644 <TIM3_IRQHandler+0x56c>
 8003590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <TIM3_IRQHandler+0x570>)
 8003596:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <TIM3_IRQHandler+0x564>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003644 <TIM3_IRQHandler+0x56c>
 80035a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035a8:	4b28      	ldr	r3, [pc, #160]	; (800364c <TIM3_IRQHandler+0x574>)
 80035aa:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 80035ae:	4b23      	ldr	r3, [pc, #140]	; (800363c <TIM3_IRQHandler+0x564>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003644 <TIM3_IRQHandler+0x56c>
 80035b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <TIM3_IRQHandler+0x578>)
 80035be:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <TIM3_IRQHandler+0x564>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003644 <TIM3_IRQHandler+0x56c>
 80035cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035d0:	4b20      	ldr	r3, [pc, #128]	; (8003654 <TIM3_IRQHandler+0x57c>)
 80035d2:	edc3 7a00 	vstr	s15, [r3]
      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <TIM3_IRQHandler+0x570>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <TIM3_IRQHandler+0x574>)
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <TIM3_IRQHandler+0x578>)
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <TIM3_IRQHandler+0x57c>)
 80035f6:	edd3 7a00 	vldr	s15, [r3]
 80035fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fe:	ee17 3a90 	vmov	r3, s15
 8003602:	ee16 2a10 	vmov	r2, s12
 8003606:	ee16 1a90 	vmov	r1, s13
 800360a:	ee17 0a10 	vmov	r0, s14
 800360e:	f7ff fa7f 	bl	8002b10 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <TIM3_IRQHandler+0x564>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003658 <TIM3_IRQHandler+0x580>
 800361c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003624:	d900      	bls.n	8003628 <TIM3_IRQHandler+0x550>
        fly_mode = init;
      }

      break;
 8003626:	e2a0      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
        fly_mode = init;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <TIM3_IRQHandler+0x568>)
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
      break;
 800362e:	e29c      	b.n	8003b6a <TIM3_IRQHandler+0xa92>
 8003630:	20000664 	.word	0x20000664
 8003634:	20000674 	.word	0x20000674
 8003638:	20000684 	.word	0x20000684
 800363c:	200006dc 	.word	0x200006dc
 8003640:	20000658 	.word	0x20000658
 8003644:	4408c000 	.word	0x4408c000
 8003648:	2000068c 	.word	0x2000068c
 800364c:	20000690 	.word	0x20000690
 8003650:	20000694 	.word	0x20000694
 8003654:	20000698 	.word	0x20000698
 8003658:	c2c60000 	.word	0xc2c60000
    case testing_2:
      g_P_pitch = angle_x*g_P_pitch_gain;
 800365c:	4bd0      	ldr	r3, [pc, #832]	; (80039a0 <TIM3_IRQHandler+0x8c8>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003668:	edd7 7a03 	vldr	s15, [r7, #12]
 800366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003670:	4bcc      	ldr	r3, [pc, #816]	; (80039a4 <TIM3_IRQHandler+0x8cc>)
 8003672:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_x*ACCUMULATION_TIME; // 0.005 = 1/FREQ
 8003676:	4bcc      	ldr	r3, [pc, #816]	; (80039a8 <TIM3_IRQHandler+0x8d0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff64 	bl	8000548 <__aeabi_f2d>
 8003680:	4604      	mov	r4, r0
 8003682:	460d      	mov	r5, r1
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7fc ff5f 	bl	8000548 <__aeabi_f2d>
 800368a:	a3c3      	add	r3, pc, #780	; (adr r3, 8003998 <TIM3_IRQHandler+0x8c0>)
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f7fc ffb2 	bl	80005f8 <__aeabi_dmul>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fc fdf6 	bl	800028c <__adddf3>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7fd fa7e 	bl	8000ba8 <__aeabi_d2f>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4abe      	ldr	r2, [pc, #760]	; (80039a8 <TIM3_IRQHandler+0x8d0>)
 80036b0:	6013      	str	r3, [r2, #0]
      g_I_pitch = limit(g_I_pitch_accumulated*g_I_pitch_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 80036b2:	4bbe      	ldr	r3, [pc, #760]	; (80039ac <TIM3_IRQHandler+0x8d4>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036be:	4bba      	ldr	r3, [pc, #744]	; (80039a8 <TIM3_IRQHandler+0x8d0>)
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c8:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 80039b0 <TIM3_IRQHandler+0x8d8>
 80036cc:	eddf 0ab9 	vldr	s1, [pc, #740]	; 80039b4 <TIM3_IRQHandler+0x8dc>
 80036d0:	eeb0 0a67 	vmov.f32	s0, s15
 80036d4:	f7ff f9f2 	bl	8002abc <limit>
 80036d8:	eef0 7a40 	vmov.f32	s15, s0
 80036dc:	4bb6      	ldr	r3, [pc, #728]	; (80039b8 <TIM3_IRQHandler+0x8e0>)
 80036de:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = g_gyro_y*g_D_pitch_gain;
 80036e2:	4bb6      	ldr	r3, [pc, #728]	; (80039bc <TIM3_IRQHandler+0x8e4>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ee:	4bb4      	ldr	r3, [pc, #720]	; (80039c0 <TIM3_IRQHandler+0x8e8>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f8:	4bb2      	ldr	r3, [pc, #712]	; (80039c4 <TIM3_IRQHandler+0x8ec>)
 80036fa:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = angle_y*g_P_roll_gain;
 80036fe:	4bb2      	ldr	r3, [pc, #712]	; (80039c8 <TIM3_IRQHandler+0x8f0>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800370a:	edd7 7a02 	vldr	s15, [r7, #8]
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	4bae      	ldr	r3, [pc, #696]	; (80039cc <TIM3_IRQHandler+0x8f4>)
 8003714:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_y*ACCUMULATION_TIME;
 8003718:	4bad      	ldr	r3, [pc, #692]	; (80039d0 <TIM3_IRQHandler+0x8f8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc ff13 	bl	8000548 <__aeabi_f2d>
 8003722:	4604      	mov	r4, r0
 8003724:	460d      	mov	r5, r1
 8003726:	68b8      	ldr	r0, [r7, #8]
 8003728:	f7fc ff0e 	bl	8000548 <__aeabi_f2d>
 800372c:	a39a      	add	r3, pc, #616	; (adr r3, 8003998 <TIM3_IRQHandler+0x8c0>)
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f7fc ff61 	bl	80005f8 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4620      	mov	r0, r4
 800373c:	4629      	mov	r1, r5
 800373e:	f7fc fda5 	bl	800028c <__adddf3>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f7fd fa2d 	bl	8000ba8 <__aeabi_d2f>
 800374e:	4603      	mov	r3, r0
 8003750:	4a9f      	ldr	r2, [pc, #636]	; (80039d0 <TIM3_IRQHandler+0x8f8>)
 8003752:	6013      	str	r3, [r2, #0]
      g_I_roll = limit(g_I_roll_accumulated*g_I_roll_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 8003754:	4b9f      	ldr	r3, [pc, #636]	; (80039d4 <TIM3_IRQHandler+0x8fc>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003760:	4b9b      	ldr	r3, [pc, #620]	; (80039d0 <TIM3_IRQHandler+0x8f8>)
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	ed9f 1a91 	vldr	s2, [pc, #580]	; 80039b0 <TIM3_IRQHandler+0x8d8>
 800376e:	eddf 0a91 	vldr	s1, [pc, #580]	; 80039b4 <TIM3_IRQHandler+0x8dc>
 8003772:	eeb0 0a67 	vmov.f32	s0, s15
 8003776:	f7ff f9a1 	bl	8002abc <limit>
 800377a:	eef0 7a40 	vmov.f32	s15, s0
 800377e:	4b96      	ldr	r3, [pc, #600]	; (80039d8 <TIM3_IRQHandler+0x900>)
 8003780:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = g_gyro_x*g_D_roll_gain;
 8003784:	4b95      	ldr	r3, [pc, #596]	; (80039dc <TIM3_IRQHandler+0x904>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003790:	4b93      	ldr	r3, [pc, #588]	; (80039e0 <TIM3_IRQHandler+0x908>)
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	4b92      	ldr	r3, [pc, #584]	; (80039e4 <TIM3_IRQHandler+0x90c>)
 800379c:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = angle_z*g_P_yaw_gain;
 80037a0:	4b91      	ldr	r3, [pc, #580]	; (80039e8 <TIM3_IRQHandler+0x910>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80037b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b4:	4b8d      	ldr	r3, [pc, #564]	; (80039ec <TIM3_IRQHandler+0x914>)
 80037b6:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_z*ACCUMULATION_TIME;
 80037ba:	4b8d      	ldr	r3, [pc, #564]	; (80039f0 <TIM3_IRQHandler+0x918>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fec2 	bl	8000548 <__aeabi_f2d>
 80037c4:	4604      	mov	r4, r0
 80037c6:	460d      	mov	r5, r1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fc febd 	bl	8000548 <__aeabi_f2d>
 80037ce:	a372      	add	r3, pc, #456	; (adr r3, 8003998 <TIM3_IRQHandler+0x8c0>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f7fc ff10 	bl	80005f8 <__aeabi_dmul>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4620      	mov	r0, r4
 80037de:	4629      	mov	r1, r5
 80037e0:	f7fc fd54 	bl	800028c <__adddf3>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd f9dc 	bl	8000ba8 <__aeabi_d2f>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4a7f      	ldr	r2, [pc, #508]	; (80039f0 <TIM3_IRQHandler+0x918>)
 80037f4:	6013      	str	r3, [r2, #0]
      g_I_yaw = limit(g_I_yaw_accumulated*g_I_yaw_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 80037f6:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <TIM3_IRQHandler+0x91c>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003802:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <TIM3_IRQHandler+0x918>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380c:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80039b0 <TIM3_IRQHandler+0x8d8>
 8003810:	eddf 0a68 	vldr	s1, [pc, #416]	; 80039b4 <TIM3_IRQHandler+0x8dc>
 8003814:	eeb0 0a67 	vmov.f32	s0, s15
 8003818:	f7ff f950 	bl	8002abc <limit>
 800381c:	eef0 7a40 	vmov.f32	s15, s0
 8003820:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <TIM3_IRQHandler+0x920>)
 8003822:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = g_gyro_z*g_D_yaw_gain;
 8003826:	4b75      	ldr	r3, [pc, #468]	; (80039fc <TIM3_IRQHandler+0x924>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003832:	4b73      	ldr	r3, [pc, #460]	; (8003a00 <TIM3_IRQHandler+0x928>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383c:	4b71      	ldr	r3, [pc, #452]	; (8003a04 <TIM3_IRQHandler+0x92c>)
 800383e:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + 3*g_thrust;
 8003842:	4b71      	ldr	r3, [pc, #452]	; (8003a08 <TIM3_IRQHandler+0x930>)
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800384c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003850:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003a0c <TIM3_IRQHandler+0x934>
 8003854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800385c:	ee17 3a90 	vmov	r3, s15
 8003860:	603b      	str	r3, [r7, #0]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800386c:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <TIM3_IRQHandler+0x8cc>)
 800386e:	edd3 6a00 	vldr	s13, [r3]
 8003872:	4b51      	ldr	r3, [pc, #324]	; (80039b8 <TIM3_IRQHandler+0x8e0>)
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800387c:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <TIM3_IRQHandler+0x8ec>)
 800387e:	edd3 7a00 	vldr	s15, [r3]
 8003882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800388a:	4b50      	ldr	r3, [pc, #320]	; (80039cc <TIM3_IRQHandler+0x8f4>)
 800388c:	edd3 6a00 	vldr	s13, [r3]
 8003890:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <TIM3_IRQHandler+0x900>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800389a:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <TIM3_IRQHandler+0x90c>)
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <TIM3_IRQHandler+0x914>)
 80038aa:	edd3 6a00 	vldr	s13, [r3]
 80038ae:	4b52      	ldr	r3, [pc, #328]	; (80039f8 <TIM3_IRQHandler+0x920>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038b8:	4b52      	ldr	r3, [pc, #328]	; (8003a04 <TIM3_IRQHandler+0x92c>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c6:	4b52      	ldr	r3, [pc, #328]	; (8003a10 <TIM3_IRQHandler+0x938>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038d6:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <TIM3_IRQHandler+0x8cc>)
 80038d8:	edd3 6a00 	vldr	s13, [r3]
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <TIM3_IRQHandler+0x8e0>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <TIM3_IRQHandler+0x8ec>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <TIM3_IRQHandler+0x8f4>)
 80038f6:	edd3 6a00 	vldr	s13, [r3]
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <TIM3_IRQHandler+0x900>)
 80038fc:	edd3 7a00 	vldr	s15, [r3]
 8003900:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <TIM3_IRQHandler+0x90c>)
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <TIM3_IRQHandler+0x914>)
 8003914:	edd3 6a00 	vldr	s13, [r3]
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <TIM3_IRQHandler+0x920>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <TIM3_IRQHandler+0x92c>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003930:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <TIM3_IRQHandler+0x93c>)
 8003932:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <TIM3_IRQHandler+0x8cc>)
 8003942:	edd3 6a00 	vldr	s13, [r3]
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <TIM3_IRQHandler+0x8e0>)
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <TIM3_IRQHandler+0x8ec>)
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <TIM3_IRQHandler+0x8f4>)
 8003960:	edd3 6a00 	vldr	s13, [r3]
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <TIM3_IRQHandler+0x900>)
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <TIM3_IRQHandler+0x90c>)
 8003970:	edd3 7a00 	vldr	s15, [r3]
 8003974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <TIM3_IRQHandler+0x914>)
 800397e:	edd3 6a00 	vldr	s13, [r3]
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <TIM3_IRQHandler+0x920>)
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <TIM3_IRQHandler+0x92c>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	e041      	b.n	8003a18 <TIM3_IRQHandler+0x940>
 8003994:	f3af 8000 	nop.w
 8003998:	1eb851ec 	.word	0x1eb851ec
 800399c:	3fb1eb85 	.word	0x3fb1eb85
 80039a0:	2000001c 	.word	0x2000001c
 80039a4:	2000065c 	.word	0x2000065c
 80039a8:	20000664 	.word	0x20000664
 80039ac:	2000001d 	.word	0x2000001d
 80039b0:	42c80000 	.word	0x42c80000
 80039b4:	c2c80000 	.word	0xc2c80000
 80039b8:	20000660 	.word	0x20000660
 80039bc:	2000001e 	.word	0x2000001e
 80039c0:	2000064c 	.word	0x2000064c
 80039c4:	20000668 	.word	0x20000668
 80039c8:	2000001f 	.word	0x2000001f
 80039cc:	2000066c 	.word	0x2000066c
 80039d0:	20000674 	.word	0x20000674
 80039d4:	20000020 	.word	0x20000020
 80039d8:	20000670 	.word	0x20000670
 80039dc:	20000021 	.word	0x20000021
 80039e0:	20000648 	.word	0x20000648
 80039e4:	20000678 	.word	0x20000678
 80039e8:	20000022 	.word	0x20000022
 80039ec:	2000067c 	.word	0x2000067c
 80039f0:	20000684 	.word	0x20000684
 80039f4:	20000023 	.word	0x20000023
 80039f8:	20000680 	.word	0x20000680
 80039fc:	20000024 	.word	0x20000024
 8003a00:	20000650 	.word	0x20000650
 8003a04:	20000688 	.word	0x20000688
 8003a08:	200006dc 	.word	0x200006dc
 8003a0c:	4408c000 	.word	0x4408c000
 8003a10:	2000068c 	.word	0x2000068c
 8003a14:	20000690 	.word	0x20000690
 8003a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a20:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <TIM3_IRQHandler+0xae4>)
 8003a22:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a30:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <TIM3_IRQHandler+0xae8>)
 8003a32:	edd3 6a00 	vldr	s13, [r3]
 8003a36:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <TIM3_IRQHandler+0xaec>)
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a40:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <TIM3_IRQHandler+0xaf0>)
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <TIM3_IRQHandler+0xaf4>)
 8003a50:	edd3 6a00 	vldr	s13, [r3]
 8003a54:	4b5e      	ldr	r3, [pc, #376]	; (8003bd0 <TIM3_IRQHandler+0xaf8>)
 8003a56:	edd3 7a00 	vldr	s15, [r3]
 8003a5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a5e:	4b5d      	ldr	r3, [pc, #372]	; (8003bd4 <TIM3_IRQHandler+0xafc>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <TIM3_IRQHandler+0xb00>)
 8003a6e:	edd3 6a00 	vldr	s13, [r3]
 8003a72:	4b5a      	ldr	r3, [pc, #360]	; (8003bdc <TIM3_IRQHandler+0xb04>)
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a7c:	4b58      	ldr	r3, [pc, #352]	; (8003be0 <TIM3_IRQHandler+0xb08>)
 8003a7e:	edd3 7a00 	vldr	s15, [r3]
 8003a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <TIM3_IRQHandler+0xb0c>)
 8003a8c:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003a90:	4b55      	ldr	r3, [pc, #340]	; (8003be8 <TIM3_IRQHandler+0xb10>)
 8003a92:	edd3 7a00 	vldr	s15, [r3]
 8003a96:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8003bec <TIM3_IRQHandler+0xb14>
 8003a9a:	eddf 0a55 	vldr	s1, [pc, #340]	; 8003bf0 <TIM3_IRQHandler+0xb18>
 8003a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa2:	f7ff f80b 	bl	8002abc <limit>
 8003aa6:	eef0 7a40 	vmov.f32	s15, s0
 8003aaa:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <TIM3_IRQHandler+0xb10>)
 8003aac:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 8003ab0:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <TIM3_IRQHandler+0xb1c>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
 8003ab6:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8003bec <TIM3_IRQHandler+0xb14>
 8003aba:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8003bf0 <TIM3_IRQHandler+0xb18>
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	f7fe fffb 	bl	8002abc <limit>
 8003ac6:	eef0 7a40 	vmov.f32	s15, s0
 8003aca:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <TIM3_IRQHandler+0xb1c>)
 8003acc:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <TIM3_IRQHandler+0xae4>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8003bec <TIM3_IRQHandler+0xb14>
 8003ada:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003bf0 <TIM3_IRQHandler+0xb18>
 8003ade:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae2:	f7fe ffeb 	bl	8002abc <limit>
 8003ae6:	eef0 7a40 	vmov.f32	s15, s0
 8003aea:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <TIM3_IRQHandler+0xae4>)
 8003aec:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 8003af0:	4b3c      	ldr	r3, [pc, #240]	; (8003be4 <TIM3_IRQHandler+0xb0c>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8003bec <TIM3_IRQHandler+0xb14>
 8003afa:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8003bf0 <TIM3_IRQHandler+0xb18>
 8003afe:	eeb0 0a67 	vmov.f32	s0, s15
 8003b02:	f7fe ffdb 	bl	8002abc <limit>
 8003b06:	eef0 7a40 	vmov.f32	s15, s0
 8003b0a:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <TIM3_IRQHandler+0xb0c>)
 8003b0c:	edc3 7a00 	vstr	s15, [r3]

      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <TIM3_IRQHandler+0xb10>)
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <TIM3_IRQHandler+0xb1c>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <TIM3_IRQHandler+0xae4>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <TIM3_IRQHandler+0xb0c>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b38:	ee17 3a90 	vmov	r3, s15
 8003b3c:	ee16 2a10 	vmov	r2, s12
 8003b40:	ee16 1a90 	vmov	r1, s13
 8003b44:	ee17 0a10 	vmov	r0, s14
 8003b48:	f7fe ffe2 	bl	8002b10 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <TIM3_IRQHandler+0xb20>)
 8003b4e:	edd3 7a00 	vldr	s15, [r3]
 8003b52:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003bfc <TIM3_IRQHandler+0xb24>
 8003b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	d900      	bls.n	8003b62 <TIM3_IRQHandler+0xa8a>
        fly_mode = init;
      }

      break;
 8003b60:	e002      	b.n	8003b68 <TIM3_IRQHandler+0xa90>
        fly_mode = init;
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <TIM3_IRQHandler+0xb28>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
      break;
 8003b68:	bf00      	nop
  }

#if MONITOR == 1
  monitor[0] = angle_x;
 8003b6a:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6013      	str	r3, [r2, #0]
  monitor[1] = angle_y;
 8003b70:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6053      	str	r3, [r2, #4]
  monitor[2] = angle_z;
 8003b76:	4a23      	ldr	r2, [pc, #140]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6093      	str	r3, [r2, #8]
  monitor[3] = g_gyro_x;
 8003b7c:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <TIM3_IRQHandler+0xb30>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003b82:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_gyro_y;
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <TIM3_IRQHandler+0xb34>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003b8a:	6113      	str	r3, [r2, #16]
  monitor[5] = g_gyro_z;
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <TIM3_IRQHandler+0xb38>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003b92:	6153      	str	r3, [r2, #20]
  monitor[6] = g_altitude;
 8003b94:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <TIM3_IRQHandler+0xb3c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003b9a:	6193      	str	r3, [r2, #24]
  monitor[7] = g_altitude;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <TIM3_IRQHandler+0xb3c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003ba2:	61d3      	str	r3, [r2, #28]
  monitor[8] = g_altitude;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <TIM3_IRQHandler+0xb3c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <TIM3_IRQHandler+0xb2c>)
 8003baa:	6213      	str	r3, [r2, #32]
  monitor[4] = g_sig4;
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bac:	481a      	ldr	r0, [pc, #104]	; (8003c18 <TIM3_IRQHandler+0xb40>)
 8003bae:	f004 fe56 	bl	800885e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000694 	.word	0x20000694
 8003bc0:	2000065c 	.word	0x2000065c
 8003bc4:	20000660 	.word	0x20000660
 8003bc8:	20000668 	.word	0x20000668
 8003bcc:	2000066c 	.word	0x2000066c
 8003bd0:	20000670 	.word	0x20000670
 8003bd4:	20000678 	.word	0x20000678
 8003bd8:	2000067c 	.word	0x2000067c
 8003bdc:	20000680 	.word	0x20000680
 8003be0:	20000688 	.word	0x20000688
 8003be4:	20000698 	.word	0x20000698
 8003be8:	2000068c 	.word	0x2000068c
 8003bec:	446cc000 	.word	0x446cc000
 8003bf0:	4408c000 	.word	0x4408c000
 8003bf4:	20000690 	.word	0x20000690
 8003bf8:	200006dc 	.word	0x200006dc
 8003bfc:	c2c60000 	.word	0xc2c60000
 8003c00:	20000658 	.word	0x20000658
 8003c04:	200006ec 	.word	0x200006ec
 8003c08:	20000648 	.word	0x20000648
 8003c0c:	2000064c 	.word	0x2000064c
 8003c10:	20000650 	.word	0x20000650
 8003c14:	20000654 	.word	0x20000654
 8003c18:	200001f0 	.word	0x200001f0

08003c1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <TIM4_IRQHandler+0x10>)
 8003c22:	f004 fe1c 	bl	800885e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000238 	.word	0x20000238

08003c30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <I2C1_EV_IRQHandler+0x10>)
 8003c36:	f001 fdb9 	bl	80057ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200000b4 	.word	0x200000b4

08003c44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <I2C1_ER_IRQHandler+0x10>)
 8003c4a:	f001 ff20 	bl	8005a8e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200000b4 	.word	0x200000b4

08003c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <USART1_IRQHandler+0x10>)
 8003c5e:	f005 ff77 	bl	8009b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000280 	.word	0x20000280

08003c6c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8003c88:	4b87      	ldr	r3, [pc, #540]	; (8003ea8 <HAL_UART_RxCpltCallback+0x228>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
  // To know whether this timer is hanging
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);

  // Serialise control values
  static uint8_t g_control_1st_idx = 0;
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8003c8e:	4b87      	ldr	r3, [pc, #540]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2bfe      	cmp	r3, #254	; 0xfe
 8003c94:	d102      	bne.n	8003c9c <HAL_UART_RxCpltCallback+0x1c>
 8003c96:	4b86      	ldr	r3, [pc, #536]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8003c9c:	4b83      	ldr	r3, [pc, #524]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2bfe      	cmp	r3, #254	; 0xfe
 8003ca2:	d102      	bne.n	8003caa <HAL_UART_RxCpltCallback+0x2a>
 8003ca4:	4b82      	ldr	r3, [pc, #520]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	701a      	strb	r2, [r3, #0]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8003caa:	4b80      	ldr	r3, [pc, #512]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003cac:	789b      	ldrb	r3, [r3, #2]
 8003cae:	2bfe      	cmp	r3, #254	; 0xfe
 8003cb0:	d102      	bne.n	8003cb8 <HAL_UART_RxCpltCallback+0x38>
 8003cb2:	4b7f      	ldr	r3, [pc, #508]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	701a      	strb	r2, [r3, #0]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8003cb8:	4b7c      	ldr	r3, [pc, #496]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003cba:	78db      	ldrb	r3, [r3, #3]
 8003cbc:	2bfe      	cmp	r3, #254	; 0xfe
 8003cbe:	d102      	bne.n	8003cc6 <HAL_UART_RxCpltCallback+0x46>
 8003cc0:	4b7b      	ldr	r3, [pc, #492]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	701a      	strb	r2, [r3, #0]
  if (g_control[4] == 254) g_control_1st_idx = 5;
 8003cc6:	4b79      	ldr	r3, [pc, #484]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003cc8:	791b      	ldrb	r3, [r3, #4]
 8003cca:	2bfe      	cmp	r3, #254	; 0xfe
 8003ccc:	d102      	bne.n	8003cd4 <HAL_UART_RxCpltCallback+0x54>
 8003cce:	4b78      	ldr	r3, [pc, #480]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	701a      	strb	r2, [r3, #0]
  if (g_control[5] == 254) g_control_1st_idx = 6;
 8003cd4:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003cd6:	795b      	ldrb	r3, [r3, #5]
 8003cd8:	2bfe      	cmp	r3, #254	; 0xfe
 8003cda:	d102      	bne.n	8003ce2 <HAL_UART_RxCpltCallback+0x62>
 8003cdc:	4b74      	ldr	r3, [pc, #464]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003cde:	2206      	movs	r2, #6
 8003ce0:	701a      	strb	r2, [r3, #0]
  if (g_control[6] == 254) g_control_1st_idx = 7;
 8003ce2:	4b72      	ldr	r3, [pc, #456]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003ce4:	799b      	ldrb	r3, [r3, #6]
 8003ce6:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce8:	d102      	bne.n	8003cf0 <HAL_UART_RxCpltCallback+0x70>
 8003cea:	4b71      	ldr	r3, [pc, #452]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	701a      	strb	r2, [r3, #0]
  if (g_control[7] == 254) g_control_1st_idx = 8;
 8003cf0:	4b6e      	ldr	r3, [pc, #440]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003cf2:	79db      	ldrb	r3, [r3, #7]
 8003cf4:	2bfe      	cmp	r3, #254	; 0xfe
 8003cf6:	d102      	bne.n	8003cfe <HAL_UART_RxCpltCallback+0x7e>
 8003cf8:	4b6d      	ldr	r3, [pc, #436]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	701a      	strb	r2, [r3, #0]
  if (g_control[8] == 254) g_control_1st_idx = 9;
 8003cfe:	4b6b      	ldr	r3, [pc, #428]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003d00:	7a1b      	ldrb	r3, [r3, #8]
 8003d02:	2bfe      	cmp	r3, #254	; 0xfe
 8003d04:	d102      	bne.n	8003d0c <HAL_UART_RxCpltCallback+0x8c>
 8003d06:	4b6a      	ldr	r3, [pc, #424]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003d08:	2209      	movs	r2, #9
 8003d0a:	701a      	strb	r2, [r3, #0]
  if (g_control[9] == 254) g_control_1st_idx = 0;
 8003d0c:	4b67      	ldr	r3, [pc, #412]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003d0e:	7a5b      	ldrb	r3, [r3, #9]
 8003d10:	2bfe      	cmp	r3, #254	; 0xfe
 8003d12:	d102      	bne.n	8003d1a <HAL_UART_RxCpltCallback+0x9a>
 8003d14:	4b66      	ldr	r3, [pc, #408]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
  g_P_pitch_gain = g_control[g_control_1st_idx];
 8003d1a:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003d22:	5c9a      	ldrb	r2, [r3, r2]
 8003d24:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_UART_RxCpltCallback+0x234>)
 8003d26:	701a      	strb	r2, [r3, #0]
  g_I_pitch_gain = g_control[(g_control_1st_idx+1)%10];
 8003d28:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	4b62      	ldr	r3, [pc, #392]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003d30:	fb83 2301 	smull	r2, r3, r3, r1
 8003d34:	109a      	asrs	r2, r3, #2
 8003d36:	17cb      	asrs	r3, r1, #31
 8003d38:	1ad2      	subs	r2, r2, r3
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	1aca      	subs	r2, r1, r3
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003d46:	5c9a      	ldrb	r2, [r3, r2]
 8003d48:	4b5c      	ldr	r3, [pc, #368]	; (8003ebc <HAL_UART_RxCpltCallback+0x23c>)
 8003d4a:	701a      	strb	r2, [r3, #0]
  g_D_pitch_gain = g_control[(g_control_1st_idx+2)%10];
 8003d4c:	4b58      	ldr	r3, [pc, #352]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	1c99      	adds	r1, r3, #2
 8003d52:	4b59      	ldr	r3, [pc, #356]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003d54:	fb83 2301 	smull	r2, r3, r3, r1
 8003d58:	109a      	asrs	r2, r3, #2
 8003d5a:	17cb      	asrs	r3, r1, #31
 8003d5c:	1ad2      	subs	r2, r2, r3
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	1aca      	subs	r2, r1, r3
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003d6a:	5c9a      	ldrb	r2, [r3, r2]
 8003d6c:	4b54      	ldr	r3, [pc, #336]	; (8003ec0 <HAL_UART_RxCpltCallback+0x240>)
 8003d6e:	701a      	strb	r2, [r3, #0]
  g_P_roll_gain = g_control[(g_control_1st_idx+3)%10];
 8003d70:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	1cd9      	adds	r1, r3, #3
 8003d76:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003d78:	fb83 2301 	smull	r2, r3, r3, r1
 8003d7c:	109a      	asrs	r2, r3, #2
 8003d7e:	17cb      	asrs	r3, r1, #31
 8003d80:	1ad2      	subs	r2, r2, r3
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	1aca      	subs	r2, r1, r3
 8003d8c:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003d8e:	5c9a      	ldrb	r2, [r3, r2]
 8003d90:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <HAL_UART_RxCpltCallback+0x244>)
 8003d92:	701a      	strb	r2, [r3, #0]
  g_I_roll_gain = g_control[(g_control_1st_idx+4)%10];
 8003d94:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	1d19      	adds	r1, r3, #4
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003d9c:	fb83 2301 	smull	r2, r3, r3, r1
 8003da0:	109a      	asrs	r2, r3, #2
 8003da2:	17cb      	asrs	r3, r1, #31
 8003da4:	1ad2      	subs	r2, r2, r3
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	1aca      	subs	r2, r1, r3
 8003db0:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003db2:	5c9a      	ldrb	r2, [r3, r2]
 8003db4:	4b44      	ldr	r3, [pc, #272]	; (8003ec8 <HAL_UART_RxCpltCallback+0x248>)
 8003db6:	701a      	strb	r2, [r3, #0]
  g_D_roll_gain = g_control[(g_control_1st_idx+5)%10];
 8003db8:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	1d59      	adds	r1, r3, #5
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003dc0:	fb83 2301 	smull	r2, r3, r3, r1
 8003dc4:	109a      	asrs	r2, r3, #2
 8003dc6:	17cb      	asrs	r3, r1, #31
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	1aca      	subs	r2, r1, r3
 8003dd4:	4b35      	ldr	r3, [pc, #212]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003dd6:	5c9a      	ldrb	r2, [r3, r2]
 8003dd8:	4b3c      	ldr	r3, [pc, #240]	; (8003ecc <HAL_UART_RxCpltCallback+0x24c>)
 8003dda:	701a      	strb	r2, [r3, #0]
  g_P_yaw_gain = g_control[(g_control_1st_idx+6)%10];
 8003ddc:	4b34      	ldr	r3, [pc, #208]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	1d99      	adds	r1, r3, #6
 8003de2:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003de4:	fb83 2301 	smull	r2, r3, r3, r1
 8003de8:	109a      	asrs	r2, r3, #2
 8003dea:	17cb      	asrs	r3, r1, #31
 8003dec:	1ad2      	subs	r2, r2, r3
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	1aca      	subs	r2, r1, r3
 8003df8:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003dfa:	5c9a      	ldrb	r2, [r3, r2]
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_UART_RxCpltCallback+0x250>)
 8003dfe:	701a      	strb	r2, [r3, #0]
  g_I_yaw_gain = g_control[(g_control_1st_idx+7)%10];
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	1dd9      	adds	r1, r3, #7
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003e08:	fb83 2301 	smull	r2, r3, r3, r1
 8003e0c:	109a      	asrs	r2, r3, #2
 8003e0e:	17cb      	asrs	r3, r1, #31
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	1aca      	subs	r2, r1, r3
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003e1e:	5c9a      	ldrb	r2, [r3, r2]
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_UART_RxCpltCallback+0x254>)
 8003e22:	701a      	strb	r2, [r3, #0]
  g_D_yaw_gain = g_control[(g_control_1st_idx+8)%10];
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <HAL_UART_RxCpltCallback+0x230>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f103 0108 	add.w	r1, r3, #8
 8003e2c:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <HAL_UART_RxCpltCallback+0x238>)
 8003e2e:	fb83 2301 	smull	r2, r3, r3, r1
 8003e32:	109a      	asrs	r2, r3, #2
 8003e34:	17cb      	asrs	r3, r1, #31
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	1aca      	subs	r2, r1, r3
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_UART_RxCpltCallback+0x22c>)
 8003e44:	5c9a      	ldrb	r2, [r3, r2]
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_UART_RxCpltCallback+0x258>)
 8003e48:	701a      	strb	r2, [r3, #0]

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e4c:	edd3 7a00 	vldr	s15, [r3]
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e52:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e56:	4b21      	ldr	r3, [pc, #132]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e58:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e5e:	ed93 6a03 	vldr	s12, [r3, #12]
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e64:	edd3 5a04 	vldr	s11, [r3, #16]
 8003e68:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e6a:	ed93 5a05 	vldr	s10, [r3, #20]
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e70:	edd3 4a06 	vldr	s9, [r3, #24]
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e76:	edd3 3a07 	vldr	s7, [r3, #28]
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_UART_RxCpltCallback+0x25c>)
 8003e7c:	ed93 4a08 	vldr	s8, [r3, #32]
 8003e80:	eeb0 3a64 	vmov.f32	s6, s9
 8003e84:	eef0 2a45 	vmov.f32	s5, s10
 8003e88:	eeb0 2a65 	vmov.f32	s4, s11
 8003e8c:	eef0 1a46 	vmov.f32	s3, s12
 8003e90:	eeb0 1a66 	vmov.f32	s2, s13
 8003e94:	eef0 0a47 	vmov.f32	s1, s14
 8003e98:	eeb0 0a67 	vmov.f32	s0, s15
 8003e9c:	f7fd f936 	bl	800110c <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	200004c8 	.word	0x200004c8
 8003eb0:	20000710 	.word	0x20000710
 8003eb4:	2000001c 	.word	0x2000001c
 8003eb8:	66666667 	.word	0x66666667
 8003ebc:	2000001d 	.word	0x2000001d
 8003ec0:	2000001e 	.word	0x2000001e
 8003ec4:	2000001f 	.word	0x2000001f
 8003ec8:	20000020 	.word	0x20000020
 8003ecc:	20000021 	.word	0x20000021
 8003ed0:	20000022 	.word	0x20000022
 8003ed4:	20000023 	.word	0x20000023
 8003ed8:	20000024 	.word	0x20000024
 8003edc:	200006ec 	.word	0x200006ec

08003ee0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7f1b      	ldrb	r3, [r3, #28]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d12f      	bne.n	8003f50 <HAL_TIM_IC_CaptureCallback+0x70>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ef4:	488a      	ldr	r0, [pc, #552]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003ef6:	f000 fd7f 	bl	80049f8 <HAL_GPIO_ReadPin>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IC_CaptureCallback+0x30>
      pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f00:	2100      	movs	r1, #0
 8003f02:	4888      	ldr	r0, [pc, #544]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f04:	f004 ffda 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b86      	ldr	r3, [pc, #536]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f0e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8003f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f14:	4882      	ldr	r0, [pc, #520]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f16:	f000 fd6f 	bl	80049f8 <HAL_GPIO_ReadPin>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d117      	bne.n	8003f50 <HAL_TIM_IC_CaptureCallback+0x70>
      pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f20:	2100      	movs	r1, #0
 8003f22:	4880      	ldr	r0, [pc, #512]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f24:	f004 ffca 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f2e:	605a      	str	r2, [r3, #4]
      int value = pwm_in[1] - pwm_in[0];
 8003f30:	4b7d      	ldr	r3, [pc, #500]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	4b7c      	ldr	r3, [pc, #496]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	617b      	str	r3, [r7, #20]
      if (value >= 200 && value < 400) {
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2bc7      	cmp	r3, #199	; 0xc7
 8003f40:	dd06      	ble.n	8003f50 <HAL_TIM_IC_CaptureCallback+0x70>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003f48:	da02      	bge.n	8003f50 <HAL_TIM_IC_CaptureCallback+0x70>
        pwm_in[2] = value;
 8003f4a:	4a77      	ldr	r2, [pc, #476]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	6093      	str	r3, [r2, #8]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7f1b      	ldrb	r3, [r3, #28]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d12f      	bne.n	8003fb8 <HAL_TIM_IC_CaptureCallback+0xd8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8003f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f5c:	4870      	ldr	r0, [pc, #448]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f5e:	f000 fd4b 	bl	80049f8 <HAL_GPIO_ReadPin>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_IC_CaptureCallback+0x98>
      pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003f68:	2104      	movs	r1, #4
 8003f6a:	486e      	ldr	r0, [pc, #440]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f6c:	f004 ffa6 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b6c      	ldr	r3, [pc, #432]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f76:	60da      	str	r2, [r3, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f7c:	4868      	ldr	r0, [pc, #416]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f7e:	f000 fd3b 	bl	80049f8 <HAL_GPIO_ReadPin>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d117      	bne.n	8003fb8 <HAL_TIM_IC_CaptureCallback+0xd8>
      pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003f88:	2104      	movs	r1, #4
 8003f8a:	4866      	ldr	r0, [pc, #408]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f8c:	f004 ff96 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b64      	ldr	r3, [pc, #400]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f96:	611a      	str	r2, [r3, #16]
      int value = pwm_in[4] - pwm_in[3];
 8003f98:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	4b62      	ldr	r3, [pc, #392]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	613b      	str	r3, [r7, #16]
      if (value >= 200 && value < 400) {
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2bc7      	cmp	r3, #199	; 0xc7
 8003fa8:	dd06      	ble.n	8003fb8 <HAL_TIM_IC_CaptureCallback+0xd8>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003fb0:	da02      	bge.n	8003fb8 <HAL_TIM_IC_CaptureCallback+0xd8>
        pwm_in[5] = value;
 8003fb2:	4a5d      	ldr	r2, [pc, #372]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6153      	str	r3, [r2, #20]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	7f1b      	ldrb	r3, [r3, #28]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d12f      	bne.n	8004020 <HAL_TIM_IC_CaptureCallback+0x140>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003fc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fc4:	4856      	ldr	r0, [pc, #344]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fc6:	f000 fd17 	bl	80049f8 <HAL_GPIO_ReadPin>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d107      	bne.n	8003fe0 <HAL_TIM_IC_CaptureCallback+0x100>
      pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003fd0:	2108      	movs	r1, #8
 8003fd2:	4854      	ldr	r0, [pc, #336]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fd4:	f004 ff72 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b52      	ldr	r3, [pc, #328]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fde:	619a      	str	r2, [r3, #24]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8003fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fe4:	484e      	ldr	r0, [pc, #312]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fe6:	f000 fd07 	bl	80049f8 <HAL_GPIO_ReadPin>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d117      	bne.n	8004020 <HAL_TIM_IC_CaptureCallback+0x140>
      pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003ff0:	2108      	movs	r1, #8
 8003ff2:	484c      	ldr	r0, [pc, #304]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003ff4:	f004 ff62 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ffe:	61da      	str	r2, [r3, #28]
      int value = pwm_in[7] - pwm_in[6];
 8004000:	4b49      	ldr	r3, [pc, #292]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	4b48      	ldr	r3, [pc, #288]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	60fb      	str	r3, [r7, #12]
      if (value >= 200 && value < 400) {
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2bc7      	cmp	r3, #199	; 0xc7
 8004010:	dd06      	ble.n	8004020 <HAL_TIM_IC_CaptureCallback+0x140>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004018:	da02      	bge.n	8004020 <HAL_TIM_IC_CaptureCallback+0x140>
        pwm_in[8] = value;
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6213      	str	r3, [r2, #32]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7f1b      	ldrb	r3, [r3, #28]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d12f      	bne.n	8004088 <HAL_TIM_IC_CaptureCallback+0x1a8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8004028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800402c:	483c      	ldr	r0, [pc, #240]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 800402e:	f000 fce3 	bl	80049f8 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IC_CaptureCallback+0x168>
      pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004038:	210c      	movs	r1, #12
 800403a:	483a      	ldr	r0, [pc, #232]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 800403c:	f004 ff3e 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	4b38      	ldr	r3, [pc, #224]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8004048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800404c:	4834      	ldr	r0, [pc, #208]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x240>)
 800404e:	f000 fcd3 	bl	80049f8 <HAL_GPIO_ReadPin>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d117      	bne.n	8004088 <HAL_TIM_IC_CaptureCallback+0x1a8>
      pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004058:	210c      	movs	r1, #12
 800405a:	4832      	ldr	r0, [pc, #200]	; (8004124 <HAL_TIM_IC_CaptureCallback+0x244>)
 800405c:	f004 ff2e 	bl	8008ebc <HAL_TIM_ReadCapturedValue>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	4b30      	ldr	r3, [pc, #192]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
      int value = pwm_in[10] - pwm_in[9];
 8004068:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 800406a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800406c:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	60bb      	str	r3, [r7, #8]
      if (value >= 200 && value < 400) {
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2bc7      	cmp	r3, #199	; 0xc7
 8004078:	dd06      	ble.n	8004088 <HAL_TIM_IC_CaptureCallback+0x1a8>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004080:	da02      	bge.n	8004088 <HAL_TIM_IC_CaptureCallback+0x1a8>
        pwm_in[11] = value;
 8004082:	4a29      	ldr	r2, [pc, #164]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
    }
  }

  g_thrust = SimpleKalmanFilter_updateEstimate(&g_filters[6], pwm_in[5] - 300);
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004098:	eeb0 0a67 	vmov.f32	s0, s15
 800409c:	4823      	ldr	r0, [pc, #140]	; (800412c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800409e:	f7fc ff6e 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80040a2:	eef0 7a40 	vmov.f32	s15, s0
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_TIM_IC_CaptureCallback+0x250>)
 80040a8:	edc3 7a00 	vstr	s15, [r3]
  g_yaw = SimpleKalmanFilter_updateEstimate(&g_filters[7], pwm_in[2] - 300);
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040bc:	eeb0 0a67 	vmov.f32	s0, s15
 80040c0:	481c      	ldr	r0, [pc, #112]	; (8004134 <HAL_TIM_IC_CaptureCallback+0x254>)
 80040c2:	f7fc ff5c 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80040c6:	eef0 7a40 	vmov.f32	s15, s0
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_TIM_IC_CaptureCallback+0x258>)
 80040cc:	edc3 7a00 	vstr	s15, [r3]
  g_pitch = SimpleKalmanFilter_updateEstimate(&g_filters[8], pwm_in[8] - 300);
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e0:	eeb0 0a67 	vmov.f32	s0, s15
 80040e4:	4815      	ldr	r0, [pc, #84]	; (800413c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80040e6:	f7fc ff4a 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80040ea:	eef0 7a40 	vmov.f32	s15, s0
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x260>)
 80040f0:	edc3 7a00 	vstr	s15, [r3]
  g_roll = SimpleKalmanFilter_updateEstimate(&g_filters[9], pwm_in[11] - 300);
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040fc:	ee07 3a90 	vmov	s15, r3
 8004100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004104:	eeb0 0a67 	vmov.f32	s0, s15
 8004108:	480e      	ldr	r0, [pc, #56]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x264>)
 800410a:	f7fc ff38 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 800410e:	eef0 7a40 	vmov.f32	s15, s0
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <HAL_TIM_IC_CaptureCallback+0x268>)
 8004114:	edc3 7a00 	vstr	s15, [r3]
  monitor[2] = 0;
  monitor[3] = g_pitch;
  monitor[4] = g_roll;
  monitor[5] = 0;
#endif
}
 8004118:	bf00      	nop
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40020c00 	.word	0x40020c00
 8004124:	20000238 	.word	0x20000238
 8004128:	2000069c 	.word	0x2000069c
 800412c:	20000354 	.word	0x20000354
 8004130:	200006dc 	.word	0x200006dc
 8004134:	2000036c 	.word	0x2000036c
 8004138:	200006e8 	.word	0x200006e8
 800413c:	20000384 	.word	0x20000384
 8004140:	200006e0 	.word	0x200006e0
 8004144:	2000039c 	.word	0x2000039c
 8004148:	200006e4 	.word	0x200006e4

0800414c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <_sbrk+0x5c>)
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <_sbrk+0x60>)
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004160:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <_sbrk+0x64>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <_sbrk+0x64>)
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <_sbrk+0x68>)
 800416c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <_sbrk+0x64>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	429a      	cmp	r2, r3
 800417a:	d207      	bcs.n	800418c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800417c:	f006 fbd8 	bl	800a930 <__errno>
 8004180:	4603      	mov	r3, r0
 8004182:	220c      	movs	r2, #12
 8004184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800418a:	e009      	b.n	80041a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800418c:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <_sbrk+0x64>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <_sbrk+0x64>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <_sbrk+0x64>)
 800419c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20020000 	.word	0x20020000
 80041ac:	00000400 	.word	0x00000400
 80041b0:	20000714 	.word	0x20000714
 80041b4:	20000730 	.word	0x20000730

080041b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <SystemInit+0x20>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <SystemInit+0x20>)
 80041c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041e0:	480d      	ldr	r0, [pc, #52]	; (8004218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041e2:	490e      	ldr	r1, [pc, #56]	; (800421c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041e4:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041e8:	e002      	b.n	80041f0 <LoopCopyDataInit>

080041ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ee:	3304      	adds	r3, #4

080041f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041f4:	d3f9      	bcc.n	80041ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041f6:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041f8:	4c0b      	ldr	r4, [pc, #44]	; (8004228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041fc:	e001      	b.n	8004202 <LoopFillZerobss>

080041fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004200:	3204      	adds	r2, #4

08004202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004204:	d3fb      	bcc.n	80041fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004206:	f7ff ffd7 	bl	80041b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800420a:	f006 fb97 	bl	800a93c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800420e:	f7fd f80b 	bl	8001228 <main>
  bx  lr    
 8004212:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800421c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004220:	0800df70 	.word	0x0800df70
  ldr r2, =_sbss
 8004224:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004228:	2000072c 	.word	0x2000072c

0800422c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800422c:	e7fe      	b.n	800422c <ADC_IRQHandler>
	...

08004230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <HAL_Init+0x40>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <HAL_Init+0x40>)
 800423a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800423e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_Init+0x40>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <HAL_Init+0x40>)
 8004246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800424a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_Init+0x40>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a07      	ldr	r2, [pc, #28]	; (8004270 <HAL_Init+0x40>)
 8004252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004258:	2003      	movs	r0, #3
 800425a:	f000 f94f 	bl	80044fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800425e:	200f      	movs	r0, #15
 8004260:	f000 f808 	bl	8004274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004264:	f7fe f9fa 	bl	800265c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023c00 	.word	0x40023c00

08004274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_InitTick+0x54>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_InitTick+0x58>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	4619      	mov	r1, r3
 8004286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800428a:	fbb3 f3f1 	udiv	r3, r3, r1
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f967 	bl	8004566 <HAL_SYSTICK_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e00e      	b.n	80042c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b0f      	cmp	r3, #15
 80042a6:	d80a      	bhi.n	80042be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042a8:	2200      	movs	r2, #0
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b0:	f000 f92f 	bl	8004512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042b4:	4a06      	ldr	r2, [pc, #24]	; (80042d0 <HAL_InitTick+0x5c>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e000      	b.n	80042c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000028 	.word	0x20000028
 80042cc:	20000030 	.word	0x20000030
 80042d0:	2000002c 	.word	0x2000002c

080042d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_IncTick+0x20>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_IncTick+0x24>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <HAL_IncTick+0x24>)
 80042e6:	6013      	str	r3, [r2, #0]
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000030 	.word	0x20000030
 80042f8:	20000718 	.word	0x20000718

080042fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_GetTick+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000718 	.word	0x20000718

08004314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800431c:	f7ff ffee 	bl	80042fc <HAL_GetTick>
 8004320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432c:	d005      	beq.n	800433a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_Delay+0x44>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800433a:	bf00      	nop
 800433c:	f7ff ffde 	bl	80042fc <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	429a      	cmp	r2, r3
 800434a:	d8f7      	bhi.n	800433c <HAL_Delay+0x28>
  {
  }
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000030 	.word	0x20000030

0800435c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <__NVIC_SetPriorityGrouping+0x44>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004378:	4013      	ands	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800438e:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	60d3      	str	r3, [r2, #12]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <__NVIC_GetPriorityGrouping+0x18>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	f003 0307 	and.w	r3, r3, #7
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	db0b      	blt.n	80043ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	4907      	ldr	r1, [pc, #28]	; (80043f8 <__NVIC_EnableIRQ+0x38>)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2001      	movs	r0, #1
 80043e2:	fa00 f202 	lsl.w	r2, r0, r2
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e100 	.word	0xe000e100

080043fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db0a      	blt.n	8004426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	490c      	ldr	r1, [pc, #48]	; (8004448 <__NVIC_SetPriority+0x4c>)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	440b      	add	r3, r1
 8004420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004424:	e00a      	b.n	800443c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4908      	ldr	r1, [pc, #32]	; (800444c <__NVIC_SetPriority+0x50>)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	3b04      	subs	r3, #4
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	440b      	add	r3, r1
 800443a:	761a      	strb	r2, [r3, #24]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	e000e100 	.word	0xe000e100
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f1c3 0307 	rsb	r3, r3, #7
 800446a:	2b04      	cmp	r3, #4
 800446c:	bf28      	it	cs
 800446e:	2304      	movcs	r3, #4
 8004470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3304      	adds	r3, #4
 8004476:	2b06      	cmp	r3, #6
 8004478:	d902      	bls.n	8004480 <NVIC_EncodePriority+0x30>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3b03      	subs	r3, #3
 800447e:	e000      	b.n	8004482 <NVIC_EncodePriority+0x32>
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	401a      	ands	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43d9      	mvns	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	4313      	orrs	r3, r2
         );
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044c8:	d301      	bcc.n	80044ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ca:	2301      	movs	r3, #1
 80044cc:	e00f      	b.n	80044ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <SysTick_Config+0x40>)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044d6:	210f      	movs	r1, #15
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044dc:	f7ff ff8e 	bl	80043fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <SysTick_Config+0x40>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044e6:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <SysTick_Config+0x40>)
 80044e8:	2207      	movs	r2, #7
 80044ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	e000e010 	.word	0xe000e010

080044fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff29 	bl	800435c <__NVIC_SetPriorityGrouping>
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004512:	b580      	push	{r7, lr}
 8004514:	b086      	sub	sp, #24
 8004516:	af00      	add	r7, sp, #0
 8004518:	4603      	mov	r3, r0
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004524:	f7ff ff3e 	bl	80043a4 <__NVIC_GetPriorityGrouping>
 8004528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	6978      	ldr	r0, [r7, #20]
 8004530:	f7ff ff8e 	bl	8004450 <NVIC_EncodePriority>
 8004534:	4602      	mov	r2, r0
 8004536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ff5d 	bl	80043fc <__NVIC_SetPriority>
}
 8004542:	bf00      	nop
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff31 	bl	80043c0 <__NVIC_EnableIRQ>
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ffa2 	bl	80044b8 <SysTick_Config>
 8004574:	4603      	mov	r3, r0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800458c:	f7ff feb6 	bl	80042fc <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d008      	beq.n	80045b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e052      	b.n	8004656 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0216 	bic.w	r2, r2, #22
 80045be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <HAL_DMA_Abort+0x62>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0208 	bic.w	r2, r2, #8
 80045ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004600:	e013      	b.n	800462a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004602:	f7ff fe7b 	bl	80042fc <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b05      	cmp	r3, #5
 800460e:	d90c      	bls.n	800462a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2203      	movs	r2, #3
 800461a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e015      	b.n	8004656 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e4      	bne.n	8004602 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	223f      	movs	r2, #63	; 0x3f
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d004      	beq.n	800467c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e00c      	b.n	8004696 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2205      	movs	r2, #5
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b0:	b2db      	uxtb	r3, r3
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e16b      	b.n	80049b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046dc:	2201      	movs	r2, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	f040 815a 	bne.w	80049ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d005      	beq.n	8004712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470e:	2b02      	cmp	r3, #2
 8004710:	d130      	bne.n	8004774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004748:	2201      	movs	r2, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 0201 	and.w	r2, r3, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b03      	cmp	r3, #3
 800477e:	d017      	beq.n	80047b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d123      	bne.n	8004804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	08da      	lsrs	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3208      	adds	r2, #8
 80047c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	220f      	movs	r2, #15
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	08da      	lsrs	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3208      	adds	r2, #8
 80047fe:	69b9      	ldr	r1, [r7, #24]
 8004800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0203 	and.w	r2, r3, #3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80b4 	beq.w	80049ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	4b60      	ldr	r3, [pc, #384]	; (80049cc <HAL_GPIO_Init+0x30c>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <HAL_GPIO_Init+0x30c>)
 8004850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004854:	6453      	str	r3, [r2, #68]	; 0x44
 8004856:	4b5d      	ldr	r3, [pc, #372]	; (80049cc <HAL_GPIO_Init+0x30c>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004862:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <HAL_GPIO_Init+0x310>)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	220f      	movs	r2, #15
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_GPIO_Init+0x314>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02b      	beq.n	80048e6 <HAL_GPIO_Init+0x226>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a51      	ldr	r2, [pc, #324]	; (80049d8 <HAL_GPIO_Init+0x318>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d025      	beq.n	80048e2 <HAL_GPIO_Init+0x222>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a50      	ldr	r2, [pc, #320]	; (80049dc <HAL_GPIO_Init+0x31c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <HAL_GPIO_Init+0x21e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4f      	ldr	r2, [pc, #316]	; (80049e0 <HAL_GPIO_Init+0x320>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d019      	beq.n	80048da <HAL_GPIO_Init+0x21a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4e      	ldr	r2, [pc, #312]	; (80049e4 <HAL_GPIO_Init+0x324>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_GPIO_Init+0x216>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4d      	ldr	r2, [pc, #308]	; (80049e8 <HAL_GPIO_Init+0x328>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00d      	beq.n	80048d2 <HAL_GPIO_Init+0x212>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4c      	ldr	r2, [pc, #304]	; (80049ec <HAL_GPIO_Init+0x32c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <HAL_GPIO_Init+0x20e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4b      	ldr	r2, [pc, #300]	; (80049f0 <HAL_GPIO_Init+0x330>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_GPIO_Init+0x20a>
 80048c6:	2307      	movs	r3, #7
 80048c8:	e00e      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048ca:	2308      	movs	r3, #8
 80048cc:	e00c      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048ce:	2306      	movs	r3, #6
 80048d0:	e00a      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048d2:	2305      	movs	r3, #5
 80048d4:	e008      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048da:	2303      	movs	r3, #3
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x228>
 80048e6:	2300      	movs	r3, #0
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	f002 0203 	and.w	r2, r2, #3
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4093      	lsls	r3, r2
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f8:	4935      	ldr	r1, [pc, #212]	; (80049d0 <HAL_GPIO_Init+0x310>)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	3302      	adds	r3, #2
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_GPIO_Init+0x334>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800492a:	4a32      	ldr	r2, [pc, #200]	; (80049f4 <HAL_GPIO_Init+0x334>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004930:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <HAL_GPIO_Init+0x334>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004954:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <HAL_GPIO_Init+0x334>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800495a:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <HAL_GPIO_Init+0x334>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <HAL_GPIO_Init+0x334>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004984:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <HAL_GPIO_Init+0x334>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049a8:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <HAL_GPIO_Init+0x334>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	f67f ae90 	bls.w	80046dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3724      	adds	r7, #36	; 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40020000 	.word	0x40020000
 80049d8:	40020400 	.word	0x40020400
 80049dc:	40020800 	.word	0x40020800
 80049e0:	40020c00 	.word	0x40020c00
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40021400 	.word	0x40021400
 80049ec:	40021800 	.word	0x40021800
 80049f0:	40021c00 	.word	0x40021c00
 80049f4:	40013c00 	.word	0x40013c00

080049f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	887b      	ldrh	r3, [r7, #2]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e001      	b.n	8004a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a38:	787b      	ldrb	r3, [r7, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a44:	e003      	b.n	8004a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4013      	ands	r3, r2
 8004a72:	041a      	lsls	r2, r3, #16
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	43d9      	mvns	r1, r3
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	400b      	ands	r3, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e12b      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd fdf8 	bl	80026ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af4:	f003 fbc8 	bl	8008288 <HAL_RCC_GetPCLK1Freq>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a81      	ldr	r2, [pc, #516]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d807      	bhi.n	8004b14 <HAL_I2C_Init+0x84>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a80      	ldr	r2, [pc, #512]	; (8004d08 <HAL_I2C_Init+0x278>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf94      	ite	ls
 8004b0c:	2301      	movls	r3, #1
 8004b0e:	2300      	movhi	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e006      	b.n	8004b22 <HAL_I2C_Init+0x92>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a7d      	ldr	r2, [pc, #500]	; (8004d0c <HAL_I2C_Init+0x27c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0e7      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a78      	ldr	r2, [pc, #480]	; (8004d10 <HAL_I2C_Init+0x280>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0c9b      	lsrs	r3, r3, #18
 8004b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a6a      	ldr	r2, [pc, #424]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d802      	bhi.n	8004b64 <HAL_I2C_Init+0xd4>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e009      	b.n	8004b78 <HAL_I2C_Init+0xe8>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	4a69      	ldr	r2, [pc, #420]	; (8004d14 <HAL_I2C_Init+0x284>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	3301      	adds	r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	495c      	ldr	r1, [pc, #368]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b94:	428b      	cmp	r3, r1
 8004b96:	d819      	bhi.n	8004bcc <HAL_I2C_Init+0x13c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e59      	subs	r1, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bac:	400b      	ands	r3, r1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_I2C_Init+0x138>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc6:	e051      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e04f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d111      	bne.n	8004bf8 <HAL_I2C_Init+0x168>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e012      	b.n	8004c1e <HAL_I2C_Init+0x18e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e58      	subs	r0, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	0099      	lsls	r1, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x196>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_I2C_Init+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1e58      	subs	r0, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	440b      	add	r3, r1
 8004c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	e00f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1e58      	subs	r0, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	0099      	lsls	r1, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c62:	3301      	adds	r3, #1
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	6809      	ldr	r1, [r1, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	000186a0 	.word	0x000186a0
 8004d08:	001e847f 	.word	0x001e847f
 8004d0c:	003d08ff 	.word	0x003d08ff
 8004d10:	431bde83 	.word	0x431bde83
 8004d14:	10624dd3 	.word	0x10624dd3

08004d18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	461a      	mov	r2, r3
 8004d24:	460b      	mov	r3, r1
 8004d26:	817b      	strh	r3, [r7, #10]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d2c:	f7ff fae6 	bl	80042fc <HAL_GetTick>
 8004d30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	f040 80e0 	bne.w	8004f00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2319      	movs	r3, #25
 8004d46:	2201      	movs	r2, #1
 8004d48:	4970      	ldr	r1, [pc, #448]	; (8004f0c <HAL_I2C_Master_Transmit+0x1f4>)
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f002 fc02 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
 8004d58:	e0d3      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_I2C_Master_Transmit+0x50>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e0cc      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d007      	beq.n	8004d8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2221      	movs	r2, #33	; 0x21
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2210      	movs	r2, #16
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	893a      	ldrh	r2, [r7, #8]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a50      	ldr	r2, [pc, #320]	; (8004f10 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f002 f8dc 	bl	8006f94 <I2C_MasterRequestWrite>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e08d      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dfc:	e066      	b.n	8004ecc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f002 fc7c 	bl	8007700 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d107      	bne.n	8004e26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e06b      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d11b      	bne.n	8004ea0 <HAL_I2C_Master_Transmit+0x188>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	6a39      	ldr	r1, [r7, #32]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f002 fc6c 	bl	8007782 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d107      	bne.n	8004ec8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e01a      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d194      	bne.n	8004dfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e000      	b.n	8004f02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
  }
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	00100002 	.word	0x00100002
 8004f10:	ffff0000 	.word	0xffff0000

08004f14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	; 0x30
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	460b      	mov	r3, r1
 8004f22:	817b      	strh	r3, [r7, #10]
 8004f24:	4613      	mov	r3, r2
 8004f26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f28:	f7ff f9e8 	bl	80042fc <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	f040 820b 	bne.w	8005352 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2319      	movs	r3, #25
 8004f42:	2201      	movs	r2, #1
 8004f44:	497c      	ldr	r1, [pc, #496]	; (8005138 <HAL_I2C_Master_Receive+0x224>)
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f002 fb04 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
 8004f54:	e1fe      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_I2C_Master_Receive+0x50>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e1f7      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d007      	beq.n	8004f8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2222      	movs	r2, #34	; 0x22
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	893a      	ldrh	r2, [r7, #8]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a5c      	ldr	r2, [pc, #368]	; (800513c <HAL_I2C_Master_Receive+0x228>)
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fcc:	8979      	ldrh	r1, [r7, #10]
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f002 f860 	bl	8007098 <I2C_MasterRequestRead>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1b8      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d113      	bne.n	8005012 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e18c      	b.n	800532c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	2b01      	cmp	r3, #1
 8005018:	d11b      	bne.n	8005052 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e16c      	b.n	800532c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	2b02      	cmp	r3, #2
 8005058:	d11b      	bne.n	8005092 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005068:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	e14c      	b.n	800532c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050b8:	e138      	b.n	800532c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	2b03      	cmp	r3, #3
 80050c0:	f200 80f1 	bhi.w	80052a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d123      	bne.n	8005114 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f002 fbc9 	bl	8007868 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e139      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005112:	e10b      	b.n	800532c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005118:	2b02      	cmp	r3, #2
 800511a:	d14e      	bne.n	80051ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	2200      	movs	r2, #0
 8005124:	4906      	ldr	r1, [pc, #24]	; (8005140 <HAL_I2C_Master_Receive+0x22c>)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f002 fa14 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e10e      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
 8005136:	bf00      	nop
 8005138:	00100002 	.word	0x00100002
 800513c:	ffff0000 	.word	0xffff0000
 8005140:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051b8:	e0b8      	b.n	800532c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	2200      	movs	r2, #0
 80051c2:	4966      	ldr	r1, [pc, #408]	; (800535c <HAL_I2C_Master_Receive+0x448>)
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f002 f9c5 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0bf      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	2200      	movs	r2, #0
 800521e:	494f      	ldr	r1, [pc, #316]	; (800535c <HAL_I2C_Master_Receive+0x448>)
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f002 f997 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e091      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052a4:	e042      	b.n	800532c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f002 fadc 	bl	8007868 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e04c      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d118      	bne.n	800532c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f aec2 	bne.w	80050ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3728      	adds	r7, #40	; 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	00010004 	.word	0x00010004

08005360 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	461a      	mov	r2, r3
 800536e:	4603      	mov	r3, r0
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	460b      	mov	r3, r1
 8005374:	813b      	strh	r3, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800537a:	f7fe ffbf 	bl	80042fc <HAL_GetTick>
 800537e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b20      	cmp	r3, #32
 800538a:	f040 8208 	bne.w	800579e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	2319      	movs	r3, #25
 8005394:	2201      	movs	r2, #1
 8005396:	497b      	ldr	r1, [pc, #492]	; (8005584 <HAL_I2C_Mem_Read+0x224>)
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f002 f8db 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
 80053a6:	e1fb      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_I2C_Mem_Read+0x56>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e1f4      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d007      	beq.n	80053dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2222      	movs	r2, #34	; 0x22
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2240      	movs	r2, #64	; 0x40
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a5b      	ldr	r2, [pc, #364]	; (8005588 <HAL_I2C_Mem_Read+0x228>)
 800541c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800541e:	88f8      	ldrh	r0, [r7, #6]
 8005420:	893a      	ldrh	r2, [r7, #8]
 8005422:	8979      	ldrh	r1, [r7, #10]
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4603      	mov	r3, r0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f001 ff00 	bl	8007234 <I2C_RequestMemoryRead>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e1b0      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d113      	bne.n	800546e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e184      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005472:	2b01      	cmp	r3, #1
 8005474:	d11b      	bne.n	80054ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e164      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d11b      	bne.n	80054ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	e144      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005504:	e138      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	2b03      	cmp	r3, #3
 800550c:	f200 80f1 	bhi.w	80056f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	2b01      	cmp	r3, #1
 8005516:	d123      	bne.n	8005560 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f002 f9a3 	bl	8007868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e139      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800555e:	e10b      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	2b02      	cmp	r3, #2
 8005566:	d14e      	bne.n	8005606 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2200      	movs	r2, #0
 8005570:	4906      	ldr	r1, [pc, #24]	; (800558c <HAL_I2C_Mem_Read+0x22c>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f001 ffee 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e10e      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
 8005582:	bf00      	nop
 8005584:	00100002 	.word	0x00100002
 8005588:	ffff0000 	.word	0xffff0000
 800558c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005604:	e0b8      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	4966      	ldr	r1, [pc, #408]	; (80057a8 <HAL_I2C_Mem_Read+0x448>)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f001 ff9f 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0bf      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2200      	movs	r2, #0
 800566a:	494f      	ldr	r1, [pc, #316]	; (80057a8 <HAL_I2C_Mem_Read+0x448>)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f001 ff71 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e091      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f0:	e042      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f002 f8b6 	bl	8007868 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e04c      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d118      	bne.n	8005778 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	f47f aec2 	bne.w	8005506 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e000      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3728      	adds	r7, #40	; 0x28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	00010004 	.word	0x00010004

080057ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d003      	beq.n	80057e4 <HAL_I2C_EV_IRQHandler+0x38>
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	f040 80c1 	bne.w	8005966 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10d      	bne.n	800581a <HAL_I2C_EV_IRQHandler+0x6e>
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005804:	d003      	beq.n	800580e <HAL_I2C_EV_IRQHandler+0x62>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800580c:	d101      	bne.n	8005812 <HAL_I2C_EV_IRQHandler+0x66>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_I2C_EV_IRQHandler+0x68>
 8005812:	2300      	movs	r3, #0
 8005814:	2b01      	cmp	r3, #1
 8005816:	f000 8132 	beq.w	8005a7e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x92>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	0a5b      	lsrs	r3, r3, #9
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f002 f89e 	bl	8007972 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fd91 	bl	800635e <I2C_Master_SB>
 800583c:	e092      	b.n	8005964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_I2C_EV_IRQHandler+0xb2>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	0a5b      	lsrs	r3, r3, #9
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fe07 	bl	800646a <I2C_Master_ADD10>
 800585c:	e082      	b.n	8005964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <HAL_I2C_EV_IRQHandler+0xd2>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	0a5b      	lsrs	r3, r3, #9
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fe21 	bl	80064be <I2C_Master_ADDR>
 800587c:	e072      	b.n	8005964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d03b      	beq.n	8005902 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005898:	f000 80f3 	beq.w	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00f      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	0a9b      	lsrs	r3, r3, #10
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d103      	bne.n	80058c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fa01 	bl	8005cc8 <I2C_MasterTransmit_TXE>
 80058c6:	e04d      	b.n	8005964 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	089b      	lsrs	r3, r3, #2
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80d6 	beq.w	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	0a5b      	lsrs	r3, r3, #9
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80cf 	beq.w	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	2b21      	cmp	r3, #33	; 0x21
 80058e8:	d103      	bne.n	80058f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa88 	bl	8005e00 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058f0:	e0c7      	b.n	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	f040 80c4 	bne.w	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 faf6 	bl	8005eec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005900:	e0bf      	b.n	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005910:	f000 80b7 	beq.w	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0x194>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	0a9b      	lsrs	r3, r3, #10
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0x194>
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	089b      	lsrs	r3, r3, #2
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d103      	bne.n	8005940 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fb6b 	bl	8006014 <I2C_MasterReceive_RXNE>
 800593e:	e011      	b.n	8005964 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 809a 	beq.w	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	0a5b      	lsrs	r3, r3, #9
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8093 	beq.w	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fc14 	bl	800618a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005962:	e08e      	b.n	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005964:	e08d      	b.n	8005a82 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	61fb      	str	r3, [r7, #28]
 8005976:	e007      	b.n	8005988 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d012      	beq.n	80059ba <HAL_I2C_EV_IRQHandler+0x20e>
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	0a5b      	lsrs	r3, r3, #9
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80059b0:	69b9      	ldr	r1, [r7, #24]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 ffd2 	bl	800695c <I2C_Slave_ADDR>
 80059b8:	e066      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <HAL_I2C_EV_IRQHandler+0x22e>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	0a5b      	lsrs	r3, r3, #9
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 f80c 	bl	80069f0 <I2C_Slave_STOPF>
 80059d8:	e056      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	2b21      	cmp	r3, #33	; 0x21
 80059de:	d002      	beq.n	80059e6 <HAL_I2C_EV_IRQHandler+0x23a>
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	2b29      	cmp	r3, #41	; 0x29
 80059e4:	d125      	bne.n	8005a32 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	09db      	lsrs	r3, r3, #7
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00f      	beq.n	8005a12 <HAL_I2C_EV_IRQHandler+0x266>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	0a9b      	lsrs	r3, r3, #10
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <HAL_I2C_EV_IRQHandler+0x266>
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fee8 	bl	80067e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a10:	e039      	b.n	8005a86 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d033      	beq.n	8005a86 <HAL_I2C_EV_IRQHandler+0x2da>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	0a5b      	lsrs	r3, r3, #9
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d02d      	beq.n	8005a86 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 ff15 	bl	800685a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a30:	e029      	b.n	8005a86 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	099b      	lsrs	r3, r3, #6
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00f      	beq.n	8005a5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	0a9b      	lsrs	r3, r3, #10
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	089b      	lsrs	r3, r3, #2
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 ff20 	bl	800689c <I2C_SlaveReceive_RXNE>
 8005a5c:	e014      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	0a5b      	lsrs	r3, r3, #9
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 ff4e 	bl	8006918 <I2C_SlaveReceive_BTF>
 8005a7c:	e004      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b08a      	sub	sp, #40	; 0x28
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00e      	beq.n	8005adc <HAL_I2C_ER_IRQHandler+0x4e>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ada:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	0a5b      	lsrs	r3, r3, #9
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <HAL_I2C_ER_IRQHandler+0x78>
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	f043 0302 	orr.w	r3, r3, #2
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005b04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	0a9b      	lsrs	r3, r3, #10
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d03f      	beq.n	8005b92 <HAL_I2C_ER_IRQHandler+0x104>
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	0a1b      	lsrs	r3, r3, #8
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d039      	beq.n	8005b92 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005b1e:	7efb      	ldrb	r3, [r7, #27]
 8005b20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005b38:	7ebb      	ldrb	r3, [r7, #26]
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d112      	bne.n	8005b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10f      	bne.n	8005b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8005b44:	7cfb      	ldrb	r3, [r7, #19]
 8005b46:	2b21      	cmp	r3, #33	; 0x21
 8005b48:	d008      	beq.n	8005b5c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	2b29      	cmp	r3, #41	; 0x29
 8005b4e:	d005      	beq.n	8005b5c <HAL_I2C_ER_IRQHandler+0xce>
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b28      	cmp	r3, #40	; 0x28
 8005b54:	d106      	bne.n	8005b64 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b21      	cmp	r3, #33	; 0x21
 8005b5a:	d103      	bne.n	8005b64 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f001 f877 	bl	8006c50 <I2C_Slave_AF>
 8005b62:	e016      	b.n	8005b92 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b76:	7efb      	ldrb	r3, [r7, #27]
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d002      	beq.n	8005b82 <HAL_I2C_ER_IRQHandler+0xf4>
 8005b7c:	7efb      	ldrb	r3, [r7, #27]
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d107      	bne.n	8005b92 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	0adb      	lsrs	r3, r3, #11
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00e      	beq.n	8005bbc <HAL_I2C_ER_IRQHandler+0x12e>
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005bba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d008      	beq.n	8005bd4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 f8ae 	bl	8006d30 <I2C_ITError>
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3728      	adds	r7, #40	; 0x28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cba:	b2db      	uxtb	r3, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d150      	bne.n	8005d90 <I2C_MasterTransmit_TXE+0xc8>
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b21      	cmp	r3, #33	; 0x21
 8005cf2:	d14d      	bne.n	8005d90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d01d      	beq.n	8005d36 <I2C_MasterTransmit_TXE+0x6e>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d01a      	beq.n	8005d36 <I2C_MasterTransmit_TXE+0x6e>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d06:	d016      	beq.n	8005d36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2211      	movs	r2, #17
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ff54 	bl	8005bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d34:	e060      	b.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d107      	bne.n	8005d80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff6f 	bl	8005c5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d7e:	e03b      	b.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ff27 	bl	8005bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d8e:	e033      	b.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b21      	cmp	r3, #33	; 0x21
 8005d94:	d005      	beq.n	8005da2 <I2C_MasterTransmit_TXE+0xda>
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d12d      	bne.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b22      	cmp	r3, #34	; 0x22
 8005da0:	d12a      	bne.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005dbc:	e01c      	b.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d103      	bne.n	8005dd2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f88e 	bl	8005eec <I2C_MemoryTransmit_TXE_BTF>
}
 8005dd0:	e012      	b.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	781a      	ldrb	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005df6:	e7ff      	b.n	8005df8 <I2C_MasterTransmit_TXE+0x130>
 8005df8:	bf00      	nop
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b21      	cmp	r3, #33	; 0x21
 8005e18:	d164      	bne.n	8005ee4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d012      	beq.n	8005e4a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005e48:	e04c      	b.n	8005ee4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d01d      	beq.n	8005e8c <I2C_MasterTransmit_BTF+0x8c>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d01a      	beq.n	8005e8c <I2C_MasterTransmit_BTF+0x8c>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e5c:	d016      	beq.n	8005e8c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e6c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2211      	movs	r2, #17
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fea9 	bl	8005bdc <HAL_I2C_MasterTxCpltCallback>
}
 8005e8a:	e02b      	b.n	8005ee4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e9a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eaa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d107      	bne.n	8005ed6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fec4 	bl	8005c5c <HAL_I2C_MemTxCpltCallback>
}
 8005ed4:	e006      	b.n	8005ee4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fe7c 	bl	8005bdc <HAL_I2C_MasterTxCpltCallback>
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d11d      	bne.n	8005f40 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10b      	bne.n	8005f24 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005f22:	e073      	b.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	121b      	asrs	r3, r3, #8
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f3e:	e065      	b.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d10b      	bne.n	8005f60 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f5e:	e055      	b.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d151      	bne.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b22      	cmp	r3, #34	; 0x22
 8005f6c:	d10d      	bne.n	8005f8a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f88:	e040      	b.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b21      	cmp	r3, #33	; 0x21
 8005f98:	d112      	bne.n	8005fc0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005fbe:	e025      	b.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d120      	bne.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b21      	cmp	r3, #33	; 0x21
 8005fce:	d11d      	bne.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fde:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fe28 	bl	8005c5c <HAL_I2C_MemTxCpltCallback>
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b22      	cmp	r3, #34	; 0x22
 8006026:	f040 80ac 	bne.w	8006182 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d921      	bls.n	800607c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b03      	cmp	r3, #3
 8006066:	f040 808c 	bne.w	8006182 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006078:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800607a:	e082      	b.n	8006182 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	2b02      	cmp	r3, #2
 8006082:	d075      	beq.n	8006170 <I2C_MasterReceive_RXNE+0x15c>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d002      	beq.n	8006090 <I2C_MasterReceive_RXNE+0x7c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d16f      	bne.n	8006170 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 fbb7 	bl	8007804 <I2C_WaitOnSTOPRequestThroughIT>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d142      	bne.n	8006122 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d10a      	bne.n	800610c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff fdb3 	bl	8005c70 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800610a:	e03a      	b.n	8006182 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2212      	movs	r2, #18
 8006118:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fd68 	bl	8005bf0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006120:	e02f      	b.n	8006182 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006130:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fd8b 	bl	8005c84 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800616e:	e008      	b.n	8006182 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617e:	605a      	str	r2, [r3, #4]
}
 8006180:	e7ff      	b.n	8006182 <I2C_MasterReceive_RXNE+0x16e>
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d11b      	bne.n	80061da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80061d8:	e0bd      	b.n	8006356 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d129      	bne.n	8006238 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d00a      	beq.n	8006210 <I2C_MasterReceive_BTF+0x86>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d007      	beq.n	8006210 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006236:	e08e      	b.n	8006356 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d176      	bne.n	8006330 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d002      	beq.n	800624e <I2C_MasterReceive_BTF+0xc4>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b10      	cmp	r3, #16
 800624c:	d108      	bne.n	8006260 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e019      	b.n	8006294 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b04      	cmp	r3, #4
 8006264:	d002      	beq.n	800626c <I2C_MasterReceive_BTF+0xe2>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d108      	bne.n	800627e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e00a      	b.n	8006294 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b10      	cmp	r3, #16
 8006282:	d007      	beq.n	8006294 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006292:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80062ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d10a      	bne.n	800631a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fcac 	bl	8005c70 <HAL_I2C_MemRxCpltCallback>
}
 8006318:	e01d      	b.n	8006356 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2212      	movs	r2, #18
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fc61 	bl	8005bf0 <HAL_I2C_MasterRxCpltCallback>
}
 800632e:	e012      	b.n	8006356 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d117      	bne.n	80063a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637e:	b2db      	uxtb	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800638a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800638c:	e067      	b.n	800645e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	611a      	str	r2, [r3, #16]
}
 80063a0:	e05d      	b.n	800645e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063aa:	d133      	bne.n	8006414 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b21      	cmp	r3, #33	; 0x21
 80063b6:	d109      	bne.n	80063cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063c8:	611a      	str	r2, [r3, #16]
 80063ca:	e008      	b.n	80063de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <I2C_Master_SB+0x92>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d108      	bne.n	8006402 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d032      	beq.n	800645e <I2C_Master_SB+0x100>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d02d      	beq.n	800645e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006410:	605a      	str	r2, [r3, #4]
}
 8006412:	e024      	b.n	800645e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10e      	bne.n	800643a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	b29b      	uxth	r3, r3
 8006422:	11db      	asrs	r3, r3, #7
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0306 	and.w	r3, r3, #6
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f063 030f 	orn	r3, r3, #15
 8006430:	b2da      	uxtb	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	611a      	str	r2, [r3, #16]
}
 8006438:	e011      	b.n	800645e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643e:	2b01      	cmp	r3, #1
 8006440:	d10d      	bne.n	800645e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	b29b      	uxth	r3, r3
 8006448:	11db      	asrs	r3, r3, #7
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 0306 	and.w	r3, r3, #6
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f063 030e 	orn	r3, r3, #14
 8006456:	b2da      	uxtb	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	611a      	str	r2, [r3, #16]
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	b2da      	uxtb	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <I2C_Master_ADD10+0x26>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d108      	bne.n	80064a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <I2C_Master_ADD10+0x48>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b0:	605a      	str	r2, [r3, #4]
  }
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80064be:	b480      	push	{r7}
 80064c0:	b091      	sub	sp, #68	; 0x44
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b22      	cmp	r3, #34	; 0x22
 80064e6:	f040 8169 	bne.w	80067bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10f      	bne.n	8006512 <I2C_Master_ADDR+0x54>
 80064f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d10b      	bne.n	8006512 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fa:	2300      	movs	r3, #0
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	633b      	str	r3, [r7, #48]	; 0x30
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	e160      	b.n	80067d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006516:	2b00      	cmp	r3, #0
 8006518:	d11d      	bne.n	8006556 <I2C_Master_ADDR+0x98>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006522:	d118      	bne.n	8006556 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006524:	2300      	movs	r3, #0
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006548:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	651a      	str	r2, [r3, #80]	; 0x50
 8006554:	e13e      	b.n	80067d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d113      	bne.n	8006588 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006560:	2300      	movs	r3, #0
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e115      	b.n	80067b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	f040 808a 	bne.w	80066a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800659a:	d137      	bne.n	800660c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ba:	d113      	bne.n	80065e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	e0e7      	b.n	80067b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e4:	2300      	movs	r3, #0
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e0d3      	b.n	80067b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	2b08      	cmp	r3, #8
 8006610:	d02e      	beq.n	8006670 <I2C_Master_ADDR+0x1b2>
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	2b20      	cmp	r3, #32
 8006616:	d02b      	beq.n	8006670 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	2b12      	cmp	r3, #18
 800661c:	d102      	bne.n	8006624 <I2C_Master_ADDR+0x166>
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	2b01      	cmp	r3, #1
 8006622:	d125      	bne.n	8006670 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	2b04      	cmp	r3, #4
 8006628:	d00e      	beq.n	8006648 <I2C_Master_ADDR+0x18a>
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	2b02      	cmp	r3, #2
 800662e:	d00b      	beq.n	8006648 <I2C_Master_ADDR+0x18a>
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	2b10      	cmp	r3, #16
 8006634:	d008      	beq.n	8006648 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e007      	b.n	8006658 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006656:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	e0a1      	b.n	80067b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e085      	b.n	80067b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d14d      	bne.n	800674e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d016      	beq.n	80066e6 <I2C_Master_ADDR+0x228>
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d013      	beq.n	80066e6 <I2C_Master_ADDR+0x228>
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d010      	beq.n	80066e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e007      	b.n	80066f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006704:	d117      	bne.n	8006736 <I2C_Master_ADDR+0x278>
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800670c:	d00b      	beq.n	8006726 <I2C_Master_ADDR+0x268>
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	2b01      	cmp	r3, #1
 8006712:	d008      	beq.n	8006726 <I2C_Master_ADDR+0x268>
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	2b08      	cmp	r3, #8
 8006718:	d005      	beq.n	8006726 <I2C_Master_ADDR+0x268>
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	2b10      	cmp	r3, #16
 800671e:	d002      	beq.n	8006726 <I2C_Master_ADDR+0x268>
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	2b20      	cmp	r3, #32
 8006724:	d107      	bne.n	8006736 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006734:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	e032      	b.n	80067b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800675c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d117      	bne.n	800679e <I2C_Master_ADDR+0x2e0>
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006774:	d00b      	beq.n	800678e <I2C_Master_ADDR+0x2d0>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	2b01      	cmp	r3, #1
 800677a:	d008      	beq.n	800678e <I2C_Master_ADDR+0x2d0>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	2b08      	cmp	r3, #8
 8006780:	d005      	beq.n	800678e <I2C_Master_ADDR+0x2d0>
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	2b10      	cmp	r3, #16
 8006786:	d002      	beq.n	800678e <I2C_Master_ADDR+0x2d0>
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	2b20      	cmp	r3, #32
 800678c:	d107      	bne.n	800679e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800679c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80067ba:	e00b      	b.n	80067d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
}
 80067d2:	e7ff      	b.n	80067d4 <I2C_Master_ADDR+0x316>
 80067d4:	bf00      	nop
 80067d6:	3744      	adds	r7, #68	; 0x44
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d02b      	beq.n	8006852 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d114      	bne.n	8006852 <I2C_SlaveTransmit_TXE+0x72>
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2b29      	cmp	r3, #41	; 0x29
 800682c:	d111      	bne.n	8006852 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2221      	movs	r2, #33	; 0x21
 8006842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2228      	movs	r2, #40	; 0x28
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff f9d9 	bl	8005c04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d011      	beq.n	8006890 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d02c      	beq.n	8006910 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d114      	bne.n	8006910 <I2C_SlaveReceive_RXNE+0x74>
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b2a      	cmp	r3, #42	; 0x2a
 80068ea:	d111      	bne.n	8006910 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2222      	movs	r2, #34	; 0x22
 8006900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2228      	movs	r2, #40	; 0x28
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff f984 	bl	8005c18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d012      	beq.n	8006950 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006976:	2b28      	cmp	r3, #40	; 0x28
 8006978:	d127      	bne.n	80069ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006988:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	089b      	lsrs	r3, r3, #2
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006996:	2301      	movs	r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	09db      	lsrs	r3, r3, #7
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	81bb      	strh	r3, [r7, #12]
 80069ac:	e002      	b.n	80069b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80069bc:	89ba      	ldrh	r2, [r7, #12]
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff f932 	bl	8005c2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80069c8:	e00e      	b.n	80069e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ca:	2300      	movs	r3, #0
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a10:	2300      	movs	r3, #0
 8006a12:	60bb      	str	r3, [r7, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	60bb      	str	r3, [r7, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4c:	d172      	bne.n	8006b34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	2b22      	cmp	r3, #34	; 0x22
 8006a52:	d002      	beq.n	8006a5a <I2C_Slave_STOPF+0x6a>
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b2a      	cmp	r3, #42	; 0x2a
 8006a58:	d135      	bne.n	8006ac6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f043 0204 	orr.w	r2, r3, #4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fd fe05 	bl	80046a2 <HAL_DMA_GetState>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d049      	beq.n	8006b32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	4a69      	ldr	r2, [pc, #420]	; (8006c48 <I2C_Slave_STOPF+0x258>)
 8006aa4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fd fdd7 	bl	800465e <HAL_DMA_Abort_IT>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d03d      	beq.n	8006b32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ac4:	e035      	b.n	8006b32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f043 0204 	orr.w	r2, r3, #4
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006af8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fd fdcf 	bl	80046a2 <HAL_DMA_GetState>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d014      	beq.n	8006b34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	4a4e      	ldr	r2, [pc, #312]	; (8006c48 <I2C_Slave_STOPF+0x258>)
 8006b10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fd fda1 	bl	800465e <HAL_DMA_Abort_IT>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d008      	beq.n	8006b34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	e000      	b.n	8006b34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d03e      	beq.n	8006bbc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d112      	bne.n	8006b72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d112      	bne.n	8006ba6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	f043 0204 	orr.w	r2, r3, #4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f8b3 	bl	8006d30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006bca:	e039      	b.n	8006c40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd0:	d109      	bne.n	8006be6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2228      	movs	r2, #40	; 0x28
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff f819 	bl	8005c18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b28      	cmp	r3, #40	; 0x28
 8006bf0:	d111      	bne.n	8006c16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <I2C_Slave_STOPF+0x25c>)
 8006bf6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff f81a 	bl	8005c48 <HAL_I2C_ListenCpltCallback>
}
 8006c14:	e014      	b.n	8006c40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	2b22      	cmp	r3, #34	; 0x22
 8006c1c:	d002      	beq.n	8006c24 <I2C_Slave_STOPF+0x234>
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b22      	cmp	r3, #34	; 0x22
 8006c22:	d10d      	bne.n	8006c40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fe ffec 	bl	8005c18 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	08007405 	.word	0x08007405
 8006c4c:	ffff0000 	.word	0xffff0000

08006c50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d002      	beq.n	8006c72 <I2C_Slave_AF+0x22>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d129      	bne.n	8006cc6 <I2C_Slave_AF+0x76>
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b28      	cmp	r3, #40	; 0x28
 8006c76:	d126      	bne.n	8006cc6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a2c      	ldr	r2, [pc, #176]	; (8006d2c <I2C_Slave_AF+0xdc>)
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe ffc2 	bl	8005c48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006cc4:	e02e      	b.n	8006d24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b21      	cmp	r3, #33	; 0x21
 8006cca:	d126      	bne.n	8006d1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a17      	ldr	r2, [pc, #92]	; (8006d2c <I2C_Slave_AF+0xdc>)
 8006cd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2221      	movs	r2, #33	; 0x21
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cf6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe ff76 	bl	8005c04 <HAL_I2C_SlaveTxCpltCallback>
}
 8006d18:	e004      	b.n	8006d24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d22:	615a      	str	r2, [r3, #20]
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	ffff0000 	.word	0xffff0000

08006d30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d002      	beq.n	8006d54 <I2C_ITError+0x24>
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d10a      	bne.n	8006d6a <I2C_ITError+0x3a>
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b22      	cmp	r3, #34	; 0x22
 8006d58:	d107      	bne.n	8006d6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d70:	2b28      	cmp	r3, #40	; 0x28
 8006d72:	d107      	bne.n	8006d84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2228      	movs	r2, #40	; 0x28
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d82:	e015      	b.n	8006db0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d92:	d00a      	beq.n	8006daa <I2C_ITError+0x7a>
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b60      	cmp	r3, #96	; 0x60
 8006d98:	d007      	beq.n	8006daa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbe:	d162      	bne.n	8006e86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d020      	beq.n	8006e20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	4a6a      	ldr	r2, [pc, #424]	; (8006f8c <I2C_ITError+0x25c>)
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd fc37 	bl	800465e <HAL_DMA_Abort_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8089 	beq.w	8006f0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4798      	blx	r3
 8006e1e:	e074      	b.n	8006f0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	4a59      	ldr	r2, [pc, #356]	; (8006f8c <I2C_ITError+0x25c>)
 8006e26:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fd fc16 	bl	800465e <HAL_DMA_Abort_IT>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d068      	beq.n	8006f0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d10b      	bne.n	8006e5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0201 	bic.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	e041      	b.n	8006f0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b60      	cmp	r3, #96	; 0x60
 8006e90:	d125      	bne.n	8006ede <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	d10b      	bne.n	8006ec6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fe fede 	bl	8005c98 <HAL_I2C_AbortCpltCallback>
 8006edc:	e015      	b.n	8006f0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	d10b      	bne.n	8006f04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fe febd 	bl	8005c84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10e      	bne.n	8006f38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d113      	bne.n	8006f84 <I2C_ITError+0x254>
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b28      	cmp	r3, #40	; 0x28
 8006f60:	d110      	bne.n	8006f84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <I2C_ITError+0x260>)
 8006f66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fe fe62 	bl	8005c48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	08007405 	.word	0x08007405
 8006f90:	ffff0000 	.word	0xffff0000

08006f94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d006      	beq.n	8006fbe <I2C_MasterRequestWrite+0x2a>
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d003      	beq.n	8006fbe <I2C_MasterRequestWrite+0x2a>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fbc:	d108      	bne.n	8006fd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e00b      	b.n	8006fe8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	2b12      	cmp	r3, #18
 8006fd6:	d107      	bne.n	8006fe8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 faad 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00d      	beq.n	800701c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700e:	d103      	bne.n	8007018 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e035      	b.n	8007088 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007024:	d108      	bne.n	8007038 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007026:	897b      	ldrh	r3, [r7, #10]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007034:	611a      	str	r2, [r3, #16]
 8007036:	e01b      	b.n	8007070 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007038:	897b      	ldrh	r3, [r7, #10]
 800703a:	11db      	asrs	r3, r3, #7
 800703c:	b2db      	uxtb	r3, r3
 800703e:	f003 0306 	and.w	r3, r3, #6
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f063 030f 	orn	r3, r3, #15
 8007048:	b2da      	uxtb	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	490e      	ldr	r1, [pc, #56]	; (8007090 <I2C_MasterRequestWrite+0xfc>)
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fad3 	bl	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e010      	b.n	8007088 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	b2da      	uxtb	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	4907      	ldr	r1, [pc, #28]	; (8007094 <I2C_MasterRequestWrite+0x100>)
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fac3 	bl	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	00010008 	.word	0x00010008
 8007094:	00010002 	.word	0x00010002

08007098 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	460b      	mov	r3, r1
 80070a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d006      	beq.n	80070d2 <I2C_MasterRequestRead+0x3a>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d003      	beq.n	80070d2 <I2C_MasterRequestRead+0x3a>
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070d0:	d108      	bne.n	80070e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	e00b      	b.n	80070fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	2b11      	cmp	r3, #17
 80070ea:	d107      	bne.n	80070fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fa23 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00d      	beq.n	8007130 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007122:	d103      	bne.n	800712c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e079      	b.n	8007224 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007138:	d108      	bne.n	800714c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800713a:	897b      	ldrh	r3, [r7, #10]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	b2da      	uxtb	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	611a      	str	r2, [r3, #16]
 800714a:	e05f      	b.n	800720c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800714c:	897b      	ldrh	r3, [r7, #10]
 800714e:	11db      	asrs	r3, r3, #7
 8007150:	b2db      	uxtb	r3, r3
 8007152:	f003 0306 	and.w	r3, r3, #6
 8007156:	b2db      	uxtb	r3, r3
 8007158:	f063 030f 	orn	r3, r3, #15
 800715c:	b2da      	uxtb	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4930      	ldr	r1, [pc, #192]	; (800722c <I2C_MasterRequestRead+0x194>)
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa49 	bl	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e054      	b.n	8007224 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800717a:	897b      	ldrh	r3, [r7, #10]
 800717c:	b2da      	uxtb	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4929      	ldr	r1, [pc, #164]	; (8007230 <I2C_MasterRequestRead+0x198>)
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fa39 	bl	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e044      	b.n	8007224 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f9c1 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00d      	beq.n	80071f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e6:	d103      	bne.n	80071f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e017      	b.n	8007224 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80071f4:	897b      	ldrh	r3, [r7, #10]
 80071f6:	11db      	asrs	r3, r3, #7
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f003 0306 	and.w	r3, r3, #6
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f063 030e 	orn	r3, r3, #14
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	4907      	ldr	r1, [pc, #28]	; (8007230 <I2C_MasterRequestRead+0x198>)
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 f9f5 	bl	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	00010008 	.word	0x00010008
 8007230:	00010002 	.word	0x00010002

08007234 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	4603      	mov	r3, r0
 8007244:	817b      	strh	r3, [r7, #10]
 8007246:	460b      	mov	r3, r1
 8007248:	813b      	strh	r3, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800725c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800726c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	2200      	movs	r2, #0
 8007276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f96a 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00d      	beq.n	80072a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007294:	d103      	bne.n	800729e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e0aa      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072a2:	897b      	ldrh	r3, [r7, #10]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	6a3a      	ldr	r2, [r7, #32]
 80072b6:	4952      	ldr	r1, [pc, #328]	; (8007400 <I2C_RequestMemoryRead+0x1cc>)
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f9a2 	bl	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e097      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e0:	6a39      	ldr	r1, [r7, #32]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fa0c 	bl	8007700 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00d      	beq.n	800730a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d107      	bne.n	8007306 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e076      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d105      	bne.n	800731c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007310:	893b      	ldrh	r3, [r7, #8]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	611a      	str	r2, [r3, #16]
 800731a:	e021      	b.n	8007360 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800731c:	893b      	ldrh	r3, [r7, #8]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	b29b      	uxth	r3, r3
 8007322:	b2da      	uxtb	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800732a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732c:	6a39      	ldr	r1, [r7, #32]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f9e6 	bl	8007700 <I2C_WaitOnTXEFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00d      	beq.n	8007356 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b04      	cmp	r3, #4
 8007340:	d107      	bne.n	8007352 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e050      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007356:	893b      	ldrh	r3, [r7, #8]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	6a39      	ldr	r1, [r7, #32]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f9cb 	bl	8007700 <I2C_WaitOnTXEFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	2b04      	cmp	r3, #4
 8007376:	d107      	bne.n	8007388 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007386:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e035      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800739a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f8d3 	bl	8007554 <I2C_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	d103      	bne.n	80073cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e013      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073d0:	897b      	ldrh	r3, [r7, #10]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	4906      	ldr	r1, [pc, #24]	; (8007400 <I2C_RequestMemoryRead+0x1cc>)
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f90b 	bl	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	00010002 	.word	0x00010002

08007404 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800741e:	4b4b      	ldr	r3, [pc, #300]	; (800754c <I2C_DMAAbort+0x148>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	08db      	lsrs	r3, r3, #3
 8007424:	4a4a      	ldr	r2, [pc, #296]	; (8007550 <I2C_DMAAbort+0x14c>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	0a1a      	lsrs	r2, r3, #8
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	00da      	lsls	r2, r3, #3
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f043 0220 	orr.w	r2, r3, #32
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800744a:	e00a      	b.n	8007462 <I2C_DMAAbort+0x5e>
    }
    count--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3b01      	subs	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007460:	d0ea      	beq.n	8007438 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	2200      	movs	r2, #0
 8007470:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	2200      	movs	r2, #0
 8007480:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007490:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	2200      	movs	r2, #0
 80074a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	2200      	movs	r2, #0
 80074b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b60      	cmp	r3, #96	; 0x60
 80074d2:	d10e      	bne.n	80074f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2200      	movs	r2, #0
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	f7fe fbd4 	bl	8005c98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074f0:	e027      	b.n	8007542 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80074f2:	7cfb      	ldrb	r3, [r7, #19]
 80074f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074f8:	2b28      	cmp	r3, #40	; 0x28
 80074fa:	d117      	bne.n	800752c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800751a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2228      	movs	r2, #40	; 0x28
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800752a:	e007      	b.n	800753c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800753c:	6978      	ldr	r0, [r7, #20]
 800753e:	f7fe fba1 	bl	8005c84 <HAL_I2C_ErrorCallback>
}
 8007542:	bf00      	nop
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000028 	.word	0x20000028
 8007550:	14f8b589 	.word	0x14f8b589

08007554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007564:	e025      	b.n	80075b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800756c:	d021      	beq.n	80075b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756e:	f7fc fec5 	bl	80042fc <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d302      	bcc.n	8007584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d116      	bne.n	80075b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f043 0220 	orr.w	r2, r3, #32
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e023      	b.n	80075fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d10d      	bne.n	80075d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	43da      	mvns	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	e00c      	b.n	80075f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	43da      	mvns	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d0b6      	beq.n	8007566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007610:	e051      	b.n	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800761c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007620:	d123      	bne.n	800766a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007630:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800763a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f043 0204 	orr.w	r2, r3, #4
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e046      	b.n	80076f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007670:	d021      	beq.n	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007672:	f7fc fe43 	bl	80042fc <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	429a      	cmp	r2, r3
 8007680:	d302      	bcc.n	8007688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d116      	bne.n	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f043 0220 	orr.w	r2, r3, #32
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e020      	b.n	80076f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	0c1b      	lsrs	r3, r3, #16
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d10c      	bne.n	80076da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	43da      	mvns	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bf14      	ite	ne
 80076d2:	2301      	movne	r3, #1
 80076d4:	2300      	moveq	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	e00b      	b.n	80076f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	43da      	mvns	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	4013      	ands	r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bf14      	ite	ne
 80076ec:	2301      	movne	r3, #1
 80076ee:	2300      	moveq	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d18d      	bne.n	8007612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800770c:	e02d      	b.n	800776a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f900 	bl	8007914 <I2C_IsAcknowledgeFailed>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e02d      	b.n	800777a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007724:	d021      	beq.n	800776a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007726:	f7fc fde9 	bl	80042fc <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d302      	bcc.n	800773c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d116      	bne.n	800776a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f043 0220 	orr.w	r2, r3, #32
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e007      	b.n	800777a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007774:	2b80      	cmp	r3, #128	; 0x80
 8007776:	d1ca      	bne.n	800770e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800778e:	e02d      	b.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f8bf 	bl	8007914 <I2C_IsAcknowledgeFailed>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e02d      	b.n	80077fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a6:	d021      	beq.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a8:	f7fc fda8 	bl	80042fc <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d302      	bcc.n	80077be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d116      	bne.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	f043 0220 	orr.w	r2, r3, #32
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e007      	b.n	80077fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0304 	and.w	r3, r3, #4
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d1ca      	bne.n	8007790 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007810:	4b13      	ldr	r3, [pc, #76]	; (8007860 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	08db      	lsrs	r3, r3, #3
 8007816:	4a13      	ldr	r2, [pc, #76]	; (8007864 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	0a1a      	lsrs	r2, r3, #8
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3b01      	subs	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d107      	bne.n	8007842 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f043 0220 	orr.w	r2, r3, #32
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e008      	b.n	8007854 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800784c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007850:	d0e9      	beq.n	8007826 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	20000028 	.word	0x20000028
 8007864:	14f8b589 	.word	0x14f8b589

08007868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007874:	e042      	b.n	80078fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b10      	cmp	r3, #16
 8007882:	d119      	bne.n	80078b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0210 	mvn.w	r2, #16
 800788c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e029      	b.n	800790c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b8:	f7fc fd20 	bl	80042fc <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d302      	bcc.n	80078ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d116      	bne.n	80078fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e007      	b.n	800790c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d1b5      	bne.n	8007876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792a:	d11b      	bne.n	8007964 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007934:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	f043 0204 	orr.w	r2, r3, #4
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007982:	d103      	bne.n	800798c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800798a:	e007      	b.n	800799c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007994:	d102      	bne.n	800799c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2208      	movs	r2, #8
 800799a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e267      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d075      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079c6:	4b88      	ldr	r3, [pc, #544]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 030c 	and.w	r3, r3, #12
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00c      	beq.n	80079ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079d2:	4b85      	ldr	r3, [pc, #532]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079da:	2b08      	cmp	r3, #8
 80079dc:	d112      	bne.n	8007a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079de:	4b82      	ldr	r3, [pc, #520]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ea:	d10b      	bne.n	8007a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079ec:	4b7e      	ldr	r3, [pc, #504]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d05b      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x108>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d157      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e242      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCC_OscConfig+0x74>
 8007a0e:	4b76      	ldr	r3, [pc, #472]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a75      	ldr	r2, [pc, #468]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	e01d      	b.n	8007a58 <HAL_RCC_OscConfig+0xb0>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a24:	d10c      	bne.n	8007a40 <HAL_RCC_OscConfig+0x98>
 8007a26:	4b70      	ldr	r3, [pc, #448]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a6f      	ldr	r2, [pc, #444]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4b6d      	ldr	r3, [pc, #436]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a6c      	ldr	r2, [pc, #432]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e00b      	b.n	8007a58 <HAL_RCC_OscConfig+0xb0>
 8007a40:	4b69      	ldr	r3, [pc, #420]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a68      	ldr	r2, [pc, #416]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	4b66      	ldr	r3, [pc, #408]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a65      	ldr	r2, [pc, #404]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d013      	beq.n	8007a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a60:	f7fc fc4c 	bl	80042fc <HAL_GetTick>
 8007a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a66:	e008      	b.n	8007a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a68:	f7fc fc48 	bl	80042fc <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b64      	cmp	r3, #100	; 0x64
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e207      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a7a:	4b5b      	ldr	r3, [pc, #364]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f0      	beq.n	8007a68 <HAL_RCC_OscConfig+0xc0>
 8007a86:	e014      	b.n	8007ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a88:	f7fc fc38 	bl	80042fc <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a90:	f7fc fc34 	bl	80042fc <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b64      	cmp	r3, #100	; 0x64
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e1f3      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aa2:	4b51      	ldr	r3, [pc, #324]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <HAL_RCC_OscConfig+0xe8>
 8007aae:	e000      	b.n	8007ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d063      	beq.n	8007b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007abe:	4b4a      	ldr	r3, [pc, #296]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 030c 	and.w	r3, r3, #12
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aca:	4b47      	ldr	r3, [pc, #284]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d11c      	bne.n	8007b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ad6:	4b44      	ldr	r3, [pc, #272]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d116      	bne.n	8007b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ae2:	4b41      	ldr	r3, [pc, #260]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_RCC_OscConfig+0x152>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d001      	beq.n	8007afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e1c7      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afa:	4b3b      	ldr	r3, [pc, #236]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	4937      	ldr	r1, [pc, #220]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b0e:	e03a      	b.n	8007b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d020      	beq.n	8007b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b18:	4b34      	ldr	r3, [pc, #208]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1e:	f7fc fbed 	bl	80042fc <HAL_GetTick>
 8007b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b24:	e008      	b.n	8007b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b26:	f7fc fbe9 	bl	80042fc <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d901      	bls.n	8007b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e1a8      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b38:	4b2b      	ldr	r3, [pc, #172]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0f0      	beq.n	8007b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b44:	4b28      	ldr	r3, [pc, #160]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	4925      	ldr	r1, [pc, #148]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	600b      	str	r3, [r1, #0]
 8007b58:	e015      	b.n	8007b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b5a:	4b24      	ldr	r3, [pc, #144]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fc fbcc 	bl	80042fc <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b68:	f7fc fbc8 	bl	80042fc <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e187      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b7a:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f0      	bne.n	8007b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d036      	beq.n	8007c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d016      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b9a:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <HAL_RCC_OscConfig+0x248>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba0:	f7fc fbac 	bl	80042fc <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ba8:	f7fc fba8 	bl	80042fc <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e167      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bba:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <HAL_RCC_OscConfig+0x240>)
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0f0      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x200>
 8007bc6:	e01b      	b.n	8007c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bc8:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <HAL_RCC_OscConfig+0x248>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bce:	f7fc fb95 	bl	80042fc <HAL_GetTick>
 8007bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bd4:	e00e      	b.n	8007bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bd6:	f7fc fb91 	bl	80042fc <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d907      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e150      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
 8007be8:	40023800 	.word	0x40023800
 8007bec:	42470000 	.word	0x42470000
 8007bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bf4:	4b88      	ldr	r3, [pc, #544]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1ea      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8097 	beq.w	8007d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c12:	4b81      	ldr	r3, [pc, #516]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10f      	bne.n	8007c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	4b7d      	ldr	r3, [pc, #500]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	4a7c      	ldr	r2, [pc, #496]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c2e:	4b7a      	ldr	r3, [pc, #488]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c36:	60bb      	str	r3, [r7, #8]
 8007c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c3e:	4b77      	ldr	r3, [pc, #476]	; (8007e1c <HAL_RCC_OscConfig+0x474>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d118      	bne.n	8007c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c4a:	4b74      	ldr	r3, [pc, #464]	; (8007e1c <HAL_RCC_OscConfig+0x474>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a73      	ldr	r2, [pc, #460]	; (8007e1c <HAL_RCC_OscConfig+0x474>)
 8007c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c56:	f7fc fb51 	bl	80042fc <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5c:	e008      	b.n	8007c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5e:	f7fc fb4d 	bl	80042fc <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e10c      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c70:	4b6a      	ldr	r3, [pc, #424]	; (8007e1c <HAL_RCC_OscConfig+0x474>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <HAL_RCC_OscConfig+0x2ea>
 8007c84:	4b64      	ldr	r3, [pc, #400]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c88:	4a63      	ldr	r2, [pc, #396]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c90:	e01c      	b.n	8007ccc <HAL_RCC_OscConfig+0x324>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	d10c      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x30c>
 8007c9a:	4b5f      	ldr	r3, [pc, #380]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9e:	4a5e      	ldr	r2, [pc, #376]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007ca0:	f043 0304 	orr.w	r3, r3, #4
 8007ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ca6:	4b5c      	ldr	r3, [pc, #368]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007caa:	4a5b      	ldr	r2, [pc, #364]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb2:	e00b      	b.n	8007ccc <HAL_RCC_OscConfig+0x324>
 8007cb4:	4b58      	ldr	r3, [pc, #352]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	4a57      	ldr	r2, [pc, #348]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc0:	4b55      	ldr	r3, [pc, #340]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc4:	4a54      	ldr	r2, [pc, #336]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007cc6:	f023 0304 	bic.w	r3, r3, #4
 8007cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd4:	f7fc fb12 	bl	80042fc <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cda:	e00a      	b.n	8007cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cdc:	f7fc fb0e 	bl	80042fc <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e0cb      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cf2:	4b49      	ldr	r3, [pc, #292]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0ee      	beq.n	8007cdc <HAL_RCC_OscConfig+0x334>
 8007cfe:	e014      	b.n	8007d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d00:	f7fc fafc 	bl	80042fc <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d06:	e00a      	b.n	8007d1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d08:	f7fc faf8 	bl	80042fc <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e0b5      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d1e:	4b3e      	ldr	r3, [pc, #248]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1ee      	bne.n	8007d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d105      	bne.n	8007d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d30:	4b39      	ldr	r3, [pc, #228]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	4a38      	ldr	r2, [pc, #224]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80a1 	beq.w	8007e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d46:	4b34      	ldr	r3, [pc, #208]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d05c      	beq.n	8007e0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d141      	bne.n	8007dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <HAL_RCC_OscConfig+0x478>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d60:	f7fc facc 	bl	80042fc <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d68:	f7fc fac8 	bl	80042fc <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e087      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d7a:	4b27      	ldr	r3, [pc, #156]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f0      	bne.n	8007d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69da      	ldr	r2, [r3, #28]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	019b      	lsls	r3, r3, #6
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	085b      	lsrs	r3, r3, #1
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	491b      	ldr	r1, [pc, #108]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007db0:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <HAL_RCC_OscConfig+0x478>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db6:	f7fc faa1 	bl	80042fc <HAL_GetTick>
 8007dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dbc:	e008      	b.n	8007dd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dbe:	f7fc fa9d 	bl	80042fc <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d901      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e05c      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0f0      	beq.n	8007dbe <HAL_RCC_OscConfig+0x416>
 8007ddc:	e054      	b.n	8007e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <HAL_RCC_OscConfig+0x478>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de4:	f7fc fa8a 	bl	80042fc <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dec:	f7fc fa86 	bl	80042fc <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e045      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <HAL_RCC_OscConfig+0x470>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0x444>
 8007e0a:	e03d      	b.n	8007e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d107      	bne.n	8007e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e038      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	40007000 	.word	0x40007000
 8007e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e24:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <HAL_RCC_OscConfig+0x4ec>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d028      	beq.n	8007e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d121      	bne.n	8007e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d11a      	bne.n	8007e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e54:	4013      	ands	r3, r2
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d111      	bne.n	8007e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d107      	bne.n	8007e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d001      	beq.n	8007e88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	40023800 	.word	0x40023800

08007e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0cc      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007eac:	4b68      	ldr	r3, [pc, #416]	; (8008050 <HAL_RCC_ClockConfig+0x1b8>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d90c      	bls.n	8007ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eba:	4b65      	ldr	r3, [pc, #404]	; (8008050 <HAL_RCC_ClockConfig+0x1b8>)
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec2:	4b63      	ldr	r3, [pc, #396]	; (8008050 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d001      	beq.n	8007ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0b8      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d020      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007eec:	4b59      	ldr	r3, [pc, #356]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a58      	ldr	r2, [pc, #352]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f04:	4b53      	ldr	r3, [pc, #332]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	4a52      	ldr	r2, [pc, #328]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f10:	4b50      	ldr	r3, [pc, #320]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	494d      	ldr	r1, [pc, #308]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d044      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d107      	bne.n	8007f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f36:	4b47      	ldr	r3, [pc, #284]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d119      	bne.n	8007f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e07f      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d003      	beq.n	8007f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d107      	bne.n	8007f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f56:	4b3f      	ldr	r3, [pc, #252]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e06f      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f66:	4b3b      	ldr	r3, [pc, #236]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e067      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f76:	4b37      	ldr	r3, [pc, #220]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f023 0203 	bic.w	r2, r3, #3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4934      	ldr	r1, [pc, #208]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f88:	f7fc f9b8 	bl	80042fc <HAL_GetTick>
 8007f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8e:	e00a      	b.n	8007fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f90:	f7fc f9b4 	bl	80042fc <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e04f      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa6:	4b2b      	ldr	r3, [pc, #172]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 020c 	and.w	r2, r3, #12
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d1eb      	bne.n	8007f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fb8:	4b25      	ldr	r3, [pc, #148]	; (8008050 <HAL_RCC_ClockConfig+0x1b8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d20c      	bcs.n	8007fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fc6:	4b22      	ldr	r3, [pc, #136]	; (8008050 <HAL_RCC_ClockConfig+0x1b8>)
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	b2d2      	uxtb	r2, r2
 8007fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fce:	4b20      	ldr	r3, [pc, #128]	; (8008050 <HAL_RCC_ClockConfig+0x1b8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d001      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e032      	b.n	8008046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fec:	4b19      	ldr	r3, [pc, #100]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4916      	ldr	r1, [pc, #88]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	490e      	ldr	r1, [pc, #56]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 800801a:	4313      	orrs	r3, r2
 800801c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800801e:	f000 f821 	bl	8008064 <HAL_RCC_GetSysClockFreq>
 8008022:	4602      	mov	r2, r0
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_RCC_ClockConfig+0x1bc>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	490a      	ldr	r1, [pc, #40]	; (8008058 <HAL_RCC_ClockConfig+0x1c0>)
 8008030:	5ccb      	ldrb	r3, [r1, r3]
 8008032:	fa22 f303 	lsr.w	r3, r2, r3
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <HAL_RCC_ClockConfig+0x1c4>)
 8008038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <HAL_RCC_ClockConfig+0x1c8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f7fc f918 	bl	8004274 <HAL_InitTick>

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40023c00 	.word	0x40023c00
 8008054:	40023800 	.word	0x40023800
 8008058:	0800dcf0 	.word	0x0800dcf0
 800805c:	20000028 	.word	0x20000028
 8008060:	2000002c 	.word	0x2000002c

08008064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008068:	b094      	sub	sp, #80	; 0x50
 800806a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	647b      	str	r3, [r7, #68]	; 0x44
 8008070:	2300      	movs	r3, #0
 8008072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008074:	2300      	movs	r3, #0
 8008076:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800807c:	4b79      	ldr	r3, [pc, #484]	; (8008264 <HAL_RCC_GetSysClockFreq+0x200>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 030c 	and.w	r3, r3, #12
 8008084:	2b08      	cmp	r3, #8
 8008086:	d00d      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008088:	2b08      	cmp	r3, #8
 800808a:	f200 80e1 	bhi.w	8008250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <HAL_RCC_GetSysClockFreq+0x34>
 8008092:	2b04      	cmp	r3, #4
 8008094:	d003      	beq.n	800809e <HAL_RCC_GetSysClockFreq+0x3a>
 8008096:	e0db      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008098:	4b73      	ldr	r3, [pc, #460]	; (8008268 <HAL_RCC_GetSysClockFreq+0x204>)
 800809a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800809c:	e0db      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800809e:	4b73      	ldr	r3, [pc, #460]	; (800826c <HAL_RCC_GetSysClockFreq+0x208>)
 80080a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080a2:	e0d8      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080a4:	4b6f      	ldr	r3, [pc, #444]	; (8008264 <HAL_RCC_GetSysClockFreq+0x200>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080ae:	4b6d      	ldr	r3, [pc, #436]	; (8008264 <HAL_RCC_GetSysClockFreq+0x200>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d063      	beq.n	8008182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ba:	4b6a      	ldr	r3, [pc, #424]	; (8008264 <HAL_RCC_GetSysClockFreq+0x200>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	099b      	lsrs	r3, r3, #6
 80080c0:	2200      	movs	r2, #0
 80080c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80080c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080cc:	633b      	str	r3, [r7, #48]	; 0x30
 80080ce:	2300      	movs	r3, #0
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
 80080d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80080d6:	4622      	mov	r2, r4
 80080d8:	462b      	mov	r3, r5
 80080da:	f04f 0000 	mov.w	r0, #0
 80080de:	f04f 0100 	mov.w	r1, #0
 80080e2:	0159      	lsls	r1, r3, #5
 80080e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080e8:	0150      	lsls	r0, r2, #5
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4621      	mov	r1, r4
 80080f0:	1a51      	subs	r1, r2, r1
 80080f2:	6139      	str	r1, [r7, #16]
 80080f4:	4629      	mov	r1, r5
 80080f6:	eb63 0301 	sbc.w	r3, r3, r1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008108:	4659      	mov	r1, fp
 800810a:	018b      	lsls	r3, r1, #6
 800810c:	4651      	mov	r1, sl
 800810e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008112:	4651      	mov	r1, sl
 8008114:	018a      	lsls	r2, r1, #6
 8008116:	4651      	mov	r1, sl
 8008118:	ebb2 0801 	subs.w	r8, r2, r1
 800811c:	4659      	mov	r1, fp
 800811e:	eb63 0901 	sbc.w	r9, r3, r1
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800812e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008136:	4690      	mov	r8, r2
 8008138:	4699      	mov	r9, r3
 800813a:	4623      	mov	r3, r4
 800813c:	eb18 0303 	adds.w	r3, r8, r3
 8008140:	60bb      	str	r3, [r7, #8]
 8008142:	462b      	mov	r3, r5
 8008144:	eb49 0303 	adc.w	r3, r9, r3
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008156:	4629      	mov	r1, r5
 8008158:	024b      	lsls	r3, r1, #9
 800815a:	4621      	mov	r1, r4
 800815c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008160:	4621      	mov	r1, r4
 8008162:	024a      	lsls	r2, r1, #9
 8008164:	4610      	mov	r0, r2
 8008166:	4619      	mov	r1, r3
 8008168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816a:	2200      	movs	r2, #0
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
 800816e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008174:	f7f8 fd68 	bl	8000c48 <__aeabi_uldivmod>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4613      	mov	r3, r2
 800817e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008180:	e058      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008182:	4b38      	ldr	r3, [pc, #224]	; (8008264 <HAL_RCC_GetSysClockFreq+0x200>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	099b      	lsrs	r3, r3, #6
 8008188:	2200      	movs	r2, #0
 800818a:	4618      	mov	r0, r3
 800818c:	4611      	mov	r1, r2
 800818e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008192:	623b      	str	r3, [r7, #32]
 8008194:	2300      	movs	r3, #0
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
 8008198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	f04f 0000 	mov.w	r0, #0
 80081a4:	f04f 0100 	mov.w	r1, #0
 80081a8:	0159      	lsls	r1, r3, #5
 80081aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081ae:	0150      	lsls	r0, r2, #5
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4641      	mov	r1, r8
 80081b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80081ba:	4649      	mov	r1, r9
 80081bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80081cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80081d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80081d4:	ebb2 040a 	subs.w	r4, r2, sl
 80081d8:	eb63 050b 	sbc.w	r5, r3, fp
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	00eb      	lsls	r3, r5, #3
 80081e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081ea:	00e2      	lsls	r2, r4, #3
 80081ec:	4614      	mov	r4, r2
 80081ee:	461d      	mov	r5, r3
 80081f0:	4643      	mov	r3, r8
 80081f2:	18e3      	adds	r3, r4, r3
 80081f4:	603b      	str	r3, [r7, #0]
 80081f6:	464b      	mov	r3, r9
 80081f8:	eb45 0303 	adc.w	r3, r5, r3
 80081fc:	607b      	str	r3, [r7, #4]
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800820a:	4629      	mov	r1, r5
 800820c:	028b      	lsls	r3, r1, #10
 800820e:	4621      	mov	r1, r4
 8008210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008214:	4621      	mov	r1, r4
 8008216:	028a      	lsls	r2, r1, #10
 8008218:	4610      	mov	r0, r2
 800821a:	4619      	mov	r1, r3
 800821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821e:	2200      	movs	r2, #0
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	61fa      	str	r2, [r7, #28]
 8008224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008228:	f7f8 fd0e 	bl	8000c48 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4613      	mov	r3, r2
 8008232:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008234:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <HAL_RCC_GetSysClockFreq+0x200>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	3301      	adds	r3, #1
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800824e:	e002      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <HAL_RCC_GetSysClockFreq+0x204>)
 8008252:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008258:	4618      	mov	r0, r3
 800825a:	3750      	adds	r7, #80	; 0x50
 800825c:	46bd      	mov	sp, r7
 800825e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008262:	bf00      	nop
 8008264:	40023800 	.word	0x40023800
 8008268:	00f42400 	.word	0x00f42400
 800826c:	007a1200 	.word	0x007a1200

08008270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008274:	4b03      	ldr	r3, [pc, #12]	; (8008284 <HAL_RCC_GetHCLKFreq+0x14>)
 8008276:	681b      	ldr	r3, [r3, #0]
}
 8008278:	4618      	mov	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20000028 	.word	0x20000028

08008288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800828c:	f7ff fff0 	bl	8008270 <HAL_RCC_GetHCLKFreq>
 8008290:	4602      	mov	r2, r0
 8008292:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	0a9b      	lsrs	r3, r3, #10
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	4903      	ldr	r1, [pc, #12]	; (80082ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800829e:	5ccb      	ldrb	r3, [r1, r3]
 80082a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40023800 	.word	0x40023800
 80082ac:	0800dd00 	.word	0x0800dd00

080082b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082b4:	f7ff ffdc 	bl	8008270 <HAL_RCC_GetHCLKFreq>
 80082b8:	4602      	mov	r2, r0
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	0b5b      	lsrs	r3, r3, #13
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	4903      	ldr	r1, [pc, #12]	; (80082d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082c6:	5ccb      	ldrb	r3, [r1, r3]
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40023800 	.word	0x40023800
 80082d4:	0800dd00 	.word	0x0800dd00

080082d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e07b      	b.n	80083e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d108      	bne.n	8008304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082fa:	d009      	beq.n	8008310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	61da      	str	r2, [r3, #28]
 8008302:	e005      	b.n	8008310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fa fa16 	bl	800275c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008394:	ea42 0103 	orr.w	r1, r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	0c1b      	lsrs	r3, r3, #16
 80083ae:	f003 0104 	and.w	r1, r3, #4
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	f003 0210 	and.w	r2, r3, #16
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e041      	b.n	8008480 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d106      	bne.n	8008416 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7fa fa0b 	bl	800282c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2202      	movs	r2, #2
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3304      	adds	r3, #4
 8008426:	4619      	mov	r1, r3
 8008428:	4610      	mov	r0, r2
 800842a:	f000 fdb3 	bl	8008f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b01      	cmp	r3, #1
 800849a:	d001      	beq.n	80084a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e04e      	b.n	800853e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a23      	ldr	r2, [pc, #140]	; (800854c <HAL_TIM_Base_Start_IT+0xc4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d022      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x80>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ca:	d01d      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x80>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <HAL_TIM_Base_Start_IT+0xc8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d018      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x80>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <HAL_TIM_Base_Start_IT+0xcc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d013      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x80>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <HAL_TIM_Base_Start_IT+0xd0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00e      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x80>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1b      	ldr	r2, [pc, #108]	; (800855c <HAL_TIM_Base_Start_IT+0xd4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d009      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x80>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a19      	ldr	r2, [pc, #100]	; (8008560 <HAL_TIM_Base_Start_IT+0xd8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d004      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x80>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a18      	ldr	r2, [pc, #96]	; (8008564 <HAL_TIM_Base_Start_IT+0xdc>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d111      	bne.n	800852c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b06      	cmp	r3, #6
 8008518:	d010      	beq.n	800853c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0201 	orr.w	r2, r2, #1
 8008528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852a:	e007      	b.n	800853c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0201 	orr.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	40010000 	.word	0x40010000
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40010400 	.word	0x40010400
 8008560:	40014000 	.word	0x40014000
 8008564:	40001800 	.word	0x40001800

08008568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e041      	b.n	80085fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f839 	bl	8008606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f000 fcf4 	bl	8008f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d109      	bne.n	8008640 <HAL_TIM_PWM_Start+0x24>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	e022      	b.n	8008686 <HAL_TIM_PWM_Start+0x6a>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b04      	cmp	r3, #4
 8008644:	d109      	bne.n	800865a <HAL_TIM_PWM_Start+0x3e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b01      	cmp	r3, #1
 8008650:	bf14      	ite	ne
 8008652:	2301      	movne	r3, #1
 8008654:	2300      	moveq	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	e015      	b.n	8008686 <HAL_TIM_PWM_Start+0x6a>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b08      	cmp	r3, #8
 800865e:	d109      	bne.n	8008674 <HAL_TIM_PWM_Start+0x58>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	bf14      	ite	ne
 800866c:	2301      	movne	r3, #1
 800866e:	2300      	moveq	r3, #0
 8008670:	b2db      	uxtb	r3, r3
 8008672:	e008      	b.n	8008686 <HAL_TIM_PWM_Start+0x6a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	bf14      	ite	ne
 8008680:	2301      	movne	r3, #1
 8008682:	2300      	moveq	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e07c      	b.n	8008788 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <HAL_TIM_PWM_Start+0x82>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800869c:	e013      	b.n	80086c6 <HAL_TIM_PWM_Start+0xaa>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d104      	bne.n	80086ae <HAL_TIM_PWM_Start+0x92>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086ac:	e00b      	b.n	80086c6 <HAL_TIM_PWM_Start+0xaa>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d104      	bne.n	80086be <HAL_TIM_PWM_Start+0xa2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086bc:	e003      	b.n	80086c6 <HAL_TIM_PWM_Start+0xaa>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2202      	movs	r2, #2
 80086c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2201      	movs	r2, #1
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 f874 	bl	80097bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a2d      	ldr	r2, [pc, #180]	; (8008790 <HAL_TIM_PWM_Start+0x174>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d004      	beq.n	80086e8 <HAL_TIM_PWM_Start+0xcc>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a2c      	ldr	r2, [pc, #176]	; (8008794 <HAL_TIM_PWM_Start+0x178>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d101      	bne.n	80086ec <HAL_TIM_PWM_Start+0xd0>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e000      	b.n	80086ee <HAL_TIM_PWM_Start+0xd2>
 80086ec:	2300      	movs	r3, #0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d007      	beq.n	8008702 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a22      	ldr	r2, [pc, #136]	; (8008790 <HAL_TIM_PWM_Start+0x174>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d022      	beq.n	8008752 <HAL_TIM_PWM_Start+0x136>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008714:	d01d      	beq.n	8008752 <HAL_TIM_PWM_Start+0x136>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a1f      	ldr	r2, [pc, #124]	; (8008798 <HAL_TIM_PWM_Start+0x17c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d018      	beq.n	8008752 <HAL_TIM_PWM_Start+0x136>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1d      	ldr	r2, [pc, #116]	; (800879c <HAL_TIM_PWM_Start+0x180>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d013      	beq.n	8008752 <HAL_TIM_PWM_Start+0x136>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1c      	ldr	r2, [pc, #112]	; (80087a0 <HAL_TIM_PWM_Start+0x184>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00e      	beq.n	8008752 <HAL_TIM_PWM_Start+0x136>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a16      	ldr	r2, [pc, #88]	; (8008794 <HAL_TIM_PWM_Start+0x178>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d009      	beq.n	8008752 <HAL_TIM_PWM_Start+0x136>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a18      	ldr	r2, [pc, #96]	; (80087a4 <HAL_TIM_PWM_Start+0x188>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d004      	beq.n	8008752 <HAL_TIM_PWM_Start+0x136>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a16      	ldr	r2, [pc, #88]	; (80087a8 <HAL_TIM_PWM_Start+0x18c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d111      	bne.n	8008776 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b06      	cmp	r3, #6
 8008762:	d010      	beq.n	8008786 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008774:	e007      	b.n	8008786 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0201 	orr.w	r2, r2, #1
 8008784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40010000 	.word	0x40010000
 8008794:	40010400 	.word	0x40010400
 8008798:	40000400 	.word	0x40000400
 800879c:	40000800 	.word	0x40000800
 80087a0:	40000c00 	.word	0x40000c00
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40001800 	.word	0x40001800

080087ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e041      	b.n	8008842 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f839 	bl	800884a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3304      	adds	r3, #4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f000 fbd2 	bl	8008f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b02      	cmp	r3, #2
 8008872:	d122      	bne.n	80088ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b02      	cmp	r3, #2
 8008880:	d11b      	bne.n	80088ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f06f 0202 	mvn.w	r2, #2
 800888a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fb fb1d 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 80088a6:	e005      	b.n	80088b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fb55 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fb5c 	bl	8008f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d122      	bne.n	800890e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d11b      	bne.n	800890e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f06f 0204 	mvn.w	r2, #4
 80088de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7fb faf3 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 80088fa:	e005      	b.n	8008908 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fb2b 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fb32 	bl	8008f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b08      	cmp	r3, #8
 800891a:	d122      	bne.n	8008962 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b08      	cmp	r3, #8
 8008928:	d11b      	bne.n	8008962 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f06f 0208 	mvn.w	r2, #8
 8008932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2204      	movs	r2, #4
 8008938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7fb fac9 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 800894e:	e005      	b.n	800895c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fb01 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fb08 	bl	8008f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b10      	cmp	r3, #16
 800896e:	d122      	bne.n	80089b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b10      	cmp	r3, #16
 800897c:	d11b      	bne.n	80089b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f06f 0210 	mvn.w	r2, #16
 8008986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2208      	movs	r2, #8
 800898c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7fb fa9f 	bl	8003ee0 <HAL_TIM_IC_CaptureCallback>
 80089a2:	e005      	b.n	80089b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fad7 	bl	8008f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fade 	bl	8008f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d10e      	bne.n	80089e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d107      	bne.n	80089e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f06f 0201 	mvn.w	r2, #1
 80089da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fab1 	bl	8008f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ec:	2b80      	cmp	r3, #128	; 0x80
 80089ee:	d10e      	bne.n	8008a0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d107      	bne.n	8008a0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 ffd5 	bl	80099b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b40      	cmp	r3, #64	; 0x40
 8008a1a:	d10e      	bne.n	8008a3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d107      	bne.n	8008a3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 faa3 	bl	8008f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	d10e      	bne.n	8008a66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d107      	bne.n	8008a66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f06f 0220 	mvn.w	r2, #32
 8008a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 ff9f 	bl	80099a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d101      	bne.n	8008a8c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e088      	b.n	8008b9e <HAL_TIM_IC_ConfigChannel+0x130>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d11b      	bne.n	8008ad2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6819      	ldr	r1, [r3, #0]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f000 fcc3 	bl	8009434 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699a      	ldr	r2, [r3, #24]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 020c 	bic.w	r2, r2, #12
 8008abc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6999      	ldr	r1, [r3, #24]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	619a      	str	r2, [r3, #24]
 8008ad0:	e060      	b.n	8008b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d11c      	bne.n	8008b12 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6818      	ldr	r0, [r3, #0]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f000 fd47 	bl	800957a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008afa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6999      	ldr	r1, [r3, #24]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	021a      	lsls	r2, r3, #8
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	619a      	str	r2, [r3, #24]
 8008b10:	e040      	b.n	8008b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	d11b      	bne.n	8008b50 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	6819      	ldr	r1, [r3, #0]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f000 fd94 	bl	8009654 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69da      	ldr	r2, [r3, #28]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 020c 	bic.w	r2, r2, #12
 8008b3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	69d9      	ldr	r1, [r3, #28]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	61da      	str	r2, [r3, #28]
 8008b4e:	e021      	b.n	8008b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b0c      	cmp	r3, #12
 8008b54:	d11c      	bne.n	8008b90 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	6819      	ldr	r1, [r3, #0]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f000 fdb1 	bl	80096cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69da      	ldr	r2, [r3, #28]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	69d9      	ldr	r1, [r3, #28]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	021a      	lsls	r2, r3, #8
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	61da      	str	r2, [r3, #28]
 8008b8e:	e001      	b.n	8008b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e0ae      	b.n	8008d24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b0c      	cmp	r3, #12
 8008bd2:	f200 809f 	bhi.w	8008d14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008c11 	.word	0x08008c11
 8008be0:	08008d15 	.word	0x08008d15
 8008be4:	08008d15 	.word	0x08008d15
 8008be8:	08008d15 	.word	0x08008d15
 8008bec:	08008c51 	.word	0x08008c51
 8008bf0:	08008d15 	.word	0x08008d15
 8008bf4:	08008d15 	.word	0x08008d15
 8008bf8:	08008d15 	.word	0x08008d15
 8008bfc:	08008c93 	.word	0x08008c93
 8008c00:	08008d15 	.word	0x08008d15
 8008c04:	08008d15 	.word	0x08008d15
 8008c08:	08008d15 	.word	0x08008d15
 8008c0c:	08008cd3 	.word	0x08008cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fa5c 	bl	80090d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0208 	orr.w	r2, r2, #8
 8008c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699a      	ldr	r2, [r3, #24]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0204 	bic.w	r2, r2, #4
 8008c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6999      	ldr	r1, [r3, #24]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	691a      	ldr	r2, [r3, #16]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	619a      	str	r2, [r3, #24]
      break;
 8008c4e:	e064      	b.n	8008d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68b9      	ldr	r1, [r7, #8]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 faac 	bl	80091b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699a      	ldr	r2, [r3, #24]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6999      	ldr	r1, [r3, #24]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	021a      	lsls	r2, r3, #8
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	619a      	str	r2, [r3, #24]
      break;
 8008c90:	e043      	b.n	8008d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fb01 	bl	80092a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69da      	ldr	r2, [r3, #28]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f042 0208 	orr.w	r2, r2, #8
 8008cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69da      	ldr	r2, [r3, #28]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0204 	bic.w	r2, r2, #4
 8008cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69d9      	ldr	r1, [r3, #28]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	691a      	ldr	r2, [r3, #16]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	61da      	str	r2, [r3, #28]
      break;
 8008cd0:	e023      	b.n	8008d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fb55 	bl	8009388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69da      	ldr	r2, [r3, #28]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69d9      	ldr	r1, [r3, #28]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	021a      	lsls	r2, r3, #8
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	61da      	str	r2, [r3, #28]
      break;
 8008d12:	e002      	b.n	8008d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
      break;
 8008d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_TIM_ConfigClockSource+0x1c>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e0b4      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x186>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d80:	d03e      	beq.n	8008e00 <HAL_TIM_ConfigClockSource+0xd4>
 8008d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d86:	f200 8087 	bhi.w	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d8e:	f000 8086 	beq.w	8008e9e <HAL_TIM_ConfigClockSource+0x172>
 8008d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d96:	d87f      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008d98:	2b70      	cmp	r3, #112	; 0x70
 8008d9a:	d01a      	beq.n	8008dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8008d9c:	2b70      	cmp	r3, #112	; 0x70
 8008d9e:	d87b      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008da0:	2b60      	cmp	r3, #96	; 0x60
 8008da2:	d050      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x11a>
 8008da4:	2b60      	cmp	r3, #96	; 0x60
 8008da6:	d877      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008da8:	2b50      	cmp	r3, #80	; 0x50
 8008daa:	d03c      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0xfa>
 8008dac:	2b50      	cmp	r3, #80	; 0x50
 8008dae:	d873      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008db0:	2b40      	cmp	r3, #64	; 0x40
 8008db2:	d058      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x13a>
 8008db4:	2b40      	cmp	r3, #64	; 0x40
 8008db6:	d86f      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008db8:	2b30      	cmp	r3, #48	; 0x30
 8008dba:	d064      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dbc:	2b30      	cmp	r3, #48	; 0x30
 8008dbe:	d86b      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d060      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	d867      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d05c      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d05a      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dd0:	e062      	b.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6899      	ldr	r1, [r3, #8]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f000 fccb 	bl	800977c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	609a      	str	r2, [r3, #8]
      break;
 8008dfe:	e04f      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	6899      	ldr	r1, [r3, #8]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f000 fcb4 	bl	800977c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e22:	609a      	str	r2, [r3, #8]
      break;
 8008e24:	e03c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6859      	ldr	r1, [r3, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f000 fb72 	bl	800951c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2150      	movs	r1, #80	; 0x50
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fc81 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008e44:	e02c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	6859      	ldr	r1, [r3, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	461a      	mov	r2, r3
 8008e54:	f000 fbce 	bl	80095f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2160      	movs	r1, #96	; 0x60
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fc71 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008e64:	e01c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	6859      	ldr	r1, [r3, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	461a      	mov	r2, r3
 8008e74:	f000 fb52 	bl	800951c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2140      	movs	r1, #64	; 0x40
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fc61 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008e84:	e00c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f000 fc58 	bl	8009746 <TIM_ITRx_SetConfig>
      break;
 8008e96:	e003      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e9c:	e000      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b0c      	cmp	r3, #12
 8008ece:	d831      	bhi.n	8008f34 <HAL_TIM_ReadCapturedValue+0x78>
 8008ed0:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008f0d 	.word	0x08008f0d
 8008edc:	08008f35 	.word	0x08008f35
 8008ee0:	08008f35 	.word	0x08008f35
 8008ee4:	08008f35 	.word	0x08008f35
 8008ee8:	08008f17 	.word	0x08008f17
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	08008f35 	.word	0x08008f35
 8008ef4:	08008f35 	.word	0x08008f35
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f35 	.word	0x08008f35
 8008f00:	08008f35 	.word	0x08008f35
 8008f04:	08008f35 	.word	0x08008f35
 8008f08:	08008f2b 	.word	0x08008f2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f12:	60fb      	str	r3, [r7, #12]

      break;
 8008f14:	e00f      	b.n	8008f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	60fb      	str	r3, [r7, #12]

      break;
 8008f1e:	e00a      	b.n	8008f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	60fb      	str	r3, [r7, #12]

      break;
 8008f28:	e005      	b.n	8008f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f30:	60fb      	str	r3, [r7, #12]

      break;
 8008f32:	e000      	b.n	8008f36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008f34:	bf00      	nop
  }

  return tmpreg;
 8008f36:	68fb      	ldr	r3, [r7, #12]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a40      	ldr	r2, [pc, #256]	; (80090a8 <TIM_Base_SetConfig+0x114>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d013      	beq.n	8008fd4 <TIM_Base_SetConfig+0x40>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb2:	d00f      	beq.n	8008fd4 <TIM_Base_SetConfig+0x40>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a3d      	ldr	r2, [pc, #244]	; (80090ac <TIM_Base_SetConfig+0x118>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d00b      	beq.n	8008fd4 <TIM_Base_SetConfig+0x40>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a3c      	ldr	r2, [pc, #240]	; (80090b0 <TIM_Base_SetConfig+0x11c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d007      	beq.n	8008fd4 <TIM_Base_SetConfig+0x40>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a3b      	ldr	r2, [pc, #236]	; (80090b4 <TIM_Base_SetConfig+0x120>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d003      	beq.n	8008fd4 <TIM_Base_SetConfig+0x40>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a3a      	ldr	r2, [pc, #232]	; (80090b8 <TIM_Base_SetConfig+0x124>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d108      	bne.n	8008fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a2f      	ldr	r2, [pc, #188]	; (80090a8 <TIM_Base_SetConfig+0x114>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d02b      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff4:	d027      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a2c      	ldr	r2, [pc, #176]	; (80090ac <TIM_Base_SetConfig+0x118>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d023      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a2b      	ldr	r2, [pc, #172]	; (80090b0 <TIM_Base_SetConfig+0x11c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d01f      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a2a      	ldr	r2, [pc, #168]	; (80090b4 <TIM_Base_SetConfig+0x120>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d01b      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a29      	ldr	r2, [pc, #164]	; (80090b8 <TIM_Base_SetConfig+0x124>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d017      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a28      	ldr	r2, [pc, #160]	; (80090bc <TIM_Base_SetConfig+0x128>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d013      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a27      	ldr	r2, [pc, #156]	; (80090c0 <TIM_Base_SetConfig+0x12c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00f      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a26      	ldr	r2, [pc, #152]	; (80090c4 <TIM_Base_SetConfig+0x130>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00b      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a25      	ldr	r2, [pc, #148]	; (80090c8 <TIM_Base_SetConfig+0x134>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d007      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a24      	ldr	r2, [pc, #144]	; (80090cc <TIM_Base_SetConfig+0x138>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d003      	beq.n	8009046 <TIM_Base_SetConfig+0xb2>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a23      	ldr	r2, [pc, #140]	; (80090d0 <TIM_Base_SetConfig+0x13c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d108      	bne.n	8009058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800904c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a0a      	ldr	r2, [pc, #40]	; (80090a8 <TIM_Base_SetConfig+0x114>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_Base_SetConfig+0xf8>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a0c      	ldr	r2, [pc, #48]	; (80090b8 <TIM_Base_SetConfig+0x124>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d103      	bne.n	8009094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	691a      	ldr	r2, [r3, #16]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	615a      	str	r2, [r3, #20]
}
 800909a:	bf00      	nop
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40000400 	.word	0x40000400
 80090b0:	40000800 	.word	0x40000800
 80090b4:	40000c00 	.word	0x40000c00
 80090b8:	40010400 	.word	0x40010400
 80090bc:	40014000 	.word	0x40014000
 80090c0:	40014400 	.word	0x40014400
 80090c4:	40014800 	.word	0x40014800
 80090c8:	40001800 	.word	0x40001800
 80090cc:	40001c00 	.word	0x40001c00
 80090d0:	40002000 	.word	0x40002000

080090d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f023 0201 	bic.w	r2, r3, #1
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f023 0302 	bic.w	r3, r3, #2
 800911c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	4313      	orrs	r3, r2
 8009126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a20      	ldr	r2, [pc, #128]	; (80091ac <TIM_OC1_SetConfig+0xd8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d003      	beq.n	8009138 <TIM_OC1_SetConfig+0x64>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a1f      	ldr	r2, [pc, #124]	; (80091b0 <TIM_OC1_SetConfig+0xdc>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d10c      	bne.n	8009152 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f023 0308 	bic.w	r3, r3, #8
 800913e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	4313      	orrs	r3, r2
 8009148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f023 0304 	bic.w	r3, r3, #4
 8009150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a15      	ldr	r2, [pc, #84]	; (80091ac <TIM_OC1_SetConfig+0xd8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d003      	beq.n	8009162 <TIM_OC1_SetConfig+0x8e>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a14      	ldr	r2, [pc, #80]	; (80091b0 <TIM_OC1_SetConfig+0xdc>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d111      	bne.n	8009186 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	4313      	orrs	r3, r2
 8009184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	621a      	str	r2, [r3, #32]
}
 80091a0:	bf00      	nop
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	40010000 	.word	0x40010000
 80091b0:	40010400 	.word	0x40010400

080091b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f023 0210 	bic.w	r2, r3, #16
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	021b      	lsls	r3, r3, #8
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f023 0320 	bic.w	r3, r3, #32
 80091fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a22      	ldr	r2, [pc, #136]	; (8009298 <TIM_OC2_SetConfig+0xe4>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d003      	beq.n	800921c <TIM_OC2_SetConfig+0x68>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a21      	ldr	r2, [pc, #132]	; (800929c <TIM_OC2_SetConfig+0xe8>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d10d      	bne.n	8009238 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	4313      	orrs	r3, r2
 800922e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a17      	ldr	r2, [pc, #92]	; (8009298 <TIM_OC2_SetConfig+0xe4>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d003      	beq.n	8009248 <TIM_OC2_SetConfig+0x94>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a16      	ldr	r2, [pc, #88]	; (800929c <TIM_OC2_SetConfig+0xe8>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d113      	bne.n	8009270 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800924e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	4313      	orrs	r3, r2
 8009262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	621a      	str	r2, [r3, #32]
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40010000 	.word	0x40010000
 800929c:	40010400 	.word	0x40010400

080092a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0303 	bic.w	r3, r3, #3
 80092d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a21      	ldr	r2, [pc, #132]	; (8009380 <TIM_OC3_SetConfig+0xe0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d003      	beq.n	8009306 <TIM_OC3_SetConfig+0x66>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a20      	ldr	r2, [pc, #128]	; (8009384 <TIM_OC3_SetConfig+0xe4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d10d      	bne.n	8009322 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800930c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a16      	ldr	r2, [pc, #88]	; (8009380 <TIM_OC3_SetConfig+0xe0>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d003      	beq.n	8009332 <TIM_OC3_SetConfig+0x92>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a15      	ldr	r2, [pc, #84]	; (8009384 <TIM_OC3_SetConfig+0xe4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d113      	bne.n	800935a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	4313      	orrs	r3, r2
 800934c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	011b      	lsls	r3, r3, #4
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4313      	orrs	r3, r2
 8009358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	621a      	str	r2, [r3, #32]
}
 8009374:	bf00      	nop
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	40010000 	.word	0x40010000
 8009384:	40010400 	.word	0x40010400

08009388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	021b      	lsls	r3, r3, #8
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	031b      	lsls	r3, r3, #12
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4313      	orrs	r3, r2
 80093de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a12      	ldr	r2, [pc, #72]	; (800942c <TIM_OC4_SetConfig+0xa4>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d003      	beq.n	80093f0 <TIM_OC4_SetConfig+0x68>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a11      	ldr	r2, [pc, #68]	; (8009430 <TIM_OC4_SetConfig+0xa8>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d109      	bne.n	8009404 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	019b      	lsls	r3, r3, #6
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40010000 	.word	0x40010000
 8009430:	40010400 	.word	0x40010400

08009434 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	f023 0201 	bic.w	r2, r3, #1
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4a28      	ldr	r2, [pc, #160]	; (8009500 <TIM_TI1_SetConfig+0xcc>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d01b      	beq.n	800949a <TIM_TI1_SetConfig+0x66>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009468:	d017      	beq.n	800949a <TIM_TI1_SetConfig+0x66>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4a25      	ldr	r2, [pc, #148]	; (8009504 <TIM_TI1_SetConfig+0xd0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d013      	beq.n	800949a <TIM_TI1_SetConfig+0x66>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4a24      	ldr	r2, [pc, #144]	; (8009508 <TIM_TI1_SetConfig+0xd4>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00f      	beq.n	800949a <TIM_TI1_SetConfig+0x66>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4a23      	ldr	r2, [pc, #140]	; (800950c <TIM_TI1_SetConfig+0xd8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00b      	beq.n	800949a <TIM_TI1_SetConfig+0x66>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4a22      	ldr	r2, [pc, #136]	; (8009510 <TIM_TI1_SetConfig+0xdc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d007      	beq.n	800949a <TIM_TI1_SetConfig+0x66>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4a21      	ldr	r2, [pc, #132]	; (8009514 <TIM_TI1_SetConfig+0xe0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_TI1_SetConfig+0x66>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a20      	ldr	r2, [pc, #128]	; (8009518 <TIM_TI1_SetConfig+0xe4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d101      	bne.n	800949e <TIM_TI1_SetConfig+0x6a>
 800949a:	2301      	movs	r3, #1
 800949c:	e000      	b.n	80094a0 <TIM_TI1_SetConfig+0x6c>
 800949e:	2300      	movs	r3, #0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d008      	beq.n	80094b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f023 0303 	bic.w	r3, r3, #3
 80094aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	e003      	b.n	80094be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f023 030a 	bic.w	r3, r3, #10
 80094d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f003 030a 	and.w	r3, r3, #10
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	621a      	str	r2, [r3, #32]
}
 80094f2:	bf00      	nop
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	40010000 	.word	0x40010000
 8009504:	40000400 	.word	0x40000400
 8009508:	40000800 	.word	0x40000800
 800950c:	40000c00 	.word	0x40000c00
 8009510:	40010400 	.word	0x40010400
 8009514:	40014000 	.word	0x40014000
 8009518:	40001800 	.word	0x40001800

0800951c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f023 0201 	bic.w	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	011b      	lsls	r3, r3, #4
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	4313      	orrs	r3, r2
 8009550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f023 030a 	bic.w	r3, r3, #10
 8009558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	621a      	str	r2, [r3, #32]
}
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800957a:	b480      	push	{r7}
 800957c:	b087      	sub	sp, #28
 800957e:	af00      	add	r7, sp, #0
 8009580:	60f8      	str	r0, [r7, #12]
 8009582:	60b9      	str	r1, [r7, #8]
 8009584:	607a      	str	r2, [r7, #4]
 8009586:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	f023 0210 	bic.w	r2, r3, #16
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	031b      	lsls	r3, r3, #12
 80095be:	b29b      	uxth	r3, r3
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	621a      	str	r2, [r3, #32]
}
 80095e8:	bf00      	nop
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	f023 0210 	bic.w	r2, r3, #16
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800961e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	031b      	lsls	r3, r3, #12
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	4313      	orrs	r3, r2
 8009628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009630:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	4313      	orrs	r3, r2
 800963a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	621a      	str	r2, [r3, #32]
}
 8009648:	bf00      	nop
 800964a:	371c      	adds	r7, #28
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f023 0303 	bic.w	r3, r3, #3
 8009680:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009690:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	b2db      	uxtb	r3, r3
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80096a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	621a      	str	r2, [r3, #32]
}
 80096c0:	bf00      	nop
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800970a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	031b      	lsls	r3, r3, #12
 8009710:	b29b      	uxth	r3, r3
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800971e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	031b      	lsls	r3, r3, #12
 8009724:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	621a      	str	r2, [r3, #32]
}
 800973a:	bf00      	nop
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009746:	b480      	push	{r7}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4313      	orrs	r3, r2
 8009764:	f043 0307 	orr.w	r3, r3, #7
 8009768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	609a      	str	r2, [r3, #8]
}
 8009770:	bf00      	nop
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	021a      	lsls	r2, r3, #8
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	431a      	orrs	r2, r3
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	609a      	str	r2, [r3, #8]
}
 80097b0:	bf00      	nop
 80097b2:	371c      	adds	r7, #28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f003 031f 	and.w	r3, r3, #31
 80097ce:	2201      	movs	r2, #1
 80097d0:	fa02 f303 	lsl.w	r3, r2, r3
 80097d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a1a      	ldr	r2, [r3, #32]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	43db      	mvns	r3, r3
 80097de:	401a      	ands	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6a1a      	ldr	r2, [r3, #32]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f003 031f 	and.w	r3, r3, #31
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	fa01 f303 	lsl.w	r3, r1, r3
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	621a      	str	r2, [r3, #32]
}
 80097fa:	bf00      	nop
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800981c:	2302      	movs	r3, #2
 800981e:	e05a      	b.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a21      	ldr	r2, [pc, #132]	; (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d022      	beq.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986c:	d01d      	beq.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d018      	beq.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a1b      	ldr	r2, [pc, #108]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d013      	beq.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a1a      	ldr	r2, [pc, #104]	; (80098f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00e      	beq.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a18      	ldr	r2, [pc, #96]	; (80098f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d009      	beq.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a17      	ldr	r2, [pc, #92]	; (80098f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d004      	beq.n	80098aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a15      	ldr	r2, [pc, #84]	; (80098fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d10c      	bne.n	80098c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40000400 	.word	0x40000400
 80098ec:	40000800 	.word	0x40000800
 80098f0:	40000c00 	.word	0x40000c00
 80098f4:	40010400 	.word	0x40010400
 80098f8:	40014000 	.word	0x40014000
 80098fc:	40001800 	.word	0x40001800

08009900 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009914:	2b01      	cmp	r3, #1
 8009916:	d101      	bne.n	800991c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009918:	2302      	movs	r3, #2
 800991a:	e03d      	b.n	8009998 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4313      	orrs	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	4313      	orrs	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	4313      	orrs	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e03f      	b.n	8009a5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7f9 f812 	bl	8002a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2224      	movs	r2, #36	; 0x24
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fd19 	bl	800a448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695a      	ldr	r2, [r3, #20]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	4613      	mov	r3, r2
 8009a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d130      	bne.n	8009ae2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <HAL_UART_Transmit_IT+0x26>
 8009a86:	88fb      	ldrh	r3, [r7, #6]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e029      	b.n	8009ae4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d101      	bne.n	8009a9e <HAL_UART_Transmit_IT+0x38>
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	e022      	b.n	8009ae4 <HAL_UART_Transmit_IT+0x7e>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	88fa      	ldrh	r2, [r7, #6]
 8009ab0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	88fa      	ldrh	r2, [r7, #6]
 8009ab6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2221      	movs	r2, #33	; 0x21
 8009ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009adc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e000      	b.n	8009ae4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	4613      	mov	r3, r2
 8009afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d11d      	bne.n	8009b46 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <HAL_UART_Receive_IT+0x26>
 8009b10:	88fb      	ldrh	r3, [r7, #6]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e016      	b.n	8009b48 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d101      	bne.n	8009b28 <HAL_UART_Receive_IT+0x38>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e00f      	b.n	8009b48 <HAL_UART_Receive_IT+0x58>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b36:	88fb      	ldrh	r3, [r7, #6]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 faab 	bl	800a098 <UART_Start_Receive_IT>
 8009b42:	4603      	mov	r3, r0
 8009b44:	e000      	b.n	8009b48 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009b46:	2302      	movs	r3, #2
  }
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b0ba      	sub	sp, #232	; 0xe8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b86:	f003 030f 	and.w	r3, r3, #15
 8009b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10f      	bne.n	8009bb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x66>
 8009ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fb8f 	bl	800a2d2 <UART_Receive_IT>
      return;
 8009bb4:	e256      	b.n	800a064 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 80de 	beq.w	8009d7c <HAL_UART_IRQHandler+0x22c>
 8009bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 80d1 	beq.w	8009d7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <HAL_UART_IRQHandler+0xae>
 8009be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d005      	beq.n	8009bfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf6:	f043 0201 	orr.w	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00b      	beq.n	8009c22 <HAL_UART_IRQHandler+0xd2>
 8009c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d005      	beq.n	8009c22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	f043 0202 	orr.w	r2, r3, #2
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <HAL_UART_IRQHandler+0xf6>
 8009c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	f043 0204 	orr.w	r2, r3, #4
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4a:	f003 0308 	and.w	r3, r3, #8
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d011      	beq.n	8009c76 <HAL_UART_IRQHandler+0x126>
 8009c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d105      	bne.n	8009c6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d005      	beq.n	8009c76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	f043 0208 	orr.w	r2, r3, #8
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 81ed 	beq.w	800a05a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c84:	f003 0320 	and.w	r3, r3, #32
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d008      	beq.n	8009c9e <HAL_UART_IRQHandler+0x14e>
 8009c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fb1a 	bl	800a2d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca8:	2b40      	cmp	r3, #64	; 0x40
 8009caa:	bf0c      	ite	eq
 8009cac:	2301      	moveq	r3, #1
 8009cae:	2300      	movne	r3, #0
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d103      	bne.n	8009cca <HAL_UART_IRQHandler+0x17a>
 8009cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d04f      	beq.n	8009d6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa22 	bl	800a114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cda:	2b40      	cmp	r3, #64	; 0x40
 8009cdc:	d141      	bne.n	8009d62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3314      	adds	r3, #20
 8009ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cec:	e853 3f00 	ldrex	r3, [r3]
 8009cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3314      	adds	r3, #20
 8009d06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d1a:	e841 2300 	strex	r3, r2, [r1]
 8009d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1d9      	bne.n	8009cde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d013      	beq.n	8009d5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d36:	4a7d      	ldr	r2, [pc, #500]	; (8009f2c <HAL_UART_IRQHandler+0x3dc>)
 8009d38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fa fc8d 	bl	800465e <HAL_DMA_Abort_IT>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d016      	beq.n	8009d78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d58:	e00e      	b.n	8009d78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f986 	bl	800a06c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d60:	e00a      	b.n	8009d78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f982 	bl	800a06c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d68:	e006      	b.n	8009d78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f97e 	bl	800a06c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009d76:	e170      	b.n	800a05a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d78:	bf00      	nop
    return;
 8009d7a:	e16e      	b.n	800a05a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	f040 814a 	bne.w	800a01a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d8a:	f003 0310 	and.w	r3, r3, #16
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 8143 	beq.w	800a01a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 813c 	beq.w	800a01a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009da2:	2300      	movs	r3, #0
 8009da4:	60bb      	str	r3, [r7, #8]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60bb      	str	r3, [r7, #8]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	60bb      	str	r3, [r7, #8]
 8009db6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc2:	2b40      	cmp	r3, #64	; 0x40
 8009dc4:	f040 80b4 	bne.w	8009f30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8140 	beq.w	800a05e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009de6:	429a      	cmp	r2, r3
 8009de8:	f080 8139 	bcs.w	800a05e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009df2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dfe:	f000 8088 	beq.w	8009f12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	330c      	adds	r3, #12
 8009e2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1d9      	bne.n	8009e02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3314      	adds	r3, #20
 8009e54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e60:	f023 0301 	bic.w	r3, r3, #1
 8009e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3314      	adds	r3, #20
 8009e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e1      	bne.n	8009e4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3314      	adds	r3, #20
 8009e90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3314      	adds	r3, #20
 8009eaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009eae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009eb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009eb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e3      	bne.n	8009e8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ee2:	f023 0310 	bic.w	r3, r3, #16
 8009ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	330c      	adds	r3, #12
 8009ef0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ef6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e3      	bne.n	8009ed0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fa fb36 	bl	800457e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f8ac 	bl	800a080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f28:	e099      	b.n	800a05e <HAL_UART_IRQHandler+0x50e>
 8009f2a:	bf00      	nop
 8009f2c:	0800a1db 	.word	0x0800a1db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 808b 	beq.w	800a062 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009f4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 8086 	beq.w	800a062 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	330c      	adds	r3, #12
 8009f76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009f7a:	647a      	str	r2, [r7, #68]	; 0x44
 8009f7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f82:	e841 2300 	strex	r3, r2, [r1]
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1e3      	bne.n	8009f56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3314      	adds	r3, #20
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	e853 3f00 	ldrex	r3, [r3]
 8009f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	f023 0301 	bic.w	r3, r3, #1
 8009fa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3314      	adds	r3, #20
 8009fae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fb2:	633a      	str	r2, [r7, #48]	; 0x30
 8009fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e3      	bne.n	8009f8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0310 	bic.w	r3, r3, #16
 8009fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	330c      	adds	r3, #12
 8009ff4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ff8:	61fa      	str	r2, [r7, #28]
 8009ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	69b9      	ldr	r1, [r7, #24]
 8009ffe:	69fa      	ldr	r2, [r7, #28]
 800a000:	e841 2300 	strex	r3, r2, [r1]
 800a004:	617b      	str	r3, [r7, #20]
   return(result);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e3      	bne.n	8009fd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a00c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f834 	bl	800a080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a018:	e023      	b.n	800a062 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a022:	2b00      	cmp	r3, #0
 800a024:	d009      	beq.n	800a03a <HAL_UART_IRQHandler+0x4ea>
 800a026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d003      	beq.n	800a03a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f8e5 	bl	800a202 <UART_Transmit_IT>
    return;
 800a038:	e014      	b.n	800a064 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00e      	beq.n	800a064 <HAL_UART_IRQHandler+0x514>
 800a046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d008      	beq.n	800a064 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f925 	bl	800a2a2 <UART_EndTransmit_IT>
    return;
 800a058:	e004      	b.n	800a064 <HAL_UART_IRQHandler+0x514>
    return;
 800a05a:	bf00      	nop
 800a05c:	e002      	b.n	800a064 <HAL_UART_IRQHandler+0x514>
      return;
 800a05e:	bf00      	nop
 800a060:	e000      	b.n	800a064 <HAL_UART_IRQHandler+0x514>
      return;
 800a062:	bf00      	nop
  }
}
 800a064:	37e8      	adds	r7, #232	; 0xe8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop

0800a06c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	88fa      	ldrh	r2, [r7, #6]
 800a0b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	88fa      	ldrh	r2, [r7, #6]
 800a0b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2222      	movs	r2, #34	; 0x22
 800a0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d007      	beq.n	800a0e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695a      	ldr	r2, [r3, #20]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68da      	ldr	r2, [r3, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f042 0220 	orr.w	r2, r2, #32
 800a104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b095      	sub	sp, #84	; 0x54
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	330c      	adds	r3, #12
 800a122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a132:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	330c      	adds	r3, #12
 800a13a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a13c:	643a      	str	r2, [r7, #64]	; 0x40
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e5      	bne.n	800a11c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3314      	adds	r3, #20
 800a156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	e853 3f00 	ldrex	r3, [r3]
 800a15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f023 0301 	bic.w	r3, r3, #1
 800a166:	64bb      	str	r3, [r7, #72]	; 0x48
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3314      	adds	r3, #20
 800a16e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a170:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a178:	e841 2300 	strex	r3, r2, [r1]
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e5      	bne.n	800a150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d119      	bne.n	800a1c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	330c      	adds	r3, #12
 800a192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f023 0310 	bic.w	r3, r3, #16
 800a1a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	330c      	adds	r3, #12
 800a1aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ac:	61ba      	str	r2, [r7, #24]
 800a1ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6979      	ldr	r1, [r7, #20]
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e5      	bne.n	800a18c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a1ce:	bf00      	nop
 800a1d0:	3754      	adds	r7, #84	; 0x54
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f7ff ff39 	bl	800a06c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b21      	cmp	r3, #33	; 0x21
 800a214:	d13e      	bne.n	800a294 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21e:	d114      	bne.n	800a24a <UART_Transmit_IT+0x48>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d110      	bne.n	800a24a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a23c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	1c9a      	adds	r2, r3, #2
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	621a      	str	r2, [r3, #32]
 800a248:	e008      	b.n	800a25c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	1c59      	adds	r1, r3, #1
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6211      	str	r1, [r2, #32]
 800a254:	781a      	ldrb	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a260:	b29b      	uxth	r3, r3
 800a262:	3b01      	subs	r3, #1
 800a264:	b29b      	uxth	r3, r3
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	4619      	mov	r1, r3
 800a26a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10f      	bne.n	800a290 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a27e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68da      	ldr	r2, [r3, #12]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a28e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	e000      	b.n	800a296 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a294:	2302      	movs	r3, #2
  }
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68da      	ldr	r2, [r3, #12]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7f9 fcd2 	bl	8003c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b08c      	sub	sp, #48	; 0x30
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b22      	cmp	r3, #34	; 0x22
 800a2e4:	f040 80ab 	bne.w	800a43e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f0:	d117      	bne.n	800a322 <UART_Receive_IT+0x50>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d113      	bne.n	800a322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a302:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a310:	b29a      	uxth	r2, r3
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31a:	1c9a      	adds	r2, r3, #2
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	629a      	str	r2, [r3, #40]	; 0x28
 800a320:	e026      	b.n	800a370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a334:	d007      	beq.n	800a346 <UART_Receive_IT+0x74>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <UART_Receive_IT+0x82>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d106      	bne.n	800a354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	e008      	b.n	800a366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a360:	b2da      	uxtb	r2, r3
 800a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a374:	b29b      	uxth	r3, r3
 800a376:	3b01      	subs	r3, #1
 800a378:	b29b      	uxth	r3, r3
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4619      	mov	r1, r3
 800a37e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a380:	2b00      	cmp	r3, #0
 800a382:	d15a      	bne.n	800a43a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0220 	bic.w	r2, r2, #32
 800a392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	695a      	ldr	r2, [r3, #20]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f022 0201 	bic.w	r2, r2, #1
 800a3b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d135      	bne.n	800a430 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f023 0310 	bic.w	r3, r3, #16
 800a3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	330c      	adds	r3, #12
 800a3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ea:	623a      	str	r2, [r7, #32]
 800a3ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	69f9      	ldr	r1, [r7, #28]
 800a3f0:	6a3a      	ldr	r2, [r7, #32]
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e5      	bne.n	800a3ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b10      	cmp	r3, #16
 800a40a:	d10a      	bne.n	800a422 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fe29 	bl	800a080 <HAL_UARTEx_RxEventCallback>
 800a42e:	e002      	b.n	800a436 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7f9 fc25 	bl	8003c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	e002      	b.n	800a440 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	e000      	b.n	800a440 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a43e:	2302      	movs	r3, #2
  }
}
 800a440:	4618      	mov	r0, r3
 800a442:	3730      	adds	r7, #48	; 0x30
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a44c:	b0c0      	sub	sp, #256	; 0x100
 800a44e:	af00      	add	r7, sp, #0
 800a450:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a464:	68d9      	ldr	r1, [r3, #12]
 800a466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	ea40 0301 	orr.w	r3, r0, r1
 800a470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a476:	689a      	ldr	r2, [r3, #8]
 800a478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	431a      	orrs	r2, r3
 800a480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	431a      	orrs	r2, r3
 800a488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	4313      	orrs	r3, r2
 800a490:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a4a0:	f021 010c 	bic.w	r1, r1, #12
 800a4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c2:	6999      	ldr	r1, [r3, #24]
 800a4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	ea40 0301 	orr.w	r3, r0, r1
 800a4ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4b8f      	ldr	r3, [pc, #572]	; (800a714 <UART_SetConfig+0x2cc>)
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d005      	beq.n	800a4e8 <UART_SetConfig+0xa0>
 800a4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4b8d      	ldr	r3, [pc, #564]	; (800a718 <UART_SetConfig+0x2d0>)
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d104      	bne.n	800a4f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4e8:	f7fd fee2 	bl	80082b0 <HAL_RCC_GetPCLK2Freq>
 800a4ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a4f0:	e003      	b.n	800a4fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4f2:	f7fd fec9 	bl	8008288 <HAL_RCC_GetPCLK1Freq>
 800a4f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4fe:	69db      	ldr	r3, [r3, #28]
 800a500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a504:	f040 810c 	bne.w	800a720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a512:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a51a:	4622      	mov	r2, r4
 800a51c:	462b      	mov	r3, r5
 800a51e:	1891      	adds	r1, r2, r2
 800a520:	65b9      	str	r1, [r7, #88]	; 0x58
 800a522:	415b      	adcs	r3, r3
 800a524:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a52a:	4621      	mov	r1, r4
 800a52c:	eb12 0801 	adds.w	r8, r2, r1
 800a530:	4629      	mov	r1, r5
 800a532:	eb43 0901 	adc.w	r9, r3, r1
 800a536:	f04f 0200 	mov.w	r2, #0
 800a53a:	f04f 0300 	mov.w	r3, #0
 800a53e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a54a:	4690      	mov	r8, r2
 800a54c:	4699      	mov	r9, r3
 800a54e:	4623      	mov	r3, r4
 800a550:	eb18 0303 	adds.w	r3, r8, r3
 800a554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a558:	462b      	mov	r3, r5
 800a55a:	eb49 0303 	adc.w	r3, r9, r3
 800a55e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a56e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a576:	460b      	mov	r3, r1
 800a578:	18db      	adds	r3, r3, r3
 800a57a:	653b      	str	r3, [r7, #80]	; 0x50
 800a57c:	4613      	mov	r3, r2
 800a57e:	eb42 0303 	adc.w	r3, r2, r3
 800a582:	657b      	str	r3, [r7, #84]	; 0x54
 800a584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a58c:	f7f6 fb5c 	bl	8000c48 <__aeabi_uldivmod>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4b61      	ldr	r3, [pc, #388]	; (800a71c <UART_SetConfig+0x2d4>)
 800a596:	fba3 2302 	umull	r2, r3, r3, r2
 800a59a:	095b      	lsrs	r3, r3, #5
 800a59c:	011c      	lsls	r4, r3, #4
 800a59e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a5a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a5ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	1891      	adds	r1, r2, r2
 800a5b6:	64b9      	str	r1, [r7, #72]	; 0x48
 800a5b8:	415b      	adcs	r3, r3
 800a5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	eb12 0a01 	adds.w	sl, r2, r1
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	eb43 0b01 	adc.w	fp, r3, r1
 800a5cc:	f04f 0200 	mov.w	r2, #0
 800a5d0:	f04f 0300 	mov.w	r3, #0
 800a5d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a5d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a5dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5e0:	4692      	mov	sl, r2
 800a5e2:	469b      	mov	fp, r3
 800a5e4:	4643      	mov	r3, r8
 800a5e6:	eb1a 0303 	adds.w	r3, sl, r3
 800a5ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	eb4b 0303 	adc.w	r3, fp, r3
 800a5f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a604:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a60c:	460b      	mov	r3, r1
 800a60e:	18db      	adds	r3, r3, r3
 800a610:	643b      	str	r3, [r7, #64]	; 0x40
 800a612:	4613      	mov	r3, r2
 800a614:	eb42 0303 	adc.w	r3, r2, r3
 800a618:	647b      	str	r3, [r7, #68]	; 0x44
 800a61a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a61e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a622:	f7f6 fb11 	bl	8000c48 <__aeabi_uldivmod>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4611      	mov	r1, r2
 800a62c:	4b3b      	ldr	r3, [pc, #236]	; (800a71c <UART_SetConfig+0x2d4>)
 800a62e:	fba3 2301 	umull	r2, r3, r3, r1
 800a632:	095b      	lsrs	r3, r3, #5
 800a634:	2264      	movs	r2, #100	; 0x64
 800a636:	fb02 f303 	mul.w	r3, r2, r3
 800a63a:	1acb      	subs	r3, r1, r3
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a642:	4b36      	ldr	r3, [pc, #216]	; (800a71c <UART_SetConfig+0x2d4>)
 800a644:	fba3 2302 	umull	r2, r3, r3, r2
 800a648:	095b      	lsrs	r3, r3, #5
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a650:	441c      	add	r4, r3
 800a652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a656:	2200      	movs	r2, #0
 800a658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a65c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a664:	4642      	mov	r2, r8
 800a666:	464b      	mov	r3, r9
 800a668:	1891      	adds	r1, r2, r2
 800a66a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a66c:	415b      	adcs	r3, r3
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a674:	4641      	mov	r1, r8
 800a676:	1851      	adds	r1, r2, r1
 800a678:	6339      	str	r1, [r7, #48]	; 0x30
 800a67a:	4649      	mov	r1, r9
 800a67c:	414b      	adcs	r3, r1
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	f04f 0300 	mov.w	r3, #0
 800a688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a68c:	4659      	mov	r1, fp
 800a68e:	00cb      	lsls	r3, r1, #3
 800a690:	4651      	mov	r1, sl
 800a692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a696:	4651      	mov	r1, sl
 800a698:	00ca      	lsls	r2, r1, #3
 800a69a:	4610      	mov	r0, r2
 800a69c:	4619      	mov	r1, r3
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	189b      	adds	r3, r3, r2
 800a6a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6a8:	464b      	mov	r3, r9
 800a6aa:	460a      	mov	r2, r1
 800a6ac:	eb42 0303 	adc.w	r3, r2, r3
 800a6b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a6c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a6c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	18db      	adds	r3, r3, r3
 800a6cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	eb42 0303 	adc.w	r3, r2, r3
 800a6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a6da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a6de:	f7f6 fab3 	bl	8000c48 <__aeabi_uldivmod>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <UART_SetConfig+0x2d4>)
 800a6e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a6ec:	095b      	lsrs	r3, r3, #5
 800a6ee:	2164      	movs	r1, #100	; 0x64
 800a6f0:	fb01 f303 	mul.w	r3, r1, r3
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	3332      	adds	r3, #50	; 0x32
 800a6fa:	4a08      	ldr	r2, [pc, #32]	; (800a71c <UART_SetConfig+0x2d4>)
 800a6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a700:	095b      	lsrs	r3, r3, #5
 800a702:	f003 0207 	and.w	r2, r3, #7
 800a706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4422      	add	r2, r4
 800a70e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a710:	e105      	b.n	800a91e <UART_SetConfig+0x4d6>
 800a712:	bf00      	nop
 800a714:	40011000 	.word	0x40011000
 800a718:	40011400 	.word	0x40011400
 800a71c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a724:	2200      	movs	r2, #0
 800a726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a72a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a72e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a732:	4642      	mov	r2, r8
 800a734:	464b      	mov	r3, r9
 800a736:	1891      	adds	r1, r2, r2
 800a738:	6239      	str	r1, [r7, #32]
 800a73a:	415b      	adcs	r3, r3
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
 800a73e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a742:	4641      	mov	r1, r8
 800a744:	1854      	adds	r4, r2, r1
 800a746:	4649      	mov	r1, r9
 800a748:	eb43 0501 	adc.w	r5, r3, r1
 800a74c:	f04f 0200 	mov.w	r2, #0
 800a750:	f04f 0300 	mov.w	r3, #0
 800a754:	00eb      	lsls	r3, r5, #3
 800a756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a75a:	00e2      	lsls	r2, r4, #3
 800a75c:	4614      	mov	r4, r2
 800a75e:	461d      	mov	r5, r3
 800a760:	4643      	mov	r3, r8
 800a762:	18e3      	adds	r3, r4, r3
 800a764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a768:	464b      	mov	r3, r9
 800a76a:	eb45 0303 	adc.w	r3, r5, r3
 800a76e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a77e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a782:	f04f 0200 	mov.w	r2, #0
 800a786:	f04f 0300 	mov.w	r3, #0
 800a78a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a78e:	4629      	mov	r1, r5
 800a790:	008b      	lsls	r3, r1, #2
 800a792:	4621      	mov	r1, r4
 800a794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a798:	4621      	mov	r1, r4
 800a79a:	008a      	lsls	r2, r1, #2
 800a79c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a7a0:	f7f6 fa52 	bl	8000c48 <__aeabi_uldivmod>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4b60      	ldr	r3, [pc, #384]	; (800a92c <UART_SetConfig+0x4e4>)
 800a7aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ae:	095b      	lsrs	r3, r3, #5
 800a7b0:	011c      	lsls	r4, r3, #4
 800a7b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a7bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a7c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a7c4:	4642      	mov	r2, r8
 800a7c6:	464b      	mov	r3, r9
 800a7c8:	1891      	adds	r1, r2, r2
 800a7ca:	61b9      	str	r1, [r7, #24]
 800a7cc:	415b      	adcs	r3, r3
 800a7ce:	61fb      	str	r3, [r7, #28]
 800a7d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7d4:	4641      	mov	r1, r8
 800a7d6:	1851      	adds	r1, r2, r1
 800a7d8:	6139      	str	r1, [r7, #16]
 800a7da:	4649      	mov	r1, r9
 800a7dc:	414b      	adcs	r3, r1
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	f04f 0200 	mov.w	r2, #0
 800a7e4:	f04f 0300 	mov.w	r3, #0
 800a7e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	00cb      	lsls	r3, r1, #3
 800a7f0:	4651      	mov	r1, sl
 800a7f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7f6:	4651      	mov	r1, sl
 800a7f8:	00ca      	lsls	r2, r1, #3
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	4642      	mov	r2, r8
 800a802:	189b      	adds	r3, r3, r2
 800a804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a808:	464b      	mov	r3, r9
 800a80a:	460a      	mov	r2, r1
 800a80c:	eb42 0303 	adc.w	r3, r2, r3
 800a810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a81e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a820:	f04f 0200 	mov.w	r2, #0
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a82c:	4649      	mov	r1, r9
 800a82e:	008b      	lsls	r3, r1, #2
 800a830:	4641      	mov	r1, r8
 800a832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a836:	4641      	mov	r1, r8
 800a838:	008a      	lsls	r2, r1, #2
 800a83a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a83e:	f7f6 fa03 	bl	8000c48 <__aeabi_uldivmod>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4b39      	ldr	r3, [pc, #228]	; (800a92c <UART_SetConfig+0x4e4>)
 800a848:	fba3 1302 	umull	r1, r3, r3, r2
 800a84c:	095b      	lsrs	r3, r3, #5
 800a84e:	2164      	movs	r1, #100	; 0x64
 800a850:	fb01 f303 	mul.w	r3, r1, r3
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	3332      	adds	r3, #50	; 0x32
 800a85a:	4a34      	ldr	r2, [pc, #208]	; (800a92c <UART_SetConfig+0x4e4>)
 800a85c:	fba2 2303 	umull	r2, r3, r2, r3
 800a860:	095b      	lsrs	r3, r3, #5
 800a862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a866:	441c      	add	r4, r3
 800a868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a86c:	2200      	movs	r2, #0
 800a86e:	673b      	str	r3, [r7, #112]	; 0x70
 800a870:	677a      	str	r2, [r7, #116]	; 0x74
 800a872:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a876:	4642      	mov	r2, r8
 800a878:	464b      	mov	r3, r9
 800a87a:	1891      	adds	r1, r2, r2
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	415b      	adcs	r3, r3
 800a880:	60fb      	str	r3, [r7, #12]
 800a882:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a886:	4641      	mov	r1, r8
 800a888:	1851      	adds	r1, r2, r1
 800a88a:	6039      	str	r1, [r7, #0]
 800a88c:	4649      	mov	r1, r9
 800a88e:	414b      	adcs	r3, r1
 800a890:	607b      	str	r3, [r7, #4]
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a89e:	4659      	mov	r1, fp
 800a8a0:	00cb      	lsls	r3, r1, #3
 800a8a2:	4651      	mov	r1, sl
 800a8a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8a8:	4651      	mov	r1, sl
 800a8aa:	00ca      	lsls	r2, r1, #3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	4642      	mov	r2, r8
 800a8b4:	189b      	adds	r3, r3, r2
 800a8b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	460a      	mov	r2, r1
 800a8bc:	eb42 0303 	adc.w	r3, r2, r3
 800a8c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	663b      	str	r3, [r7, #96]	; 0x60
 800a8cc:	667a      	str	r2, [r7, #100]	; 0x64
 800a8ce:	f04f 0200 	mov.w	r2, #0
 800a8d2:	f04f 0300 	mov.w	r3, #0
 800a8d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a8da:	4649      	mov	r1, r9
 800a8dc:	008b      	lsls	r3, r1, #2
 800a8de:	4641      	mov	r1, r8
 800a8e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8e4:	4641      	mov	r1, r8
 800a8e6:	008a      	lsls	r2, r1, #2
 800a8e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a8ec:	f7f6 f9ac 	bl	8000c48 <__aeabi_uldivmod>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <UART_SetConfig+0x4e4>)
 800a8f6:	fba3 1302 	umull	r1, r3, r3, r2
 800a8fa:	095b      	lsrs	r3, r3, #5
 800a8fc:	2164      	movs	r1, #100	; 0x64
 800a8fe:	fb01 f303 	mul.w	r3, r1, r3
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	011b      	lsls	r3, r3, #4
 800a906:	3332      	adds	r3, #50	; 0x32
 800a908:	4a08      	ldr	r2, [pc, #32]	; (800a92c <UART_SetConfig+0x4e4>)
 800a90a:	fba2 2303 	umull	r2, r3, r2, r3
 800a90e:	095b      	lsrs	r3, r3, #5
 800a910:	f003 020f 	and.w	r2, r3, #15
 800a914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4422      	add	r2, r4
 800a91c:	609a      	str	r2, [r3, #8]
}
 800a91e:	bf00      	nop
 800a920:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a924:	46bd      	mov	sp, r7
 800a926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a92a:	bf00      	nop
 800a92c:	51eb851f 	.word	0x51eb851f

0800a930 <__errno>:
 800a930:	4b01      	ldr	r3, [pc, #4]	; (800a938 <__errno+0x8>)
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20000034 	.word	0x20000034

0800a93c <__libc_init_array>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4d0d      	ldr	r5, [pc, #52]	; (800a974 <__libc_init_array+0x38>)
 800a940:	4c0d      	ldr	r4, [pc, #52]	; (800a978 <__libc_init_array+0x3c>)
 800a942:	1b64      	subs	r4, r4, r5
 800a944:	10a4      	asrs	r4, r4, #2
 800a946:	2600      	movs	r6, #0
 800a948:	42a6      	cmp	r6, r4
 800a94a:	d109      	bne.n	800a960 <__libc_init_array+0x24>
 800a94c:	4d0b      	ldr	r5, [pc, #44]	; (800a97c <__libc_init_array+0x40>)
 800a94e:	4c0c      	ldr	r4, [pc, #48]	; (800a980 <__libc_init_array+0x44>)
 800a950:	f003 f9b2 	bl	800dcb8 <_init>
 800a954:	1b64      	subs	r4, r4, r5
 800a956:	10a4      	asrs	r4, r4, #2
 800a958:	2600      	movs	r6, #0
 800a95a:	42a6      	cmp	r6, r4
 800a95c:	d105      	bne.n	800a96a <__libc_init_array+0x2e>
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	f855 3b04 	ldr.w	r3, [r5], #4
 800a964:	4798      	blx	r3
 800a966:	3601      	adds	r6, #1
 800a968:	e7ee      	b.n	800a948 <__libc_init_array+0xc>
 800a96a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a96e:	4798      	blx	r3
 800a970:	3601      	adds	r6, #1
 800a972:	e7f2      	b.n	800a95a <__libc_init_array+0x1e>
 800a974:	0800df68 	.word	0x0800df68
 800a978:	0800df68 	.word	0x0800df68
 800a97c:	0800df68 	.word	0x0800df68
 800a980:	0800df6c 	.word	0x0800df6c

0800a984 <memset>:
 800a984:	4402      	add	r2, r0
 800a986:	4603      	mov	r3, r0
 800a988:	4293      	cmp	r3, r2
 800a98a:	d100      	bne.n	800a98e <memset+0xa>
 800a98c:	4770      	bx	lr
 800a98e:	f803 1b01 	strb.w	r1, [r3], #1
 800a992:	e7f9      	b.n	800a988 <memset+0x4>

0800a994 <siprintf>:
 800a994:	b40e      	push	{r1, r2, r3}
 800a996:	b500      	push	{lr}
 800a998:	b09c      	sub	sp, #112	; 0x70
 800a99a:	ab1d      	add	r3, sp, #116	; 0x74
 800a99c:	9002      	str	r0, [sp, #8]
 800a99e:	9006      	str	r0, [sp, #24]
 800a9a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9a4:	4809      	ldr	r0, [pc, #36]	; (800a9cc <siprintf+0x38>)
 800a9a6:	9107      	str	r1, [sp, #28]
 800a9a8:	9104      	str	r1, [sp, #16]
 800a9aa:	4909      	ldr	r1, [pc, #36]	; (800a9d0 <siprintf+0x3c>)
 800a9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b0:	9105      	str	r1, [sp, #20]
 800a9b2:	6800      	ldr	r0, [r0, #0]
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	a902      	add	r1, sp, #8
 800a9b8:	f000 f868 	bl	800aa8c <_svfiprintf_r>
 800a9bc:	9b02      	ldr	r3, [sp, #8]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	b01c      	add	sp, #112	; 0x70
 800a9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c8:	b003      	add	sp, #12
 800a9ca:	4770      	bx	lr
 800a9cc:	20000034 	.word	0x20000034
 800a9d0:	ffff0208 	.word	0xffff0208

0800a9d4 <__ssputs_r>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	688e      	ldr	r6, [r1, #8]
 800a9da:	429e      	cmp	r6, r3
 800a9dc:	4682      	mov	sl, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4690      	mov	r8, r2
 800a9e2:	461f      	mov	r7, r3
 800a9e4:	d838      	bhi.n	800aa58 <__ssputs_r+0x84>
 800a9e6:	898a      	ldrh	r2, [r1, #12]
 800a9e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9ec:	d032      	beq.n	800aa54 <__ssputs_r+0x80>
 800a9ee:	6825      	ldr	r5, [r4, #0]
 800a9f0:	6909      	ldr	r1, [r1, #16]
 800a9f2:	eba5 0901 	sub.w	r9, r5, r1
 800a9f6:	6965      	ldr	r5, [r4, #20]
 800a9f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa00:	3301      	adds	r3, #1
 800aa02:	444b      	add	r3, r9
 800aa04:	106d      	asrs	r5, r5, #1
 800aa06:	429d      	cmp	r5, r3
 800aa08:	bf38      	it	cc
 800aa0a:	461d      	movcc	r5, r3
 800aa0c:	0553      	lsls	r3, r2, #21
 800aa0e:	d531      	bpl.n	800aa74 <__ssputs_r+0xa0>
 800aa10:	4629      	mov	r1, r5
 800aa12:	f000 fb63 	bl	800b0dc <_malloc_r>
 800aa16:	4606      	mov	r6, r0
 800aa18:	b950      	cbnz	r0, 800aa30 <__ssputs_r+0x5c>
 800aa1a:	230c      	movs	r3, #12
 800aa1c:	f8ca 3000 	str.w	r3, [sl]
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa30:	6921      	ldr	r1, [r4, #16]
 800aa32:	464a      	mov	r2, r9
 800aa34:	f000 fabe 	bl	800afb4 <memcpy>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa42:	81a3      	strh	r3, [r4, #12]
 800aa44:	6126      	str	r6, [r4, #16]
 800aa46:	6165      	str	r5, [r4, #20]
 800aa48:	444e      	add	r6, r9
 800aa4a:	eba5 0509 	sub.w	r5, r5, r9
 800aa4e:	6026      	str	r6, [r4, #0]
 800aa50:	60a5      	str	r5, [r4, #8]
 800aa52:	463e      	mov	r6, r7
 800aa54:	42be      	cmp	r6, r7
 800aa56:	d900      	bls.n	800aa5a <__ssputs_r+0x86>
 800aa58:	463e      	mov	r6, r7
 800aa5a:	6820      	ldr	r0, [r4, #0]
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4641      	mov	r1, r8
 800aa60:	f000 fab6 	bl	800afd0 <memmove>
 800aa64:	68a3      	ldr	r3, [r4, #8]
 800aa66:	1b9b      	subs	r3, r3, r6
 800aa68:	60a3      	str	r3, [r4, #8]
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	4433      	add	r3, r6
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	2000      	movs	r0, #0
 800aa72:	e7db      	b.n	800aa2c <__ssputs_r+0x58>
 800aa74:	462a      	mov	r2, r5
 800aa76:	f000 fba5 	bl	800b1c4 <_realloc_r>
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1e1      	bne.n	800aa44 <__ssputs_r+0x70>
 800aa80:	6921      	ldr	r1, [r4, #16]
 800aa82:	4650      	mov	r0, sl
 800aa84:	f000 fabe 	bl	800b004 <_free_r>
 800aa88:	e7c7      	b.n	800aa1a <__ssputs_r+0x46>
	...

0800aa8c <_svfiprintf_r>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	4698      	mov	r8, r3
 800aa92:	898b      	ldrh	r3, [r1, #12]
 800aa94:	061b      	lsls	r3, r3, #24
 800aa96:	b09d      	sub	sp, #116	; 0x74
 800aa98:	4607      	mov	r7, r0
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	d50e      	bpl.n	800aabe <_svfiprintf_r+0x32>
 800aaa0:	690b      	ldr	r3, [r1, #16]
 800aaa2:	b963      	cbnz	r3, 800aabe <_svfiprintf_r+0x32>
 800aaa4:	2140      	movs	r1, #64	; 0x40
 800aaa6:	f000 fb19 	bl	800b0dc <_malloc_r>
 800aaaa:	6028      	str	r0, [r5, #0]
 800aaac:	6128      	str	r0, [r5, #16]
 800aaae:	b920      	cbnz	r0, 800aaba <_svfiprintf_r+0x2e>
 800aab0:	230c      	movs	r3, #12
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aab8:	e0d1      	b.n	800ac5e <_svfiprintf_r+0x1d2>
 800aaba:	2340      	movs	r3, #64	; 0x40
 800aabc:	616b      	str	r3, [r5, #20]
 800aabe:	2300      	movs	r3, #0
 800aac0:	9309      	str	r3, [sp, #36]	; 0x24
 800aac2:	2320      	movs	r3, #32
 800aac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aac8:	f8cd 800c 	str.w	r8, [sp, #12]
 800aacc:	2330      	movs	r3, #48	; 0x30
 800aace:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac78 <_svfiprintf_r+0x1ec>
 800aad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aad6:	f04f 0901 	mov.w	r9, #1
 800aada:	4623      	mov	r3, r4
 800aadc:	469a      	mov	sl, r3
 800aade:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae2:	b10a      	cbz	r2, 800aae8 <_svfiprintf_r+0x5c>
 800aae4:	2a25      	cmp	r2, #37	; 0x25
 800aae6:	d1f9      	bne.n	800aadc <_svfiprintf_r+0x50>
 800aae8:	ebba 0b04 	subs.w	fp, sl, r4
 800aaec:	d00b      	beq.n	800ab06 <_svfiprintf_r+0x7a>
 800aaee:	465b      	mov	r3, fp
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f7ff ff6d 	bl	800a9d4 <__ssputs_r>
 800aafa:	3001      	adds	r0, #1
 800aafc:	f000 80aa 	beq.w	800ac54 <_svfiprintf_r+0x1c8>
 800ab00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab02:	445a      	add	r2, fp
 800ab04:	9209      	str	r2, [sp, #36]	; 0x24
 800ab06:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 80a2 	beq.w	800ac54 <_svfiprintf_r+0x1c8>
 800ab10:	2300      	movs	r3, #0
 800ab12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab1a:	f10a 0a01 	add.w	sl, sl, #1
 800ab1e:	9304      	str	r3, [sp, #16]
 800ab20:	9307      	str	r3, [sp, #28]
 800ab22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab26:	931a      	str	r3, [sp, #104]	; 0x68
 800ab28:	4654      	mov	r4, sl
 800ab2a:	2205      	movs	r2, #5
 800ab2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab30:	4851      	ldr	r0, [pc, #324]	; (800ac78 <_svfiprintf_r+0x1ec>)
 800ab32:	f7f5 fb55 	bl	80001e0 <memchr>
 800ab36:	9a04      	ldr	r2, [sp, #16]
 800ab38:	b9d8      	cbnz	r0, 800ab72 <_svfiprintf_r+0xe6>
 800ab3a:	06d0      	lsls	r0, r2, #27
 800ab3c:	bf44      	itt	mi
 800ab3e:	2320      	movmi	r3, #32
 800ab40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab44:	0711      	lsls	r1, r2, #28
 800ab46:	bf44      	itt	mi
 800ab48:	232b      	movmi	r3, #43	; 0x2b
 800ab4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab52:	2b2a      	cmp	r3, #42	; 0x2a
 800ab54:	d015      	beq.n	800ab82 <_svfiprintf_r+0xf6>
 800ab56:	9a07      	ldr	r2, [sp, #28]
 800ab58:	4654      	mov	r4, sl
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	f04f 0c0a 	mov.w	ip, #10
 800ab60:	4621      	mov	r1, r4
 800ab62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab66:	3b30      	subs	r3, #48	; 0x30
 800ab68:	2b09      	cmp	r3, #9
 800ab6a:	d94e      	bls.n	800ac0a <_svfiprintf_r+0x17e>
 800ab6c:	b1b0      	cbz	r0, 800ab9c <_svfiprintf_r+0x110>
 800ab6e:	9207      	str	r2, [sp, #28]
 800ab70:	e014      	b.n	800ab9c <_svfiprintf_r+0x110>
 800ab72:	eba0 0308 	sub.w	r3, r0, r8
 800ab76:	fa09 f303 	lsl.w	r3, r9, r3
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	46a2      	mov	sl, r4
 800ab80:	e7d2      	b.n	800ab28 <_svfiprintf_r+0x9c>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	1d19      	adds	r1, r3, #4
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	9103      	str	r1, [sp, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bfbb      	ittet	lt
 800ab8e:	425b      	neglt	r3, r3
 800ab90:	f042 0202 	orrlt.w	r2, r2, #2
 800ab94:	9307      	strge	r3, [sp, #28]
 800ab96:	9307      	strlt	r3, [sp, #28]
 800ab98:	bfb8      	it	lt
 800ab9a:	9204      	strlt	r2, [sp, #16]
 800ab9c:	7823      	ldrb	r3, [r4, #0]
 800ab9e:	2b2e      	cmp	r3, #46	; 0x2e
 800aba0:	d10c      	bne.n	800abbc <_svfiprintf_r+0x130>
 800aba2:	7863      	ldrb	r3, [r4, #1]
 800aba4:	2b2a      	cmp	r3, #42	; 0x2a
 800aba6:	d135      	bne.n	800ac14 <_svfiprintf_r+0x188>
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	9203      	str	r2, [sp, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	bfb8      	it	lt
 800abb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abb8:	3402      	adds	r4, #2
 800abba:	9305      	str	r3, [sp, #20]
 800abbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac88 <_svfiprintf_r+0x1fc>
 800abc0:	7821      	ldrb	r1, [r4, #0]
 800abc2:	2203      	movs	r2, #3
 800abc4:	4650      	mov	r0, sl
 800abc6:	f7f5 fb0b 	bl	80001e0 <memchr>
 800abca:	b140      	cbz	r0, 800abde <_svfiprintf_r+0x152>
 800abcc:	2340      	movs	r3, #64	; 0x40
 800abce:	eba0 000a 	sub.w	r0, r0, sl
 800abd2:	fa03 f000 	lsl.w	r0, r3, r0
 800abd6:	9b04      	ldr	r3, [sp, #16]
 800abd8:	4303      	orrs	r3, r0
 800abda:	3401      	adds	r4, #1
 800abdc:	9304      	str	r3, [sp, #16]
 800abde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe2:	4826      	ldr	r0, [pc, #152]	; (800ac7c <_svfiprintf_r+0x1f0>)
 800abe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abe8:	2206      	movs	r2, #6
 800abea:	f7f5 faf9 	bl	80001e0 <memchr>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d038      	beq.n	800ac64 <_svfiprintf_r+0x1d8>
 800abf2:	4b23      	ldr	r3, [pc, #140]	; (800ac80 <_svfiprintf_r+0x1f4>)
 800abf4:	bb1b      	cbnz	r3, 800ac3e <_svfiprintf_r+0x1b2>
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	3307      	adds	r3, #7
 800abfa:	f023 0307 	bic.w	r3, r3, #7
 800abfe:	3308      	adds	r3, #8
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac04:	4433      	add	r3, r6
 800ac06:	9309      	str	r3, [sp, #36]	; 0x24
 800ac08:	e767      	b.n	800aada <_svfiprintf_r+0x4e>
 800ac0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac0e:	460c      	mov	r4, r1
 800ac10:	2001      	movs	r0, #1
 800ac12:	e7a5      	b.n	800ab60 <_svfiprintf_r+0xd4>
 800ac14:	2300      	movs	r3, #0
 800ac16:	3401      	adds	r4, #1
 800ac18:	9305      	str	r3, [sp, #20]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f04f 0c0a 	mov.w	ip, #10
 800ac20:	4620      	mov	r0, r4
 800ac22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac26:	3a30      	subs	r2, #48	; 0x30
 800ac28:	2a09      	cmp	r2, #9
 800ac2a:	d903      	bls.n	800ac34 <_svfiprintf_r+0x1a8>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0c5      	beq.n	800abbc <_svfiprintf_r+0x130>
 800ac30:	9105      	str	r1, [sp, #20]
 800ac32:	e7c3      	b.n	800abbc <_svfiprintf_r+0x130>
 800ac34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac38:	4604      	mov	r4, r0
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e7f0      	b.n	800ac20 <_svfiprintf_r+0x194>
 800ac3e:	ab03      	add	r3, sp, #12
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	462a      	mov	r2, r5
 800ac44:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <_svfiprintf_r+0x1f8>)
 800ac46:	a904      	add	r1, sp, #16
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f3af 8000 	nop.w
 800ac4e:	1c42      	adds	r2, r0, #1
 800ac50:	4606      	mov	r6, r0
 800ac52:	d1d6      	bne.n	800ac02 <_svfiprintf_r+0x176>
 800ac54:	89ab      	ldrh	r3, [r5, #12]
 800ac56:	065b      	lsls	r3, r3, #25
 800ac58:	f53f af2c 	bmi.w	800aab4 <_svfiprintf_r+0x28>
 800ac5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac5e:	b01d      	add	sp, #116	; 0x74
 800ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac64:	ab03      	add	r3, sp, #12
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	462a      	mov	r2, r5
 800ac6a:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <_svfiprintf_r+0x1f8>)
 800ac6c:	a904      	add	r1, sp, #16
 800ac6e:	4638      	mov	r0, r7
 800ac70:	f000 f87a 	bl	800ad68 <_printf_i>
 800ac74:	e7eb      	b.n	800ac4e <_svfiprintf_r+0x1c2>
 800ac76:	bf00      	nop
 800ac78:	0800dd08 	.word	0x0800dd08
 800ac7c:	0800dd12 	.word	0x0800dd12
 800ac80:	00000000 	.word	0x00000000
 800ac84:	0800a9d5 	.word	0x0800a9d5
 800ac88:	0800dd0e 	.word	0x0800dd0e

0800ac8c <_printf_common>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	4616      	mov	r6, r2
 800ac92:	4699      	mov	r9, r3
 800ac94:	688a      	ldr	r2, [r1, #8]
 800ac96:	690b      	ldr	r3, [r1, #16]
 800ac98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	bfb8      	it	lt
 800aca0:	4613      	movlt	r3, r2
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aca8:	4607      	mov	r7, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	b10a      	cbz	r2, 800acb2 <_printf_common+0x26>
 800acae:	3301      	adds	r3, #1
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	0699      	lsls	r1, r3, #26
 800acb6:	bf42      	ittt	mi
 800acb8:	6833      	ldrmi	r3, [r6, #0]
 800acba:	3302      	addmi	r3, #2
 800acbc:	6033      	strmi	r3, [r6, #0]
 800acbe:	6825      	ldr	r5, [r4, #0]
 800acc0:	f015 0506 	ands.w	r5, r5, #6
 800acc4:	d106      	bne.n	800acd4 <_printf_common+0x48>
 800acc6:	f104 0a19 	add.w	sl, r4, #25
 800acca:	68e3      	ldr	r3, [r4, #12]
 800accc:	6832      	ldr	r2, [r6, #0]
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	42ab      	cmp	r3, r5
 800acd2:	dc26      	bgt.n	800ad22 <_printf_common+0x96>
 800acd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acd8:	1e13      	subs	r3, r2, #0
 800acda:	6822      	ldr	r2, [r4, #0]
 800acdc:	bf18      	it	ne
 800acde:	2301      	movne	r3, #1
 800ace0:	0692      	lsls	r2, r2, #26
 800ace2:	d42b      	bmi.n	800ad3c <_printf_common+0xb0>
 800ace4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ace8:	4649      	mov	r1, r9
 800acea:	4638      	mov	r0, r7
 800acec:	47c0      	blx	r8
 800acee:	3001      	adds	r0, #1
 800acf0:	d01e      	beq.n	800ad30 <_printf_common+0xa4>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	68e5      	ldr	r5, [r4, #12]
 800acf6:	6832      	ldr	r2, [r6, #0]
 800acf8:	f003 0306 	and.w	r3, r3, #6
 800acfc:	2b04      	cmp	r3, #4
 800acfe:	bf08      	it	eq
 800ad00:	1aad      	subeq	r5, r5, r2
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	6922      	ldr	r2, [r4, #16]
 800ad06:	bf0c      	ite	eq
 800ad08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad0c:	2500      	movne	r5, #0
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	bfc4      	itt	gt
 800ad12:	1a9b      	subgt	r3, r3, r2
 800ad14:	18ed      	addgt	r5, r5, r3
 800ad16:	2600      	movs	r6, #0
 800ad18:	341a      	adds	r4, #26
 800ad1a:	42b5      	cmp	r5, r6
 800ad1c:	d11a      	bne.n	800ad54 <_printf_common+0xc8>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	e008      	b.n	800ad34 <_printf_common+0xa8>
 800ad22:	2301      	movs	r3, #1
 800ad24:	4652      	mov	r2, sl
 800ad26:	4649      	mov	r1, r9
 800ad28:	4638      	mov	r0, r7
 800ad2a:	47c0      	blx	r8
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d103      	bne.n	800ad38 <_printf_common+0xac>
 800ad30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad38:	3501      	adds	r5, #1
 800ad3a:	e7c6      	b.n	800acca <_printf_common+0x3e>
 800ad3c:	18e1      	adds	r1, r4, r3
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	2030      	movs	r0, #48	; 0x30
 800ad42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad46:	4422      	add	r2, r4
 800ad48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad50:	3302      	adds	r3, #2
 800ad52:	e7c7      	b.n	800ace4 <_printf_common+0x58>
 800ad54:	2301      	movs	r3, #1
 800ad56:	4622      	mov	r2, r4
 800ad58:	4649      	mov	r1, r9
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	47c0      	blx	r8
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d0e6      	beq.n	800ad30 <_printf_common+0xa4>
 800ad62:	3601      	adds	r6, #1
 800ad64:	e7d9      	b.n	800ad1a <_printf_common+0x8e>
	...

0800ad68 <_printf_i>:
 800ad68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6c:	7e0f      	ldrb	r7, [r1, #24]
 800ad6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad70:	2f78      	cmp	r7, #120	; 0x78
 800ad72:	4691      	mov	r9, r2
 800ad74:	4680      	mov	r8, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	469a      	mov	sl, r3
 800ad7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad7e:	d807      	bhi.n	800ad90 <_printf_i+0x28>
 800ad80:	2f62      	cmp	r7, #98	; 0x62
 800ad82:	d80a      	bhi.n	800ad9a <_printf_i+0x32>
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	f000 80d8 	beq.w	800af3a <_printf_i+0x1d2>
 800ad8a:	2f58      	cmp	r7, #88	; 0x58
 800ad8c:	f000 80a3 	beq.w	800aed6 <_printf_i+0x16e>
 800ad90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad98:	e03a      	b.n	800ae10 <_printf_i+0xa8>
 800ad9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad9e:	2b15      	cmp	r3, #21
 800ada0:	d8f6      	bhi.n	800ad90 <_printf_i+0x28>
 800ada2:	a101      	add	r1, pc, #4	; (adr r1, 800ada8 <_printf_i+0x40>)
 800ada4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ada8:	0800ae01 	.word	0x0800ae01
 800adac:	0800ae15 	.word	0x0800ae15
 800adb0:	0800ad91 	.word	0x0800ad91
 800adb4:	0800ad91 	.word	0x0800ad91
 800adb8:	0800ad91 	.word	0x0800ad91
 800adbc:	0800ad91 	.word	0x0800ad91
 800adc0:	0800ae15 	.word	0x0800ae15
 800adc4:	0800ad91 	.word	0x0800ad91
 800adc8:	0800ad91 	.word	0x0800ad91
 800adcc:	0800ad91 	.word	0x0800ad91
 800add0:	0800ad91 	.word	0x0800ad91
 800add4:	0800af21 	.word	0x0800af21
 800add8:	0800ae45 	.word	0x0800ae45
 800addc:	0800af03 	.word	0x0800af03
 800ade0:	0800ad91 	.word	0x0800ad91
 800ade4:	0800ad91 	.word	0x0800ad91
 800ade8:	0800af43 	.word	0x0800af43
 800adec:	0800ad91 	.word	0x0800ad91
 800adf0:	0800ae45 	.word	0x0800ae45
 800adf4:	0800ad91 	.word	0x0800ad91
 800adf8:	0800ad91 	.word	0x0800ad91
 800adfc:	0800af0b 	.word	0x0800af0b
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	602a      	str	r2, [r5, #0]
 800ae08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae10:	2301      	movs	r3, #1
 800ae12:	e0a3      	b.n	800af5c <_printf_i+0x1f4>
 800ae14:	6820      	ldr	r0, [r4, #0]
 800ae16:	6829      	ldr	r1, [r5, #0]
 800ae18:	0606      	lsls	r6, r0, #24
 800ae1a:	f101 0304 	add.w	r3, r1, #4
 800ae1e:	d50a      	bpl.n	800ae36 <_printf_i+0xce>
 800ae20:	680e      	ldr	r6, [r1, #0]
 800ae22:	602b      	str	r3, [r5, #0]
 800ae24:	2e00      	cmp	r6, #0
 800ae26:	da03      	bge.n	800ae30 <_printf_i+0xc8>
 800ae28:	232d      	movs	r3, #45	; 0x2d
 800ae2a:	4276      	negs	r6, r6
 800ae2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae30:	485e      	ldr	r0, [pc, #376]	; (800afac <_printf_i+0x244>)
 800ae32:	230a      	movs	r3, #10
 800ae34:	e019      	b.n	800ae6a <_printf_i+0x102>
 800ae36:	680e      	ldr	r6, [r1, #0]
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae3e:	bf18      	it	ne
 800ae40:	b236      	sxthne	r6, r6
 800ae42:	e7ef      	b.n	800ae24 <_printf_i+0xbc>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	6820      	ldr	r0, [r4, #0]
 800ae48:	1d19      	adds	r1, r3, #4
 800ae4a:	6029      	str	r1, [r5, #0]
 800ae4c:	0601      	lsls	r1, r0, #24
 800ae4e:	d501      	bpl.n	800ae54 <_printf_i+0xec>
 800ae50:	681e      	ldr	r6, [r3, #0]
 800ae52:	e002      	b.n	800ae5a <_printf_i+0xf2>
 800ae54:	0646      	lsls	r6, r0, #25
 800ae56:	d5fb      	bpl.n	800ae50 <_printf_i+0xe8>
 800ae58:	881e      	ldrh	r6, [r3, #0]
 800ae5a:	4854      	ldr	r0, [pc, #336]	; (800afac <_printf_i+0x244>)
 800ae5c:	2f6f      	cmp	r7, #111	; 0x6f
 800ae5e:	bf0c      	ite	eq
 800ae60:	2308      	moveq	r3, #8
 800ae62:	230a      	movne	r3, #10
 800ae64:	2100      	movs	r1, #0
 800ae66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae6a:	6865      	ldr	r5, [r4, #4]
 800ae6c:	60a5      	str	r5, [r4, #8]
 800ae6e:	2d00      	cmp	r5, #0
 800ae70:	bfa2      	ittt	ge
 800ae72:	6821      	ldrge	r1, [r4, #0]
 800ae74:	f021 0104 	bicge.w	r1, r1, #4
 800ae78:	6021      	strge	r1, [r4, #0]
 800ae7a:	b90e      	cbnz	r6, 800ae80 <_printf_i+0x118>
 800ae7c:	2d00      	cmp	r5, #0
 800ae7e:	d04d      	beq.n	800af1c <_printf_i+0x1b4>
 800ae80:	4615      	mov	r5, r2
 800ae82:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae86:	fb03 6711 	mls	r7, r3, r1, r6
 800ae8a:	5dc7      	ldrb	r7, [r0, r7]
 800ae8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae90:	4637      	mov	r7, r6
 800ae92:	42bb      	cmp	r3, r7
 800ae94:	460e      	mov	r6, r1
 800ae96:	d9f4      	bls.n	800ae82 <_printf_i+0x11a>
 800ae98:	2b08      	cmp	r3, #8
 800ae9a:	d10b      	bne.n	800aeb4 <_printf_i+0x14c>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	07de      	lsls	r6, r3, #31
 800aea0:	d508      	bpl.n	800aeb4 <_printf_i+0x14c>
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	6861      	ldr	r1, [r4, #4]
 800aea6:	4299      	cmp	r1, r3
 800aea8:	bfde      	ittt	le
 800aeaa:	2330      	movle	r3, #48	; 0x30
 800aeac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aeb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aeb4:	1b52      	subs	r2, r2, r5
 800aeb6:	6122      	str	r2, [r4, #16]
 800aeb8:	f8cd a000 	str.w	sl, [sp]
 800aebc:	464b      	mov	r3, r9
 800aebe:	aa03      	add	r2, sp, #12
 800aec0:	4621      	mov	r1, r4
 800aec2:	4640      	mov	r0, r8
 800aec4:	f7ff fee2 	bl	800ac8c <_printf_common>
 800aec8:	3001      	adds	r0, #1
 800aeca:	d14c      	bne.n	800af66 <_printf_i+0x1fe>
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aed0:	b004      	add	sp, #16
 800aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed6:	4835      	ldr	r0, [pc, #212]	; (800afac <_printf_i+0x244>)
 800aed8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aedc:	6829      	ldr	r1, [r5, #0]
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	f851 6b04 	ldr.w	r6, [r1], #4
 800aee4:	6029      	str	r1, [r5, #0]
 800aee6:	061d      	lsls	r5, r3, #24
 800aee8:	d514      	bpl.n	800af14 <_printf_i+0x1ac>
 800aeea:	07df      	lsls	r7, r3, #31
 800aeec:	bf44      	itt	mi
 800aeee:	f043 0320 	orrmi.w	r3, r3, #32
 800aef2:	6023      	strmi	r3, [r4, #0]
 800aef4:	b91e      	cbnz	r6, 800aefe <_printf_i+0x196>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	f023 0320 	bic.w	r3, r3, #32
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	2310      	movs	r3, #16
 800af00:	e7b0      	b.n	800ae64 <_printf_i+0xfc>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	f043 0320 	orr.w	r3, r3, #32
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	2378      	movs	r3, #120	; 0x78
 800af0c:	4828      	ldr	r0, [pc, #160]	; (800afb0 <_printf_i+0x248>)
 800af0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af12:	e7e3      	b.n	800aedc <_printf_i+0x174>
 800af14:	0659      	lsls	r1, r3, #25
 800af16:	bf48      	it	mi
 800af18:	b2b6      	uxthmi	r6, r6
 800af1a:	e7e6      	b.n	800aeea <_printf_i+0x182>
 800af1c:	4615      	mov	r5, r2
 800af1e:	e7bb      	b.n	800ae98 <_printf_i+0x130>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	6826      	ldr	r6, [r4, #0]
 800af24:	6961      	ldr	r1, [r4, #20]
 800af26:	1d18      	adds	r0, r3, #4
 800af28:	6028      	str	r0, [r5, #0]
 800af2a:	0635      	lsls	r5, r6, #24
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	d501      	bpl.n	800af34 <_printf_i+0x1cc>
 800af30:	6019      	str	r1, [r3, #0]
 800af32:	e002      	b.n	800af3a <_printf_i+0x1d2>
 800af34:	0670      	lsls	r0, r6, #25
 800af36:	d5fb      	bpl.n	800af30 <_printf_i+0x1c8>
 800af38:	8019      	strh	r1, [r3, #0]
 800af3a:	2300      	movs	r3, #0
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	4615      	mov	r5, r2
 800af40:	e7ba      	b.n	800aeb8 <_printf_i+0x150>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	1d1a      	adds	r2, r3, #4
 800af46:	602a      	str	r2, [r5, #0]
 800af48:	681d      	ldr	r5, [r3, #0]
 800af4a:	6862      	ldr	r2, [r4, #4]
 800af4c:	2100      	movs	r1, #0
 800af4e:	4628      	mov	r0, r5
 800af50:	f7f5 f946 	bl	80001e0 <memchr>
 800af54:	b108      	cbz	r0, 800af5a <_printf_i+0x1f2>
 800af56:	1b40      	subs	r0, r0, r5
 800af58:	6060      	str	r0, [r4, #4]
 800af5a:	6863      	ldr	r3, [r4, #4]
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	2300      	movs	r3, #0
 800af60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af64:	e7a8      	b.n	800aeb8 <_printf_i+0x150>
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	462a      	mov	r2, r5
 800af6a:	4649      	mov	r1, r9
 800af6c:	4640      	mov	r0, r8
 800af6e:	47d0      	blx	sl
 800af70:	3001      	adds	r0, #1
 800af72:	d0ab      	beq.n	800aecc <_printf_i+0x164>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	079b      	lsls	r3, r3, #30
 800af78:	d413      	bmi.n	800afa2 <_printf_i+0x23a>
 800af7a:	68e0      	ldr	r0, [r4, #12]
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	4298      	cmp	r0, r3
 800af80:	bfb8      	it	lt
 800af82:	4618      	movlt	r0, r3
 800af84:	e7a4      	b.n	800aed0 <_printf_i+0x168>
 800af86:	2301      	movs	r3, #1
 800af88:	4632      	mov	r2, r6
 800af8a:	4649      	mov	r1, r9
 800af8c:	4640      	mov	r0, r8
 800af8e:	47d0      	blx	sl
 800af90:	3001      	adds	r0, #1
 800af92:	d09b      	beq.n	800aecc <_printf_i+0x164>
 800af94:	3501      	adds	r5, #1
 800af96:	68e3      	ldr	r3, [r4, #12]
 800af98:	9903      	ldr	r1, [sp, #12]
 800af9a:	1a5b      	subs	r3, r3, r1
 800af9c:	42ab      	cmp	r3, r5
 800af9e:	dcf2      	bgt.n	800af86 <_printf_i+0x21e>
 800afa0:	e7eb      	b.n	800af7a <_printf_i+0x212>
 800afa2:	2500      	movs	r5, #0
 800afa4:	f104 0619 	add.w	r6, r4, #25
 800afa8:	e7f5      	b.n	800af96 <_printf_i+0x22e>
 800afaa:	bf00      	nop
 800afac:	0800dd19 	.word	0x0800dd19
 800afb0:	0800dd2a 	.word	0x0800dd2a

0800afb4 <memcpy>:
 800afb4:	440a      	add	r2, r1
 800afb6:	4291      	cmp	r1, r2
 800afb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800afbc:	d100      	bne.n	800afc0 <memcpy+0xc>
 800afbe:	4770      	bx	lr
 800afc0:	b510      	push	{r4, lr}
 800afc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afca:	4291      	cmp	r1, r2
 800afcc:	d1f9      	bne.n	800afc2 <memcpy+0xe>
 800afce:	bd10      	pop	{r4, pc}

0800afd0 <memmove>:
 800afd0:	4288      	cmp	r0, r1
 800afd2:	b510      	push	{r4, lr}
 800afd4:	eb01 0402 	add.w	r4, r1, r2
 800afd8:	d902      	bls.n	800afe0 <memmove+0x10>
 800afda:	4284      	cmp	r4, r0
 800afdc:	4623      	mov	r3, r4
 800afde:	d807      	bhi.n	800aff0 <memmove+0x20>
 800afe0:	1e43      	subs	r3, r0, #1
 800afe2:	42a1      	cmp	r1, r4
 800afe4:	d008      	beq.n	800aff8 <memmove+0x28>
 800afe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afee:	e7f8      	b.n	800afe2 <memmove+0x12>
 800aff0:	4402      	add	r2, r0
 800aff2:	4601      	mov	r1, r0
 800aff4:	428a      	cmp	r2, r1
 800aff6:	d100      	bne.n	800affa <memmove+0x2a>
 800aff8:	bd10      	pop	{r4, pc}
 800affa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800affe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b002:	e7f7      	b.n	800aff4 <memmove+0x24>

0800b004 <_free_r>:
 800b004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b006:	2900      	cmp	r1, #0
 800b008:	d044      	beq.n	800b094 <_free_r+0x90>
 800b00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00e:	9001      	str	r0, [sp, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f1a1 0404 	sub.w	r4, r1, #4
 800b016:	bfb8      	it	lt
 800b018:	18e4      	addlt	r4, r4, r3
 800b01a:	f000 f913 	bl	800b244 <__malloc_lock>
 800b01e:	4a1e      	ldr	r2, [pc, #120]	; (800b098 <_free_r+0x94>)
 800b020:	9801      	ldr	r0, [sp, #4]
 800b022:	6813      	ldr	r3, [r2, #0]
 800b024:	b933      	cbnz	r3, 800b034 <_free_r+0x30>
 800b026:	6063      	str	r3, [r4, #4]
 800b028:	6014      	str	r4, [r2, #0]
 800b02a:	b003      	add	sp, #12
 800b02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b030:	f000 b90e 	b.w	800b250 <__malloc_unlock>
 800b034:	42a3      	cmp	r3, r4
 800b036:	d908      	bls.n	800b04a <_free_r+0x46>
 800b038:	6825      	ldr	r5, [r4, #0]
 800b03a:	1961      	adds	r1, r4, r5
 800b03c:	428b      	cmp	r3, r1
 800b03e:	bf01      	itttt	eq
 800b040:	6819      	ldreq	r1, [r3, #0]
 800b042:	685b      	ldreq	r3, [r3, #4]
 800b044:	1949      	addeq	r1, r1, r5
 800b046:	6021      	streq	r1, [r4, #0]
 800b048:	e7ed      	b.n	800b026 <_free_r+0x22>
 800b04a:	461a      	mov	r2, r3
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	b10b      	cbz	r3, 800b054 <_free_r+0x50>
 800b050:	42a3      	cmp	r3, r4
 800b052:	d9fa      	bls.n	800b04a <_free_r+0x46>
 800b054:	6811      	ldr	r1, [r2, #0]
 800b056:	1855      	adds	r5, r2, r1
 800b058:	42a5      	cmp	r5, r4
 800b05a:	d10b      	bne.n	800b074 <_free_r+0x70>
 800b05c:	6824      	ldr	r4, [r4, #0]
 800b05e:	4421      	add	r1, r4
 800b060:	1854      	adds	r4, r2, r1
 800b062:	42a3      	cmp	r3, r4
 800b064:	6011      	str	r1, [r2, #0]
 800b066:	d1e0      	bne.n	800b02a <_free_r+0x26>
 800b068:	681c      	ldr	r4, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	6053      	str	r3, [r2, #4]
 800b06e:	4421      	add	r1, r4
 800b070:	6011      	str	r1, [r2, #0]
 800b072:	e7da      	b.n	800b02a <_free_r+0x26>
 800b074:	d902      	bls.n	800b07c <_free_r+0x78>
 800b076:	230c      	movs	r3, #12
 800b078:	6003      	str	r3, [r0, #0]
 800b07a:	e7d6      	b.n	800b02a <_free_r+0x26>
 800b07c:	6825      	ldr	r5, [r4, #0]
 800b07e:	1961      	adds	r1, r4, r5
 800b080:	428b      	cmp	r3, r1
 800b082:	bf04      	itt	eq
 800b084:	6819      	ldreq	r1, [r3, #0]
 800b086:	685b      	ldreq	r3, [r3, #4]
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	bf04      	itt	eq
 800b08c:	1949      	addeq	r1, r1, r5
 800b08e:	6021      	streq	r1, [r4, #0]
 800b090:	6054      	str	r4, [r2, #4]
 800b092:	e7ca      	b.n	800b02a <_free_r+0x26>
 800b094:	b003      	add	sp, #12
 800b096:	bd30      	pop	{r4, r5, pc}
 800b098:	2000071c 	.word	0x2000071c

0800b09c <sbrk_aligned>:
 800b09c:	b570      	push	{r4, r5, r6, lr}
 800b09e:	4e0e      	ldr	r6, [pc, #56]	; (800b0d8 <sbrk_aligned+0x3c>)
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	6831      	ldr	r1, [r6, #0]
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	b911      	cbnz	r1, 800b0ae <sbrk_aligned+0x12>
 800b0a8:	f000 f8bc 	bl	800b224 <_sbrk_r>
 800b0ac:	6030      	str	r0, [r6, #0]
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f000 f8b7 	bl	800b224 <_sbrk_r>
 800b0b6:	1c43      	adds	r3, r0, #1
 800b0b8:	d00a      	beq.n	800b0d0 <sbrk_aligned+0x34>
 800b0ba:	1cc4      	adds	r4, r0, #3
 800b0bc:	f024 0403 	bic.w	r4, r4, #3
 800b0c0:	42a0      	cmp	r0, r4
 800b0c2:	d007      	beq.n	800b0d4 <sbrk_aligned+0x38>
 800b0c4:	1a21      	subs	r1, r4, r0
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 f8ac 	bl	800b224 <_sbrk_r>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d101      	bne.n	800b0d4 <sbrk_aligned+0x38>
 800b0d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	20000720 	.word	0x20000720

0800b0dc <_malloc_r>:
 800b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e0:	1ccd      	adds	r5, r1, #3
 800b0e2:	f025 0503 	bic.w	r5, r5, #3
 800b0e6:	3508      	adds	r5, #8
 800b0e8:	2d0c      	cmp	r5, #12
 800b0ea:	bf38      	it	cc
 800b0ec:	250c      	movcc	r5, #12
 800b0ee:	2d00      	cmp	r5, #0
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	db01      	blt.n	800b0f8 <_malloc_r+0x1c>
 800b0f4:	42a9      	cmp	r1, r5
 800b0f6:	d905      	bls.n	800b104 <_malloc_r+0x28>
 800b0f8:	230c      	movs	r3, #12
 800b0fa:	603b      	str	r3, [r7, #0]
 800b0fc:	2600      	movs	r6, #0
 800b0fe:	4630      	mov	r0, r6
 800b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b104:	4e2e      	ldr	r6, [pc, #184]	; (800b1c0 <_malloc_r+0xe4>)
 800b106:	f000 f89d 	bl	800b244 <__malloc_lock>
 800b10a:	6833      	ldr	r3, [r6, #0]
 800b10c:	461c      	mov	r4, r3
 800b10e:	bb34      	cbnz	r4, 800b15e <_malloc_r+0x82>
 800b110:	4629      	mov	r1, r5
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff ffc2 	bl	800b09c <sbrk_aligned>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	4604      	mov	r4, r0
 800b11c:	d14d      	bne.n	800b1ba <_malloc_r+0xde>
 800b11e:	6834      	ldr	r4, [r6, #0]
 800b120:	4626      	mov	r6, r4
 800b122:	2e00      	cmp	r6, #0
 800b124:	d140      	bne.n	800b1a8 <_malloc_r+0xcc>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	4631      	mov	r1, r6
 800b12a:	4638      	mov	r0, r7
 800b12c:	eb04 0803 	add.w	r8, r4, r3
 800b130:	f000 f878 	bl	800b224 <_sbrk_r>
 800b134:	4580      	cmp	r8, r0
 800b136:	d13a      	bne.n	800b1ae <_malloc_r+0xd2>
 800b138:	6821      	ldr	r1, [r4, #0]
 800b13a:	3503      	adds	r5, #3
 800b13c:	1a6d      	subs	r5, r5, r1
 800b13e:	f025 0503 	bic.w	r5, r5, #3
 800b142:	3508      	adds	r5, #8
 800b144:	2d0c      	cmp	r5, #12
 800b146:	bf38      	it	cc
 800b148:	250c      	movcc	r5, #12
 800b14a:	4629      	mov	r1, r5
 800b14c:	4638      	mov	r0, r7
 800b14e:	f7ff ffa5 	bl	800b09c <sbrk_aligned>
 800b152:	3001      	adds	r0, #1
 800b154:	d02b      	beq.n	800b1ae <_malloc_r+0xd2>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	442b      	add	r3, r5
 800b15a:	6023      	str	r3, [r4, #0]
 800b15c:	e00e      	b.n	800b17c <_malloc_r+0xa0>
 800b15e:	6822      	ldr	r2, [r4, #0]
 800b160:	1b52      	subs	r2, r2, r5
 800b162:	d41e      	bmi.n	800b1a2 <_malloc_r+0xc6>
 800b164:	2a0b      	cmp	r2, #11
 800b166:	d916      	bls.n	800b196 <_malloc_r+0xba>
 800b168:	1961      	adds	r1, r4, r5
 800b16a:	42a3      	cmp	r3, r4
 800b16c:	6025      	str	r5, [r4, #0]
 800b16e:	bf18      	it	ne
 800b170:	6059      	strne	r1, [r3, #4]
 800b172:	6863      	ldr	r3, [r4, #4]
 800b174:	bf08      	it	eq
 800b176:	6031      	streq	r1, [r6, #0]
 800b178:	5162      	str	r2, [r4, r5]
 800b17a:	604b      	str	r3, [r1, #4]
 800b17c:	4638      	mov	r0, r7
 800b17e:	f104 060b 	add.w	r6, r4, #11
 800b182:	f000 f865 	bl	800b250 <__malloc_unlock>
 800b186:	f026 0607 	bic.w	r6, r6, #7
 800b18a:	1d23      	adds	r3, r4, #4
 800b18c:	1af2      	subs	r2, r6, r3
 800b18e:	d0b6      	beq.n	800b0fe <_malloc_r+0x22>
 800b190:	1b9b      	subs	r3, r3, r6
 800b192:	50a3      	str	r3, [r4, r2]
 800b194:	e7b3      	b.n	800b0fe <_malloc_r+0x22>
 800b196:	6862      	ldr	r2, [r4, #4]
 800b198:	42a3      	cmp	r3, r4
 800b19a:	bf0c      	ite	eq
 800b19c:	6032      	streq	r2, [r6, #0]
 800b19e:	605a      	strne	r2, [r3, #4]
 800b1a0:	e7ec      	b.n	800b17c <_malloc_r+0xa0>
 800b1a2:	4623      	mov	r3, r4
 800b1a4:	6864      	ldr	r4, [r4, #4]
 800b1a6:	e7b2      	b.n	800b10e <_malloc_r+0x32>
 800b1a8:	4634      	mov	r4, r6
 800b1aa:	6876      	ldr	r6, [r6, #4]
 800b1ac:	e7b9      	b.n	800b122 <_malloc_r+0x46>
 800b1ae:	230c      	movs	r3, #12
 800b1b0:	603b      	str	r3, [r7, #0]
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	f000 f84c 	bl	800b250 <__malloc_unlock>
 800b1b8:	e7a1      	b.n	800b0fe <_malloc_r+0x22>
 800b1ba:	6025      	str	r5, [r4, #0]
 800b1bc:	e7de      	b.n	800b17c <_malloc_r+0xa0>
 800b1be:	bf00      	nop
 800b1c0:	2000071c 	.word	0x2000071c

0800b1c4 <_realloc_r>:
 800b1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c8:	4680      	mov	r8, r0
 800b1ca:	4614      	mov	r4, r2
 800b1cc:	460e      	mov	r6, r1
 800b1ce:	b921      	cbnz	r1, 800b1da <_realloc_r+0x16>
 800b1d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	f7ff bf81 	b.w	800b0dc <_malloc_r>
 800b1da:	b92a      	cbnz	r2, 800b1e8 <_realloc_r+0x24>
 800b1dc:	f7ff ff12 	bl	800b004 <_free_r>
 800b1e0:	4625      	mov	r5, r4
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e8:	f000 f838 	bl	800b25c <_malloc_usable_size_r>
 800b1ec:	4284      	cmp	r4, r0
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	d802      	bhi.n	800b1f8 <_realloc_r+0x34>
 800b1f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1f6:	d812      	bhi.n	800b21e <_realloc_r+0x5a>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4640      	mov	r0, r8
 800b1fc:	f7ff ff6e 	bl	800b0dc <_malloc_r>
 800b200:	4605      	mov	r5, r0
 800b202:	2800      	cmp	r0, #0
 800b204:	d0ed      	beq.n	800b1e2 <_realloc_r+0x1e>
 800b206:	42bc      	cmp	r4, r7
 800b208:	4622      	mov	r2, r4
 800b20a:	4631      	mov	r1, r6
 800b20c:	bf28      	it	cs
 800b20e:	463a      	movcs	r2, r7
 800b210:	f7ff fed0 	bl	800afb4 <memcpy>
 800b214:	4631      	mov	r1, r6
 800b216:	4640      	mov	r0, r8
 800b218:	f7ff fef4 	bl	800b004 <_free_r>
 800b21c:	e7e1      	b.n	800b1e2 <_realloc_r+0x1e>
 800b21e:	4635      	mov	r5, r6
 800b220:	e7df      	b.n	800b1e2 <_realloc_r+0x1e>
	...

0800b224 <_sbrk_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d06      	ldr	r5, [pc, #24]	; (800b240 <_sbrk_r+0x1c>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	f7f8 ff8c 	bl	800414c <_sbrk>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_sbrk_r+0x1a>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_sbrk_r+0x1a>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	20000724 	.word	0x20000724

0800b244 <__malloc_lock>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__malloc_lock+0x8>)
 800b246:	f000 b811 	b.w	800b26c <__retarget_lock_acquire_recursive>
 800b24a:	bf00      	nop
 800b24c:	20000728 	.word	0x20000728

0800b250 <__malloc_unlock>:
 800b250:	4801      	ldr	r0, [pc, #4]	; (800b258 <__malloc_unlock+0x8>)
 800b252:	f000 b80c 	b.w	800b26e <__retarget_lock_release_recursive>
 800b256:	bf00      	nop
 800b258:	20000728 	.word	0x20000728

0800b25c <_malloc_usable_size_r>:
 800b25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b260:	1f18      	subs	r0, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	bfbc      	itt	lt
 800b266:	580b      	ldrlt	r3, [r1, r0]
 800b268:	18c0      	addlt	r0, r0, r3
 800b26a:	4770      	bx	lr

0800b26c <__retarget_lock_acquire_recursive>:
 800b26c:	4770      	bx	lr

0800b26e <__retarget_lock_release_recursive>:
 800b26e:	4770      	bx	lr

0800b270 <sin>:
 800b270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b272:	ec53 2b10 	vmov	r2, r3, d0
 800b276:	4828      	ldr	r0, [pc, #160]	; (800b318 <sin+0xa8>)
 800b278:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b27c:	4281      	cmp	r1, r0
 800b27e:	dc07      	bgt.n	800b290 <sin+0x20>
 800b280:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b310 <sin+0xa0>
 800b284:	2000      	movs	r0, #0
 800b286:	b005      	add	sp, #20
 800b288:	f85d eb04 	ldr.w	lr, [sp], #4
 800b28c:	f002 ba5c 	b.w	800d748 <__kernel_sin>
 800b290:	4822      	ldr	r0, [pc, #136]	; (800b31c <sin+0xac>)
 800b292:	4281      	cmp	r1, r0
 800b294:	dd09      	ble.n	800b2aa <sin+0x3a>
 800b296:	ee10 0a10 	vmov	r0, s0
 800b29a:	4619      	mov	r1, r3
 800b29c:	f7f4 fff4 	bl	8000288 <__aeabi_dsub>
 800b2a0:	ec41 0b10 	vmov	d0, r0, r1
 800b2a4:	b005      	add	sp, #20
 800b2a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2aa:	4668      	mov	r0, sp
 800b2ac:	f001 f8a4 	bl	800c3f8 <__ieee754_rem_pio2>
 800b2b0:	f000 0003 	and.w	r0, r0, #3
 800b2b4:	2801      	cmp	r0, #1
 800b2b6:	d00c      	beq.n	800b2d2 <sin+0x62>
 800b2b8:	2802      	cmp	r0, #2
 800b2ba:	d011      	beq.n	800b2e0 <sin+0x70>
 800b2bc:	b9f0      	cbnz	r0, 800b2fc <sin+0x8c>
 800b2be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2c2:	ed9d 0b00 	vldr	d0, [sp]
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	f002 fa3e 	bl	800d748 <__kernel_sin>
 800b2cc:	ec51 0b10 	vmov	r0, r1, d0
 800b2d0:	e7e6      	b.n	800b2a0 <sin+0x30>
 800b2d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2d6:	ed9d 0b00 	vldr	d0, [sp]
 800b2da:	f001 fe1d 	bl	800cf18 <__kernel_cos>
 800b2de:	e7f5      	b.n	800b2cc <sin+0x5c>
 800b2e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2e4:	ed9d 0b00 	vldr	d0, [sp]
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	f002 fa2d 	bl	800d748 <__kernel_sin>
 800b2ee:	ec53 2b10 	vmov	r2, r3, d0
 800b2f2:	ee10 0a10 	vmov	r0, s0
 800b2f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2fa:	e7d1      	b.n	800b2a0 <sin+0x30>
 800b2fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b300:	ed9d 0b00 	vldr	d0, [sp]
 800b304:	f001 fe08 	bl	800cf18 <__kernel_cos>
 800b308:	e7f1      	b.n	800b2ee <sin+0x7e>
 800b30a:	bf00      	nop
 800b30c:	f3af 8000 	nop.w
	...
 800b318:	3fe921fb 	.word	0x3fe921fb
 800b31c:	7fefffff 	.word	0x7fefffff

0800b320 <asin>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	ed2d 8b02 	vpush	{d8}
 800b326:	ec55 4b10 	vmov	r4, r5, d0
 800b32a:	f000 f921 	bl	800b570 <__ieee754_asin>
 800b32e:	4622      	mov	r2, r4
 800b330:	462b      	mov	r3, r5
 800b332:	4620      	mov	r0, r4
 800b334:	4629      	mov	r1, r5
 800b336:	eeb0 8a40 	vmov.f32	s16, s0
 800b33a:	eef0 8a60 	vmov.f32	s17, s1
 800b33e:	f7f5 fbf5 	bl	8000b2c <__aeabi_dcmpun>
 800b342:	b9a8      	cbnz	r0, 800b370 <asin+0x50>
 800b344:	ec45 4b10 	vmov	d0, r4, r5
 800b348:	f002 fb0e 	bl	800d968 <fabs>
 800b34c:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <asin+0x60>)
 800b34e:	ec51 0b10 	vmov	r0, r1, d0
 800b352:	2200      	movs	r2, #0
 800b354:	f7f5 fbe0 	bl	8000b18 <__aeabi_dcmpgt>
 800b358:	b150      	cbz	r0, 800b370 <asin+0x50>
 800b35a:	f7ff fae9 	bl	800a930 <__errno>
 800b35e:	ecbd 8b02 	vpop	{d8}
 800b362:	2321      	movs	r3, #33	; 0x21
 800b364:	6003      	str	r3, [r0, #0]
 800b366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b36a:	4806      	ldr	r0, [pc, #24]	; (800b384 <asin+0x64>)
 800b36c:	f002 bb90 	b.w	800da90 <nan>
 800b370:	eeb0 0a48 	vmov.f32	s0, s16
 800b374:	eef0 0a68 	vmov.f32	s1, s17
 800b378:	ecbd 8b02 	vpop	{d8}
 800b37c:	bd38      	pop	{r3, r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	3ff00000 	.word	0x3ff00000
 800b384:	0800dd0d 	.word	0x0800dd0d

0800b388 <pow>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	ed2d 8b02 	vpush	{d8}
 800b38e:	eeb0 8a40 	vmov.f32	s16, s0
 800b392:	eef0 8a60 	vmov.f32	s17, s1
 800b396:	ec55 4b11 	vmov	r4, r5, d1
 800b39a:	f000 fafd 	bl	800b998 <__ieee754_pow>
 800b39e:	4622      	mov	r2, r4
 800b3a0:	462b      	mov	r3, r5
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	ec57 6b10 	vmov	r6, r7, d0
 800b3aa:	f7f5 fbbf 	bl	8000b2c <__aeabi_dcmpun>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d13b      	bne.n	800b42a <pow+0xa2>
 800b3b2:	ec51 0b18 	vmov	r0, r1, d8
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f7f5 fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3be:	b1b8      	cbz	r0, 800b3f0 <pow+0x68>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	f7f5 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d146      	bne.n	800b45e <pow+0xd6>
 800b3d0:	ec45 4b10 	vmov	d0, r4, r5
 800b3d4:	f002 fad1 	bl	800d97a <finite>
 800b3d8:	b338      	cbz	r0, 800b42a <pow+0xa2>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7f5 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800b3e6:	b300      	cbz	r0, 800b42a <pow+0xa2>
 800b3e8:	f7ff faa2 	bl	800a930 <__errno>
 800b3ec:	2322      	movs	r3, #34	; 0x22
 800b3ee:	e01b      	b.n	800b428 <pow+0xa0>
 800b3f0:	ec47 6b10 	vmov	d0, r6, r7
 800b3f4:	f002 fac1 	bl	800d97a <finite>
 800b3f8:	b9e0      	cbnz	r0, 800b434 <pow+0xac>
 800b3fa:	eeb0 0a48 	vmov.f32	s0, s16
 800b3fe:	eef0 0a68 	vmov.f32	s1, s17
 800b402:	f002 faba 	bl	800d97a <finite>
 800b406:	b1a8      	cbz	r0, 800b434 <pow+0xac>
 800b408:	ec45 4b10 	vmov	d0, r4, r5
 800b40c:	f002 fab5 	bl	800d97a <finite>
 800b410:	b180      	cbz	r0, 800b434 <pow+0xac>
 800b412:	4632      	mov	r2, r6
 800b414:	463b      	mov	r3, r7
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f5 fb87 	bl	8000b2c <__aeabi_dcmpun>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d0e2      	beq.n	800b3e8 <pow+0x60>
 800b422:	f7ff fa85 	bl	800a930 <__errno>
 800b426:	2321      	movs	r3, #33	; 0x21
 800b428:	6003      	str	r3, [r0, #0]
 800b42a:	ecbd 8b02 	vpop	{d8}
 800b42e:	ec47 6b10 	vmov	d0, r6, r7
 800b432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b434:	2200      	movs	r2, #0
 800b436:	2300      	movs	r3, #0
 800b438:	4630      	mov	r0, r6
 800b43a:	4639      	mov	r1, r7
 800b43c:	f7f5 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 800b440:	2800      	cmp	r0, #0
 800b442:	d0f2      	beq.n	800b42a <pow+0xa2>
 800b444:	eeb0 0a48 	vmov.f32	s0, s16
 800b448:	eef0 0a68 	vmov.f32	s1, s17
 800b44c:	f002 fa95 	bl	800d97a <finite>
 800b450:	2800      	cmp	r0, #0
 800b452:	d0ea      	beq.n	800b42a <pow+0xa2>
 800b454:	ec45 4b10 	vmov	d0, r4, r5
 800b458:	f002 fa8f 	bl	800d97a <finite>
 800b45c:	e7c3      	b.n	800b3e6 <pow+0x5e>
 800b45e:	4f01      	ldr	r7, [pc, #4]	; (800b464 <pow+0xdc>)
 800b460:	2600      	movs	r6, #0
 800b462:	e7e2      	b.n	800b42a <pow+0xa2>
 800b464:	3ff00000 	.word	0x3ff00000

0800b468 <sqrt>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	ed2d 8b02 	vpush	{d8}
 800b46e:	ec55 4b10 	vmov	r4, r5, d0
 800b472:	f001 f9cd 	bl	800c810 <__ieee754_sqrt>
 800b476:	4622      	mov	r2, r4
 800b478:	462b      	mov	r3, r5
 800b47a:	4620      	mov	r0, r4
 800b47c:	4629      	mov	r1, r5
 800b47e:	eeb0 8a40 	vmov.f32	s16, s0
 800b482:	eef0 8a60 	vmov.f32	s17, s1
 800b486:	f7f5 fb51 	bl	8000b2c <__aeabi_dcmpun>
 800b48a:	b990      	cbnz	r0, 800b4b2 <sqrt+0x4a>
 800b48c:	2200      	movs	r2, #0
 800b48e:	2300      	movs	r3, #0
 800b490:	4620      	mov	r0, r4
 800b492:	4629      	mov	r1, r5
 800b494:	f7f5 fb22 	bl	8000adc <__aeabi_dcmplt>
 800b498:	b158      	cbz	r0, 800b4b2 <sqrt+0x4a>
 800b49a:	f7ff fa49 	bl	800a930 <__errno>
 800b49e:	2321      	movs	r3, #33	; 0x21
 800b4a0:	6003      	str	r3, [r0, #0]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f7f5 f9cf 	bl	800084c <__aeabi_ddiv>
 800b4ae:	ec41 0b18 	vmov	d8, r0, r1
 800b4b2:	eeb0 0a48 	vmov.f32	s0, s16
 800b4b6:	eef0 0a68 	vmov.f32	s1, s17
 800b4ba:	ecbd 8b02 	vpop	{d8}
 800b4be:	bd38      	pop	{r3, r4, r5, pc}

0800b4c0 <powf>:
 800b4c0:	b508      	push	{r3, lr}
 800b4c2:	ed2d 8b04 	vpush	{d8-d9}
 800b4c6:	eeb0 8a60 	vmov.f32	s16, s1
 800b4ca:	eeb0 9a40 	vmov.f32	s18, s0
 800b4ce:	f001 fa51 	bl	800c974 <__ieee754_powf>
 800b4d2:	eeb4 8a48 	vcmp.f32	s16, s16
 800b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4da:	eef0 8a40 	vmov.f32	s17, s0
 800b4de:	d63e      	bvs.n	800b55e <powf+0x9e>
 800b4e0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e8:	d112      	bne.n	800b510 <powf+0x50>
 800b4ea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f2:	d039      	beq.n	800b568 <powf+0xa8>
 800b4f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b4f8:	f002 fb5f 	bl	800dbba <finitef>
 800b4fc:	b378      	cbz	r0, 800b55e <powf+0x9e>
 800b4fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b506:	d52a      	bpl.n	800b55e <powf+0x9e>
 800b508:	f7ff fa12 	bl	800a930 <__errno>
 800b50c:	2322      	movs	r3, #34	; 0x22
 800b50e:	e014      	b.n	800b53a <powf+0x7a>
 800b510:	f002 fb53 	bl	800dbba <finitef>
 800b514:	b998      	cbnz	r0, 800b53e <powf+0x7e>
 800b516:	eeb0 0a49 	vmov.f32	s0, s18
 800b51a:	f002 fb4e 	bl	800dbba <finitef>
 800b51e:	b170      	cbz	r0, 800b53e <powf+0x7e>
 800b520:	eeb0 0a48 	vmov.f32	s0, s16
 800b524:	f002 fb49 	bl	800dbba <finitef>
 800b528:	b148      	cbz	r0, 800b53e <powf+0x7e>
 800b52a:	eef4 8a68 	vcmp.f32	s17, s17
 800b52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b532:	d7e9      	bvc.n	800b508 <powf+0x48>
 800b534:	f7ff f9fc 	bl	800a930 <__errno>
 800b538:	2321      	movs	r3, #33	; 0x21
 800b53a:	6003      	str	r3, [r0, #0]
 800b53c:	e00f      	b.n	800b55e <powf+0x9e>
 800b53e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b546:	d10a      	bne.n	800b55e <powf+0x9e>
 800b548:	eeb0 0a49 	vmov.f32	s0, s18
 800b54c:	f002 fb35 	bl	800dbba <finitef>
 800b550:	b128      	cbz	r0, 800b55e <powf+0x9e>
 800b552:	eeb0 0a48 	vmov.f32	s0, s16
 800b556:	f002 fb30 	bl	800dbba <finitef>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d1d4      	bne.n	800b508 <powf+0x48>
 800b55e:	eeb0 0a68 	vmov.f32	s0, s17
 800b562:	ecbd 8b04 	vpop	{d8-d9}
 800b566:	bd08      	pop	{r3, pc}
 800b568:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b56c:	e7f7      	b.n	800b55e <powf+0x9e>
	...

0800b570 <__ieee754_asin>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	ed2d 8b04 	vpush	{d8-d9}
 800b578:	ec55 4b10 	vmov	r4, r5, d0
 800b57c:	4bcc      	ldr	r3, [pc, #816]	; (800b8b0 <__ieee754_asin+0x340>)
 800b57e:	b083      	sub	sp, #12
 800b580:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b584:	4598      	cmp	r8, r3
 800b586:	9501      	str	r5, [sp, #4]
 800b588:	dd35      	ble.n	800b5f6 <__ieee754_asin+0x86>
 800b58a:	ee10 3a10 	vmov	r3, s0
 800b58e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b592:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b596:	ea58 0303 	orrs.w	r3, r8, r3
 800b59a:	d117      	bne.n	800b5cc <__ieee754_asin+0x5c>
 800b59c:	a3aa      	add	r3, pc, #680	; (adr r3, 800b848 <__ieee754_asin+0x2d8>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	ee10 0a10 	vmov	r0, s0
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f7f5 f826 	bl	80005f8 <__aeabi_dmul>
 800b5ac:	a3a8      	add	r3, pc, #672	; (adr r3, 800b850 <__ieee754_asin+0x2e0>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7f5 f81d 	bl	80005f8 <__aeabi_dmul>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	f7f4 fe61 	bl	800028c <__adddf3>
 800b5ca:	e00b      	b.n	800b5e4 <__ieee754_asin+0x74>
 800b5cc:	ee10 2a10 	vmov	r2, s0
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	ee10 0a10 	vmov	r0, s0
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f7f4 fe56 	bl	8000288 <__aeabi_dsub>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	f7f5 f934 	bl	800084c <__aeabi_ddiv>
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	ec45 4b10 	vmov	d0, r4, r5
 800b5ec:	b003      	add	sp, #12
 800b5ee:	ecbd 8b04 	vpop	{d8-d9}
 800b5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f6:	4baf      	ldr	r3, [pc, #700]	; (800b8b4 <__ieee754_asin+0x344>)
 800b5f8:	4598      	cmp	r8, r3
 800b5fa:	dc11      	bgt.n	800b620 <__ieee754_asin+0xb0>
 800b5fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b600:	f280 80ae 	bge.w	800b760 <__ieee754_asin+0x1f0>
 800b604:	a394      	add	r3, pc, #592	; (adr r3, 800b858 <__ieee754_asin+0x2e8>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	ee10 0a10 	vmov	r0, s0
 800b60e:	4629      	mov	r1, r5
 800b610:	f7f4 fe3c 	bl	800028c <__adddf3>
 800b614:	4ba8      	ldr	r3, [pc, #672]	; (800b8b8 <__ieee754_asin+0x348>)
 800b616:	2200      	movs	r2, #0
 800b618:	f7f5 fa7e 	bl	8000b18 <__aeabi_dcmpgt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d1e3      	bne.n	800b5e8 <__ieee754_asin+0x78>
 800b620:	ec45 4b10 	vmov	d0, r4, r5
 800b624:	f002 f9a0 	bl	800d968 <fabs>
 800b628:	49a3      	ldr	r1, [pc, #652]	; (800b8b8 <__ieee754_asin+0x348>)
 800b62a:	ec53 2b10 	vmov	r2, r3, d0
 800b62e:	2000      	movs	r0, #0
 800b630:	f7f4 fe2a 	bl	8000288 <__aeabi_dsub>
 800b634:	4ba1      	ldr	r3, [pc, #644]	; (800b8bc <__ieee754_asin+0x34c>)
 800b636:	2200      	movs	r2, #0
 800b638:	f7f4 ffde 	bl	80005f8 <__aeabi_dmul>
 800b63c:	a388      	add	r3, pc, #544	; (adr r3, 800b860 <__ieee754_asin+0x2f0>)
 800b63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b642:	4604      	mov	r4, r0
 800b644:	460d      	mov	r5, r1
 800b646:	f7f4 ffd7 	bl	80005f8 <__aeabi_dmul>
 800b64a:	a387      	add	r3, pc, #540	; (adr r3, 800b868 <__ieee754_asin+0x2f8>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fe1c 	bl	800028c <__adddf3>
 800b654:	4622      	mov	r2, r4
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 ffce 	bl	80005f8 <__aeabi_dmul>
 800b65c:	a384      	add	r3, pc, #528	; (adr r3, 800b870 <__ieee754_asin+0x300>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fe11 	bl	8000288 <__aeabi_dsub>
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	f7f4 ffc5 	bl	80005f8 <__aeabi_dmul>
 800b66e:	a382      	add	r3, pc, #520	; (adr r3, 800b878 <__ieee754_asin+0x308>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fe0a 	bl	800028c <__adddf3>
 800b678:	4622      	mov	r2, r4
 800b67a:	462b      	mov	r3, r5
 800b67c:	f7f4 ffbc 	bl	80005f8 <__aeabi_dmul>
 800b680:	a37f      	add	r3, pc, #508	; (adr r3, 800b880 <__ieee754_asin+0x310>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 fdff 	bl	8000288 <__aeabi_dsub>
 800b68a:	4622      	mov	r2, r4
 800b68c:	462b      	mov	r3, r5
 800b68e:	f7f4 ffb3 	bl	80005f8 <__aeabi_dmul>
 800b692:	a37d      	add	r3, pc, #500	; (adr r3, 800b888 <__ieee754_asin+0x318>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fdf8 	bl	800028c <__adddf3>
 800b69c:	4622      	mov	r2, r4
 800b69e:	462b      	mov	r3, r5
 800b6a0:	f7f4 ffaa 	bl	80005f8 <__aeabi_dmul>
 800b6a4:	a37a      	add	r3, pc, #488	; (adr r3, 800b890 <__ieee754_asin+0x320>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	ec41 0b18 	vmov	d8, r0, r1
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	f7f4 ffa1 	bl	80005f8 <__aeabi_dmul>
 800b6b6:	a378      	add	r3, pc, #480	; (adr r3, 800b898 <__ieee754_asin+0x328>)
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f7f4 fde4 	bl	8000288 <__aeabi_dsub>
 800b6c0:	4622      	mov	r2, r4
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	f7f4 ff98 	bl	80005f8 <__aeabi_dmul>
 800b6c8:	a375      	add	r3, pc, #468	; (adr r3, 800b8a0 <__ieee754_asin+0x330>)
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	f7f4 fddd 	bl	800028c <__adddf3>
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	f7f4 ff8f 	bl	80005f8 <__aeabi_dmul>
 800b6da:	a373      	add	r3, pc, #460	; (adr r3, 800b8a8 <__ieee754_asin+0x338>)
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	f7f4 fdd2 	bl	8000288 <__aeabi_dsub>
 800b6e4:	4622      	mov	r2, r4
 800b6e6:	462b      	mov	r3, r5
 800b6e8:	f7f4 ff86 	bl	80005f8 <__aeabi_dmul>
 800b6ec:	4b72      	ldr	r3, [pc, #456]	; (800b8b8 <__ieee754_asin+0x348>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f7f4 fdcc 	bl	800028c <__adddf3>
 800b6f4:	ec45 4b10 	vmov	d0, r4, r5
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	460f      	mov	r7, r1
 800b6fc:	f001 f888 	bl	800c810 <__ieee754_sqrt>
 800b700:	4b6f      	ldr	r3, [pc, #444]	; (800b8c0 <__ieee754_asin+0x350>)
 800b702:	4598      	cmp	r8, r3
 800b704:	ec5b ab10 	vmov	sl, fp, d0
 800b708:	f340 80dc 	ble.w	800b8c4 <__ieee754_asin+0x354>
 800b70c:	4632      	mov	r2, r6
 800b70e:	463b      	mov	r3, r7
 800b710:	ec51 0b18 	vmov	r0, r1, d8
 800b714:	f7f5 f89a 	bl	800084c <__aeabi_ddiv>
 800b718:	4652      	mov	r2, sl
 800b71a:	465b      	mov	r3, fp
 800b71c:	f7f4 ff6c 	bl	80005f8 <__aeabi_dmul>
 800b720:	4652      	mov	r2, sl
 800b722:	465b      	mov	r3, fp
 800b724:	f7f4 fdb2 	bl	800028c <__adddf3>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	f7f4 fdae 	bl	800028c <__adddf3>
 800b730:	a347      	add	r3, pc, #284	; (adr r3, 800b850 <__ieee754_asin+0x2e0>)
 800b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b736:	f7f4 fda7 	bl	8000288 <__aeabi_dsub>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	a142      	add	r1, pc, #264	; (adr r1, 800b848 <__ieee754_asin+0x2d8>)
 800b740:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b744:	f7f4 fda0 	bl	8000288 <__aeabi_dsub>
 800b748:	9b01      	ldr	r3, [sp, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bfdc      	itt	le
 800b74e:	4602      	movle	r2, r0
 800b750:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b754:	4604      	mov	r4, r0
 800b756:	460d      	mov	r5, r1
 800b758:	bfdc      	itt	le
 800b75a:	4614      	movle	r4, r2
 800b75c:	461d      	movle	r5, r3
 800b75e:	e743      	b.n	800b5e8 <__ieee754_asin+0x78>
 800b760:	ee10 2a10 	vmov	r2, s0
 800b764:	ee10 0a10 	vmov	r0, s0
 800b768:	462b      	mov	r3, r5
 800b76a:	4629      	mov	r1, r5
 800b76c:	f7f4 ff44 	bl	80005f8 <__aeabi_dmul>
 800b770:	a33b      	add	r3, pc, #236	; (adr r3, 800b860 <__ieee754_asin+0x2f0>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	f7f4 ff3d 	bl	80005f8 <__aeabi_dmul>
 800b77e:	a33a      	add	r3, pc, #232	; (adr r3, 800b868 <__ieee754_asin+0x2f8>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f4 fd82 	bl	800028c <__adddf3>
 800b788:	4632      	mov	r2, r6
 800b78a:	463b      	mov	r3, r7
 800b78c:	f7f4 ff34 	bl	80005f8 <__aeabi_dmul>
 800b790:	a337      	add	r3, pc, #220	; (adr r3, 800b870 <__ieee754_asin+0x300>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f7f4 fd77 	bl	8000288 <__aeabi_dsub>
 800b79a:	4632      	mov	r2, r6
 800b79c:	463b      	mov	r3, r7
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	a335      	add	r3, pc, #212	; (adr r3, 800b878 <__ieee754_asin+0x308>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7f4 fd70 	bl	800028c <__adddf3>
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	f7f4 ff22 	bl	80005f8 <__aeabi_dmul>
 800b7b4:	a332      	add	r3, pc, #200	; (adr r3, 800b880 <__ieee754_asin+0x310>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	f7f4 fd65 	bl	8000288 <__aeabi_dsub>
 800b7be:	4632      	mov	r2, r6
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	f7f4 ff19 	bl	80005f8 <__aeabi_dmul>
 800b7c6:	a330      	add	r3, pc, #192	; (adr r3, 800b888 <__ieee754_asin+0x318>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f7f4 fd5e 	bl	800028c <__adddf3>
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	463b      	mov	r3, r7
 800b7d4:	f7f4 ff10 	bl	80005f8 <__aeabi_dmul>
 800b7d8:	a32d      	add	r3, pc, #180	; (adr r3, 800b890 <__ieee754_asin+0x320>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	4680      	mov	r8, r0
 800b7e0:	4689      	mov	r9, r1
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 ff07 	bl	80005f8 <__aeabi_dmul>
 800b7ea:	a32b      	add	r3, pc, #172	; (adr r3, 800b898 <__ieee754_asin+0x328>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f7f4 fd4a 	bl	8000288 <__aeabi_dsub>
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	463b      	mov	r3, r7
 800b7f8:	f7f4 fefe 	bl	80005f8 <__aeabi_dmul>
 800b7fc:	a328      	add	r3, pc, #160	; (adr r3, 800b8a0 <__ieee754_asin+0x330>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	f7f4 fd43 	bl	800028c <__adddf3>
 800b806:	4632      	mov	r2, r6
 800b808:	463b      	mov	r3, r7
 800b80a:	f7f4 fef5 	bl	80005f8 <__aeabi_dmul>
 800b80e:	a326      	add	r3, pc, #152	; (adr r3, 800b8a8 <__ieee754_asin+0x338>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7f4 fd38 	bl	8000288 <__aeabi_dsub>
 800b818:	4632      	mov	r2, r6
 800b81a:	463b      	mov	r3, r7
 800b81c:	f7f4 feec 	bl	80005f8 <__aeabi_dmul>
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <__ieee754_asin+0x348>)
 800b822:	2200      	movs	r2, #0
 800b824:	f7f4 fd32 	bl	800028c <__adddf3>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4640      	mov	r0, r8
 800b82e:	4649      	mov	r1, r9
 800b830:	f7f5 f80c 	bl	800084c <__aeabi_ddiv>
 800b834:	4622      	mov	r2, r4
 800b836:	462b      	mov	r3, r5
 800b838:	f7f4 fede 	bl	80005f8 <__aeabi_dmul>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4620      	mov	r0, r4
 800b842:	4629      	mov	r1, r5
 800b844:	e6bf      	b.n	800b5c6 <__ieee754_asin+0x56>
 800b846:	bf00      	nop
 800b848:	54442d18 	.word	0x54442d18
 800b84c:	3ff921fb 	.word	0x3ff921fb
 800b850:	33145c07 	.word	0x33145c07
 800b854:	3c91a626 	.word	0x3c91a626
 800b858:	8800759c 	.word	0x8800759c
 800b85c:	7e37e43c 	.word	0x7e37e43c
 800b860:	0dfdf709 	.word	0x0dfdf709
 800b864:	3f023de1 	.word	0x3f023de1
 800b868:	7501b288 	.word	0x7501b288
 800b86c:	3f49efe0 	.word	0x3f49efe0
 800b870:	b5688f3b 	.word	0xb5688f3b
 800b874:	3fa48228 	.word	0x3fa48228
 800b878:	0e884455 	.word	0x0e884455
 800b87c:	3fc9c155 	.word	0x3fc9c155
 800b880:	03eb6f7d 	.word	0x03eb6f7d
 800b884:	3fd4d612 	.word	0x3fd4d612
 800b888:	55555555 	.word	0x55555555
 800b88c:	3fc55555 	.word	0x3fc55555
 800b890:	b12e9282 	.word	0xb12e9282
 800b894:	3fb3b8c5 	.word	0x3fb3b8c5
 800b898:	1b8d0159 	.word	0x1b8d0159
 800b89c:	3fe6066c 	.word	0x3fe6066c
 800b8a0:	9c598ac8 	.word	0x9c598ac8
 800b8a4:	40002ae5 	.word	0x40002ae5
 800b8a8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b8ac:	40033a27 	.word	0x40033a27
 800b8b0:	3fefffff 	.word	0x3fefffff
 800b8b4:	3fdfffff 	.word	0x3fdfffff
 800b8b8:	3ff00000 	.word	0x3ff00000
 800b8bc:	3fe00000 	.word	0x3fe00000
 800b8c0:	3fef3332 	.word	0x3fef3332
 800b8c4:	ee10 2a10 	vmov	r2, s0
 800b8c8:	ee10 0a10 	vmov	r0, s0
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	4659      	mov	r1, fp
 800b8d0:	f7f4 fcdc 	bl	800028c <__adddf3>
 800b8d4:	4632      	mov	r2, r6
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	ec41 0b19 	vmov	d9, r0, r1
 800b8dc:	ec51 0b18 	vmov	r0, r1, d8
 800b8e0:	f7f4 ffb4 	bl	800084c <__aeabi_ddiv>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	ec51 0b19 	vmov	r0, r1, d9
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	f04f 0800 	mov.w	r8, #0
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	460f      	mov	r7, r1
 800b8f8:	4642      	mov	r2, r8
 800b8fa:	465b      	mov	r3, fp
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	4659      	mov	r1, fp
 800b900:	f7f4 fe7a 	bl	80005f8 <__aeabi_dmul>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4620      	mov	r0, r4
 800b90a:	4629      	mov	r1, r5
 800b90c:	f7f4 fcbc 	bl	8000288 <__aeabi_dsub>
 800b910:	4642      	mov	r2, r8
 800b912:	4604      	mov	r4, r0
 800b914:	460d      	mov	r5, r1
 800b916:	465b      	mov	r3, fp
 800b918:	4650      	mov	r0, sl
 800b91a:	4659      	mov	r1, fp
 800b91c:	f7f4 fcb6 	bl	800028c <__adddf3>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4620      	mov	r0, r4
 800b926:	4629      	mov	r1, r5
 800b928:	f7f4 ff90 	bl	800084c <__aeabi_ddiv>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	f7f4 fcac 	bl	800028c <__adddf3>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	a113      	add	r1, pc, #76	; (adr r1, 800b988 <__ieee754_asin+0x418>)
 800b93a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b93e:	f7f4 fca3 	bl	8000288 <__aeabi_dsub>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4630      	mov	r0, r6
 800b948:	4639      	mov	r1, r7
 800b94a:	f7f4 fc9d 	bl	8000288 <__aeabi_dsub>
 800b94e:	4642      	mov	r2, r8
 800b950:	4604      	mov	r4, r0
 800b952:	460d      	mov	r5, r1
 800b954:	465b      	mov	r3, fp
 800b956:	4640      	mov	r0, r8
 800b958:	4659      	mov	r1, fp
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	a10b      	add	r1, pc, #44	; (adr r1, 800b990 <__ieee754_asin+0x420>)
 800b964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b968:	f7f4 fc8e 	bl	8000288 <__aeabi_dsub>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4620      	mov	r0, r4
 800b972:	4629      	mov	r1, r5
 800b974:	f7f4 fc88 	bl	8000288 <__aeabi_dsub>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	a104      	add	r1, pc, #16	; (adr r1, 800b990 <__ieee754_asin+0x420>)
 800b97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b982:	e6df      	b.n	800b744 <__ieee754_asin+0x1d4>
 800b984:	f3af 8000 	nop.w
 800b988:	33145c07 	.word	0x33145c07
 800b98c:	3c91a626 	.word	0x3c91a626
 800b990:	54442d18 	.word	0x54442d18
 800b994:	3fe921fb 	.word	0x3fe921fb

0800b998 <__ieee754_pow>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	ed2d 8b06 	vpush	{d8-d10}
 800b9a0:	b089      	sub	sp, #36	; 0x24
 800b9a2:	ed8d 1b00 	vstr	d1, [sp]
 800b9a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b9aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b9ae:	ea58 0102 	orrs.w	r1, r8, r2
 800b9b2:	ec57 6b10 	vmov	r6, r7, d0
 800b9b6:	d115      	bne.n	800b9e4 <__ieee754_pow+0x4c>
 800b9b8:	19b3      	adds	r3, r6, r6
 800b9ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b9be:	4152      	adcs	r2, r2
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	4b89      	ldr	r3, [pc, #548]	; (800bbe8 <__ieee754_pow+0x250>)
 800b9c4:	4193      	sbcs	r3, r2
 800b9c6:	f080 84d2 	bcs.w	800c36e <__ieee754_pow+0x9d6>
 800b9ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	f7f4 fc5b 	bl	800028c <__adddf3>
 800b9d6:	ec41 0b10 	vmov	d0, r0, r1
 800b9da:	b009      	add	sp, #36	; 0x24
 800b9dc:	ecbd 8b06 	vpop	{d8-d10}
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	4b81      	ldr	r3, [pc, #516]	; (800bbec <__ieee754_pow+0x254>)
 800b9e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b9ea:	429c      	cmp	r4, r3
 800b9ec:	ee10 aa10 	vmov	sl, s0
 800b9f0:	463d      	mov	r5, r7
 800b9f2:	dc06      	bgt.n	800ba02 <__ieee754_pow+0x6a>
 800b9f4:	d101      	bne.n	800b9fa <__ieee754_pow+0x62>
 800b9f6:	2e00      	cmp	r6, #0
 800b9f8:	d1e7      	bne.n	800b9ca <__ieee754_pow+0x32>
 800b9fa:	4598      	cmp	r8, r3
 800b9fc:	dc01      	bgt.n	800ba02 <__ieee754_pow+0x6a>
 800b9fe:	d10f      	bne.n	800ba20 <__ieee754_pow+0x88>
 800ba00:	b172      	cbz	r2, 800ba20 <__ieee754_pow+0x88>
 800ba02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ba06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ba0a:	ea55 050a 	orrs.w	r5, r5, sl
 800ba0e:	d1dc      	bne.n	800b9ca <__ieee754_pow+0x32>
 800ba10:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba14:	18db      	adds	r3, r3, r3
 800ba16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ba1a:	4152      	adcs	r2, r2
 800ba1c:	429d      	cmp	r5, r3
 800ba1e:	e7d0      	b.n	800b9c2 <__ieee754_pow+0x2a>
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	da3b      	bge.n	800ba9c <__ieee754_pow+0x104>
 800ba24:	4b72      	ldr	r3, [pc, #456]	; (800bbf0 <__ieee754_pow+0x258>)
 800ba26:	4598      	cmp	r8, r3
 800ba28:	dc51      	bgt.n	800bace <__ieee754_pow+0x136>
 800ba2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ba2e:	4598      	cmp	r8, r3
 800ba30:	f340 84ac 	ble.w	800c38c <__ieee754_pow+0x9f4>
 800ba34:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ba38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba3c:	2b14      	cmp	r3, #20
 800ba3e:	dd0f      	ble.n	800ba60 <__ieee754_pow+0xc8>
 800ba40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ba44:	fa22 f103 	lsr.w	r1, r2, r3
 800ba48:	fa01 f303 	lsl.w	r3, r1, r3
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	f040 849d 	bne.w	800c38c <__ieee754_pow+0x9f4>
 800ba52:	f001 0101 	and.w	r1, r1, #1
 800ba56:	f1c1 0302 	rsb	r3, r1, #2
 800ba5a:	9304      	str	r3, [sp, #16]
 800ba5c:	b182      	cbz	r2, 800ba80 <__ieee754_pow+0xe8>
 800ba5e:	e05f      	b.n	800bb20 <__ieee754_pow+0x188>
 800ba60:	2a00      	cmp	r2, #0
 800ba62:	d15b      	bne.n	800bb1c <__ieee754_pow+0x184>
 800ba64:	f1c3 0314 	rsb	r3, r3, #20
 800ba68:	fa48 f103 	asr.w	r1, r8, r3
 800ba6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba70:	4543      	cmp	r3, r8
 800ba72:	f040 8488 	bne.w	800c386 <__ieee754_pow+0x9ee>
 800ba76:	f001 0101 	and.w	r1, r1, #1
 800ba7a:	f1c1 0302 	rsb	r3, r1, #2
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	4b5c      	ldr	r3, [pc, #368]	; (800bbf4 <__ieee754_pow+0x25c>)
 800ba82:	4598      	cmp	r8, r3
 800ba84:	d132      	bne.n	800baec <__ieee754_pow+0x154>
 800ba86:	f1b9 0f00 	cmp.w	r9, #0
 800ba8a:	f280 8478 	bge.w	800c37e <__ieee754_pow+0x9e6>
 800ba8e:	4959      	ldr	r1, [pc, #356]	; (800bbf4 <__ieee754_pow+0x25c>)
 800ba90:	4632      	mov	r2, r6
 800ba92:	463b      	mov	r3, r7
 800ba94:	2000      	movs	r0, #0
 800ba96:	f7f4 fed9 	bl	800084c <__aeabi_ddiv>
 800ba9a:	e79c      	b.n	800b9d6 <__ieee754_pow+0x3e>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9304      	str	r3, [sp, #16]
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	d13d      	bne.n	800bb20 <__ieee754_pow+0x188>
 800baa4:	4b51      	ldr	r3, [pc, #324]	; (800bbec <__ieee754_pow+0x254>)
 800baa6:	4598      	cmp	r8, r3
 800baa8:	d1ea      	bne.n	800ba80 <__ieee754_pow+0xe8>
 800baaa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800baae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bab2:	ea53 030a 	orrs.w	r3, r3, sl
 800bab6:	f000 845a 	beq.w	800c36e <__ieee754_pow+0x9d6>
 800baba:	4b4f      	ldr	r3, [pc, #316]	; (800bbf8 <__ieee754_pow+0x260>)
 800babc:	429c      	cmp	r4, r3
 800babe:	dd08      	ble.n	800bad2 <__ieee754_pow+0x13a>
 800bac0:	f1b9 0f00 	cmp.w	r9, #0
 800bac4:	f2c0 8457 	blt.w	800c376 <__ieee754_pow+0x9de>
 800bac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bacc:	e783      	b.n	800b9d6 <__ieee754_pow+0x3e>
 800bace:	2302      	movs	r3, #2
 800bad0:	e7e5      	b.n	800ba9e <__ieee754_pow+0x106>
 800bad2:	f1b9 0f00 	cmp.w	r9, #0
 800bad6:	f04f 0000 	mov.w	r0, #0
 800bada:	f04f 0100 	mov.w	r1, #0
 800bade:	f6bf af7a 	bge.w	800b9d6 <__ieee754_pow+0x3e>
 800bae2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bae6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800baea:	e774      	b.n	800b9d6 <__ieee754_pow+0x3e>
 800baec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800baf0:	d106      	bne.n	800bb00 <__ieee754_pow+0x168>
 800baf2:	4632      	mov	r2, r6
 800baf4:	463b      	mov	r3, r7
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 fd7d 	bl	80005f8 <__aeabi_dmul>
 800bafe:	e76a      	b.n	800b9d6 <__ieee754_pow+0x3e>
 800bb00:	4b3e      	ldr	r3, [pc, #248]	; (800bbfc <__ieee754_pow+0x264>)
 800bb02:	4599      	cmp	r9, r3
 800bb04:	d10c      	bne.n	800bb20 <__ieee754_pow+0x188>
 800bb06:	2d00      	cmp	r5, #0
 800bb08:	db0a      	blt.n	800bb20 <__ieee754_pow+0x188>
 800bb0a:	ec47 6b10 	vmov	d0, r6, r7
 800bb0e:	b009      	add	sp, #36	; 0x24
 800bb10:	ecbd 8b06 	vpop	{d8-d10}
 800bb14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	f000 be7a 	b.w	800c810 <__ieee754_sqrt>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9304      	str	r3, [sp, #16]
 800bb20:	ec47 6b10 	vmov	d0, r6, r7
 800bb24:	f001 ff20 	bl	800d968 <fabs>
 800bb28:	ec51 0b10 	vmov	r0, r1, d0
 800bb2c:	f1ba 0f00 	cmp.w	sl, #0
 800bb30:	d129      	bne.n	800bb86 <__ieee754_pow+0x1ee>
 800bb32:	b124      	cbz	r4, 800bb3e <__ieee754_pow+0x1a6>
 800bb34:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <__ieee754_pow+0x25c>)
 800bb36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d123      	bne.n	800bb86 <__ieee754_pow+0x1ee>
 800bb3e:	f1b9 0f00 	cmp.w	r9, #0
 800bb42:	da05      	bge.n	800bb50 <__ieee754_pow+0x1b8>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	2000      	movs	r0, #0
 800bb4a:	492a      	ldr	r1, [pc, #168]	; (800bbf4 <__ieee754_pow+0x25c>)
 800bb4c:	f7f4 fe7e 	bl	800084c <__aeabi_ddiv>
 800bb50:	2d00      	cmp	r5, #0
 800bb52:	f6bf af40 	bge.w	800b9d6 <__ieee754_pow+0x3e>
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb60:	4323      	orrs	r3, r4
 800bb62:	d108      	bne.n	800bb76 <__ieee754_pow+0x1de>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4610      	mov	r0, r2
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	f7f4 fb8c 	bl	8000288 <__aeabi_dsub>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	e78f      	b.n	800ba96 <__ieee754_pow+0xfe>
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	f47f af2c 	bne.w	800b9d6 <__ieee754_pow+0x3e>
 800bb7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb82:	4619      	mov	r1, r3
 800bb84:	e727      	b.n	800b9d6 <__ieee754_pow+0x3e>
 800bb86:	0feb      	lsrs	r3, r5, #31
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	9306      	str	r3, [sp, #24]
 800bb8c:	9a06      	ldr	r2, [sp, #24]
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	d102      	bne.n	800bb9a <__ieee754_pow+0x202>
 800bb94:	4632      	mov	r2, r6
 800bb96:	463b      	mov	r3, r7
 800bb98:	e7e6      	b.n	800bb68 <__ieee754_pow+0x1d0>
 800bb9a:	4b19      	ldr	r3, [pc, #100]	; (800bc00 <__ieee754_pow+0x268>)
 800bb9c:	4598      	cmp	r8, r3
 800bb9e:	f340 80fb 	ble.w	800bd98 <__ieee754_pow+0x400>
 800bba2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bba6:	4598      	cmp	r8, r3
 800bba8:	4b13      	ldr	r3, [pc, #76]	; (800bbf8 <__ieee754_pow+0x260>)
 800bbaa:	dd0c      	ble.n	800bbc6 <__ieee754_pow+0x22e>
 800bbac:	429c      	cmp	r4, r3
 800bbae:	dc0f      	bgt.n	800bbd0 <__ieee754_pow+0x238>
 800bbb0:	f1b9 0f00 	cmp.w	r9, #0
 800bbb4:	da0f      	bge.n	800bbd6 <__ieee754_pow+0x23e>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	b009      	add	sp, #36	; 0x24
 800bbba:	ecbd 8b06 	vpop	{d8-d10}
 800bbbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc2:	f001 bea6 	b.w	800d912 <__math_oflow>
 800bbc6:	429c      	cmp	r4, r3
 800bbc8:	dbf2      	blt.n	800bbb0 <__ieee754_pow+0x218>
 800bbca:	4b0a      	ldr	r3, [pc, #40]	; (800bbf4 <__ieee754_pow+0x25c>)
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	dd19      	ble.n	800bc04 <__ieee754_pow+0x26c>
 800bbd0:	f1b9 0f00 	cmp.w	r9, #0
 800bbd4:	dcef      	bgt.n	800bbb6 <__ieee754_pow+0x21e>
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	b009      	add	sp, #36	; 0x24
 800bbda:	ecbd 8b06 	vpop	{d8-d10}
 800bbde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe2:	f001 be8d 	b.w	800d900 <__math_uflow>
 800bbe6:	bf00      	nop
 800bbe8:	fff00000 	.word	0xfff00000
 800bbec:	7ff00000 	.word	0x7ff00000
 800bbf0:	433fffff 	.word	0x433fffff
 800bbf4:	3ff00000 	.word	0x3ff00000
 800bbf8:	3fefffff 	.word	0x3fefffff
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	41e00000 	.word	0x41e00000
 800bc04:	4b60      	ldr	r3, [pc, #384]	; (800bd88 <__ieee754_pow+0x3f0>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	f7f4 fb3e 	bl	8000288 <__aeabi_dsub>
 800bc0c:	a354      	add	r3, pc, #336	; (adr r3, 800bd60 <__ieee754_pow+0x3c8>)
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	4604      	mov	r4, r0
 800bc14:	460d      	mov	r5, r1
 800bc16:	f7f4 fcef 	bl	80005f8 <__aeabi_dmul>
 800bc1a:	a353      	add	r3, pc, #332	; (adr r3, 800bd68 <__ieee754_pow+0x3d0>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	4606      	mov	r6, r0
 800bc22:	460f      	mov	r7, r1
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fce6 	bl	80005f8 <__aeabi_dmul>
 800bc2c:	4b57      	ldr	r3, [pc, #348]	; (800bd8c <__ieee754_pow+0x3f4>)
 800bc2e:	4682      	mov	sl, r0
 800bc30:	468b      	mov	fp, r1
 800bc32:	2200      	movs	r2, #0
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	a14b      	add	r1, pc, #300	; (adr r1, 800bd70 <__ieee754_pow+0x3d8>)
 800bc42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc46:	f7f4 fb1f 	bl	8000288 <__aeabi_dsub>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fcd3 	bl	80005f8 <__aeabi_dmul>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	2000      	movs	r0, #0
 800bc58:	494d      	ldr	r1, [pc, #308]	; (800bd90 <__ieee754_pow+0x3f8>)
 800bc5a:	f7f4 fb15 	bl	8000288 <__aeabi_dsub>
 800bc5e:	4622      	mov	r2, r4
 800bc60:	4680      	mov	r8, r0
 800bc62:	4689      	mov	r9, r1
 800bc64:	462b      	mov	r3, r5
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f4 fcbf 	bl	80005f8 <__aeabi_dmul>
 800bc7a:	a33f      	add	r3, pc, #252	; (adr r3, 800bd78 <__ieee754_pow+0x3e0>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fcba 	bl	80005f8 <__aeabi_dmul>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4650      	mov	r0, sl
 800bc8a:	4659      	mov	r1, fp
 800bc8c:	f7f4 fafc 	bl	8000288 <__aeabi_dsub>
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4680      	mov	r8, r0
 800bc96:	4689      	mov	r9, r1
 800bc98:	4630      	mov	r0, r6
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	f7f4 faf6 	bl	800028c <__adddf3>
 800bca0:	2000      	movs	r0, #0
 800bca2:	4632      	mov	r2, r6
 800bca4:	463b      	mov	r3, r7
 800bca6:	4604      	mov	r4, r0
 800bca8:	460d      	mov	r5, r1
 800bcaa:	f7f4 faed 	bl	8000288 <__aeabi_dsub>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	4649      	mov	r1, r9
 800bcb6:	f7f4 fae7 	bl	8000288 <__aeabi_dsub>
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	9a06      	ldr	r2, [sp, #24]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	4682      	mov	sl, r0
 800bcc4:	468b      	mov	fp, r1
 800bcc6:	f040 81e7 	bne.w	800c098 <__ieee754_pow+0x700>
 800bcca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bd80 <__ieee754_pow+0x3e8>
 800bcce:	eeb0 8a47 	vmov.f32	s16, s14
 800bcd2:	eef0 8a67 	vmov.f32	s17, s15
 800bcd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bcda:	2600      	movs	r6, #0
 800bcdc:	4632      	mov	r2, r6
 800bcde:	463b      	mov	r3, r7
 800bce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bce4:	f7f4 fad0 	bl	8000288 <__aeabi_dsub>
 800bce8:	4622      	mov	r2, r4
 800bcea:	462b      	mov	r3, r5
 800bcec:	f7f4 fc84 	bl	80005f8 <__aeabi_dmul>
 800bcf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcf4:	4680      	mov	r8, r0
 800bcf6:	4689      	mov	r9, r1
 800bcf8:	4650      	mov	r0, sl
 800bcfa:	4659      	mov	r1, fp
 800bcfc:	f7f4 fc7c 	bl	80005f8 <__aeabi_dmul>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4640      	mov	r0, r8
 800bd06:	4649      	mov	r1, r9
 800bd08:	f7f4 fac0 	bl	800028c <__adddf3>
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	463b      	mov	r3, r7
 800bd10:	4680      	mov	r8, r0
 800bd12:	4689      	mov	r9, r1
 800bd14:	4620      	mov	r0, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	f7f4 fc6e 	bl	80005f8 <__aeabi_dmul>
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4604      	mov	r4, r0
 800bd20:	460d      	mov	r5, r1
 800bd22:	4602      	mov	r2, r0
 800bd24:	4649      	mov	r1, r9
 800bd26:	4640      	mov	r0, r8
 800bd28:	f7f4 fab0 	bl	800028c <__adddf3>
 800bd2c:	4b19      	ldr	r3, [pc, #100]	; (800bd94 <__ieee754_pow+0x3fc>)
 800bd2e:	4299      	cmp	r1, r3
 800bd30:	ec45 4b19 	vmov	d9, r4, r5
 800bd34:	4606      	mov	r6, r0
 800bd36:	460f      	mov	r7, r1
 800bd38:	468b      	mov	fp, r1
 800bd3a:	f340 82f1 	ble.w	800c320 <__ieee754_pow+0x988>
 800bd3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bd42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bd46:	4303      	orrs	r3, r0
 800bd48:	f000 81e4 	beq.w	800c114 <__ieee754_pow+0x77c>
 800bd4c:	ec51 0b18 	vmov	r0, r1, d8
 800bd50:	2200      	movs	r2, #0
 800bd52:	2300      	movs	r3, #0
 800bd54:	f7f4 fec2 	bl	8000adc <__aeabi_dcmplt>
 800bd58:	3800      	subs	r0, #0
 800bd5a:	bf18      	it	ne
 800bd5c:	2001      	movne	r0, #1
 800bd5e:	e72b      	b.n	800bbb8 <__ieee754_pow+0x220>
 800bd60:	60000000 	.word	0x60000000
 800bd64:	3ff71547 	.word	0x3ff71547
 800bd68:	f85ddf44 	.word	0xf85ddf44
 800bd6c:	3e54ae0b 	.word	0x3e54ae0b
 800bd70:	55555555 	.word	0x55555555
 800bd74:	3fd55555 	.word	0x3fd55555
 800bd78:	652b82fe 	.word	0x652b82fe
 800bd7c:	3ff71547 	.word	0x3ff71547
 800bd80:	00000000 	.word	0x00000000
 800bd84:	bff00000 	.word	0xbff00000
 800bd88:	3ff00000 	.word	0x3ff00000
 800bd8c:	3fd00000 	.word	0x3fd00000
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	408fffff 	.word	0x408fffff
 800bd98:	4bd5      	ldr	r3, [pc, #852]	; (800c0f0 <__ieee754_pow+0x758>)
 800bd9a:	402b      	ands	r3, r5
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	b92b      	cbnz	r3, 800bdac <__ieee754_pow+0x414>
 800bda0:	4bd4      	ldr	r3, [pc, #848]	; (800c0f4 <__ieee754_pow+0x75c>)
 800bda2:	f7f4 fc29 	bl	80005f8 <__aeabi_dmul>
 800bda6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bdaa:	460c      	mov	r4, r1
 800bdac:	1523      	asrs	r3, r4, #20
 800bdae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdb2:	4413      	add	r3, r2
 800bdb4:	9305      	str	r3, [sp, #20]
 800bdb6:	4bd0      	ldr	r3, [pc, #832]	; (800c0f8 <__ieee754_pow+0x760>)
 800bdb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bdbc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bdc0:	429c      	cmp	r4, r3
 800bdc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdc6:	dd08      	ble.n	800bdda <__ieee754_pow+0x442>
 800bdc8:	4bcc      	ldr	r3, [pc, #816]	; (800c0fc <__ieee754_pow+0x764>)
 800bdca:	429c      	cmp	r4, r3
 800bdcc:	f340 8162 	ble.w	800c094 <__ieee754_pow+0x6fc>
 800bdd0:	9b05      	ldr	r3, [sp, #20]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	9305      	str	r3, [sp, #20]
 800bdd6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bdda:	2400      	movs	r4, #0
 800bddc:	00e3      	lsls	r3, r4, #3
 800bdde:	9307      	str	r3, [sp, #28]
 800bde0:	4bc7      	ldr	r3, [pc, #796]	; (800c100 <__ieee754_pow+0x768>)
 800bde2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bde6:	ed93 7b00 	vldr	d7, [r3]
 800bdea:	4629      	mov	r1, r5
 800bdec:	ec53 2b17 	vmov	r2, r3, d7
 800bdf0:	eeb0 9a47 	vmov.f32	s18, s14
 800bdf4:	eef0 9a67 	vmov.f32	s19, s15
 800bdf8:	4682      	mov	sl, r0
 800bdfa:	f7f4 fa45 	bl	8000288 <__aeabi_dsub>
 800bdfe:	4652      	mov	r2, sl
 800be00:	4606      	mov	r6, r0
 800be02:	460f      	mov	r7, r1
 800be04:	462b      	mov	r3, r5
 800be06:	ec51 0b19 	vmov	r0, r1, d9
 800be0a:	f7f4 fa3f 	bl	800028c <__adddf3>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	2000      	movs	r0, #0
 800be14:	49bb      	ldr	r1, [pc, #748]	; (800c104 <__ieee754_pow+0x76c>)
 800be16:	f7f4 fd19 	bl	800084c <__aeabi_ddiv>
 800be1a:	ec41 0b1a 	vmov	d10, r0, r1
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4630      	mov	r0, r6
 800be24:	4639      	mov	r1, r7
 800be26:	f7f4 fbe7 	bl	80005f8 <__aeabi_dmul>
 800be2a:	2300      	movs	r3, #0
 800be2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be30:	9302      	str	r3, [sp, #8]
 800be32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be36:	46ab      	mov	fp, r5
 800be38:	106d      	asrs	r5, r5, #1
 800be3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800be3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800be42:	ec41 0b18 	vmov	d8, r0, r1
 800be46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800be4a:	2200      	movs	r2, #0
 800be4c:	4640      	mov	r0, r8
 800be4e:	4649      	mov	r1, r9
 800be50:	4614      	mov	r4, r2
 800be52:	461d      	mov	r5, r3
 800be54:	f7f4 fbd0 	bl	80005f8 <__aeabi_dmul>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4630      	mov	r0, r6
 800be5e:	4639      	mov	r1, r7
 800be60:	f7f4 fa12 	bl	8000288 <__aeabi_dsub>
 800be64:	ec53 2b19 	vmov	r2, r3, d9
 800be68:	4606      	mov	r6, r0
 800be6a:	460f      	mov	r7, r1
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fa0a 	bl	8000288 <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4650      	mov	r0, sl
 800be7a:	4659      	mov	r1, fp
 800be7c:	f7f4 fa04 	bl	8000288 <__aeabi_dsub>
 800be80:	4642      	mov	r2, r8
 800be82:	464b      	mov	r3, r9
 800be84:	f7f4 fbb8 	bl	80005f8 <__aeabi_dmul>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4630      	mov	r0, r6
 800be8e:	4639      	mov	r1, r7
 800be90:	f7f4 f9fa 	bl	8000288 <__aeabi_dsub>
 800be94:	ec53 2b1a 	vmov	r2, r3, d10
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	ec53 2b18 	vmov	r2, r3, d8
 800bea0:	ec41 0b19 	vmov	d9, r0, r1
 800bea4:	ec51 0b18 	vmov	r0, r1, d8
 800bea8:	f7f4 fba6 	bl	80005f8 <__aeabi_dmul>
 800beac:	a37c      	add	r3, pc, #496	; (adr r3, 800c0a0 <__ieee754_pow+0x708>)
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	4604      	mov	r4, r0
 800beb4:	460d      	mov	r5, r1
 800beb6:	f7f4 fb9f 	bl	80005f8 <__aeabi_dmul>
 800beba:	a37b      	add	r3, pc, #492	; (adr r3, 800c0a8 <__ieee754_pow+0x710>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	f7f4 f9e4 	bl	800028c <__adddf3>
 800bec4:	4622      	mov	r2, r4
 800bec6:	462b      	mov	r3, r5
 800bec8:	f7f4 fb96 	bl	80005f8 <__aeabi_dmul>
 800becc:	a378      	add	r3, pc, #480	; (adr r3, 800c0b0 <__ieee754_pow+0x718>)
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f7f4 f9db 	bl	800028c <__adddf3>
 800bed6:	4622      	mov	r2, r4
 800bed8:	462b      	mov	r3, r5
 800beda:	f7f4 fb8d 	bl	80005f8 <__aeabi_dmul>
 800bede:	a376      	add	r3, pc, #472	; (adr r3, 800c0b8 <__ieee754_pow+0x720>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f7f4 f9d2 	bl	800028c <__adddf3>
 800bee8:	4622      	mov	r2, r4
 800beea:	462b      	mov	r3, r5
 800beec:	f7f4 fb84 	bl	80005f8 <__aeabi_dmul>
 800bef0:	a373      	add	r3, pc, #460	; (adr r3, 800c0c0 <__ieee754_pow+0x728>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	f7f4 f9c9 	bl	800028c <__adddf3>
 800befa:	4622      	mov	r2, r4
 800befc:	462b      	mov	r3, r5
 800befe:	f7f4 fb7b 	bl	80005f8 <__aeabi_dmul>
 800bf02:	a371      	add	r3, pc, #452	; (adr r3, 800c0c8 <__ieee754_pow+0x730>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 f9c0 	bl	800028c <__adddf3>
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4606      	mov	r6, r0
 800bf10:	460f      	mov	r7, r1
 800bf12:	462b      	mov	r3, r5
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f7f4 fb6e 	bl	80005f8 <__aeabi_dmul>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4630      	mov	r0, r6
 800bf22:	4639      	mov	r1, r7
 800bf24:	f7f4 fb68 	bl	80005f8 <__aeabi_dmul>
 800bf28:	4642      	mov	r2, r8
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	464b      	mov	r3, r9
 800bf30:	ec51 0b18 	vmov	r0, r1, d8
 800bf34:	f7f4 f9aa 	bl	800028c <__adddf3>
 800bf38:	ec53 2b19 	vmov	r2, r3, d9
 800bf3c:	f7f4 fb5c 	bl	80005f8 <__aeabi_dmul>
 800bf40:	4622      	mov	r2, r4
 800bf42:	462b      	mov	r3, r5
 800bf44:	f7f4 f9a2 	bl	800028c <__adddf3>
 800bf48:	4642      	mov	r2, r8
 800bf4a:	4682      	mov	sl, r0
 800bf4c:	468b      	mov	fp, r1
 800bf4e:	464b      	mov	r3, r9
 800bf50:	4640      	mov	r0, r8
 800bf52:	4649      	mov	r1, r9
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	4b6b      	ldr	r3, [pc, #428]	; (800c108 <__ieee754_pow+0x770>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	460f      	mov	r7, r1
 800bf60:	f7f4 f994 	bl	800028c <__adddf3>
 800bf64:	4652      	mov	r2, sl
 800bf66:	465b      	mov	r3, fp
 800bf68:	f7f4 f990 	bl	800028c <__adddf3>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	4604      	mov	r4, r0
 800bf70:	460d      	mov	r5, r1
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4640      	mov	r0, r8
 800bf78:	4649      	mov	r1, r9
 800bf7a:	f7f4 fb3d 	bl	80005f8 <__aeabi_dmul>
 800bf7e:	4b62      	ldr	r3, [pc, #392]	; (800c108 <__ieee754_pow+0x770>)
 800bf80:	4680      	mov	r8, r0
 800bf82:	4689      	mov	r9, r1
 800bf84:	2200      	movs	r2, #0
 800bf86:	4620      	mov	r0, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	f7f4 f97d 	bl	8000288 <__aeabi_dsub>
 800bf8e:	4632      	mov	r2, r6
 800bf90:	463b      	mov	r3, r7
 800bf92:	f7f4 f979 	bl	8000288 <__aeabi_dsub>
 800bf96:	4602      	mov	r2, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	4650      	mov	r0, sl
 800bf9c:	4659      	mov	r1, fp
 800bf9e:	f7f4 f973 	bl	8000288 <__aeabi_dsub>
 800bfa2:	ec53 2b18 	vmov	r2, r3, d8
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	4622      	mov	r2, r4
 800bfac:	4606      	mov	r6, r0
 800bfae:	460f      	mov	r7, r1
 800bfb0:	462b      	mov	r3, r5
 800bfb2:	ec51 0b19 	vmov	r0, r1, d9
 800bfb6:	f7f4 fb1f 	bl	80005f8 <__aeabi_dmul>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	f7f4 f963 	bl	800028c <__adddf3>
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	460f      	mov	r7, r1
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4640      	mov	r0, r8
 800bfd0:	4649      	mov	r1, r9
 800bfd2:	f7f4 f95b 	bl	800028c <__adddf3>
 800bfd6:	a33e      	add	r3, pc, #248	; (adr r3, 800c0d0 <__ieee754_pow+0x738>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	2000      	movs	r0, #0
 800bfde:	4604      	mov	r4, r0
 800bfe0:	460d      	mov	r5, r1
 800bfe2:	f7f4 fb09 	bl	80005f8 <__aeabi_dmul>
 800bfe6:	4642      	mov	r2, r8
 800bfe8:	ec41 0b18 	vmov	d8, r0, r1
 800bfec:	464b      	mov	r3, r9
 800bfee:	4620      	mov	r0, r4
 800bff0:	4629      	mov	r1, r5
 800bff2:	f7f4 f949 	bl	8000288 <__aeabi_dsub>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	4630      	mov	r0, r6
 800bffc:	4639      	mov	r1, r7
 800bffe:	f7f4 f943 	bl	8000288 <__aeabi_dsub>
 800c002:	a335      	add	r3, pc, #212	; (adr r3, 800c0d8 <__ieee754_pow+0x740>)
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	f7f4 faf6 	bl	80005f8 <__aeabi_dmul>
 800c00c:	a334      	add	r3, pc, #208	; (adr r3, 800c0e0 <__ieee754_pow+0x748>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	4606      	mov	r6, r0
 800c014:	460f      	mov	r7, r1
 800c016:	4620      	mov	r0, r4
 800c018:	4629      	mov	r1, r5
 800c01a:	f7f4 faed 	bl	80005f8 <__aeabi_dmul>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4630      	mov	r0, r6
 800c024:	4639      	mov	r1, r7
 800c026:	f7f4 f931 	bl	800028c <__adddf3>
 800c02a:	9a07      	ldr	r2, [sp, #28]
 800c02c:	4b37      	ldr	r3, [pc, #220]	; (800c10c <__ieee754_pow+0x774>)
 800c02e:	4413      	add	r3, r2
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f7f4 f92a 	bl	800028c <__adddf3>
 800c038:	4682      	mov	sl, r0
 800c03a:	9805      	ldr	r0, [sp, #20]
 800c03c:	468b      	mov	fp, r1
 800c03e:	f7f4 fa71 	bl	8000524 <__aeabi_i2d>
 800c042:	9a07      	ldr	r2, [sp, #28]
 800c044:	4b32      	ldr	r3, [pc, #200]	; (800c110 <__ieee754_pow+0x778>)
 800c046:	4413      	add	r3, r2
 800c048:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c04c:	4606      	mov	r6, r0
 800c04e:	460f      	mov	r7, r1
 800c050:	4652      	mov	r2, sl
 800c052:	465b      	mov	r3, fp
 800c054:	ec51 0b18 	vmov	r0, r1, d8
 800c058:	f7f4 f918 	bl	800028c <__adddf3>
 800c05c:	4642      	mov	r2, r8
 800c05e:	464b      	mov	r3, r9
 800c060:	f7f4 f914 	bl	800028c <__adddf3>
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	f7f4 f910 	bl	800028c <__adddf3>
 800c06c:	2000      	movs	r0, #0
 800c06e:	4632      	mov	r2, r6
 800c070:	463b      	mov	r3, r7
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	f7f4 f907 	bl	8000288 <__aeabi_dsub>
 800c07a:	4642      	mov	r2, r8
 800c07c:	464b      	mov	r3, r9
 800c07e:	f7f4 f903 	bl	8000288 <__aeabi_dsub>
 800c082:	ec53 2b18 	vmov	r2, r3, d8
 800c086:	f7f4 f8ff 	bl	8000288 <__aeabi_dsub>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	4650      	mov	r0, sl
 800c090:	4659      	mov	r1, fp
 800c092:	e610      	b.n	800bcb6 <__ieee754_pow+0x31e>
 800c094:	2401      	movs	r4, #1
 800c096:	e6a1      	b.n	800bddc <__ieee754_pow+0x444>
 800c098:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c0e8 <__ieee754_pow+0x750>
 800c09c:	e617      	b.n	800bcce <__ieee754_pow+0x336>
 800c09e:	bf00      	nop
 800c0a0:	4a454eef 	.word	0x4a454eef
 800c0a4:	3fca7e28 	.word	0x3fca7e28
 800c0a8:	93c9db65 	.word	0x93c9db65
 800c0ac:	3fcd864a 	.word	0x3fcd864a
 800c0b0:	a91d4101 	.word	0xa91d4101
 800c0b4:	3fd17460 	.word	0x3fd17460
 800c0b8:	518f264d 	.word	0x518f264d
 800c0bc:	3fd55555 	.word	0x3fd55555
 800c0c0:	db6fabff 	.word	0xdb6fabff
 800c0c4:	3fdb6db6 	.word	0x3fdb6db6
 800c0c8:	33333303 	.word	0x33333303
 800c0cc:	3fe33333 	.word	0x3fe33333
 800c0d0:	e0000000 	.word	0xe0000000
 800c0d4:	3feec709 	.word	0x3feec709
 800c0d8:	dc3a03fd 	.word	0xdc3a03fd
 800c0dc:	3feec709 	.word	0x3feec709
 800c0e0:	145b01f5 	.word	0x145b01f5
 800c0e4:	be3e2fe0 	.word	0xbe3e2fe0
 800c0e8:	00000000 	.word	0x00000000
 800c0ec:	3ff00000 	.word	0x3ff00000
 800c0f0:	7ff00000 	.word	0x7ff00000
 800c0f4:	43400000 	.word	0x43400000
 800c0f8:	0003988e 	.word	0x0003988e
 800c0fc:	000bb679 	.word	0x000bb679
 800c100:	0800dd40 	.word	0x0800dd40
 800c104:	3ff00000 	.word	0x3ff00000
 800c108:	40080000 	.word	0x40080000
 800c10c:	0800dd60 	.word	0x0800dd60
 800c110:	0800dd50 	.word	0x0800dd50
 800c114:	a3b5      	add	r3, pc, #724	; (adr r3, 800c3ec <__ieee754_pow+0xa54>)
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	4640      	mov	r0, r8
 800c11c:	4649      	mov	r1, r9
 800c11e:	f7f4 f8b5 	bl	800028c <__adddf3>
 800c122:	4622      	mov	r2, r4
 800c124:	ec41 0b1a 	vmov	d10, r0, r1
 800c128:	462b      	mov	r3, r5
 800c12a:	4630      	mov	r0, r6
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 f8ab 	bl	8000288 <__aeabi_dsub>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	ec51 0b1a 	vmov	r0, r1, d10
 800c13a:	f7f4 fced 	bl	8000b18 <__aeabi_dcmpgt>
 800c13e:	2800      	cmp	r0, #0
 800c140:	f47f ae04 	bne.w	800bd4c <__ieee754_pow+0x3b4>
 800c144:	4aa4      	ldr	r2, [pc, #656]	; (800c3d8 <__ieee754_pow+0xa40>)
 800c146:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c14a:	4293      	cmp	r3, r2
 800c14c:	f340 8108 	ble.w	800c360 <__ieee754_pow+0x9c8>
 800c150:	151b      	asrs	r3, r3, #20
 800c152:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c156:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c15a:	fa4a f303 	asr.w	r3, sl, r3
 800c15e:	445b      	add	r3, fp
 800c160:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c164:	4e9d      	ldr	r6, [pc, #628]	; (800c3dc <__ieee754_pow+0xa44>)
 800c166:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c16a:	4116      	asrs	r6, r2
 800c16c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c170:	2000      	movs	r0, #0
 800c172:	ea23 0106 	bic.w	r1, r3, r6
 800c176:	f1c2 0214 	rsb	r2, r2, #20
 800c17a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c17e:	fa4a fa02 	asr.w	sl, sl, r2
 800c182:	f1bb 0f00 	cmp.w	fp, #0
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4620      	mov	r0, r4
 800c18c:	4629      	mov	r1, r5
 800c18e:	bfb8      	it	lt
 800c190:	f1ca 0a00 	rsblt	sl, sl, #0
 800c194:	f7f4 f878 	bl	8000288 <__aeabi_dsub>
 800c198:	ec41 0b19 	vmov	d9, r0, r1
 800c19c:	4642      	mov	r2, r8
 800c19e:	464b      	mov	r3, r9
 800c1a0:	ec51 0b19 	vmov	r0, r1, d9
 800c1a4:	f7f4 f872 	bl	800028c <__adddf3>
 800c1a8:	a37b      	add	r3, pc, #492	; (adr r3, 800c398 <__ieee754_pow+0xa00>)
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	460d      	mov	r5, r1
 800c1b4:	f7f4 fa20 	bl	80005f8 <__aeabi_dmul>
 800c1b8:	ec53 2b19 	vmov	r2, r3, d9
 800c1bc:	4606      	mov	r6, r0
 800c1be:	460f      	mov	r7, r1
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	f7f4 f860 	bl	8000288 <__aeabi_dsub>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	f7f4 f85a 	bl	8000288 <__aeabi_dsub>
 800c1d4:	a372      	add	r3, pc, #456	; (adr r3, 800c3a0 <__ieee754_pow+0xa08>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f4 fa0d 	bl	80005f8 <__aeabi_dmul>
 800c1de:	a372      	add	r3, pc, #456	; (adr r3, 800c3a8 <__ieee754_pow+0xa10>)
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	4689      	mov	r9, r1
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	f7f4 fa04 	bl	80005f8 <__aeabi_dmul>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	4649      	mov	r1, r9
 800c1f8:	f7f4 f848 	bl	800028c <__adddf3>
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4630      	mov	r0, r6
 800c206:	4639      	mov	r1, r7
 800c208:	f7f4 f840 	bl	800028c <__adddf3>
 800c20c:	4632      	mov	r2, r6
 800c20e:	463b      	mov	r3, r7
 800c210:	4680      	mov	r8, r0
 800c212:	4689      	mov	r9, r1
 800c214:	f7f4 f838 	bl	8000288 <__aeabi_dsub>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4620      	mov	r0, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 f832 	bl	8000288 <__aeabi_dsub>
 800c224:	4642      	mov	r2, r8
 800c226:	4606      	mov	r6, r0
 800c228:	460f      	mov	r7, r1
 800c22a:	464b      	mov	r3, r9
 800c22c:	4640      	mov	r0, r8
 800c22e:	4649      	mov	r1, r9
 800c230:	f7f4 f9e2 	bl	80005f8 <__aeabi_dmul>
 800c234:	a35e      	add	r3, pc, #376	; (adr r3, 800c3b0 <__ieee754_pow+0xa18>)
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	4604      	mov	r4, r0
 800c23c:	460d      	mov	r5, r1
 800c23e:	f7f4 f9db 	bl	80005f8 <__aeabi_dmul>
 800c242:	a35d      	add	r3, pc, #372	; (adr r3, 800c3b8 <__ieee754_pow+0xa20>)
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	f7f4 f81e 	bl	8000288 <__aeabi_dsub>
 800c24c:	4622      	mov	r2, r4
 800c24e:	462b      	mov	r3, r5
 800c250:	f7f4 f9d2 	bl	80005f8 <__aeabi_dmul>
 800c254:	a35a      	add	r3, pc, #360	; (adr r3, 800c3c0 <__ieee754_pow+0xa28>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	f7f4 f817 	bl	800028c <__adddf3>
 800c25e:	4622      	mov	r2, r4
 800c260:	462b      	mov	r3, r5
 800c262:	f7f4 f9c9 	bl	80005f8 <__aeabi_dmul>
 800c266:	a358      	add	r3, pc, #352	; (adr r3, 800c3c8 <__ieee754_pow+0xa30>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	f7f4 f80c 	bl	8000288 <__aeabi_dsub>
 800c270:	4622      	mov	r2, r4
 800c272:	462b      	mov	r3, r5
 800c274:	f7f4 f9c0 	bl	80005f8 <__aeabi_dmul>
 800c278:	a355      	add	r3, pc, #340	; (adr r3, 800c3d0 <__ieee754_pow+0xa38>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f805 	bl	800028c <__adddf3>
 800c282:	4622      	mov	r2, r4
 800c284:	462b      	mov	r3, r5
 800c286:	f7f4 f9b7 	bl	80005f8 <__aeabi_dmul>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f7f3 fff9 	bl	8000288 <__aeabi_dsub>
 800c296:	4604      	mov	r4, r0
 800c298:	460d      	mov	r5, r1
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	4640      	mov	r0, r8
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	f7f4 f9a9 	bl	80005f8 <__aeabi_dmul>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	ec41 0b19 	vmov	d9, r0, r1
 800c2ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	f7f3 ffe8 	bl	8000288 <__aeabi_dsub>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	ec51 0b19 	vmov	r0, r1, d9
 800c2c0:	f7f4 fac4 	bl	800084c <__aeabi_ddiv>
 800c2c4:	4632      	mov	r2, r6
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	463b      	mov	r3, r7
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	f7f4 f992 	bl	80005f8 <__aeabi_dmul>
 800c2d4:	4632      	mov	r2, r6
 800c2d6:	463b      	mov	r3, r7
 800c2d8:	f7f3 ffd8 	bl	800028c <__adddf3>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	f7f3 ffd0 	bl	8000288 <__aeabi_dsub>
 800c2e8:	4642      	mov	r2, r8
 800c2ea:	464b      	mov	r3, r9
 800c2ec:	f7f3 ffcc 	bl	8000288 <__aeabi_dsub>
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	493a      	ldr	r1, [pc, #232]	; (800c3e0 <__ieee754_pow+0xa48>)
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	f7f3 ffc6 	bl	8000288 <__aeabi_dsub>
 800c2fc:	ec41 0b10 	vmov	d0, r0, r1
 800c300:	ee10 3a90 	vmov	r3, s1
 800c304:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c30c:	da2b      	bge.n	800c366 <__ieee754_pow+0x9ce>
 800c30e:	4650      	mov	r0, sl
 800c310:	f001 fbc6 	bl	800daa0 <scalbn>
 800c314:	ec51 0b10 	vmov	r0, r1, d0
 800c318:	ec53 2b18 	vmov	r2, r3, d8
 800c31c:	f7ff bbed 	b.w	800bafa <__ieee754_pow+0x162>
 800c320:	4b30      	ldr	r3, [pc, #192]	; (800c3e4 <__ieee754_pow+0xa4c>)
 800c322:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c326:	429e      	cmp	r6, r3
 800c328:	f77f af0c 	ble.w	800c144 <__ieee754_pow+0x7ac>
 800c32c:	4b2e      	ldr	r3, [pc, #184]	; (800c3e8 <__ieee754_pow+0xa50>)
 800c32e:	440b      	add	r3, r1
 800c330:	4303      	orrs	r3, r0
 800c332:	d009      	beq.n	800c348 <__ieee754_pow+0x9b0>
 800c334:	ec51 0b18 	vmov	r0, r1, d8
 800c338:	2200      	movs	r2, #0
 800c33a:	2300      	movs	r3, #0
 800c33c:	f7f4 fbce 	bl	8000adc <__aeabi_dcmplt>
 800c340:	3800      	subs	r0, #0
 800c342:	bf18      	it	ne
 800c344:	2001      	movne	r0, #1
 800c346:	e447      	b.n	800bbd8 <__ieee754_pow+0x240>
 800c348:	4622      	mov	r2, r4
 800c34a:	462b      	mov	r3, r5
 800c34c:	f7f3 ff9c 	bl	8000288 <__aeabi_dsub>
 800c350:	4642      	mov	r2, r8
 800c352:	464b      	mov	r3, r9
 800c354:	f7f4 fbd6 	bl	8000b04 <__aeabi_dcmpge>
 800c358:	2800      	cmp	r0, #0
 800c35a:	f43f aef3 	beq.w	800c144 <__ieee754_pow+0x7ac>
 800c35e:	e7e9      	b.n	800c334 <__ieee754_pow+0x99c>
 800c360:	f04f 0a00 	mov.w	sl, #0
 800c364:	e71a      	b.n	800c19c <__ieee754_pow+0x804>
 800c366:	ec51 0b10 	vmov	r0, r1, d0
 800c36a:	4619      	mov	r1, r3
 800c36c:	e7d4      	b.n	800c318 <__ieee754_pow+0x980>
 800c36e:	491c      	ldr	r1, [pc, #112]	; (800c3e0 <__ieee754_pow+0xa48>)
 800c370:	2000      	movs	r0, #0
 800c372:	f7ff bb30 	b.w	800b9d6 <__ieee754_pow+0x3e>
 800c376:	2000      	movs	r0, #0
 800c378:	2100      	movs	r1, #0
 800c37a:	f7ff bb2c 	b.w	800b9d6 <__ieee754_pow+0x3e>
 800c37e:	4630      	mov	r0, r6
 800c380:	4639      	mov	r1, r7
 800c382:	f7ff bb28 	b.w	800b9d6 <__ieee754_pow+0x3e>
 800c386:	9204      	str	r2, [sp, #16]
 800c388:	f7ff bb7a 	b.w	800ba80 <__ieee754_pow+0xe8>
 800c38c:	2300      	movs	r3, #0
 800c38e:	f7ff bb64 	b.w	800ba5a <__ieee754_pow+0xc2>
 800c392:	bf00      	nop
 800c394:	f3af 8000 	nop.w
 800c398:	00000000 	.word	0x00000000
 800c39c:	3fe62e43 	.word	0x3fe62e43
 800c3a0:	fefa39ef 	.word	0xfefa39ef
 800c3a4:	3fe62e42 	.word	0x3fe62e42
 800c3a8:	0ca86c39 	.word	0x0ca86c39
 800c3ac:	be205c61 	.word	0xbe205c61
 800c3b0:	72bea4d0 	.word	0x72bea4d0
 800c3b4:	3e663769 	.word	0x3e663769
 800c3b8:	c5d26bf1 	.word	0xc5d26bf1
 800c3bc:	3ebbbd41 	.word	0x3ebbbd41
 800c3c0:	af25de2c 	.word	0xaf25de2c
 800c3c4:	3f11566a 	.word	0x3f11566a
 800c3c8:	16bebd93 	.word	0x16bebd93
 800c3cc:	3f66c16c 	.word	0x3f66c16c
 800c3d0:	5555553e 	.word	0x5555553e
 800c3d4:	3fc55555 	.word	0x3fc55555
 800c3d8:	3fe00000 	.word	0x3fe00000
 800c3dc:	000fffff 	.word	0x000fffff
 800c3e0:	3ff00000 	.word	0x3ff00000
 800c3e4:	4090cbff 	.word	0x4090cbff
 800c3e8:	3f6f3400 	.word	0x3f6f3400
 800c3ec:	652b82fe 	.word	0x652b82fe
 800c3f0:	3c971547 	.word	0x3c971547
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <__ieee754_rem_pio2>:
 800c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fc:	ed2d 8b02 	vpush	{d8}
 800c400:	ec55 4b10 	vmov	r4, r5, d0
 800c404:	4bca      	ldr	r3, [pc, #808]	; (800c730 <__ieee754_rem_pio2+0x338>)
 800c406:	b08b      	sub	sp, #44	; 0x2c
 800c408:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c40c:	4598      	cmp	r8, r3
 800c40e:	4682      	mov	sl, r0
 800c410:	9502      	str	r5, [sp, #8]
 800c412:	dc08      	bgt.n	800c426 <__ieee754_rem_pio2+0x2e>
 800c414:	2200      	movs	r2, #0
 800c416:	2300      	movs	r3, #0
 800c418:	ed80 0b00 	vstr	d0, [r0]
 800c41c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c420:	f04f 0b00 	mov.w	fp, #0
 800c424:	e028      	b.n	800c478 <__ieee754_rem_pio2+0x80>
 800c426:	4bc3      	ldr	r3, [pc, #780]	; (800c734 <__ieee754_rem_pio2+0x33c>)
 800c428:	4598      	cmp	r8, r3
 800c42a:	dc78      	bgt.n	800c51e <__ieee754_rem_pio2+0x126>
 800c42c:	9b02      	ldr	r3, [sp, #8]
 800c42e:	4ec2      	ldr	r6, [pc, #776]	; (800c738 <__ieee754_rem_pio2+0x340>)
 800c430:	2b00      	cmp	r3, #0
 800c432:	ee10 0a10 	vmov	r0, s0
 800c436:	a3b0      	add	r3, pc, #704	; (adr r3, 800c6f8 <__ieee754_rem_pio2+0x300>)
 800c438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43c:	4629      	mov	r1, r5
 800c43e:	dd39      	ble.n	800c4b4 <__ieee754_rem_pio2+0xbc>
 800c440:	f7f3 ff22 	bl	8000288 <__aeabi_dsub>
 800c444:	45b0      	cmp	r8, r6
 800c446:	4604      	mov	r4, r0
 800c448:	460d      	mov	r5, r1
 800c44a:	d01b      	beq.n	800c484 <__ieee754_rem_pio2+0x8c>
 800c44c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c700 <__ieee754_rem_pio2+0x308>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f3 ff19 	bl	8000288 <__aeabi_dsub>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	e9ca 2300 	strd	r2, r3, [sl]
 800c45e:	4620      	mov	r0, r4
 800c460:	4629      	mov	r1, r5
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	a3a6      	add	r3, pc, #664	; (adr r3, 800c700 <__ieee754_rem_pio2+0x308>)
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	f7f3 ff0c 	bl	8000288 <__aeabi_dsub>
 800c470:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c474:	f04f 0b01 	mov.w	fp, #1
 800c478:	4658      	mov	r0, fp
 800c47a:	b00b      	add	sp, #44	; 0x2c
 800c47c:	ecbd 8b02 	vpop	{d8}
 800c480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c484:	a3a0      	add	r3, pc, #640	; (adr r3, 800c708 <__ieee754_rem_pio2+0x310>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f3 fefd 	bl	8000288 <__aeabi_dsub>
 800c48e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c710 <__ieee754_rem_pio2+0x318>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	4604      	mov	r4, r0
 800c496:	460d      	mov	r5, r1
 800c498:	f7f3 fef6 	bl	8000288 <__aeabi_dsub>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	e9ca 2300 	strd	r2, r3, [sl]
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f3 feee 	bl	8000288 <__aeabi_dsub>
 800c4ac:	a398      	add	r3, pc, #608	; (adr r3, 800c710 <__ieee754_rem_pio2+0x318>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	e7db      	b.n	800c46c <__ieee754_rem_pio2+0x74>
 800c4b4:	f7f3 feea 	bl	800028c <__adddf3>
 800c4b8:	45b0      	cmp	r8, r6
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	460d      	mov	r5, r1
 800c4be:	d016      	beq.n	800c4ee <__ieee754_rem_pio2+0xf6>
 800c4c0:	a38f      	add	r3, pc, #572	; (adr r3, 800c700 <__ieee754_rem_pio2+0x308>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	f7f3 fee1 	bl	800028c <__adddf3>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	e9ca 2300 	strd	r2, r3, [sl]
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f7f3 fed7 	bl	8000288 <__aeabi_dsub>
 800c4da:	a389      	add	r3, pc, #548	; (adr r3, 800c700 <__ieee754_rem_pio2+0x308>)
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f7f3 fed4 	bl	800028c <__adddf3>
 800c4e4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c4e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c4ec:	e7c4      	b.n	800c478 <__ieee754_rem_pio2+0x80>
 800c4ee:	a386      	add	r3, pc, #536	; (adr r3, 800c708 <__ieee754_rem_pio2+0x310>)
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	f7f3 feca 	bl	800028c <__adddf3>
 800c4f8:	a385      	add	r3, pc, #532	; (adr r3, 800c710 <__ieee754_rem_pio2+0x318>)
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	4604      	mov	r4, r0
 800c500:	460d      	mov	r5, r1
 800c502:	f7f3 fec3 	bl	800028c <__adddf3>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	e9ca 2300 	strd	r2, r3, [sl]
 800c50e:	4620      	mov	r0, r4
 800c510:	4629      	mov	r1, r5
 800c512:	f7f3 feb9 	bl	8000288 <__aeabi_dsub>
 800c516:	a37e      	add	r3, pc, #504	; (adr r3, 800c710 <__ieee754_rem_pio2+0x318>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	e7e0      	b.n	800c4e0 <__ieee754_rem_pio2+0xe8>
 800c51e:	4b87      	ldr	r3, [pc, #540]	; (800c73c <__ieee754_rem_pio2+0x344>)
 800c520:	4598      	cmp	r8, r3
 800c522:	f300 80d9 	bgt.w	800c6d8 <__ieee754_rem_pio2+0x2e0>
 800c526:	f001 fa1f 	bl	800d968 <fabs>
 800c52a:	ec55 4b10 	vmov	r4, r5, d0
 800c52e:	ee10 0a10 	vmov	r0, s0
 800c532:	a379      	add	r3, pc, #484	; (adr r3, 800c718 <__ieee754_rem_pio2+0x320>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f4 f85d 	bl	80005f8 <__aeabi_dmul>
 800c53e:	4b80      	ldr	r3, [pc, #512]	; (800c740 <__ieee754_rem_pio2+0x348>)
 800c540:	2200      	movs	r2, #0
 800c542:	f7f3 fea3 	bl	800028c <__adddf3>
 800c546:	f7f4 fb07 	bl	8000b58 <__aeabi_d2iz>
 800c54a:	4683      	mov	fp, r0
 800c54c:	f7f3 ffea 	bl	8000524 <__aeabi_i2d>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	ec43 2b18 	vmov	d8, r2, r3
 800c558:	a367      	add	r3, pc, #412	; (adr r3, 800c6f8 <__ieee754_rem_pio2+0x300>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	f7f4 f84b 	bl	80005f8 <__aeabi_dmul>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4620      	mov	r0, r4
 800c568:	4629      	mov	r1, r5
 800c56a:	f7f3 fe8d 	bl	8000288 <__aeabi_dsub>
 800c56e:	a364      	add	r3, pc, #400	; (adr r3, 800c700 <__ieee754_rem_pio2+0x308>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	ec51 0b18 	vmov	r0, r1, d8
 800c57c:	f7f4 f83c 	bl	80005f8 <__aeabi_dmul>
 800c580:	f1bb 0f1f 	cmp.w	fp, #31
 800c584:	4604      	mov	r4, r0
 800c586:	460d      	mov	r5, r1
 800c588:	dc0d      	bgt.n	800c5a6 <__ieee754_rem_pio2+0x1ae>
 800c58a:	4b6e      	ldr	r3, [pc, #440]	; (800c744 <__ieee754_rem_pio2+0x34c>)
 800c58c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c594:	4543      	cmp	r3, r8
 800c596:	d006      	beq.n	800c5a6 <__ieee754_rem_pio2+0x1ae>
 800c598:	4622      	mov	r2, r4
 800c59a:	462b      	mov	r3, r5
 800c59c:	4630      	mov	r0, r6
 800c59e:	4639      	mov	r1, r7
 800c5a0:	f7f3 fe72 	bl	8000288 <__aeabi_dsub>
 800c5a4:	e00f      	b.n	800c5c6 <__ieee754_rem_pio2+0x1ce>
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	f7f3 fe6b 	bl	8000288 <__aeabi_dsub>
 800c5b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c5b6:	9303      	str	r3, [sp, #12]
 800c5b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c5bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c5c0:	f1b8 0f10 	cmp.w	r8, #16
 800c5c4:	dc02      	bgt.n	800c5cc <__ieee754_rem_pio2+0x1d4>
 800c5c6:	e9ca 0100 	strd	r0, r1, [sl]
 800c5ca:	e039      	b.n	800c640 <__ieee754_rem_pio2+0x248>
 800c5cc:	a34e      	add	r3, pc, #312	; (adr r3, 800c708 <__ieee754_rem_pio2+0x310>)
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	ec51 0b18 	vmov	r0, r1, d8
 800c5d6:	f7f4 f80f 	bl	80005f8 <__aeabi_dmul>
 800c5da:	4604      	mov	r4, r0
 800c5dc:	460d      	mov	r5, r1
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	f7f3 fe4f 	bl	8000288 <__aeabi_dsub>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	4689      	mov	r9, r1
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	f7f3 fe47 	bl	8000288 <__aeabi_dsub>
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	f7f3 fe43 	bl	8000288 <__aeabi_dsub>
 800c602:	a343      	add	r3, pc, #268	; (adr r3, 800c710 <__ieee754_rem_pio2+0x318>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	4604      	mov	r4, r0
 800c60a:	460d      	mov	r5, r1
 800c60c:	ec51 0b18 	vmov	r0, r1, d8
 800c610:	f7f3 fff2 	bl	80005f8 <__aeabi_dmul>
 800c614:	4622      	mov	r2, r4
 800c616:	462b      	mov	r3, r5
 800c618:	f7f3 fe36 	bl	8000288 <__aeabi_dsub>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4604      	mov	r4, r0
 800c622:	460d      	mov	r5, r1
 800c624:	4640      	mov	r0, r8
 800c626:	4649      	mov	r1, r9
 800c628:	f7f3 fe2e 	bl	8000288 <__aeabi_dsub>
 800c62c:	9a03      	ldr	r2, [sp, #12]
 800c62e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	2b31      	cmp	r3, #49	; 0x31
 800c636:	dc24      	bgt.n	800c682 <__ieee754_rem_pio2+0x28a>
 800c638:	e9ca 0100 	strd	r0, r1, [sl]
 800c63c:	4646      	mov	r6, r8
 800c63e:	464f      	mov	r7, r9
 800c640:	e9da 8900 	ldrd	r8, r9, [sl]
 800c644:	4630      	mov	r0, r6
 800c646:	4642      	mov	r2, r8
 800c648:	464b      	mov	r3, r9
 800c64a:	4639      	mov	r1, r7
 800c64c:	f7f3 fe1c 	bl	8000288 <__aeabi_dsub>
 800c650:	462b      	mov	r3, r5
 800c652:	4622      	mov	r2, r4
 800c654:	f7f3 fe18 	bl	8000288 <__aeabi_dsub>
 800c658:	9b02      	ldr	r3, [sp, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c660:	f6bf af0a 	bge.w	800c478 <__ieee754_rem_pio2+0x80>
 800c664:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c668:	f8ca 3004 	str.w	r3, [sl, #4]
 800c66c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c670:	f8ca 8000 	str.w	r8, [sl]
 800c674:	f8ca 0008 	str.w	r0, [sl, #8]
 800c678:	f8ca 300c 	str.w	r3, [sl, #12]
 800c67c:	f1cb 0b00 	rsb	fp, fp, #0
 800c680:	e6fa      	b.n	800c478 <__ieee754_rem_pio2+0x80>
 800c682:	a327      	add	r3, pc, #156	; (adr r3, 800c720 <__ieee754_rem_pio2+0x328>)
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	ec51 0b18 	vmov	r0, r1, d8
 800c68c:	f7f3 ffb4 	bl	80005f8 <__aeabi_dmul>
 800c690:	4604      	mov	r4, r0
 800c692:	460d      	mov	r5, r1
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4640      	mov	r0, r8
 800c69a:	4649      	mov	r1, r9
 800c69c:	f7f3 fdf4 	bl	8000288 <__aeabi_dsub>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	460f      	mov	r7, r1
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	f7f3 fdec 	bl	8000288 <__aeabi_dsub>
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	462b      	mov	r3, r5
 800c6b4:	f7f3 fde8 	bl	8000288 <__aeabi_dsub>
 800c6b8:	a31b      	add	r3, pc, #108	; (adr r3, 800c728 <__ieee754_rem_pio2+0x330>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	ec51 0b18 	vmov	r0, r1, d8
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	462b      	mov	r3, r5
 800c6ce:	f7f3 fddb 	bl	8000288 <__aeabi_dsub>
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	e75f      	b.n	800c598 <__ieee754_rem_pio2+0x1a0>
 800c6d8:	4b1b      	ldr	r3, [pc, #108]	; (800c748 <__ieee754_rem_pio2+0x350>)
 800c6da:	4598      	cmp	r8, r3
 800c6dc:	dd36      	ble.n	800c74c <__ieee754_rem_pio2+0x354>
 800c6de:	ee10 2a10 	vmov	r2, s0
 800c6e2:	462b      	mov	r3, r5
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f7f3 fdce 	bl	8000288 <__aeabi_dsub>
 800c6ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6f0:	e9ca 0100 	strd	r0, r1, [sl]
 800c6f4:	e694      	b.n	800c420 <__ieee754_rem_pio2+0x28>
 800c6f6:	bf00      	nop
 800c6f8:	54400000 	.word	0x54400000
 800c6fc:	3ff921fb 	.word	0x3ff921fb
 800c700:	1a626331 	.word	0x1a626331
 800c704:	3dd0b461 	.word	0x3dd0b461
 800c708:	1a600000 	.word	0x1a600000
 800c70c:	3dd0b461 	.word	0x3dd0b461
 800c710:	2e037073 	.word	0x2e037073
 800c714:	3ba3198a 	.word	0x3ba3198a
 800c718:	6dc9c883 	.word	0x6dc9c883
 800c71c:	3fe45f30 	.word	0x3fe45f30
 800c720:	2e000000 	.word	0x2e000000
 800c724:	3ba3198a 	.word	0x3ba3198a
 800c728:	252049c1 	.word	0x252049c1
 800c72c:	397b839a 	.word	0x397b839a
 800c730:	3fe921fb 	.word	0x3fe921fb
 800c734:	4002d97b 	.word	0x4002d97b
 800c738:	3ff921fb 	.word	0x3ff921fb
 800c73c:	413921fb 	.word	0x413921fb
 800c740:	3fe00000 	.word	0x3fe00000
 800c744:	0800dd70 	.word	0x0800dd70
 800c748:	7fefffff 	.word	0x7fefffff
 800c74c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c750:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c754:	ee10 0a10 	vmov	r0, s0
 800c758:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c75c:	ee10 6a10 	vmov	r6, s0
 800c760:	460f      	mov	r7, r1
 800c762:	f7f4 f9f9 	bl	8000b58 <__aeabi_d2iz>
 800c766:	f7f3 fedd 	bl	8000524 <__aeabi_i2d>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4630      	mov	r0, r6
 800c770:	4639      	mov	r1, r7
 800c772:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c776:	f7f3 fd87 	bl	8000288 <__aeabi_dsub>
 800c77a:	4b23      	ldr	r3, [pc, #140]	; (800c808 <__ieee754_rem_pio2+0x410>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	f7f3 ff3b 	bl	80005f8 <__aeabi_dmul>
 800c782:	460f      	mov	r7, r1
 800c784:	4606      	mov	r6, r0
 800c786:	f7f4 f9e7 	bl	8000b58 <__aeabi_d2iz>
 800c78a:	f7f3 fecb 	bl	8000524 <__aeabi_i2d>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4630      	mov	r0, r6
 800c794:	4639      	mov	r1, r7
 800c796:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c79a:	f7f3 fd75 	bl	8000288 <__aeabi_dsub>
 800c79e:	4b1a      	ldr	r3, [pc, #104]	; (800c808 <__ieee754_rem_pio2+0x410>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f7f3 ff29 	bl	80005f8 <__aeabi_dmul>
 800c7a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c7aa:	ad04      	add	r5, sp, #16
 800c7ac:	f04f 0803 	mov.w	r8, #3
 800c7b0:	46a9      	mov	r9, r5
 800c7b2:	2600      	movs	r6, #0
 800c7b4:	2700      	movs	r7, #0
 800c7b6:	4632      	mov	r2, r6
 800c7b8:	463b      	mov	r3, r7
 800c7ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c7be:	46c3      	mov	fp, r8
 800c7c0:	3d08      	subs	r5, #8
 800c7c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c7c6:	f7f4 f97f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1f3      	bne.n	800c7b6 <__ieee754_rem_pio2+0x3be>
 800c7ce:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <__ieee754_rem_pio2+0x414>)
 800c7d0:	9301      	str	r3, [sp, #4]
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	465b      	mov	r3, fp
 800c7da:	4651      	mov	r1, sl
 800c7dc:	4648      	mov	r0, r9
 800c7de:	f000 fc63 	bl	800d0a8 <__kernel_rem_pio2>
 800c7e2:	9b02      	ldr	r3, [sp, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	4683      	mov	fp, r0
 800c7e8:	f6bf ae46 	bge.w	800c478 <__ieee754_rem_pio2+0x80>
 800c7ec:	e9da 2100 	ldrd	r2, r1, [sl]
 800c7f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7f4:	e9ca 2300 	strd	r2, r3, [sl]
 800c7f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c7fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c800:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c804:	e73a      	b.n	800c67c <__ieee754_rem_pio2+0x284>
 800c806:	bf00      	nop
 800c808:	41700000 	.word	0x41700000
 800c80c:	0800ddf0 	.word	0x0800ddf0

0800c810 <__ieee754_sqrt>:
 800c810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c814:	ec55 4b10 	vmov	r4, r5, d0
 800c818:	4e55      	ldr	r6, [pc, #340]	; (800c970 <__ieee754_sqrt+0x160>)
 800c81a:	43ae      	bics	r6, r5
 800c81c:	ee10 0a10 	vmov	r0, s0
 800c820:	ee10 3a10 	vmov	r3, s0
 800c824:	462a      	mov	r2, r5
 800c826:	4629      	mov	r1, r5
 800c828:	d110      	bne.n	800c84c <__ieee754_sqrt+0x3c>
 800c82a:	ee10 2a10 	vmov	r2, s0
 800c82e:	462b      	mov	r3, r5
 800c830:	f7f3 fee2 	bl	80005f8 <__aeabi_dmul>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	4620      	mov	r0, r4
 800c83a:	4629      	mov	r1, r5
 800c83c:	f7f3 fd26 	bl	800028c <__adddf3>
 800c840:	4604      	mov	r4, r0
 800c842:	460d      	mov	r5, r1
 800c844:	ec45 4b10 	vmov	d0, r4, r5
 800c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84c:	2d00      	cmp	r5, #0
 800c84e:	dc10      	bgt.n	800c872 <__ieee754_sqrt+0x62>
 800c850:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c854:	4330      	orrs	r0, r6
 800c856:	d0f5      	beq.n	800c844 <__ieee754_sqrt+0x34>
 800c858:	b15d      	cbz	r5, 800c872 <__ieee754_sqrt+0x62>
 800c85a:	ee10 2a10 	vmov	r2, s0
 800c85e:	462b      	mov	r3, r5
 800c860:	ee10 0a10 	vmov	r0, s0
 800c864:	f7f3 fd10 	bl	8000288 <__aeabi_dsub>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	f7f3 ffee 	bl	800084c <__aeabi_ddiv>
 800c870:	e7e6      	b.n	800c840 <__ieee754_sqrt+0x30>
 800c872:	1512      	asrs	r2, r2, #20
 800c874:	d074      	beq.n	800c960 <__ieee754_sqrt+0x150>
 800c876:	07d4      	lsls	r4, r2, #31
 800c878:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c87c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c884:	bf5e      	ittt	pl
 800c886:	0fda      	lsrpl	r2, r3, #31
 800c888:	005b      	lslpl	r3, r3, #1
 800c88a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c88e:	2400      	movs	r4, #0
 800c890:	0fda      	lsrs	r2, r3, #31
 800c892:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c896:	107f      	asrs	r7, r7, #1
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	2516      	movs	r5, #22
 800c89c:	4620      	mov	r0, r4
 800c89e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c8a2:	1886      	adds	r6, r0, r2
 800c8a4:	428e      	cmp	r6, r1
 800c8a6:	bfde      	ittt	le
 800c8a8:	1b89      	suble	r1, r1, r6
 800c8aa:	18b0      	addle	r0, r6, r2
 800c8ac:	18a4      	addle	r4, r4, r2
 800c8ae:	0049      	lsls	r1, r1, #1
 800c8b0:	3d01      	subs	r5, #1
 800c8b2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c8b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c8ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8be:	d1f0      	bne.n	800c8a2 <__ieee754_sqrt+0x92>
 800c8c0:	462a      	mov	r2, r5
 800c8c2:	f04f 0e20 	mov.w	lr, #32
 800c8c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c8ca:	4281      	cmp	r1, r0
 800c8cc:	eb06 0c05 	add.w	ip, r6, r5
 800c8d0:	dc02      	bgt.n	800c8d8 <__ieee754_sqrt+0xc8>
 800c8d2:	d113      	bne.n	800c8fc <__ieee754_sqrt+0xec>
 800c8d4:	459c      	cmp	ip, r3
 800c8d6:	d811      	bhi.n	800c8fc <__ieee754_sqrt+0xec>
 800c8d8:	f1bc 0f00 	cmp.w	ip, #0
 800c8dc:	eb0c 0506 	add.w	r5, ip, r6
 800c8e0:	da43      	bge.n	800c96a <__ieee754_sqrt+0x15a>
 800c8e2:	2d00      	cmp	r5, #0
 800c8e4:	db41      	blt.n	800c96a <__ieee754_sqrt+0x15a>
 800c8e6:	f100 0801 	add.w	r8, r0, #1
 800c8ea:	1a09      	subs	r1, r1, r0
 800c8ec:	459c      	cmp	ip, r3
 800c8ee:	bf88      	it	hi
 800c8f0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800c8f4:	eba3 030c 	sub.w	r3, r3, ip
 800c8f8:	4432      	add	r2, r6
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c900:	f1be 0e01 	subs.w	lr, lr, #1
 800c904:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c90c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c910:	d1db      	bne.n	800c8ca <__ieee754_sqrt+0xba>
 800c912:	430b      	orrs	r3, r1
 800c914:	d006      	beq.n	800c924 <__ieee754_sqrt+0x114>
 800c916:	1c50      	adds	r0, r2, #1
 800c918:	bf13      	iteet	ne
 800c91a:	3201      	addne	r2, #1
 800c91c:	3401      	addeq	r4, #1
 800c91e:	4672      	moveq	r2, lr
 800c920:	f022 0201 	bicne.w	r2, r2, #1
 800c924:	1063      	asrs	r3, r4, #1
 800c926:	0852      	lsrs	r2, r2, #1
 800c928:	07e1      	lsls	r1, r4, #31
 800c92a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c92e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c932:	bf48      	it	mi
 800c934:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c938:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c93c:	4614      	mov	r4, r2
 800c93e:	e781      	b.n	800c844 <__ieee754_sqrt+0x34>
 800c940:	0ad9      	lsrs	r1, r3, #11
 800c942:	3815      	subs	r0, #21
 800c944:	055b      	lsls	r3, r3, #21
 800c946:	2900      	cmp	r1, #0
 800c948:	d0fa      	beq.n	800c940 <__ieee754_sqrt+0x130>
 800c94a:	02cd      	lsls	r5, r1, #11
 800c94c:	d50a      	bpl.n	800c964 <__ieee754_sqrt+0x154>
 800c94e:	f1c2 0420 	rsb	r4, r2, #32
 800c952:	fa23 f404 	lsr.w	r4, r3, r4
 800c956:	1e55      	subs	r5, r2, #1
 800c958:	4093      	lsls	r3, r2
 800c95a:	4321      	orrs	r1, r4
 800c95c:	1b42      	subs	r2, r0, r5
 800c95e:	e78a      	b.n	800c876 <__ieee754_sqrt+0x66>
 800c960:	4610      	mov	r0, r2
 800c962:	e7f0      	b.n	800c946 <__ieee754_sqrt+0x136>
 800c964:	0049      	lsls	r1, r1, #1
 800c966:	3201      	adds	r2, #1
 800c968:	e7ef      	b.n	800c94a <__ieee754_sqrt+0x13a>
 800c96a:	4680      	mov	r8, r0
 800c96c:	e7bd      	b.n	800c8ea <__ieee754_sqrt+0xda>
 800c96e:	bf00      	nop
 800c970:	7ff00000 	.word	0x7ff00000

0800c974 <__ieee754_powf>:
 800c974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c978:	ee10 4a90 	vmov	r4, s1
 800c97c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800c980:	ed2d 8b02 	vpush	{d8}
 800c984:	ee10 6a10 	vmov	r6, s0
 800c988:	eeb0 8a40 	vmov.f32	s16, s0
 800c98c:	eef0 8a60 	vmov.f32	s17, s1
 800c990:	d10c      	bne.n	800c9ac <__ieee754_powf+0x38>
 800c992:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c996:	0076      	lsls	r6, r6, #1
 800c998:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c99c:	f240 8296 	bls.w	800cecc <__ieee754_powf+0x558>
 800c9a0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c9a4:	ecbd 8b02 	vpop	{d8}
 800c9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c9b0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c9b4:	dcf4      	bgt.n	800c9a0 <__ieee754_powf+0x2c>
 800c9b6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c9ba:	dd08      	ble.n	800c9ce <__ieee754_powf+0x5a>
 800c9bc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800c9c0:	d1ee      	bne.n	800c9a0 <__ieee754_powf+0x2c>
 800c9c2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c9c6:	0064      	lsls	r4, r4, #1
 800c9c8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c9cc:	e7e6      	b.n	800c99c <__ieee754_powf+0x28>
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	da20      	bge.n	800ca14 <__ieee754_powf+0xa0>
 800c9d2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c9d6:	da2d      	bge.n	800ca34 <__ieee754_powf+0xc0>
 800c9d8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c9dc:	f2c0 827f 	blt.w	800cede <__ieee754_powf+0x56a>
 800c9e0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c9e4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c9e8:	fa48 f703 	asr.w	r7, r8, r3
 800c9ec:	fa07 f303 	lsl.w	r3, r7, r3
 800c9f0:	4543      	cmp	r3, r8
 800c9f2:	f040 8274 	bne.w	800cede <__ieee754_powf+0x56a>
 800c9f6:	f007 0701 	and.w	r7, r7, #1
 800c9fa:	f1c7 0702 	rsb	r7, r7, #2
 800c9fe:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ca02:	d11f      	bne.n	800ca44 <__ieee754_powf+0xd0>
 800ca04:	2c00      	cmp	r4, #0
 800ca06:	f280 8267 	bge.w	800ced8 <__ieee754_powf+0x564>
 800ca0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca0e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ca12:	e7c7      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ca14:	2700      	movs	r7, #0
 800ca16:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ca1a:	d1f0      	bne.n	800c9fe <__ieee754_powf+0x8a>
 800ca1c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ca20:	f000 8254 	beq.w	800cecc <__ieee754_powf+0x558>
 800ca24:	dd08      	ble.n	800ca38 <__ieee754_powf+0xc4>
 800ca26:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800cd30 <__ieee754_powf+0x3bc>
 800ca2a:	2c00      	cmp	r4, #0
 800ca2c:	bfa8      	it	ge
 800ca2e:	eeb0 0a68 	vmovge.f32	s0, s17
 800ca32:	e7b7      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ca34:	2702      	movs	r7, #2
 800ca36:	e7ee      	b.n	800ca16 <__ieee754_powf+0xa2>
 800ca38:	2c00      	cmp	r4, #0
 800ca3a:	f280 824a 	bge.w	800ced2 <__ieee754_powf+0x55e>
 800ca3e:	eeb1 0a68 	vneg.f32	s0, s17
 800ca42:	e7af      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ca44:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ca48:	d102      	bne.n	800ca50 <__ieee754_powf+0xdc>
 800ca4a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ca4e:	e7a9      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ca50:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ca54:	eeb0 0a48 	vmov.f32	s0, s16
 800ca58:	d107      	bne.n	800ca6a <__ieee754_powf+0xf6>
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	db05      	blt.n	800ca6a <__ieee754_powf+0xf6>
 800ca5e:	ecbd 8b02 	vpop	{d8}
 800ca62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	f000 ba53 	b.w	800cf10 <__ieee754_sqrtf>
 800ca6a:	f001 f89f 	bl	800dbac <fabsf>
 800ca6e:	b125      	cbz	r5, 800ca7a <__ieee754_powf+0x106>
 800ca70:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800ca74:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ca78:	d116      	bne.n	800caa8 <__ieee754_powf+0x134>
 800ca7a:	2c00      	cmp	r4, #0
 800ca7c:	bfbc      	itt	lt
 800ca7e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800ca82:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ca86:	2e00      	cmp	r6, #0
 800ca88:	da8c      	bge.n	800c9a4 <__ieee754_powf+0x30>
 800ca8a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800ca8e:	ea55 0307 	orrs.w	r3, r5, r7
 800ca92:	d104      	bne.n	800ca9e <__ieee754_powf+0x12a>
 800ca94:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ca98:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ca9c:	e782      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ca9e:	2f01      	cmp	r7, #1
 800caa0:	d180      	bne.n	800c9a4 <__ieee754_powf+0x30>
 800caa2:	eeb1 0a40 	vneg.f32	s0, s0
 800caa6:	e77d      	b.n	800c9a4 <__ieee754_powf+0x30>
 800caa8:	0ff0      	lsrs	r0, r6, #31
 800caaa:	3801      	subs	r0, #1
 800caac:	ea57 0300 	orrs.w	r3, r7, r0
 800cab0:	d104      	bne.n	800cabc <__ieee754_powf+0x148>
 800cab2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cab6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800caba:	e773      	b.n	800c9a4 <__ieee754_powf+0x30>
 800cabc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800cac0:	dd74      	ble.n	800cbac <__ieee754_powf+0x238>
 800cac2:	4b9c      	ldr	r3, [pc, #624]	; (800cd34 <__ieee754_powf+0x3c0>)
 800cac4:	429d      	cmp	r5, r3
 800cac6:	dc08      	bgt.n	800cada <__ieee754_powf+0x166>
 800cac8:	2c00      	cmp	r4, #0
 800caca:	da0b      	bge.n	800cae4 <__ieee754_powf+0x170>
 800cacc:	2000      	movs	r0, #0
 800cace:	ecbd 8b02 	vpop	{d8}
 800cad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cad6:	f000 bf41 	b.w	800d95c <__math_oflowf>
 800cada:	4b97      	ldr	r3, [pc, #604]	; (800cd38 <__ieee754_powf+0x3c4>)
 800cadc:	429d      	cmp	r5, r3
 800cade:	dd08      	ble.n	800caf2 <__ieee754_powf+0x17e>
 800cae0:	2c00      	cmp	r4, #0
 800cae2:	dcf3      	bgt.n	800cacc <__ieee754_powf+0x158>
 800cae4:	2000      	movs	r0, #0
 800cae6:	ecbd 8b02 	vpop	{d8}
 800caea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caee:	f000 bf2f 	b.w	800d950 <__math_uflowf>
 800caf2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800caf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cafa:	eddf 6a90 	vldr	s13, [pc, #576]	; 800cd3c <__ieee754_powf+0x3c8>
 800cafe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cb02:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cb06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cb0a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cb0e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb16:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cd40 <__ieee754_powf+0x3cc>
 800cb1a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800cb1e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800cd44 <__ieee754_powf+0x3d0>
 800cb22:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cb26:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800cd48 <__ieee754_powf+0x3d4>
 800cb2a:	eef0 6a67 	vmov.f32	s13, s15
 800cb2e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800cb32:	ee16 3a90 	vmov	r3, s13
 800cb36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cb3a:	f023 030f 	bic.w	r3, r3, #15
 800cb3e:	ee00 3a90 	vmov	s1, r3
 800cb42:	eee0 0a47 	vfms.f32	s1, s0, s14
 800cb46:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cb4a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800cb4e:	f024 040f 	bic.w	r4, r4, #15
 800cb52:	ee07 4a10 	vmov	s14, r4
 800cb56:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cb5a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cb66:	3f01      	subs	r7, #1
 800cb68:	ea57 0200 	orrs.w	r2, r7, r0
 800cb6c:	ee07 4a10 	vmov	s14, r4
 800cb70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb74:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cb78:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cb7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cb80:	ee17 4a10 	vmov	r4, s14
 800cb84:	bf08      	it	eq
 800cb86:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cb8a:	2c00      	cmp	r4, #0
 800cb8c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cb90:	f340 817e 	ble.w	800ce90 <__ieee754_powf+0x51c>
 800cb94:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cb98:	f340 80f8 	ble.w	800cd8c <__ieee754_powf+0x418>
 800cb9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba4:	bf4c      	ite	mi
 800cba6:	2001      	movmi	r0, #1
 800cba8:	2000      	movpl	r0, #0
 800cbaa:	e790      	b.n	800cace <__ieee754_powf+0x15a>
 800cbac:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800cbb0:	bf01      	itttt	eq
 800cbb2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800cd4c <__ieee754_powf+0x3d8>
 800cbb6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800cbba:	f06f 0217 	mvneq.w	r2, #23
 800cbbe:	ee17 5a90 	vmoveq	r5, s15
 800cbc2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cbc6:	bf18      	it	ne
 800cbc8:	2200      	movne	r2, #0
 800cbca:	3b7f      	subs	r3, #127	; 0x7f
 800cbcc:	4413      	add	r3, r2
 800cbce:	4a60      	ldr	r2, [pc, #384]	; (800cd50 <__ieee754_powf+0x3dc>)
 800cbd0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800cbd4:	4295      	cmp	r5, r2
 800cbd6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800cbda:	dd06      	ble.n	800cbea <__ieee754_powf+0x276>
 800cbdc:	4a5d      	ldr	r2, [pc, #372]	; (800cd54 <__ieee754_powf+0x3e0>)
 800cbde:	4295      	cmp	r5, r2
 800cbe0:	f340 80a4 	ble.w	800cd2c <__ieee754_powf+0x3b8>
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cbea:	2500      	movs	r5, #0
 800cbec:	4a5a      	ldr	r2, [pc, #360]	; (800cd58 <__ieee754_powf+0x3e4>)
 800cbee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800cbf2:	ee07 1a90 	vmov	s15, r1
 800cbf6:	ed92 7a00 	vldr	s14, [r2]
 800cbfa:	4a58      	ldr	r2, [pc, #352]	; (800cd5c <__ieee754_powf+0x3e8>)
 800cbfc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cc00:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cc04:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800cc08:	1049      	asrs	r1, r1, #1
 800cc0a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800cc0e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800cc12:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800cc16:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800cc1a:	ee06 1a10 	vmov	s12, r1
 800cc1e:	ee65 4a26 	vmul.f32	s9, s10, s13
 800cc22:	ee36 7a47 	vsub.f32	s14, s12, s14
 800cc26:	ee14 6a90 	vmov	r6, s9
 800cc2a:	4016      	ands	r6, r2
 800cc2c:	ee05 6a90 	vmov	s11, r6
 800cc30:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800cc34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc38:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800cd60 <__ieee754_powf+0x3ec>
 800cc3c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800cc40:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800cc44:	ee25 6a26 	vmul.f32	s12, s10, s13
 800cc48:	eddf 6a46 	vldr	s13, [pc, #280]	; 800cd64 <__ieee754_powf+0x3f0>
 800cc4c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cc50:	eddf 6a45 	vldr	s13, [pc, #276]	; 800cd68 <__ieee754_powf+0x3f4>
 800cc54:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cc58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cd3c <__ieee754_powf+0x3c8>
 800cc5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc60:	eddf 6a42 	vldr	s13, [pc, #264]	; 800cd6c <__ieee754_powf+0x3f8>
 800cc64:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cc68:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800cd70 <__ieee754_powf+0x3fc>
 800cc6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc70:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800cc74:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800cc78:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc7c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800cc80:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800cc84:	eef0 7a45 	vmov.f32	s15, s10
 800cc88:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800cc8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc90:	ee17 1a90 	vmov	r1, s15
 800cc94:	4011      	ands	r1, r2
 800cc96:	ee07 1a90 	vmov	s15, r1
 800cc9a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800cc9e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800cca2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cca6:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ccaa:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ccae:	eeb0 6a47 	vmov.f32	s12, s14
 800ccb2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800ccb6:	ee16 1a10 	vmov	r1, s12
 800ccba:	4011      	ands	r1, r2
 800ccbc:	ee06 1a90 	vmov	s13, r1
 800ccc0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800ccc4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cd74 <__ieee754_powf+0x400>
 800ccc8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800cd78 <__ieee754_powf+0x404>
 800cccc:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ccd0:	ee06 1a10 	vmov	s12, r1
 800ccd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800cd7c <__ieee754_powf+0x408>
 800ccdc:	4928      	ldr	r1, [pc, #160]	; (800cd80 <__ieee754_powf+0x40c>)
 800ccde:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cce2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800cce6:	edd1 7a00 	vldr	s15, [r1]
 800ccea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	4b24      	ldr	r3, [pc, #144]	; (800cd84 <__ieee754_powf+0x410>)
 800ccf4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ccf8:	eef0 7a47 	vmov.f32	s15, s14
 800ccfc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cd00:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800cd04:	edd5 0a00 	vldr	s1, [r5]
 800cd08:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cd0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd10:	ee17 3a90 	vmov	r3, s15
 800cd14:	4013      	ands	r3, r2
 800cd16:	ee07 3a90 	vmov	s15, r3
 800cd1a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800cd1e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800cd22:	eee6 6a65 	vfms.f32	s13, s12, s11
 800cd26:	ee77 7a66 	vsub.f32	s15, s14, s13
 800cd2a:	e70e      	b.n	800cb4a <__ieee754_powf+0x1d6>
 800cd2c:	2501      	movs	r5, #1
 800cd2e:	e75d      	b.n	800cbec <__ieee754_powf+0x278>
 800cd30:	00000000 	.word	0x00000000
 800cd34:	3f7ffff3 	.word	0x3f7ffff3
 800cd38:	3f800007 	.word	0x3f800007
 800cd3c:	3eaaaaab 	.word	0x3eaaaaab
 800cd40:	3fb8aa3b 	.word	0x3fb8aa3b
 800cd44:	36eca570 	.word	0x36eca570
 800cd48:	3fb8aa00 	.word	0x3fb8aa00
 800cd4c:	4b800000 	.word	0x4b800000
 800cd50:	001cc471 	.word	0x001cc471
 800cd54:	005db3d6 	.word	0x005db3d6
 800cd58:	0800def8 	.word	0x0800def8
 800cd5c:	fffff000 	.word	0xfffff000
 800cd60:	3e6c3255 	.word	0x3e6c3255
 800cd64:	3e53f142 	.word	0x3e53f142
 800cd68:	3e8ba305 	.word	0x3e8ba305
 800cd6c:	3edb6db7 	.word	0x3edb6db7
 800cd70:	3f19999a 	.word	0x3f19999a
 800cd74:	3f76384f 	.word	0x3f76384f
 800cd78:	3f763800 	.word	0x3f763800
 800cd7c:	369dc3a0 	.word	0x369dc3a0
 800cd80:	0800df08 	.word	0x0800df08
 800cd84:	0800df00 	.word	0x0800df00
 800cd88:	3338aa3c 	.word	0x3338aa3c
 800cd8c:	f040 8095 	bne.w	800ceba <__ieee754_powf+0x546>
 800cd90:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800cd88 <__ieee754_powf+0x414>
 800cd94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd98:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cd9c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda4:	f73f aefa 	bgt.w	800cb9c <__ieee754_powf+0x228>
 800cda8:	15db      	asrs	r3, r3, #23
 800cdaa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800cdae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cdb2:	4103      	asrs	r3, r0
 800cdb4:	4423      	add	r3, r4
 800cdb6:	494b      	ldr	r1, [pc, #300]	; (800cee4 <__ieee754_powf+0x570>)
 800cdb8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cdbc:	3a7f      	subs	r2, #127	; 0x7f
 800cdbe:	4111      	asrs	r1, r2
 800cdc0:	ea23 0101 	bic.w	r1, r3, r1
 800cdc4:	ee07 1a10 	vmov	s14, r1
 800cdc8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800cdcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cdd0:	f1c2 0217 	rsb	r2, r2, #23
 800cdd4:	4110      	asrs	r0, r2
 800cdd6:	2c00      	cmp	r4, #0
 800cdd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cddc:	bfb8      	it	lt
 800cdde:	4240      	neglt	r0, r0
 800cde0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cde4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800cee8 <__ieee754_powf+0x574>
 800cde8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ceec <__ieee754_powf+0x578>
 800cdec:	ee17 3a10 	vmov	r3, s14
 800cdf0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cdf4:	f023 030f 	bic.w	r3, r3, #15
 800cdf8:	ee07 3a10 	vmov	s14, r3
 800cdfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce00:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ce04:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ce08:	eddf 7a39 	vldr	s15, [pc, #228]	; 800cef0 <__ieee754_powf+0x57c>
 800ce0c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800ce10:	eef0 7a40 	vmov.f32	s15, s0
 800ce14:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ce18:	eeb0 6a67 	vmov.f32	s12, s15
 800ce1c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ce20:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ce24:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ce28:	eddf 6a32 	vldr	s13, [pc, #200]	; 800cef4 <__ieee754_powf+0x580>
 800ce2c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800cef8 <__ieee754_powf+0x584>
 800ce30:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ce34:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800cefc <__ieee754_powf+0x588>
 800ce38:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ce3c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800cf00 <__ieee754_powf+0x58c>
 800ce40:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ce44:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800cf04 <__ieee754_powf+0x590>
 800ce48:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ce4c:	eef0 6a67 	vmov.f32	s13, s15
 800ce50:	eee6 6a47 	vfms.f32	s13, s12, s14
 800ce54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ce58:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ce5c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ce60:	eea7 0a80 	vfma.f32	s0, s15, s0
 800ce64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ce68:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ce6c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ce70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce74:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ce78:	ee10 3a10 	vmov	r3, s0
 800ce7c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ce80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce84:	da1f      	bge.n	800cec6 <__ieee754_powf+0x552>
 800ce86:	f000 fea5 	bl	800dbd4 <scalbnf>
 800ce8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ce8e:	e589      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ce90:	4a1d      	ldr	r2, [pc, #116]	; (800cf08 <__ieee754_powf+0x594>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	dd07      	ble.n	800cea6 <__ieee754_powf+0x532>
 800ce96:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	bf4c      	ite	mi
 800cea0:	2001      	movmi	r0, #1
 800cea2:	2000      	movpl	r0, #0
 800cea4:	e61f      	b.n	800cae6 <__ieee754_powf+0x172>
 800cea6:	d108      	bne.n	800ceba <__ieee754_powf+0x546>
 800cea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ceac:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ceb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb4:	f6ff af78 	blt.w	800cda8 <__ieee754_powf+0x434>
 800ceb8:	e7ed      	b.n	800ce96 <__ieee754_powf+0x522>
 800ceba:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800cebe:	f73f af73 	bgt.w	800cda8 <__ieee754_powf+0x434>
 800cec2:	2000      	movs	r0, #0
 800cec4:	e78c      	b.n	800cde0 <__ieee754_powf+0x46c>
 800cec6:	ee00 3a10 	vmov	s0, r3
 800ceca:	e7de      	b.n	800ce8a <__ieee754_powf+0x516>
 800cecc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ced0:	e568      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ced2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800cf0c <__ieee754_powf+0x598>
 800ced6:	e565      	b.n	800c9a4 <__ieee754_powf+0x30>
 800ced8:	eeb0 0a48 	vmov.f32	s0, s16
 800cedc:	e562      	b.n	800c9a4 <__ieee754_powf+0x30>
 800cede:	2700      	movs	r7, #0
 800cee0:	e58d      	b.n	800c9fe <__ieee754_powf+0x8a>
 800cee2:	bf00      	nop
 800cee4:	007fffff 	.word	0x007fffff
 800cee8:	35bfbe8c 	.word	0x35bfbe8c
 800ceec:	3f317200 	.word	0x3f317200
 800cef0:	3f317218 	.word	0x3f317218
 800cef4:	b5ddea0e 	.word	0xb5ddea0e
 800cef8:	3331bb4c 	.word	0x3331bb4c
 800cefc:	388ab355 	.word	0x388ab355
 800cf00:	bb360b61 	.word	0xbb360b61
 800cf04:	3e2aaaab 	.word	0x3e2aaaab
 800cf08:	43160000 	.word	0x43160000
 800cf0c:	00000000 	.word	0x00000000

0800cf10 <__ieee754_sqrtf>:
 800cf10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cf14:	4770      	bx	lr
	...

0800cf18 <__kernel_cos>:
 800cf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1c:	ec57 6b10 	vmov	r6, r7, d0
 800cf20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cf24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cf28:	ed8d 1b00 	vstr	d1, [sp]
 800cf2c:	da07      	bge.n	800cf3e <__kernel_cos+0x26>
 800cf2e:	ee10 0a10 	vmov	r0, s0
 800cf32:	4639      	mov	r1, r7
 800cf34:	f7f3 fe10 	bl	8000b58 <__aeabi_d2iz>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	f000 8088 	beq.w	800d04e <__kernel_cos+0x136>
 800cf3e:	4632      	mov	r2, r6
 800cf40:	463b      	mov	r3, r7
 800cf42:	4630      	mov	r0, r6
 800cf44:	4639      	mov	r1, r7
 800cf46:	f7f3 fb57 	bl	80005f8 <__aeabi_dmul>
 800cf4a:	4b51      	ldr	r3, [pc, #324]	; (800d090 <__kernel_cos+0x178>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460d      	mov	r5, r1
 800cf52:	f7f3 fb51 	bl	80005f8 <__aeabi_dmul>
 800cf56:	a340      	add	r3, pc, #256	; (adr r3, 800d058 <__kernel_cos+0x140>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	4682      	mov	sl, r0
 800cf5e:	468b      	mov	fp, r1
 800cf60:	4620      	mov	r0, r4
 800cf62:	4629      	mov	r1, r5
 800cf64:	f7f3 fb48 	bl	80005f8 <__aeabi_dmul>
 800cf68:	a33d      	add	r3, pc, #244	; (adr r3, 800d060 <__kernel_cos+0x148>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	f7f3 f98d 	bl	800028c <__adddf3>
 800cf72:	4622      	mov	r2, r4
 800cf74:	462b      	mov	r3, r5
 800cf76:	f7f3 fb3f 	bl	80005f8 <__aeabi_dmul>
 800cf7a:	a33b      	add	r3, pc, #236	; (adr r3, 800d068 <__kernel_cos+0x150>)
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f7f3 f982 	bl	8000288 <__aeabi_dsub>
 800cf84:	4622      	mov	r2, r4
 800cf86:	462b      	mov	r3, r5
 800cf88:	f7f3 fb36 	bl	80005f8 <__aeabi_dmul>
 800cf8c:	a338      	add	r3, pc, #224	; (adr r3, 800d070 <__kernel_cos+0x158>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 f97b 	bl	800028c <__adddf3>
 800cf96:	4622      	mov	r2, r4
 800cf98:	462b      	mov	r3, r5
 800cf9a:	f7f3 fb2d 	bl	80005f8 <__aeabi_dmul>
 800cf9e:	a336      	add	r3, pc, #216	; (adr r3, 800d078 <__kernel_cos+0x160>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7f3 f970 	bl	8000288 <__aeabi_dsub>
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	462b      	mov	r3, r5
 800cfac:	f7f3 fb24 	bl	80005f8 <__aeabi_dmul>
 800cfb0:	a333      	add	r3, pc, #204	; (adr r3, 800d080 <__kernel_cos+0x168>)
 800cfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb6:	f7f3 f969 	bl	800028c <__adddf3>
 800cfba:	4622      	mov	r2, r4
 800cfbc:	462b      	mov	r3, r5
 800cfbe:	f7f3 fb1b 	bl	80005f8 <__aeabi_dmul>
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	462b      	mov	r3, r5
 800cfc6:	f7f3 fb17 	bl	80005f8 <__aeabi_dmul>
 800cfca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfce:	4604      	mov	r4, r0
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	4639      	mov	r1, r7
 800cfd6:	f7f3 fb0f 	bl	80005f8 <__aeabi_dmul>
 800cfda:	460b      	mov	r3, r1
 800cfdc:	4602      	mov	r2, r0
 800cfde:	4629      	mov	r1, r5
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7f3 f951 	bl	8000288 <__aeabi_dsub>
 800cfe6:	4b2b      	ldr	r3, [pc, #172]	; (800d094 <__kernel_cos+0x17c>)
 800cfe8:	4598      	cmp	r8, r3
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	dc10      	bgt.n	800d012 <__kernel_cos+0xfa>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	4650      	mov	r0, sl
 800cff6:	4659      	mov	r1, fp
 800cff8:	f7f3 f946 	bl	8000288 <__aeabi_dsub>
 800cffc:	460b      	mov	r3, r1
 800cffe:	4926      	ldr	r1, [pc, #152]	; (800d098 <__kernel_cos+0x180>)
 800d000:	4602      	mov	r2, r0
 800d002:	2000      	movs	r0, #0
 800d004:	f7f3 f940 	bl	8000288 <__aeabi_dsub>
 800d008:	ec41 0b10 	vmov	d0, r0, r1
 800d00c:	b003      	add	sp, #12
 800d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d012:	4b22      	ldr	r3, [pc, #136]	; (800d09c <__kernel_cos+0x184>)
 800d014:	4920      	ldr	r1, [pc, #128]	; (800d098 <__kernel_cos+0x180>)
 800d016:	4598      	cmp	r8, r3
 800d018:	bfcc      	ite	gt
 800d01a:	4d21      	ldrgt	r5, [pc, #132]	; (800d0a0 <__kernel_cos+0x188>)
 800d01c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d020:	2400      	movs	r4, #0
 800d022:	4622      	mov	r2, r4
 800d024:	462b      	mov	r3, r5
 800d026:	2000      	movs	r0, #0
 800d028:	f7f3 f92e 	bl	8000288 <__aeabi_dsub>
 800d02c:	4622      	mov	r2, r4
 800d02e:	4680      	mov	r8, r0
 800d030:	4689      	mov	r9, r1
 800d032:	462b      	mov	r3, r5
 800d034:	4650      	mov	r0, sl
 800d036:	4659      	mov	r1, fp
 800d038:	f7f3 f926 	bl	8000288 <__aeabi_dsub>
 800d03c:	4632      	mov	r2, r6
 800d03e:	463b      	mov	r3, r7
 800d040:	f7f3 f922 	bl	8000288 <__aeabi_dsub>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4640      	mov	r0, r8
 800d04a:	4649      	mov	r1, r9
 800d04c:	e7da      	b.n	800d004 <__kernel_cos+0xec>
 800d04e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d088 <__kernel_cos+0x170>
 800d052:	e7db      	b.n	800d00c <__kernel_cos+0xf4>
 800d054:	f3af 8000 	nop.w
 800d058:	be8838d4 	.word	0xbe8838d4
 800d05c:	bda8fae9 	.word	0xbda8fae9
 800d060:	bdb4b1c4 	.word	0xbdb4b1c4
 800d064:	3e21ee9e 	.word	0x3e21ee9e
 800d068:	809c52ad 	.word	0x809c52ad
 800d06c:	3e927e4f 	.word	0x3e927e4f
 800d070:	19cb1590 	.word	0x19cb1590
 800d074:	3efa01a0 	.word	0x3efa01a0
 800d078:	16c15177 	.word	0x16c15177
 800d07c:	3f56c16c 	.word	0x3f56c16c
 800d080:	5555554c 	.word	0x5555554c
 800d084:	3fa55555 	.word	0x3fa55555
 800d088:	00000000 	.word	0x00000000
 800d08c:	3ff00000 	.word	0x3ff00000
 800d090:	3fe00000 	.word	0x3fe00000
 800d094:	3fd33332 	.word	0x3fd33332
 800d098:	3ff00000 	.word	0x3ff00000
 800d09c:	3fe90000 	.word	0x3fe90000
 800d0a0:	3fd20000 	.word	0x3fd20000
 800d0a4:	00000000 	.word	0x00000000

0800d0a8 <__kernel_rem_pio2>:
 800d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	ed2d 8b02 	vpush	{d8}
 800d0b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d0b4:	f112 0f14 	cmn.w	r2, #20
 800d0b8:	9308      	str	r3, [sp, #32]
 800d0ba:	9101      	str	r1, [sp, #4]
 800d0bc:	4bc4      	ldr	r3, [pc, #784]	; (800d3d0 <__kernel_rem_pio2+0x328>)
 800d0be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d0c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800d0c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0c6:	9302      	str	r3, [sp, #8]
 800d0c8:	9b08      	ldr	r3, [sp, #32]
 800d0ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d0ce:	bfa8      	it	ge
 800d0d0:	1ed4      	subge	r4, r2, #3
 800d0d2:	9306      	str	r3, [sp, #24]
 800d0d4:	bfb2      	itee	lt
 800d0d6:	2400      	movlt	r4, #0
 800d0d8:	2318      	movge	r3, #24
 800d0da:	fb94 f4f3 	sdivge	r4, r4, r3
 800d0de:	f06f 0317 	mvn.w	r3, #23
 800d0e2:	fb04 3303 	mla	r3, r4, r3, r3
 800d0e6:	eb03 0a02 	add.w	sl, r3, r2
 800d0ea:	9b02      	ldr	r3, [sp, #8]
 800d0ec:	9a06      	ldr	r2, [sp, #24]
 800d0ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d3c0 <__kernel_rem_pio2+0x318>
 800d0f2:	eb03 0802 	add.w	r8, r3, r2
 800d0f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d0f8:	1aa7      	subs	r7, r4, r2
 800d0fa:	ae22      	add	r6, sp, #136	; 0x88
 800d0fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d100:	2500      	movs	r5, #0
 800d102:	4545      	cmp	r5, r8
 800d104:	dd13      	ble.n	800d12e <__kernel_rem_pio2+0x86>
 800d106:	9b08      	ldr	r3, [sp, #32]
 800d108:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d3c0 <__kernel_rem_pio2+0x318>
 800d10c:	aa22      	add	r2, sp, #136	; 0x88
 800d10e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d112:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d116:	f04f 0800 	mov.w	r8, #0
 800d11a:	9b02      	ldr	r3, [sp, #8]
 800d11c:	4598      	cmp	r8, r3
 800d11e:	dc2f      	bgt.n	800d180 <__kernel_rem_pio2+0xd8>
 800d120:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d124:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d128:	462f      	mov	r7, r5
 800d12a:	2600      	movs	r6, #0
 800d12c:	e01b      	b.n	800d166 <__kernel_rem_pio2+0xbe>
 800d12e:	42ef      	cmn	r7, r5
 800d130:	d407      	bmi.n	800d142 <__kernel_rem_pio2+0x9a>
 800d132:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d136:	f7f3 f9f5 	bl	8000524 <__aeabi_i2d>
 800d13a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d13e:	3501      	adds	r5, #1
 800d140:	e7df      	b.n	800d102 <__kernel_rem_pio2+0x5a>
 800d142:	ec51 0b18 	vmov	r0, r1, d8
 800d146:	e7f8      	b.n	800d13a <__kernel_rem_pio2+0x92>
 800d148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d14c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d150:	f7f3 fa52 	bl	80005f8 <__aeabi_dmul>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d15c:	f7f3 f896 	bl	800028c <__adddf3>
 800d160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d164:	3601      	adds	r6, #1
 800d166:	9b06      	ldr	r3, [sp, #24]
 800d168:	429e      	cmp	r6, r3
 800d16a:	f1a7 0708 	sub.w	r7, r7, #8
 800d16e:	ddeb      	ble.n	800d148 <__kernel_rem_pio2+0xa0>
 800d170:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d174:	f108 0801 	add.w	r8, r8, #1
 800d178:	ecab 7b02 	vstmia	fp!, {d7}
 800d17c:	3508      	adds	r5, #8
 800d17e:	e7cc      	b.n	800d11a <__kernel_rem_pio2+0x72>
 800d180:	9b02      	ldr	r3, [sp, #8]
 800d182:	aa0e      	add	r2, sp, #56	; 0x38
 800d184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d188:	930d      	str	r3, [sp, #52]	; 0x34
 800d18a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d18c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d190:	9c02      	ldr	r4, [sp, #8]
 800d192:	930c      	str	r3, [sp, #48]	; 0x30
 800d194:	00e3      	lsls	r3, r4, #3
 800d196:	930a      	str	r3, [sp, #40]	; 0x28
 800d198:	ab9a      	add	r3, sp, #616	; 0x268
 800d19a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d19e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d1a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d1a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800d1a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d1ac:	46c3      	mov	fp, r8
 800d1ae:	46a1      	mov	r9, r4
 800d1b0:	f1b9 0f00 	cmp.w	r9, #0
 800d1b4:	f1a5 0508 	sub.w	r5, r5, #8
 800d1b8:	dc77      	bgt.n	800d2aa <__kernel_rem_pio2+0x202>
 800d1ba:	ec47 6b10 	vmov	d0, r6, r7
 800d1be:	4650      	mov	r0, sl
 800d1c0:	f000 fc6e 	bl	800daa0 <scalbn>
 800d1c4:	ec57 6b10 	vmov	r6, r7, d0
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d1ce:	ee10 0a10 	vmov	r0, s0
 800d1d2:	4639      	mov	r1, r7
 800d1d4:	f7f3 fa10 	bl	80005f8 <__aeabi_dmul>
 800d1d8:	ec41 0b10 	vmov	d0, r0, r1
 800d1dc:	f000 fbd8 	bl	800d990 <floor>
 800d1e0:	4b7c      	ldr	r3, [pc, #496]	; (800d3d4 <__kernel_rem_pio2+0x32c>)
 800d1e2:	ec51 0b10 	vmov	r0, r1, d0
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f7f3 fa06 	bl	80005f8 <__aeabi_dmul>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	4639      	mov	r1, r7
 800d1f4:	f7f3 f848 	bl	8000288 <__aeabi_dsub>
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	f7f3 fcac 	bl	8000b58 <__aeabi_d2iz>
 800d200:	9004      	str	r0, [sp, #16]
 800d202:	f7f3 f98f 	bl	8000524 <__aeabi_i2d>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f83b 	bl	8000288 <__aeabi_dsub>
 800d212:	f1ba 0f00 	cmp.w	sl, #0
 800d216:	4606      	mov	r6, r0
 800d218:	460f      	mov	r7, r1
 800d21a:	dd6d      	ble.n	800d2f8 <__kernel_rem_pio2+0x250>
 800d21c:	1e62      	subs	r2, r4, #1
 800d21e:	ab0e      	add	r3, sp, #56	; 0x38
 800d220:	9d04      	ldr	r5, [sp, #16]
 800d222:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d226:	f1ca 0118 	rsb	r1, sl, #24
 800d22a:	fa40 f301 	asr.w	r3, r0, r1
 800d22e:	441d      	add	r5, r3
 800d230:	408b      	lsls	r3, r1
 800d232:	1ac0      	subs	r0, r0, r3
 800d234:	ab0e      	add	r3, sp, #56	; 0x38
 800d236:	9504      	str	r5, [sp, #16]
 800d238:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d23c:	f1ca 0317 	rsb	r3, sl, #23
 800d240:	fa40 fb03 	asr.w	fp, r0, r3
 800d244:	f1bb 0f00 	cmp.w	fp, #0
 800d248:	dd65      	ble.n	800d316 <__kernel_rem_pio2+0x26e>
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	2200      	movs	r2, #0
 800d24e:	3301      	adds	r3, #1
 800d250:	9304      	str	r3, [sp, #16]
 800d252:	4615      	mov	r5, r2
 800d254:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d258:	4294      	cmp	r4, r2
 800d25a:	f300 809c 	bgt.w	800d396 <__kernel_rem_pio2+0x2ee>
 800d25e:	f1ba 0f00 	cmp.w	sl, #0
 800d262:	dd07      	ble.n	800d274 <__kernel_rem_pio2+0x1cc>
 800d264:	f1ba 0f01 	cmp.w	sl, #1
 800d268:	f000 80c0 	beq.w	800d3ec <__kernel_rem_pio2+0x344>
 800d26c:	f1ba 0f02 	cmp.w	sl, #2
 800d270:	f000 80c6 	beq.w	800d400 <__kernel_rem_pio2+0x358>
 800d274:	f1bb 0f02 	cmp.w	fp, #2
 800d278:	d14d      	bne.n	800d316 <__kernel_rem_pio2+0x26e>
 800d27a:	4632      	mov	r2, r6
 800d27c:	463b      	mov	r3, r7
 800d27e:	4956      	ldr	r1, [pc, #344]	; (800d3d8 <__kernel_rem_pio2+0x330>)
 800d280:	2000      	movs	r0, #0
 800d282:	f7f3 f801 	bl	8000288 <__aeabi_dsub>
 800d286:	4606      	mov	r6, r0
 800d288:	460f      	mov	r7, r1
 800d28a:	2d00      	cmp	r5, #0
 800d28c:	d043      	beq.n	800d316 <__kernel_rem_pio2+0x26e>
 800d28e:	4650      	mov	r0, sl
 800d290:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d3c8 <__kernel_rem_pio2+0x320>
 800d294:	f000 fc04 	bl	800daa0 <scalbn>
 800d298:	4630      	mov	r0, r6
 800d29a:	4639      	mov	r1, r7
 800d29c:	ec53 2b10 	vmov	r2, r3, d0
 800d2a0:	f7f2 fff2 	bl	8000288 <__aeabi_dsub>
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	460f      	mov	r7, r1
 800d2a8:	e035      	b.n	800d316 <__kernel_rem_pio2+0x26e>
 800d2aa:	4b4c      	ldr	r3, [pc, #304]	; (800d3dc <__kernel_rem_pio2+0x334>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	4639      	mov	r1, r7
 800d2b2:	f7f3 f9a1 	bl	80005f8 <__aeabi_dmul>
 800d2b6:	f7f3 fc4f 	bl	8000b58 <__aeabi_d2iz>
 800d2ba:	f7f3 f933 	bl	8000524 <__aeabi_i2d>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	ec43 2b18 	vmov	d8, r2, r3
 800d2c6:	4b46      	ldr	r3, [pc, #280]	; (800d3e0 <__kernel_rem_pio2+0x338>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f7f3 f995 	bl	80005f8 <__aeabi_dmul>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	f7f2 ffd7 	bl	8000288 <__aeabi_dsub>
 800d2da:	f7f3 fc3d 	bl	8000b58 <__aeabi_d2iz>
 800d2de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2e2:	f84b 0b04 	str.w	r0, [fp], #4
 800d2e6:	ec51 0b18 	vmov	r0, r1, d8
 800d2ea:	f7f2 ffcf 	bl	800028c <__adddf3>
 800d2ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	460f      	mov	r7, r1
 800d2f6:	e75b      	b.n	800d1b0 <__kernel_rem_pio2+0x108>
 800d2f8:	d106      	bne.n	800d308 <__kernel_rem_pio2+0x260>
 800d2fa:	1e63      	subs	r3, r4, #1
 800d2fc:	aa0e      	add	r2, sp, #56	; 0x38
 800d2fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d302:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d306:	e79d      	b.n	800d244 <__kernel_rem_pio2+0x19c>
 800d308:	4b36      	ldr	r3, [pc, #216]	; (800d3e4 <__kernel_rem_pio2+0x33c>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	f7f3 fbfa 	bl	8000b04 <__aeabi_dcmpge>
 800d310:	2800      	cmp	r0, #0
 800d312:	d13d      	bne.n	800d390 <__kernel_rem_pio2+0x2e8>
 800d314:	4683      	mov	fp, r0
 800d316:	2200      	movs	r2, #0
 800d318:	2300      	movs	r3, #0
 800d31a:	4630      	mov	r0, r6
 800d31c:	4639      	mov	r1, r7
 800d31e:	f7f3 fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d322:	2800      	cmp	r0, #0
 800d324:	f000 80c0 	beq.w	800d4a8 <__kernel_rem_pio2+0x400>
 800d328:	1e65      	subs	r5, r4, #1
 800d32a:	462b      	mov	r3, r5
 800d32c:	2200      	movs	r2, #0
 800d32e:	9902      	ldr	r1, [sp, #8]
 800d330:	428b      	cmp	r3, r1
 800d332:	da6c      	bge.n	800d40e <__kernel_rem_pio2+0x366>
 800d334:	2a00      	cmp	r2, #0
 800d336:	f000 8089 	beq.w	800d44c <__kernel_rem_pio2+0x3a4>
 800d33a:	ab0e      	add	r3, sp, #56	; 0x38
 800d33c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d340:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 80ad 	beq.w	800d4a4 <__kernel_rem_pio2+0x3fc>
 800d34a:	4650      	mov	r0, sl
 800d34c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d3c8 <__kernel_rem_pio2+0x320>
 800d350:	f000 fba6 	bl	800daa0 <scalbn>
 800d354:	ab9a      	add	r3, sp, #616	; 0x268
 800d356:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d35a:	ec57 6b10 	vmov	r6, r7, d0
 800d35e:	00ec      	lsls	r4, r5, #3
 800d360:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d364:	46aa      	mov	sl, r5
 800d366:	f1ba 0f00 	cmp.w	sl, #0
 800d36a:	f280 80d6 	bge.w	800d51a <__kernel_rem_pio2+0x472>
 800d36e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d3c0 <__kernel_rem_pio2+0x318>
 800d372:	462e      	mov	r6, r5
 800d374:	2e00      	cmp	r6, #0
 800d376:	f2c0 8104 	blt.w	800d582 <__kernel_rem_pio2+0x4da>
 800d37a:	ab72      	add	r3, sp, #456	; 0x1c8
 800d37c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d380:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d3e8 <__kernel_rem_pio2+0x340>
 800d384:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d388:	f04f 0800 	mov.w	r8, #0
 800d38c:	1baf      	subs	r7, r5, r6
 800d38e:	e0ea      	b.n	800d566 <__kernel_rem_pio2+0x4be>
 800d390:	f04f 0b02 	mov.w	fp, #2
 800d394:	e759      	b.n	800d24a <__kernel_rem_pio2+0x1a2>
 800d396:	f8d8 3000 	ldr.w	r3, [r8]
 800d39a:	b955      	cbnz	r5, 800d3b2 <__kernel_rem_pio2+0x30a>
 800d39c:	b123      	cbz	r3, 800d3a8 <__kernel_rem_pio2+0x300>
 800d39e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d3a2:	f8c8 3000 	str.w	r3, [r8]
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	3201      	adds	r2, #1
 800d3aa:	f108 0804 	add.w	r8, r8, #4
 800d3ae:	461d      	mov	r5, r3
 800d3b0:	e752      	b.n	800d258 <__kernel_rem_pio2+0x1b0>
 800d3b2:	1acb      	subs	r3, r1, r3
 800d3b4:	f8c8 3000 	str.w	r3, [r8]
 800d3b8:	462b      	mov	r3, r5
 800d3ba:	e7f5      	b.n	800d3a8 <__kernel_rem_pio2+0x300>
 800d3bc:	f3af 8000 	nop.w
	...
 800d3cc:	3ff00000 	.word	0x3ff00000
 800d3d0:	0800df50 	.word	0x0800df50
 800d3d4:	40200000 	.word	0x40200000
 800d3d8:	3ff00000 	.word	0x3ff00000
 800d3dc:	3e700000 	.word	0x3e700000
 800d3e0:	41700000 	.word	0x41700000
 800d3e4:	3fe00000 	.word	0x3fe00000
 800d3e8:	0800df10 	.word	0x0800df10
 800d3ec:	1e62      	subs	r2, r4, #1
 800d3ee:	ab0e      	add	r3, sp, #56	; 0x38
 800d3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d3f8:	a90e      	add	r1, sp, #56	; 0x38
 800d3fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d3fe:	e739      	b.n	800d274 <__kernel_rem_pio2+0x1cc>
 800d400:	1e62      	subs	r2, r4, #1
 800d402:	ab0e      	add	r3, sp, #56	; 0x38
 800d404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d408:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d40c:	e7f4      	b.n	800d3f8 <__kernel_rem_pio2+0x350>
 800d40e:	a90e      	add	r1, sp, #56	; 0x38
 800d410:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d414:	3b01      	subs	r3, #1
 800d416:	430a      	orrs	r2, r1
 800d418:	e789      	b.n	800d32e <__kernel_rem_pio2+0x286>
 800d41a:	3301      	adds	r3, #1
 800d41c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d420:	2900      	cmp	r1, #0
 800d422:	d0fa      	beq.n	800d41a <__kernel_rem_pio2+0x372>
 800d424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d426:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d42a:	446a      	add	r2, sp
 800d42c:	3a98      	subs	r2, #152	; 0x98
 800d42e:	920a      	str	r2, [sp, #40]	; 0x28
 800d430:	9a08      	ldr	r2, [sp, #32]
 800d432:	18e3      	adds	r3, r4, r3
 800d434:	18a5      	adds	r5, r4, r2
 800d436:	aa22      	add	r2, sp, #136	; 0x88
 800d438:	f104 0801 	add.w	r8, r4, #1
 800d43c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d440:	9304      	str	r3, [sp, #16]
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	4543      	cmp	r3, r8
 800d446:	da04      	bge.n	800d452 <__kernel_rem_pio2+0x3aa>
 800d448:	461c      	mov	r4, r3
 800d44a:	e6a3      	b.n	800d194 <__kernel_rem_pio2+0xec>
 800d44c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d44e:	2301      	movs	r3, #1
 800d450:	e7e4      	b.n	800d41c <__kernel_rem_pio2+0x374>
 800d452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d454:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d458:	f7f3 f864 	bl	8000524 <__aeabi_i2d>
 800d45c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d462:	46ab      	mov	fp, r5
 800d464:	461c      	mov	r4, r3
 800d466:	f04f 0900 	mov.w	r9, #0
 800d46a:	2600      	movs	r6, #0
 800d46c:	2700      	movs	r7, #0
 800d46e:	9b06      	ldr	r3, [sp, #24]
 800d470:	4599      	cmp	r9, r3
 800d472:	dd06      	ble.n	800d482 <__kernel_rem_pio2+0x3da>
 800d474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d476:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d47a:	f108 0801 	add.w	r8, r8, #1
 800d47e:	930a      	str	r3, [sp, #40]	; 0x28
 800d480:	e7df      	b.n	800d442 <__kernel_rem_pio2+0x39a>
 800d482:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d486:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d48a:	f7f3 f8b5 	bl	80005f8 <__aeabi_dmul>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4630      	mov	r0, r6
 800d494:	4639      	mov	r1, r7
 800d496:	f7f2 fef9 	bl	800028c <__adddf3>
 800d49a:	f109 0901 	add.w	r9, r9, #1
 800d49e:	4606      	mov	r6, r0
 800d4a0:	460f      	mov	r7, r1
 800d4a2:	e7e4      	b.n	800d46e <__kernel_rem_pio2+0x3c6>
 800d4a4:	3d01      	subs	r5, #1
 800d4a6:	e748      	b.n	800d33a <__kernel_rem_pio2+0x292>
 800d4a8:	ec47 6b10 	vmov	d0, r6, r7
 800d4ac:	f1ca 0000 	rsb	r0, sl, #0
 800d4b0:	f000 faf6 	bl	800daa0 <scalbn>
 800d4b4:	ec57 6b10 	vmov	r6, r7, d0
 800d4b8:	4ba0      	ldr	r3, [pc, #640]	; (800d73c <__kernel_rem_pio2+0x694>)
 800d4ba:	ee10 0a10 	vmov	r0, s0
 800d4be:	2200      	movs	r2, #0
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	f7f3 fb1f 	bl	8000b04 <__aeabi_dcmpge>
 800d4c6:	b1f8      	cbz	r0, 800d508 <__kernel_rem_pio2+0x460>
 800d4c8:	4b9d      	ldr	r3, [pc, #628]	; (800d740 <__kernel_rem_pio2+0x698>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	f7f3 f892 	bl	80005f8 <__aeabi_dmul>
 800d4d4:	f7f3 fb40 	bl	8000b58 <__aeabi_d2iz>
 800d4d8:	4680      	mov	r8, r0
 800d4da:	f7f3 f823 	bl	8000524 <__aeabi_i2d>
 800d4de:	4b97      	ldr	r3, [pc, #604]	; (800d73c <__kernel_rem_pio2+0x694>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f7f3 f889 	bl	80005f8 <__aeabi_dmul>
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	4639      	mov	r1, r7
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f7f2 fecb 	bl	8000288 <__aeabi_dsub>
 800d4f2:	f7f3 fb31 	bl	8000b58 <__aeabi_d2iz>
 800d4f6:	1c65      	adds	r5, r4, #1
 800d4f8:	ab0e      	add	r3, sp, #56	; 0x38
 800d4fa:	f10a 0a18 	add.w	sl, sl, #24
 800d4fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d502:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d506:	e720      	b.n	800d34a <__kernel_rem_pio2+0x2a2>
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	f7f3 fb24 	bl	8000b58 <__aeabi_d2iz>
 800d510:	ab0e      	add	r3, sp, #56	; 0x38
 800d512:	4625      	mov	r5, r4
 800d514:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d518:	e717      	b.n	800d34a <__kernel_rem_pio2+0x2a2>
 800d51a:	ab0e      	add	r3, sp, #56	; 0x38
 800d51c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d520:	f7f3 f800 	bl	8000524 <__aeabi_i2d>
 800d524:	4632      	mov	r2, r6
 800d526:	463b      	mov	r3, r7
 800d528:	f7f3 f866 	bl	80005f8 <__aeabi_dmul>
 800d52c:	4b84      	ldr	r3, [pc, #528]	; (800d740 <__kernel_rem_pio2+0x698>)
 800d52e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d532:	2200      	movs	r2, #0
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	f7f3 f85e 	bl	80005f8 <__aeabi_dmul>
 800d53c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d540:	4606      	mov	r6, r0
 800d542:	460f      	mov	r7, r1
 800d544:	e70f      	b.n	800d366 <__kernel_rem_pio2+0x2be>
 800d546:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d54a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d54e:	f7f3 f853 	bl	80005f8 <__aeabi_dmul>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d55a:	f7f2 fe97 	bl	800028c <__adddf3>
 800d55e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d562:	f108 0801 	add.w	r8, r8, #1
 800d566:	9b02      	ldr	r3, [sp, #8]
 800d568:	4598      	cmp	r8, r3
 800d56a:	dc01      	bgt.n	800d570 <__kernel_rem_pio2+0x4c8>
 800d56c:	45b8      	cmp	r8, r7
 800d56e:	ddea      	ble.n	800d546 <__kernel_rem_pio2+0x49e>
 800d570:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d574:	ab4a      	add	r3, sp, #296	; 0x128
 800d576:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d57a:	ed87 7b00 	vstr	d7, [r7]
 800d57e:	3e01      	subs	r6, #1
 800d580:	e6f8      	b.n	800d374 <__kernel_rem_pio2+0x2cc>
 800d582:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d584:	2b02      	cmp	r3, #2
 800d586:	dc0b      	bgt.n	800d5a0 <__kernel_rem_pio2+0x4f8>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dc35      	bgt.n	800d5f8 <__kernel_rem_pio2+0x550>
 800d58c:	d059      	beq.n	800d642 <__kernel_rem_pio2+0x59a>
 800d58e:	9b04      	ldr	r3, [sp, #16]
 800d590:	f003 0007 	and.w	r0, r3, #7
 800d594:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d598:	ecbd 8b02 	vpop	{d8}
 800d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d1f3      	bne.n	800d58e <__kernel_rem_pio2+0x4e6>
 800d5a6:	ab4a      	add	r3, sp, #296	; 0x128
 800d5a8:	4423      	add	r3, r4
 800d5aa:	9306      	str	r3, [sp, #24]
 800d5ac:	461c      	mov	r4, r3
 800d5ae:	469a      	mov	sl, r3
 800d5b0:	9502      	str	r5, [sp, #8]
 800d5b2:	9b02      	ldr	r3, [sp, #8]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f1aa 0a08 	sub.w	sl, sl, #8
 800d5ba:	dc6b      	bgt.n	800d694 <__kernel_rem_pio2+0x5ec>
 800d5bc:	46aa      	mov	sl, r5
 800d5be:	f1ba 0f01 	cmp.w	sl, #1
 800d5c2:	f1a4 0408 	sub.w	r4, r4, #8
 800d5c6:	f300 8085 	bgt.w	800d6d4 <__kernel_rem_pio2+0x62c>
 800d5ca:	9c06      	ldr	r4, [sp, #24]
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	3408      	adds	r4, #8
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	2d01      	cmp	r5, #1
 800d5d4:	f300 809d 	bgt.w	800d712 <__kernel_rem_pio2+0x66a>
 800d5d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d5dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d5e0:	f1bb 0f00 	cmp.w	fp, #0
 800d5e4:	f040 809b 	bne.w	800d71e <__kernel_rem_pio2+0x676>
 800d5e8:	9b01      	ldr	r3, [sp, #4]
 800d5ea:	e9c3 5600 	strd	r5, r6, [r3]
 800d5ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d5f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d5f6:	e7ca      	b.n	800d58e <__kernel_rem_pio2+0x4e6>
 800d5f8:	3408      	adds	r4, #8
 800d5fa:	ab4a      	add	r3, sp, #296	; 0x128
 800d5fc:	441c      	add	r4, r3
 800d5fe:	462e      	mov	r6, r5
 800d600:	2000      	movs	r0, #0
 800d602:	2100      	movs	r1, #0
 800d604:	2e00      	cmp	r6, #0
 800d606:	da36      	bge.n	800d676 <__kernel_rem_pio2+0x5ce>
 800d608:	f1bb 0f00 	cmp.w	fp, #0
 800d60c:	d039      	beq.n	800d682 <__kernel_rem_pio2+0x5da>
 800d60e:	4602      	mov	r2, r0
 800d610:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d614:	9c01      	ldr	r4, [sp, #4]
 800d616:	e9c4 2300 	strd	r2, r3, [r4]
 800d61a:	4602      	mov	r2, r0
 800d61c:	460b      	mov	r3, r1
 800d61e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d622:	f7f2 fe31 	bl	8000288 <__aeabi_dsub>
 800d626:	ae4c      	add	r6, sp, #304	; 0x130
 800d628:	2401      	movs	r4, #1
 800d62a:	42a5      	cmp	r5, r4
 800d62c:	da2c      	bge.n	800d688 <__kernel_rem_pio2+0x5e0>
 800d62e:	f1bb 0f00 	cmp.w	fp, #0
 800d632:	d002      	beq.n	800d63a <__kernel_rem_pio2+0x592>
 800d634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d638:	4619      	mov	r1, r3
 800d63a:	9b01      	ldr	r3, [sp, #4]
 800d63c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d640:	e7a5      	b.n	800d58e <__kernel_rem_pio2+0x4e6>
 800d642:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d646:	eb0d 0403 	add.w	r4, sp, r3
 800d64a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d64e:	2000      	movs	r0, #0
 800d650:	2100      	movs	r1, #0
 800d652:	2d00      	cmp	r5, #0
 800d654:	da09      	bge.n	800d66a <__kernel_rem_pio2+0x5c2>
 800d656:	f1bb 0f00 	cmp.w	fp, #0
 800d65a:	d002      	beq.n	800d662 <__kernel_rem_pio2+0x5ba>
 800d65c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d660:	4619      	mov	r1, r3
 800d662:	9b01      	ldr	r3, [sp, #4]
 800d664:	e9c3 0100 	strd	r0, r1, [r3]
 800d668:	e791      	b.n	800d58e <__kernel_rem_pio2+0x4e6>
 800d66a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d66e:	f7f2 fe0d 	bl	800028c <__adddf3>
 800d672:	3d01      	subs	r5, #1
 800d674:	e7ed      	b.n	800d652 <__kernel_rem_pio2+0x5aa>
 800d676:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d67a:	f7f2 fe07 	bl	800028c <__adddf3>
 800d67e:	3e01      	subs	r6, #1
 800d680:	e7c0      	b.n	800d604 <__kernel_rem_pio2+0x55c>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	e7c5      	b.n	800d614 <__kernel_rem_pio2+0x56c>
 800d688:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d68c:	f7f2 fdfe 	bl	800028c <__adddf3>
 800d690:	3401      	adds	r4, #1
 800d692:	e7ca      	b.n	800d62a <__kernel_rem_pio2+0x582>
 800d694:	e9da 8900 	ldrd	r8, r9, [sl]
 800d698:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d69c:	9b02      	ldr	r3, [sp, #8]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	9302      	str	r3, [sp, #8]
 800d6a2:	4632      	mov	r2, r6
 800d6a4:	463b      	mov	r3, r7
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	f7f2 fdef 	bl	800028c <__adddf3>
 800d6ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	4649      	mov	r1, r9
 800d6ba:	f7f2 fde5 	bl	8000288 <__aeabi_dsub>
 800d6be:	4632      	mov	r2, r6
 800d6c0:	463b      	mov	r3, r7
 800d6c2:	f7f2 fde3 	bl	800028c <__adddf3>
 800d6c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d6ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d6ce:	ed8a 7b00 	vstr	d7, [sl]
 800d6d2:	e76e      	b.n	800d5b2 <__kernel_rem_pio2+0x50a>
 800d6d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d6d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d6dc:	4640      	mov	r0, r8
 800d6de:	4632      	mov	r2, r6
 800d6e0:	463b      	mov	r3, r7
 800d6e2:	4649      	mov	r1, r9
 800d6e4:	f7f2 fdd2 	bl	800028c <__adddf3>
 800d6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	4649      	mov	r1, r9
 800d6f4:	f7f2 fdc8 	bl	8000288 <__aeabi_dsub>
 800d6f8:	4632      	mov	r2, r6
 800d6fa:	463b      	mov	r3, r7
 800d6fc:	f7f2 fdc6 	bl	800028c <__adddf3>
 800d700:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d704:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d708:	ed84 7b00 	vstr	d7, [r4]
 800d70c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d710:	e755      	b.n	800d5be <__kernel_rem_pio2+0x516>
 800d712:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d716:	f7f2 fdb9 	bl	800028c <__adddf3>
 800d71a:	3d01      	subs	r5, #1
 800d71c:	e759      	b.n	800d5d2 <__kernel_rem_pio2+0x52a>
 800d71e:	9b01      	ldr	r3, [sp, #4]
 800d720:	9a01      	ldr	r2, [sp, #4]
 800d722:	601d      	str	r5, [r3, #0]
 800d724:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d728:	605c      	str	r4, [r3, #4]
 800d72a:	609f      	str	r7, [r3, #8]
 800d72c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d730:	60d3      	str	r3, [r2, #12]
 800d732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d736:	6110      	str	r0, [r2, #16]
 800d738:	6153      	str	r3, [r2, #20]
 800d73a:	e728      	b.n	800d58e <__kernel_rem_pio2+0x4e6>
 800d73c:	41700000 	.word	0x41700000
 800d740:	3e700000 	.word	0x3e700000
 800d744:	00000000 	.word	0x00000000

0800d748 <__kernel_sin>:
 800d748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	ed2d 8b04 	vpush	{d8-d9}
 800d750:	eeb0 8a41 	vmov.f32	s16, s2
 800d754:	eef0 8a61 	vmov.f32	s17, s3
 800d758:	ec55 4b10 	vmov	r4, r5, d0
 800d75c:	b083      	sub	sp, #12
 800d75e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d762:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d766:	9001      	str	r0, [sp, #4]
 800d768:	da06      	bge.n	800d778 <__kernel_sin+0x30>
 800d76a:	ee10 0a10 	vmov	r0, s0
 800d76e:	4629      	mov	r1, r5
 800d770:	f7f3 f9f2 	bl	8000b58 <__aeabi_d2iz>
 800d774:	2800      	cmp	r0, #0
 800d776:	d051      	beq.n	800d81c <__kernel_sin+0xd4>
 800d778:	4622      	mov	r2, r4
 800d77a:	462b      	mov	r3, r5
 800d77c:	4620      	mov	r0, r4
 800d77e:	4629      	mov	r1, r5
 800d780:	f7f2 ff3a 	bl	80005f8 <__aeabi_dmul>
 800d784:	4682      	mov	sl, r0
 800d786:	468b      	mov	fp, r1
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	4620      	mov	r0, r4
 800d78e:	4629      	mov	r1, r5
 800d790:	f7f2 ff32 	bl	80005f8 <__aeabi_dmul>
 800d794:	a341      	add	r3, pc, #260	; (adr r3, 800d89c <__kernel_sin+0x154>)
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	4680      	mov	r8, r0
 800d79c:	4689      	mov	r9, r1
 800d79e:	4650      	mov	r0, sl
 800d7a0:	4659      	mov	r1, fp
 800d7a2:	f7f2 ff29 	bl	80005f8 <__aeabi_dmul>
 800d7a6:	a33f      	add	r3, pc, #252	; (adr r3, 800d8a4 <__kernel_sin+0x15c>)
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	f7f2 fd6c 	bl	8000288 <__aeabi_dsub>
 800d7b0:	4652      	mov	r2, sl
 800d7b2:	465b      	mov	r3, fp
 800d7b4:	f7f2 ff20 	bl	80005f8 <__aeabi_dmul>
 800d7b8:	a33c      	add	r3, pc, #240	; (adr r3, 800d8ac <__kernel_sin+0x164>)
 800d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7be:	f7f2 fd65 	bl	800028c <__adddf3>
 800d7c2:	4652      	mov	r2, sl
 800d7c4:	465b      	mov	r3, fp
 800d7c6:	f7f2 ff17 	bl	80005f8 <__aeabi_dmul>
 800d7ca:	a33a      	add	r3, pc, #232	; (adr r3, 800d8b4 <__kernel_sin+0x16c>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	f7f2 fd5a 	bl	8000288 <__aeabi_dsub>
 800d7d4:	4652      	mov	r2, sl
 800d7d6:	465b      	mov	r3, fp
 800d7d8:	f7f2 ff0e 	bl	80005f8 <__aeabi_dmul>
 800d7dc:	a337      	add	r3, pc, #220	; (adr r3, 800d8bc <__kernel_sin+0x174>)
 800d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e2:	f7f2 fd53 	bl	800028c <__adddf3>
 800d7e6:	9b01      	ldr	r3, [sp, #4]
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	460f      	mov	r7, r1
 800d7ec:	b9eb      	cbnz	r3, 800d82a <__kernel_sin+0xe2>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4650      	mov	r0, sl
 800d7f4:	4659      	mov	r1, fp
 800d7f6:	f7f2 feff 	bl	80005f8 <__aeabi_dmul>
 800d7fa:	a325      	add	r3, pc, #148	; (adr r3, 800d890 <__kernel_sin+0x148>)
 800d7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d800:	f7f2 fd42 	bl	8000288 <__aeabi_dsub>
 800d804:	4642      	mov	r2, r8
 800d806:	464b      	mov	r3, r9
 800d808:	f7f2 fef6 	bl	80005f8 <__aeabi_dmul>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	4620      	mov	r0, r4
 800d812:	4629      	mov	r1, r5
 800d814:	f7f2 fd3a 	bl	800028c <__adddf3>
 800d818:	4604      	mov	r4, r0
 800d81a:	460d      	mov	r5, r1
 800d81c:	ec45 4b10 	vmov	d0, r4, r5
 800d820:	b003      	add	sp, #12
 800d822:	ecbd 8b04 	vpop	{d8-d9}
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	4b1b      	ldr	r3, [pc, #108]	; (800d898 <__kernel_sin+0x150>)
 800d82c:	ec51 0b18 	vmov	r0, r1, d8
 800d830:	2200      	movs	r2, #0
 800d832:	f7f2 fee1 	bl	80005f8 <__aeabi_dmul>
 800d836:	4632      	mov	r2, r6
 800d838:	ec41 0b19 	vmov	d9, r0, r1
 800d83c:	463b      	mov	r3, r7
 800d83e:	4640      	mov	r0, r8
 800d840:	4649      	mov	r1, r9
 800d842:	f7f2 fed9 	bl	80005f8 <__aeabi_dmul>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	ec51 0b19 	vmov	r0, r1, d9
 800d84e:	f7f2 fd1b 	bl	8000288 <__aeabi_dsub>
 800d852:	4652      	mov	r2, sl
 800d854:	465b      	mov	r3, fp
 800d856:	f7f2 fecf 	bl	80005f8 <__aeabi_dmul>
 800d85a:	ec53 2b18 	vmov	r2, r3, d8
 800d85e:	f7f2 fd13 	bl	8000288 <__aeabi_dsub>
 800d862:	a30b      	add	r3, pc, #44	; (adr r3, 800d890 <__kernel_sin+0x148>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	4606      	mov	r6, r0
 800d86a:	460f      	mov	r7, r1
 800d86c:	4640      	mov	r0, r8
 800d86e:	4649      	mov	r1, r9
 800d870:	f7f2 fec2 	bl	80005f8 <__aeabi_dmul>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f2 fd06 	bl	800028c <__adddf3>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	4620      	mov	r0, r4
 800d886:	4629      	mov	r1, r5
 800d888:	f7f2 fcfe 	bl	8000288 <__aeabi_dsub>
 800d88c:	e7c4      	b.n	800d818 <__kernel_sin+0xd0>
 800d88e:	bf00      	nop
 800d890:	55555549 	.word	0x55555549
 800d894:	3fc55555 	.word	0x3fc55555
 800d898:	3fe00000 	.word	0x3fe00000
 800d89c:	5acfd57c 	.word	0x5acfd57c
 800d8a0:	3de5d93a 	.word	0x3de5d93a
 800d8a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d8a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d8ac:	57b1fe7d 	.word	0x57b1fe7d
 800d8b0:	3ec71de3 	.word	0x3ec71de3
 800d8b4:	19c161d5 	.word	0x19c161d5
 800d8b8:	3f2a01a0 	.word	0x3f2a01a0
 800d8bc:	1110f8a6 	.word	0x1110f8a6
 800d8c0:	3f811111 	.word	0x3f811111

0800d8c4 <with_errno>:
 800d8c4:	b570      	push	{r4, r5, r6, lr}
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	4616      	mov	r6, r2
 800d8cc:	f7fd f830 	bl	800a930 <__errno>
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	6006      	str	r6, [r0, #0]
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}

0800d8d8 <xflow>:
 800d8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8da:	4614      	mov	r4, r2
 800d8dc:	461d      	mov	r5, r3
 800d8de:	b108      	cbz	r0, 800d8e4 <xflow+0xc>
 800d8e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8e4:	e9cd 2300 	strd	r2, r3, [sp]
 800d8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	f7f2 fe82 	bl	80005f8 <__aeabi_dmul>
 800d8f4:	2222      	movs	r2, #34	; 0x22
 800d8f6:	b003      	add	sp, #12
 800d8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8fc:	f7ff bfe2 	b.w	800d8c4 <with_errno>

0800d900 <__math_uflow>:
 800d900:	b508      	push	{r3, lr}
 800d902:	2200      	movs	r2, #0
 800d904:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d908:	f7ff ffe6 	bl	800d8d8 <xflow>
 800d90c:	ec41 0b10 	vmov	d0, r0, r1
 800d910:	bd08      	pop	{r3, pc}

0800d912 <__math_oflow>:
 800d912:	b508      	push	{r3, lr}
 800d914:	2200      	movs	r2, #0
 800d916:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d91a:	f7ff ffdd 	bl	800d8d8 <xflow>
 800d91e:	ec41 0b10 	vmov	d0, r0, r1
 800d922:	bd08      	pop	{r3, pc}

0800d924 <with_errnof>:
 800d924:	b513      	push	{r0, r1, r4, lr}
 800d926:	4604      	mov	r4, r0
 800d928:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d92c:	f7fd f800 	bl	800a930 <__errno>
 800d930:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d934:	6004      	str	r4, [r0, #0]
 800d936:	b002      	add	sp, #8
 800d938:	bd10      	pop	{r4, pc}

0800d93a <xflowf>:
 800d93a:	b130      	cbz	r0, 800d94a <xflowf+0x10>
 800d93c:	eef1 7a40 	vneg.f32	s15, s0
 800d940:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d944:	2022      	movs	r0, #34	; 0x22
 800d946:	f7ff bfed 	b.w	800d924 <with_errnof>
 800d94a:	eef0 7a40 	vmov.f32	s15, s0
 800d94e:	e7f7      	b.n	800d940 <xflowf+0x6>

0800d950 <__math_uflowf>:
 800d950:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d958 <__math_uflowf+0x8>
 800d954:	f7ff bff1 	b.w	800d93a <xflowf>
 800d958:	10000000 	.word	0x10000000

0800d95c <__math_oflowf>:
 800d95c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d964 <__math_oflowf+0x8>
 800d960:	f7ff bfeb 	b.w	800d93a <xflowf>
 800d964:	70000000 	.word	0x70000000

0800d968 <fabs>:
 800d968:	ec51 0b10 	vmov	r0, r1, d0
 800d96c:	ee10 2a10 	vmov	r2, s0
 800d970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d974:	ec43 2b10 	vmov	d0, r2, r3
 800d978:	4770      	bx	lr

0800d97a <finite>:
 800d97a:	b082      	sub	sp, #8
 800d97c:	ed8d 0b00 	vstr	d0, [sp]
 800d980:	9801      	ldr	r0, [sp, #4]
 800d982:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d986:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d98a:	0fc0      	lsrs	r0, r0, #31
 800d98c:	b002      	add	sp, #8
 800d98e:	4770      	bx	lr

0800d990 <floor>:
 800d990:	ec51 0b10 	vmov	r0, r1, d0
 800d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d998:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d99c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d9a0:	2e13      	cmp	r6, #19
 800d9a2:	ee10 5a10 	vmov	r5, s0
 800d9a6:	ee10 8a10 	vmov	r8, s0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	dc32      	bgt.n	800da14 <floor+0x84>
 800d9ae:	2e00      	cmp	r6, #0
 800d9b0:	da14      	bge.n	800d9dc <floor+0x4c>
 800d9b2:	a333      	add	r3, pc, #204	; (adr r3, 800da80 <floor+0xf0>)
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fc68 	bl	800028c <__adddf3>
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2300      	movs	r3, #0
 800d9c0:	f7f3 f8aa 	bl	8000b18 <__aeabi_dcmpgt>
 800d9c4:	b138      	cbz	r0, 800d9d6 <floor+0x46>
 800d9c6:	2c00      	cmp	r4, #0
 800d9c8:	da57      	bge.n	800da7a <floor+0xea>
 800d9ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d9ce:	431d      	orrs	r5, r3
 800d9d0:	d001      	beq.n	800d9d6 <floor+0x46>
 800d9d2:	4c2d      	ldr	r4, [pc, #180]	; (800da88 <floor+0xf8>)
 800d9d4:	2500      	movs	r5, #0
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	4628      	mov	r0, r5
 800d9da:	e025      	b.n	800da28 <floor+0x98>
 800d9dc:	4f2b      	ldr	r7, [pc, #172]	; (800da8c <floor+0xfc>)
 800d9de:	4137      	asrs	r7, r6
 800d9e0:	ea01 0307 	and.w	r3, r1, r7
 800d9e4:	4303      	orrs	r3, r0
 800d9e6:	d01f      	beq.n	800da28 <floor+0x98>
 800d9e8:	a325      	add	r3, pc, #148	; (adr r3, 800da80 <floor+0xf0>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f7f2 fc4d 	bl	800028c <__adddf3>
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f7f3 f88f 	bl	8000b18 <__aeabi_dcmpgt>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d0eb      	beq.n	800d9d6 <floor+0x46>
 800d9fe:	2c00      	cmp	r4, #0
 800da00:	bfbe      	ittt	lt
 800da02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800da06:	fa43 f606 	asrlt.w	r6, r3, r6
 800da0a:	19a4      	addlt	r4, r4, r6
 800da0c:	ea24 0407 	bic.w	r4, r4, r7
 800da10:	2500      	movs	r5, #0
 800da12:	e7e0      	b.n	800d9d6 <floor+0x46>
 800da14:	2e33      	cmp	r6, #51	; 0x33
 800da16:	dd0b      	ble.n	800da30 <floor+0xa0>
 800da18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800da1c:	d104      	bne.n	800da28 <floor+0x98>
 800da1e:	ee10 2a10 	vmov	r2, s0
 800da22:	460b      	mov	r3, r1
 800da24:	f7f2 fc32 	bl	800028c <__adddf3>
 800da28:	ec41 0b10 	vmov	d0, r0, r1
 800da2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800da34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da38:	fa23 f707 	lsr.w	r7, r3, r7
 800da3c:	4207      	tst	r7, r0
 800da3e:	d0f3      	beq.n	800da28 <floor+0x98>
 800da40:	a30f      	add	r3, pc, #60	; (adr r3, 800da80 <floor+0xf0>)
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	f7f2 fc21 	bl	800028c <__adddf3>
 800da4a:	2200      	movs	r2, #0
 800da4c:	2300      	movs	r3, #0
 800da4e:	f7f3 f863 	bl	8000b18 <__aeabi_dcmpgt>
 800da52:	2800      	cmp	r0, #0
 800da54:	d0bf      	beq.n	800d9d6 <floor+0x46>
 800da56:	2c00      	cmp	r4, #0
 800da58:	da02      	bge.n	800da60 <floor+0xd0>
 800da5a:	2e14      	cmp	r6, #20
 800da5c:	d103      	bne.n	800da66 <floor+0xd6>
 800da5e:	3401      	adds	r4, #1
 800da60:	ea25 0507 	bic.w	r5, r5, r7
 800da64:	e7b7      	b.n	800d9d6 <floor+0x46>
 800da66:	2301      	movs	r3, #1
 800da68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800da6c:	fa03 f606 	lsl.w	r6, r3, r6
 800da70:	4435      	add	r5, r6
 800da72:	4545      	cmp	r5, r8
 800da74:	bf38      	it	cc
 800da76:	18e4      	addcc	r4, r4, r3
 800da78:	e7f2      	b.n	800da60 <floor+0xd0>
 800da7a:	2500      	movs	r5, #0
 800da7c:	462c      	mov	r4, r5
 800da7e:	e7aa      	b.n	800d9d6 <floor+0x46>
 800da80:	8800759c 	.word	0x8800759c
 800da84:	7e37e43c 	.word	0x7e37e43c
 800da88:	bff00000 	.word	0xbff00000
 800da8c:	000fffff 	.word	0x000fffff

0800da90 <nan>:
 800da90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da98 <nan+0x8>
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	00000000 	.word	0x00000000
 800da9c:	7ff80000 	.word	0x7ff80000

0800daa0 <scalbn>:
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	ec55 4b10 	vmov	r4, r5, d0
 800daa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800daaa:	4606      	mov	r6, r0
 800daac:	462b      	mov	r3, r5
 800daae:	b99a      	cbnz	r2, 800dad8 <scalbn+0x38>
 800dab0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dab4:	4323      	orrs	r3, r4
 800dab6:	d036      	beq.n	800db26 <scalbn+0x86>
 800dab8:	4b39      	ldr	r3, [pc, #228]	; (800dba0 <scalbn+0x100>)
 800daba:	4629      	mov	r1, r5
 800dabc:	ee10 0a10 	vmov	r0, s0
 800dac0:	2200      	movs	r2, #0
 800dac2:	f7f2 fd99 	bl	80005f8 <__aeabi_dmul>
 800dac6:	4b37      	ldr	r3, [pc, #220]	; (800dba4 <scalbn+0x104>)
 800dac8:	429e      	cmp	r6, r3
 800daca:	4604      	mov	r4, r0
 800dacc:	460d      	mov	r5, r1
 800dace:	da10      	bge.n	800daf2 <scalbn+0x52>
 800dad0:	a32b      	add	r3, pc, #172	; (adr r3, 800db80 <scalbn+0xe0>)
 800dad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad6:	e03a      	b.n	800db4e <scalbn+0xae>
 800dad8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dadc:	428a      	cmp	r2, r1
 800dade:	d10c      	bne.n	800dafa <scalbn+0x5a>
 800dae0:	ee10 2a10 	vmov	r2, s0
 800dae4:	4620      	mov	r0, r4
 800dae6:	4629      	mov	r1, r5
 800dae8:	f7f2 fbd0 	bl	800028c <__adddf3>
 800daec:	4604      	mov	r4, r0
 800daee:	460d      	mov	r5, r1
 800daf0:	e019      	b.n	800db26 <scalbn+0x86>
 800daf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800daf6:	460b      	mov	r3, r1
 800daf8:	3a36      	subs	r2, #54	; 0x36
 800dafa:	4432      	add	r2, r6
 800dafc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db00:	428a      	cmp	r2, r1
 800db02:	dd08      	ble.n	800db16 <scalbn+0x76>
 800db04:	2d00      	cmp	r5, #0
 800db06:	a120      	add	r1, pc, #128	; (adr r1, 800db88 <scalbn+0xe8>)
 800db08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db0c:	da1c      	bge.n	800db48 <scalbn+0xa8>
 800db0e:	a120      	add	r1, pc, #128	; (adr r1, 800db90 <scalbn+0xf0>)
 800db10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db14:	e018      	b.n	800db48 <scalbn+0xa8>
 800db16:	2a00      	cmp	r2, #0
 800db18:	dd08      	ble.n	800db2c <scalbn+0x8c>
 800db1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db26:	ec45 4b10 	vmov	d0, r4, r5
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
 800db2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db30:	da19      	bge.n	800db66 <scalbn+0xc6>
 800db32:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db36:	429e      	cmp	r6, r3
 800db38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800db3c:	dd0a      	ble.n	800db54 <scalbn+0xb4>
 800db3e:	a112      	add	r1, pc, #72	; (adr r1, 800db88 <scalbn+0xe8>)
 800db40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d1e2      	bne.n	800db0e <scalbn+0x6e>
 800db48:	a30f      	add	r3, pc, #60	; (adr r3, 800db88 <scalbn+0xe8>)
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f7f2 fd53 	bl	80005f8 <__aeabi_dmul>
 800db52:	e7cb      	b.n	800daec <scalbn+0x4c>
 800db54:	a10a      	add	r1, pc, #40	; (adr r1, 800db80 <scalbn+0xe0>)
 800db56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d0b8      	beq.n	800dad0 <scalbn+0x30>
 800db5e:	a10e      	add	r1, pc, #56	; (adr r1, 800db98 <scalbn+0xf8>)
 800db60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db64:	e7b4      	b.n	800dad0 <scalbn+0x30>
 800db66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db6a:	3236      	adds	r2, #54	; 0x36
 800db6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800db74:	4620      	mov	r0, r4
 800db76:	4b0c      	ldr	r3, [pc, #48]	; (800dba8 <scalbn+0x108>)
 800db78:	2200      	movs	r2, #0
 800db7a:	e7e8      	b.n	800db4e <scalbn+0xae>
 800db7c:	f3af 8000 	nop.w
 800db80:	c2f8f359 	.word	0xc2f8f359
 800db84:	01a56e1f 	.word	0x01a56e1f
 800db88:	8800759c 	.word	0x8800759c
 800db8c:	7e37e43c 	.word	0x7e37e43c
 800db90:	8800759c 	.word	0x8800759c
 800db94:	fe37e43c 	.word	0xfe37e43c
 800db98:	c2f8f359 	.word	0xc2f8f359
 800db9c:	81a56e1f 	.word	0x81a56e1f
 800dba0:	43500000 	.word	0x43500000
 800dba4:	ffff3cb0 	.word	0xffff3cb0
 800dba8:	3c900000 	.word	0x3c900000

0800dbac <fabsf>:
 800dbac:	ee10 3a10 	vmov	r3, s0
 800dbb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbb4:	ee00 3a10 	vmov	s0, r3
 800dbb8:	4770      	bx	lr

0800dbba <finitef>:
 800dbba:	b082      	sub	sp, #8
 800dbbc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dbc0:	9801      	ldr	r0, [sp, #4]
 800dbc2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dbc6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800dbca:	bfac      	ite	ge
 800dbcc:	2000      	movge	r0, #0
 800dbce:	2001      	movlt	r0, #1
 800dbd0:	b002      	add	sp, #8
 800dbd2:	4770      	bx	lr

0800dbd4 <scalbnf>:
 800dbd4:	ee10 3a10 	vmov	r3, s0
 800dbd8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dbdc:	d025      	beq.n	800dc2a <scalbnf+0x56>
 800dbde:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dbe2:	d302      	bcc.n	800dbea <scalbnf+0x16>
 800dbe4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dbe8:	4770      	bx	lr
 800dbea:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800dbee:	d122      	bne.n	800dc36 <scalbnf+0x62>
 800dbf0:	4b2a      	ldr	r3, [pc, #168]	; (800dc9c <scalbnf+0xc8>)
 800dbf2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800dca0 <scalbnf+0xcc>
 800dbf6:	4298      	cmp	r0, r3
 800dbf8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dbfc:	db16      	blt.n	800dc2c <scalbnf+0x58>
 800dbfe:	ee10 3a10 	vmov	r3, s0
 800dc02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dc06:	3a19      	subs	r2, #25
 800dc08:	4402      	add	r2, r0
 800dc0a:	2afe      	cmp	r2, #254	; 0xfe
 800dc0c:	dd15      	ble.n	800dc3a <scalbnf+0x66>
 800dc0e:	ee10 3a10 	vmov	r3, s0
 800dc12:	eddf 7a24 	vldr	s15, [pc, #144]	; 800dca4 <scalbnf+0xd0>
 800dc16:	eddf 6a24 	vldr	s13, [pc, #144]	; 800dca8 <scalbnf+0xd4>
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	eeb0 7a67 	vmov.f32	s14, s15
 800dc20:	bfb8      	it	lt
 800dc22:	eef0 7a66 	vmovlt.f32	s15, s13
 800dc26:	ee27 0a27 	vmul.f32	s0, s14, s15
 800dc2a:	4770      	bx	lr
 800dc2c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dcac <scalbnf+0xd8>
 800dc30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dc34:	4770      	bx	lr
 800dc36:	0dd2      	lsrs	r2, r2, #23
 800dc38:	e7e6      	b.n	800dc08 <scalbnf+0x34>
 800dc3a:	2a00      	cmp	r2, #0
 800dc3c:	dd06      	ble.n	800dc4c <scalbnf+0x78>
 800dc3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc42:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dc46:	ee00 3a10 	vmov	s0, r3
 800dc4a:	4770      	bx	lr
 800dc4c:	f112 0f16 	cmn.w	r2, #22
 800dc50:	da1a      	bge.n	800dc88 <scalbnf+0xb4>
 800dc52:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dc56:	4298      	cmp	r0, r3
 800dc58:	ee10 3a10 	vmov	r3, s0
 800dc5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc60:	dd0a      	ble.n	800dc78 <scalbnf+0xa4>
 800dc62:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800dca4 <scalbnf+0xd0>
 800dc66:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800dca8 <scalbnf+0xd4>
 800dc6a:	eef0 7a40 	vmov.f32	s15, s0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bf18      	it	ne
 800dc72:	eeb0 0a47 	vmovne.f32	s0, s14
 800dc76:	e7db      	b.n	800dc30 <scalbnf+0x5c>
 800dc78:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800dcac <scalbnf+0xd8>
 800dc7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800dcb0 <scalbnf+0xdc>
 800dc80:	eef0 7a40 	vmov.f32	s15, s0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	e7f3      	b.n	800dc70 <scalbnf+0x9c>
 800dc88:	3219      	adds	r2, #25
 800dc8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc8e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dc92:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dcb4 <scalbnf+0xe0>
 800dc96:	ee07 3a10 	vmov	s14, r3
 800dc9a:	e7c4      	b.n	800dc26 <scalbnf+0x52>
 800dc9c:	ffff3cb0 	.word	0xffff3cb0
 800dca0:	4c000000 	.word	0x4c000000
 800dca4:	7149f2ca 	.word	0x7149f2ca
 800dca8:	f149f2ca 	.word	0xf149f2ca
 800dcac:	0da24260 	.word	0x0da24260
 800dcb0:	8da24260 	.word	0x8da24260
 800dcb4:	33000000 	.word	0x33000000

0800dcb8 <_init>:
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	bf00      	nop
 800dcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcbe:	bc08      	pop	{r3}
 800dcc0:	469e      	mov	lr, r3
 800dcc2:	4770      	bx	lr

0800dcc4 <_fini>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	bf00      	nop
 800dcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcca:	bc08      	pop	{r3}
 800dccc:	469e      	mov	lr, r3
 800dcce:	4770      	bx	lr
