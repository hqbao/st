
drone-stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f8  080069f8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a00  08006a00  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000004bc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000538  20000538  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a9b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e9  00000000  00000000  00033b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  000371f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022633  00000000  00000000  000382e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015745  00000000  00000000  0005a913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0521  00000000  00000000  00070058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140579  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000511c  00000000  00000000  001405cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006974 	.word	0x08006974

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006974 	.word	0x08006974

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000608:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800060c:	f000 b974 	b.w	80008f8 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468e      	mov	lr, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d14d      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000636:	428a      	cmp	r2, r1
 8000638:	4694      	mov	ip, r2
 800063a:	d969      	bls.n	8000710 <__udivmoddi4+0xe8>
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	b152      	cbz	r2, 8000658 <__udivmoddi4+0x30>
 8000642:	fa01 f302 	lsl.w	r3, r1, r2
 8000646:	f1c2 0120 	rsb	r1, r2, #32
 800064a:	fa20 f101 	lsr.w	r1, r0, r1
 800064e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000652:	ea41 0e03 	orr.w	lr, r1, r3
 8000656:	4094      	lsls	r4, r2
 8000658:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800065c:	0c21      	lsrs	r1, r4, #16
 800065e:	fbbe f6f8 	udiv	r6, lr, r8
 8000662:	fa1f f78c 	uxth.w	r7, ip
 8000666:	fb08 e316 	mls	r3, r8, r6, lr
 800066a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066e:	fb06 f107 	mul.w	r1, r6, r7
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800067e:	f080 811f 	bcs.w	80008c0 <__udivmoddi4+0x298>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 811c 	bls.w	80008c0 <__udivmoddi4+0x298>
 8000688:	3e02      	subs	r6, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a5b      	subs	r3, r3, r1
 800068e:	b2a4      	uxth	r4, r4
 8000690:	fbb3 f0f8 	udiv	r0, r3, r8
 8000694:	fb08 3310 	mls	r3, r8, r0, r3
 8000698:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800069c:	fb00 f707 	mul.w	r7, r0, r7
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x92>
 80006a4:	eb1c 0404 	adds.w	r4, ip, r4
 80006a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ac:	f080 810a 	bcs.w	80008c4 <__udivmoddi4+0x29c>
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	f240 8107 	bls.w	80008c4 <__udivmoddi4+0x29c>
 80006b6:	4464      	add	r4, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006be:	1be4      	subs	r4, r4, r7
 80006c0:	2600      	movs	r6, #0
 80006c2:	b11d      	cbz	r5, 80006cc <__udivmoddi4+0xa4>
 80006c4:	40d4      	lsrs	r4, r2
 80006c6:	2300      	movs	r3, #0
 80006c8:	e9c5 4300 	strd	r4, r3, [r5]
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d909      	bls.n	80006ea <__udivmoddi4+0xc2>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	f000 80ef 	beq.w	80008ba <__udivmoddi4+0x292>
 80006dc:	2600      	movs	r6, #0
 80006de:	e9c5 0100 	strd	r0, r1, [r5]
 80006e2:	4630      	mov	r0, r6
 80006e4:	4631      	mov	r1, r6
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	fab3 f683 	clz	r6, r3
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d14a      	bne.n	8000788 <__udivmoddi4+0x160>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0xd4>
 80006f6:	4282      	cmp	r2, r0
 80006f8:	f200 80f9 	bhi.w	80008ee <__udivmoddi4+0x2c6>
 80006fc:	1a84      	subs	r4, r0, r2
 80006fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	469e      	mov	lr, r3
 8000706:	2d00      	cmp	r5, #0
 8000708:	d0e0      	beq.n	80006cc <__udivmoddi4+0xa4>
 800070a:	e9c5 4e00 	strd	r4, lr, [r5]
 800070e:	e7dd      	b.n	80006cc <__udivmoddi4+0xa4>
 8000710:	b902      	cbnz	r2, 8000714 <__udivmoddi4+0xec>
 8000712:	deff      	udf	#255	; 0xff
 8000714:	fab2 f282 	clz	r2, r2
 8000718:	2a00      	cmp	r2, #0
 800071a:	f040 8092 	bne.w	8000842 <__udivmoddi4+0x21a>
 800071e:	eba1 010c 	sub.w	r1, r1, ip
 8000722:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000726:	fa1f fe8c 	uxth.w	lr, ip
 800072a:	2601      	movs	r6, #1
 800072c:	0c20      	lsrs	r0, r4, #16
 800072e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000732:	fb07 1113 	mls	r1, r7, r3, r1
 8000736:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800073a:	fb0e f003 	mul.w	r0, lr, r3
 800073e:	4288      	cmp	r0, r1
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0x12c>
 8000742:	eb1c 0101 	adds.w	r1, ip, r1
 8000746:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x12a>
 800074c:	4288      	cmp	r0, r1
 800074e:	f200 80cb 	bhi.w	80008e8 <__udivmoddi4+0x2c0>
 8000752:	4643      	mov	r3, r8
 8000754:	1a09      	subs	r1, r1, r0
 8000756:	b2a4      	uxth	r4, r4
 8000758:	fbb1 f0f7 	udiv	r0, r1, r7
 800075c:	fb07 1110 	mls	r1, r7, r0, r1
 8000760:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000764:	fb0e fe00 	mul.w	lr, lr, r0
 8000768:	45a6      	cmp	lr, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x156>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000774:	d202      	bcs.n	800077c <__udivmoddi4+0x154>
 8000776:	45a6      	cmp	lr, r4
 8000778:	f200 80bb 	bhi.w	80008f2 <__udivmoddi4+0x2ca>
 800077c:	4608      	mov	r0, r1
 800077e:	eba4 040e 	sub.w	r4, r4, lr
 8000782:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000786:	e79c      	b.n	80006c2 <__udivmoddi4+0x9a>
 8000788:	f1c6 0720 	rsb	r7, r6, #32
 800078c:	40b3      	lsls	r3, r6
 800078e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000792:	ea4c 0c03 	orr.w	ip, ip, r3
 8000796:	fa20 f407 	lsr.w	r4, r0, r7
 800079a:	fa01 f306 	lsl.w	r3, r1, r6
 800079e:	431c      	orrs	r4, r3
 80007a0:	40f9      	lsrs	r1, r7
 80007a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a6:	fa00 f306 	lsl.w	r3, r0, r6
 80007aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ae:	0c20      	lsrs	r0, r4, #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fb09 1118 	mls	r1, r9, r8, r1
 80007b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007bc:	fb08 f00e 	mul.w	r0, r8, lr
 80007c0:	4288      	cmp	r0, r1
 80007c2:	fa02 f206 	lsl.w	r2, r2, r6
 80007c6:	d90b      	bls.n	80007e0 <__udivmoddi4+0x1b8>
 80007c8:	eb1c 0101 	adds.w	r1, ip, r1
 80007cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007d0:	f080 8088 	bcs.w	80008e4 <__udivmoddi4+0x2bc>
 80007d4:	4288      	cmp	r0, r1
 80007d6:	f240 8085 	bls.w	80008e4 <__udivmoddi4+0x2bc>
 80007da:	f1a8 0802 	sub.w	r8, r8, #2
 80007de:	4461      	add	r1, ip
 80007e0:	1a09      	subs	r1, r1, r0
 80007e2:	b2a4      	uxth	r4, r4
 80007e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e8:	fb09 1110 	mls	r1, r9, r0, r1
 80007ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f4:	458e      	cmp	lr, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x1e2>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000800:	d26c      	bcs.n	80008dc <__udivmoddi4+0x2b4>
 8000802:	458e      	cmp	lr, r1
 8000804:	d96a      	bls.n	80008dc <__udivmoddi4+0x2b4>
 8000806:	3802      	subs	r0, #2
 8000808:	4461      	add	r1, ip
 800080a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080e:	fba0 9402 	umull	r9, r4, r0, r2
 8000812:	eba1 010e 	sub.w	r1, r1, lr
 8000816:	42a1      	cmp	r1, r4
 8000818:	46c8      	mov	r8, r9
 800081a:	46a6      	mov	lr, r4
 800081c:	d356      	bcc.n	80008cc <__udivmoddi4+0x2a4>
 800081e:	d053      	beq.n	80008c8 <__udivmoddi4+0x2a0>
 8000820:	b15d      	cbz	r5, 800083a <__udivmoddi4+0x212>
 8000822:	ebb3 0208 	subs.w	r2, r3, r8
 8000826:	eb61 010e 	sbc.w	r1, r1, lr
 800082a:	fa01 f707 	lsl.w	r7, r1, r7
 800082e:	fa22 f306 	lsr.w	r3, r2, r6
 8000832:	40f1      	lsrs	r1, r6
 8000834:	431f      	orrs	r7, r3
 8000836:	e9c5 7100 	strd	r7, r1, [r5]
 800083a:	2600      	movs	r6, #0
 800083c:	4631      	mov	r1, r6
 800083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	40d8      	lsrs	r0, r3
 8000848:	fa0c fc02 	lsl.w	ip, ip, r2
 800084c:	fa21 f303 	lsr.w	r3, r1, r3
 8000850:	4091      	lsls	r1, r2
 8000852:	4301      	orrs	r1, r0
 8000854:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000858:	fa1f fe8c 	uxth.w	lr, ip
 800085c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000860:	fb07 3610 	mls	r6, r7, r0, r3
 8000864:	0c0b      	lsrs	r3, r1, #16
 8000866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800086a:	fb00 f60e 	mul.w	r6, r0, lr
 800086e:	429e      	cmp	r6, r3
 8000870:	fa04 f402 	lsl.w	r4, r4, r2
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x260>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800087e:	d22f      	bcs.n	80008e0 <__udivmoddi4+0x2b8>
 8000880:	429e      	cmp	r6, r3
 8000882:	d92d      	bls.n	80008e0 <__udivmoddi4+0x2b8>
 8000884:	3802      	subs	r0, #2
 8000886:	4463      	add	r3, ip
 8000888:	1b9b      	subs	r3, r3, r6
 800088a:	b289      	uxth	r1, r1
 800088c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000890:	fb07 3316 	mls	r3, r7, r6, r3
 8000894:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000898:	fb06 f30e 	mul.w	r3, r6, lr
 800089c:	428b      	cmp	r3, r1
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x28a>
 80008a0:	eb1c 0101 	adds.w	r1, ip, r1
 80008a4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008a8:	d216      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d914      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 80008ae:	3e02      	subs	r6, #2
 80008b0:	4461      	add	r1, ip
 80008b2:	1ac9      	subs	r1, r1, r3
 80008b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b8:	e738      	b.n	800072c <__udivmoddi4+0x104>
 80008ba:	462e      	mov	r6, r5
 80008bc:	4628      	mov	r0, r5
 80008be:	e705      	b.n	80006cc <__udivmoddi4+0xa4>
 80008c0:	4606      	mov	r6, r0
 80008c2:	e6e3      	b.n	800068c <__udivmoddi4+0x64>
 80008c4:	4618      	mov	r0, r3
 80008c6:	e6f8      	b.n	80006ba <__udivmoddi4+0x92>
 80008c8:	454b      	cmp	r3, r9
 80008ca:	d2a9      	bcs.n	8000820 <__udivmoddi4+0x1f8>
 80008cc:	ebb9 0802 	subs.w	r8, r9, r2
 80008d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d4:	3801      	subs	r0, #1
 80008d6:	e7a3      	b.n	8000820 <__udivmoddi4+0x1f8>
 80008d8:	4646      	mov	r6, r8
 80008da:	e7ea      	b.n	80008b2 <__udivmoddi4+0x28a>
 80008dc:	4620      	mov	r0, r4
 80008de:	e794      	b.n	800080a <__udivmoddi4+0x1e2>
 80008e0:	4640      	mov	r0, r8
 80008e2:	e7d1      	b.n	8000888 <__udivmoddi4+0x260>
 80008e4:	46d0      	mov	r8, sl
 80008e6:	e77b      	b.n	80007e0 <__udivmoddi4+0x1b8>
 80008e8:	3b02      	subs	r3, #2
 80008ea:	4461      	add	r1, ip
 80008ec:	e732      	b.n	8000754 <__udivmoddi4+0x12c>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e709      	b.n	8000706 <__udivmoddi4+0xde>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	e742      	b.n	800077e <__udivmoddi4+0x156>

080008f8 <__aeabi_idiv0>:
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <MPU6050_Init>:
uint8_t MPU6050_tx;
float MPU6050_Gyro_LSB = 32.8;
float MPU6050_Acc_LSB = 4096.0;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af04      	add	r7, sp, #16
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	4608      	mov	r0, r1
 8000906:	4611      	mov	r1, r2
 8000908:	461a      	mov	r2, r3
 800090a:	4603      	mov	r3, r0
 800090c:	70fb      	strb	r3, [r7, #3]
 800090e:	460b      	mov	r3, r1
 8000910:	70bb      	strb	r3, [r7, #2]
 8000912:	4613      	mov	r3, r2
 8000914:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d81b      	bhi.n	8000954 <MPU6050_Init+0x58>
 800091c:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <MPU6050_Init+0x28>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	0800093d 	.word	0x0800093d
 800092c:	08000945 	.word	0x08000945
 8000930:	0800094d 	.word	0x0800094d
	{
	case 0: //250dps
		MPU6050_Gyro_LSB = 131.0;
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <MPU6050_Init+0x194>)
 8000936:	4a57      	ldr	r2, [pc, #348]	; (8000a94 <MPU6050_Init+0x198>)
 8000938:	601a      	str	r2, [r3, #0]
		break;
 800093a:	e00c      	b.n	8000956 <MPU6050_Init+0x5a>
	case 1: //500dps
		MPU6050_Gyro_LSB = 65.5;
 800093c:	4b54      	ldr	r3, [pc, #336]	; (8000a90 <MPU6050_Init+0x194>)
 800093e:	4a56      	ldr	r2, [pc, #344]	; (8000a98 <MPU6050_Init+0x19c>)
 8000940:	601a      	str	r2, [r3, #0]
		break;
 8000942:	e008      	b.n	8000956 <MPU6050_Init+0x5a>
	case 2: //1000dps
		MPU6050_Gyro_LSB = 32.8;
 8000944:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <MPU6050_Init+0x194>)
 8000946:	4a55      	ldr	r2, [pc, #340]	; (8000a9c <MPU6050_Init+0x1a0>)
 8000948:	601a      	str	r2, [r3, #0]
		break;
 800094a:	e004      	b.n	8000956 <MPU6050_Init+0x5a>
	case 3: //2000dps
		MPU6050_Gyro_LSB = 16.4;
 800094c:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <MPU6050_Init+0x194>)
 800094e:	4a54      	ldr	r2, [pc, #336]	; (8000aa0 <MPU6050_Init+0x1a4>)
 8000950:	601a      	str	r2, [r3, #0]
		break;
 8000952:	e000      	b.n	8000956 <MPU6050_Init+0x5a>
	default:
		break;
 8000954:	bf00      	nop
	}

	switch(Acc_FS)
 8000956:	78bb      	ldrb	r3, [r7, #2]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d81f      	bhi.n	800099c <MPU6050_Init+0xa0>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <MPU6050_Init+0x68>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000975 	.word	0x08000975
 8000968:	0800097f 	.word	0x0800097f
 800096c:	08000989 	.word	0x08000989
 8000970:	08000993 	.word	0x08000993
	{
	case 0: //2g
		MPU6050_Acc_LSB = 16384.0;
 8000974:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <MPU6050_Init+0x1a8>)
 8000976:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800097a:	601a      	str	r2, [r3, #0]
		break;
 800097c:	e00f      	b.n	800099e <MPU6050_Init+0xa2>
	case 1: //4g
		MPU6050_Acc_LSB = 8192.0;
 800097e:	4b49      	ldr	r3, [pc, #292]	; (8000aa4 <MPU6050_Init+0x1a8>)
 8000980:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000984:	601a      	str	r2, [r3, #0]
		break;
 8000986:	e00a      	b.n	800099e <MPU6050_Init+0xa2>
	case 2: //8g
		MPU6050_Acc_LSB = 4096.0;
 8000988:	4b46      	ldr	r3, [pc, #280]	; (8000aa4 <MPU6050_Init+0x1a8>)
 800098a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800098e:	601a      	str	r2, [r3, #0]
		break;
 8000990:	e005      	b.n	800099e <MPU6050_Init+0xa2>
	case 3: //16g
		MPU6050_Acc_LSB = 2048.0;
 8000992:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <MPU6050_Init+0x1a8>)
 8000994:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000998:	601a      	str	r2, [r3, #0]
		break;
 800099a:	e000      	b.n	800099e <MPU6050_Init+0xa2>
	default:
		break;
 800099c:	bf00      	nop
	}

	// Read Who am I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &MPU6050_rx, 1, 100);
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	2301      	movs	r3, #1
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <MPU6050_Init+0x1ac>)
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	2275      	movs	r2, #117	; 0x75
 80009ae:	21d0      	movs	r1, #208	; 0xd0
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f002 f853 	bl	8002a5c <HAL_I2C_Mem_Read>
	MPU6050_tx = 0; //Will return this value if code ends here
 80009b6:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <MPU6050_Init+0x1b0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]

	// 0x68 will be returned if sensor accessed correctly
	if (MPU6050_rx == 0x68)
 80009bc:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <MPU6050_Init+0x1ac>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b68      	cmp	r3, #104	; 0x68
 80009c2:	d15f      	bne.n	8000a84 <MPU6050_Init+0x188>
	{
		MPU6050_tx = 0;
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <MPU6050_Init+0x1b0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1, 100);
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	2301      	movs	r3, #1
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <MPU6050_Init+0x1b0>)
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	226b      	movs	r2, #107	; 0x6b
 80009da:	21d0      	movs	r1, #208	; 0xd0
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f001 ff43 	bl	8002868 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f001 fa64 	bl	8001eb0 <HAL_Delay>

		MPU6050_tx = 0x00; // Set No Sampling
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <MPU6050_Init+0x1b0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &MPU6050_tx, 1, 100);
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	2301      	movs	r3, #1
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MPU6050_Init+0x1b0>)
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2301      	movs	r3, #1
 80009fc:	2219      	movs	r2, #25
 80009fe:	21d0      	movs	r1, #208	; 0xd0
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f001 ff31 	bl	8002868 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f001 fa52 	bl	8001eb0 <HAL_Delay>

		MPU6050_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <MPU6050_Init+0x1b0>)
 8000a0e:	787b      	ldrb	r3, [r7, #1]
 8000a10:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, CONFIG_REG, 1, &MPU6050_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MPU6050_Init+0x1b0>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	221a      	movs	r2, #26
 8000a22:	21d0      	movs	r1, #208	; 0xd0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f001 ff1f 	bl	8002868 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f001 fa40 	bl	8001eb0 <HAL_Delay>

		MPU6050_tx = Gyro_FS << 3;
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MPU6050_Init+0x1b0>)
 8000a38:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &MPU6050_tx, 1, 100);
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MPU6050_Init+0x1b0>)
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	221b      	movs	r2, #27
 8000a4a:	21d0      	movs	r1, #208	; 0xd0
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f001 ff0b 	bl	8002868 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a52:	200a      	movs	r0, #10
 8000a54:	f001 fa2c 	bl	8001eb0 <HAL_Delay>

		MPU6050_tx = Acc_FS << 3;
 8000a58:	78bb      	ldrb	r3, [r7, #2]
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MPU6050_Init+0x1b0>)
 8000a60:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &MPU6050_tx, 1, 100);
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MPU6050_Init+0x1b0>)
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	221c      	movs	r2, #28
 8000a72:	21d0      	movs	r1, #208	; 0xd0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f001 fef7 	bl	8002868 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f001 fa18 	bl	8001eb0 <HAL_Delay>

		return 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e000      	b.n	8000a86 <MPU6050_Init+0x18a>
	}
	return 1;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000000 	.word	0x20000000
 8000a94:	43030000 	.word	0x43030000
 8000a98:	42830000 	.word	0x42830000
 8000a9c:	42033333 	.word	0x42033333
 8000aa0:	41833333 	.word	0x41833333
 8000aa4:	20000004 	.word	0x20000004
 8000aa8:	20000098 	.word	0x20000098
 8000aac:	20000099 	.word	0x20000099

08000ab0 <MPU6050_Bypass>:

void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af04      	add	r7, sp, #16
 8000ab6:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00000000; //
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MPU6050_Bypass+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Disable
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MPU6050_Bypass+0x58>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	226a      	movs	r2, #106	; 0x6a
 8000ace:	21d0      	movs	r1, #208	; 0xd0
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f001 fec9 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f001 f9ea 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0b00000010; //
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MPU6050_Bypass+0x58>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Bypass Enable
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MPU6050_Bypass+0x58>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2237      	movs	r2, #55	; 0x37
 8000af2:	21d0      	movs	r1, #208	; 0xd0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f001 feb7 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000afa:	200a      	movs	r0, #10
 8000afc:	f001 f9d8 	bl	8001eb0 <HAL_Delay>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000099 	.word	0x20000099

08000b0c <MPU6050_Master>:

void MPU6050_Master(I2C_HandleTypeDef *I2Cx)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0x00; //
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <MPU6050_Master+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Disable Bypass
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MPU6050_Master+0xa0>)
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	2237      	movs	r2, #55	; 0x37
 8000b2a:	21d0      	movs	r1, #208	; 0xd0
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f001 fe9b 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b32:	200a      	movs	r0, #10
 8000b34:	f001 f9bc 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0b00100010; //
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MPU6050_Master+0xa0>)
 8000b3a:	2222      	movs	r2, #34	; 0x22
 8000b3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Enable
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	2301      	movs	r3, #1
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MPU6050_Master+0xa0>)
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	226a      	movs	r2, #106	; 0x6a
 8000b4e:	21d0      	movs	r1, #208	; 0xd0
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f001 fe89 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f001 f9aa 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0b00001101; //
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MPU6050_Master+0xa0>)
 8000b5e:	220d      	movs	r2, #13
 8000b60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x24, 1, &MPU6050_tx, 1, 100); //Master Clock to 400kHz
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2301      	movs	r3, #1
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MPU6050_Master+0xa0>)
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	2224      	movs	r2, #36	; 0x24
 8000b72:	21d0      	movs	r1, #208	; 0xd0
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f001 fe77 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f001 f998 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0x00;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MPU6050_Master+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1, 100);
 8000b86:	2364      	movs	r3, #100	; 0x64
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MPU6050_Master+0xa0>)
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2301      	movs	r3, #1
 8000b94:	226b      	movs	r2, #107	; 0x6b
 8000b96:	21d0      	movs	r1, #208	; 0xd0
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f001 fe65 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f001 f986 	bl	8001eb0 <HAL_Delay>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000099 	.word	0x20000099

08000bb0 <HMC5883L_Setup>:

void HMC5883L_Setup(I2C_HandleTypeDef *I2Cx)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af04      	add	r7, sp, #16
 8000bb6:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00011000; //Fill Slave0 DO
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HMC5883L_Setup+0x7c>)
 8000bba:	2218      	movs	r2, #24
 8000bbc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x00, 1, &MPU6050_tx, 1, 100);
 8000bbe:	2364      	movs	r3, #100	; 0x64
 8000bc0:	9302      	str	r3, [sp, #8]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HMC5883L_Setup+0x7c>)
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	213c      	movs	r1, #60	; 0x3c
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f001 fe49 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f001 f96a 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0b00100000; //Fill Slave0 DO
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HMC5883L_Setup+0x7c>)
 8000bde:	2220      	movs	r2, #32
 8000be0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x01, 1, &MPU6050_tx, 1, 100);
 8000be2:	2364      	movs	r3, #100	; 0x64
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	2301      	movs	r3, #1
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HMC5883L_Setup+0x7c>)
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	213c      	movs	r1, #60	; 0x3c
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f001 fe37 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f001 f958 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0x00;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HMC5883L_Setup+0x7c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x02, 1, &MPU6050_tx, 1, 100); //Mode: Continuous
 8000c06:	2364      	movs	r3, #100	; 0x64
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HMC5883L_Setup+0x7c>)
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	2202      	movs	r2, #2
 8000c16:	213c      	movs	r1, #60	; 0x3c
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 fe25 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f001 f946 	bl	8001eb0 <HAL_Delay>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000099 	.word	0x20000099

08000c30 <MPU6050_Slave_Read>:

void MPU6050_Slave_Read(I2C_HandleTypeDef *I2Cx)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	6078      	str	r0, [r7, #4]
	MPU6050_tx = HMC5883L_ADDRESS | 0x80; //Access Slave into read mode
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MPU6050_Slave_Read+0x7c>)
 8000c3a:	229e      	movs	r2, #158	; 0x9e
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x25, 1, &MPU6050_tx, 1, 100);
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MPU6050_Slave_Read+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2225      	movs	r2, #37	; 0x25
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f001 fe09 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f001 f92a 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0x03; //Slave REG for reading to take place
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MPU6050_Slave_Read+0x7c>)
 8000c5e:	2203      	movs	r2, #3
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x26, 1, &MPU6050_tx, 1, 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MPU6050_Slave_Read+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2226      	movs	r2, #38	; 0x26
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f001 fdf7 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 f918 	bl	8001eb0 <HAL_Delay>

	MPU6050_tx = 0x80 | 0x06; //Number of data bytes
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MPU6050_Slave_Read+0x7c>)
 8000c82:	2286      	movs	r2, #134	; 0x86
 8000c84:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x27, 1, &MPU6050_tx, 1, 100);
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MPU6050_Slave_Read+0x7c>)
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2301      	movs	r3, #1
 8000c94:	2227      	movs	r2, #39	; 0x27
 8000c96:	21d0      	movs	r1, #208	; 0xd0
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f001 fde5 	bl	8002868 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f001 f906 	bl	8001eb0 <HAL_Delay>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000099 	.word	0x20000099

08000cb0 <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8000cc0:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	609a      	str	r2, [r3, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	460a      	mov	r2, r1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e024      	b.n	8000d44 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d103      	bne.n	8000d08 <flash+0x24>
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4816      	ldr	r0, [pc, #88]	; (8000d5c <flash+0x78>)
 8000d04:	f001 fc51 	bl	80025aa <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <flash+0x32>
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <flash+0x78>)
 8000d12:	f001 fc4a 	bl	80025aa <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f001 f8ca 	bl	8001eb0 <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d103      	bne.n	8000d2a <flash+0x46>
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <flash+0x78>)
 8000d26:	f001 fc40 	bl	80025aa <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d103      	bne.n	8000d38 <flash+0x54>
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <flash+0x78>)
 8000d34:	f001 fc39 	bl	80025aa <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000d38:	2064      	movs	r0, #100	; 0x64
 8000d3a:	f001 f8b9 	bl	8001eb0 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbd6      	blt.n	8000cfa <flash+0x16>
  }

  HAL_Delay(200);
 8000d4c:	20c8      	movs	r0, #200	; 0xc8
 8000d4e:	f001 f8af 	bl	8001eb0 <HAL_Delay>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40020000 	.word	0x40020000

08000d60 <console>:

// Monitor console
void console(const char *str) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fa31 	bl	80001d0 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <console+0x24>)
 8000d78:	f004 f9f7 	bl	800516a <HAL_UART_Transmit_IT>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000268 	.word	0x20000268

08000d88 <monitor>:

char g_console_msg[256] = {0};
void monitor(float x1, float x2, float x3,
    float x4, float x5, float x6, float x7, float x8, float x9) {
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b093      	sub	sp, #76	; 0x4c
 8000d8c:	af08      	add	r7, sp, #32
 8000d8e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000d92:	edc7 0a08 	vstr	s1, [r7, #32]
 8000d96:	ed87 1a07 	vstr	s2, [r7, #28]
 8000d9a:	edc7 1a06 	vstr	s3, [r7, #24]
 8000d9e:	ed87 2a05 	vstr	s4, [r7, #20]
 8000da2:	edc7 2a04 	vstr	s5, [r7, #16]
 8000da6:	ed87 3a03 	vstr	s6, [r7, #12]
 8000daa:	edc7 3a02 	vstr	s7, [r7, #8]
 8000dae:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 8000db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db6:	2100      	movs	r1, #0
 8000db8:	4837      	ldr	r0, [pc, #220]	; (8000e98 <monitor+0x110>)
 8000dba:	f005 f965 	bl	8006088 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8000dbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000dc2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000e9c <monitor+0x114>
 8000dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000dca:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8000dce:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dd2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000e9c <monitor+0x114>
 8000dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000dda:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8000dde:	edd7 7a07 	vldr	s15, [r7, #28]
 8000de2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000e9c <monitor+0x114>
 8000de6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dee:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8000df2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000e9c <monitor+0x114>
 8000dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e02:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 8000e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000e9c <monitor+0x114>
 8000e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e16:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 8000e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e1e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000e9c <monitor+0x114>
 8000e22:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e2a:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 8000e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e32:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000e9c <monitor+0x114>
 8000e36:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3e:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 8000e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e46:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000e9c <monitor+0x114>
 8000e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e52:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 8000e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e9c <monitor+0x114>
 8000e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e66:	ee17 6a90 	vmov	r6, s15
 8000e6a:	9606      	str	r6, [sp, #24]
 8000e6c:	9505      	str	r5, [sp, #20]
 8000e6e:	9404      	str	r4, [sp, #16]
 8000e70:	9003      	str	r0, [sp, #12]
 8000e72:	9102      	str	r1, [sp, #8]
 8000e74:	9201      	str	r2, [sp, #4]
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	ee16 3a10 	vmov	r3, s12
 8000e7c:	ee16 2a90 	vmov	r2, s13
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <monitor+0x118>)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <monitor+0x110>)
 8000e84:	f005 f908 	bl	8006098 <siprintf>
  console(g_console_msg);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <monitor+0x110>)
 8000e8a:	f7ff ff69 	bl	8000d60 <console>
}
 8000e8e:	bf00      	nop
 8000e90:	372c      	adds	r7, #44	; 0x2c
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000404 	.word	0x20000404
 8000e9c:	47c35000 	.word	0x47c35000
 8000ea0:	0800698c 	.word	0x0800698c

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 ff90 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f8a2 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 fb8e 	bl	80015d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eb4:	f000 f908 	bl	80010c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eb8:	f000 f96a 	bl	8001190 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ebc:	f000 fa2c 	bl	8001318 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ec0:	f000 fac0 	bl	8001444 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ec4:	f000 fb0c 	bl	80014e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000ec8:	f000 fb58 	bl	800157c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000ecc:	f000 f92a 	bl	8001124 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  flash(1, 3);
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff ff06 	bl	8000ce4 <flash>

  // Initialise Kalman filters
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 0.01);
 8000ed8:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8000fc0 <main+0x11c>
 8000edc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ee0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000ee4:	4837      	ldr	r0, [pc, #220]	; (8000fc4 <main+0x120>)
 8000ee6:	f7ff fee3 	bl	8000cb0 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 0.01);
 8000eea:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8000fc0 <main+0x11c>
 8000eee:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ef2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000ef6:	4834      	ldr	r0, [pc, #208]	; (8000fc8 <main+0x124>)
 8000ef8:	f7ff feda 	bl	8000cb0 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 0.01);
 8000efc:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8000fc0 <main+0x11c>
 8000f00:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000f04:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000f08:	4830      	ldr	r0, [pc, #192]	; (8000fcc <main+0x128>)
 8000f0a:	f7ff fed1 	bl	8000cb0 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 0.01);
 8000f0e:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8000fc0 <main+0x11c>
 8000f12:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000f16:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000f1a:	482d      	ldr	r0, [pc, #180]	; (8000fd0 <main+0x12c>)
 8000f1c:	f7ff fec8 	bl	8000cb0 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 0.01);
 8000f20:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8000fc0 <main+0x11c>
 8000f24:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000f28:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000f2c:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <main+0x130>)
 8000f2e:	f7ff febf 	bl	8000cb0 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 0.01);
 8000f32:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8000fc0 <main+0x11c>
 8000f36:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000f3a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000f3e:	4826      	ldr	r0, [pc, #152]	; (8000fd8 <main+0x134>)
 8000f40:	f7ff feb6 	bl	8000cb0 <SimpleKalmanFilter_Init>

  // MPU6050 + HMC5883L
  MPU6050_Init(&hi2c1, 2, 2, 5);
 8000f44:	2305      	movs	r3, #5
 8000f46:	2202      	movs	r2, #2
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <main+0x138>)
 8000f4c:	f7ff fcd6 	bl	80008fc <MPU6050_Init>
  MPU6050_Bypass(&hi2c1);
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <main+0x138>)
 8000f52:	f7ff fdad 	bl	8000ab0 <MPU6050_Bypass>
  HMC5883L_Setup(&hi2c1);
 8000f56:	4821      	ldr	r0, [pc, #132]	; (8000fdc <main+0x138>)
 8000f58:	f7ff fe2a 	bl	8000bb0 <HMC5883L_Setup>
  MPU6050_Master(&hi2c1);
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <main+0x138>)
 8000f5e:	f7ff fdd5 	bl	8000b0c <MPU6050_Master>
  MPU6050_Slave_Read(&hi2c1);
 8000f62:	481e      	ldr	r0, [pc, #120]	; (8000fdc <main+0x138>)
 8000f64:	f7ff fe64 	bl	8000c30 <MPU6050_Slave_Read>
  flash(1, 2);
 8000f68:	2102      	movs	r1, #2
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff feba 	bl	8000ce4 <flash>

  // Initialise motor PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f70:	2100      	movs	r1, #0
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <main+0x13c>)
 8000f74:	f003 f92e 	bl	80041d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <main+0x13c>)
 8000f7c:	f003 f92a 	bl	80041d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f80:	2108      	movs	r1, #8
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <main+0x13c>)
 8000f84:	f003 f926 	bl	80041d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f88:	210c      	movs	r1, #12
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <main+0x13c>)
 8000f8c:	f003 f922 	bl	80041d4 <HAL_TIM_PWM_Start>
  flash(1, 2);
 8000f90:	2102      	movs	r1, #2
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff fea6 	bl	8000ce4 <flash>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 8000f98:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <main+0x140>)
 8000f9a:	f003 f851 	bl	8004040 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <main+0x144>)
 8000fa0:	f003 f84e 	bl	8004040 <HAL_TIM_Base_Start_IT>
  flash(1, 2);
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f7ff fe9c 	bl	8000ce4 <flash>

  flash(1, 3);
 8000fac:	2103      	movs	r1, #3
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fe98 	bl	8000ce4 <flash>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_control, 5);
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <main+0x148>)
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <main+0x14c>)
 8000fba:	f004 f91b 	bl	80051f4 <HAL_UART_Receive_IT>
 8000fbe:	e7f9      	b.n	8000fb4 <main+0x110>
 8000fc0:	3c23d70a 	.word	0x3c23d70a
 8000fc4:	200002ac 	.word	0x200002ac
 8000fc8:	200002c4 	.word	0x200002c4
 8000fcc:	200002dc 	.word	0x200002dc
 8000fd0:	200002f4 	.word	0x200002f4
 8000fd4:	2000030c 	.word	0x2000030c
 8000fd8:	20000324 	.word	0x20000324
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	20000148 	.word	0x20000148
 8000fe4:	200001d8 	.word	0x200001d8
 8000fe8:	20000220 	.word	0x20000220
 8000fec:	200003fc 	.word	0x200003fc
 8000ff0:	20000268 	.word	0x20000268

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f005 f840 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <SystemClock_Config+0xcc>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <SystemClock_Config+0xcc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <SystemClock_Config+0xd0>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <SystemClock_Config+0xd0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001064:	2304      	movs	r3, #4
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001068:	23a8      	movs	r3, #168	; 0xa8
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001070:	2304      	movs	r3, #4
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fa71 	bl	8003560 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001084:	f000 fb10 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001094:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800109a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2105      	movs	r1, #5
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fcd2 	bl	8003a50 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010b2:	f000 faf9 	bl	80016a8 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	; 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_I2C1_Init+0x50>)
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_I2C1_Init+0x54>)
 80010d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_I2C1_Init+0x50>)
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_I2C1_Init+0x58>)
 80010d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_I2C1_Init+0x50>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_I2C1_Init+0x50>)
 8001106:	f001 fa6b 	bl	80025e0 <HAL_I2C_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001110:	f000 faca 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000009c 	.word	0x2000009c
 800111c:	40005400 	.word	0x40005400
 8001120:	000186a0 	.word	0x000186a0

08001124 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_SPI2_Init+0x64>)
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <MX_SPI2_Init+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_SPI2_Init+0x64>)
 8001130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001134:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_SPI2_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_SPI2_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_SPI2_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_SPI2_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_SPI2_Init+0x64>)
 8001150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001154:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_SPI2_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_SPI2_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_SPI2_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_SPI2_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_SPI2_Init+0x64>)
 8001170:	220a      	movs	r2, #10
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_SPI2_Init+0x64>)
 8001176:	f002 fe8b 	bl	8003e90 <HAL_SPI_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 fa92 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000f0 	.word	0x200000f0
 800118c:	40003800 	.word	0x40003800

08001190 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b096      	sub	sp, #88	; 0x58
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2220      	movs	r2, #32
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 ff5d 	bl	8006088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <MX_TIM1_Init+0x180>)
 80011d0:	4a50      	ldr	r2, [pc, #320]	; (8001314 <MX_TIM1_Init+0x184>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <MX_TIM1_Init+0x180>)
 80011d6:	2253      	movs	r2, #83	; 0x53
 80011d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <MX_TIM1_Init+0x180>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <MX_TIM1_Init+0x180>)
 80011e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80011e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b49      	ldr	r3, [pc, #292]	; (8001310 <MX_TIM1_Init+0x180>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <MX_TIM1_Init+0x180>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <MX_TIM1_Init+0x180>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fa:	4845      	ldr	r0, [pc, #276]	; (8001310 <MX_TIM1_Init+0x180>)
 80011fc:	f002 fed1 	bl	8003fa2 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001206:	f000 fa4f 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001210:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001214:	4619      	mov	r1, r3
 8001216:	483e      	ldr	r0, [pc, #248]	; (8001310 <MX_TIM1_Init+0x180>)
 8001218:	f003 fa6e 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001222:	f000 fa41 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001226:	483a      	ldr	r0, [pc, #232]	; (8001310 <MX_TIM1_Init+0x180>)
 8001228:	f002 ff7a 	bl	8004120 <HAL_TIM_PWM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001232:	f000 fa39 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800123e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001242:	4619      	mov	r1, r3
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <MX_TIM1_Init+0x180>)
 8001246:	f003 fe61 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001250:	f000 fa2a 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001254:	2360      	movs	r3, #96	; 0x60
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	4619      	mov	r1, r3
 8001278:	4825      	ldr	r0, [pc, #148]	; (8001310 <MX_TIM1_Init+0x180>)
 800127a:	f003 f97b 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001284:	f000 fa10 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2204      	movs	r2, #4
 800128e:	4619      	mov	r1, r3
 8001290:	481f      	ldr	r0, [pc, #124]	; (8001310 <MX_TIM1_Init+0x180>)
 8001292:	f003 f96f 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800129c:	f000 fa04 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2208      	movs	r2, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <MX_TIM1_Init+0x180>)
 80012aa:	f003 f963 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80012b4:	f000 f9f8 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	220c      	movs	r2, #12
 80012be:	4619      	mov	r1, r3
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <MX_TIM1_Init+0x180>)
 80012c2:	f003 f957 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80012cc:	f000 f9ec 	bl	80016a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <MX_TIM1_Init+0x180>)
 80012f4:	f003 fe86 	bl	8005004 <HAL_TIMEx_ConfigBreakDeadTime>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80012fe:	f000 f9d3 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <MX_TIM1_Init+0x180>)
 8001304:	f000 fb1e 	bl	8001944 <HAL_TIM_MspPostInit>

}
 8001308:	bf00      	nop
 800130a:	3758      	adds	r7, #88	; 0x58
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000148 	.word	0x20000148
 8001314:	40010000 	.word	0x40010000

08001318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08e      	sub	sp, #56	; 0x38
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001348:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <MX_TIM2_Init+0x128>)
 800134a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <MX_TIM2_Init+0x128>)
 8001352:	2253      	movs	r2, #83	; 0x53
 8001354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <MX_TIM2_Init+0x128>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <MX_TIM2_Init+0x128>)
 800135e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <MX_TIM2_Init+0x128>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <MX_TIM2_Init+0x128>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001370:	4833      	ldr	r0, [pc, #204]	; (8001440 <MX_TIM2_Init+0x128>)
 8001372:	f002 fe16 	bl	8003fa2 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800137c:	f000 f994 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138a:	4619      	mov	r1, r3
 800138c:	482c      	ldr	r0, [pc, #176]	; (8001440 <MX_TIM2_Init+0x128>)
 800138e:	f003 f9b3 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001398:	f000 f986 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800139c:	4828      	ldr	r0, [pc, #160]	; (8001440 <MX_TIM2_Init+0x128>)
 800139e:	f002 febf 	bl	8004120 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013a8:	f000 f97e 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4619      	mov	r1, r3
 80013ba:	4821      	ldr	r0, [pc, #132]	; (8001440 <MX_TIM2_Init+0x128>)
 80013bc:	f003 fda6 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013c6:	f000 f96f 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	; 0x60
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM2_Init+0x128>)
 80013e2:	f003 f8c7 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013ec:	f000 f95c 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2204      	movs	r2, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4812      	ldr	r0, [pc, #72]	; (8001440 <MX_TIM2_Init+0x128>)
 80013f8:	f003 f8bc 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001402:	f000 f951 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2208      	movs	r2, #8
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_TIM2_Init+0x128>)
 800140e:	f003 f8b1 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001418:	f000 f946 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	220c      	movs	r2, #12
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_TIM2_Init+0x128>)
 8001424:	f003 f8a6 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800142e:	f000 f93b 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <MX_TIM2_Init+0x128>)
 8001434:	f000 fa86 	bl	8001944 <HAL_TIM_MspPostInit>

}
 8001438:	bf00      	nop
 800143a:	3738      	adds	r7, #56	; 0x38
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000190 	.word	0x20000190

08001444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <MX_TIM3_Init+0x98>)
 8001464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001468:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800146c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_TIM3_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_TIM3_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <MX_TIM3_Init+0x94>)
 800148a:	f002 fd8a 	bl	8003fa2 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001494:	f000 f908 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_TIM3_Init+0x94>)
 80014a6:	f003 f927 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014b0:	f000 f8fa 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_TIM3_Init+0x94>)
 80014c2:	f003 fd23 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 f8ec 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200001d8 	.word	0x200001d8
 80014dc:	40000400 	.word	0x40000400

080014e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_TIM4_Init+0x94>)
 80014fe:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <MX_TIM4_Init+0x98>)
 8001500:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1999;
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_TIM4_Init+0x94>)
 8001504:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001508:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_TIM4_Init+0x94>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_TIM4_Init+0x94>)
 8001512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001516:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_TIM4_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_TIM4_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_TIM4_Init+0x94>)
 8001526:	f002 fd3c 	bl	8003fa2 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001530:	f000 f8ba 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_TIM4_Init+0x94>)
 8001542:	f003 f8d9 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800154c:	f000 f8ac 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_TIM4_Init+0x94>)
 800155e:	f003 fcd5 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 f89e 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000220 	.word	0x20000220
 8001578:	40000800 	.word	0x40000800

0800157c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001588:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800158c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f003 fd8c 	bl	80050d0 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f000 f873 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000268 	.word	0x20000268
 80015cc:	40011000 	.word	0x40011000

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <MX_GPIO_Init+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <MX_GPIO_Init+0xd0>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <MX_GPIO_Init+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <MX_GPIO_Init+0xd0>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_GPIO_Init+0xd0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_GPIO_Init+0xd0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_GPIO_Init+0xd0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	21c0      	movs	r1, #192	; 0xc0
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <MX_GPIO_Init+0xd4>)
 8001678:	f000 ff7e 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800167c:	23c0      	movs	r3, #192	; 0xc0
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_GPIO_Init+0xd4>)
 8001694:	f000 fdd4 	bl	8002240 <HAL_GPIO_Init>

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_I2C_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <HAL_I2C_MspInit+0x8c>)
 800175e:	f000 fd6f 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_I2C_MspInit+0x88>)
 800176c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_I2C_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005400 	.word	0x40005400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400

08001794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a28      	ldr	r2, [pc, #160]	; (8001854 <HAL_SPI_MspInit+0xc0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d14a      	bne.n	800184c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a26      	ldr	r2, [pc, #152]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_SPI_MspInit+0xc4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800180a:	230c      	movs	r3, #12
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800181a:	2305      	movs	r3, #5
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <HAL_SPI_MspInit+0xc8>)
 8001826:	f000 fd0b 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800183c:	2305      	movs	r3, #5
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <HAL_SPI_MspInit+0xcc>)
 8001848:	f000 fcfa 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40003800 	.word	0x40003800
 8001858:	40023800 	.word	0x40023800
 800185c:	40020800 	.word	0x40020800
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a30      	ldr	r2, [pc, #192]	; (8001934 <HAL_TIM_Base_MspInit+0xd0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001892:	e04a      	b.n	800192a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d10e      	bne.n	80018bc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
}
 80018ba:	e036      	b.n	800192a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_TIM_Base_MspInit+0xd8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d116      	bne.n	80018f4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a1a      	ldr	r2, [pc, #104]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	201d      	movs	r0, #29
 80018e8:	f000 fbe1 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018ec:	201d      	movs	r0, #29
 80018ee:	f000 fbfa 	bl	80020e6 <HAL_NVIC_EnableIRQ>
}
 80018f2:	e01a      	b.n	800192a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_TIM_Base_MspInit+0xdc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d115      	bne.n	800192a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_TIM_Base_MspInit+0xd4>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	201e      	movs	r0, #30
 8001920:	f000 fbc5 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001924:	201e      	movs	r0, #30
 8001926:	f000 fbde 	bl	80020e6 <HAL_NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40010000 	.word	0x40010000
 8001938:	40023800 	.word	0x40023800
 800193c:	40000400 	.word	0x40000400
 8001940:	40000800 	.word	0x40000800

08001944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <HAL_TIM_MspPostInit+0xb0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d11f      	bne.n	80019a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_TIM_MspPostInit+0xb4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <HAL_TIM_MspPostInit+0xb4>)
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_TIM_MspPostInit+0xb4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001982:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001994:	2301      	movs	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4817      	ldr	r0, [pc, #92]	; (80019fc <HAL_TIM_MspPostInit+0xb8>)
 80019a0:	f000 fc4e 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019a4:	e022      	b.n	80019ec <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ae:	d11d      	bne.n	80019ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_TIM_MspPostInit+0xb4>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_TIM_MspPostInit+0xb4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6313      	str	r3, [r2, #48]	; 0x30
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_TIM_MspPostInit+0xb4>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019cc:	230f      	movs	r3, #15
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <HAL_TIM_MspPostInit+0xbc>)
 80019e8:	f000 fc2a 	bl	8002240 <HAL_GPIO_Init>
}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40010000 	.word	0x40010000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <HAL_UART_MspInit+0x94>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d134      	bne.n	8001a90 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a70:	2307      	movs	r3, #7
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <HAL_UART_MspInit+0x9c>)
 8001a7c:	f000 fbe0 	bl	8002240 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2025      	movs	r0, #37	; 0x25
 8001a86:	f000 fb12 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8a:	2025      	movs	r0, #37	; 0x25
 8001a8c:	f000 fb2b 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af0:	f000 f9be 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
//
//    ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
//  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM3_IRQHandler+0x10>)
 8001afe:	f002 fc31 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001d8 	.word	0x200001d8

08001b0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM4_IRQHandler+0x10>)
 8001b12:	f002 fc27 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000220 	.word	0x20000220

08001b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART1_IRQHandler+0x10>)
 8001b26:	f003 fb95 	bl	8005254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000268 	.word	0x20000268

08001b34 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <HAL_UART_TxCpltCallback+0x18>)
 8001b40:	f000 fd33 	bl	80025aa <HAL_GPIO_TogglePin>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40020000 	.word	0x40020000

08001b50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b54:	ed2d 8b04 	vpush	{d8-d9}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8001b5e:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_UART_RxCpltCallback+0x160>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001b64:	2140      	movs	r1, #64	; 0x40
 8001b66:	4853      	ldr	r0, [pc, #332]	; (8001cb4 <HAL_UART_RxCpltCallback+0x164>)
 8001b68:	f000 fd1f 	bl	80025aa <HAL_GPIO_TogglePin>

  // Serialize control values
  uint8_t g_control_1st_idx = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8001b70:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2bfe      	cmp	r3, #254	; 0xfe
 8001b76:	d101      	bne.n	8001b7c <HAL_UART_RxCpltCallback+0x2c>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	2bfe      	cmp	r3, #254	; 0xfe
 8001b82:	d101      	bne.n	8001b88 <HAL_UART_RxCpltCallback+0x38>
 8001b84:	2302      	movs	r3, #2
 8001b86:	73fb      	strb	r3, [r7, #15]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	2bfe      	cmp	r3, #254	; 0xfe
 8001b8e:	d101      	bne.n	8001b94 <HAL_UART_RxCpltCallback+0x44>
 8001b90:	2303      	movs	r3, #3
 8001b92:	73fb      	strb	r3, [r7, #15]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001b96:	78db      	ldrb	r3, [r3, #3]
 8001b98:	2bfe      	cmp	r3, #254	; 0xfe
 8001b9a:	d101      	bne.n	8001ba0 <HAL_UART_RxCpltCallback+0x50>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	73fb      	strb	r3, [r7, #15]
  if (g_control[4] == 254) g_control_1st_idx = 0;
 8001ba0:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	2bfe      	cmp	r3, #254	; 0xfe
 8001ba6:	d101      	bne.n	8001bac <HAL_UART_RxCpltCallback+0x5c>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
  g_thrust = g_control[g_control_1st_idx];
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	4a42      	ldr	r2, [pc, #264]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001bb0:	5cd2      	ldrb	r2, [r2, r3]
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_UART_RxCpltCallback+0x16c>)
 8001bb4:	701a      	strb	r2, [r3, #0]
  g_pitch = g_control[(g_control_1st_idx+1)%5]-100;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	1c59      	adds	r1, r3, #1
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_UART_RxCpltCallback+0x170>)
 8001bbc:	fb83 2301 	smull	r2, r3, r3, r1
 8001bc0:	105a      	asrs	r2, r3, #1
 8001bc2:	17cb      	asrs	r3, r1, #31
 8001bc4:	1ad2      	subs	r2, r2, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	1aca      	subs	r2, r1, r3
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001bd0:	5c9b      	ldrb	r3, [r3, r2]
 8001bd2:	3b64      	subs	r3, #100	; 0x64
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	b25a      	sxtb	r2, r3
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_UART_RxCpltCallback+0x174>)
 8001bda:	701a      	strb	r2, [r3, #0]
  g_roll = g_control[(g_control_1st_idx+2)%5]-100;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	1c99      	adds	r1, r3, #2
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_UART_RxCpltCallback+0x170>)
 8001be2:	fb83 2301 	smull	r2, r3, r3, r1
 8001be6:	105a      	asrs	r2, r3, #1
 8001be8:	17cb      	asrs	r3, r1, #31
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	1aca      	subs	r2, r1, r3
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001bf6:	5c9b      	ldrb	r3, [r3, r2]
 8001bf8:	3b64      	subs	r3, #100	; 0x64
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	b25a      	sxtb	r2, r3
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_UART_RxCpltCallback+0x178>)
 8001c00:	701a      	strb	r2, [r3, #0]
  g_yaw = g_control[(g_control_1st_idx+3)%5]-100;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	1cd9      	adds	r1, r3, #3
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_UART_RxCpltCallback+0x170>)
 8001c08:	fb83 2301 	smull	r2, r3, r3, r1
 8001c0c:	105a      	asrs	r2, r3, #1
 8001c0e:	17cb      	asrs	r3, r1, #31
 8001c10:	1ad2      	subs	r2, r2, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	1aca      	subs	r2, r1, r3
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_UART_RxCpltCallback+0x168>)
 8001c1c:	5c9b      	ldrb	r3, [r3, r2]
 8001c1e:	3b64      	subs	r3, #100	; 0x64
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	b25a      	sxtb	r2, r3
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_UART_RxCpltCallback+0x17c>)
 8001c26:	701a      	strb	r2, [r3, #0]

  // Update monitor
  monitor(g_ax, g_gx, 0,
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_UART_RxCpltCallback+0x180>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc8b 	bl	8000548 <__aeabi_f2d>
 8001c32:	4604      	mov	r4, r0
 8001c34:	460d      	mov	r5, r1
 8001c36:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_UART_RxCpltCallback+0x184>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc84 	bl	8000548 <__aeabi_f2d>
 8001c40:	4680      	mov	r8, r0
 8001c42:	4689      	mov	r9, r1
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_UART_RxCpltCallback+0x188>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc7d 	bl	8000548 <__aeabi_f2d>
 8001c4e:	4682      	mov	sl, r0
 8001c50:	468b      	mov	fp, r1
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_UART_RxCpltCallback+0x18c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc76 	bl	8000548 <__aeabi_f2d>
 8001c5c:	ec41 0b18 	vmov	d8, r0, r1
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_UART_RxCpltCallback+0x190>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc6f 	bl	8000548 <__aeabi_f2d>
 8001c6a:	ec41 0b19 	vmov	d9, r0, r1
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_UART_RxCpltCallback+0x194>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc68 	bl	8000548 <__aeabi_f2d>
 8001c78:	2200      	movs	r2, #0
 8001c7a:	ec41 0b15 	vmov	d5, r0, r1
 8001c7e:	eeb0 4a49 	vmov.f32	s8, s18
 8001c82:	eef0 4a69 	vmov.f32	s9, s19
 8001c86:	2100      	movs	r1, #0
 8001c88:	eeb0 3a48 	vmov.f32	s6, s16
 8001c8c:	eef0 3a68 	vmov.f32	s7, s17
 8001c90:	ec4b ab12 	vmov	d2, sl, fp
 8001c94:	2000      	movs	r0, #0
 8001c96:	ec49 8b11 	vmov	d1, r8, r9
 8001c9a:	ec45 4b10 	vmov	d0, r4, r5
 8001c9e:	f7ff f873 	bl	8000d88 <monitor>
//      0, 0, g_D_yaw);
//  monitor(g_sig1, g_sig2, MIN_SPEED,
//      g_sig3, g_sig4, MIN_SPEED,
//      0, 0, 0);

}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	ecbd 8b04 	vpop	{d8-d9}
 8001cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	200003fc 	.word	0x200003fc
 8001cbc:	2000051c 	.word	0x2000051c
 8001cc0:	66666667 	.word	0x66666667
 8001cc4:	2000051d 	.word	0x2000051d
 8001cc8:	2000051e 	.word	0x2000051e
 8001ccc:	2000051f 	.word	0x2000051f
 8001cd0:	20000510 	.word	0x20000510
 8001cd4:	20000504 	.word	0x20000504
 8001cd8:	20000514 	.word	0x20000514
 8001cdc:	20000508 	.word	0x20000508
 8001ce0:	20000518 	.word	0x20000518
 8001ce4:	2000050c 	.word	0x2000050c

08001ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <_sbrk+0x5c>)
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <_sbrk+0x60>)
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <_sbrk+0x64>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <_sbrk+0x68>)
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d207      	bcs.n	8001d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d18:	f004 f98c 	bl	8006034 <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	220c      	movs	r2, #12
 8001d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d26:	e009      	b.n	8001d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <_sbrk+0x64>)
 8001d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20020000 	.word	0x20020000
 8001d48:	00000400 	.word	0x00000400
 8001d4c:	20000520 	.word	0x20000520
 8001d50:	20000538 	.word	0x20000538

08001d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d7e:	490e      	ldr	r1, [pc, #56]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d94:	4c0b      	ldr	r4, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd7 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f004 f94b 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff f87b 	bl	8000ea4 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001dbc:	08006a08 	.word	0x08006a08
  ldr r2, =_sbss
 8001dc0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001dc4:	20000538 	.word	0x20000538

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f94f 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fc58 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f967 	bl	8002102 <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4c:	f000 f92f 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000014 	.word	0x20000014
 8001e6c:	20000010 	.word	0x20000010

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000014 	.word	0x20000014
 8001e94:	20000524 	.word	0x20000524

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000524 	.word	0x20000524

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000014 	.word	0x20000014

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff feb6 	bl	8001e98 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d008      	beq.n	800214c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e052      	b.n	80021f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0216 	bic.w	r2, r2, #22
 800215a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800216a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <HAL_DMA_Abort+0x62>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0208 	bic.w	r2, r2, #8
 800218a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219c:	e013      	b.n	80021c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800219e:	f7ff fe7b 	bl	8001e98 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d90c      	bls.n	80021c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e015      	b.n	80021f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e4      	bne.n	800219e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	223f      	movs	r2, #63	; 0x3f
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e00c      	b.n	8002232 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e16b      	b.n	8002534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 815a 	bne.w	800252e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d005      	beq.n	8002292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	2b02      	cmp	r3, #2
 8002290:	d130      	bne.n	80022f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 0201 	and.w	r2, r3, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d017      	beq.n	8002330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80b4 	beq.w	800252e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b60      	ldr	r3, [pc, #384]	; (800254c <HAL_GPIO_Init+0x30c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a5f      	ldr	r2, [pc, #380]	; (800254c <HAL_GPIO_Init+0x30c>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <HAL_GPIO_Init+0x30c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023e2:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_GPIO_Init+0x310>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_GPIO_Init+0x314>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <HAL_GPIO_Init+0x226>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_GPIO_Init+0x318>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d025      	beq.n	8002462 <HAL_GPIO_Init+0x222>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a50      	ldr	r2, [pc, #320]	; (800255c <HAL_GPIO_Init+0x31c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <HAL_GPIO_Init+0x21e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4f      	ldr	r2, [pc, #316]	; (8002560 <HAL_GPIO_Init+0x320>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x21a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_GPIO_Init+0x324>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x216>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4d      	ldr	r2, [pc, #308]	; (8002568 <HAL_GPIO_Init+0x328>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x212>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4c      	ldr	r2, [pc, #304]	; (800256c <HAL_GPIO_Init+0x32c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4b      	ldr	r2, [pc, #300]	; (8002570 <HAL_GPIO_Init+0x330>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x20a>
 8002446:	2307      	movs	r3, #7
 8002448:	e00e      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800244a:	2308      	movs	r3, #8
 800244c:	e00c      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800244e:	2306      	movs	r3, #6
 8002450:	e00a      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002456:	2304      	movs	r3, #4
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	; (8002550 <HAL_GPIO_Init+0x310>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_GPIO_Init+0x334>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a32      	ldr	r2, [pc, #200]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_GPIO_Init+0x334>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_GPIO_Init+0x334>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <HAL_GPIO_Init+0x334>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f ae90 	bls.w	800225c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40021400 	.word	0x40021400
 800256c:	40021800 	.word	0x40021800
 8002570:	40021c00 	.word	0x40021c00
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	041a      	lsls	r2, r3, #16
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	400b      	ands	r3, r1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e12b      	b.n	800284a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff f87c 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002644:	f001 fbfc 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a81      	ldr	r2, [pc, #516]	; (8002854 <HAL_I2C_Init+0x274>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d807      	bhi.n	8002664 <HAL_I2C_Init+0x84>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a80      	ldr	r2, [pc, #512]	; (8002858 <HAL_I2C_Init+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e006      	b.n	8002672 <HAL_I2C_Init+0x92>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a7d      	ldr	r2, [pc, #500]	; (800285c <HAL_I2C_Init+0x27c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0e7      	b.n	800284a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a78      	ldr	r2, [pc, #480]	; (8002860 <HAL_I2C_Init+0x280>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	; (8002854 <HAL_I2C_Init+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d802      	bhi.n	80026b4 <HAL_I2C_Init+0xd4>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3301      	adds	r3, #1
 80026b2:	e009      	b.n	80026c8 <HAL_I2C_Init+0xe8>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_I2C_Init+0x284>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	495c      	ldr	r1, [pc, #368]	; (8002854 <HAL_I2C_Init+0x274>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d819      	bhi.n	800271c <HAL_I2C_Init+0x13c>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e59      	subs	r1, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026fc:	400b      	ands	r3, r1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_I2C_Init+0x138>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e59      	subs	r1, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	e051      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002718:	2304      	movs	r3, #4
 800271a:	e04f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <HAL_I2C_Init+0x168>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e012      	b.n	800276e <HAL_I2C_Init+0x18e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x196>
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10e      	bne.n	800279c <HAL_I2C_Init+0x1bc>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1e58      	subs	r0, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6809      	ldr	r1, [r1, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6911      	ldr	r1, [r2, #16]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	000186a0 	.word	0x000186a0
 8002858:	001e847f 	.word	0x001e847f
 800285c:	003d08ff 	.word	0x003d08ff
 8002860:	431bde83 	.word	0x431bde83
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002882:	f7ff fb09 	bl	8001e98 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 80d9 	bne.w	8002a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2319      	movs	r3, #25
 800289c:	2201      	movs	r2, #1
 800289e:	496d      	ldr	r1, [pc, #436]	; (8002a54 <HAL_I2C_Mem_Write+0x1ec>)
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fc7f 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0cc      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Mem_Write+0x56>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0c5      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2221      	movs	r2, #33	; 0x21
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_I2C_Mem_Write+0x1f0>)
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002926:	88f8      	ldrh	r0, [r7, #6]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4603      	mov	r3, r0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fab6 	bl	8002ea8 <I2C_RequestMemoryWrite>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d052      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e081      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fd00 	bl	8003350 <I2C_WaitOnTXEFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06b      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d11b      	bne.n	80029e8 <HAL_I2C_Mem_Write+0x180>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d017      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1aa      	bne.n	8002946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fcec 	bl	80033d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00d      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e016      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a76:	f7ff fa0f 	bl	8001e98 <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 8208 	bne.w	8002e9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2319      	movs	r3, #25
 8002a90:	2201      	movs	r2, #1
 8002a92:	497b      	ldr	r1, [pc, #492]	; (8002c80 <HAL_I2C_Mem_Read+0x224>)
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fb85 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e1fb      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Mem_Read+0x56>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e1f4      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d007      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2222      	movs	r2, #34	; 0x22
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_I2C_Mem_Read+0x228>)
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1a:	88f8      	ldrh	r0, [r7, #6]
 8002b1c:	893a      	ldrh	r2, [r7, #8]
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4603      	mov	r3, r0
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa52 	bl	8002fd4 <I2C_RequestMemoryRead>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1b0      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d113      	bne.n	8002b6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	623b      	str	r3, [r7, #32]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e184      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d11b      	bne.n	8002baa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e164      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d11b      	bne.n	8002bea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	e144      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c00:	e138      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	f200 80f1 	bhi.w	8002dee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d123      	bne.n	8002c5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fc1b 	bl	8003454 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e139      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c5a:	e10b      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d14e      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_I2C_Mem_Read+0x22c>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fa98 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e10e      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
 8002c7e:	bf00      	nop
 8002c80:	00100002 	.word	0x00100002
 8002c84:	ffff0000 	.word	0xffff0000
 8002c88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d00:	e0b8      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4966      	ldr	r1, [pc, #408]	; (8002ea4 <HAL_I2C_Mem_Read+0x448>)
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fa49 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0bf      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	494f      	ldr	r1, [pc, #316]	; (8002ea4 <HAL_I2C_Mem_Read+0x448>)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fa1b 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e091      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dec:	e042      	b.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fb2e 	bl	8003454 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e04c      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d118      	bne.n	8002e74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f47f aec2 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	00010004 	.word	0x00010004

08002ea8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	817b      	strh	r3, [r7, #10]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	813b      	strh	r3, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f960 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef8:	d103      	bne.n	8002f02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e05f      	b.n	8002fc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	492d      	ldr	r1, [pc, #180]	; (8002fd0 <I2C_RequestMemoryWrite+0x128>)
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f998 	bl	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e04c      	b.n	8002fc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	6a39      	ldr	r1, [r7, #32]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fa02 	bl	8003350 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d107      	bne.n	8002f6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e02b      	b.n	8002fc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f74:	893b      	ldrh	r3, [r7, #8]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]
 8002f7e:	e021      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f80:	893b      	ldrh	r3, [r7, #8]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f90:	6a39      	ldr	r1, [r7, #32]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f9dc 	bl	8003350 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d107      	bne.n	8002fb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e005      	b.n	8002fc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	00010002 	.word	0x00010002

08002fd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	813b      	strh	r3, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2200      	movs	r2, #0
 8003016:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f8c2 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d103      	bne.n	800303e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0aa      	b.n	8003198 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003050:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	4952      	ldr	r1, [pc, #328]	; (80031a0 <I2C_RequestMemoryRead+0x1cc>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f8fa 	bl	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e097      	b.n	8003198 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	6a39      	ldr	r1, [r7, #32]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f964 	bl	8003350 <I2C_WaitOnTXEFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	2b04      	cmp	r3, #4
 8003094:	d107      	bne.n	80030a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e076      	b.n	8003198 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b0:	893b      	ldrh	r3, [r7, #8]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	e021      	b.n	8003100 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030bc:	893b      	ldrh	r3, [r7, #8]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f93e 	bl	8003350 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e050      	b.n	8003198 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f6:	893b      	ldrh	r3, [r7, #8]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	6a39      	ldr	r1, [r7, #32]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f923 	bl	8003350 <I2C_WaitOnTXEFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e035      	b.n	8003198 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	2200      	movs	r2, #0
 8003144:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f82b 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003162:	d103      	bne.n	800316c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e013      	b.n	8003198 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	6a3a      	ldr	r2, [r7, #32]
 8003184:	4906      	ldr	r1, [pc, #24]	; (80031a0 <I2C_RequestMemoryRead+0x1cc>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f863 	bl	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	00010002 	.word	0x00010002

080031a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b4:	e025      	b.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031bc:	d021      	beq.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7fe fe6b 	bl	8001e98 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d116      	bne.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e023      	b.n	800324a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10d      	bne.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x84>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	e00c      	b.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	429a      	cmp	r2, r3
 8003246:	d0b6      	beq.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003260:	e051      	b.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003270:	d123      	bne.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003280:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800328a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0204 	orr.w	r2, r3, #4
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e046      	b.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c0:	d021      	beq.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fe fde9 	bl	8001e98 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d116      	bne.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e020      	b.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10c      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e00b      	b.n	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d18d      	bne.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800335c:	e02d      	b.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f8ce 	bl	8003500 <I2C_IsAcknowledgeFailed>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e02d      	b.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003374:	d021      	beq.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7fe fd8f 	bl	8001e98 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d116      	bne.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d1ca      	bne.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033de:	e02d      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f88d 	bl	8003500 <I2C_IsAcknowledgeFailed>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e02d      	b.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f6:	d021      	beq.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f8:	f7fe fd4e 	bl	8001e98 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	d302      	bcc.n	800340e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b04      	cmp	r3, #4
 8003448:	d1ca      	bne.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003460:	e042      	b.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b10      	cmp	r3, #16
 800346e:	d119      	bne.n	80034a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e029      	b.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fe fcf8 	bl	8001e98 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e007      	b.n	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d1b5      	bne.n	8003462 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003516:	d11b      	bne.n	8003550 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003520:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e267      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d075      	beq.n	800366a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357e:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d00c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358a:	4b85      	ldr	r3, [pc, #532]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d112      	bne.n	80035bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003596:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a2:	d10b      	bne.n	80035bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4b7e      	ldr	r3, [pc, #504]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05b      	beq.n	8003668 <HAL_RCC_OscConfig+0x108>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d157      	bne.n	8003668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e242      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x74>
 80035c6:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a75      	ldr	r2, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e01d      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6f      	ldr	r2, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6c      	ldr	r2, [pc, #432]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035f8:	4b69      	ldr	r3, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a68      	ldr	r2, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a65      	ldr	r2, [pc, #404]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800360a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fc3e 	bl	8001e98 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fc3a 	bl	8001e98 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e207      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0xc0>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fc2a 	bl	8001e98 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fc26 	bl	8001e98 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1f3      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0xe8>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d063      	beq.n	800373e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003676:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800368a:	2b08      	cmp	r3, #8
 800368c:	d11c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368e:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x152>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e1c7      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4937      	ldr	r1, [pc, #220]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	e03a      	b.n	800373e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d0:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCC_OscConfig+0x244>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fbdf 	bl	8001e98 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036de:	f7fe fbdb 	bl	8001e98 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1a8      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4925      	ldr	r1, [pc, #148]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
 8003710:	e015      	b.n	800373e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCC_OscConfig+0x244>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fbbe 	bl	8001e98 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003720:	f7fe fbba 	bl	8001e98 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e187      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d036      	beq.n	80037b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x248>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe fb9e 	bl	8001e98 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003760:	f7fe fb9a 	bl	8001e98 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e167      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x240>)
 8003774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x200>
 800377e:	e01b      	b.n	80037b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x248>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fe fb87 	bl	8001e98 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	e00e      	b.n	80037ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378e:	f7fe fb83 	bl	8001e98 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d907      	bls.n	80037ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e150      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	42470000 	.word	0x42470000
 80037a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ea      	bne.n	800378e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8097 	beq.w	80038f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ca:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	4b7d      	ldr	r3, [pc, #500]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a7c      	ldr	r2, [pc, #496]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b77      	ldr	r3, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d118      	bne.n	8003834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003802:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a73      	ldr	r2, [pc, #460]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 8003808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380e:	f7fe fb43 	bl	8001e98 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003816:	f7fe fb3f 	bl	8001e98 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e10c      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x474>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x2ea>
 800383c:	4b64      	ldr	r3, [pc, #400]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	e01c      	b.n	8003884 <HAL_RCC_OscConfig+0x324>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b05      	cmp	r3, #5
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x30c>
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a5e      	ldr	r2, [pc, #376]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	6713      	str	r3, [r2, #112]	; 0x70
 800385e:	4b5c      	ldr	r3, [pc, #368]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	4a5b      	ldr	r2, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6713      	str	r3, [r2, #112]	; 0x70
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0x324>
 800386c:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a57      	ldr	r2, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	4b55      	ldr	r3, [pc, #340]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a54      	ldr	r2, [pc, #336]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800387e:	f023 0304 	bic.w	r3, r3, #4
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fe fb04 	bl	8001e98 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fe fb00 	bl	8001e98 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0cb      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038aa:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0ee      	beq.n	8003894 <HAL_RCC_OscConfig+0x334>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7fe faee 	bl	8001e98 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fe faea 	bl	8001e98 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0b5      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d6:	4b3e      	ldr	r3, [pc, #248]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1ee      	bne.n	80038c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	4a38      	ldr	r2, [pc, #224]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a1 	beq.w	8003a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b08      	cmp	r3, #8
 8003908:	d05c      	beq.n	80039c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d141      	bne.n	8003996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0x478>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fabe 	bl	8001e98 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe faba 	bl	8001e98 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e087      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	491b      	ldr	r1, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x478>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fe fa93 	bl	8001e98 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003976:	f7fe fa8f 	bl	8001e98 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e05c      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x416>
 8003994:	e054      	b.n	8003a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_OscConfig+0x478>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fa7c 	bl	8001e98 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe fa78 	bl	8001e98 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e045      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_OscConfig+0x470>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x444>
 80039c2:	e03d      	b.n	8003a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e038      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000
 80039d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x4ec>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d028      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d121      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d11a      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d111      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0cc      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b68      	ldr	r3, [pc, #416]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d90c      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b65      	ldr	r3, [pc, #404]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0b8      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa4:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a58      	ldr	r2, [pc, #352]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a52      	ldr	r2, [pc, #328]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b50      	ldr	r3, [pc, #320]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	494d      	ldr	r1, [pc, #308]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d044      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d119      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e07f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d003      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e067      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2e:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4934      	ldr	r1, [pc, #208]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b40:	f7fe f9aa 	bl	8001e98 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7fe f9a6 	bl	8001e98 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e04f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 020c 	and.w	r2, r3, #12
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1eb      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d20c      	bcs.n	8003b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e032      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4916      	ldr	r1, [pc, #88]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	490e      	ldr	r1, [pc, #56]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd6:	f000 f821 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	490a      	ldr	r1, [pc, #40]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	5ccb      	ldrb	r3, [r1, r3]
 8003bea:	fa22 f303 	lsr.w	r3, r2, r3
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe f90a 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023c00 	.word	0x40023c00
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	080069ac 	.word	0x080069ac
 8003c14:	2000000c 	.word	0x2000000c
 8003c18:	20000010 	.word	0x20000010

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c20:	b094      	sub	sp, #80	; 0x50
 8003c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	647b      	str	r3, [r7, #68]	; 0x44
 8003c28:	2300      	movs	r3, #0
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c34:	4b79      	ldr	r3, [pc, #484]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d00d      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0x40>
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	f200 80e1 	bhi.w	8003e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x34>
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4e:	e0db      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c54:	e0db      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c56:	4b73      	ldr	r3, [pc, #460]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c5a:	e0d8      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c5c:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c66:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d063      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c72:	4b6a      	ldr	r3, [pc, #424]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	2200      	movs	r2, #0
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
 8003c86:	2300      	movs	r3, #0
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c8e:	4622      	mov	r2, r4
 8003c90:	462b      	mov	r3, r5
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	0159      	lsls	r1, r3, #5
 8003c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca0:	0150      	lsls	r0, r2, #5
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	1a51      	subs	r1, r2, r1
 8003caa:	6139      	str	r1, [r7, #16]
 8003cac:	4629      	mov	r1, r5
 8003cae:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	018b      	lsls	r3, r1, #6
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cca:	4651      	mov	r1, sl
 8003ccc:	018a      	lsls	r2, r1, #6
 8003cce:	4651      	mov	r1, sl
 8003cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cd4:	4659      	mov	r1, fp
 8003cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cee:	4690      	mov	r8, r2
 8003cf0:	4699      	mov	r9, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	eb18 0303 	adds.w	r3, r8, r3
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	462b      	mov	r3, r5
 8003cfc:	eb49 0303 	adc.w	r3, r9, r3
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d0e:	4629      	mov	r1, r5
 8003d10:	024b      	lsls	r3, r1, #9
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d18:	4621      	mov	r1, r4
 8003d1a:	024a      	lsls	r2, r1, #9
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d22:	2200      	movs	r2, #0
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d2c:	f7fc fc64 	bl	80005f8 <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4613      	mov	r3, r2
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d38:	e058      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	2200      	movs	r2, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	4611      	mov	r1, r2
 8003d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d54:	4642      	mov	r2, r8
 8003d56:	464b      	mov	r3, r9
 8003d58:	f04f 0000 	mov.w	r0, #0
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	0159      	lsls	r1, r3, #5
 8003d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d66:	0150      	lsls	r0, r2, #5
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d72:	4649      	mov	r1, r9
 8003d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d90:	eb63 050b 	sbc.w	r5, r3, fp
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	00eb      	lsls	r3, r5, #3
 8003d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da2:	00e2      	lsls	r2, r4, #3
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	4643      	mov	r3, r8
 8003daa:	18e3      	adds	r3, r4, r3
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	464b      	mov	r3, r9
 8003db0:	eb45 0303 	adc.w	r3, r5, r3
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	028b      	lsls	r3, r1, #10
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dcc:	4621      	mov	r1, r4
 8003dce:	028a      	lsls	r2, r1, #10
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	61fa      	str	r2, [r7, #28]
 8003ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de0:	f7fc fc0a 	bl	80005f8 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4613      	mov	r3, r2
 8003dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	3301      	adds	r3, #1
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3750      	adds	r7, #80	; 0x50
 8003e14:	46bd      	mov	sp, r7
 8003e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	00f42400 	.word	0x00f42400
 8003e24:	007a1200 	.word	0x007a1200

08003e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000000c 	.word	0x2000000c

08003e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e44:	f7ff fff0 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	0a9b      	lsrs	r3, r3, #10
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	4903      	ldr	r1, [pc, #12]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	080069bc 	.word	0x080069bc

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e6c:	f7ff ffdc 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0b5b      	lsrs	r3, r3, #13
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4903      	ldr	r1, [pc, #12]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	080069bc 	.word	0x080069bc

08003e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07b      	b.n	8003f9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d108      	bne.n	8003ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb2:	d009      	beq.n	8003ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]
 8003eba:	e005      	b.n	8003ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd fc56 	bl	8001794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	ea42 0103 	orr.w	r1, r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	f003 0104 	and.w	r1, r3, #4
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f003 0210 	and.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e041      	b.n	8004038 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fd fc4b 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f000 fc83 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d001      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e04e      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a23      	ldr	r2, [pc, #140]	; (8004104 <HAL_TIM_Base_Start_IT+0xc4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d022      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d01d      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <HAL_TIM_Base_Start_IT+0xc8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d018      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1e      	ldr	r2, [pc, #120]	; (800410c <HAL_TIM_Base_Start_IT+0xcc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <HAL_TIM_Base_Start_IT+0xd0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <HAL_TIM_Base_Start_IT+0xd4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_TIM_Base_Start_IT+0xd8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_TIM_Base_Start_IT+0xdc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d111      	bne.n	80040e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d010      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	e007      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40010400 	.word	0x40010400
 8004118:	40014000 	.word	0x40014000
 800411c:	40001800 	.word	0x40001800

08004120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e041      	b.n	80041b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f839 	bl	80041be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 fbc4 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_TIM_PWM_Start+0x24>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e022      	b.n	800423e <HAL_TIM_PWM_Start+0x6a>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d109      	bne.n	8004212 <HAL_TIM_PWM_Start+0x3e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e015      	b.n	800423e <HAL_TIM_PWM_Start+0x6a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d109      	bne.n	800422c <HAL_TIM_PWM_Start+0x58>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e008      	b.n	800423e <HAL_TIM_PWM_Start+0x6a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07c      	b.n	8004340 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0x82>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004254:	e013      	b.n	800427e <HAL_TIM_PWM_Start+0xaa>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b04      	cmp	r3, #4
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0x92>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004264:	e00b      	b.n	800427e <HAL_TIM_PWM_Start+0xaa>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Start+0xa2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004274:	e003      	b.n	800427e <HAL_TIM_PWM_Start+0xaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe1a 	bl	8004ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2d      	ldr	r2, [pc, #180]	; (8004348 <HAL_TIM_PWM_Start+0x174>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_TIM_PWM_Start+0xcc>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2c      	ldr	r2, [pc, #176]	; (800434c <HAL_TIM_PWM_Start+0x178>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_PWM_Start+0xd0>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_TIM_PWM_Start+0xd2>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a22      	ldr	r2, [pc, #136]	; (8004348 <HAL_TIM_PWM_Start+0x174>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d022      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d01d      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <HAL_TIM_PWM_Start+0x17c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d018      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_TIM_PWM_Start+0x180>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <HAL_TIM_PWM_Start+0x184>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a16      	ldr	r2, [pc, #88]	; (800434c <HAL_TIM_PWM_Start+0x178>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a18      	ldr	r2, [pc, #96]	; (800435c <HAL_TIM_PWM_Start+0x188>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIM_PWM_Start+0x136>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <HAL_TIM_PWM_Start+0x18c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d111      	bne.n	800432e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b06      	cmp	r3, #6
 800431a:	d010      	beq.n	800433e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	e007      	b.n	800433e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40010000 	.word	0x40010000
 800434c:	40010400 	.word	0x40010400
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40014000 	.word	0x40014000
 8004360:	40001800 	.word	0x40001800

08004364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0202 	mvn.w	r2, #2
 8004390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa81 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa73 	bl	800489a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa84 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d122      	bne.n	8004414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d11b      	bne.n	8004414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0204 	mvn.w	r2, #4
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa57 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa49 	bl	800489a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa5a 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d122      	bne.n	8004468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d11b      	bne.n	8004468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0208 	mvn.w	r2, #8
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2204      	movs	r2, #4
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa2d 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fa1f 	bl	800489a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fa30 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0210 	mvn.w	r2, #16
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2208      	movs	r2, #8
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa03 	bl	80048ae <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9f5 	bl	800489a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa06 	bl	80048c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0201 	mvn.w	r2, #1
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9cf 	bl	8004886 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fdd4 	bl	80050bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d107      	bne.n	8004540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9cb 	bl	80048d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d10e      	bne.n	800456c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b20      	cmp	r3, #32
 800455a:	d107      	bne.n	800456c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0220 	mvn.w	r2, #32
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fd9e 	bl	80050a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458e:	2302      	movs	r3, #2
 8004590:	e0ae      	b.n	80046f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	f200 809f 	bhi.w	80046e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	080046e1 	.word	0x080046e1
 80045b0:	080046e1 	.word	0x080046e1
 80045b4:	080046e1 	.word	0x080046e1
 80045b8:	0800461d 	.word	0x0800461d
 80045bc:	080046e1 	.word	0x080046e1
 80045c0:	080046e1 	.word	0x080046e1
 80045c4:	080046e1 	.word	0x080046e1
 80045c8:	0800465f 	.word	0x0800465f
 80045cc:	080046e1 	.word	0x080046e1
 80045d0:	080046e1 	.word	0x080046e1
 80045d4:	080046e1 	.word	0x080046e1
 80045d8:	0800469f 	.word	0x0800469f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fa22 	bl	8004a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6999      	ldr	r1, [r3, #24]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	619a      	str	r2, [r3, #24]
      break;
 800461a:	e064      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fa72 	bl	8004b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	021a      	lsls	r2, r3, #8
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	619a      	str	r2, [r3, #24]
      break;
 800465c:	e043      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fac7 	bl	8004bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0208 	orr.w	r2, r2, #8
 8004678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0204 	bic.w	r2, r2, #4
 8004688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69d9      	ldr	r1, [r3, #28]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	61da      	str	r2, [r3, #28]
      break;
 800469c:	e023      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fb1b 	bl	8004ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	021a      	lsls	r2, r3, #8
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	61da      	str	r2, [r3, #28]
      break;
 80046de:	e002      	b.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
      break;
 80046e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e0b4      	b.n	800487e <HAL_TIM_ConfigClockSource+0x186>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d03e      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xd4>
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	f200 8087 	bhi.w	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	f000 8086 	beq.w	800486a <HAL_TIM_ConfigClockSource+0x172>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d87f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d01a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xa6>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d87b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d050      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x11a>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d877      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d03c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d873      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d058      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x13a>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d86f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d064      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d86b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d060      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d867      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05c      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d05a      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	e062      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f000 fb67 	bl	8004e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e04f      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f000 fb50 	bl	8004e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e03c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 fac4 	bl	8004d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2150      	movs	r1, #80	; 0x50
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fb1d 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004810:	e02c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 fae3 	bl	8004dea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2160      	movs	r1, #96	; 0x60
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fb0d 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004830:	e01c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 faa4 	bl	8004d8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fafd 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004850:	e00c      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 faf4 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004862:	e003      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      break;
 8004868:	e000      	b.n	800486c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800486a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a40      	ldr	r2, [pc, #256]	; (8004a00 <TIM_Base_SetConfig+0x114>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3d      	ldr	r2, [pc, #244]	; (8004a04 <TIM_Base_SetConfig+0x118>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3c      	ldr	r2, [pc, #240]	; (8004a08 <TIM_Base_SetConfig+0x11c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3b      	ldr	r2, [pc, #236]	; (8004a0c <TIM_Base_SetConfig+0x120>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a3a      	ldr	r2, [pc, #232]	; (8004a10 <TIM_Base_SetConfig+0x124>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2f      	ldr	r2, [pc, #188]	; (8004a00 <TIM_Base_SetConfig+0x114>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02b      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d027      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <TIM_Base_SetConfig+0x118>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d023      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <TIM_Base_SetConfig+0x11c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01f      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2a      	ldr	r2, [pc, #168]	; (8004a0c <TIM_Base_SetConfig+0x120>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01b      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <TIM_Base_SetConfig+0x124>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d017      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a28      	ldr	r2, [pc, #160]	; (8004a14 <TIM_Base_SetConfig+0x128>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <TIM_Base_SetConfig+0x12c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00f      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <TIM_Base_SetConfig+0x130>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00b      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a25      	ldr	r2, [pc, #148]	; (8004a20 <TIM_Base_SetConfig+0x134>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a24      	ldr	r2, [pc, #144]	; (8004a24 <TIM_Base_SetConfig+0x138>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a23      	ldr	r2, [pc, #140]	; (8004a28 <TIM_Base_SetConfig+0x13c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d108      	bne.n	80049b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <TIM_Base_SetConfig+0x114>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_Base_SetConfig+0xf8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <TIM_Base_SetConfig+0x124>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d103      	bne.n	80049ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	615a      	str	r2, [r3, #20]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800
 8004a20:	40001800 	.word	0x40001800
 8004a24:	40001c00 	.word	0x40001c00
 8004a28:	40002000 	.word	0x40002000

08004a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 0201 	bic.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f023 0302 	bic.w	r3, r3, #2
 8004a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <TIM_OC1_SetConfig+0xd8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC1_SetConfig+0x64>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <TIM_OC1_SetConfig+0xdc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10c      	bne.n	8004aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0308 	bic.w	r3, r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <TIM_OC1_SetConfig+0xd8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC1_SetConfig+0x8e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <TIM_OC1_SetConfig+0xdc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40010400 	.word	0x40010400

08004b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0320 	bic.w	r3, r3, #32
 8004b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <TIM_OC2_SetConfig+0xe4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_OC2_SetConfig+0x68>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <TIM_OC2_SetConfig+0xe8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10d      	bne.n	8004b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <TIM_OC2_SetConfig+0xe4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x94>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <TIM_OC2_SetConfig+0xe8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d113      	bne.n	8004bc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40010400 	.word	0x40010400

08004bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0303 	bic.w	r3, r3, #3
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <TIM_OC3_SetConfig+0xe0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_OC3_SetConfig+0x66>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <TIM_OC3_SetConfig+0xe4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10d      	bne.n	8004c7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <TIM_OC3_SetConfig+0xe0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_OC3_SetConfig+0x92>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <TIM_OC3_SetConfig+0xe4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d113      	bne.n	8004cb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	621a      	str	r2, [r3, #32]
}
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40010400 	.word	0x40010400

08004ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	031b      	lsls	r3, r3, #12
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <TIM_OC4_SetConfig+0xa4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC4_SetConfig+0x68>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <TIM_OC4_SetConfig+0xa8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d109      	bne.n	8004d5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	019b      	lsls	r3, r3, #6
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010400 	.word	0x40010400

08004d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 030a 	bic.w	r3, r3, #10
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0210 	bic.w	r2, r3, #16
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e05a      	b.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d01d      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10c      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40010400 	.word	0x40010400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40001800 	.word	0x40001800

08005004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800501c:	2302      	movs	r3, #2
 800501e:	e03d      	b.n	800509c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e03f      	b.n	8005162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fc84 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fd19 	bl	8005b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	4613      	mov	r3, r2
 8005176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b20      	cmp	r3, #32
 8005182:	d130      	bne.n	80051e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_UART_Transmit_IT+0x26>
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e029      	b.n	80051e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Transmit_IT+0x38>
 800519e:	2302      	movs	r3, #2
 80051a0:	e022      	b.n	80051e8 <HAL_UART_Transmit_IT+0x7e>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2221      	movs	r2, #33	; 0x21
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e000      	b.n	80051e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b20      	cmp	r3, #32
 800520c:	d11d      	bne.n	800524a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_UART_Receive_IT+0x26>
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e016      	b.n	800524c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_UART_Receive_IT+0x38>
 8005228:	2302      	movs	r3, #2
 800522a:	e00f      	b.n	800524c <HAL_UART_Receive_IT+0x58>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	461a      	mov	r2, r3
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 faab 	bl	800579c <UART_Start_Receive_IT>
 8005246:	4603      	mov	r3, r0
 8005248:	e000      	b.n	800524c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b0ba      	sub	sp, #232	; 0xe8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005280:	2300      	movs	r3, #0
 8005282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800529a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_UART_IRQHandler+0x66>
 80052a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fb8f 	bl	80059d6 <UART_Receive_IT>
      return;
 80052b8:	e256      	b.n	8005768 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80de 	beq.w	8005480 <HAL_UART_IRQHandler+0x22c>
 80052c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80d1 	beq.w	8005480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <HAL_UART_IRQHandler+0xae>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f043 0201 	orr.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_UART_IRQHandler+0xd2>
 800530e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0202 	orr.w	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_UART_IRQHandler+0xf6>
 8005332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f043 0204 	orr.w	r2, r3, #4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d011      	beq.n	800537a <HAL_UART_IRQHandler+0x126>
 8005356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f043 0208 	orr.w	r2, r3, #8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 81ed 	beq.w	800575e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_UART_IRQHandler+0x14e>
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fb1a 	bl	80059d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <HAL_UART_IRQHandler+0x17a>
 80053c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d04f      	beq.n	800546e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa22 	bl	8005818 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d141      	bne.n	8005466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3314      	adds	r3, #20
 800540a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800540e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800541a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1d9      	bne.n	80053e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	4a7d      	ldr	r2, [pc, #500]	; (8005630 <HAL_UART_IRQHandler+0x3dc>)
 800543c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc fed9 	bl	80021fa <HAL_DMA_Abort_IT>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005458:	4610      	mov	r0, r2
 800545a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e00e      	b.n	800547c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f986 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e00a      	b.n	800547c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f982 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	e006      	b.n	800547c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f97e 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800547a:	e170      	b.n	800575e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	bf00      	nop
    return;
 800547e:	e16e      	b.n	800575e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	2b01      	cmp	r3, #1
 8005486:	f040 814a 	bne.w	800571e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800548a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8143 	beq.w	800571e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 813c 	beq.w	800571e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	f040 80b4 	bne.w	8005634 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8140 	beq.w	8005762 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ea:	429a      	cmp	r2, r3
 80054ec:	f080 8139 	bcs.w	8005762 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	f000 8088 	beq.w	8005616 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800551c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800553e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800554a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1d9      	bne.n	8005506 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800557a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800557e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e1      	bne.n	8005552 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800559e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e3      	bne.n	800558e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e6:	f023 0310 	bic.w	r3, r3, #16
 80055ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80055fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e3      	bne.n	80055d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	4618      	mov	r0, r3
 8005612:	f7fc fd82 	bl	800211a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800561e:	b29b      	uxth	r3, r3
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	b29b      	uxth	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8ac 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800562c:	e099      	b.n	8005762 <HAL_UART_IRQHandler+0x50e>
 800562e:	bf00      	nop
 8005630:	080058df 	.word	0x080058df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563c:	b29b      	uxth	r3, r3
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 808b 	beq.w	8005766 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8086 	beq.w	8005766 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800567e:	647a      	str	r2, [r7, #68]	; 0x44
 8005680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e3      	bne.n	800565a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	623b      	str	r3, [r7, #32]
   return(result);
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3314      	adds	r3, #20
 80056b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056b6:	633a      	str	r2, [r7, #48]	; 0x30
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e3      	bne.n	8005692 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056fc:	61fa      	str	r2, [r7, #28]
 80056fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	617b      	str	r3, [r7, #20]
   return(result);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e3      	bne.n	80056d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f834 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800571c:	e023      	b.n	8005766 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_UART_IRQHandler+0x4ea>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8e5 	bl	8005906 <UART_Transmit_IT>
    return;
 800573c:	e014      	b.n	8005768 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00e      	beq.n	8005768 <HAL_UART_IRQHandler+0x514>
 800574a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f925 	bl	80059a6 <UART_EndTransmit_IT>
    return;
 800575c:	e004      	b.n	8005768 <HAL_UART_IRQHandler+0x514>
    return;
 800575e:	bf00      	nop
 8005760:	e002      	b.n	8005768 <HAL_UART_IRQHandler+0x514>
      return;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_UART_IRQHandler+0x514>
      return;
 8005766:	bf00      	nop
  }
}
 8005768:	37e8      	adds	r7, #232	; 0xe8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop

08005770 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2222      	movs	r2, #34	; 0x22
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0220 	orr.w	r2, r2, #32
 8005808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b095      	sub	sp, #84	; 0x54
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005840:	643a      	str	r2, [r7, #64]	; 0x40
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3314      	adds	r3, #20
 800585a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	61fb      	str	r3, [r7, #28]
   return(result);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3314      	adds	r3, #20
 8005872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005874:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800587a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	2b01      	cmp	r3, #1
 800588e:	d119      	bne.n	80058c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0310 	bic.w	r3, r3, #16
 80058a6:	647b      	str	r3, [r7, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b0:	61ba      	str	r2, [r7, #24]
 80058b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	613b      	str	r3, [r7, #16]
   return(result);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058d2:	bf00      	nop
 80058d4:	3754      	adds	r7, #84	; 0x54
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff ff39 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b21      	cmp	r3, #33	; 0x21
 8005918:	d13e      	bne.n	8005998 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005922:	d114      	bne.n	800594e <UART_Transmit_IT+0x48>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d110      	bne.n	800594e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005940:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	621a      	str	r2, [r3, #32]
 800594c:	e008      	b.n	8005960 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	1c59      	adds	r1, r3, #1
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6211      	str	r1, [r2, #32]
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29b      	uxth	r3, r3
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4619      	mov	r1, r3
 800596e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10f      	bne.n	8005994 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005982:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005992:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc f8b4 	bl	8001b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b08c      	sub	sp, #48	; 0x30
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b22      	cmp	r3, #34	; 0x22
 80059e8:	f040 80ab 	bne.w	8005b42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d117      	bne.n	8005a26 <UART_Receive_IT+0x50>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d113      	bne.n	8005a26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	1c9a      	adds	r2, r3, #2
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28
 8005a24:	e026      	b.n	8005a74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a38:	d007      	beq.n	8005a4a <UART_Receive_IT+0x74>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <UART_Receive_IT+0x82>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e008      	b.n	8005a6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4619      	mov	r1, r3
 8005a82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d15a      	bne.n	8005b3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0220 	bic.w	r2, r2, #32
 8005a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d135      	bne.n	8005b34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 0310 	bic.w	r3, r3, #16
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aee:	623a      	str	r2, [r7, #32]
 8005af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	69f9      	ldr	r1, [r7, #28]
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b10      	cmp	r3, #16
 8005b0e:	d10a      	bne.n	8005b26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fe29 	bl	8005784 <HAL_UARTEx_RxEventCallback>
 8005b32:	e002      	b.n	8005b3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fc f80b 	bl	8001b50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e002      	b.n	8005b44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3730      	adds	r7, #48	; 0x30
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b50:	b0c0      	sub	sp, #256	; 0x100
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	68d9      	ldr	r1, [r3, #12]
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	ea40 0301 	orr.w	r3, r0, r1
 8005b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ba4:	f021 010c 	bic.w	r1, r1, #12
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc6:	6999      	ldr	r1, [r3, #24]
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	ea40 0301 	orr.w	r3, r0, r1
 8005bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b8f      	ldr	r3, [pc, #572]	; (8005e18 <UART_SetConfig+0x2cc>)
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d005      	beq.n	8005bec <UART_SetConfig+0xa0>
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4b8d      	ldr	r3, [pc, #564]	; (8005e1c <UART_SetConfig+0x2d0>)
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d104      	bne.n	8005bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7fe f93c 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bf4:	e003      	b.n	8005bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bf6:	f7fe f923 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8005bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c08:	f040 810c 	bne.w	8005e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c1e:	4622      	mov	r2, r4
 8005c20:	462b      	mov	r3, r5
 8005c22:	1891      	adds	r1, r2, r2
 8005c24:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c26:	415b      	adcs	r3, r3
 8005c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c2e:	4621      	mov	r1, r4
 8005c30:	eb12 0801 	adds.w	r8, r2, r1
 8005c34:	4629      	mov	r1, r5
 8005c36:	eb43 0901 	adc.w	r9, r3, r1
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c4e:	4690      	mov	r8, r2
 8005c50:	4699      	mov	r9, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	eb18 0303 	adds.w	r3, r8, r3
 8005c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	eb49 0303 	adc.w	r3, r9, r3
 8005c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	18db      	adds	r3, r3, r3
 8005c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c80:	4613      	mov	r3, r2
 8005c82:	eb42 0303 	adc.w	r3, r2, r3
 8005c86:	657b      	str	r3, [r7, #84]	; 0x54
 8005c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c90:	f7fa fcb2 	bl	80005f8 <__aeabi_uldivmod>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4b61      	ldr	r3, [pc, #388]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	011c      	lsls	r4, r3, #4
 8005ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	1891      	adds	r1, r2, r2
 8005cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cbc:	415b      	adcs	r3, r3
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8005cca:	4649      	mov	r1, r9
 8005ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce4:	4692      	mov	sl, r2
 8005ce6:	469b      	mov	fp, r3
 8005ce8:	4643      	mov	r3, r8
 8005cea:	eb1a 0303 	adds.w	r3, sl, r3
 8005cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8005cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d10:	460b      	mov	r3, r1
 8005d12:	18db      	adds	r3, r3, r3
 8005d14:	643b      	str	r3, [r7, #64]	; 0x40
 8005d16:	4613      	mov	r3, r2
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d26:	f7fa fc67 	bl	80005f8 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4b3b      	ldr	r3, [pc, #236]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005d32:	fba3 2301 	umull	r2, r3, r3, r1
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	2264      	movs	r2, #100	; 0x64
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	1acb      	subs	r3, r1, r3
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d46:	4b36      	ldr	r3, [pc, #216]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005d48:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d54:	441c      	add	r4, r3
 8005d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d68:	4642      	mov	r2, r8
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	1891      	adds	r1, r2, r2
 8005d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d70:	415b      	adcs	r3, r3
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d78:	4641      	mov	r1, r8
 8005d7a:	1851      	adds	r1, r2, r1
 8005d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d7e:	4649      	mov	r1, r9
 8005d80:	414b      	adcs	r3, r1
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d90:	4659      	mov	r1, fp
 8005d92:	00cb      	lsls	r3, r1, #3
 8005d94:	4651      	mov	r1, sl
 8005d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	00ca      	lsls	r2, r1, #3
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	4642      	mov	r2, r8
 8005da6:	189b      	adds	r3, r3, r2
 8005da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dac:	464b      	mov	r3, r9
 8005dae:	460a      	mov	r2, r1
 8005db0:	eb42 0303 	adc.w	r3, r2, r3
 8005db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dcc:	460b      	mov	r3, r1
 8005dce:	18db      	adds	r3, r3, r3
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	eb42 0303 	adc.w	r3, r2, r3
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005de2:	f7fa fc09 	bl	80005f8 <__aeabi_uldivmod>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005dec:	fba3 1302 	umull	r1, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	2164      	movs	r1, #100	; 0x64
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	3332      	adds	r3, #50	; 0x32
 8005dfe:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <UART_SetConfig+0x2d4>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	f003 0207 	and.w	r2, r3, #7
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4422      	add	r2, r4
 8005e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e14:	e105      	b.n	8006022 <UART_SetConfig+0x4d6>
 8005e16:	bf00      	nop
 8005e18:	40011000 	.word	0x40011000
 8005e1c:	40011400 	.word	0x40011400
 8005e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e36:	4642      	mov	r2, r8
 8005e38:	464b      	mov	r3, r9
 8005e3a:	1891      	adds	r1, r2, r2
 8005e3c:	6239      	str	r1, [r7, #32]
 8005e3e:	415b      	adcs	r3, r3
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
 8005e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e46:	4641      	mov	r1, r8
 8005e48:	1854      	adds	r4, r2, r1
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	eb43 0501 	adc.w	r5, r3, r1
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	00eb      	lsls	r3, r5, #3
 8005e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e5e:	00e2      	lsls	r2, r4, #3
 8005e60:	4614      	mov	r4, r2
 8005e62:	461d      	mov	r5, r3
 8005e64:	4643      	mov	r3, r8
 8005e66:	18e3      	adds	r3, r4, r3
 8005e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	eb45 0303 	adc.w	r3, r5, r3
 8005e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e92:	4629      	mov	r1, r5
 8005e94:	008b      	lsls	r3, r1, #2
 8005e96:	4621      	mov	r1, r4
 8005e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	008a      	lsls	r2, r1, #2
 8005ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ea4:	f7fa fba8 	bl	80005f8 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4b60      	ldr	r3, [pc, #384]	; (8006030 <UART_SetConfig+0x4e4>)
 8005eae:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	011c      	lsls	r4, r3, #4
 8005eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ec0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	1891      	adds	r1, r2, r2
 8005ece:	61b9      	str	r1, [r7, #24]
 8005ed0:	415b      	adcs	r3, r3
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed8:	4641      	mov	r1, r8
 8005eda:	1851      	adds	r1, r2, r1
 8005edc:	6139      	str	r1, [r7, #16]
 8005ede:	4649      	mov	r1, r9
 8005ee0:	414b      	adcs	r3, r1
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	00cb      	lsls	r3, r1, #3
 8005ef4:	4651      	mov	r1, sl
 8005ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005efa:	4651      	mov	r1, sl
 8005efc:	00ca      	lsls	r2, r1, #3
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	4642      	mov	r2, r8
 8005f06:	189b      	adds	r3, r3, r2
 8005f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	460a      	mov	r2, r1
 8005f10:	eb42 0303 	adc.w	r3, r2, r3
 8005f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f30:	4649      	mov	r1, r9
 8005f32:	008b      	lsls	r3, r1, #2
 8005f34:	4641      	mov	r1, r8
 8005f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	008a      	lsls	r2, r1, #2
 8005f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f42:	f7fa fb59 	bl	80005f8 <__aeabi_uldivmod>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4b39      	ldr	r3, [pc, #228]	; (8006030 <UART_SetConfig+0x4e4>)
 8005f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2164      	movs	r1, #100	; 0x64
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a34      	ldr	r2, [pc, #208]	; (8006030 <UART_SetConfig+0x4e4>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6a:	441c      	add	r4, r3
 8005f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f70:	2200      	movs	r2, #0
 8005f72:	673b      	str	r3, [r7, #112]	; 0x70
 8005f74:	677a      	str	r2, [r7, #116]	; 0x74
 8005f76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	1891      	adds	r1, r2, r2
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	415b      	adcs	r3, r3
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	1851      	adds	r1, r2, r1
 8005f8e:	6039      	str	r1, [r7, #0]
 8005f90:	4649      	mov	r1, r9
 8005f92:	414b      	adcs	r3, r1
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fa2:	4659      	mov	r1, fp
 8005fa4:	00cb      	lsls	r3, r1, #3
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fac:	4651      	mov	r1, sl
 8005fae:	00ca      	lsls	r2, r1, #3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	189b      	adds	r3, r3, r2
 8005fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd0:	667a      	str	r2, [r7, #100]	; 0x64
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fde:	4649      	mov	r1, r9
 8005fe0:	008b      	lsls	r3, r1, #2
 8005fe2:	4641      	mov	r1, r8
 8005fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe8:	4641      	mov	r1, r8
 8005fea:	008a      	lsls	r2, r1, #2
 8005fec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <UART_SetConfig+0x4e4>)
 8005ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2164      	movs	r1, #100	; 0x64
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	3332      	adds	r3, #50	; 0x32
 800600c:	4a08      	ldr	r2, [pc, #32]	; (8006030 <UART_SetConfig+0x4e4>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f003 020f 	and.w	r2, r3, #15
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4422      	add	r2, r4
 8006020:	609a      	str	r2, [r3, #8]
}
 8006022:	bf00      	nop
 8006024:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006028:	46bd      	mov	sp, r7
 800602a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602e:	bf00      	nop
 8006030:	51eb851f 	.word	0x51eb851f

08006034 <__errno>:
 8006034:	4b01      	ldr	r3, [pc, #4]	; (800603c <__errno+0x8>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000018 	.word	0x20000018

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4d0d      	ldr	r5, [pc, #52]	; (8006078 <__libc_init_array+0x38>)
 8006044:	4c0d      	ldr	r4, [pc, #52]	; (800607c <__libc_init_array+0x3c>)
 8006046:	1b64      	subs	r4, r4, r5
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	2600      	movs	r6, #0
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	4d0b      	ldr	r5, [pc, #44]	; (8006080 <__libc_init_array+0x40>)
 8006052:	4c0c      	ldr	r4, [pc, #48]	; (8006084 <__libc_init_array+0x44>)
 8006054:	f000 fc8e 	bl	8006974 <_init>
 8006058:	1b64      	subs	r4, r4, r5
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	2600      	movs	r6, #0
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f855 3b04 	ldr.w	r3, [r5], #4
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	08006a00 	.word	0x08006a00
 800607c:	08006a00 	.word	0x08006a00
 8006080:	08006a00 	.word	0x08006a00
 8006084:	08006a04 	.word	0x08006a04

08006088 <memset>:
 8006088:	4402      	add	r2, r0
 800608a:	4603      	mov	r3, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <siprintf>:
 8006098:	b40e      	push	{r1, r2, r3}
 800609a:	b500      	push	{lr}
 800609c:	b09c      	sub	sp, #112	; 0x70
 800609e:	ab1d      	add	r3, sp, #116	; 0x74
 80060a0:	9002      	str	r0, [sp, #8]
 80060a2:	9006      	str	r0, [sp, #24]
 80060a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060a8:	4809      	ldr	r0, [pc, #36]	; (80060d0 <siprintf+0x38>)
 80060aa:	9107      	str	r1, [sp, #28]
 80060ac:	9104      	str	r1, [sp, #16]
 80060ae:	4909      	ldr	r1, [pc, #36]	; (80060d4 <siprintf+0x3c>)
 80060b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b4:	9105      	str	r1, [sp, #20]
 80060b6:	6800      	ldr	r0, [r0, #0]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	a902      	add	r1, sp, #8
 80060bc:	f000 f868 	bl	8006190 <_svfiprintf_r>
 80060c0:	9b02      	ldr	r3, [sp, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	b01c      	add	sp, #112	; 0x70
 80060c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060cc:	b003      	add	sp, #12
 80060ce:	4770      	bx	lr
 80060d0:	20000018 	.word	0x20000018
 80060d4:	ffff0208 	.word	0xffff0208

080060d8 <__ssputs_r>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	688e      	ldr	r6, [r1, #8]
 80060de:	429e      	cmp	r6, r3
 80060e0:	4682      	mov	sl, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4690      	mov	r8, r2
 80060e6:	461f      	mov	r7, r3
 80060e8:	d838      	bhi.n	800615c <__ssputs_r+0x84>
 80060ea:	898a      	ldrh	r2, [r1, #12]
 80060ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060f0:	d032      	beq.n	8006158 <__ssputs_r+0x80>
 80060f2:	6825      	ldr	r5, [r4, #0]
 80060f4:	6909      	ldr	r1, [r1, #16]
 80060f6:	eba5 0901 	sub.w	r9, r5, r1
 80060fa:	6965      	ldr	r5, [r4, #20]
 80060fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006104:	3301      	adds	r3, #1
 8006106:	444b      	add	r3, r9
 8006108:	106d      	asrs	r5, r5, #1
 800610a:	429d      	cmp	r5, r3
 800610c:	bf38      	it	cc
 800610e:	461d      	movcc	r5, r3
 8006110:	0553      	lsls	r3, r2, #21
 8006112:	d531      	bpl.n	8006178 <__ssputs_r+0xa0>
 8006114:	4629      	mov	r1, r5
 8006116:	f000 fb63 	bl	80067e0 <_malloc_r>
 800611a:	4606      	mov	r6, r0
 800611c:	b950      	cbnz	r0, 8006134 <__ssputs_r+0x5c>
 800611e:	230c      	movs	r3, #12
 8006120:	f8ca 3000 	str.w	r3, [sl]
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006134:	6921      	ldr	r1, [r4, #16]
 8006136:	464a      	mov	r2, r9
 8006138:	f000 fabe 	bl	80066b8 <memcpy>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	81a3      	strh	r3, [r4, #12]
 8006148:	6126      	str	r6, [r4, #16]
 800614a:	6165      	str	r5, [r4, #20]
 800614c:	444e      	add	r6, r9
 800614e:	eba5 0509 	sub.w	r5, r5, r9
 8006152:	6026      	str	r6, [r4, #0]
 8006154:	60a5      	str	r5, [r4, #8]
 8006156:	463e      	mov	r6, r7
 8006158:	42be      	cmp	r6, r7
 800615a:	d900      	bls.n	800615e <__ssputs_r+0x86>
 800615c:	463e      	mov	r6, r7
 800615e:	6820      	ldr	r0, [r4, #0]
 8006160:	4632      	mov	r2, r6
 8006162:	4641      	mov	r1, r8
 8006164:	f000 fab6 	bl	80066d4 <memmove>
 8006168:	68a3      	ldr	r3, [r4, #8]
 800616a:	1b9b      	subs	r3, r3, r6
 800616c:	60a3      	str	r3, [r4, #8]
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	4433      	add	r3, r6
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	2000      	movs	r0, #0
 8006176:	e7db      	b.n	8006130 <__ssputs_r+0x58>
 8006178:	462a      	mov	r2, r5
 800617a:	f000 fba5 	bl	80068c8 <_realloc_r>
 800617e:	4606      	mov	r6, r0
 8006180:	2800      	cmp	r0, #0
 8006182:	d1e1      	bne.n	8006148 <__ssputs_r+0x70>
 8006184:	6921      	ldr	r1, [r4, #16]
 8006186:	4650      	mov	r0, sl
 8006188:	f000 fabe 	bl	8006708 <_free_r>
 800618c:	e7c7      	b.n	800611e <__ssputs_r+0x46>
	...

08006190 <_svfiprintf_r>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	4698      	mov	r8, r3
 8006196:	898b      	ldrh	r3, [r1, #12]
 8006198:	061b      	lsls	r3, r3, #24
 800619a:	b09d      	sub	sp, #116	; 0x74
 800619c:	4607      	mov	r7, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	4614      	mov	r4, r2
 80061a2:	d50e      	bpl.n	80061c2 <_svfiprintf_r+0x32>
 80061a4:	690b      	ldr	r3, [r1, #16]
 80061a6:	b963      	cbnz	r3, 80061c2 <_svfiprintf_r+0x32>
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	f000 fb19 	bl	80067e0 <_malloc_r>
 80061ae:	6028      	str	r0, [r5, #0]
 80061b0:	6128      	str	r0, [r5, #16]
 80061b2:	b920      	cbnz	r0, 80061be <_svfiprintf_r+0x2e>
 80061b4:	230c      	movs	r3, #12
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061bc:	e0d1      	b.n	8006362 <_svfiprintf_r+0x1d2>
 80061be:	2340      	movs	r3, #64	; 0x40
 80061c0:	616b      	str	r3, [r5, #20]
 80061c2:	2300      	movs	r3, #0
 80061c4:	9309      	str	r3, [sp, #36]	; 0x24
 80061c6:	2320      	movs	r3, #32
 80061c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80061d0:	2330      	movs	r3, #48	; 0x30
 80061d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800637c <_svfiprintf_r+0x1ec>
 80061d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061da:	f04f 0901 	mov.w	r9, #1
 80061de:	4623      	mov	r3, r4
 80061e0:	469a      	mov	sl, r3
 80061e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061e6:	b10a      	cbz	r2, 80061ec <_svfiprintf_r+0x5c>
 80061e8:	2a25      	cmp	r2, #37	; 0x25
 80061ea:	d1f9      	bne.n	80061e0 <_svfiprintf_r+0x50>
 80061ec:	ebba 0b04 	subs.w	fp, sl, r4
 80061f0:	d00b      	beq.n	800620a <_svfiprintf_r+0x7a>
 80061f2:	465b      	mov	r3, fp
 80061f4:	4622      	mov	r2, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	4638      	mov	r0, r7
 80061fa:	f7ff ff6d 	bl	80060d8 <__ssputs_r>
 80061fe:	3001      	adds	r0, #1
 8006200:	f000 80aa 	beq.w	8006358 <_svfiprintf_r+0x1c8>
 8006204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006206:	445a      	add	r2, fp
 8006208:	9209      	str	r2, [sp, #36]	; 0x24
 800620a:	f89a 3000 	ldrb.w	r3, [sl]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80a2 	beq.w	8006358 <_svfiprintf_r+0x1c8>
 8006214:	2300      	movs	r3, #0
 8006216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800621e:	f10a 0a01 	add.w	sl, sl, #1
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	9307      	str	r3, [sp, #28]
 8006226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800622a:	931a      	str	r3, [sp, #104]	; 0x68
 800622c:	4654      	mov	r4, sl
 800622e:	2205      	movs	r2, #5
 8006230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006234:	4851      	ldr	r0, [pc, #324]	; (800637c <_svfiprintf_r+0x1ec>)
 8006236:	f7f9 ffd3 	bl	80001e0 <memchr>
 800623a:	9a04      	ldr	r2, [sp, #16]
 800623c:	b9d8      	cbnz	r0, 8006276 <_svfiprintf_r+0xe6>
 800623e:	06d0      	lsls	r0, r2, #27
 8006240:	bf44      	itt	mi
 8006242:	2320      	movmi	r3, #32
 8006244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006248:	0711      	lsls	r1, r2, #28
 800624a:	bf44      	itt	mi
 800624c:	232b      	movmi	r3, #43	; 0x2b
 800624e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006252:	f89a 3000 	ldrb.w	r3, [sl]
 8006256:	2b2a      	cmp	r3, #42	; 0x2a
 8006258:	d015      	beq.n	8006286 <_svfiprintf_r+0xf6>
 800625a:	9a07      	ldr	r2, [sp, #28]
 800625c:	4654      	mov	r4, sl
 800625e:	2000      	movs	r0, #0
 8006260:	f04f 0c0a 	mov.w	ip, #10
 8006264:	4621      	mov	r1, r4
 8006266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800626a:	3b30      	subs	r3, #48	; 0x30
 800626c:	2b09      	cmp	r3, #9
 800626e:	d94e      	bls.n	800630e <_svfiprintf_r+0x17e>
 8006270:	b1b0      	cbz	r0, 80062a0 <_svfiprintf_r+0x110>
 8006272:	9207      	str	r2, [sp, #28]
 8006274:	e014      	b.n	80062a0 <_svfiprintf_r+0x110>
 8006276:	eba0 0308 	sub.w	r3, r0, r8
 800627a:	fa09 f303 	lsl.w	r3, r9, r3
 800627e:	4313      	orrs	r3, r2
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	46a2      	mov	sl, r4
 8006284:	e7d2      	b.n	800622c <_svfiprintf_r+0x9c>
 8006286:	9b03      	ldr	r3, [sp, #12]
 8006288:	1d19      	adds	r1, r3, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	9103      	str	r1, [sp, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	bfbb      	ittet	lt
 8006292:	425b      	neglt	r3, r3
 8006294:	f042 0202 	orrlt.w	r2, r2, #2
 8006298:	9307      	strge	r3, [sp, #28]
 800629a:	9307      	strlt	r3, [sp, #28]
 800629c:	bfb8      	it	lt
 800629e:	9204      	strlt	r2, [sp, #16]
 80062a0:	7823      	ldrb	r3, [r4, #0]
 80062a2:	2b2e      	cmp	r3, #46	; 0x2e
 80062a4:	d10c      	bne.n	80062c0 <_svfiprintf_r+0x130>
 80062a6:	7863      	ldrb	r3, [r4, #1]
 80062a8:	2b2a      	cmp	r3, #42	; 0x2a
 80062aa:	d135      	bne.n	8006318 <_svfiprintf_r+0x188>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	9203      	str	r2, [sp, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bfb8      	it	lt
 80062b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062bc:	3402      	adds	r4, #2
 80062be:	9305      	str	r3, [sp, #20]
 80062c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800638c <_svfiprintf_r+0x1fc>
 80062c4:	7821      	ldrb	r1, [r4, #0]
 80062c6:	2203      	movs	r2, #3
 80062c8:	4650      	mov	r0, sl
 80062ca:	f7f9 ff89 	bl	80001e0 <memchr>
 80062ce:	b140      	cbz	r0, 80062e2 <_svfiprintf_r+0x152>
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	eba0 000a 	sub.w	r0, r0, sl
 80062d6:	fa03 f000 	lsl.w	r0, r3, r0
 80062da:	9b04      	ldr	r3, [sp, #16]
 80062dc:	4303      	orrs	r3, r0
 80062de:	3401      	adds	r4, #1
 80062e0:	9304      	str	r3, [sp, #16]
 80062e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e6:	4826      	ldr	r0, [pc, #152]	; (8006380 <_svfiprintf_r+0x1f0>)
 80062e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ec:	2206      	movs	r2, #6
 80062ee:	f7f9 ff77 	bl	80001e0 <memchr>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d038      	beq.n	8006368 <_svfiprintf_r+0x1d8>
 80062f6:	4b23      	ldr	r3, [pc, #140]	; (8006384 <_svfiprintf_r+0x1f4>)
 80062f8:	bb1b      	cbnz	r3, 8006342 <_svfiprintf_r+0x1b2>
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	3307      	adds	r3, #7
 80062fe:	f023 0307 	bic.w	r3, r3, #7
 8006302:	3308      	adds	r3, #8
 8006304:	9303      	str	r3, [sp, #12]
 8006306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006308:	4433      	add	r3, r6
 800630a:	9309      	str	r3, [sp, #36]	; 0x24
 800630c:	e767      	b.n	80061de <_svfiprintf_r+0x4e>
 800630e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006312:	460c      	mov	r4, r1
 8006314:	2001      	movs	r0, #1
 8006316:	e7a5      	b.n	8006264 <_svfiprintf_r+0xd4>
 8006318:	2300      	movs	r3, #0
 800631a:	3401      	adds	r4, #1
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	4619      	mov	r1, r3
 8006320:	f04f 0c0a 	mov.w	ip, #10
 8006324:	4620      	mov	r0, r4
 8006326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800632a:	3a30      	subs	r2, #48	; 0x30
 800632c:	2a09      	cmp	r2, #9
 800632e:	d903      	bls.n	8006338 <_svfiprintf_r+0x1a8>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0c5      	beq.n	80062c0 <_svfiprintf_r+0x130>
 8006334:	9105      	str	r1, [sp, #20]
 8006336:	e7c3      	b.n	80062c0 <_svfiprintf_r+0x130>
 8006338:	fb0c 2101 	mla	r1, ip, r1, r2
 800633c:	4604      	mov	r4, r0
 800633e:	2301      	movs	r3, #1
 8006340:	e7f0      	b.n	8006324 <_svfiprintf_r+0x194>
 8006342:	ab03      	add	r3, sp, #12
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	462a      	mov	r2, r5
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <_svfiprintf_r+0x1f8>)
 800634a:	a904      	add	r1, sp, #16
 800634c:	4638      	mov	r0, r7
 800634e:	f3af 8000 	nop.w
 8006352:	1c42      	adds	r2, r0, #1
 8006354:	4606      	mov	r6, r0
 8006356:	d1d6      	bne.n	8006306 <_svfiprintf_r+0x176>
 8006358:	89ab      	ldrh	r3, [r5, #12]
 800635a:	065b      	lsls	r3, r3, #25
 800635c:	f53f af2c 	bmi.w	80061b8 <_svfiprintf_r+0x28>
 8006360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006362:	b01d      	add	sp, #116	; 0x74
 8006364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006368:	ab03      	add	r3, sp, #12
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	462a      	mov	r2, r5
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <_svfiprintf_r+0x1f8>)
 8006370:	a904      	add	r1, sp, #16
 8006372:	4638      	mov	r0, r7
 8006374:	f000 f87a 	bl	800646c <_printf_i>
 8006378:	e7eb      	b.n	8006352 <_svfiprintf_r+0x1c2>
 800637a:	bf00      	nop
 800637c:	080069c4 	.word	0x080069c4
 8006380:	080069ce 	.word	0x080069ce
 8006384:	00000000 	.word	0x00000000
 8006388:	080060d9 	.word	0x080060d9
 800638c:	080069ca 	.word	0x080069ca

08006390 <_printf_common>:
 8006390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	4616      	mov	r6, r2
 8006396:	4699      	mov	r9, r3
 8006398:	688a      	ldr	r2, [r1, #8]
 800639a:	690b      	ldr	r3, [r1, #16]
 800639c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	bfb8      	it	lt
 80063a4:	4613      	movlt	r3, r2
 80063a6:	6033      	str	r3, [r6, #0]
 80063a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063ac:	4607      	mov	r7, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	b10a      	cbz	r2, 80063b6 <_printf_common+0x26>
 80063b2:	3301      	adds	r3, #1
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	0699      	lsls	r1, r3, #26
 80063ba:	bf42      	ittt	mi
 80063bc:	6833      	ldrmi	r3, [r6, #0]
 80063be:	3302      	addmi	r3, #2
 80063c0:	6033      	strmi	r3, [r6, #0]
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	f015 0506 	ands.w	r5, r5, #6
 80063c8:	d106      	bne.n	80063d8 <_printf_common+0x48>
 80063ca:	f104 0a19 	add.w	sl, r4, #25
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	6832      	ldr	r2, [r6, #0]
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dc26      	bgt.n	8006426 <_printf_common+0x96>
 80063d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063dc:	1e13      	subs	r3, r2, #0
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	bf18      	it	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	0692      	lsls	r2, r2, #26
 80063e6:	d42b      	bmi.n	8006440 <_printf_common+0xb0>
 80063e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ec:	4649      	mov	r1, r9
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c0      	blx	r8
 80063f2:	3001      	adds	r0, #1
 80063f4:	d01e      	beq.n	8006434 <_printf_common+0xa4>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	68e5      	ldr	r5, [r4, #12]
 80063fa:	6832      	ldr	r2, [r6, #0]
 80063fc:	f003 0306 	and.w	r3, r3, #6
 8006400:	2b04      	cmp	r3, #4
 8006402:	bf08      	it	eq
 8006404:	1aad      	subeq	r5, r5, r2
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	6922      	ldr	r2, [r4, #16]
 800640a:	bf0c      	ite	eq
 800640c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006410:	2500      	movne	r5, #0
 8006412:	4293      	cmp	r3, r2
 8006414:	bfc4      	itt	gt
 8006416:	1a9b      	subgt	r3, r3, r2
 8006418:	18ed      	addgt	r5, r5, r3
 800641a:	2600      	movs	r6, #0
 800641c:	341a      	adds	r4, #26
 800641e:	42b5      	cmp	r5, r6
 8006420:	d11a      	bne.n	8006458 <_printf_common+0xc8>
 8006422:	2000      	movs	r0, #0
 8006424:	e008      	b.n	8006438 <_printf_common+0xa8>
 8006426:	2301      	movs	r3, #1
 8006428:	4652      	mov	r2, sl
 800642a:	4649      	mov	r1, r9
 800642c:	4638      	mov	r0, r7
 800642e:	47c0      	blx	r8
 8006430:	3001      	adds	r0, #1
 8006432:	d103      	bne.n	800643c <_printf_common+0xac>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	3501      	adds	r5, #1
 800643e:	e7c6      	b.n	80063ce <_printf_common+0x3e>
 8006440:	18e1      	adds	r1, r4, r3
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	2030      	movs	r0, #48	; 0x30
 8006446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800644a:	4422      	add	r2, r4
 800644c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006454:	3302      	adds	r3, #2
 8006456:	e7c7      	b.n	80063e8 <_printf_common+0x58>
 8006458:	2301      	movs	r3, #1
 800645a:	4622      	mov	r2, r4
 800645c:	4649      	mov	r1, r9
 800645e:	4638      	mov	r0, r7
 8006460:	47c0      	blx	r8
 8006462:	3001      	adds	r0, #1
 8006464:	d0e6      	beq.n	8006434 <_printf_common+0xa4>
 8006466:	3601      	adds	r6, #1
 8006468:	e7d9      	b.n	800641e <_printf_common+0x8e>
	...

0800646c <_printf_i>:
 800646c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	7e0f      	ldrb	r7, [r1, #24]
 8006472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006474:	2f78      	cmp	r7, #120	; 0x78
 8006476:	4691      	mov	r9, r2
 8006478:	4680      	mov	r8, r0
 800647a:	460c      	mov	r4, r1
 800647c:	469a      	mov	sl, r3
 800647e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006482:	d807      	bhi.n	8006494 <_printf_i+0x28>
 8006484:	2f62      	cmp	r7, #98	; 0x62
 8006486:	d80a      	bhi.n	800649e <_printf_i+0x32>
 8006488:	2f00      	cmp	r7, #0
 800648a:	f000 80d8 	beq.w	800663e <_printf_i+0x1d2>
 800648e:	2f58      	cmp	r7, #88	; 0x58
 8006490:	f000 80a3 	beq.w	80065da <_printf_i+0x16e>
 8006494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800649c:	e03a      	b.n	8006514 <_printf_i+0xa8>
 800649e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064a2:	2b15      	cmp	r3, #21
 80064a4:	d8f6      	bhi.n	8006494 <_printf_i+0x28>
 80064a6:	a101      	add	r1, pc, #4	; (adr r1, 80064ac <_printf_i+0x40>)
 80064a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ac:	08006505 	.word	0x08006505
 80064b0:	08006519 	.word	0x08006519
 80064b4:	08006495 	.word	0x08006495
 80064b8:	08006495 	.word	0x08006495
 80064bc:	08006495 	.word	0x08006495
 80064c0:	08006495 	.word	0x08006495
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006495 	.word	0x08006495
 80064cc:	08006495 	.word	0x08006495
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	08006625 	.word	0x08006625
 80064dc:	08006549 	.word	0x08006549
 80064e0:	08006607 	.word	0x08006607
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	08006647 	.word	0x08006647
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006549 	.word	0x08006549
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	0800660f 	.word	0x0800660f
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	602a      	str	r2, [r5, #0]
 800650c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006514:	2301      	movs	r3, #1
 8006516:	e0a3      	b.n	8006660 <_printf_i+0x1f4>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	6829      	ldr	r1, [r5, #0]
 800651c:	0606      	lsls	r6, r0, #24
 800651e:	f101 0304 	add.w	r3, r1, #4
 8006522:	d50a      	bpl.n	800653a <_printf_i+0xce>
 8006524:	680e      	ldr	r6, [r1, #0]
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	2e00      	cmp	r6, #0
 800652a:	da03      	bge.n	8006534 <_printf_i+0xc8>
 800652c:	232d      	movs	r3, #45	; 0x2d
 800652e:	4276      	negs	r6, r6
 8006530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006534:	485e      	ldr	r0, [pc, #376]	; (80066b0 <_printf_i+0x244>)
 8006536:	230a      	movs	r3, #10
 8006538:	e019      	b.n	800656e <_printf_i+0x102>
 800653a:	680e      	ldr	r6, [r1, #0]
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006542:	bf18      	it	ne
 8006544:	b236      	sxthne	r6, r6
 8006546:	e7ef      	b.n	8006528 <_printf_i+0xbc>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	6029      	str	r1, [r5, #0]
 8006550:	0601      	lsls	r1, r0, #24
 8006552:	d501      	bpl.n	8006558 <_printf_i+0xec>
 8006554:	681e      	ldr	r6, [r3, #0]
 8006556:	e002      	b.n	800655e <_printf_i+0xf2>
 8006558:	0646      	lsls	r6, r0, #25
 800655a:	d5fb      	bpl.n	8006554 <_printf_i+0xe8>
 800655c:	881e      	ldrh	r6, [r3, #0]
 800655e:	4854      	ldr	r0, [pc, #336]	; (80066b0 <_printf_i+0x244>)
 8006560:	2f6f      	cmp	r7, #111	; 0x6f
 8006562:	bf0c      	ite	eq
 8006564:	2308      	moveq	r3, #8
 8006566:	230a      	movne	r3, #10
 8006568:	2100      	movs	r1, #0
 800656a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800656e:	6865      	ldr	r5, [r4, #4]
 8006570:	60a5      	str	r5, [r4, #8]
 8006572:	2d00      	cmp	r5, #0
 8006574:	bfa2      	ittt	ge
 8006576:	6821      	ldrge	r1, [r4, #0]
 8006578:	f021 0104 	bicge.w	r1, r1, #4
 800657c:	6021      	strge	r1, [r4, #0]
 800657e:	b90e      	cbnz	r6, 8006584 <_printf_i+0x118>
 8006580:	2d00      	cmp	r5, #0
 8006582:	d04d      	beq.n	8006620 <_printf_i+0x1b4>
 8006584:	4615      	mov	r5, r2
 8006586:	fbb6 f1f3 	udiv	r1, r6, r3
 800658a:	fb03 6711 	mls	r7, r3, r1, r6
 800658e:	5dc7      	ldrb	r7, [r0, r7]
 8006590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006594:	4637      	mov	r7, r6
 8006596:	42bb      	cmp	r3, r7
 8006598:	460e      	mov	r6, r1
 800659a:	d9f4      	bls.n	8006586 <_printf_i+0x11a>
 800659c:	2b08      	cmp	r3, #8
 800659e:	d10b      	bne.n	80065b8 <_printf_i+0x14c>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	07de      	lsls	r6, r3, #31
 80065a4:	d508      	bpl.n	80065b8 <_printf_i+0x14c>
 80065a6:	6923      	ldr	r3, [r4, #16]
 80065a8:	6861      	ldr	r1, [r4, #4]
 80065aa:	4299      	cmp	r1, r3
 80065ac:	bfde      	ittt	le
 80065ae:	2330      	movle	r3, #48	; 0x30
 80065b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065b8:	1b52      	subs	r2, r2, r5
 80065ba:	6122      	str	r2, [r4, #16]
 80065bc:	f8cd a000 	str.w	sl, [sp]
 80065c0:	464b      	mov	r3, r9
 80065c2:	aa03      	add	r2, sp, #12
 80065c4:	4621      	mov	r1, r4
 80065c6:	4640      	mov	r0, r8
 80065c8:	f7ff fee2 	bl	8006390 <_printf_common>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d14c      	bne.n	800666a <_printf_i+0x1fe>
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d4:	b004      	add	sp, #16
 80065d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065da:	4835      	ldr	r0, [pc, #212]	; (80066b0 <_printf_i+0x244>)
 80065dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065e0:	6829      	ldr	r1, [r5, #0]
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065e8:	6029      	str	r1, [r5, #0]
 80065ea:	061d      	lsls	r5, r3, #24
 80065ec:	d514      	bpl.n	8006618 <_printf_i+0x1ac>
 80065ee:	07df      	lsls	r7, r3, #31
 80065f0:	bf44      	itt	mi
 80065f2:	f043 0320 	orrmi.w	r3, r3, #32
 80065f6:	6023      	strmi	r3, [r4, #0]
 80065f8:	b91e      	cbnz	r6, 8006602 <_printf_i+0x196>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	f023 0320 	bic.w	r3, r3, #32
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	2310      	movs	r3, #16
 8006604:	e7b0      	b.n	8006568 <_printf_i+0xfc>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	f043 0320 	orr.w	r3, r3, #32
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	2378      	movs	r3, #120	; 0x78
 8006610:	4828      	ldr	r0, [pc, #160]	; (80066b4 <_printf_i+0x248>)
 8006612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006616:	e7e3      	b.n	80065e0 <_printf_i+0x174>
 8006618:	0659      	lsls	r1, r3, #25
 800661a:	bf48      	it	mi
 800661c:	b2b6      	uxthmi	r6, r6
 800661e:	e7e6      	b.n	80065ee <_printf_i+0x182>
 8006620:	4615      	mov	r5, r2
 8006622:	e7bb      	b.n	800659c <_printf_i+0x130>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	6826      	ldr	r6, [r4, #0]
 8006628:	6961      	ldr	r1, [r4, #20]
 800662a:	1d18      	adds	r0, r3, #4
 800662c:	6028      	str	r0, [r5, #0]
 800662e:	0635      	lsls	r5, r6, #24
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	d501      	bpl.n	8006638 <_printf_i+0x1cc>
 8006634:	6019      	str	r1, [r3, #0]
 8006636:	e002      	b.n	800663e <_printf_i+0x1d2>
 8006638:	0670      	lsls	r0, r6, #25
 800663a:	d5fb      	bpl.n	8006634 <_printf_i+0x1c8>
 800663c:	8019      	strh	r1, [r3, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	4615      	mov	r5, r2
 8006644:	e7ba      	b.n	80065bc <_printf_i+0x150>
 8006646:	682b      	ldr	r3, [r5, #0]
 8006648:	1d1a      	adds	r2, r3, #4
 800664a:	602a      	str	r2, [r5, #0]
 800664c:	681d      	ldr	r5, [r3, #0]
 800664e:	6862      	ldr	r2, [r4, #4]
 8006650:	2100      	movs	r1, #0
 8006652:	4628      	mov	r0, r5
 8006654:	f7f9 fdc4 	bl	80001e0 <memchr>
 8006658:	b108      	cbz	r0, 800665e <_printf_i+0x1f2>
 800665a:	1b40      	subs	r0, r0, r5
 800665c:	6060      	str	r0, [r4, #4]
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	2300      	movs	r3, #0
 8006664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006668:	e7a8      	b.n	80065bc <_printf_i+0x150>
 800666a:	6923      	ldr	r3, [r4, #16]
 800666c:	462a      	mov	r2, r5
 800666e:	4649      	mov	r1, r9
 8006670:	4640      	mov	r0, r8
 8006672:	47d0      	blx	sl
 8006674:	3001      	adds	r0, #1
 8006676:	d0ab      	beq.n	80065d0 <_printf_i+0x164>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	079b      	lsls	r3, r3, #30
 800667c:	d413      	bmi.n	80066a6 <_printf_i+0x23a>
 800667e:	68e0      	ldr	r0, [r4, #12]
 8006680:	9b03      	ldr	r3, [sp, #12]
 8006682:	4298      	cmp	r0, r3
 8006684:	bfb8      	it	lt
 8006686:	4618      	movlt	r0, r3
 8006688:	e7a4      	b.n	80065d4 <_printf_i+0x168>
 800668a:	2301      	movs	r3, #1
 800668c:	4632      	mov	r2, r6
 800668e:	4649      	mov	r1, r9
 8006690:	4640      	mov	r0, r8
 8006692:	47d0      	blx	sl
 8006694:	3001      	adds	r0, #1
 8006696:	d09b      	beq.n	80065d0 <_printf_i+0x164>
 8006698:	3501      	adds	r5, #1
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	9903      	ldr	r1, [sp, #12]
 800669e:	1a5b      	subs	r3, r3, r1
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	dcf2      	bgt.n	800668a <_printf_i+0x21e>
 80066a4:	e7eb      	b.n	800667e <_printf_i+0x212>
 80066a6:	2500      	movs	r5, #0
 80066a8:	f104 0619 	add.w	r6, r4, #25
 80066ac:	e7f5      	b.n	800669a <_printf_i+0x22e>
 80066ae:	bf00      	nop
 80066b0:	080069d5 	.word	0x080069d5
 80066b4:	080069e6 	.word	0x080069e6

080066b8 <memcpy>:
 80066b8:	440a      	add	r2, r1
 80066ba:	4291      	cmp	r1, r2
 80066bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80066c0:	d100      	bne.n	80066c4 <memcpy+0xc>
 80066c2:	4770      	bx	lr
 80066c4:	b510      	push	{r4, lr}
 80066c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ce:	4291      	cmp	r1, r2
 80066d0:	d1f9      	bne.n	80066c6 <memcpy+0xe>
 80066d2:	bd10      	pop	{r4, pc}

080066d4 <memmove>:
 80066d4:	4288      	cmp	r0, r1
 80066d6:	b510      	push	{r4, lr}
 80066d8:	eb01 0402 	add.w	r4, r1, r2
 80066dc:	d902      	bls.n	80066e4 <memmove+0x10>
 80066de:	4284      	cmp	r4, r0
 80066e0:	4623      	mov	r3, r4
 80066e2:	d807      	bhi.n	80066f4 <memmove+0x20>
 80066e4:	1e43      	subs	r3, r0, #1
 80066e6:	42a1      	cmp	r1, r4
 80066e8:	d008      	beq.n	80066fc <memmove+0x28>
 80066ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f2:	e7f8      	b.n	80066e6 <memmove+0x12>
 80066f4:	4402      	add	r2, r0
 80066f6:	4601      	mov	r1, r0
 80066f8:	428a      	cmp	r2, r1
 80066fa:	d100      	bne.n	80066fe <memmove+0x2a>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006706:	e7f7      	b.n	80066f8 <memmove+0x24>

08006708 <_free_r>:
 8006708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800670a:	2900      	cmp	r1, #0
 800670c:	d044      	beq.n	8006798 <_free_r+0x90>
 800670e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006712:	9001      	str	r0, [sp, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f1a1 0404 	sub.w	r4, r1, #4
 800671a:	bfb8      	it	lt
 800671c:	18e4      	addlt	r4, r4, r3
 800671e:	f000 f913 	bl	8006948 <__malloc_lock>
 8006722:	4a1e      	ldr	r2, [pc, #120]	; (800679c <_free_r+0x94>)
 8006724:	9801      	ldr	r0, [sp, #4]
 8006726:	6813      	ldr	r3, [r2, #0]
 8006728:	b933      	cbnz	r3, 8006738 <_free_r+0x30>
 800672a:	6063      	str	r3, [r4, #4]
 800672c:	6014      	str	r4, [r2, #0]
 800672e:	b003      	add	sp, #12
 8006730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006734:	f000 b90e 	b.w	8006954 <__malloc_unlock>
 8006738:	42a3      	cmp	r3, r4
 800673a:	d908      	bls.n	800674e <_free_r+0x46>
 800673c:	6825      	ldr	r5, [r4, #0]
 800673e:	1961      	adds	r1, r4, r5
 8006740:	428b      	cmp	r3, r1
 8006742:	bf01      	itttt	eq
 8006744:	6819      	ldreq	r1, [r3, #0]
 8006746:	685b      	ldreq	r3, [r3, #4]
 8006748:	1949      	addeq	r1, r1, r5
 800674a:	6021      	streq	r1, [r4, #0]
 800674c:	e7ed      	b.n	800672a <_free_r+0x22>
 800674e:	461a      	mov	r2, r3
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	b10b      	cbz	r3, 8006758 <_free_r+0x50>
 8006754:	42a3      	cmp	r3, r4
 8006756:	d9fa      	bls.n	800674e <_free_r+0x46>
 8006758:	6811      	ldr	r1, [r2, #0]
 800675a:	1855      	adds	r5, r2, r1
 800675c:	42a5      	cmp	r5, r4
 800675e:	d10b      	bne.n	8006778 <_free_r+0x70>
 8006760:	6824      	ldr	r4, [r4, #0]
 8006762:	4421      	add	r1, r4
 8006764:	1854      	adds	r4, r2, r1
 8006766:	42a3      	cmp	r3, r4
 8006768:	6011      	str	r1, [r2, #0]
 800676a:	d1e0      	bne.n	800672e <_free_r+0x26>
 800676c:	681c      	ldr	r4, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	6053      	str	r3, [r2, #4]
 8006772:	4421      	add	r1, r4
 8006774:	6011      	str	r1, [r2, #0]
 8006776:	e7da      	b.n	800672e <_free_r+0x26>
 8006778:	d902      	bls.n	8006780 <_free_r+0x78>
 800677a:	230c      	movs	r3, #12
 800677c:	6003      	str	r3, [r0, #0]
 800677e:	e7d6      	b.n	800672e <_free_r+0x26>
 8006780:	6825      	ldr	r5, [r4, #0]
 8006782:	1961      	adds	r1, r4, r5
 8006784:	428b      	cmp	r3, r1
 8006786:	bf04      	itt	eq
 8006788:	6819      	ldreq	r1, [r3, #0]
 800678a:	685b      	ldreq	r3, [r3, #4]
 800678c:	6063      	str	r3, [r4, #4]
 800678e:	bf04      	itt	eq
 8006790:	1949      	addeq	r1, r1, r5
 8006792:	6021      	streq	r1, [r4, #0]
 8006794:	6054      	str	r4, [r2, #4]
 8006796:	e7ca      	b.n	800672e <_free_r+0x26>
 8006798:	b003      	add	sp, #12
 800679a:	bd30      	pop	{r4, r5, pc}
 800679c:	20000528 	.word	0x20000528

080067a0 <sbrk_aligned>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4e0e      	ldr	r6, [pc, #56]	; (80067dc <sbrk_aligned+0x3c>)
 80067a4:	460c      	mov	r4, r1
 80067a6:	6831      	ldr	r1, [r6, #0]
 80067a8:	4605      	mov	r5, r0
 80067aa:	b911      	cbnz	r1, 80067b2 <sbrk_aligned+0x12>
 80067ac:	f000 f8bc 	bl	8006928 <_sbrk_r>
 80067b0:	6030      	str	r0, [r6, #0]
 80067b2:	4621      	mov	r1, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 f8b7 	bl	8006928 <_sbrk_r>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d00a      	beq.n	80067d4 <sbrk_aligned+0x34>
 80067be:	1cc4      	adds	r4, r0, #3
 80067c0:	f024 0403 	bic.w	r4, r4, #3
 80067c4:	42a0      	cmp	r0, r4
 80067c6:	d007      	beq.n	80067d8 <sbrk_aligned+0x38>
 80067c8:	1a21      	subs	r1, r4, r0
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 f8ac 	bl	8006928 <_sbrk_r>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d101      	bne.n	80067d8 <sbrk_aligned+0x38>
 80067d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80067d8:	4620      	mov	r0, r4
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	2000052c 	.word	0x2000052c

080067e0 <_malloc_r>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	1ccd      	adds	r5, r1, #3
 80067e6:	f025 0503 	bic.w	r5, r5, #3
 80067ea:	3508      	adds	r5, #8
 80067ec:	2d0c      	cmp	r5, #12
 80067ee:	bf38      	it	cc
 80067f0:	250c      	movcc	r5, #12
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	4607      	mov	r7, r0
 80067f6:	db01      	blt.n	80067fc <_malloc_r+0x1c>
 80067f8:	42a9      	cmp	r1, r5
 80067fa:	d905      	bls.n	8006808 <_malloc_r+0x28>
 80067fc:	230c      	movs	r3, #12
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	2600      	movs	r6, #0
 8006802:	4630      	mov	r0, r6
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006808:	4e2e      	ldr	r6, [pc, #184]	; (80068c4 <_malloc_r+0xe4>)
 800680a:	f000 f89d 	bl	8006948 <__malloc_lock>
 800680e:	6833      	ldr	r3, [r6, #0]
 8006810:	461c      	mov	r4, r3
 8006812:	bb34      	cbnz	r4, 8006862 <_malloc_r+0x82>
 8006814:	4629      	mov	r1, r5
 8006816:	4638      	mov	r0, r7
 8006818:	f7ff ffc2 	bl	80067a0 <sbrk_aligned>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	4604      	mov	r4, r0
 8006820:	d14d      	bne.n	80068be <_malloc_r+0xde>
 8006822:	6834      	ldr	r4, [r6, #0]
 8006824:	4626      	mov	r6, r4
 8006826:	2e00      	cmp	r6, #0
 8006828:	d140      	bne.n	80068ac <_malloc_r+0xcc>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	4631      	mov	r1, r6
 800682e:	4638      	mov	r0, r7
 8006830:	eb04 0803 	add.w	r8, r4, r3
 8006834:	f000 f878 	bl	8006928 <_sbrk_r>
 8006838:	4580      	cmp	r8, r0
 800683a:	d13a      	bne.n	80068b2 <_malloc_r+0xd2>
 800683c:	6821      	ldr	r1, [r4, #0]
 800683e:	3503      	adds	r5, #3
 8006840:	1a6d      	subs	r5, r5, r1
 8006842:	f025 0503 	bic.w	r5, r5, #3
 8006846:	3508      	adds	r5, #8
 8006848:	2d0c      	cmp	r5, #12
 800684a:	bf38      	it	cc
 800684c:	250c      	movcc	r5, #12
 800684e:	4629      	mov	r1, r5
 8006850:	4638      	mov	r0, r7
 8006852:	f7ff ffa5 	bl	80067a0 <sbrk_aligned>
 8006856:	3001      	adds	r0, #1
 8006858:	d02b      	beq.n	80068b2 <_malloc_r+0xd2>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	442b      	add	r3, r5
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	e00e      	b.n	8006880 <_malloc_r+0xa0>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	1b52      	subs	r2, r2, r5
 8006866:	d41e      	bmi.n	80068a6 <_malloc_r+0xc6>
 8006868:	2a0b      	cmp	r2, #11
 800686a:	d916      	bls.n	800689a <_malloc_r+0xba>
 800686c:	1961      	adds	r1, r4, r5
 800686e:	42a3      	cmp	r3, r4
 8006870:	6025      	str	r5, [r4, #0]
 8006872:	bf18      	it	ne
 8006874:	6059      	strne	r1, [r3, #4]
 8006876:	6863      	ldr	r3, [r4, #4]
 8006878:	bf08      	it	eq
 800687a:	6031      	streq	r1, [r6, #0]
 800687c:	5162      	str	r2, [r4, r5]
 800687e:	604b      	str	r3, [r1, #4]
 8006880:	4638      	mov	r0, r7
 8006882:	f104 060b 	add.w	r6, r4, #11
 8006886:	f000 f865 	bl	8006954 <__malloc_unlock>
 800688a:	f026 0607 	bic.w	r6, r6, #7
 800688e:	1d23      	adds	r3, r4, #4
 8006890:	1af2      	subs	r2, r6, r3
 8006892:	d0b6      	beq.n	8006802 <_malloc_r+0x22>
 8006894:	1b9b      	subs	r3, r3, r6
 8006896:	50a3      	str	r3, [r4, r2]
 8006898:	e7b3      	b.n	8006802 <_malloc_r+0x22>
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	42a3      	cmp	r3, r4
 800689e:	bf0c      	ite	eq
 80068a0:	6032      	streq	r2, [r6, #0]
 80068a2:	605a      	strne	r2, [r3, #4]
 80068a4:	e7ec      	b.n	8006880 <_malloc_r+0xa0>
 80068a6:	4623      	mov	r3, r4
 80068a8:	6864      	ldr	r4, [r4, #4]
 80068aa:	e7b2      	b.n	8006812 <_malloc_r+0x32>
 80068ac:	4634      	mov	r4, r6
 80068ae:	6876      	ldr	r6, [r6, #4]
 80068b0:	e7b9      	b.n	8006826 <_malloc_r+0x46>
 80068b2:	230c      	movs	r3, #12
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4638      	mov	r0, r7
 80068b8:	f000 f84c 	bl	8006954 <__malloc_unlock>
 80068bc:	e7a1      	b.n	8006802 <_malloc_r+0x22>
 80068be:	6025      	str	r5, [r4, #0]
 80068c0:	e7de      	b.n	8006880 <_malloc_r+0xa0>
 80068c2:	bf00      	nop
 80068c4:	20000528 	.word	0x20000528

080068c8 <_realloc_r>:
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068cc:	4680      	mov	r8, r0
 80068ce:	4614      	mov	r4, r2
 80068d0:	460e      	mov	r6, r1
 80068d2:	b921      	cbnz	r1, 80068de <_realloc_r+0x16>
 80068d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	4611      	mov	r1, r2
 80068da:	f7ff bf81 	b.w	80067e0 <_malloc_r>
 80068de:	b92a      	cbnz	r2, 80068ec <_realloc_r+0x24>
 80068e0:	f7ff ff12 	bl	8006708 <_free_r>
 80068e4:	4625      	mov	r5, r4
 80068e6:	4628      	mov	r0, r5
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	f000 f838 	bl	8006960 <_malloc_usable_size_r>
 80068f0:	4284      	cmp	r4, r0
 80068f2:	4607      	mov	r7, r0
 80068f4:	d802      	bhi.n	80068fc <_realloc_r+0x34>
 80068f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068fa:	d812      	bhi.n	8006922 <_realloc_r+0x5a>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4640      	mov	r0, r8
 8006900:	f7ff ff6e 	bl	80067e0 <_malloc_r>
 8006904:	4605      	mov	r5, r0
 8006906:	2800      	cmp	r0, #0
 8006908:	d0ed      	beq.n	80068e6 <_realloc_r+0x1e>
 800690a:	42bc      	cmp	r4, r7
 800690c:	4622      	mov	r2, r4
 800690e:	4631      	mov	r1, r6
 8006910:	bf28      	it	cs
 8006912:	463a      	movcs	r2, r7
 8006914:	f7ff fed0 	bl	80066b8 <memcpy>
 8006918:	4631      	mov	r1, r6
 800691a:	4640      	mov	r0, r8
 800691c:	f7ff fef4 	bl	8006708 <_free_r>
 8006920:	e7e1      	b.n	80068e6 <_realloc_r+0x1e>
 8006922:	4635      	mov	r5, r6
 8006924:	e7df      	b.n	80068e6 <_realloc_r+0x1e>
	...

08006928 <_sbrk_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d06      	ldr	r5, [pc, #24]	; (8006944 <_sbrk_r+0x1c>)
 800692c:	2300      	movs	r3, #0
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fb f9d8 	bl	8001ce8 <_sbrk>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_sbrk_r+0x1a>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_sbrk_r+0x1a>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	20000530 	.word	0x20000530

08006948 <__malloc_lock>:
 8006948:	4801      	ldr	r0, [pc, #4]	; (8006950 <__malloc_lock+0x8>)
 800694a:	f000 b811 	b.w	8006970 <__retarget_lock_acquire_recursive>
 800694e:	bf00      	nop
 8006950:	20000534 	.word	0x20000534

08006954 <__malloc_unlock>:
 8006954:	4801      	ldr	r0, [pc, #4]	; (800695c <__malloc_unlock+0x8>)
 8006956:	f000 b80c 	b.w	8006972 <__retarget_lock_release_recursive>
 800695a:	bf00      	nop
 800695c:	20000534 	.word	0x20000534

08006960 <_malloc_usable_size_r>:
 8006960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006964:	1f18      	subs	r0, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	bfbc      	itt	lt
 800696a:	580b      	ldrlt	r3, [r1, r0]
 800696c:	18c0      	addlt	r0, r0, r3
 800696e:	4770      	bx	lr

08006970 <__retarget_lock_acquire_recursive>:
 8006970:	4770      	bx	lr

08006972 <__retarget_lock_release_recursive>:
 8006972:	4770      	bx	lr

08006974 <_init>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	bf00      	nop
 8006978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697a:	bc08      	pop	{r3}
 800697c:	469e      	mov	lr, r3
 800697e:	4770      	bx	lr

08006980 <_fini>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr
