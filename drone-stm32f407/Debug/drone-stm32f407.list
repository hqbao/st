
drone-stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800e978  0800e978  0001e978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec08  0800ec08  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec08  0800ec08  0001ec08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec10  0800ec10  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec10  0800ec10  0001ec10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec14  0800ec14  0001ec14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ec18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000914  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000099c  2000099c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001562f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000285d  00000000  00000000  000356e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00037f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011a0  00000000  00000000  00039190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228cd  00000000  00000000  0003a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167a9  00000000  00000000  0005cbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c26  00000000  00000000  000733a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143fcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bc8  00000000  00000000  0014401c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e960 	.word	0x0800e960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800e960 	.word	0x0800e960

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <kalman_filter_init>:
#include "kalman.h"

#include <string.h>

void kalman_filter_init(kalman_filter_t* filter, float mea_e, float est_e, float q) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f58:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f5c:	ed87 1a00 	vstr	s2, [r7]
  filter->_err_measure = mea_e;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	601a      	str	r2, [r3, #0]
  filter->_err_estimate = est_e;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	605a      	str	r2, [r3, #4]
  filter->_q = q;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	609a      	str	r2, [r3, #8]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <kalman_filter_update>:

float kalman_filter_update(kalman_filter_t* filter, float mea) {
 8000f7e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	ed87 0a00 	vstr	s0, [r7]
  filter->_kalman_gain = filter->_err_estimate/(filter->_err_estimate + filter->_err_measure);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a05 	vstr	s15, [r3, #20]
  filter->_current_estimate = filter->_last_estimate + filter->_kalman_gain * (mea - filter->_last_estimate);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fbe:	ed97 6a00 	vldr	s12, [r7]
 8000fc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a03 	vstr	s15, [r3, #12]
  filter->_err_estimate =  ((float)1.0 - filter->_kalman_gain)*filter->_err_estimate + fabs(filter->_last_estimate-filter->_current_estimate)*filter->_q;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff faaa 	bl	8000548 <__aeabi_f2d>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	ed93 7a04 	vldr	s14, [r3, #16]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	eef0 7ae7 	vabs.f32	s15, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	4680      	mov	r8, r0
 8001016:	4689      	mov	r9, r1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4640      	mov	r0, r8
 8001028:	4649      	mov	r1, r9
 800102a:	f7ff fae5 	bl	80005f8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff f929 	bl	800028c <__adddf3>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fdb1 	bl	8000ba8 <__aeabi_d2f>
 8001046:	4602      	mov	r2, r0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	605a      	str	r2, [r3, #4]
  filter->_last_estimate=filter->_current_estimate;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]

  return filter->_current_estimate;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	ee07 3a90 	vmov	s15, r3
}
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001068 <average_filter_init>:

void average_filter_init(average_filter_t* filter, int width) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  filter->width = width;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	601a      	str	r2, [r3, #0]
  filter->record_idx = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  memset(filter->record, 0, filter->width * sizeof(float));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f103 0008 	add.w	r0, r3, #8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	461a      	mov	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f00a fac6 	bl	800b628 <memset>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <average_filter_update>:

float average_filter_update(average_filter_t* filter, float val) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	ed87 0a00 	vstr	s0, [r7]
  filter->record_idx = (filter->record_idx + 1) % filter->width;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80010b6:	3301      	adds	r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80010c0:	fb01 f202 	mul.w	r2, r1, r2
 80010c4:	1a9a      	subs	r2, r3, r2
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  filter->sum -= filter->record[filter->record_idx];
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	3302      	adds	r3, #2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->sum += val;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edc3 7a01 	vstr	s15, [r3, #4]
  filter->record[filter->record_idx] = val;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	3302      	adds	r3, #2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	601a      	str	r2, [r3, #0]
  return filter->sum / filter->width;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 7a01 	vldr	s14, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800112a:	eef0 7a66 	vmov.f32	s15, s13
}
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	460a      	mov	r2, r1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	4613      	mov	r3, r2
 800114a:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e024      	b.n	800119c <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d103      	bne.n	8001160 <flash+0x24>
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4816      	ldr	r0, [pc, #88]	; (80011b4 <flash+0x78>)
 800115c:	f004 f9b1 	bl	80054c2 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d103      	bne.n	800116e <flash+0x32>
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <flash+0x78>)
 800116a:	f004 f9aa 	bl	80054c2 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f003 fe04 	bl	8004d7c <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d103      	bne.n	8001182 <flash+0x46>
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <flash+0x78>)
 800117e:	f004 f9a0 	bl	80054c2 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d103      	bne.n	8001190 <flash+0x54>
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	480a      	ldr	r0, [pc, #40]	; (80011b4 <flash+0x78>)
 800118c:	f004 f999 	bl	80054c2 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8001190:	2032      	movs	r0, #50	; 0x32
 8001192:	f003 fdf3 	bl	8004d7c <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbd6      	blt.n	8001152 <flash+0x16>
  }

  HAL_Delay(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f003 fde9 	bl	8004d7c <HAL_Delay>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020000 	.word	0x40020000

080011b8 <console>:

// Monitor console
void console(const char *str) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f805 	bl	80001d0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <console+0x24>)
 80011d0:	f009 fa9b 	bl	800a70a <HAL_UART_Transmit_IT>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000300 	.word	0x20000300

080011e0 <send_data>:

char g_console_msg[256] = {0};
void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b093      	sub	sp, #76	; 0x4c
 80011e4:	af08      	add	r7, sp, #32
 80011e6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80011ea:	edc7 0a08 	vstr	s1, [r7, #32]
 80011ee:	ed87 1a07 	vstr	s2, [r7, #28]
 80011f2:	edc7 1a06 	vstr	s3, [r7, #24]
 80011f6:	ed87 2a05 	vstr	s4, [r7, #20]
 80011fa:	edc7 2a04 	vstr	s5, [r7, #16]
 80011fe:	ed87 3a03 	vstr	s6, [r7, #12]
 8001202:	edc7 3a02 	vstr	s7, [r7, #8]
 8001206:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 800120a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120e:	2100      	movs	r1, #0
 8001210:	4837      	ldr	r0, [pc, #220]	; (80012f0 <send_data+0x110>)
 8001212:	f00a fa09 	bl	800b628 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8001216:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800121a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012f4 <send_data+0x114>
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001222:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001226:	edd7 7a08 	vldr	s15, [r7, #32]
 800122a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80012f4 <send_data+0x114>
 800122e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001232:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001236:	edd7 7a07 	vldr	s15, [r7, #28]
 800123a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80012f4 <send_data+0x114>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 800124a:	edd7 7a06 	vldr	s15, [r7, #24]
 800124e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80012f4 <send_data+0x114>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125a:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800125e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001262:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80012f4 <send_data+0x114>
 8001266:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800126a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126e:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 8001272:	edd7 7a04 	vldr	s15, [r7, #16]
 8001276:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80012f4 <send_data+0x114>
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800127e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001282:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 8001286:	edd7 7a03 	vldr	s15, [r7, #12]
 800128a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012f4 <send_data+0x114>
 800128e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001296:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012f4 <send_data+0x114>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012f4 <send_data+0x114>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012be:	ee17 6a90 	vmov	r6, s15
 80012c2:	9606      	str	r6, [sp, #24]
 80012c4:	9505      	str	r5, [sp, #20]
 80012c6:	9404      	str	r4, [sp, #16]
 80012c8:	9003      	str	r0, [sp, #12]
 80012ca:	9102      	str	r1, [sp, #8]
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	ee16 3a10 	vmov	r3, s12
 80012d4:	ee16 2a90 	vmov	r2, s13
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <send_data+0x118>)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <send_data+0x110>)
 80012dc:	f00a f9ac 	bl	800b638 <siprintf>
  console(g_console_msg);
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <send_data+0x110>)
 80012e2:	f7ff ff69 	bl	80011b8 <console>
}
 80012e6:	bf00      	nop
 80012e8:	372c      	adds	r7, #44	; 0x2c
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000744 	.word	0x20000744
 80012f4:	47c35000 	.word	0x47c35000
 80012f8:	0800e978 	.word	0x0800e978

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f003 fcc9 	bl	8004c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f8fb 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f000 fd0b 	bl	8001d24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800130e:	f000 f963 	bl	80015d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001312:	f000 f9c5 	bl	80016a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001316:	f000 fa87 	bl	8001828 <MX_TIM2_Init>
  MX_TIM3_Init();
 800131a:	f000 fb1b 	bl	8001954 <MX_TIM3_Init>
  MX_TIM4_Init();
 800131e:	f000 fb67 	bl	80019f0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001322:	f000 fcd5 	bl	8001cd0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001326:	f000 f985 	bl	8001634 <MX_SPI2_Init>
  MX_TIM5_Init();
 800132a:	f000 fbf3 	bl	8001b14 <MX_TIM5_Init>
  MX_TIM9_Init();
 800132e:	f000 fc83 	bl	8001c38 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  // Turn off leds
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	485b      	ldr	r0, [pc, #364]	; (80014a4 <main+0x1a8>)
 8001338:	f004 f8aa 	bl	8005490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	4858      	ldr	r0, [pc, #352]	; (80014a4 <main+0x1a8>)
 8001342:	f004 f8a5 	bl	8005490 <HAL_GPIO_WritePin>

  flash(1, 5);
 8001346:	2105      	movs	r1, #5
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fef7 	bl	800113c <flash>

  // Initialise filters for remote control
  kalman_filter_init(&g_filters[0], 2, 2, 0.01); // Thrust
 800134e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 80014a8 <main+0x1ac>
 8001352:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001356:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800135a:	4854      	ldr	r0, [pc, #336]	; (80014ac <main+0x1b0>)
 800135c:	f7ff fdf6 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&g_filters[1], 2, 2, 0.01); // Yaw
 8001360:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80014a8 <main+0x1ac>
 8001364:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001368:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800136c:	4850      	ldr	r0, [pc, #320]	; (80014b0 <main+0x1b4>)
 800136e:	f7ff fded 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&g_filters[2], 2, 2, 0.01); // Pitch
 8001372:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80014a8 <main+0x1ac>
 8001376:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800137a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800137e:	484d      	ldr	r0, [pc, #308]	; (80014b4 <main+0x1b8>)
 8001380:	f7ff fde4 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&g_filters[3], 2, 2, 0.01); // Roll
 8001384:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80014a8 <main+0x1ac>
 8001388:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800138c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001390:	4849      	ldr	r0, [pc, #292]	; (80014b8 <main+0x1bc>)
 8001392:	f7ff fddb 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&g_filters[4], 2, 2, 0.01); // Tune 1
 8001396:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80014a8 <main+0x1ac>
 800139a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800139e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013a2:	4846      	ldr	r0, [pc, #280]	; (80014bc <main+0x1c0>)
 80013a4:	f7ff fdd2 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&g_filters[5], 2, 2, 0.01); // Tune 2
 80013a8:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80014a8 <main+0x1ac>
 80013ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013b4:	4842      	ldr	r0, [pc, #264]	; (80014c0 <main+0x1c4>)
 80013b6:	f7ff fdc9 	bl	8000f4c <kalman_filter_init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 80013ba:	2303      	movs	r3, #3
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2303      	movs	r3, #3
 80013c0:	2200      	movs	r2, #0
 80013c2:	4940      	ldr	r1, [pc, #256]	; (80014c4 <main+0x1c8>)
 80013c4:	4840      	ldr	r0, [pc, #256]	; (80014c8 <main+0x1cc>)
 80013c6:	f000 ff7f 	bl	80022c8 <MPU6050_init>
 80013ca:	6078      	str	r0, [r7, #4]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <main+0xe4>
    flash(2, error);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	2002      	movs	r0, #2
 80013da:	f7ff feaf 	bl	800113c <flash>
  while (1) {
 80013de:	e7ec      	b.n	80013ba <main+0xbe>
    if (error == 0) break;
 80013e0:	bf00      	nop
  }

  MPU6050_set_offset(&g_mpu6050, -370, 50, 0, -4.4, -1.8, 0.5);
 80013e2:	eef6 2a00 	vmov.f32	s5, #96	; 0x3f000000  0.5
 80013e6:	ed9f 2a39 	vldr	s4, [pc, #228]	; 80014cc <main+0x1d0>
 80013ea:	eddf 1a39 	vldr	s3, [pc, #228]	; 80014d0 <main+0x1d4>
 80013ee:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80014d4 <main+0x1d8>
 80013f2:	eddf 0a39 	vldr	s1, [pc, #228]	; 80014d8 <main+0x1dc>
 80013f6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80014dc <main+0x1e0>
 80013fa:	4833      	ldr	r0, [pc, #204]	; (80014c8 <main+0x1cc>)
 80013fc:	f001 f954 	bl	80026a8 <MPU6050_set_offset>

  while (1) {
    int error = MS5611_init(
 8001400:	4930      	ldr	r1, [pc, #192]	; (80014c4 <main+0x1c8>)
 8001402:	4837      	ldr	r0, [pc, #220]	; (80014e0 <main+0x1e4>)
 8001404:	f001 fc54 	bl	8002cb0 <MS5611_init>
 8001408:	6038      	str	r0, [r7, #0]
        &g_ms5611,
        &hi2c1);
    if (error == 0) break;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <main+0x122>
    flash(2, error);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	2002      	movs	r0, #2
 8001418:	f7ff fe90 	bl	800113c <flash>
  while (1) {
 800141c:	e7f0      	b.n	8001400 <main+0x104>
    if (error == 0) break;
 800141e:	bf00      	nop
  }

  // For remote control input capture
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001420:	2100      	movs	r1, #0
 8001422:	4830      	ldr	r0, [pc, #192]	; (80014e4 <main+0x1e8>)
 8001424:	f007 ff46 	bl	80092b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001428:	2104      	movs	r1, #4
 800142a:	482e      	ldr	r0, [pc, #184]	; (80014e4 <main+0x1e8>)
 800142c:	f007 ff42 	bl	80092b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8001430:	2108      	movs	r1, #8
 8001432:	482c      	ldr	r0, [pc, #176]	; (80014e4 <main+0x1e8>)
 8001434:	f007 ff3e 	bl	80092b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8001438:	210c      	movs	r1, #12
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <main+0x1e8>)
 800143c:	f007 ff3a 	bl	80092b4 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8001440:	2100      	movs	r1, #0
 8001442:	4829      	ldr	r0, [pc, #164]	; (80014e8 <main+0x1ec>)
 8001444:	f007 ff36 	bl	80092b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2);
 8001448:	2104      	movs	r1, #4
 800144a:	4827      	ldr	r0, [pc, #156]	; (80014e8 <main+0x1ec>)
 800144c:	f007 ff32 	bl	80092b4 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001450:	2100      	movs	r1, #0
 8001452:	4826      	ldr	r0, [pc, #152]	; (80014ec <main+0x1f0>)
 8001454:	f007 ff2e 	bl	80092b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8001458:	2104      	movs	r1, #4
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <main+0x1f0>)
 800145c:	f007 ff2a 	bl	80092b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 8001460:	2108      	movs	r1, #8
 8001462:	4822      	ldr	r0, [pc, #136]	; (80014ec <main+0x1f0>)
 8001464:	f007 ff26 	bl	80092b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8001468:	210c      	movs	r1, #12
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <main+0x1f0>)
 800146c:	f007 ff22 	bl	80092b4 <HAL_TIM_IC_Start_IT>

  // Initialise motor PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001470:	2100      	movs	r1, #0
 8001472:	481f      	ldr	r0, [pc, #124]	; (80014f0 <main+0x1f4>)
 8001474:	f007 fe06 	bl	8009084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001478:	2104      	movs	r1, #4
 800147a:	481d      	ldr	r0, [pc, #116]	; (80014f0 <main+0x1f4>)
 800147c:	f007 fe02 	bl	8009084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001480:	2108      	movs	r1, #8
 8001482:	481b      	ldr	r0, [pc, #108]	; (80014f0 <main+0x1f4>)
 8001484:	f007 fdfe 	bl	8009084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001488:	210c      	movs	r1, #12
 800148a:	4819      	ldr	r0, [pc, #100]	; (80014f0 <main+0x1f4>)
 800148c:	f007 fdfa 	bl	8009084 <HAL_TIM_PWM_Start>

  // Run timers after sensors have been setup
  HAL_TIM_Base_Start_IT(&htim3);
 8001490:	4818      	ldr	r0, [pc, #96]	; (80014f4 <main+0x1f8>)
 8001492:	f007 fd2d 	bl	8008ef0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	4917      	ldr	r1, [pc, #92]	; (80014f8 <main+0x1fc>)
 800149a:	4818      	ldr	r0, [pc, #96]	; (80014fc <main+0x200>)
 800149c:	f009 f97a 	bl	800a794 <HAL_UART_Receive_IT>
 80014a0:	e7f9      	b.n	8001496 <main+0x19a>
 80014a2:	bf00      	nop
 80014a4:	40020000 	.word	0x40020000
 80014a8:	3c23d70a 	.word	0x3c23d70a
 80014ac:	20000344 	.word	0x20000344
 80014b0:	2000035c 	.word	0x2000035c
 80014b4:	20000374 	.word	0x20000374
 80014b8:	2000038c 	.word	0x2000038c
 80014bc:	200003a4 	.word	0x200003a4
 80014c0:	200003bc 	.word	0x200003bc
 80014c4:	200000a4 	.word	0x200000a4
 80014c8:	20000434 	.word	0x20000434
 80014cc:	bfe66666 	.word	0xbfe66666
 80014d0:	c08ccccd 	.word	0xc08ccccd
 80014d4:	00000000 	.word	0x00000000
 80014d8:	42480000 	.word	0x42480000
 80014dc:	c3b90000 	.word	0xc3b90000
 80014e0:	20000538 	.word	0x20000538
 80014e4:	20000228 	.word	0x20000228
 80014e8:	200002b8 	.word	0x200002b8
 80014ec:	20000270 	.word	0x20000270
 80014f0:	20000150 	.word	0x20000150
 80014f4:	200001e0 	.word	0x200001e0
 80014f8:	20000738 	.word	0x20000738
 80014fc:	20000300 	.word	0x20000300

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	; 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	2230      	movs	r2, #48	; 0x30
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00a f88a 	bl	800b628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <SystemClock_Config+0xd0>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <SystemClock_Config+0xd0>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <SystemClock_Config+0xd0>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <SystemClock_Config+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <SystemClock_Config+0xd4>)
 800154a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <SystemClock_Config+0xd4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800155c:	2309      	movs	r3, #9
 800155e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001566:	2301      	movs	r3, #1
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001578:	23a8      	movs	r3, #168	; 0xa8
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f006 ff41 	bl	8008410 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001594:	f000 fc40 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2105      	movs	r1, #5
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 f9a2 	bl	8008900 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015c2:	f000 fc29 	bl	8001e18 <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3750      	adds	r7, #80	; 0x50
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_I2C1_Init+0x50>)
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <MX_I2C1_Init+0x54>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_I2C1_Init+0x50>)
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_I2C1_Init+0x58>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_I2C1_Init+0x50>)
 8001616:	f003 ff6f 	bl	80054f8 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 fbfa 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200000a4 	.word	0x200000a4
 800162c:	40005400 	.word	0x40005400
 8001630:	000186a0 	.word	0x000186a0

08001634 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_SPI2_Init+0x64>)
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <MX_SPI2_Init+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_SPI2_Init+0x64>)
 8001640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_SPI2_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_SPI2_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_SPI2_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_SPI2_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_SPI2_Init+0x64>)
 8001660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_SPI2_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MX_SPI2_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_SPI2_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <MX_SPI2_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_SPI2_Init+0x64>)
 8001680:	220a      	movs	r2, #10
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_SPI2_Init+0x64>)
 8001686:	f007 fb5b 	bl	8008d40 <HAL_SPI_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001690:	f000 fbc2 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200000f8 	.word	0x200000f8
 800169c:	40003800 	.word	0x40003800

080016a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	; 0x58
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2220      	movs	r2, #32
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f009 ffa5 	bl	800b628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016de:	4b50      	ldr	r3, [pc, #320]	; (8001820 <MX_TIM1_Init+0x180>)
 80016e0:	4a50      	ldr	r2, [pc, #320]	; (8001824 <MX_TIM1_Init+0x184>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 80016e4:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <MX_TIM1_Init+0x180>)
 80016e6:	2215      	movs	r2, #21
 80016e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <MX_TIM1_Init+0x180>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <MX_TIM1_Init+0x180>)
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <MX_TIM1_Init+0x180>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016fe:	4b48      	ldr	r3, [pc, #288]	; (8001820 <MX_TIM1_Init+0x180>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b46      	ldr	r3, [pc, #280]	; (8001820 <MX_TIM1_Init+0x180>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800170a:	4845      	ldr	r0, [pc, #276]	; (8001820 <MX_TIM1_Init+0x180>)
 800170c:	f007 fba1 	bl	8008e52 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001716:	f000 fb7f 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001724:	4619      	mov	r1, r3
 8001726:	483e      	ldr	r0, [pc, #248]	; (8001820 <MX_TIM1_Init+0x180>)
 8001728:	f008 f952 	bl	80099d0 <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001732:	f000 fb71 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001736:	483a      	ldr	r0, [pc, #232]	; (8001820 <MX_TIM1_Init+0x180>)
 8001738:	f007 fc4a 	bl	8008fd0 <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001742:	f000 fb69 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800174e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001752:	4619      	mov	r1, r3
 8001754:	4832      	ldr	r0, [pc, #200]	; (8001820 <MX_TIM1_Init+0x180>)
 8001756:	f008 fea9 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001760:	f000 fb5a 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	2200      	movs	r2, #0
 8001786:	4619      	mov	r1, r3
 8001788:	4825      	ldr	r0, [pc, #148]	; (8001820 <MX_TIM1_Init+0x180>)
 800178a:	f008 f85f 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001794:	f000 fb40 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	2204      	movs	r2, #4
 800179e:	4619      	mov	r1, r3
 80017a0:	481f      	ldr	r0, [pc, #124]	; (8001820 <MX_TIM1_Init+0x180>)
 80017a2:	f008 f853 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017ac:	f000 fb34 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	2208      	movs	r2, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	4819      	ldr	r0, [pc, #100]	; (8001820 <MX_TIM1_Init+0x180>)
 80017ba:	f008 f847 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017c4:	f000 fb28 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	220c      	movs	r2, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <MX_TIM1_Init+0x180>)
 80017d2:	f008 f83b 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80017dc:	f000 fb1c 	bl	8001e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4807      	ldr	r0, [pc, #28]	; (8001820 <MX_TIM1_Init+0x180>)
 8001804:	f008 fece 	bl	800a5a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800180e:	f000 fb03 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_TIM1_Init+0x180>)
 8001814:	f001 ff0a 	bl	800362c <HAL_TIM_MspPostInit>

}
 8001818:	bf00      	nop
 800181a:	3758      	adds	r7, #88	; 0x58
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000150 	.word	0x20000150
 8001824:	40010000 	.word	0x40010000

08001828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	f107 0320 	add.w	r3, r7, #32
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <MX_TIM2_Init+0x128>)
 800185a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <MX_TIM2_Init+0x128>)
 8001862:	2215      	movs	r2, #21
 8001864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <MX_TIM2_Init+0x128>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <MX_TIM2_Init+0x128>)
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <MX_TIM2_Init+0x128>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <MX_TIM2_Init+0x128>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001880:	4833      	ldr	r0, [pc, #204]	; (8001950 <MX_TIM2_Init+0x128>)
 8001882:	f007 fae6 	bl	8008e52 <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800188c:	f000 fac4 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189a:	4619      	mov	r1, r3
 800189c:	482c      	ldr	r0, [pc, #176]	; (8001950 <MX_TIM2_Init+0x128>)
 800189e:	f008 f897 	bl	80099d0 <HAL_TIM_ConfigClockSource>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018a8:	f000 fab6 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ac:	4828      	ldr	r0, [pc, #160]	; (8001950 <MX_TIM2_Init+0x128>)
 80018ae:	f007 fb8f 	bl	8008fd0 <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018b8:	f000 faae 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4619      	mov	r1, r3
 80018ca:	4821      	ldr	r0, [pc, #132]	; (8001950 <MX_TIM2_Init+0x128>)
 80018cc:	f008 fdee 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018d6:	f000 fa9f 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4817      	ldr	r0, [pc, #92]	; (8001950 <MX_TIM2_Init+0x128>)
 80018f2:	f007 ffab 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80018fc:	f000 fa8c 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2204      	movs	r2, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4812      	ldr	r0, [pc, #72]	; (8001950 <MX_TIM2_Init+0x128>)
 8001908:	f007 ffa0 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001912:	f000 fa81 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2208      	movs	r2, #8
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_TIM2_Init+0x128>)
 800191e:	f007 ff95 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001928:	f000 fa76 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	220c      	movs	r2, #12
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM2_Init+0x128>)
 8001934:	f007 ff8a 	bl	800984c <HAL_TIM_PWM_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800193e:	f000 fa6b 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM2_Init+0x128>)
 8001944:	f001 fe72 	bl	800362c <HAL_TIM_MspPostInit>

}
 8001948:	bf00      	nop
 800194a:	3738      	adds	r7, #56	; 0x38
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000198 	.word	0x20000198

08001954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <MX_TIM3_Init+0x98>)
 8001974:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001978:	2254      	movs	r2, #84	; 0x54
 800197a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_TIM3_Init+0x94>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_TIM3_Init+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001996:	4814      	ldr	r0, [pc, #80]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001998:	f007 fa5b 	bl	8008e52 <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019a2:	f000 fa39 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019b4:	f008 f80c 	bl	80099d0 <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019be:	f000 fa2b 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019d0:	f008 fd6c 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019da:	f000 fa1d 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001e0 	.word	0x200001e0
 80019ec:	40000400 	.word	0x40000400

080019f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <MX_TIM4_Init+0x120>)
 8001a1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a22:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001a26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000;
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a30:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001a34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a42:	4832      	ldr	r0, [pc, #200]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a44:	f007 fa05 	bl	8008e52 <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001a4e:	f000 f9e3 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	482b      	ldr	r0, [pc, #172]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a60:	f007 ffb6 	bl	80099d0 <HAL_TIM_ConfigClockSource>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a6a:	f000 f9d5 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a6e:	4827      	ldr	r0, [pc, #156]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a70:	f007 fbd0 	bl	8009214 <HAL_TIM_IC_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001a7a:	f000 f9cd 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481f      	ldr	r0, [pc, #124]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001a8e:	f008 fd0d 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001a98:	f000 f9be 	bl	8001e18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4816      	ldr	r0, [pc, #88]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001ab4:	f007 fe2e 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001abe:	f000 f9ab 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4810      	ldr	r0, [pc, #64]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001aca:	f007 fe23 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001ad4:	f000 f9a0 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2208      	movs	r2, #8
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001ae0:	f007 fe18 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001aea:	f000 f995 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001aee:	463b      	mov	r3, r7
 8001af0:	220c      	movs	r2, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM4_Init+0x11c>)
 8001af6:	f007 fe0d 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001b00:	f000 f98a 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000228 	.word	0x20000228
 8001b10:	40000800 	.word	0x40000800

08001b14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b32:	463b      	mov	r3, r7
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b40:	4a3c      	ldr	r2, [pc, #240]	; (8001c34 <MX_TIM5_Init+0x120>)
 8001b42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 420;
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b46:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001b4a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000;
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b54:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001b58:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b66:	4832      	ldr	r0, [pc, #200]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b68:	f007 f973 	bl	8008e52 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001b72:	f000 f951 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0318 	add.w	r3, r7, #24
 8001b80:	4619      	mov	r1, r3
 8001b82:	482b      	ldr	r0, [pc, #172]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b84:	f007 ff24 	bl	80099d0 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001b8e:	f000 f943 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001b92:	4827      	ldr	r0, [pc, #156]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001b94:	f007 fb3e 	bl	8009214 <HAL_TIM_IC_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001b9e:	f000 f93b 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481f      	ldr	r0, [pc, #124]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001bb2:	f008 fc7b 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001bbc:	f000 f92c 	bl	8001e18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bc0:	230a      	movs	r3, #10
 8001bc2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4816      	ldr	r0, [pc, #88]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001bd8:	f007 fd9c 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8001be2:	f000 f919 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	2204      	movs	r2, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4810      	ldr	r0, [pc, #64]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001bee:	f007 fd91 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8001bf8:	f000 f90e 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	2208      	movs	r2, #8
 8001c00:	4619      	mov	r1, r3
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001c04:	f007 fd86 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 8001c0e:	f000 f903 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c12:	463b      	mov	r3, r7
 8001c14:	220c      	movs	r2, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM5_Init+0x11c>)
 8001c1a:	f007 fd7b 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM5_Init+0x114>
  {
    Error_Handler();
 8001c24:	f000 f8f8 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000270 	.word	0x20000270
 8001c34:	40000c00 	.word	0x40000c00

08001c38 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <MX_TIM9_Init+0x94>)
 8001c4e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 420;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c52:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001c56:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 42000;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c60:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001c64:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c74:	f007 face 	bl	8009214 <HAL_TIM_IC_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001c7e:	f000 f8cb 	bl	8001e18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001c82:	230a      	movs	r3, #10
 8001c84:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c86:	2301      	movs	r3, #1
 8001c88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001c9a:	f007 fd3b 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8001ca4:	f000 f8b8 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2204      	movs	r2, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_TIM9_Init+0x90>)
 8001cb0:	f007 fd30 	bl	8009714 <HAL_TIM_IC_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8001cba:	f000 f8ad 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002b8 	.word	0x200002b8
 8001ccc:	40014000 	.word	0x40014000

08001cd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <MX_USART1_UART_Init+0x50>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_USART1_UART_Init+0x4c>)
 8001d08:	f008 fcb2 	bl	800a670 <HAL_UART_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d12:	f000 f881 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000300 	.word	0x20000300
 8001d20:	40011000 	.word	0x40011000

08001d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_GPIO_Init+0xec>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	21c0      	movs	r1, #192	; 0xc0
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <MX_GPIO_Init+0xf0>)
 8001de8:	f003 fb52 	bl	8005490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_GPIO_Init+0xf0>)
 8001e04:	f003 f990 	bl	8005128 <HAL_GPIO_Init>

}
 8001e08:	bf00      	nop
 8001e0a:	3730      	adds	r7, #48	; 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <Error_Handler+0x8>
 8001e22:	0000      	movs	r0, r0
 8001e24:	0000      	movs	r0, r0
	...

08001e28 <calc_angles>:
#define ROLL 2

uint8_t i2c_rx_buffer[32] = {0};

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles(mpu6050_t *mpu6050) {
 8001e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  // Angle calculation using integration
  mpu6050->gyro_angle[X] += mpu6050->gx / FREQ;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	edd3 6a06 	vldr	s13, [r3, #24]
 8001e3e:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8002178 <calc_angles+0x350>
 8001e42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  mpu6050->gyro_angle[Y] += -mpu6050->gy / FREQ; // Change sign to match the accelerometer's one
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e5c:	eef1 6a67 	vneg.f32	s13, s15
 8001e60:	ed9f 6ac5 	vldr	s12, [pc, #788]	; 8002178 <calc_angles+0x350>
 8001e64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  // Transfer roll to pitch if IMU has yawed
  mpu6050->gyro_angle[Y] += mpu6050->gyro_angle[X] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb66 	bl	8000548 <__aeabi_f2d>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	460d      	mov	r5, r1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb5f 	bl	8000548 <__aeabi_f2d>
 8001e8a:	4680      	mov	r8, r0
 8001e8c:	4689      	mov	r9, r1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb58 	bl	8000548 <__aeabi_f2d>
 8001e98:	a3b1      	add	r3, pc, #708	; (adr r3, 8002160 <calc_angles+0x338>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbab 	bl	80005f8 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	ec43 2b17 	vmov	d7, r2, r3
 8001eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8001eae:	eef0 0a67 	vmov.f32	s1, s15
 8001eb2:	f00a f831 	bl	800bf18 <sin>
 8001eb6:	ec53 2b10 	vmov	r2, r3, d0
 8001eba:	4640      	mov	r0, r8
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	f7fe fb9b 	bl	80005f8 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f7fe f9df 	bl	800028c <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7fe fe67 	bl	8000ba8 <__aeabi_d2f>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	64da      	str	r2, [r3, #76]	; 0x4c
  mpu6050->gyro_angle[X] -= mpu6050->gyro_angle[Y] * sin(mpu6050->gz * (M_PI / (FREQ * 180)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb2f 	bl	8000548 <__aeabi_f2d>
 8001eea:	4604      	mov	r4, r0
 8001eec:	460d      	mov	r5, r1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb28 	bl	8000548 <__aeabi_f2d>
 8001ef8:	4680      	mov	r8, r0
 8001efa:	4689      	mov	r9, r1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb21 	bl	8000548 <__aeabi_f2d>
 8001f06:	a396      	add	r3, pc, #600	; (adr r3, 8002160 <calc_angles+0x338>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	ec43 2b17 	vmov	d7, r2, r3
 8001f18:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1c:	eef0 0a67 	vmov.f32	s1, s15
 8001f20:	f009 fffa 	bl	800bf18 <sin>
 8001f24:	ec53 2b10 	vmov	r2, r3, d0
 8001f28:	4640      	mov	r0, r8
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	f7fe fb64 	bl	80005f8 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4620      	mov	r0, r4
 8001f36:	4629      	mov	r1, r5
 8001f38:	f7fe f9a6 	bl	8000288 <__aeabi_dsub>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	f7fe fe30 	bl	8000ba8 <__aeabi_d2f>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	649a      	str	r2, [r3, #72]	; 0x48

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  mpu6050->acc_total_vector = sqrt(pow(mpu6050->ax, 2) + pow(mpu6050->ay, 2) + pow(mpu6050->az, 2));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe faf8 	bl	8000548 <__aeabi_f2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	ed9f 1b82 	vldr	d1, [pc, #520]	; 8002168 <calc_angles+0x340>
 8001f60:	ec43 2b10 	vmov	d0, r2, r3
 8001f64:	f00a f864 	bl	800c030 <pow>
 8001f68:	ec55 4b10 	vmov	r4, r5, d0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fae9 	bl	8000548 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8002168 <calc_angles+0x340>
 8001f7e:	ec43 2b10 	vmov	d0, r2, r3
 8001f82:	f00a f855 	bl	800c030 <pow>
 8001f86:	ec53 2b10 	vmov	r2, r3, d0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe f97d 	bl	800028c <__adddf3>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4614      	mov	r4, r2
 8001f98:	461d      	mov	r5, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fad2 	bl	8000548 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002168 <calc_angles+0x340>
 8001fac:	ec43 2b10 	vmov	d0, r2, r3
 8001fb0:	f00a f83e 	bl	800c030 <pow>
 8001fb4:	ec53 2b10 	vmov	r2, r3, d0
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f7fe f966 	bl	800028c <__adddf3>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	ec43 2b17 	vmov	d7, r2, r3
 8001fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fcc:	eef0 0a67 	vmov.f32	s1, s15
 8001fd0:	f00a f89e 	bl	800c110 <sqrt>
 8001fd4:	ec53 2b10 	vmov	r2, r3, d0
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fdbc 	bl	8000b58 <__aeabi_d2iz>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	66da      	str	r2, [r3, #108]	; 0x6c

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(mpu6050->ax) < mpu6050->acc_total_vector) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ff8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002000:	429a      	cmp	r2, r3
 8002002:	da24      	bge.n	800204e <calc_angles+0x226>
    mpu6050->acc_angle[X] = asin((float)mpu6050->ay / mpu6050->acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	ed93 7a03 	vldr	s14, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002016:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800201a:	ee16 0a90 	vmov	r0, s13
 800201e:	f7fe fa93 	bl	8000548 <__aeabi_f2d>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	ec43 2b10 	vmov	d0, r2, r3
 800202a:	f009 ffcd 	bl	800bfc8 <asin>
 800202e:	ec51 0b10 	vmov	r0, r1, d0
 8002032:	a34f      	add	r3, pc, #316	; (adr r3, 8002170 <calc_angles+0x348>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe fade 	bl	80005f8 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fdb0 	bl	8000ba8 <__aeabi_d2f>
 8002048:	4602      	mov	r2, r0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  if (abs(mpu6050->ay) < mpu6050->acc_total_vector) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	edd3 7a03 	vldr	s15, [r3, #12]
 8002054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002058:	ee17 3a90 	vmov	r3, s15
 800205c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002060:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002068:	429a      	cmp	r2, r3
 800206a:	da24      	bge.n	80020b6 <calc_angles+0x28e>
    mpu6050->acc_angle[Y] = asin((float)mpu6050->ax / mpu6050->acc_total_vector) * (180 / M_PI);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002082:	ee16 0a90 	vmov	r0, s13
 8002086:	f7fe fa5f 	bl	8000548 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	ec43 2b10 	vmov	d0, r2, r3
 8002092:	f009 ff99 	bl	800bfc8 <asin>
 8002096:	ec51 0b10 	vmov	r0, r1, d0
 800209a:	a335      	add	r3, pc, #212	; (adr r3, 8002170 <calc_angles+0x348>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe faaa 	bl	80005f8 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fd7c 	bl	8000ba8 <__aeabi_d2f>
 80020b0:	4602      	mov	r2, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (mpu6050->initialized == 1) {
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d15f      	bne.n	8002180 <calc_angles+0x358>
    // Correct the drift of the gyro with the accelerometer
    mpu6050->gyro_angle[X] = mpu6050->gyro_angle[X] * 0.5 + mpu6050->acc_angle[X] * 0.5;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa3f 	bl	8000548 <__aeabi_f2d>
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <calc_angles+0x354>)
 80020d0:	f7fe fa92 	bl	80005f8 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4614      	mov	r4, r2
 80020da:	461d      	mov	r5, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa31 	bl	8000548 <__aeabi_f2d>
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <calc_angles+0x354>)
 80020ec:	f7fe fa84 	bl	80005f8 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4620      	mov	r0, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	f7fe f8c8 	bl	800028c <__adddf3>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	f7fe fd50 	bl	8000ba8 <__aeabi_d2f>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	649a      	str	r2, [r3, #72]	; 0x48
    mpu6050->gyro_angle[Y] = mpu6050->gyro_angle[Y] * 0.5 + mpu6050->acc_angle[Y] * 0.5;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa18 	bl	8000548 <__aeabi_f2d>
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <calc_angles+0x354>)
 800211e:	f7fe fa6b 	bl	80005f8 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fa0a 	bl	8000548 <__aeabi_f2d>
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <calc_angles+0x354>)
 800213a:	f7fe fa5d 	bl	80005f8 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe f8a1 	bl	800028c <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fd29 	bl	8000ba8 <__aeabi_d2f>
 8002156:	4602      	mov	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	64da      	str	r2, [r3, #76]	; 0x4c
 800215c:	e01c      	b.n	8002198 <calc_angles+0x370>
 800215e:	bf00      	nop
 8002160:	695f8190 	.word	0x695f8190
 8002164:	3f16e05a 	.word	0x3f16e05a
 8002168:	00000000 	.word	0x00000000
 800216c:	40000000 	.word	0x40000000
 8002170:	1a63c1f8 	.word	0x1a63c1f8
 8002174:	404ca5dc 	.word	0x404ca5dc
 8002178:	43480000 	.word	0x43480000
 800217c:	3fe00000 	.word	0x3fe00000
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    mpu6050->gyro_angle[X] = mpu6050->acc_angle[X];
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	649a      	str	r2, [r3, #72]	; 0x48
    mpu6050->gyro_angle[Y] = mpu6050->acc_angle[Y];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	64da      	str	r2, [r3, #76]	; 0x4c

    mpu6050->initialized = 1;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  }

  // To dampen the pitch and roll angles a complementary filter is used
  mpu6050->measures[ROLL] = mpu6050-> measures[ROLL] * 0.9 + mpu6050->gyro_angle[X] * 0.1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9d3 	bl	8000548 <__aeabi_f2d>
 80021a2:	a343      	add	r3, pc, #268	; (adr r3, 80022b0 <calc_angles+0x488>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe fa26 	bl	80005f8 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4614      	mov	r4, r2
 80021b2:	461d      	mov	r5, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f9c5 	bl	8000548 <__aeabi_f2d>
 80021be:	a33e      	add	r3, pc, #248	; (adr r3, 80022b8 <calc_angles+0x490>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe fa18 	bl	80005f8 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fe f85c 	bl	800028c <__adddf3>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fce4 	bl	8000ba8 <__aeabi_d2f>
 80021e0:	4602      	mov	r2, r0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	669a      	str	r2, [r3, #104]	; 0x68
  mpu6050->measures[PITCH] = mpu6050->measures[PITCH] * 0.9 + mpu6050->gyro_angle[Y] * 0.1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f9ac 	bl	8000548 <__aeabi_f2d>
 80021f0:	a32f      	add	r3, pc, #188	; (adr r3, 80022b0 <calc_angles+0x488>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f9ff 	bl	80005f8 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4614      	mov	r4, r2
 8002200:	461d      	mov	r5, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f99e 	bl	8000548 <__aeabi_f2d>
 800220c:	a32a      	add	r3, pc, #168	; (adr r3, 80022b8 <calc_angles+0x490>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe f9f1 	bl	80005f8 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4620      	mov	r0, r4
 800221c:	4629      	mov	r1, r5
 800221e:	f7fe f835 	bl	800028c <__adddf3>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f7fe fcbd 	bl	8000ba8 <__aeabi_d2f>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	665a      	str	r2, [r3, #100]	; 0x64
  mpu6050->measures[YAW] = -mpu6050->gz; // Store the angular motion for this axis
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	edd3 7a08 	vldr	s15, [r3, #32]
 800223a:	eef1 7a67 	vneg.f32	s15, s15
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  // Norm [-1, 1]
  mpu6050->angle_x = -mpu6050->measures[PITCH];
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800224a:	eef1 7a67 	vneg.f32	s15, s15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  mpu6050->angle_y = -mpu6050->measures[ROLL];
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800225a:	eef1 7a67 	vneg.f32	s15, s15
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  mpu6050->angle_z -= mpu6050->measures[YAW]*0.001;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f96d 	bl	8000548 <__aeabi_f2d>
 800226e:	4604      	mov	r4, r0
 8002270:	460d      	mov	r5, r1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	a310      	add	r3, pc, #64	; (adr r3, 80022c0 <calc_angles+0x498>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f9b9 	bl	80005f8 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4620      	mov	r0, r4
 800228c:	4629      	mov	r1, r5
 800228e:	f7fd fffb 	bl	8000288 <__aeabi_dsub>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fc85 	bl	8000ba8 <__aeabi_d2f>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022ae:	bf00      	nop
 80022b0:	cccccccd 	.word	0xcccccccd
 80022b4:	3feccccc 	.word	0x3feccccc
 80022b8:	9999999a 	.word	0x9999999a
 80022bc:	3fb99999 	.word	0x3fb99999
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d

080022c8 <MPU6050_init>:

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	460b      	mov	r3, r1
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	4613      	mov	r3, r2
 80022dc:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	22d0      	movs	r2, #208	; 0xd0
 80022e8:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e00a      	b.n	8002306 <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 fa0d 	bl	8006714 <HAL_I2C_GetState>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d006      	beq.n	800230e <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b04      	cmp	r3, #4
 800230a:	ddf1      	ble.n	80022f0 <MPU6050_init+0x28>
 800230c:	e000      	b.n	8002310 <MPU6050_init+0x48>
      break;
 800230e:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b04      	cmp	r3, #4
 8002314:	dd01      	ble.n	800231a <MPU6050_init+0x52>
 8002316:	2301      	movs	r3, #1
 8002318:	e1bf      	b.n	800269a <MPU6050_init+0x3d2>

  // Check MPU id
  uint8_t whoiam = 0x75;
 800231a:	2375      	movs	r3, #117	; 0x75
 800231c:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	e011      	b.n	8002348 <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	b299      	uxth	r1, r3
 800232e:	f107 021b 	add.w	r2, r7, #27
 8002332:	2364      	movs	r3, #100	; 0x64
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2301      	movs	r3, #1
 8002338:	f003 fa22 	bl	8005780 <HAL_I2C_Master_Transmit>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b04      	cmp	r3, #4
 800234c:	ddea      	ble.n	8002324 <MPU6050_init+0x5c>
 800234e:	e000      	b.n	8002352 <MPU6050_init+0x8a>
      break;
 8002350:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b04      	cmp	r3, #4
 8002356:	dd01      	ble.n	800235c <MPU6050_init+0x94>
 8002358:	2303      	movs	r3, #3
 800235a:	e19e      	b.n	800269a <MPU6050_init+0x3d2>

  for (counter = 0; counter < 5; counter += 1) {
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	e011      	b.n	8002386 <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	791b      	ldrb	r3, [r3, #4]
 800236a:	b299      	uxth	r1, r3
 800236c:	f107 021a 	add.w	r2, r7, #26
 8002370:	2364      	movs	r3, #100	; 0x64
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2301      	movs	r3, #1
 8002376:	f003 fb01 	bl	800597c <HAL_I2C_Master_Receive>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	3301      	adds	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b04      	cmp	r3, #4
 800238a:	ddea      	ble.n	8002362 <MPU6050_init+0x9a>
 800238c:	e000      	b.n	8002390 <MPU6050_init+0xc8>
      break;
 800238e:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b04      	cmp	r3, #4
 8002394:	dd01      	ble.n	800239a <MPU6050_init+0xd2>
 8002396:	2304      	movs	r3, #4
 8002398:	e17f      	b.n	800269a <MPU6050_init+0x3d2>

  if (whoiam_res != 0x68) return 5;
 800239a:	7ebb      	ldrb	r3, [r7, #26]
 800239c:	2b68      	cmp	r3, #104	; 0x68
 800239e:	d001      	beq.n	80023a4 <MPU6050_init+0xdc>
 80023a0:	2305      	movs	r3, #5
 80023a2:	e17a      	b.n	800269a <MPU6050_init+0x3d2>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 80023a4:	236b      	movs	r3, #107	; 0x6b
 80023a6:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e011      	b.n	80023d2 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	791b      	ldrb	r3, [r3, #4]
 80023b6:	b299      	uxth	r1, r3
 80023b8:	f107 0218 	add.w	r2, r7, #24
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2302      	movs	r3, #2
 80023c2:	f003 f9dd 	bl	8005780 <HAL_I2C_Master_Transmit>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	ddea      	ble.n	80023ae <MPU6050_init+0xe6>
 80023d8:	e000      	b.n	80023dc <MPU6050_init+0x114>
      break;
 80023da:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b04      	cmp	r3, #4
 80023e0:	dd01      	ble.n	80023e6 <MPU6050_init+0x11e>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e159      	b.n	800269a <MPU6050_init+0x3d2>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 80023e6:	2319      	movs	r3, #25
 80023e8:	753b      	strb	r3, [r7, #20]
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e011      	b.n	8002418 <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	791b      	ldrb	r3, [r3, #4]
 80023fc:	b299      	uxth	r1, r3
 80023fe:	f107 0214 	add.w	r2, r7, #20
 8002402:	2364      	movs	r3, #100	; 0x64
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2302      	movs	r3, #2
 8002408:	f003 f9ba 	bl	8005780 <HAL_I2C_Master_Transmit>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b04      	cmp	r3, #4
 800241c:	ddea      	ble.n	80023f4 <MPU6050_init+0x12c>
 800241e:	e000      	b.n	8002422 <MPU6050_init+0x15a>
      break;
 8002420:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b04      	cmp	r3, #4
 8002426:	dd01      	ble.n	800242c <MPU6050_init+0x164>
 8002428:	2307      	movs	r3, #7
 800242a:	e136      	b.n	800269a <MPU6050_init+0x3d2>

  // Set accel config
  uint8_t accel_config = 0x1C;
 800242c:	231c      	movs	r3, #28
 800242e:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e011      	b.n	800245a <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	791b      	ldrb	r3, [r3, #4]
 800243e:	b299      	uxth	r1, r3
 8002440:	f107 0213 	add.w	r2, r7, #19
 8002444:	2364      	movs	r3, #100	; 0x64
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2301      	movs	r3, #1
 800244a:	f003 f999 	bl	8005780 <HAL_I2C_Master_Transmit>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3301      	adds	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b04      	cmp	r3, #4
 800245e:	ddea      	ble.n	8002436 <MPU6050_init+0x16e>
 8002460:	e000      	b.n	8002464 <MPU6050_init+0x19c>
      break;
 8002462:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b04      	cmp	r3, #4
 8002468:	dd01      	ble.n	800246e <MPU6050_init+0x1a6>
 800246a:	2308      	movs	r3, #8
 800246c:	e115      	b.n	800269a <MPU6050_init+0x3d2>

  for (counter = 0; counter < 5; counter += 1) {
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e011      	b.n	8002498 <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	791b      	ldrb	r3, [r3, #4]
 800247c:	b299      	uxth	r1, r3
 800247e:	f107 0213 	add.w	r2, r7, #19
 8002482:	2364      	movs	r3, #100	; 0x64
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2301      	movs	r3, #1
 8002488:	f003 fa78 	bl	800597c <HAL_I2C_Master_Receive>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b04      	cmp	r3, #4
 800249c:	ddea      	ble.n	8002474 <MPU6050_init+0x1ac>
 800249e:	e000      	b.n	80024a2 <MPU6050_init+0x1da>
      break;
 80024a0:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	dd01      	ble.n	80024ac <MPU6050_init+0x1e4>
 80024a8:	2309      	movs	r3, #9
 80024aa:	e0f6      	b.n	800269a <MPU6050_init+0x3d2>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	f023 0318 	bic.w	r3, r3, #24
 80024b4:	b25a      	sxtb	r2, r3
 80024b6:	79bb      	ldrb	r3, [r7, #6]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	e011      	b.n	80024ee <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	791b      	ldrb	r3, [r3, #4]
 80024d2:	b299      	uxth	r1, r3
 80024d4:	f107 0213 	add.w	r2, r7, #19
 80024d8:	2364      	movs	r3, #100	; 0x64
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	f003 f94f 	bl	8005780 <HAL_I2C_Master_Transmit>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3301      	adds	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	ddea      	ble.n	80024ca <MPU6050_init+0x202>
 80024f4:	e000      	b.n	80024f8 <MPU6050_init+0x230>
      break;
 80024f6:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	dd01      	ble.n	8002502 <MPU6050_init+0x23a>
 80024fe:	230a      	movs	r3, #10
 8002500:	e0cb      	b.n	800269a <MPU6050_init+0x3d2>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8002502:	231b      	movs	r3, #27
 8002504:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e011      	b.n	8002530 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	791b      	ldrb	r3, [r3, #4]
 8002514:	b299      	uxth	r1, r3
 8002516:	f107 0212 	add.w	r2, r7, #18
 800251a:	2364      	movs	r3, #100	; 0x64
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	f003 f92e 	bl	8005780 <HAL_I2C_Master_Transmit>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3301      	adds	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b04      	cmp	r3, #4
 8002534:	ddea      	ble.n	800250c <MPU6050_init+0x244>
 8002536:	e000      	b.n	800253a <MPU6050_init+0x272>
      break;
 8002538:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b04      	cmp	r3, #4
 800253e:	dd01      	ble.n	8002544 <MPU6050_init+0x27c>
 8002540:	230b      	movs	r3, #11
 8002542:	e0aa      	b.n	800269a <MPU6050_init+0x3d2>

  for (counter = 0; counter < 5; counter += 1) {
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	e011      	b.n	800256e <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	791b      	ldrb	r3, [r3, #4]
 8002552:	b299      	uxth	r1, r3
 8002554:	f107 0212 	add.w	r2, r7, #18
 8002558:	2364      	movs	r3, #100	; 0x64
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2301      	movs	r3, #1
 800255e:	f003 fa0d 	bl	800597c <HAL_I2C_Master_Receive>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b04      	cmp	r3, #4
 8002572:	ddea      	ble.n	800254a <MPU6050_init+0x282>
 8002574:	e000      	b.n	8002578 <MPU6050_init+0x2b0>
      break;
 8002576:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b04      	cmp	r3, #4
 800257c:	dd01      	ble.n	8002582 <MPU6050_init+0x2ba>
 800257e:	230c      	movs	r3, #12
 8002580:	e08b      	b.n	800269a <MPU6050_init+0x3d2>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	b25b      	sxtb	r3, r3
 8002586:	f023 0318 	bic.w	r3, r3, #24
 800258a:	b25a      	sxtb	r2, r3
 800258c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	b25b      	sxtb	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b25b      	sxtb	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	e011      	b.n	80025c6 <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	791b      	ldrb	r3, [r3, #4]
 80025aa:	b299      	uxth	r1, r3
 80025ac:	f107 0212 	add.w	r2, r7, #18
 80025b0:	2364      	movs	r3, #100	; 0x64
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2301      	movs	r3, #1
 80025b6:	f003 f8e3 	bl	8005780 <HAL_I2C_Master_Transmit>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	3301      	adds	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	ddea      	ble.n	80025a2 <MPU6050_init+0x2da>
 80025cc:	e000      	b.n	80025d0 <MPU6050_init+0x308>
      break;
 80025ce:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	dd01      	ble.n	80025da <MPU6050_init+0x312>
 80025d6:	230d      	movs	r3, #13
 80025d8:	e05f      	b.n	800269a <MPU6050_init+0x3d2>

  kalman_filter_init(&mpu6050->kf[0], 2, 2, 0.1); // Accel x
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3374      	adds	r3, #116	; 0x74
 80025de:	ed9f 1a31 	vldr	s2, [pc, #196]	; 80026a4 <MPU6050_init+0x3dc>
 80025e2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80025e6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fcae 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[1], 2, 2, 0.1); // Accel y
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	338c      	adds	r3, #140	; 0x8c
 80025f4:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80026a4 <MPU6050_init+0x3dc>
 80025f8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80025fc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fca3 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[2], 2, 2, 0.1); // Accel z
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	33a4      	adds	r3, #164	; 0xa4
 800260a:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80026a4 <MPU6050_init+0x3dc>
 800260e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002612:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fc98 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[3], 2, 2, 0.1); // Gyro x
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	33bc      	adds	r3, #188	; 0xbc
 8002620:	ed9f 1a20 	vldr	s2, [pc, #128]	; 80026a4 <MPU6050_init+0x3dc>
 8002624:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002628:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fc8d 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[4], 2, 2, 0.1); // Gyro Y
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	33d4      	adds	r3, #212	; 0xd4
 8002636:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80026a4 <MPU6050_init+0x3dc>
 800263a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800263e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fc82 	bl	8000f4c <kalman_filter_init>
  kalman_filter_init(&mpu6050->kf[5], 2, 2, 0.1); // Gyro z
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	33ec      	adds	r3, #236	; 0xec
 800264c:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80026a4 <MPU6050_init+0x3dc>
 8002650:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002654:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc77 	bl	8000f4c <kalman_filter_init>

  // For angle calculation
  memset(mpu6050->gyro_angle, 0, 3 * sizeof(float));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3348      	adds	r3, #72	; 0x48
 8002662:	220c      	movs	r2, #12
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f008 ffde 	bl	800b628 <memset>
  memset(mpu6050->acc_angle, 0, 3 * sizeof(float));
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3354      	adds	r3, #84	; 0x54
 8002670:	220c      	movs	r2, #12
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f008 ffd7 	bl	800b628 <memset>
  memset(mpu6050->measures, 0, 3 * sizeof(float));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3360      	adds	r3, #96	; 0x60
 800267e:	220c      	movs	r2, #12
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f008 ffd0 	bl	800b628 <memset>
  mpu6050->initialized = 0;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  mpu6050->angle_z = 0;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	; 0x44

  return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	3dcccccd 	.word	0x3dcccccd

080026a8 <MPU6050_set_offset>:

void MPU6050_set_offset(mpu6050_t *mpu6050,
    float ax_offset, float ay_offset, float az_offset,
    float gx_offset, float gy_offset, float gz_offset) {
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	61f8      	str	r0, [r7, #28]
 80026b0:	ed87 0a06 	vstr	s0, [r7, #24]
 80026b4:	edc7 0a05 	vstr	s1, [r7, #20]
 80026b8:	ed87 1a04 	vstr	s2, [r7, #16]
 80026bc:	edc7 1a03 	vstr	s3, [r7, #12]
 80026c0:	ed87 2a02 	vstr	s4, [r7, #8]
 80026c4:	edc7 2a01 	vstr	s5, [r7, #4]
  mpu6050->ax_offset = ax_offset;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
  mpu6050->ay_offset = ay_offset;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
  mpu6050->az_offset = az_offset;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c
  mpu6050->gx_offset = gx_offset;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  mpu6050->gy_offset = gy_offset;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34
  mpu6050->gz_offset = gz_offset;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026ec:	bf00      	nop
 80026ee:	3724      	adds	r7, #36	; 0x24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af04      	add	r7, sp, #16
 80026fe:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read(mpu6050->i2c, mpu6050->address, 0x3B, 1, i2c_rx_buffer, 14, 10);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	791b      	ldrb	r3, [r3, #4]
 8002708:	b299      	uxth	r1, r3
 800270a:	230a      	movs	r3, #10
 800270c:	9302      	str	r3, [sp, #8]
 800270e:	230e      	movs	r3, #14
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <MPU6050_update+0x34>)
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	223b      	movs	r2, #59	; 0x3b
 800271a:	f003 fb55 	bl	8005dc8 <HAL_I2C_Mem_Read>
  MPU6050_parse_6axis(mpu6050);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f806 	bl	8002730 <MPU6050_parse_6axis>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000844 	.word	0x20000844

08002730 <MPU6050_parse_6axis>:

void MPU6050_parse_6axis(mpu6050_t *mpu6050) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(i2c_rx_buffer[0] << 8 | i2c_rx_buffer[1]);
 8002738:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <MPU6050_parse_6axis+0x248>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	b21a      	sxth	r2, r3
 8002740:	4b8d      	ldr	r3, [pc, #564]	; (8002978 <MPU6050_parse_6axis+0x248>)
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	b21b      	sxth	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b21b      	sxth	r3, r3
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(i2c_rx_buffer[2] << 8 | i2c_rx_buffer[3]);
 8002758:	4b87      	ldr	r3, [pc, #540]	; (8002978 <MPU6050_parse_6axis+0x248>)
 800275a:	789b      	ldrb	r3, [r3, #2]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b21a      	sxth	r2, r3
 8002760:	4b85      	ldr	r3, [pc, #532]	; (8002978 <MPU6050_parse_6axis+0x248>)
 8002762:	78db      	ldrb	r3, [r3, #3]
 8002764:	b21b      	sxth	r3, r3
 8002766:	4313      	orrs	r3, r2
 8002768:	b21b      	sxth	r3, r3
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(i2c_rx_buffer[4] << 8 | i2c_rx_buffer[5]);
 8002778:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <MPU6050_parse_6axis+0x248>)
 800277a:	791b      	ldrb	r3, [r3, #4]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	b21a      	sxth	r2, r3
 8002780:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <MPU6050_parse_6axis+0x248>)
 8002782:	795b      	ldrb	r3, [r3, #5]
 8002784:	b21b      	sxth	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	b21b      	sxth	r3, r3
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (i2c_rx_buffer[6] << 8 | i2c_rx_buffer[7]);
 8002798:	4b77      	ldr	r3, [pc, #476]	; (8002978 <MPU6050_parse_6axis+0x248>)
 800279a:	799b      	ldrb	r3, [r3, #6]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	b21a      	sxth	r2, r3
 80027a0:	4b75      	ldr	r3, [pc, #468]	; (8002978 <MPU6050_parse_6axis+0x248>)
 80027a2:	79db      	ldrb	r3, [r3, #7]
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80027aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b6:	eddf 6a71 	vldr	s13, [pc, #452]	; 800297c <MPU6050_parse_6axis+0x24c>
 80027ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027be:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002980 <MPU6050_parse_6axis+0x250>
 80027c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = -(int16_t)(i2c_rx_buffer[8] << 8 | i2c_rx_buffer[9]);
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <MPU6050_parse_6axis+0x248>)
 80027ce:	7a1b      	ldrb	r3, [r3, #8]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	4b68      	ldr	r3, [pc, #416]	; (8002978 <MPU6050_parse_6axis+0x248>)
 80027d6:	7a5b      	ldrb	r3, [r3, #9]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b21b      	sxth	r3, r3
 80027de:	425b      	negs	r3, r3
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(i2c_rx_buffer[10] << 8 | i2c_rx_buffer[11]);
 80027ee:	4b62      	ldr	r3, [pc, #392]	; (8002978 <MPU6050_parse_6axis+0x248>)
 80027f0:	7a9b      	ldrb	r3, [r3, #10]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	4b60      	ldr	r3, [pc, #384]	; (8002978 <MPU6050_parse_6axis+0x248>)
 80027f8:	7adb      	ldrb	r3, [r3, #11]
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	b21b      	sxth	r3, r3
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = -(int16_t)(i2c_rx_buffer[12] << 8 | i2c_rx_buffer[13]);
 800280e:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <MPU6050_parse_6axis+0x248>)
 8002810:	7b1b      	ldrb	r3, [r3, #12]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	4b58      	ldr	r3, [pc, #352]	; (8002978 <MPU6050_parse_6axis+0x248>)
 8002818:	7b5b      	ldrb	r3, [r3, #13]
 800281a:	b21b      	sxth	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b21b      	sxth	r3, r3
 8002820:	425b      	negs	r3, r3
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->gx = mpu6050->gx / SSF_GYRO;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	ed93 7a06 	vldr	s14, [r3, #24]
 8002836:	eddf 6a53 	vldr	s13, [pc, #332]	; 8002984 <MPU6050_parse_6axis+0x254>
 800283a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = mpu6050->gy / SSF_GYRO;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	ed93 7a07 	vldr	s14, [r3, #28]
 800284a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002984 <MPU6050_parse_6axis+0x254>
 800284e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = mpu6050->gz / SSF_GYRO;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	ed93 7a08 	vldr	s14, [r3, #32]
 800285e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002984 <MPU6050_parse_6axis+0x254>
 8002862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edc3 7a08 	vstr	s15, [r3, #32]

  mpu6050->ax = kalman_filter_update(&mpu6050->kf[0], mpu6050->ax) + mpu6050->ax_offset;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	edd3 7a02 	vldr	s15, [r3, #8]
 8002878:	eeb0 0a67 	vmov.f32	s0, s15
 800287c:	4610      	mov	r0, r2
 800287e:	f7fe fb7e 	bl	8000f7e <kalman_filter_update>
 8002882:	eeb0 7a40 	vmov.f32	s14, s0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = kalman_filter_update(&mpu6050->kf[1], mpu6050->ay) + mpu6050->ay_offset;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	edd3 7a03 	vldr	s15, [r3, #12]
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	4610      	mov	r0, r2
 80028a8:	f7fe fb69 	bl	8000f7e <kalman_filter_update>
 80028ac:	eeb0 7a40 	vmov.f32	s14, s0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80028b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = kalman_filter_update(&mpu6050->kf[2], mpu6050->az) + mpu6050->az_offset;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	4610      	mov	r0, r2
 80028d2:	f7fe fb54 	bl	8000f7e <kalman_filter_update>
 80028d6:	eeb0 7a40 	vmov.f32	s14, s0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	edc3 7a04 	vstr	s15, [r3, #16]
  mpu6050->gx = kalman_filter_update(&mpu6050->kf[3], mpu6050->gx) + mpu6050->gx_offset;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80028f6:	eeb0 0a67 	vmov.f32	s0, s15
 80028fa:	4610      	mov	r0, r2
 80028fc:	f7fe fb3f 	bl	8000f7e <kalman_filter_update>
 8002900:	eeb0 7a40 	vmov.f32	s14, s0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = kalman_filter_update(&mpu6050->kf[4], mpu6050->gy) + mpu6050->gy_offset;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002920:	eeb0 0a67 	vmov.f32	s0, s15
 8002924:	4610      	mov	r0, r2
 8002926:	f7fe fb2a 	bl	8000f7e <kalman_filter_update>
 800292a:	eeb0 7a40 	vmov.f32	s14, s0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = kalman_filter_update(&mpu6050->kf[5], mpu6050->gz) + mpu6050->gz_offset;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	edd3 7a08 	vldr	s15, [r3, #32]
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	4610      	mov	r0, r2
 8002950:	f7fe fb15 	bl	8000f7e <kalman_filter_update>
 8002954:	eeb0 7a40 	vmov.f32	s14, s0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	edc3 7a08 	vstr	s15, [r3, #32]

  calc_angles(mpu6050);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fa5d 	bl	8001e28 <calc_angles>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000844 	.word	0x20000844
 800297c:	43aa0000 	.word	0x43aa0000
 8002980:	42121eb8 	.word	0x42121eb8
 8002984:	42830000 	.word	0x42830000

08002988 <limit>:
#define TEMP_OSR_512 0x52
#define TEMP_OSR_1024 0x54
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

float limit(float number, float min, float max) {
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002992:	edc7 0a02 	vstr	s1, [r7, #8]
 8002996:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 800299a:	ed97 7a03 	vldr	s14, [r7, #12]
 800299e:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	d501      	bpl.n	80029b0 <limit+0x28>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	e00b      	b.n	80029c8 <limit+0x40>
 80029b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80029b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c0:	dd01      	ble.n	80029c6 <limit+0x3e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	e000      	b.n	80029c8 <limit+0x40>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	ee07 3a90 	vmov	s15, r3
}
 80029cc:	eeb0 0a67 	vmov.f32	s0, s15
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_reset>:

void _reset(ms5611_t *ms5611) {
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af02      	add	r7, sp, #8
 80029e0:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_RESET;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	221e      	movs	r2, #30
 80029e6:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1 , &ms5611->tx, 1, 100);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f103 0216 	add.w	r2, r3, #22
 80029f2:	2364      	movs	r3, #100	; 0x64
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	21ee      	movs	r1, #238	; 0xee
 80029fa:	f002 fec1 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 80029fe:	200a      	movs	r0, #10
 8002a00:	f002 f9bc 	bl	8004d7c <HAL_Delay>

  // For Temperature > 20 Celsius
  ms5611->T2 = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  ms5611->OFF2 = 0;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  ms5611->SENS2 = 0;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

  average_filter_init(&ms5611->af, 20);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	334c      	adds	r3, #76	; 0x4c
 8002a20:	2114      	movs	r1, #20
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fb20 	bl	8001068 <average_filter_init>
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_read_PROM>:

void _read_PROM(ms5611_t *ms5611) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_PROM_C0;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	22a0      	movs	r2, #160	; 0xa0
 8002a3c:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f103 0216 	add.w	r2, r3, #22
 8002a48:	2364      	movs	r3, #100	; 0x64
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	21ee      	movs	r1, #238	; 0xee
 8002a50:	f002 fe96 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	1d1a      	adds	r2, r3, #4
 8002a5c:	2364      	movs	r3, #100	; 0x64
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2302      	movs	r3, #2
 8002a62:	21ee      	movs	r1, #238	; 0xee
 8002a64:	f002 ff8a 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[0] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	791b      	ldrb	r3, [r3, #4]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	795b      	ldrb	r3, [r3, #5]
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	831a      	strh	r2, [r3, #24]
  HAL_Delay(10);
 8002a80:	200a      	movs	r0, #10
 8002a82:	f002 f97b 	bl	8004d7c <HAL_Delay>

  ms5611->tx = CMD_PROM_C1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	22a2      	movs	r2, #162	; 0xa2
 8002a8a:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 0216 	add.w	r2, r3, #22
 8002a96:	2364      	movs	r3, #100	; 0x64
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	21ee      	movs	r1, #238	; 0xee
 8002a9e:	f002 fe6f 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1d1a      	adds	r2, r3, #4
 8002aaa:	2364      	movs	r3, #100	; 0x64
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2302      	movs	r3, #2
 8002ab0:	21ee      	movs	r1, #238	; 0xee
 8002ab2:	f002 ff63 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[1] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	791b      	ldrb	r3, [r3, #4]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	795b      	ldrb	r3, [r3, #5]
 8002ac2:	b21b      	sxth	r3, r3
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b21b      	sxth	r3, r3
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	835a      	strh	r2, [r3, #26]
  HAL_Delay(10);
 8002ace:	200a      	movs	r0, #10
 8002ad0:	f002 f954 	bl	8004d7c <HAL_Delay>

  ms5611->tx = CMD_PROM_C2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	22a4      	movs	r2, #164	; 0xa4
 8002ad8:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f103 0216 	add.w	r2, r3, #22
 8002ae4:	2364      	movs	r3, #100	; 0x64
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	21ee      	movs	r1, #238	; 0xee
 8002aec:	f002 fe48 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	2364      	movs	r3, #100	; 0x64
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2302      	movs	r3, #2
 8002afe:	21ee      	movs	r1, #238	; 0xee
 8002b00:	f002 ff3c 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[2] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	791b      	ldrb	r3, [r3, #4]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	795b      	ldrb	r3, [r3, #5]
 8002b10:	b21b      	sxth	r3, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	b21b      	sxth	r3, r3
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	839a      	strh	r2, [r3, #28]
  HAL_Delay(10);
 8002b1c:	200a      	movs	r0, #10
 8002b1e:	f002 f92d 	bl	8004d7c <HAL_Delay>

  ms5611->tx = CMD_PROM_C3;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	22a6      	movs	r2, #166	; 0xa6
 8002b26:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f103 0216 	add.w	r2, r3, #22
 8002b32:	2364      	movs	r3, #100	; 0x64
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2301      	movs	r3, #1
 8002b38:	21ee      	movs	r1, #238	; 0xee
 8002b3a:	f002 fe21 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	1d1a      	adds	r2, r3, #4
 8002b46:	2364      	movs	r3, #100	; 0x64
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	21ee      	movs	r1, #238	; 0xee
 8002b4e:	f002 ff15 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[3] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	791b      	ldrb	r3, [r3, #4]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	795b      	ldrb	r3, [r3, #5]
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	83da      	strh	r2, [r3, #30]
  HAL_Delay(10);
 8002b6a:	200a      	movs	r0, #10
 8002b6c:	f002 f906 	bl	8004d7c <HAL_Delay>

  ms5611->tx = CMD_PROM_C4;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	22a8      	movs	r2, #168	; 0xa8
 8002b74:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f103 0216 	add.w	r2, r3, #22
 8002b80:	2364      	movs	r3, #100	; 0x64
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2301      	movs	r3, #1
 8002b86:	21ee      	movs	r1, #238	; 0xee
 8002b88:	f002 fdfa 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1d1a      	adds	r2, r3, #4
 8002b94:	2364      	movs	r3, #100	; 0x64
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2302      	movs	r3, #2
 8002b9a:	21ee      	movs	r1, #238	; 0xee
 8002b9c:	f002 feee 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[4] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	795b      	ldrb	r3, [r3, #5]
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	841a      	strh	r2, [r3, #32]
  HAL_Delay(10);
 8002bb8:	200a      	movs	r0, #10
 8002bba:	f002 f8df 	bl	8004d7c <HAL_Delay>

  ms5611->tx = CMD_PROM_C5;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	22aa      	movs	r2, #170	; 0xaa
 8002bc2:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 0216 	add.w	r2, r3, #22
 8002bce:	2364      	movs	r3, #100	; 0x64
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	21ee      	movs	r1, #238	; 0xee
 8002bd6:	f002 fdd3 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1d1a      	adds	r2, r3, #4
 8002be2:	2364      	movs	r3, #100	; 0x64
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2302      	movs	r3, #2
 8002be8:	21ee      	movs	r1, #238	; 0xee
 8002bea:	f002 fec7 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[5] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	791b      	ldrb	r3, [r3, #4]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	795b      	ldrb	r3, [r3, #5]
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	845a      	strh	r2, [r3, #34]	; 0x22
  HAL_Delay(10);
 8002c06:	200a      	movs	r0, #10
 8002c08:	f002 f8b8 	bl	8004d7c <HAL_Delay>

  ms5611->tx = CMD_PROM_C6;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	22ac      	movs	r2, #172	; 0xac
 8002c10:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 0216 	add.w	r2, r3, #22
 8002c1c:	2364      	movs	r3, #100	; 0x64
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2301      	movs	r3, #1
 8002c22:	21ee      	movs	r1, #238	; 0xee
 8002c24:	f002 fdac 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1d1a      	adds	r2, r3, #4
 8002c30:	2364      	movs	r3, #100	; 0x64
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2302      	movs	r3, #2
 8002c36:	21ee      	movs	r1, #238	; 0xee
 8002c38:	f002 fea0 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[6] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	791b      	ldrb	r3, [r3, #4]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	b21a      	sxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	795b      	ldrb	r3, [r3, #5]
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	849a      	strh	r2, [r3, #36]	; 0x24
  HAL_Delay(10);
 8002c54:	200a      	movs	r0, #10
 8002c56:	f002 f891 	bl	8004d7c <HAL_Delay>

  ms5611->tx = CMD_PROM_C7;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	22ae      	movs	r2, #174	; 0xae
 8002c5e:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f103 0216 	add.w	r2, r3, #22
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	21ee      	movs	r1, #238	; 0xee
 8002c72:	f002 fd85 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	1d1a      	adds	r2, r3, #4
 8002c7e:	2364      	movs	r3, #100	; 0x64
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2302      	movs	r3, #2
 8002c84:	21ee      	movs	r1, #238	; 0xee
 8002c86:	f002 fe79 	bl	800597c <HAL_I2C_Master_Receive>
  ms5611->C[7] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	795b      	ldrb	r3, [r3, #5]
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_Delay(10);
 8002ca2:	200a      	movs	r0, #10
 8002ca4:	f002 f86a 	bl	8004d7c <HAL_Delay>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <MS5611_init>:

int MS5611_init(ms5611_t *ms5611, I2C_HandleTypeDef *i2c) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  ms5611->i2c = i2c;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	601a      	str	r2, [r3, #0]

  _reset(ms5611);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff fe8a 	bl	80029da <_reset>
  _read_PROM(ms5611);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff feb2 	bl	8002a30 <_read_PROM>

  return 0;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <MS5611_req_temperature>:

void MS5611_req_temperature(ms5611_t *ms5611, OSR osr) {
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = TEMP_OSR_256 + (2 * osr);
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	3328      	adds	r3, #40	; 0x28
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f103 0216 	add.w	r2, r3, #22
 8002cfa:	2364      	movs	r3, #100	; 0x64
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	21ee      	movs	r1, #238	; 0xee
 8002d02:	f002 fd3d 	bl	8005780 <HAL_I2C_Master_Transmit>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <MS5611_req_pressure>:

void MS5611_req_pressure(ms5611_t *ms5611, OSR osr) {
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af02      	add	r7, sp, #8
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = PRESSURE_OSR_256 + (2 * osr);
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	3320      	adds	r3, #32
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f103 0216 	add.w	r2, r3, #22
 8002d32:	2364      	movs	r3, #100	; 0x64
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2301      	movs	r3, #1
 8002d38:	21ee      	movs	r1, #238	; 0xee
 8002d3a:	f002 fd21 	bl	8005780 <HAL_I2C_Master_Transmit>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <MS5611_read_temperature>:

void MS5611_read_temperature(ms5611_t *ms5611) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f103 0216 	add.w	r2, r3, #22
 8002d5e:	2364      	movs	r3, #100	; 0x64
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2301      	movs	r3, #1
 8002d64:	21ee      	movs	r1, #238	; 0xee
 8002d66:	f002 fd0b 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_temp, 3, 100);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f103 0210 	add.w	r2, r3, #16
 8002d74:	2364      	movs	r3, #100	; 0x64
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2303      	movs	r3, #3
 8002d7a:	21ef      	movs	r1, #239	; 0xef
 8002d7c:	f002 fdfe 	bl	800597c <HAL_I2C_Master_Receive>
//  HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1 , 0x00, 1, ms5611->rx_temp, 3, 100);

  ms5611->digi_tem_D2 = (ms5611->rx_temp[0] << 16) | (ms5611->rx_temp[1] << 8) | ms5611->rx_temp[2];
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7c1b      	ldrb	r3, [r3, #16]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7c5b      	ldrb	r3, [r3, #17]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	7c92      	ldrb	r2, [r2, #18]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <MS5611_read_pressure>:

void MS5611_read_pressure(ms5611_t *ms5611) {
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 0216 	add.w	r2, r3, #22
 8002dba:	2364      	movs	r3, #100	; 0x64
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	21ee      	movs	r1, #238	; 0xee
 8002dc2:	f002 fcdd 	bl	8005780 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_press, 3, 100);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f103 0213 	add.w	r2, r3, #19
 8002dd0:	2364      	movs	r3, #100	; 0x64
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	21ef      	movs	r1, #239	; 0xef
 8002dd8:	f002 fdd0 	bl	800597c <HAL_I2C_Master_Receive>
  //HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1, 0x00, 1, ms5611->rx_press, 3, 100);

  ms5611->digi_psr_D1 = ms5611->rx_press[0] << 16 | ms5611->rx_press[1] << 8 | ms5611->rx_press[2];
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7cdb      	ldrb	r3, [r3, #19]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7d1b      	ldrb	r3, [r3, #20]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	4313      	orrs	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	7d52      	ldrb	r2, [r2, #21]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <MS5611_calc_temperature>:

void MS5611_calc_temperature(ms5611_t *ms5611) {
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  ms5611->dT = ms5611->C[5];
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT <<= 8; // Calculated up to C5 * 2^8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT *= -1; // Apply negative sign
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	425a      	negs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT += ms5611->digi_tem_D2; // = D2 - C5 * 2^8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	461a      	mov	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	4413      	add	r3, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

  ms5611->TEMP = ms5611->dT * ms5611->C[6];
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002e3e:	fb03 f202 	mul.w	r2, r3, r2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	15da      	asrs	r2, r3, #23
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP += 2000;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <MS5611_calc_pressure>:

void MS5611_calc_pressure(ms5611_t *ms5611) {
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b08c      	sub	sp, #48	; 0x30
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	62f8      	str	r0, [r7, #44]	; 0x2c
  ms5611->OFF = ms5611->C[2];
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	8b9b      	ldrh	r3, [r3, #28]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	61fa      	str	r2, [r7, #28]
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e84:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
  ms5611->OFF <<= 16; // Calculated up to C2 * 2^16
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	0419      	lsls	r1, r3, #16
 8002e98:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002e9c:	0410      	lsls	r0, r2, #16
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
  ms5611->OFF += (ms5611->C[4] * ms5611->dT) >> 7;
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	8c1b      	ldrh	r3, [r3, #32]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	11db      	asrs	r3, r3, #7
 8002eba:	17da      	asrs	r2, r3, #31
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	18c3      	adds	r3, r0, r3
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	eb41 0303 	adc.w	r3, r1, r3
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ed4:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38


  ms5611->SENS = ms5611->C[1];
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	8b5b      	ldrh	r3, [r3, #26]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	60fa      	str	r2, [r7, #12]
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002eea:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
  ms5611->SENS <<= 15; // Calculated up to C1 * 2^15
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	03cb      	lsls	r3, r1, #15
 8002efe:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8002f02:	03c2      	lsls	r2, r0, #15
 8002f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  ms5611->SENS += (ms5611->C[3] * ms5611->dT) >>8;
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f12:	8bc9      	ldrh	r1, [r1, #30]
 8002f14:	4608      	mov	r0, r1
 8002f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f18:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002f1a:	fb00 f101 	mul.w	r1, r0, r1
 8002f1e:	1209      	asrs	r1, r1, #8
 8002f20:	17c8      	asrs	r0, r1, #31
 8002f22:	468a      	mov	sl, r1
 8002f24:	4683      	mov	fp, r0
 8002f26:	eb12 010a 	adds.w	r1, r2, sl
 8002f2a:	6039      	str	r1, [r7, #0]
 8002f2c:	eb43 030b 	adc.w	r3, r3, fp
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f38:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

  ms5611->P = ((ms5611->digi_psr_D1 * ms5611->SENS) / pow(2, 21) - ms5611->OFF) / pow(2, 15);
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	2200      	movs	r2, #0
 8002f42:	4698      	mov	r8, r3
 8002f44:	4691      	mov	r9, r2
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f4c:	fb02 f009 	mul.w	r0, r2, r9
 8002f50:	fb08 f103 	mul.w	r1, r8, r3
 8002f54:	4401      	add	r1, r0
 8002f56:	fba8 4502 	umull	r4, r5, r8, r2
 8002f5a:	194b      	adds	r3, r1, r5
 8002f5c:	461d      	mov	r5, r3
 8002f5e:	4620      	mov	r0, r4
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7fd fb1b 	bl	800059c <__aeabi_l2d>
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <MS5611_calc_pressure+0x158>)
 8002f6c:	f7fd fc6e 	bl	800084c <__aeabi_ddiv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fb0b 	bl	800059c <__aeabi_l2d>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd f97b 	bl	8000288 <__aeabi_dsub>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <MS5611_calc_pressure+0x15c>)
 8002fa0:	f7fd fc54 	bl	800084c <__aeabi_ddiv>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	f7fd fdd4 	bl	8000b58 <__aeabi_d2iz>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002fb6:	bf00      	nop
 8002fb8:	3730      	adds	r7, #48	; 0x30
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc0:	41400000 	.word	0x41400000
 8002fc4:	40e00000 	.word	0x40e00000

08002fc8 <MS5611_calc_altitude>:

#define SEA_PRESSURE 1013.25f
void MS5611_calc_altitude(ms5611_t *ms5611) {
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  float temperature = (float)ms5611->TEMP/100.f;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fdc:	eddf 6a66 	vldr	s13, [pc, #408]	; 8003178 <MS5611_calc_altitude+0x1b0>
 8002fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fe4:	edc7 7a05 	vstr	s15, [r7, #20]
  float pressure = (float)ms5611->P/100.f;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff4:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003178 <MS5611_calc_altitude+0x1b0>
 8002ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ffc:	edc7 7a04 	vstr	s15, [r7, #16]

  // Apply average filter for altitude
  ms5611->fast_pressure = average_filter_update(&ms5611->af, pressure);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	334c      	adds	r3, #76	; 0x4c
 8003004:	ed97 0a04 	vldr	s0, [r7, #16]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe f84b 	bl	80010a4 <average_filter_update>
 800300e:	eef0 7a40 	vmov.f32	s15, s0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	edc3 7a7a 	vstr	s15, [r3, #488]	; 0x1e8

  // Apply complementary filter
  ms5611->slow_pressure = ms5611->slow_pressure*0.99 + ms5611->fast_pressure*0.01;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fa92 	bl	8000548 <__aeabi_f2d>
 8003024:	a34a      	add	r3, pc, #296	; (adr r3, 8003150 <MS5611_calc_altitude+0x188>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd fae5 	bl	80005f8 <__aeabi_dmul>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4614      	mov	r4, r2
 8003034:	461d      	mov	r5, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa83 	bl	8000548 <__aeabi_f2d>
 8003042:	a345      	add	r3, pc, #276	; (adr r3, 8003158 <MS5611_calc_altitude+0x190>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd fad6 	bl	80005f8 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4620      	mov	r0, r4
 8003052:	4629      	mov	r1, r5
 8003054:	f7fd f91a 	bl	800028c <__adddf3>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fda2 	bl	8000ba8 <__aeabi_d2f>
 8003064:	4602      	mov	r2, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

  // Fix slow response problem
  float diff = limit(ms5611->fast_pressure - ms5611->slow_pressure, -8, 8);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8003078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307c:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8003080:	eefa 0a00 	vmov.f32	s1, #160	; 0xc1000000 -8.0
 8003084:	eeb0 0a67 	vmov.f32	s0, s15
 8003088:	f7ff fc7e 	bl	8002988 <limit>
 800308c:	ed87 0a03 	vstr	s0, [r7, #12]
  if (diff < -0.006 || diff > 0.006)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7fd fa59 	bl	8000548 <__aeabi_f2d>
 8003096:	a332      	add	r3, pc, #200	; (adr r3, 8003160 <MS5611_calc_altitude+0x198>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f7fd fd1e 	bl	8000adc <__aeabi_dcmplt>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <MS5611_calc_altitude+0xf4>
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7fd fa4e 	bl	8000548 <__aeabi_f2d>
 80030ac:	a32e      	add	r3, pc, #184	; (adr r3, 8003168 <MS5611_calc_altitude+0x1a0>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f7fd fd31 	bl	8000b18 <__aeabi_dcmpgt>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01f      	beq.n	80030fc <MS5611_calc_altitude+0x134>
    ms5611->slow_pressure += 0.1*diff;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fa40 	bl	8000548 <__aeabi_f2d>
 80030c8:	4604      	mov	r4, r0
 80030ca:	460d      	mov	r5, r1
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7fd fa3b 	bl	8000548 <__aeabi_f2d>
 80030d2:	a327      	add	r3, pc, #156	; (adr r3, 8003170 <MS5611_calc_altitude+0x1a8>)
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f7fd fa8e 	bl	80005f8 <__aeabi_dmul>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4620      	mov	r0, r4
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7fd f8d2 	bl	800028c <__adddf3>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7fd fd5a 	bl	8000ba8 <__aeabi_d2f>
 80030f4:	4602      	mov	r2, r0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

  pressure = ms5611->slow_pressure;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003102:	613b      	str	r3, [r7, #16]

  ms5611->altitude = (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8003104:	edd7 7a04 	vldr	s15, [r7, #16]
 8003108:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800317c <MS5611_calc_altitude+0x1b4>
 800310c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003110:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003180 <MS5611_calc_altitude+0x1b8>
 8003114:	eeb0 0a47 	vmov.f32	s0, s14
 8003118:	f009 f826 	bl	800c168 <powf>
 800311c:	eef0 7a40 	vmov.f32	s15, s0
 8003120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003124:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003128:	edd7 7a05 	vldr	s15, [r7, #20]
 800312c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003184 <MS5611_calc_altitude+0x1bc>
 8003130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003138:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003188 <MS5611_calc_altitude+0x1c0>
 800313c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	bf00      	nop
 8003150:	7ae147ae 	.word	0x7ae147ae
 8003154:	3fefae14 	.word	0x3fefae14
 8003158:	47ae147b 	.word	0x47ae147b
 800315c:	3f847ae1 	.word	0x3f847ae1
 8003160:	bc6a7efa 	.word	0xbc6a7efa
 8003164:	bf789374 	.word	0xbf789374
 8003168:	bc6a7efa 	.word	0xbc6a7efa
 800316c:	3f789374 	.word	0x3f789374
 8003170:	9999999a 	.word	0x9999999a
 8003174:	3fb99999 	.word	0x3fb99999
 8003178:	42c80000 	.word	0x42c80000
 800317c:	447d5000 	.word	0x447d5000
 8003180:	3e42c9b7 	.word	0x3e42c9b7
 8003184:	43889333 	.word	0x43889333
 8003188:	3bd4fdf4 	.word	0x3bd4fdf4

0800318c <MS5611_update>:
// Counter checks depend on timer frequency
#define STEP_1 0
#define STEP_2 2
#define STEP_3 4
#define STEP_END 6
void MS5611_update(ms5611_t *ms5611) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  static int counter = 0;

  if (counter == STEP_1) {
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <MS5611_update+0x70>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <MS5611_update+0x18>
    MS5611_req_temperature(ms5611, OSR_4096);
 800319c:	2104      	movs	r1, #4
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fd99 	bl	8002cd6 <MS5611_req_temperature>
  }

  if (counter == STEP_2) {
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <MS5611_update+0x70>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d109      	bne.n	80031c0 <MS5611_update+0x34>
    MS5611_read_temperature(ms5611);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fdca 	bl	8002d46 <MS5611_read_temperature>
    MS5611_calc_temperature(ms5611);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fe23 	bl	8002dfe <MS5611_calc_temperature>
    MS5611_req_pressure(ms5611, OSR_4096);
 80031b8:	2104      	movs	r1, #4
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff fda7 	bl	8002d0e <MS5611_req_pressure>
  }

  if (counter == STEP_3) {
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <MS5611_update+0x70>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d108      	bne.n	80031da <MS5611_update+0x4e>
    MS5611_read_pressure(ms5611);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fdea 	bl	8002da2 <MS5611_read_pressure>
    MS5611_calc_pressure(ms5611);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fe4a 	bl	8002e68 <MS5611_calc_pressure>
    MS5611_calc_altitude(ms5611);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fef7 	bl	8002fc8 <MS5611_calc_altitude>
  }

  counter += 1;
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <MS5611_update+0x70>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a06      	ldr	r2, [pc, #24]	; (80031fc <MS5611_update+0x70>)
 80031e2:	6013      	str	r3, [r2, #0]
  if (counter >= STEP_END)
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <MS5611_update+0x70>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	dd02      	ble.n	80031f2 <MS5611_update+0x66>
    counter = 0;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <MS5611_update+0x70>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000864 	.word	0x20000864

08003200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_MspInit+0x4c>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_MspInit+0x4c>)
 8003210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003214:	6453      	str	r3, [r2, #68]	; 0x44
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <HAL_MspInit+0x4c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_MspInit+0x4c>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_MspInit+0x4c>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_MspInit+0x4c>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_I2C_MspInit+0xa4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d13b      	bne.n	80032ea <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_I2C_MspInit+0xa8>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_I2C_MspInit+0xa8>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_I2C_MspInit+0xa8>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800328e:	23c0      	movs	r3, #192	; 0xc0
 8003290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003292:	2312      	movs	r3, #18
 8003294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800329e:	2304      	movs	r3, #4
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	4619      	mov	r1, r3
 80032a8:	4814      	ldr	r0, [pc, #80]	; (80032fc <HAL_I2C_MspInit+0xac>)
 80032aa:	f001 ff3d 	bl	8005128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_I2C_MspInit+0xa8>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_I2C_MspInit+0xa8>)
 80032b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_I2C_MspInit+0xa8>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	201f      	movs	r0, #31
 80032d0:	f001 fe53 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032d4:	201f      	movs	r0, #31
 80032d6:	f001 fe6c 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	2020      	movs	r0, #32
 80032e0:	f001 fe4b 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032e4:	2020      	movs	r0, #32
 80032e6:	f001 fe64 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032ea:	bf00      	nop
 80032ec:	3728      	adds	r7, #40	; 0x28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40005400 	.word	0x40005400
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020400 	.word	0x40020400

08003300 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <HAL_SPI_MspInit+0xc0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d14a      	bne.n	80033b8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_SPI_MspInit+0xc4>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003376:	230c      	movs	r3, #12
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003382:	2303      	movs	r3, #3
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003386:	2305      	movs	r3, #5
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	480d      	ldr	r0, [pc, #52]	; (80033c8 <HAL_SPI_MspInit+0xc8>)
 8003392:	f001 fec9 	bl	8005128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033a8:	2305      	movs	r3, #5
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <HAL_SPI_MspInit+0xcc>)
 80033b4:	f001 feb8 	bl	8005128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033b8:	bf00      	nop
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40003800 	.word	0x40003800
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020400 	.word	0x40020400

080033d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a60      	ldr	r2, [pc, #384]	; (8003570 <HAL_TIM_Base_MspInit+0x1a0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d116      	bne.n	8003420 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
 80033f6:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	4a5e      	ldr	r2, [pc, #376]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6453      	str	r3, [r2, #68]	; 0x44
 8003402:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	2018      	movs	r0, #24
 8003414:	f001 fdb1 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003418:	2018      	movs	r0, #24
 800341a:	f001 fdca 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800341e:	e0a3      	b.n	8003568 <HAL_TIM_Base_MspInit+0x198>
  else if(htim_base->Instance==TIM2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	4b51      	ldr	r3, [pc, #324]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a50      	ldr	r2, [pc, #320]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b4e      	ldr	r3, [pc, #312]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
}
 8003446:	e08f      	b.n	8003568 <HAL_TIM_Base_MspInit+0x198>
  else if(htim_base->Instance==TIM3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4a      	ldr	r2, [pc, #296]	; (8003578 <HAL_TIM_Base_MspInit+0x1a8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d116      	bne.n	8003480 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a46      	ldr	r2, [pc, #280]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b44      	ldr	r3, [pc, #272]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	201d      	movs	r0, #29
 8003474:	f001 fd81 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003478:	201d      	movs	r0, #29
 800347a:	f001 fd9a 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
}
 800347e:	e073      	b.n	8003568 <HAL_TIM_Base_MspInit+0x198>
  else if(htim_base->Instance==TIM4)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a3d      	ldr	r2, [pc, #244]	; (800357c <HAL_TIM_Base_MspInit+0x1ac>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d135      	bne.n	80034f6 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034d4:	2302      	movs	r3, #2
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034dc:	4619      	mov	r1, r3
 80034de:	4828      	ldr	r0, [pc, #160]	; (8003580 <HAL_TIM_Base_MspInit+0x1b0>)
 80034e0:	f001 fe22 	bl	8005128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2100      	movs	r1, #0
 80034e8:	201e      	movs	r0, #30
 80034ea:	f001 fd46 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034ee:	201e      	movs	r0, #30
 80034f0:	f001 fd5f 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
}
 80034f4:	e038      	b.n	8003568 <HAL_TIM_Base_MspInit+0x198>
  else if(htim_base->Instance==TIM5)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_TIM_Base_MspInit+0x1b4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d133      	bne.n	8003568 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	6413      	str	r3, [r2, #64]	; 0x40
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	4a13      	ldr	r2, [pc, #76]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6313      	str	r3, [r2, #48]	; 0x30
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_TIM_Base_MspInit+0x1a4>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003538:	230f      	movs	r3, #15
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2302      	movs	r3, #2
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003544:	2300      	movs	r3, #0
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003548:	2302      	movs	r3, #2
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003550:	4619      	mov	r1, r3
 8003552:	480d      	ldr	r0, [pc, #52]	; (8003588 <HAL_TIM_Base_MspInit+0x1b8>)
 8003554:	f001 fde8 	bl	8005128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003558:	2200      	movs	r2, #0
 800355a:	2100      	movs	r1, #0
 800355c:	2032      	movs	r0, #50	; 0x32
 800355e:	f001 fd0c 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003562:	2032      	movs	r0, #50	; 0x32
 8003564:	f001 fd25 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
}
 8003568:	bf00      	nop
 800356a:	3738      	adds	r7, #56	; 0x38
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40010000 	.word	0x40010000
 8003574:	40023800 	.word	0x40023800
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40020000 	.word	0x40020000

0800358c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_TIM_IC_MspInit+0x94>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d133      	bne.n	8003616 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <HAL_TIM_IC_MspInit+0x98>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <HAL_TIM_IC_MspInit+0x98>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_TIM_IC_MspInit+0x98>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_TIM_IC_MspInit+0x98>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_TIM_IC_MspInit+0x98>)
 80035d4:	f043 0310 	orr.w	r3, r3, #16
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_TIM_IC_MspInit+0x98>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035e6:	2360      	movs	r3, #96	; 0x60
 80035e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80035f6:	2303      	movs	r3, #3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4809      	ldr	r0, [pc, #36]	; (8003628 <HAL_TIM_IC_MspInit+0x9c>)
 8003602:	f001 fd91 	bl	8005128 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003606:	2200      	movs	r2, #0
 8003608:	2100      	movs	r1, #0
 800360a:	2018      	movs	r0, #24
 800360c:	f001 fcb5 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003610:	2018      	movs	r0, #24
 8003612:	f001 fcce 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003616:	bf00      	nop
 8003618:	3728      	adds	r7, #40	; 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40014000 	.word	0x40014000
 8003624:	40023800 	.word	0x40023800
 8003628:	40021000 	.word	0x40021000

0800362c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a34      	ldr	r2, [pc, #208]	; (800371c <HAL_TIM_MspPostInit+0xf0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d11f      	bne.n	800368e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a32      	ldr	r2, [pc, #200]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800366a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800366e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800367c:	2301      	movs	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	4619      	mov	r1, r3
 8003686:	4827      	ldr	r0, [pc, #156]	; (8003724 <HAL_TIM_MspPostInit+0xf8>)
 8003688:	f001 fd4e 	bl	8005128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800368c:	e041      	b.n	8003712 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003696:	d13c      	bne.n	8003712 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6313      	str	r3, [r2, #48]	; 0x30
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	6313      	str	r3, [r2, #48]	; 0x30
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_TIM_MspPostInit+0xf4>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036d0:	2320      	movs	r3, #32
 80036d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036e0:	2301      	movs	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	4619      	mov	r1, r3
 80036ea:	480f      	ldr	r0, [pc, #60]	; (8003728 <HAL_TIM_MspPostInit+0xfc>)
 80036ec:	f001 fd1c 	bl	8005128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80036f0:	f640 4308 	movw	r3, #3080	; 0xc08
 80036f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003702:	2301      	movs	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003706:	f107 0314 	add.w	r3, r7, #20
 800370a:	4619      	mov	r1, r3
 800370c:	4807      	ldr	r0, [pc, #28]	; (800372c <HAL_TIM_MspPostInit+0x100>)
 800370e:	f001 fd0b 	bl	8005128 <HAL_GPIO_Init>
}
 8003712:	bf00      	nop
 8003714:	3728      	adds	r7, #40	; 0x28
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40023800 	.word	0x40023800
 8003724:	40021000 	.word	0x40021000
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400

08003730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <HAL_UART_MspInit+0x94>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d134      	bne.n	80037bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <HAL_UART_MspInit+0x98>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_UART_MspInit+0x98>)
 800375c:	f043 0310 	orr.w	r3, r3, #16
 8003760:	6453      	str	r3, [r2, #68]	; 0x44
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_UART_MspInit+0x98>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_UART_MspInit+0x98>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_UART_MspInit+0x98>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_UART_MspInit+0x98>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800378a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800378e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800379c:	2307      	movs	r3, #7
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4619      	mov	r1, r3
 80037a6:	4809      	ldr	r0, [pc, #36]	; (80037cc <HAL_UART_MspInit+0x9c>)
 80037a8:	f001 fcbe 	bl	8005128 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037ac:	2200      	movs	r2, #0
 80037ae:	2100      	movs	r1, #0
 80037b0:	2025      	movs	r0, #37	; 0x25
 80037b2:	f001 fbe2 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037b6:	2025      	movs	r0, #37	; 0x25
 80037b8:	f001 fbfb 	bl	8004fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	; 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40011000 	.word	0x40011000
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020000 	.word	0x40020000

080037d0 <set_speed>:
/* USER CODE BEGIN PFP */

extern float limit(float number, float min, float max);

void set_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <set_speed+0x34>)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <set_speed+0x34>)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 80037ea:	4a06      	ldr	r2, [pc, #24]	; (8003804 <set_speed+0x34>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <set_speed+0x34>)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40010000 	.word	0x40010000

08003808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800380c:	e7fe      	b.n	800380c <NMI_Handler+0x4>

0800380e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003812:	e7fe      	b.n	8003812 <HardFault_Handler+0x4>

08003814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <MemManage_Handler+0x4>

0800381a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381e:	e7fe      	b.n	800381e <BusFault_Handler+0x4>

08003820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <UsageFault_Handler+0x4>

08003826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003854:	f001 fa72 	bl	8004d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}

0800385c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003860:	4803      	ldr	r0, [pc, #12]	; (8003870 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003862:	f005 fe4f 	bl	8009504 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003866:	4803      	ldr	r0, [pc, #12]	; (8003874 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003868:	f005 fe4c 	bl	8009504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000150 	.word	0x20000150
 8003874:	200002b8 	.word	0x200002b8

08003878 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  fly();
 800387c:	f000 fc86 	bl	800418c <fly>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <TIM3_IRQHandler+0x14>)
 8003882:	f005 fe3f 	bl	8009504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200001e0 	.word	0x200001e0

08003890 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <TIM4_IRQHandler+0x10>)
 8003896:	f005 fe35 	bl	8009504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000228 	.word	0x20000228

080038a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <I2C1_EV_IRQHandler+0x10>)
 80038aa:	f002 fcb3 	bl	8006214 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200000a4 	.word	0x200000a4

080038b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <I2C1_ER_IRQHandler+0x10>)
 80038be:	f002 fe1a 	bl	80064f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200000a4 	.word	0x200000a4

080038cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038d0:	4802      	ldr	r0, [pc, #8]	; (80038dc <USART1_IRQHandler+0x10>)
 80038d2:	f006 ff8f 	bl	800a7f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000300 	.word	0x20000300

080038e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <TIM5_IRQHandler+0x10>)
 80038e6:	f005 fe0d 	bl	8009504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000270 	.word	0x20000270

080038f4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80038fc:	2180      	movs	r1, #128	; 0x80
 80038fe:	4803      	ldr	r0, [pc, #12]	; (800390c <HAL_UART_TxCpltCallback+0x18>)
 8003900:	f001 fddf 	bl	80054c2 <HAL_GPIO_TogglePin>
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40020000 	.word	0x40020000

08003910 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	4819      	ldr	r0, [pc, #100]	; (8003980 <HAL_UART_RxCpltCallback+0x70>)
 800391c:	f001 fdd1 	bl	80054c2 <HAL_GPIO_TogglePin>

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003920:	4b18      	ldr	r3, [pc, #96]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 8003922:	edd3 7a00 	vldr	s15, [r3]
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 8003928:	ed93 7a01 	vldr	s14, [r3, #4]
 800392c:	4b15      	ldr	r3, [pc, #84]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 800392e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 8003934:	ed93 6a03 	vldr	s12, [r3, #12]
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 800393a:	edd3 5a04 	vldr	s11, [r3, #16]
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 8003940:	ed93 5a05 	vldr	s10, [r3, #20]
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 8003946:	edd3 4a06 	vldr	s9, [r3, #24]
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 800394c:	edd3 3a07 	vldr	s7, [r3, #28]
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <HAL_UART_RxCpltCallback+0x74>)
 8003952:	ed93 4a08 	vldr	s8, [r3, #32]
 8003956:	eeb0 3a64 	vmov.f32	s6, s9
 800395a:	eef0 2a45 	vmov.f32	s5, s10
 800395e:	eeb0 2a65 	vmov.f32	s4, s11
 8003962:	eef0 1a46 	vmov.f32	s3, s12
 8003966:	eeb0 1a66 	vmov.f32	s2, s13
 800396a:	eef0 0a47 	vmov.f32	s1, s14
 800396e:	eeb0 0a67 	vmov.f32	s0, s15
 8003972:	f7fd fc35 	bl	80011e0 <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40020000 	.word	0x40020000
 8003984:	20000960 	.word	0x20000960

08003988 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4aa1      	ldr	r2, [pc, #644]	; (8003c1c <HAL_TIM_IC_CaptureCallback+0x294>)
 8003996:	4293      	cmp	r3, r2
 8003998:	f040 8132 	bne.w	8003c00 <HAL_TIM_IC_CaptureCallback+0x278>
    switch (htim->Channel) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7f1b      	ldrb	r3, [r3, #28]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	2b07      	cmp	r3, #7
 80039a4:	f200 80db 	bhi.w	8003b5e <HAL_TIM_IC_CaptureCallback+0x1d6>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <HAL_TIM_IC_CaptureCallback+0x28>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039d1 	.word	0x080039d1
 80039b4:	08003a39 	.word	0x08003a39
 80039b8:	08003b5f 	.word	0x08003b5f
 80039bc:	08003a9b 	.word	0x08003a9b
 80039c0:	08003b5f 	.word	0x08003b5f
 80039c4:	08003b5f 	.word	0x08003b5f
 80039c8:	08003b5f 	.word	0x08003b5f
 80039cc:	08003afd 	.word	0x08003afd
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 80039d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d4:	4892      	ldr	r0, [pc, #584]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 80039d6:	f001 fd43 	bl	8005460 <HAL_GPIO_ReadPin>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IC_CaptureCallback+0x68>
          pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80039e0:	2100      	movs	r1, #0
 80039e2:	4890      	ldr	r0, [pc, #576]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80039e4:	f006 f8bc 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b8e      	ldr	r3, [pc, #568]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 80039ee:	601a      	str	r2, [r3, #0]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80039f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039f4:	488a      	ldr	r0, [pc, #552]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 80039f6:	f001 fd33 	bl	8005460 <HAL_GPIO_ReadPin>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 80b0 	bne.w	8003b62 <HAL_TIM_IC_CaptureCallback+0x1da>
          pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003a02:	2100      	movs	r1, #0
 8003a04:	4887      	ldr	r0, [pc, #540]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8003a06:	f006 f8ab 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b86      	ldr	r3, [pc, #536]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a10:	605a      	str	r2, [r3, #4]
          int value = pwm_in[1] - pwm_in[0];
 8003a12:	4b85      	ldr	r3, [pc, #532]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4b84      	ldr	r3, [pc, #528]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
          if (value >= 200 && value < 400) {
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2bc7      	cmp	r3, #199	; 0xc7
 8003a22:	f340 809e 	ble.w	8003b62 <HAL_TIM_IC_CaptureCallback+0x1da>
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003a2c:	f280 8099 	bge.w	8003b62 <HAL_TIM_IC_CaptureCallback+0x1da>
            pwm_in[2] = value;
 8003a30:	4a7d      	ldr	r2, [pc, #500]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	6093      	str	r3, [r2, #8]
          }
        }
        break;
 8003a36:	e094      	b.n	8003b62 <HAL_TIM_IC_CaptureCallback+0x1da>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8003a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a3c:	4878      	ldr	r0, [pc, #480]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 8003a3e:	f001 fd0f 	bl	8005460 <HAL_GPIO_ReadPin>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IC_CaptureCallback+0xd0>
          pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003a48:	2104      	movs	r1, #4
 8003a4a:	4876      	ldr	r0, [pc, #472]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8003a4c:	f006 f888 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003a50:	4603      	mov	r3, r0
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b74      	ldr	r3, [pc, #464]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a56:	60da      	str	r2, [r3, #12]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a5c:	4870      	ldr	r0, [pc, #448]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 8003a5e:	f001 fcff 	bl	8005460 <HAL_GPIO_ReadPin>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d17e      	bne.n	8003b66 <HAL_TIM_IC_CaptureCallback+0x1de>
          pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003a68:	2104      	movs	r1, #4
 8003a6a:	486e      	ldr	r0, [pc, #440]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8003a6c:	f006 f878 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b6c      	ldr	r3, [pc, #432]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a76:	611a      	str	r2, [r3, #16]
          int value = pwm_in[4] - pwm_in[3];
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
          if (value >= 200 && value < 400) {
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	2bc7      	cmp	r3, #199	; 0xc7
 8003a88:	dd6d      	ble.n	8003b66 <HAL_TIM_IC_CaptureCallback+0x1de>
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003a90:	da69      	bge.n	8003b66 <HAL_TIM_IC_CaptureCallback+0x1de>
            pwm_in[5] = value;
 8003a92:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	6153      	str	r3, [r2, #20]
          }
        }
        break;
 8003a98:	e065      	b.n	8003b66 <HAL_TIM_IC_CaptureCallback+0x1de>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a9e:	4860      	ldr	r0, [pc, #384]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 8003aa0:	f001 fcde 	bl	8005460 <HAL_GPIO_ReadPin>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_TIM_IC_CaptureCallback+0x132>
          pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003aaa:	2108      	movs	r1, #8
 8003aac:	485d      	ldr	r0, [pc, #372]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8003aae:	f006 f857 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b5c      	ldr	r3, [pc, #368]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003ab8:	619a      	str	r2, [r3, #24]
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8003aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003abe:	4858      	ldr	r0, [pc, #352]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 8003ac0:	f001 fcce 	bl	8005460 <HAL_GPIO_ReadPin>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d14f      	bne.n	8003b6a <HAL_TIM_IC_CaptureCallback+0x1e2>
          pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003aca:	2108      	movs	r1, #8
 8003acc:	4855      	ldr	r0, [pc, #340]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8003ace:	f006 f847 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b54      	ldr	r3, [pc, #336]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003ad8:	61da      	str	r2, [r3, #28]
          int value = pwm_in[7] - pwm_in[6];
 8003ada:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	4b52      	ldr	r3, [pc, #328]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (value >= 200 && value < 400) {
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	2bc7      	cmp	r3, #199	; 0xc7
 8003aea:	dd3e      	ble.n	8003b6a <HAL_TIM_IC_CaptureCallback+0x1e2>
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003af2:	da3a      	bge.n	8003b6a <HAL_TIM_IC_CaptureCallback+0x1e2>
            pwm_in[8] = value;
 8003af4:	4a4c      	ldr	r2, [pc, #304]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	6213      	str	r3, [r2, #32]
          }
        }
        break;
 8003afa:	e036      	b.n	8003b6a <HAL_TIM_IC_CaptureCallback+0x1e2>
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8003afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b00:	4847      	ldr	r0, [pc, #284]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 8003b02:	f001 fcad 	bl	8005460 <HAL_GPIO_ReadPin>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IC_CaptureCallback+0x194>
          pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003b0c:	210c      	movs	r1, #12
 8003b0e:	4845      	ldr	r0, [pc, #276]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8003b10:	f006 f826 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8003b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b20:	483f      	ldr	r0, [pc, #252]	; (8003c20 <HAL_TIM_IC_CaptureCallback+0x298>)
 8003b22:	f001 fc9d 	bl	8005460 <HAL_GPIO_ReadPin>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d120      	bne.n	8003b6e <HAL_TIM_IC_CaptureCallback+0x1e6>
          pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8003b2c:	210c      	movs	r1, #12
 8003b2e:	483d      	ldr	r0, [pc, #244]	; (8003c24 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8003b30:	f006 f816 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
          int value = pwm_in[10] - pwm_in[9];
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b40:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30
          if (value >= 200 && value < 400) {
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	2bc7      	cmp	r3, #199	; 0xc7
 8003b4c:	dd0f      	ble.n	8003b6e <HAL_TIM_IC_CaptureCallback+0x1e6>
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003b54:	da0b      	bge.n	8003b6e <HAL_TIM_IC_CaptureCallback+0x1e6>
            pwm_in[11] = value;
 8003b56:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
          }
        }
        break;
 8003b5c:	e007      	b.n	8003b6e <HAL_TIM_IC_CaptureCallback+0x1e6>
      default:
        break;
 8003b5e:	bf00      	nop
 8003b60:	e006      	b.n	8003b70 <HAL_TIM_IC_CaptureCallback+0x1e8>
        break;
 8003b62:	bf00      	nop
 8003b64:	e004      	b.n	8003b70 <HAL_TIM_IC_CaptureCallback+0x1e8>
        break;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <HAL_TIM_IC_CaptureCallback+0x1e8>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <HAL_TIM_IC_CaptureCallback+0x1e8>
        break;
 8003b6e:	bf00      	nop
    }

    g_thrust = kalman_filter_update(&g_filters[0], pwm_in[5] - 300);
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b80:	eeb0 0a67 	vmov.f32	s0, s15
 8003b84:	4829      	ldr	r0, [pc, #164]	; (8003c2c <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8003b86:	f7fd f9fa 	bl	8000f7e <kalman_filter_update>
 8003b8a:	eef0 7a40 	vmov.f32	s15, s0
 8003b8e:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8003b90:	edc3 7a00 	vstr	s15, [r3]
    g_yaw = kalman_filter_update(&g_filters[1], pwm_in[2] - 300);
 8003b94:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba8:	4822      	ldr	r0, [pc, #136]	; (8003c34 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8003baa:	f7fd f9e8 	bl	8000f7e <kalman_filter_update>
 8003bae:	eef0 7a40 	vmov.f32	s15, s0
 8003bb2:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8003bb4:	edc3 7a00 	vstr	s15, [r3]
    g_pitch = kalman_filter_update(&g_filters[2], pwm_in[8] - 300);
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bcc:	481b      	ldr	r0, [pc, #108]	; (8003c3c <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8003bce:	f7fd f9d6 	bl	8000f7e <kalman_filter_update>
 8003bd2:	eef0 7a40 	vmov.f32	s15, s0
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003bd8:	edc3 7a00 	vstr	s15, [r3]
    g_roll = kalman_filter_update(&g_filters[3], pwm_in[11] - 300);
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bec:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf0:	4814      	ldr	r0, [pc, #80]	; (8003c44 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8003bf2:	f7fd f9c4 	bl	8000f7e <kalman_filter_update>
 8003bf6:	eef0 7a40 	vmov.f32	s15, s0
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8003bfc:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM9) {
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	f040 80a7 	bne.w	8003d5a <HAL_TIM_IC_CaptureCallback+0x3d2>
    switch (htim->Channel) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	7f1b      	ldrb	r3, [r3, #28]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d01d      	beq.n	8003c50 <HAL_TIM_IC_CaptureCallback+0x2c8>
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d04a      	beq.n	8003cae <HAL_TIM_IC_CaptureCallback+0x326>
            pwm_in[17] = value;
          }
        }
        break;
      default:
        break;
 8003c18:	e07b      	b.n	8003d12 <HAL_TIM_IC_CaptureCallback+0x38a>
 8003c1a:	bf00      	nop
 8003c1c:	40000800 	.word	0x40000800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	20000228 	.word	0x20000228
 8003c28:	200008ac 	.word	0x200008ac
 8003c2c:	20000344 	.word	0x20000344
 8003c30:	20000924 	.word	0x20000924
 8003c34:	2000035c 	.word	0x2000035c
 8003c38:	20000930 	.word	0x20000930
 8003c3c:	20000374 	.word	0x20000374
 8003c40:	20000928 	.word	0x20000928
 8003c44:	2000038c 	.word	0x2000038c
 8003c48:	2000092c 	.word	0x2000092c
 8003c4c:	40014000 	.word	0x40014000
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5) == GPIO_PIN_SET) {
 8003c50:	2120      	movs	r1, #32
 8003c52:	48a9      	ldr	r0, [pc, #676]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x570>)
 8003c54:	f001 fc04 	bl	8005460 <HAL_GPIO_ReadPin>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <HAL_TIM_IC_CaptureCallback+0x2e6>
          pwm_in[12] = HAL_TIM_ReadCapturedValue(&htim9, TIM_CHANNEL_1);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	48a6      	ldr	r0, [pc, #664]	; (8003efc <HAL_TIM_IC_CaptureCallback+0x574>)
 8003c62:	f005 ff7d 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4ba5      	ldr	r3, [pc, #660]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5) == GPIO_PIN_RESET) {
 8003c6e:	2120      	movs	r1, #32
 8003c70:	48a1      	ldr	r0, [pc, #644]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x570>)
 8003c72:	f001 fbf5 	bl	8005460 <HAL_GPIO_ReadPin>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d147      	bne.n	8003d0c <HAL_TIM_IC_CaptureCallback+0x384>
          pwm_in[13] = HAL_TIM_ReadCapturedValue(&htim9, TIM_CHANNEL_1);
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	489f      	ldr	r0, [pc, #636]	; (8003efc <HAL_TIM_IC_CaptureCallback+0x574>)
 8003c80:	f005 ff6e 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34
          int value = pwm_in[13] - pwm_in[12];
 8003c8c:	4b9c      	ldr	r3, [pc, #624]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c90:	4b9b      	ldr	r3, [pc, #620]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	61fb      	str	r3, [r7, #28]
          if (value >= 200 && value < 400) {
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2bc7      	cmp	r3, #199	; 0xc7
 8003c9c:	dd36      	ble.n	8003d0c <HAL_TIM_IC_CaptureCallback+0x384>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ca4:	da32      	bge.n	8003d0c <HAL_TIM_IC_CaptureCallback+0x384>
            pwm_in[14] = value;
 8003ca6:	4a96      	ldr	r2, [pc, #600]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	6393      	str	r3, [r2, #56]	; 0x38
        break;
 8003cac:	e02e      	b.n	8003d0c <HAL_TIM_IC_CaptureCallback+0x384>
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET) {
 8003cae:	2140      	movs	r1, #64	; 0x40
 8003cb0:	4891      	ldr	r0, [pc, #580]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x570>)
 8003cb2:	f001 fbd5 	bl	8005460 <HAL_GPIO_ReadPin>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IC_CaptureCallback+0x344>
          pwm_in[15] = HAL_TIM_ReadCapturedValue(&htim9, TIM_CHANNEL_2);
 8003cbc:	2104      	movs	r1, #4
 8003cbe:	488f      	ldr	r0, [pc, #572]	; (8003efc <HAL_TIM_IC_CaptureCallback+0x574>)
 8003cc0:	f005 ff4e 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_RESET) {
 8003ccc:	2140      	movs	r1, #64	; 0x40
 8003cce:	488a      	ldr	r0, [pc, #552]	; (8003ef8 <HAL_TIM_IC_CaptureCallback+0x570>)
 8003cd0:	f001 fbc6 	bl	8005460 <HAL_GPIO_ReadPin>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11a      	bne.n	8003d10 <HAL_TIM_IC_CaptureCallback+0x388>
          pwm_in[16] = HAL_TIM_ReadCapturedValue(&htim9, TIM_CHANNEL_2);
 8003cda:	2104      	movs	r1, #4
 8003cdc:	4887      	ldr	r0, [pc, #540]	; (8003efc <HAL_TIM_IC_CaptureCallback+0x574>)
 8003cde:	f005 ff3f 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b86      	ldr	r3, [pc, #536]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
          int value = pwm_in[16] - pwm_in[15];
 8003cea:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cee:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	623b      	str	r3, [r7, #32]
          if (value >= 200 && value < 400) {
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2bc7      	cmp	r3, #199	; 0xc7
 8003cfa:	dd09      	ble.n	8003d10 <HAL_TIM_IC_CaptureCallback+0x388>
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003d02:	da05      	bge.n	8003d10 <HAL_TIM_IC_CaptureCallback+0x388>
            pwm_in[17] = value;
 8003d04:	4a7e      	ldr	r2, [pc, #504]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	6453      	str	r3, [r2, #68]	; 0x44
        break;
 8003d0a:	e001      	b.n	8003d10 <HAL_TIM_IC_CaptureCallback+0x388>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e000      	b.n	8003d12 <HAL_TIM_IC_CaptureCallback+0x38a>
        break;
 8003d10:	bf00      	nop
    }

    g_tune1 = kalman_filter_update(&g_filters[4], pwm_in[17] - 300);
 8003d12:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d22:	eeb0 0a67 	vmov.f32	s0, s15
 8003d26:	4877      	ldr	r0, [pc, #476]	; (8003f04 <HAL_TIM_IC_CaptureCallback+0x57c>)
 8003d28:	f7fd f929 	bl	8000f7e <kalman_filter_update>
 8003d2c:	eef0 7a40 	vmov.f32	s15, s0
 8003d30:	4b75      	ldr	r3, [pc, #468]	; (8003f08 <HAL_TIM_IC_CaptureCallback+0x580>)
 8003d32:	edc3 7a00 	vstr	s15, [r3]
    g_tune2 = kalman_filter_update(&g_filters[5], pwm_in[14] - 300);
 8003d36:	4b72      	ldr	r3, [pc, #456]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d46:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4a:	4870      	ldr	r0, [pc, #448]	; (8003f0c <HAL_TIM_IC_CaptureCallback+0x584>)
 8003d4c:	f7fd f917 	bl	8000f7e <kalman_filter_update>
 8003d50:	eef0 7a40 	vmov.f32	s15, s0
 8003d54:	4b6e      	ldr	r3, [pc, #440]	; (8003f10 <HAL_TIM_IC_CaptureCallback+0x588>)
 8003d56:	edc3 7a00 	vstr	s15, [r3]
  }

  if (htim->Instance == TIM5) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6d      	ldr	r2, [pc, #436]	; (8003f14 <HAL_TIM_IC_CaptureCallback+0x58c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	f040 81ec 	bne.w	800413e <HAL_TIM_IC_CaptureCallback+0x7b6>
    switch (htim->Channel) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7f1b      	ldrb	r3, [r3, #28]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	2b07      	cmp	r3, #7
 8003d6e:	f200 810c 	bhi.w	8003f8a <HAL_TIM_IC_CaptureCallback+0x602>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d99 	.word	0x08003d99
 8003d7c:	08003e09 	.word	0x08003e09
 8003d80:	08003f8b 	.word	0x08003f8b
 8003d84:	08003e83 	.word	0x08003e83
 8003d88:	08003f8b 	.word	0x08003f8b
 8003d8c:	08003f8b 	.word	0x08003f8b
 8003d90:	08003f8b 	.word	0x08003f8b
 8003d94:	08003f21 	.word	0x08003f21
      case HAL_TIM_ACTIVE_CHANNEL_1:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8003d98:	2101      	movs	r1, #1
 8003d9a:	485f      	ldr	r0, [pc, #380]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x590>)
 8003d9c:	f001 fb60 	bl	8005460 <HAL_GPIO_ReadPin>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d107      	bne.n	8003db6 <HAL_TIM_IC_CaptureCallback+0x42e>
          pwm_in[18] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8003da6:	2100      	movs	r1, #0
 8003da8:	485c      	ldr	r0, [pc, #368]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x594>)
 8003daa:	f005 fed9 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003db4:	649a      	str	r2, [r3, #72]	; 0x48
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8003db6:	2101      	movs	r1, #1
 8003db8:	4857      	ldr	r0, [pc, #348]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x590>)
 8003dba:	f001 fb51 	bl	8005460 <HAL_GPIO_ReadPin>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 80e4 	bne.w	8003f8e <HAL_TIM_IC_CaptureCallback+0x606>
          pwm_in[19] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4854      	ldr	r0, [pc, #336]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x594>)
 8003dca:	f005 fec9 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003dd4:	64da      	str	r2, [r3, #76]	; 0x4c
          int value = pwm_in[19] - pwm_in[18];
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dda:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	60fb      	str	r3, [r7, #12]
          if (value >= 200 && value < 400) { // valid range [200, 400)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2bc7      	cmp	r3, #199	; 0xc7
 8003de6:	f340 80d2 	ble.w	8003f8e <HAL_TIM_IC_CaptureCallback+0x606>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003df0:	f280 80cd 	bge.w	8003f8e <HAL_TIM_IC_CaptureCallback+0x606>
            pwm_in[20] = value > 300 ? 2 : 1;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003dfa:	dd01      	ble.n	8003e00 <HAL_TIM_IC_CaptureCallback+0x478>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e000      	b.n	8003e02 <HAL_TIM_IC_CaptureCallback+0x47a>
 8003e00:	2301      	movs	r3, #1
 8003e02:	4a3f      	ldr	r2, [pc, #252]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003e04:	6513      	str	r3, [r2, #80]	; 0x50
          }
        }
        break;
 8003e06:	e0c2      	b.n	8003f8e <HAL_TIM_IC_CaptureCallback+0x606>
      case HAL_TIM_ACTIVE_CHANNEL_2:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) {
 8003e08:	2102      	movs	r1, #2
 8003e0a:	4843      	ldr	r0, [pc, #268]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x590>)
 8003e0c:	f001 fb28 	bl	8005460 <HAL_GPIO_ReadPin>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_TIM_IC_CaptureCallback+0x49e>
          pwm_in[21] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_2);
 8003e16:	2104      	movs	r1, #4
 8003e18:	4840      	ldr	r0, [pc, #256]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x594>)
 8003e1a:	f005 fea1 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8003e26:	2102      	movs	r1, #2
 8003e28:	483b      	ldr	r0, [pc, #236]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x590>)
 8003e2a:	f001 fb19 	bl	8005460 <HAL_GPIO_ReadPin>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 80ae 	bne.w	8003f92 <HAL_TIM_IC_CaptureCallback+0x60a>
          pwm_in[22] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_2);
 8003e36:	2104      	movs	r1, #4
 8003e38:	4838      	ldr	r0, [pc, #224]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x594>)
 8003e3a:	f005 fe91 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003e44:	659a      	str	r2, [r3, #88]	; 0x58
          int value = pwm_in[22] - pwm_in[21];
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	613b      	str	r3, [r7, #16]
          if (value >= 200 && value < 400) { // valid range [200, 400)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2bc7      	cmp	r3, #199	; 0xc7
 8003e56:	f340 809c 	ble.w	8003f92 <HAL_TIM_IC_CaptureCallback+0x60a>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e60:	f280 8097 	bge.w	8003f92 <HAL_TIM_IC_CaptureCallback+0x60a>
            pwm_in[23] = value < 250 ? 1 : (value > 350 ? 3 : 2);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2bf9      	cmp	r3, #249	; 0xf9
 8003e68:	dd07      	ble.n	8003e7a <HAL_TIM_IC_CaptureCallback+0x4f2>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003e70:	dd01      	ble.n	8003e76 <HAL_TIM_IC_CaptureCallback+0x4ee>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e002      	b.n	8003e7c <HAL_TIM_IC_CaptureCallback+0x4f4>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e000      	b.n	8003e7c <HAL_TIM_IC_CaptureCallback+0x4f4>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003e7e:	65d3      	str	r3, [r2, #92]	; 0x5c
          }
        }
        break;
 8003e80:	e087      	b.n	8003f92 <HAL_TIM_IC_CaptureCallback+0x60a>
      case HAL_TIM_ACTIVE_CHANNEL_3:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 8003e82:	2104      	movs	r1, #4
 8003e84:	4824      	ldr	r0, [pc, #144]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x590>)
 8003e86:	f001 faeb 	bl	8005460 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_IC_CaptureCallback+0x518>
          pwm_in[24] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 8003e90:	2108      	movs	r1, #8
 8003e92:	4822      	ldr	r0, [pc, #136]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x594>)
 8003e94:	f005 fe64 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003e9e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8003ea0:	2104      	movs	r1, #4
 8003ea2:	481d      	ldr	r0, [pc, #116]	; (8003f18 <HAL_TIM_IC_CaptureCallback+0x590>)
 8003ea4:	f001 fadc 	bl	8005460 <HAL_GPIO_ReadPin>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d173      	bne.n	8003f96 <HAL_TIM_IC_CaptureCallback+0x60e>
          pwm_in[25] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_3);
 8003eae:	2108      	movs	r1, #8
 8003eb0:	481a      	ldr	r0, [pc, #104]	; (8003f1c <HAL_TIM_IC_CaptureCallback+0x594>)
 8003eb2:	f005 fe55 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003ebc:	665a      	str	r2, [r3, #100]	; 0x64
          int value = pwm_in[25] - pwm_in[24];
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003ec0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]
          if (value >= 200 && value < 400) { // valid range [200, 400)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2bc7      	cmp	r3, #199	; 0xc7
 8003ece:	dd62      	ble.n	8003f96 <HAL_TIM_IC_CaptureCallback+0x60e>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ed6:	da5e      	bge.n	8003f96 <HAL_TIM_IC_CaptureCallback+0x60e>
            pwm_in[26] = value < 250 ? 1 : (value > 350 ? 3 : 2);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2bf9      	cmp	r3, #249	; 0xf9
 8003edc:	dd07      	ble.n	8003eee <HAL_TIM_IC_CaptureCallback+0x566>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003ee4:	dd01      	ble.n	8003eea <HAL_TIM_IC_CaptureCallback+0x562>
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e002      	b.n	8003ef0 <HAL_TIM_IC_CaptureCallback+0x568>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e000      	b.n	8003ef0 <HAL_TIM_IC_CaptureCallback+0x568>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <HAL_TIM_IC_CaptureCallback+0x578>)
 8003ef2:	6693      	str	r3, [r2, #104]	; 0x68
          }
        }
        break;
 8003ef4:	e04f      	b.n	8003f96 <HAL_TIM_IC_CaptureCallback+0x60e>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	200002b8 	.word	0x200002b8
 8003f00:	200008ac 	.word	0x200008ac
 8003f04:	200003a4 	.word	0x200003a4
 8003f08:	20000934 	.word	0x20000934
 8003f0c:	200003bc 	.word	0x200003bc
 8003f10:	20000938 	.word	0x20000938
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	20000270 	.word	0x20000270
      case HAL_TIM_ACTIVE_CHANNEL_4:
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 8003f20:	2108      	movs	r1, #8
 8003f22:	488a      	ldr	r0, [pc, #552]	; (800414c <HAL_TIM_IC_CaptureCallback+0x7c4>)
 8003f24:	f001 fa9c 	bl	8005460 <HAL_GPIO_ReadPin>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IC_CaptureCallback+0x5b6>
          pwm_in[27] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8003f2e:	210c      	movs	r1, #12
 8003f30:	4887      	ldr	r0, [pc, #540]	; (8004150 <HAL_TIM_IC_CaptureCallback+0x7c8>)
 8003f32:	f005 fe15 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b86      	ldr	r3, [pc, #536]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003f3c:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8003f3e:	2108      	movs	r1, #8
 8003f40:	4882      	ldr	r0, [pc, #520]	; (800414c <HAL_TIM_IC_CaptureCallback+0x7c4>)
 8003f42:	f001 fa8d 	bl	8005460 <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d126      	bne.n	8003f9a <HAL_TIM_IC_CaptureCallback+0x612>
          pwm_in[28] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 8003f4c:	210c      	movs	r1, #12
 8003f4e:	4880      	ldr	r0, [pc, #512]	; (8004150 <HAL_TIM_IC_CaptureCallback+0x7c8>)
 8003f50:	f005 fe06 	bl	8009b60 <HAL_TIM_ReadCapturedValue>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b7e      	ldr	r3, [pc, #504]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003f5a:	671a      	str	r2, [r3, #112]	; 0x70
          int value = pwm_in[28] - pwm_in[27];
 8003f5c:	4b7d      	ldr	r3, [pc, #500]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f60:	4b7c      	ldr	r3, [pc, #496]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	61bb      	str	r3, [r7, #24]
          if (value >= 200 && value < 400) { // valid range [200, 400)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2bc7      	cmp	r3, #199	; 0xc7
 8003f6c:	dd15      	ble.n	8003f9a <HAL_TIM_IC_CaptureCallback+0x612>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003f74:	da11      	bge.n	8003f9a <HAL_TIM_IC_CaptureCallback+0x612>
            pwm_in[29] = value > 300 ? 2 : 1;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f7c:	dd01      	ble.n	8003f82 <HAL_TIM_IC_CaptureCallback+0x5fa>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_IC_CaptureCallback+0x5fc>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4a73      	ldr	r2, [pc, #460]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003f86:	6753      	str	r3, [r2, #116]	; 0x74
          }
        }
        break;
 8003f88:	e007      	b.n	8003f9a <HAL_TIM_IC_CaptureCallback+0x612>
      default:
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e006      	b.n	8003f9c <HAL_TIM_IC_CaptureCallback+0x614>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e004      	b.n	8003f9c <HAL_TIM_IC_CaptureCallback+0x614>
        break;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <HAL_TIM_IC_CaptureCallback+0x614>
        break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_TIM_IC_CaptureCallback+0x614>
        break;
 8003f9a:	bf00      	nop
    }

    g_stick1 = pwm_in[20];
 8003f9c:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <HAL_TIM_IC_CaptureCallback+0x7d0>)
 8003fa4:	701a      	strb	r2, [r3, #0]
    g_stick2 = pwm_in[23];
 8003fa6:	4b6b      	ldr	r3, [pc, #428]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b6b      	ldr	r3, [pc, #428]	; (800415c <HAL_TIM_IC_CaptureCallback+0x7d4>)
 8003fae:	701a      	strb	r2, [r3, #0]
    g_stick3 = pwm_in[26];
 8003fb0:	4b68      	ldr	r3, [pc, #416]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_TIM_IC_CaptureCallback+0x7d8>)
 8003fb8:	701a      	strb	r2, [r3, #0]
    g_stick4 = pwm_in[29];
 8003fba:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x7cc>)
 8003fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_TIM_IC_CaptureCallback+0x7dc>)
 8003fc2:	701a      	strb	r2, [r3, #0]

    if (g_stick4 == 2) { // Tuning PID
 8003fc4:	4b67      	ldr	r3, [pc, #412]	; (8004164 <HAL_TIM_IC_CaptureCallback+0x7dc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f040 80b8 	bne.w	800413e <HAL_TIM_IC_CaptureCallback+0x7b6>
      float add = 0.0;
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
      if (g_stick3 != g_pid_tuning) {
 8003fd4:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_TIM_IC_CaptureCallback+0x7d8>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b63      	ldr	r3, [pc, #396]	; (8004168 <HAL_TIM_IC_CaptureCallback+0x7e0>)
 8003fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d00d      	beq.n	8004000 <HAL_TIM_IC_CaptureCallback+0x678>
        add = g_stick3 - 2; // -1, 0, 1
 8003fe4:	4b5e      	ldr	r3, [pc, #376]	; (8004160 <HAL_TIM_IC_CaptureCallback+0x7d8>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	3b02      	subs	r3, #2
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ff2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        g_pid_tuning = g_stick3;
 8003ff6:	4b5a      	ldr	r3, [pc, #360]	; (8004160 <HAL_TIM_IC_CaptureCallback+0x7d8>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b25a      	sxtb	r2, r3
 8003ffc:	4b5a      	ldr	r3, [pc, #360]	; (8004168 <HAL_TIM_IC_CaptureCallback+0x7e0>)
 8003ffe:	701a      	strb	r2, [r3, #0]
      }

      switch (g_stick2) {
 8004000:	4b56      	ldr	r3, [pc, #344]	; (800415c <HAL_TIM_IC_CaptureCallback+0x7d4>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d069      	beq.n	80040dc <HAL_TIM_IC_CaptureCallback+0x754>
 8004008:	2b03      	cmp	r3, #3
 800400a:	f300 809a 	bgt.w	8004142 <HAL_TIM_IC_CaptureCallback+0x7ba>
 800400e:	2b01      	cmp	r3, #1
 8004010:	d002      	beq.n	8004018 <HAL_TIM_IC_CaptureCallback+0x690>
 8004012:	2b02      	cmp	r3, #2
 8004014:	d031      	beq.n	800407a <HAL_TIM_IC_CaptureCallback+0x6f2>
          g_D_pitch_gain = limit(g_D_pitch_gain + add / 100, 0, 0.5);
          g_D_roll_gain = limit(g_D_roll_gain + add / 100, 0, 0.5);
//          g_D_yaw_gain = limit(g_D_yaw_gain + add / 1000, 0, 0.05);
          break;
        default:
          break;
 8004016:	e094      	b.n	8004142 <HAL_TIM_IC_CaptureCallback+0x7ba>
          g_P_pitch_gain = limit(g_P_pitch_gain + add / 10, 0, 5);
 8004018:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800401c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004020:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004024:	4b51      	ldr	r3, [pc, #324]	; (800416c <HAL_TIM_IC_CaptureCallback+0x7e4>)
 8004026:	edd3 7a00 	vldr	s15, [r3]
 800402a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402e:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8004032:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8004170 <HAL_TIM_IC_CaptureCallback+0x7e8>
 8004036:	eeb0 0a67 	vmov.f32	s0, s15
 800403a:	f7fe fca5 	bl	8002988 <limit>
 800403e:	eef0 7a40 	vmov.f32	s15, s0
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_TIM_IC_CaptureCallback+0x7e4>)
 8004044:	edc3 7a00 	vstr	s15, [r3]
          g_P_roll_gain = limit(g_P_roll_gain + add / 10, 0, 5);
 8004048:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800404c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004050:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004054:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x7ec>)
 8004056:	edd3 7a00 	vldr	s15, [r3]
 800405a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405e:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8004062:	eddf 0a43 	vldr	s1, [pc, #268]	; 8004170 <HAL_TIM_IC_CaptureCallback+0x7e8>
 8004066:	eeb0 0a67 	vmov.f32	s0, s15
 800406a:	f7fe fc8d 	bl	8002988 <limit>
 800406e:	eef0 7a40 	vmov.f32	s15, s0
 8004072:	4b40      	ldr	r3, [pc, #256]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x7ec>)
 8004074:	edc3 7a00 	vstr	s15, [r3]
          break;
 8004078:	e064      	b.n	8004144 <HAL_TIM_IC_CaptureCallback+0x7bc>
          g_I_pitch_period = limit(g_I_pitch_period + add / 100, 0, 0.5);
 800407a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800407e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004178 <HAL_TIM_IC_CaptureCallback+0x7f0>
 8004082:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004086:	4b3d      	ldr	r3, [pc, #244]	; (800417c <HAL_TIM_IC_CaptureCallback+0x7f4>)
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004090:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004094:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004170 <HAL_TIM_IC_CaptureCallback+0x7e8>
 8004098:	eeb0 0a67 	vmov.f32	s0, s15
 800409c:	f7fe fc74 	bl	8002988 <limit>
 80040a0:	eef0 7a40 	vmov.f32	s15, s0
 80040a4:	4b35      	ldr	r3, [pc, #212]	; (800417c <HAL_TIM_IC_CaptureCallback+0x7f4>)
 80040a6:	edc3 7a00 	vstr	s15, [r3]
          g_I_roll_period = limit(g_I_roll_period + add / 100, 0, 0.5);
 80040aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80040ae:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004178 <HAL_TIM_IC_CaptureCallback+0x7f0>
 80040b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_TIM_IC_CaptureCallback+0x7f8>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80040c4:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8004170 <HAL_TIM_IC_CaptureCallback+0x7e8>
 80040c8:	eeb0 0a67 	vmov.f32	s0, s15
 80040cc:	f7fe fc5c 	bl	8002988 <limit>
 80040d0:	eef0 7a40 	vmov.f32	s15, s0
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_TIM_IC_CaptureCallback+0x7f8>)
 80040d6:	edc3 7a00 	vstr	s15, [r3]
          break;
 80040da:	e033      	b.n	8004144 <HAL_TIM_IC_CaptureCallback+0x7bc>
          g_D_pitch_gain = limit(g_D_pitch_gain + add / 100, 0, 0.5);
 80040dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80040e0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004178 <HAL_TIM_IC_CaptureCallback+0x7f0>
 80040e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040e8:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_TIM_IC_CaptureCallback+0x7fc>)
 80040ea:	edd3 7a00 	vldr	s15, [r3]
 80040ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80040f6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8004170 <HAL_TIM_IC_CaptureCallback+0x7e8>
 80040fa:	eeb0 0a67 	vmov.f32	s0, s15
 80040fe:	f7fe fc43 	bl	8002988 <limit>
 8004102:	eef0 7a40 	vmov.f32	s15, s0
 8004106:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <HAL_TIM_IC_CaptureCallback+0x7fc>)
 8004108:	edc3 7a00 	vstr	s15, [r3]
          g_D_roll_gain = limit(g_D_roll_gain + add / 100, 0, 0.5);
 800410c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004110:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004178 <HAL_TIM_IC_CaptureCallback+0x7f0>
 8004114:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_TIM_IC_CaptureCallback+0x800>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004122:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004126:	eddf 0a12 	vldr	s1, [pc, #72]	; 8004170 <HAL_TIM_IC_CaptureCallback+0x7e8>
 800412a:	eeb0 0a67 	vmov.f32	s0, s15
 800412e:	f7fe fc2b 	bl	8002988 <limit>
 8004132:	eef0 7a40 	vmov.f32	s15, s0
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_TIM_IC_CaptureCallback+0x800>)
 8004138:	edc3 7a00 	vstr	s15, [r3]
          break;
 800413c:	e002      	b.n	8004144 <HAL_TIM_IC_CaptureCallback+0x7bc>
      }
    }
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_TIM_IC_CaptureCallback+0x7bc>
          break;
 8004142:	bf00      	nop
  monitor[5] = g_I_yaw_period;
  monitor[6] = g_D_pitch_gain;
  monitor[7] = g_D_roll_gain;
  monitor[8] = g_D_yaw_gain;
#endif
}
 8004144:	bf00      	nop
 8004146:	3738      	adds	r7, #56	; 0x38
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40020000 	.word	0x40020000
 8004150:	20000270 	.word	0x20000270
 8004154:	200008ac 	.word	0x200008ac
 8004158:	2000093c 	.word	0x2000093c
 800415c:	2000093d 	.word	0x2000093d
 8004160:	2000093e 	.word	0x2000093e
 8004164:	2000093f 	.word	0x2000093f
 8004168:	20000010 	.word	0x20000010
 800416c:	20000000 	.word	0x20000000
 8004170:	00000000 	.word	0x00000000
 8004174:	20000008 	.word	0x20000008
 8004178:	42c80000 	.word	0x42c80000
 800417c:	20000944 	.word	0x20000944
 8004180:	2000094c 	.word	0x2000094c
 8004184:	20000004 	.word	0x20000004
 8004188:	2000000c 	.word	0x2000000c

0800418c <fly>:

void fly() {
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
  // Update from sensors
  MPU6050_update(&g_mpu6050);
 8004192:	488d      	ldr	r0, [pc, #564]	; (80043c8 <fly+0x23c>)
 8004194:	f7fe fab0 	bl	80026f8 <MPU6050_update>
  MS5611_update(&g_ms5611);
 8004198:	488c      	ldr	r0, [pc, #560]	; (80043cc <fly+0x240>)
 800419a:	f7fe fff7 	bl	800318c <MS5611_update>

  float angle_x = g_mpu6050.angle_x;
 800419e:	4b8a      	ldr	r3, [pc, #552]	; (80043c8 <fly+0x23c>)
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	61fb      	str	r3, [r7, #28]
  float angle_y = g_mpu6050.angle_y;
 80041a4:	4b88      	ldr	r3, [pc, #544]	; (80043c8 <fly+0x23c>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	61bb      	str	r3, [r7, #24]
  float angle_z = g_mpu6050.angle_z;
 80041aa:	4b87      	ldr	r3, [pc, #540]	; (80043c8 <fly+0x23c>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	617b      	str	r3, [r7, #20]
  float gyro_x = g_mpu6050.gx;
 80041b0:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <fly+0x23c>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	613b      	str	r3, [r7, #16]
  float gyro_y = g_mpu6050.gy;
 80041b6:	4b84      	ldr	r3, [pc, #528]	; (80043c8 <fly+0x23c>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	60fb      	str	r3, [r7, #12]
  float gyro_z = g_mpu6050.gz;
 80041bc:	4b82      	ldr	r3, [pc, #520]	; (80043c8 <fly+0x23c>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	60bb      	str	r3, [r7, #8]

  // Add remote control bias
  angle_y -= 0.5*g_pitch;
 80041c2:	69b8      	ldr	r0, [r7, #24]
 80041c4:	f7fc f9c0 	bl	8000548 <__aeabi_f2d>
 80041c8:	4604      	mov	r4, r0
 80041ca:	460d      	mov	r5, r1
 80041cc:	4b80      	ldr	r3, [pc, #512]	; (80043d0 <fly+0x244>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f9b9 	bl	8000548 <__aeabi_f2d>
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <fly+0x248>)
 80041dc:	f7fc fa0c 	bl	80005f8 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4620      	mov	r0, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fc f84e 	bl	8000288 <__aeabi_dsub>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	f7fc fcd8 	bl	8000ba8 <__aeabi_d2f>
 80041f8:	4603      	mov	r3, r0
 80041fa:	61bb      	str	r3, [r7, #24]
  angle_x -= 0.5*g_roll;
 80041fc:	69f8      	ldr	r0, [r7, #28]
 80041fe:	f7fc f9a3 	bl	8000548 <__aeabi_f2d>
 8004202:	4604      	mov	r4, r0
 8004204:	460d      	mov	r5, r1
 8004206:	4b74      	ldr	r3, [pc, #464]	; (80043d8 <fly+0x24c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f99c 	bl	8000548 <__aeabi_f2d>
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	4b6f      	ldr	r3, [pc, #444]	; (80043d4 <fly+0x248>)
 8004216:	f7fc f9ef 	bl	80005f8 <__aeabi_dmul>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	f7fc f831 	bl	8000288 <__aeabi_dsub>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	f7fc fcbb 	bl	8000ba8 <__aeabi_d2f>
 8004232:	4603      	mov	r3, r0
 8004234:	61fb      	str	r3, [r7, #28]
  angle_z -= 0.0*g_yaw;
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7fc f986 	bl	8000548 <__aeabi_f2d>
 800423c:	4604      	mov	r4, r0
 800423e:	460d      	mov	r5, r1
 8004240:	4b66      	ldr	r3, [pc, #408]	; (80043dc <fly+0x250>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc f97f 	bl	8000548 <__aeabi_f2d>
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f7fc f9d1 	bl	80005f8 <__aeabi_dmul>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4620      	mov	r0, r4
 800425c:	4629      	mov	r1, r5
 800425e:	f7fc f813 	bl	8000288 <__aeabi_dsub>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	f7fc fc9d 	bl	8000ba8 <__aeabi_d2f>
 800426e:	4603      	mov	r3, r0
 8004270:	617b      	str	r3, [r7, #20]

  // Keep alive for the fly
  if (g_stick1 != 2) {
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <fly+0x254>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d002      	beq.n	8004280 <fly+0xf4>
    fly_mode = init;
 800427a:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <fly+0x258>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 8004280:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <fly+0x258>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b05      	cmp	r3, #5
 8004286:	f200 8469 	bhi.w	8004b5c <fly+0x9d0>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <fly+0x104>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a9 	.word	0x080042a9
 8004294:	08004373 	.word	0x08004373
 8004298:	080043b9 	.word	0x080043b9
 800429c:	08004439 	.word	0x08004439
 80042a0:	08004a53 	.word	0x08004a53
 80042a4:	08004a61 	.word	0x08004a61
    case init:
      g_P_pitch_gain = P_PITCH_GAIN;
 80042a8:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <fly+0x25c>)
 80042aa:	4a50      	ldr	r2, [pc, #320]	; (80043ec <fly+0x260>)
 80042ac:	601a      	str	r2, [r3, #0]
      g_I_pitch_gain = I_PITCH_GAIN;
 80042ae:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <fly+0x264>)
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
      g_I_pitch_period = I_PITCH_PERIOD;
 80042b6:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <fly+0x268>)
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
      g_D_pitch_gain = D_PITCH_GAIN;
 80042be:	4b4e      	ldr	r3, [pc, #312]	; (80043f8 <fly+0x26c>)
 80042c0:	4a4e      	ldr	r2, [pc, #312]	; (80043fc <fly+0x270>)
 80042c2:	601a      	str	r2, [r3, #0]
      g_P_roll_gain = P_ROLL_GAIN;
 80042c4:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <fly+0x274>)
 80042c6:	4a49      	ldr	r2, [pc, #292]	; (80043ec <fly+0x260>)
 80042c8:	601a      	str	r2, [r3, #0]
      g_I_roll_gain = I_ROLL_GAIN;
 80042ca:	4b4e      	ldr	r3, [pc, #312]	; (8004404 <fly+0x278>)
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
      g_I_roll_period = I_ROLL_PERIOD;
 80042d2:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <fly+0x27c>)
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
      g_D_roll_gain = D_ROLL_GAIN;
 80042da:	4b4c      	ldr	r3, [pc, #304]	; (800440c <fly+0x280>)
 80042dc:	4a47      	ldr	r2, [pc, #284]	; (80043fc <fly+0x270>)
 80042de:	601a      	str	r2, [r3, #0]
      g_P_yaw_gain = P_YAW_GAIN;
 80042e0:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <fly+0x284>)
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
      g_I_yaw_gain = I_YAW_GAIN;
 80042e8:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <fly+0x288>)
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
      g_I_yaw_period = I_YAW_PERIOD;
 80042f0:	4b49      	ldr	r3, [pc, #292]	; (8004418 <fly+0x28c>)
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
      g_D_yaw_gain = D_YAW_GAIN;
 80042f8:	4b48      	ldr	r3, [pc, #288]	; (800441c <fly+0x290>)
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8004300:	2364      	movs	r3, #100	; 0x64
 8004302:	2264      	movs	r2, #100	; 0x64
 8004304:	2164      	movs	r1, #100	; 0x64
 8004306:	2064      	movs	r0, #100	; 0x64
 8004308:	f7ff fa62 	bl	80037d0 <set_speed>

      // Move sticks to make it ready to take off
      if (g_thrust <= -99 && g_yaw <= -99
 800430c:	4b44      	ldr	r3, [pc, #272]	; (8004420 <fly+0x294>)
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004424 <fly+0x298>
 8004316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431e:	d901      	bls.n	8004324 <fly+0x198>
          && g_pitch <= -99 && g_roll >= 98) {
        fly_mode = ready;
      }

      break;
 8004320:	f000 bc1c 	b.w	8004b5c <fly+0x9d0>
      if (g_thrust <= -99 && g_yaw <= -99
 8004324:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <fly+0x250>)
 8004326:	edd3 7a00 	vldr	s15, [r3]
 800432a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004424 <fly+0x298>
 800432e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004336:	d901      	bls.n	800433c <fly+0x1b0>
      break;
 8004338:	f000 bc10 	b.w	8004b5c <fly+0x9d0>
          && g_pitch <= -99 && g_roll >= 98) {
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <fly+0x244>)
 800433e:	edd3 7a00 	vldr	s15, [r3]
 8004342:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004424 <fly+0x298>
 8004346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	d901      	bls.n	8004354 <fly+0x1c8>
      break;
 8004350:	f000 bc04 	b.w	8004b5c <fly+0x9d0>
          && g_pitch <= -99 && g_roll >= 98) {
 8004354:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <fly+0x24c>)
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004428 <fly+0x29c>
 800435e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	da00      	bge.n	800436a <fly+0x1de>
      break;
 8004368:	e3f8      	b.n	8004b5c <fly+0x9d0>
        fly_mode = ready;
 800436a:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <fly+0x258>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
      break;
 8004370:	e3f4      	b.n	8004b5c <fly+0x9d0>
    case ready:
      // Reset accumulated integral
      g_I_pitch_accumulated = 0;
 8004372:	4b2e      	ldr	r3, [pc, #184]	; (800442c <fly+0x2a0>)
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 800437a:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <fly+0x2a4>)
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <fly+0x2a8>)
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

      set_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800438a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800438e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004392:	f44f 710c 	mov.w	r1, #560	; 0x230
 8004396:	f44f 700c 	mov.w	r0, #560	; 0x230
 800439a:	f7ff fa19 	bl	80037d0 <set_speed>

      // Switch to fly mode
      if (g_thrust > 0) {
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <fly+0x294>)
 80043a0:	edd3 7a00 	vldr	s15, [r3]
 80043a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ac:	dc00      	bgt.n	80043b0 <fly+0x224>
        fly_mode = moving;
      }

      break;
 80043ae:	e3d5      	b.n	8004b5c <fly+0x9d0>
        fly_mode = moving;
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <fly+0x258>)
 80043b2:	2203      	movs	r2, #3
 80043b4:	701a      	strb	r2, [r3, #0]
      break;
 80043b6:	e3d1      	b.n	8004b5c <fly+0x9d0>
    case holding:
      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80043b8:	2364      	movs	r3, #100	; 0x64
 80043ba:	2264      	movs	r2, #100	; 0x64
 80043bc:	2164      	movs	r1, #100	; 0x64
 80043be:	2064      	movs	r0, #100	; 0x64
 80043c0:	f7ff fa06 	bl	80037d0 <set_speed>
      break;
 80043c4:	e3ca      	b.n	8004b5c <fly+0x9d0>
 80043c6:	bf00      	nop
 80043c8:	20000434 	.word	0x20000434
 80043cc:	20000538 	.word	0x20000538
 80043d0:	20000928 	.word	0x20000928
 80043d4:	3fe00000 	.word	0x3fe00000
 80043d8:	2000092c 	.word	0x2000092c
 80043dc:	20000930 	.word	0x20000930
 80043e0:	2000093c 	.word	0x2000093c
 80043e4:	20000868 	.word	0x20000868
 80043e8:	20000000 	.word	0x20000000
 80043ec:	3f99999a 	.word	0x3f99999a
 80043f0:	20000940 	.word	0x20000940
 80043f4:	20000944 	.word	0x20000944
 80043f8:	20000004 	.word	0x20000004
 80043fc:	3ecccccd 	.word	0x3ecccccd
 8004400:	20000008 	.word	0x20000008
 8004404:	20000948 	.word	0x20000948
 8004408:	2000094c 	.word	0x2000094c
 800440c:	2000000c 	.word	0x2000000c
 8004410:	20000950 	.word	0x20000950
 8004414:	20000954 	.word	0x20000954
 8004418:	20000958 	.word	0x20000958
 800441c:	2000095c 	.word	0x2000095c
 8004420:	20000924 	.word	0x20000924
 8004424:	c2c60000 	.word	0xc2c60000
 8004428:	42c40000 	.word	0x42c40000
 800442c:	20000874 	.word	0x20000874
 8004430:	20000884 	.word	0x20000884
 8004434:	20000894 	.word	0x20000894
    case moving:
      g_P_pitch = limit(angle_y*g_P_pitch_gain, MIN_PITCH_PROPORTION, MAX_PITCH_PROPORTION);
 8004438:	4bd8      	ldr	r3, [pc, #864]	; (800479c <fly+0x610>)
 800443a:	ed93 7a00 	vldr	s14, [r3]
 800443e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	ed9f 1ad6 	vldr	s2, [pc, #856]	; 80047a0 <fly+0x614>
 800444a:	eddf 0ad6 	vldr	s1, [pc, #856]	; 80047a4 <fly+0x618>
 800444e:	eeb0 0a67 	vmov.f32	s0, s15
 8004452:	f7fe fa99 	bl	8002988 <limit>
 8004456:	eef0 7a40 	vmov.f32	s15, s0
 800445a:	4bd3      	ldr	r3, [pc, #844]	; (80047a8 <fly+0x61c>)
 800445c:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_y*I_PITCH_PERIOD; // 0.005 = 1/FREQ
 8004460:	4bd2      	ldr	r3, [pc, #840]	; (80047ac <fly+0x620>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc f86f 	bl	8000548 <__aeabi_f2d>
 800446a:	4604      	mov	r4, r0
 800446c:	460d      	mov	r5, r1
 800446e:	69b8      	ldr	r0, [r7, #24]
 8004470:	f7fc f86a 	bl	8000548 <__aeabi_f2d>
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	f7fc f8bc 	bl	80005f8 <__aeabi_dmul>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4620      	mov	r0, r4
 8004486:	4629      	mov	r1, r5
 8004488:	f7fb ff00 	bl	800028c <__adddf3>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	f7fc fb88 	bl	8000ba8 <__aeabi_d2f>
 8004498:	4603      	mov	r3, r0
 800449a:	4ac4      	ldr	r2, [pc, #784]	; (80047ac <fly+0x620>)
 800449c:	6013      	str	r3, [r2, #0]
      g_I_pitch_accumulated = limit(g_I_pitch_accumulated, MIN_PITCH_INTEGRAL/g_I_pitch_gain, MAX_PITCH_INTEGRAL/g_I_pitch_gain);
 800449e:	4bc3      	ldr	r3, [pc, #780]	; (80047ac <fly+0x620>)
 80044a0:	ed93 7a00 	vldr	s14, [r3]
 80044a4:	4bc2      	ldr	r3, [pc, #776]	; (80047b0 <fly+0x624>)
 80044a6:	edd3 7a00 	vldr	s15, [r3]
 80044aa:	eebb 6a02 	vmov.f32	s12, #178	; 0xc1900000 -18.0
 80044ae:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80044b2:	4bbf      	ldr	r3, [pc, #764]	; (80047b0 <fly+0x624>)
 80044b4:	edd3 7a00 	vldr	s15, [r3]
 80044b8:	eef3 5a02 	vmov.f32	s11, #50	; 0x41900000  18.0
 80044bc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80044c0:	eeb0 1a46 	vmov.f32	s2, s12
 80044c4:	eef0 0a66 	vmov.f32	s1, s13
 80044c8:	eeb0 0a47 	vmov.f32	s0, s14
 80044cc:	f7fe fa5c 	bl	8002988 <limit>
 80044d0:	eef0 7a40 	vmov.f32	s15, s0
 80044d4:	4bb5      	ldr	r3, [pc, #724]	; (80047ac <fly+0x620>)
 80044d6:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch = g_I_pitch_accumulated*g_I_pitch_gain;
 80044da:	4bb4      	ldr	r3, [pc, #720]	; (80047ac <fly+0x620>)
 80044dc:	ed93 7a00 	vldr	s14, [r3]
 80044e0:	4bb3      	ldr	r3, [pc, #716]	; (80047b0 <fly+0x624>)
 80044e2:	edd3 7a00 	vldr	s15, [r3]
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	4bb2      	ldr	r3, [pc, #712]	; (80047b4 <fly+0x628>)
 80044ec:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = limit(gyro_x*g_D_pitch_gain, MIN_PITCH_DERIVATION, MAX_PITCH_DERIVATION);
 80044f0:	4bb1      	ldr	r3, [pc, #708]	; (80047b8 <fly+0x62c>)
 80044f2:	ed93 7a00 	vldr	s14, [r3]
 80044f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 80047bc <fly+0x630>
 8004502:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80047c0 <fly+0x634>
 8004506:	eeb0 0a67 	vmov.f32	s0, s15
 800450a:	f7fe fa3d 	bl	8002988 <limit>
 800450e:	eef0 7a40 	vmov.f32	s15, s0
 8004512:	4bac      	ldr	r3, [pc, #688]	; (80047c4 <fly+0x638>)
 8004514:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = limit(angle_x*g_P_roll_gain, MIN_ROLL_PROPORTION, MAX_ROLL_PROPORTION);
 8004518:	4bab      	ldr	r3, [pc, #684]	; (80047c8 <fly+0x63c>)
 800451a:	ed93 7a00 	vldr	s14, [r3]
 800451e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 80047a0 <fly+0x614>
 800452a:	eddf 0a9e 	vldr	s1, [pc, #632]	; 80047a4 <fly+0x618>
 800452e:	eeb0 0a67 	vmov.f32	s0, s15
 8004532:	f7fe fa29 	bl	8002988 <limit>
 8004536:	eef0 7a40 	vmov.f32	s15, s0
 800453a:	4ba4      	ldr	r3, [pc, #656]	; (80047cc <fly+0x640>)
 800453c:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_x*I_ROLL_PERIOD;
 8004540:	4ba3      	ldr	r3, [pc, #652]	; (80047d0 <fly+0x644>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fb ffff 	bl	8000548 <__aeabi_f2d>
 800454a:	4604      	mov	r4, r0
 800454c:	460d      	mov	r5, r1
 800454e:	69f8      	ldr	r0, [r7, #28]
 8004550:	f7fb fffa 	bl	8000548 <__aeabi_f2d>
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	f7fc f84c 	bl	80005f8 <__aeabi_dmul>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4620      	mov	r0, r4
 8004566:	4629      	mov	r1, r5
 8004568:	f7fb fe90 	bl	800028c <__adddf3>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	f7fc fb18 	bl	8000ba8 <__aeabi_d2f>
 8004578:	4603      	mov	r3, r0
 800457a:	4a95      	ldr	r2, [pc, #596]	; (80047d0 <fly+0x644>)
 800457c:	6013      	str	r3, [r2, #0]
      g_I_roll_accumulated = limit(g_I_roll_accumulated, MIN_ROLL_INTEGRAL/g_I_roll_gain, MAX_ROLL_INTEGRAL/g_I_roll_gain);
 800457e:	4b94      	ldr	r3, [pc, #592]	; (80047d0 <fly+0x644>)
 8004580:	ed93 7a00 	vldr	s14, [r3]
 8004584:	4b93      	ldr	r3, [pc, #588]	; (80047d4 <fly+0x648>)
 8004586:	edd3 7a00 	vldr	s15, [r3]
 800458a:	eebb 6a02 	vmov.f32	s12, #178	; 0xc1900000 -18.0
 800458e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004592:	4b90      	ldr	r3, [pc, #576]	; (80047d4 <fly+0x648>)
 8004594:	edd3 7a00 	vldr	s15, [r3]
 8004598:	eef3 5a02 	vmov.f32	s11, #50	; 0x41900000  18.0
 800459c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80045a0:	eeb0 1a46 	vmov.f32	s2, s12
 80045a4:	eef0 0a66 	vmov.f32	s1, s13
 80045a8:	eeb0 0a47 	vmov.f32	s0, s14
 80045ac:	f7fe f9ec 	bl	8002988 <limit>
 80045b0:	eef0 7a40 	vmov.f32	s15, s0
 80045b4:	4b86      	ldr	r3, [pc, #536]	; (80047d0 <fly+0x644>)
 80045b6:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll = g_I_roll_accumulated*g_I_roll_gain;
 80045ba:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <fly+0x644>)
 80045bc:	ed93 7a00 	vldr	s14, [r3]
 80045c0:	4b84      	ldr	r3, [pc, #528]	; (80047d4 <fly+0x648>)
 80045c2:	edd3 7a00 	vldr	s15, [r3]
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	4b83      	ldr	r3, [pc, #524]	; (80047d8 <fly+0x64c>)
 80045cc:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = limit(gyro_y*g_D_roll_gain, MIN_ROLL_DERIVATION, MAX_ROLL_DERIVATION);
 80045d0:	4b82      	ldr	r3, [pc, #520]	; (80047dc <fly+0x650>)
 80045d2:	ed93 7a00 	vldr	s14, [r3]
 80045d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	ed9f 1a77 	vldr	s2, [pc, #476]	; 80047bc <fly+0x630>
 80045e2:	eddf 0a77 	vldr	s1, [pc, #476]	; 80047c0 <fly+0x634>
 80045e6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ea:	f7fe f9cd 	bl	8002988 <limit>
 80045ee:	eef0 7a40 	vmov.f32	s15, s0
 80045f2:	4b7b      	ldr	r3, [pc, #492]	; (80047e0 <fly+0x654>)
 80045f4:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = limit(angle_z*g_P_yaw_gain, MIN_YAW_PROPORTION, MAX_YAW_PROPORTION);
 80045f8:	4b7a      	ldr	r3, [pc, #488]	; (80047e4 <fly+0x658>)
 80045fa:	ed93 7a00 	vldr	s14, [r3]
 80045fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
 800460a:	eefa 0a02 	vmov.f32	s1, #162	; 0xc1100000 -9.0
 800460e:	eeb0 0a67 	vmov.f32	s0, s15
 8004612:	f7fe f9b9 	bl	8002988 <limit>
 8004616:	eef0 7a40 	vmov.f32	s15, s0
 800461a:	4b73      	ldr	r3, [pc, #460]	; (80047e8 <fly+0x65c>)
 800461c:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_z*I_YAW_PERIOD;
 8004620:	4b72      	ldr	r3, [pc, #456]	; (80047ec <fly+0x660>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb ff8f 	bl	8000548 <__aeabi_f2d>
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f7fb ff8a 	bl	8000548 <__aeabi_f2d>
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	f7fb ffdc 	bl	80005f8 <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fb fe20 	bl	800028c <__adddf3>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	f7fc faa8 	bl	8000ba8 <__aeabi_d2f>
 8004658:	4603      	mov	r3, r0
 800465a:	4a64      	ldr	r2, [pc, #400]	; (80047ec <fly+0x660>)
 800465c:	6013      	str	r3, [r2, #0]
      g_I_yaw_accumulated = limit(g_I_yaw_accumulated, MIN_YAW_INTEGRAL/g_I_yaw_gain, MAX_YAW_INTEGRAL/g_I_yaw_gain);
 800465e:	4b63      	ldr	r3, [pc, #396]	; (80047ec <fly+0x660>)
 8004660:	ed93 7a00 	vldr	s14, [r3]
 8004664:	4b62      	ldr	r3, [pc, #392]	; (80047f0 <fly+0x664>)
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	eeba 6a02 	vmov.f32	s12, #162	; 0xc1100000 -9.0
 800466e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004672:	4b5f      	ldr	r3, [pc, #380]	; (80047f0 <fly+0x664>)
 8004674:	edd3 7a00 	vldr	s15, [r3]
 8004678:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
 800467c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8004680:	eeb0 1a46 	vmov.f32	s2, s12
 8004684:	eef0 0a66 	vmov.f32	s1, s13
 8004688:	eeb0 0a47 	vmov.f32	s0, s14
 800468c:	f7fe f97c 	bl	8002988 <limit>
 8004690:	eef0 7a40 	vmov.f32	s15, s0
 8004694:	4b55      	ldr	r3, [pc, #340]	; (80047ec <fly+0x660>)
 8004696:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw = g_I_yaw_accumulated*g_I_yaw_gain;
 800469a:	4b54      	ldr	r3, [pc, #336]	; (80047ec <fly+0x660>)
 800469c:	ed93 7a00 	vldr	s14, [r3]
 80046a0:	4b53      	ldr	r3, [pc, #332]	; (80047f0 <fly+0x664>)
 80046a2:	edd3 7a00 	vldr	s15, [r3]
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <fly+0x668>)
 80046ac:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = limit(gyro_z*g_D_yaw_gain, MIN_YAW_DERIVATION, MAX_YAW_DERIVATION);
 80046b0:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <fly+0x66c>)
 80046b2:	ed93 7a00 	vldr	s14, [r3]
 80046b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
 80046c2:	eefa 0a02 	vmov.f32	s1, #162	; 0xc1100000 -9.0
 80046c6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ca:	f7fe f95d 	bl	8002988 <limit>
 80046ce:	eef0 7a40 	vmov.f32	s15, s0
 80046d2:	4b4a      	ldr	r3, [pc, #296]	; (80047fc <fly+0x670>)
 80046d4:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + (int)(20.0f*sqrt(g_thrust));
 80046d8:	4b49      	ldr	r3, [pc, #292]	; (8004800 <fly+0x674>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fb ff33 	bl	8000548 <__aeabi_f2d>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	ec43 2b10 	vmov	d0, r2, r3
 80046ea:	f007 fd11 	bl	800c110 <sqrt>
 80046ee:	ec51 0b10 	vmov	r0, r1, d0
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	4b43      	ldr	r3, [pc, #268]	; (8004804 <fly+0x678>)
 80046f8:	f7fb ff7e 	bl	80005f8 <__aeabi_dmul>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	f7fc fa28 	bl	8000b58 <__aeabi_d2iz>
 8004708:	4603      	mov	r3, r0
 800470a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800470e:	607b      	str	r3, [r7, #4]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800471a:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <fly+0x61c>)
 800471c:	edd3 6a00 	vldr	s13, [r3]
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <fly+0x628>)
 8004722:	edd3 7a00 	vldr	s15, [r3]
 8004726:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800472a:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <fly+0x638>)
 800472c:	edd3 7a00 	vldr	s15, [r3]
 8004730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004738:	4b24      	ldr	r3, [pc, #144]	; (80047cc <fly+0x640>)
 800473a:	edd3 6a00 	vldr	s13, [r3]
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <fly+0x64c>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <fly+0x654>)
 800474a:	edd3 7a00 	vldr	s15, [r3]
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <fly+0x65c>)
 8004758:	edd3 6a00 	vldr	s13, [r3]
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <fly+0x668>)
 800475e:	edd3 7a00 	vldr	s15, [r3]
 8004762:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004766:	4b25      	ldr	r3, [pc, #148]	; (80047fc <fly+0x670>)
 8004768:	edd3 7a00 	vldr	s15, [r3]
 800476c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <fly+0x67c>)
 8004776:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <fly+0x61c>)
 8004786:	edd3 6a00 	vldr	s13, [r3]
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <fly+0x628>)
 800478c:	edd3 7a00 	vldr	s15, [r3]
 8004790:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <fly+0x638>)
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	e037      	b.n	800480c <fly+0x680>
 800479c:	20000000 	.word	0x20000000
 80047a0:	42340000 	.word	0x42340000
 80047a4:	c2340000 	.word	0xc2340000
 80047a8:	2000086c 	.word	0x2000086c
 80047ac:	20000874 	.word	0x20000874
 80047b0:	20000940 	.word	0x20000940
 80047b4:	20000870 	.word	0x20000870
 80047b8:	20000004 	.word	0x20000004
 80047bc:	42b40000 	.word	0x42b40000
 80047c0:	c2b40000 	.word	0xc2b40000
 80047c4:	20000878 	.word	0x20000878
 80047c8:	20000008 	.word	0x20000008
 80047cc:	2000087c 	.word	0x2000087c
 80047d0:	20000884 	.word	0x20000884
 80047d4:	20000948 	.word	0x20000948
 80047d8:	20000880 	.word	0x20000880
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	20000888 	.word	0x20000888
 80047e4:	20000950 	.word	0x20000950
 80047e8:	2000088c 	.word	0x2000088c
 80047ec:	20000894 	.word	0x20000894
 80047f0:	20000954 	.word	0x20000954
 80047f4:	20000890 	.word	0x20000890
 80047f8:	2000095c 	.word	0x2000095c
 80047fc:	20000898 	.word	0x20000898
 8004800:	20000924 	.word	0x20000924
 8004804:	40340000 	.word	0x40340000
 8004808:	2000089c 	.word	0x2000089c
 800480c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004814:	4bbb      	ldr	r3, [pc, #748]	; (8004b04 <fly+0x978>)
 8004816:	edd3 6a00 	vldr	s13, [r3]
 800481a:	4bbb      	ldr	r3, [pc, #748]	; (8004b08 <fly+0x97c>)
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004824:	4bb9      	ldr	r3, [pc, #740]	; (8004b0c <fly+0x980>)
 8004826:	edd3 7a00 	vldr	s15, [r3]
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004832:	4bb7      	ldr	r3, [pc, #732]	; (8004b10 <fly+0x984>)
 8004834:	edd3 6a00 	vldr	s13, [r3]
 8004838:	4bb6      	ldr	r3, [pc, #728]	; (8004b14 <fly+0x988>)
 800483a:	edd3 7a00 	vldr	s15, [r3]
 800483e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004842:	4bb5      	ldr	r3, [pc, #724]	; (8004b18 <fly+0x98c>)
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004850:	4bb2      	ldr	r3, [pc, #712]	; (8004b1c <fly+0x990>)
 8004852:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004860:	4baf      	ldr	r3, [pc, #700]	; (8004b20 <fly+0x994>)
 8004862:	edd3 6a00 	vldr	s13, [r3]
 8004866:	4baf      	ldr	r3, [pc, #700]	; (8004b24 <fly+0x998>)
 8004868:	edd3 7a00 	vldr	s15, [r3]
 800486c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004870:	4bad      	ldr	r3, [pc, #692]	; (8004b28 <fly+0x99c>)
 8004872:	edd3 7a00 	vldr	s15, [r3]
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800487e:	4ba1      	ldr	r3, [pc, #644]	; (8004b04 <fly+0x978>)
 8004880:	edd3 6a00 	vldr	s13, [r3]
 8004884:	4ba0      	ldr	r3, [pc, #640]	; (8004b08 <fly+0x97c>)
 8004886:	edd3 7a00 	vldr	s15, [r3]
 800488a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800488e:	4b9f      	ldr	r3, [pc, #636]	; (8004b0c <fly+0x980>)
 8004890:	edd3 7a00 	vldr	s15, [r3]
 8004894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800489c:	4b9c      	ldr	r3, [pc, #624]	; (8004b10 <fly+0x984>)
 800489e:	edd3 6a00 	vldr	s13, [r3]
 80048a2:	4b9c      	ldr	r3, [pc, #624]	; (8004b14 <fly+0x988>)
 80048a4:	edd3 7a00 	vldr	s15, [r3]
 80048a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048ac:	4b9a      	ldr	r3, [pc, #616]	; (8004b18 <fly+0x98c>)
 80048ae:	edd3 7a00 	vldr	s15, [r3]
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ba:	4b9c      	ldr	r3, [pc, #624]	; (8004b2c <fly+0x9a0>)
 80048bc:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048ca:	4b95      	ldr	r3, [pc, #596]	; (8004b20 <fly+0x994>)
 80048cc:	edd3 6a00 	vldr	s13, [r3]
 80048d0:	4b94      	ldr	r3, [pc, #592]	; (8004b24 <fly+0x998>)
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048da:	4b93      	ldr	r3, [pc, #588]	; (8004b28 <fly+0x99c>)
 80048dc:	edd3 7a00 	vldr	s15, [r3]
 80048e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048e8:	4b86      	ldr	r3, [pc, #536]	; (8004b04 <fly+0x978>)
 80048ea:	edd3 6a00 	vldr	s13, [r3]
 80048ee:	4b86      	ldr	r3, [pc, #536]	; (8004b08 <fly+0x97c>)
 80048f0:	edd3 7a00 	vldr	s15, [r3]
 80048f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048f8:	4b84      	ldr	r3, [pc, #528]	; (8004b0c <fly+0x980>)
 80048fa:	edd3 7a00 	vldr	s15, [r3]
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <fly+0x984>)
 8004908:	edd3 6a00 	vldr	s13, [r3]
 800490c:	4b81      	ldr	r3, [pc, #516]	; (8004b14 <fly+0x988>)
 800490e:	edd3 7a00 	vldr	s15, [r3]
 8004912:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004916:	4b80      	ldr	r3, [pc, #512]	; (8004b18 <fly+0x98c>)
 8004918:	edd3 7a00 	vldr	s15, [r3]
 800491c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004924:	4b82      	ldr	r3, [pc, #520]	; (8004b30 <fly+0x9a4>)
 8004926:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 800492a:	4b82      	ldr	r3, [pc, #520]	; (8004b34 <fly+0x9a8>)
 800492c:	edd3 7a00 	vldr	s15, [r3]
 8004930:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8004b38 <fly+0x9ac>
 8004934:	eddf 0a81 	vldr	s1, [pc, #516]	; 8004b3c <fly+0x9b0>
 8004938:	eeb0 0a67 	vmov.f32	s0, s15
 800493c:	f7fe f824 	bl	8002988 <limit>
 8004940:	eef0 7a40 	vmov.f32	s15, s0
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <fly+0x9a8>)
 8004946:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 800494a:	4b74      	ldr	r3, [pc, #464]	; (8004b1c <fly+0x990>)
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8004b38 <fly+0x9ac>
 8004954:	eddf 0a79 	vldr	s1, [pc, #484]	; 8004b3c <fly+0x9b0>
 8004958:	eeb0 0a67 	vmov.f32	s0, s15
 800495c:	f7fe f814 	bl	8002988 <limit>
 8004960:	eef0 7a40 	vmov.f32	s15, s0
 8004964:	4b6d      	ldr	r3, [pc, #436]	; (8004b1c <fly+0x990>)
 8004966:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 800496a:	4b70      	ldr	r3, [pc, #448]	; (8004b2c <fly+0x9a0>)
 800496c:	edd3 7a00 	vldr	s15, [r3]
 8004970:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8004b38 <fly+0x9ac>
 8004974:	eddf 0a71 	vldr	s1, [pc, #452]	; 8004b3c <fly+0x9b0>
 8004978:	eeb0 0a67 	vmov.f32	s0, s15
 800497c:	f7fe f804 	bl	8002988 <limit>
 8004980:	eef0 7a40 	vmov.f32	s15, s0
 8004984:	4b69      	ldr	r3, [pc, #420]	; (8004b2c <fly+0x9a0>)
 8004986:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 800498a:	4b69      	ldr	r3, [pc, #420]	; (8004b30 <fly+0x9a4>)
 800498c:	edd3 7a00 	vldr	s15, [r3]
 8004990:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8004b38 <fly+0x9ac>
 8004994:	eddf 0a69 	vldr	s1, [pc, #420]	; 8004b3c <fly+0x9b0>
 8004998:	eeb0 0a67 	vmov.f32	s0, s15
 800499c:	f7fd fff4 	bl	8002988 <limit>
 80049a0:	eef0 7a40 	vmov.f32	s15, s0
 80049a4:	4b62      	ldr	r3, [pc, #392]	; (8004b30 <fly+0x9a4>)
 80049a6:	edc3 7a00 	vstr	s15, [r3]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 80049aa:	4b62      	ldr	r3, [pc, #392]	; (8004b34 <fly+0x9a8>)
 80049ac:	edd3 7a00 	vldr	s15, [r3]
 80049b0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80049b4:	4b59      	ldr	r3, [pc, #356]	; (8004b1c <fly+0x990>)
 80049b6:	edd3 7a00 	vldr	s15, [r3]
 80049ba:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80049be:	4b5b      	ldr	r3, [pc, #364]	; (8004b2c <fly+0x9a0>)
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <fly+0x9a4>)
 80049ca:	edd3 7a00 	vldr	s15, [r3]
 80049ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d2:	ee17 3a90 	vmov	r3, s15
 80049d6:	ee16 2a10 	vmov	r2, s12
 80049da:	ee16 1a90 	vmov	r1, s13
 80049de:	ee17 0a10 	vmov	r0, s14
 80049e2:	f7fe fef5 	bl	80037d0 <set_speed>

      // Pull down the stick to stop
      if (g_thrust <= -99) {
 80049e6:	4b56      	ldr	r3, [pc, #344]	; (8004b40 <fly+0x9b4>)
 80049e8:	edd3 7a00 	vldr	s15, [r3]
 80049ec:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004b44 <fly+0x9b8>
 80049f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	d802      	bhi.n	8004a00 <fly+0x874>
        fly_mode = init;
 80049fa:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <fly+0x9bc>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
      }

      // Stop if angle too large (crashed)
      if (angle_x < -70 || angle_x > 70 || angle_y < -70 || angle_y > 70) {
 8004a00:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a04:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004b4c <fly+0x9c0>
 8004a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a10:	d41b      	bmi.n	8004a4a <fly+0x8be>
 8004a12:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a16:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004b50 <fly+0x9c4>
 8004a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	dc12      	bgt.n	8004a4a <fly+0x8be>
 8004a24:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a28:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004b4c <fly+0x9c0>
 8004a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a34:	d409      	bmi.n	8004a4a <fly+0x8be>
 8004a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a3a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004b50 <fly+0x9c4>
 8004a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	dc00      	bgt.n	8004a4a <fly+0x8be>
        fly_mode = init;
      }

      break;
 8004a48:	e088      	b.n	8004b5c <fly+0x9d0>
        fly_mode = init;
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <fly+0x9bc>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
      break;
 8004a50:	e084      	b.n	8004b5c <fly+0x9d0>
    case landing:
      set_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8004a52:	2364      	movs	r3, #100	; 0x64
 8004a54:	2264      	movs	r2, #100	; 0x64
 8004a56:	2164      	movs	r1, #100	; 0x64
 8004a58:	2064      	movs	r0, #100	; 0x64
 8004a5a:	f7fe feb9 	bl	80037d0 <set_speed>
      break;
 8004a5e:	e07d      	b.n	8004b5c <fly+0x9d0>
    case testing:
      g_sig1 = MIN_SPEED + g_thrust;
 8004a60:	4b37      	ldr	r3, [pc, #220]	; (8004b40 <fly+0x9b4>)
 8004a62:	edd3 7a00 	vldr	s15, [r3]
 8004a66:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004b3c <fly+0x9b0>
 8004a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <fly+0x9a8>)
 8004a70:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 8004a74:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <fly+0x9b4>)
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004b3c <fly+0x9b0>
 8004a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <fly+0x990>)
 8004a84:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 8004a88:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <fly+0x9b4>)
 8004a8a:	edd3 7a00 	vldr	s15, [r3]
 8004a8e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004b3c <fly+0x9b0>
 8004a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a96:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <fly+0x9a0>)
 8004a98:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <fly+0x9b4>)
 8004a9e:	edd3 7a00 	vldr	s15, [r3]
 8004aa2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b3c <fly+0x9b0>
 8004aa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aaa:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <fly+0x9a4>)
 8004aac:	edc3 7a00 	vstr	s15, [r3]

      set_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8004ab0:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <fly+0x9a8>)
 8004ab2:	edd3 7a00 	vldr	s15, [r3]
 8004ab6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <fly+0x990>)
 8004abc:	edd3 7a00 	vldr	s15, [r3]
 8004ac0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <fly+0x9a0>)
 8004ac6:	edd3 7a00 	vldr	s15, [r3]
 8004aca:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <fly+0x9a4>)
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad8:	ee17 3a90 	vmov	r3, s15
 8004adc:	ee16 2a10 	vmov	r2, s12
 8004ae0:	ee16 1a90 	vmov	r1, s13
 8004ae4:	ee17 0a10 	vmov	r0, s14
 8004ae8:	f7fe fe72 	bl	80037d0 <set_speed>

      if (g_thrust <= -99) {
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <fly+0x9b4>)
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b44 <fly+0x9b8>
 8004af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	d929      	bls.n	8004b54 <fly+0x9c8>
        fly_mode = init;
      }

      break;
 8004b00:	e02b      	b.n	8004b5a <fly+0x9ce>
 8004b02:	bf00      	nop
 8004b04:	2000087c 	.word	0x2000087c
 8004b08:	20000880 	.word	0x20000880
 8004b0c:	20000888 	.word	0x20000888
 8004b10:	2000088c 	.word	0x2000088c
 8004b14:	20000890 	.word	0x20000890
 8004b18:	20000898 	.word	0x20000898
 8004b1c:	200008a0 	.word	0x200008a0
 8004b20:	2000086c 	.word	0x2000086c
 8004b24:	20000870 	.word	0x20000870
 8004b28:	20000878 	.word	0x20000878
 8004b2c:	200008a4 	.word	0x200008a4
 8004b30:	200008a8 	.word	0x200008a8
 8004b34:	2000089c 	.word	0x2000089c
 8004b38:	447c8000 	.word	0x447c8000
 8004b3c:	440c0000 	.word	0x440c0000
 8004b40:	20000924 	.word	0x20000924
 8004b44:	c2c60000 	.word	0xc2c60000
 8004b48:	20000868 	.word	0x20000868
 8004b4c:	c28c0000 	.word	0xc28c0000
 8004b50:	428c0000 	.word	0x428c0000
        fly_mode = init;
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <fly+0xa1c>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
      break;
 8004b5a:	bf00      	nop
  }

#if MONITOR == 1
  monitor[0] = angle_x;
 8004b5c:	4a13      	ldr	r2, [pc, #76]	; (8004bac <fly+0xa20>)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	6013      	str	r3, [r2, #0]
  monitor[1] = angle_y;
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <fly+0xa20>)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	6053      	str	r3, [r2, #4]
  monitor[2] = angle_z;
 8004b68:	4a10      	ldr	r2, [pc, #64]	; (8004bac <fly+0xa20>)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	6093      	str	r3, [r2, #8]
  monitor[3] = gyro_x;
 8004b6e:	4a0f      	ldr	r2, [pc, #60]	; (8004bac <fly+0xa20>)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	60d3      	str	r3, [r2, #12]
  monitor[4] = gyro_y;
 8004b74:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <fly+0xa20>)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6113      	str	r3, [r2, #16]
  monitor[5] = gyro_z;
 8004b7a:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <fly+0xa20>)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6153      	str	r3, [r2, #20]
  monitor[6] = g_ms5611.altitude;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <fly+0xa24>)
 8004b82:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <fly+0xa20>)
 8004b88:	6193      	str	r3, [r2, #24]
  monitor[7] = g_ms5611.altitude;
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <fly+0xa24>)
 8004b8c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8004b90:	4a06      	ldr	r2, [pc, #24]	; (8004bac <fly+0xa20>)
 8004b92:	61d3      	str	r3, [r2, #28]
  monitor[8] = g_ms5611.altitude;
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <fly+0xa24>)
 8004b96:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <fly+0xa20>)
 8004b9c:	6213      	str	r3, [r2, #32]
  monitor[2] = g_sig1 > g_sig2 ? g_sig2 : g_sig1;
  monitor[3] = g_sig3;
  monitor[4] = g_sig4;
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
#endif
}
 8004b9e:	bf00      	nop
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000868 	.word	0x20000868
 8004bac:	20000960 	.word	0x20000960
 8004bb0:	20000538 	.word	0x20000538

08004bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bbc:	4a14      	ldr	r2, [pc, #80]	; (8004c10 <_sbrk+0x5c>)
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <_sbrk+0x60>)
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <_sbrk+0x64>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <_sbrk+0x64>)
 8004bd2:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <_sbrk+0x68>)
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d207      	bcs.n	8004bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004be4:	f006 fcf6 	bl	800b5d4 <__errno>
 8004be8:	4603      	mov	r3, r0
 8004bea:	220c      	movs	r2, #12
 8004bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bf2:	e009      	b.n	8004c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bf4:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <_sbrk+0x64>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <_sbrk+0x64>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	4a05      	ldr	r2, [pc, #20]	; (8004c18 <_sbrk+0x64>)
 8004c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20020000 	.word	0x20020000
 8004c14:	00000400 	.word	0x00000400
 8004c18:	20000984 	.word	0x20000984
 8004c1c:	200009a0 	.word	0x200009a0

08004c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <SystemInit+0x20>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	4a05      	ldr	r2, [pc, #20]	; (8004c40 <SystemInit+0x20>)
 8004c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c48:	480d      	ldr	r0, [pc, #52]	; (8004c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c4a:	490e      	ldr	r1, [pc, #56]	; (8004c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c4c:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c50:	e002      	b.n	8004c58 <LoopCopyDataInit>

08004c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c56:	3304      	adds	r3, #4

08004c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c5c:	d3f9      	bcc.n	8004c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c60:	4c0b      	ldr	r4, [pc, #44]	; (8004c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c64:	e001      	b.n	8004c6a <LoopFillZerobss>

08004c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c68:	3204      	adds	r2, #4

08004c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c6c:	d3fb      	bcc.n	8004c66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c6e:	f7ff ffd7 	bl	8004c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c72:	f006 fcb5 	bl	800b5e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c76:	f7fc fb41 	bl	80012fc <main>
  bx  lr    
 8004c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c84:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004c88:	0800ec18 	.word	0x0800ec18
  ldr r2, =_sbss
 8004c8c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004c90:	2000099c 	.word	0x2000099c

08004c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c94:	e7fe      	b.n	8004c94 <ADC_IRQHandler>
	...

08004c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <HAL_Init+0x40>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <HAL_Init+0x40>)
 8004ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_Init+0x40>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <HAL_Init+0x40>)
 8004cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_Init+0x40>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <HAL_Init+0x40>)
 8004cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	f000 f94f 	bl	8004f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cc6:	200f      	movs	r0, #15
 8004cc8:	f000 f808 	bl	8004cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ccc:	f7fe fa98 	bl	8003200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023c00 	.word	0x40023c00

08004cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <HAL_InitTick+0x54>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <HAL_InitTick+0x58>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f967 	bl	8004fce <HAL_SYSTICK_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e00e      	b.n	8004d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b0f      	cmp	r3, #15
 8004d0e:	d80a      	bhi.n	8004d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d10:	2200      	movs	r2, #0
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d18:	f000 f92f 	bl	8004f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d1c:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <HAL_InitTick+0x5c>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000014 	.word	0x20000014
 8004d34:	2000001c 	.word	0x2000001c
 8004d38:	20000018 	.word	0x20000018

08004d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_IncTick+0x20>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_IncTick+0x24>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <HAL_IncTick+0x24>)
 8004d4e:	6013      	str	r3, [r2, #0]
}
 8004d50:	bf00      	nop
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	2000001c 	.word	0x2000001c
 8004d60:	20000988 	.word	0x20000988

08004d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return uwTick;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <HAL_GetTick+0x14>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000988 	.word	0x20000988

08004d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d84:	f7ff ffee 	bl	8004d64 <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d94:	d005      	beq.n	8004da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <HAL_Delay+0x44>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004da2:	bf00      	nop
 8004da4:	f7ff ffde 	bl	8004d64 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d8f7      	bhi.n	8004da4 <HAL_Delay+0x28>
  {
  }
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2000001c 	.word	0x2000001c

08004dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df6:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	60d3      	str	r3, [r2, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <__NVIC_GetPriorityGrouping+0x18>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 0307 	and.w	r3, r3, #7
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	db0b      	blt.n	8004e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	f003 021f 	and.w	r2, r3, #31
 8004e40:	4907      	ldr	r1, [pc, #28]	; (8004e60 <__NVIC_EnableIRQ+0x38>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2001      	movs	r0, #1
 8004e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e100 	.word	0xe000e100

08004e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	db0a      	blt.n	8004e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	490c      	ldr	r1, [pc, #48]	; (8004eb0 <__NVIC_SetPriority+0x4c>)
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	440b      	add	r3, r1
 8004e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e8c:	e00a      	b.n	8004ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4908      	ldr	r1, [pc, #32]	; (8004eb4 <__NVIC_SetPriority+0x50>)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	3b04      	subs	r3, #4
 8004e9c:	0112      	lsls	r2, r2, #4
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	761a      	strb	r2, [r3, #24]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000e100 	.word	0xe000e100
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f1c3 0307 	rsb	r3, r3, #7
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	bf28      	it	cs
 8004ed6:	2304      	movcs	r3, #4
 8004ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d902      	bls.n	8004ee8 <NVIC_EncodePriority+0x30>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3b03      	subs	r3, #3
 8004ee6:	e000      	b.n	8004eea <NVIC_EncodePriority+0x32>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	401a      	ands	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	43d9      	mvns	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f10:	4313      	orrs	r3, r2
         );
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	; 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f30:	d301      	bcc.n	8004f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f32:	2301      	movs	r3, #1
 8004f34:	e00f      	b.n	8004f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <SysTick_Config+0x40>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3e:	210f      	movs	r1, #15
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f44:	f7ff ff8e 	bl	8004e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <SysTick_Config+0x40>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <SysTick_Config+0x40>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff29 	bl	8004dc4 <__NVIC_SetPriorityGrouping>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	4603      	mov	r3, r0
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f8c:	f7ff ff3e 	bl	8004e0c <__NVIC_GetPriorityGrouping>
 8004f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	6978      	ldr	r0, [r7, #20]
 8004f98:	f7ff ff8e 	bl	8004eb8 <NVIC_EncodePriority>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff5d 	bl	8004e64 <__NVIC_SetPriority>
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	4603      	mov	r3, r0
 8004fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff ff31 	bl	8004e28 <__NVIC_EnableIRQ>
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff ffa2 	bl	8004f20 <SysTick_Config>
 8004fdc:	4603      	mov	r3, r0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff feb6 	bl	8004d64 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d008      	beq.n	8005018 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e052      	b.n	80050be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0216 	bic.w	r2, r2, #22
 8005026:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005036:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <HAL_DMA_Abort+0x62>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0208 	bic.w	r2, r2, #8
 8005056:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005068:	e013      	b.n	8005092 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800506a:	f7ff fe7b 	bl	8004d64 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b05      	cmp	r3, #5
 8005076:	d90c      	bls.n	8005092 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2203      	movs	r2, #3
 8005082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e015      	b.n	80050be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e4      	bne.n	800506a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	223f      	movs	r2, #63	; 0x3f
 80050a6:	409a      	lsls	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d004      	beq.n	80050e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e00c      	b.n	80050fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2205      	movs	r2, #5
 80050e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005118:	b2db      	uxtb	r3, r3
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e16b      	b.n	800541c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005144:	2201      	movs	r2, #1
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	f040 815a 	bne.w	8005416 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d005      	beq.n	800517a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005176:	2b02      	cmp	r3, #2
 8005178:	d130      	bne.n	80051dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	2203      	movs	r2, #3
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051b0:	2201      	movs	r2, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 0201 	and.w	r2, r3, #1
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d017      	beq.n	8005218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	2203      	movs	r2, #3
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d123      	bne.n	800526c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	220f      	movs	r2, #15
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3208      	adds	r2, #8
 8005266:	69b9      	ldr	r1, [r7, #24]
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 0203 	and.w	r2, r3, #3
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80b4 	beq.w	8005416 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	4b60      	ldr	r3, [pc, #384]	; (8005434 <HAL_GPIO_Init+0x30c>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	4a5f      	ldr	r2, [pc, #380]	; (8005434 <HAL_GPIO_Init+0x30c>)
 80052b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052bc:	6453      	str	r3, [r2, #68]	; 0x44
 80052be:	4b5d      	ldr	r3, [pc, #372]	; (8005434 <HAL_GPIO_Init+0x30c>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ca:	4a5b      	ldr	r2, [pc, #364]	; (8005438 <HAL_GPIO_Init+0x310>)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	3302      	adds	r3, #2
 80052d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	220f      	movs	r2, #15
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a52      	ldr	r2, [pc, #328]	; (800543c <HAL_GPIO_Init+0x314>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d02b      	beq.n	800534e <HAL_GPIO_Init+0x226>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a51      	ldr	r2, [pc, #324]	; (8005440 <HAL_GPIO_Init+0x318>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d025      	beq.n	800534a <HAL_GPIO_Init+0x222>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a50      	ldr	r2, [pc, #320]	; (8005444 <HAL_GPIO_Init+0x31c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01f      	beq.n	8005346 <HAL_GPIO_Init+0x21e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a4f      	ldr	r2, [pc, #316]	; (8005448 <HAL_GPIO_Init+0x320>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d019      	beq.n	8005342 <HAL_GPIO_Init+0x21a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a4e      	ldr	r2, [pc, #312]	; (800544c <HAL_GPIO_Init+0x324>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_GPIO_Init+0x216>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a4d      	ldr	r2, [pc, #308]	; (8005450 <HAL_GPIO_Init+0x328>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00d      	beq.n	800533a <HAL_GPIO_Init+0x212>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a4c      	ldr	r2, [pc, #304]	; (8005454 <HAL_GPIO_Init+0x32c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <HAL_GPIO_Init+0x20e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a4b      	ldr	r2, [pc, #300]	; (8005458 <HAL_GPIO_Init+0x330>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_GPIO_Init+0x20a>
 800532e:	2307      	movs	r3, #7
 8005330:	e00e      	b.n	8005350 <HAL_GPIO_Init+0x228>
 8005332:	2308      	movs	r3, #8
 8005334:	e00c      	b.n	8005350 <HAL_GPIO_Init+0x228>
 8005336:	2306      	movs	r3, #6
 8005338:	e00a      	b.n	8005350 <HAL_GPIO_Init+0x228>
 800533a:	2305      	movs	r3, #5
 800533c:	e008      	b.n	8005350 <HAL_GPIO_Init+0x228>
 800533e:	2304      	movs	r3, #4
 8005340:	e006      	b.n	8005350 <HAL_GPIO_Init+0x228>
 8005342:	2303      	movs	r3, #3
 8005344:	e004      	b.n	8005350 <HAL_GPIO_Init+0x228>
 8005346:	2302      	movs	r3, #2
 8005348:	e002      	b.n	8005350 <HAL_GPIO_Init+0x228>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_GPIO_Init+0x228>
 800534e:	2300      	movs	r3, #0
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	f002 0203 	and.w	r2, r2, #3
 8005356:	0092      	lsls	r2, r2, #2
 8005358:	4093      	lsls	r3, r2
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005360:	4935      	ldr	r1, [pc, #212]	; (8005438 <HAL_GPIO_Init+0x310>)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	3302      	adds	r3, #2
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800536e:	4b3b      	ldr	r3, [pc, #236]	; (800545c <HAL_GPIO_Init+0x334>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005392:	4a32      	ldr	r2, [pc, #200]	; (800545c <HAL_GPIO_Init+0x334>)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005398:	4b30      	ldr	r3, [pc, #192]	; (800545c <HAL_GPIO_Init+0x334>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053bc:	4a27      	ldr	r2, [pc, #156]	; (800545c <HAL_GPIO_Init+0x334>)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <HAL_GPIO_Init+0x334>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053e6:	4a1d      	ldr	r2, [pc, #116]	; (800545c <HAL_GPIO_Init+0x334>)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <HAL_GPIO_Init+0x334>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005410:	4a12      	ldr	r2, [pc, #72]	; (800545c <HAL_GPIO_Init+0x334>)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	f67f ae90 	bls.w	8005144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3724      	adds	r7, #36	; 0x24
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800
 8005438:	40013800 	.word	0x40013800
 800543c:	40020000 	.word	0x40020000
 8005440:	40020400 	.word	0x40020400
 8005444:	40020800 	.word	0x40020800
 8005448:	40020c00 	.word	0x40020c00
 800544c:	40021000 	.word	0x40021000
 8005450:	40021400 	.word	0x40021400
 8005454:	40021800 	.word	0x40021800
 8005458:	40021c00 	.word	0x40021c00
 800545c:	40013c00 	.word	0x40013c00

08005460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	887b      	ldrh	r3, [r7, #2]
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e001      	b.n	8005482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
 800549c:	4613      	mov	r3, r2
 800549e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054a0:	787b      	ldrb	r3, [r7, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054ac:	e003      	b.n	80054b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ae:	887b      	ldrh	r3, [r7, #2]
 80054b0:	041a      	lsls	r2, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	619a      	str	r2, [r3, #24]
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054d4:	887a      	ldrh	r2, [r7, #2]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4013      	ands	r3, r2
 80054da:	041a      	lsls	r2, r3, #16
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	43d9      	mvns	r1, r3
 80054e0:	887b      	ldrh	r3, [r7, #2]
 80054e2:	400b      	ands	r3, r1
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	619a      	str	r2, [r3, #24]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e12b      	b.n	8005762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fd fe96 	bl	8003250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	; 0x24
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800554a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800555a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800555c:	f003 fbc8 	bl	8008cf0 <HAL_RCC_GetPCLK1Freq>
 8005560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4a81      	ldr	r2, [pc, #516]	; (800576c <HAL_I2C_Init+0x274>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d807      	bhi.n	800557c <HAL_I2C_Init+0x84>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a80      	ldr	r2, [pc, #512]	; (8005770 <HAL_I2C_Init+0x278>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf94      	ite	ls
 8005574:	2301      	movls	r3, #1
 8005576:	2300      	movhi	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e006      	b.n	800558a <HAL_I2C_Init+0x92>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a7d      	ldr	r2, [pc, #500]	; (8005774 <HAL_I2C_Init+0x27c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	bf94      	ite	ls
 8005584:	2301      	movls	r3, #1
 8005586:	2300      	movhi	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0e7      	b.n	8005762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a78      	ldr	r2, [pc, #480]	; (8005778 <HAL_I2C_Init+0x280>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0c9b      	lsrs	r3, r3, #18
 800559c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a6a      	ldr	r2, [pc, #424]	; (800576c <HAL_I2C_Init+0x274>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d802      	bhi.n	80055cc <HAL_I2C_Init+0xd4>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	e009      	b.n	80055e0 <HAL_I2C_Init+0xe8>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	4a69      	ldr	r2, [pc, #420]	; (800577c <HAL_I2C_Init+0x284>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	3301      	adds	r3, #1
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	495c      	ldr	r1, [pc, #368]	; (800576c <HAL_I2C_Init+0x274>)
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d819      	bhi.n	8005634 <HAL_I2C_Init+0x13c>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e59      	subs	r1, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fbb1 f3f3 	udiv	r3, r1, r3
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005614:	400b      	ands	r3, r1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_I2C_Init+0x138>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e59      	subs	r1, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	fbb1 f3f3 	udiv	r3, r1, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	e051      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005630:	2304      	movs	r3, #4
 8005632:	e04f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d111      	bne.n	8005660 <HAL_I2C_Init+0x168>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1e58      	subs	r0, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e012      	b.n	8005686 <HAL_I2C_Init+0x18e>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e58      	subs	r0, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	0099      	lsls	r1, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	fbb0 f3f3 	udiv	r3, r0, r3
 8005676:	3301      	adds	r3, #1
 8005678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Init+0x196>
 800568a:	2301      	movs	r3, #1
 800568c:	e022      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10e      	bne.n	80056b4 <HAL_I2C_Init+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1e58      	subs	r0, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	440b      	add	r3, r1
 80056a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b2:	e00f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1e58      	subs	r0, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	0099      	lsls	r1, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	6809      	ldr	r1, [r1, #0]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6911      	ldr	r1, [r2, #16]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68d2      	ldr	r2, [r2, #12]
 800570e:	4311      	orrs	r1, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	430b      	orrs	r3, r1
 8005716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	000186a0 	.word	0x000186a0
 8005770:	001e847f 	.word	0x001e847f
 8005774:	003d08ff 	.word	0x003d08ff
 8005778:	431bde83 	.word	0x431bde83
 800577c:	10624dd3 	.word	0x10624dd3

08005780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	461a      	mov	r2, r3
 800578c:	460b      	mov	r3, r1
 800578e:	817b      	strh	r3, [r7, #10]
 8005790:	4613      	mov	r3, r2
 8005792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005794:	f7ff fae6 	bl	8004d64 <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	f040 80e0 	bne.w	8005968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2319      	movs	r3, #25
 80057ae:	2201      	movs	r2, #1
 80057b0:	4970      	ldr	r1, [pc, #448]	; (8005974 <HAL_I2C_Master_Transmit+0x1f4>)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f002 fc02 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057be:	2302      	movs	r3, #2
 80057c0:	e0d3      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_I2C_Master_Transmit+0x50>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e0cc      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d007      	beq.n	80057f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2221      	movs	r2, #33	; 0x21
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2210      	movs	r2, #16
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	893a      	ldrh	r2, [r7, #8]
 8005826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a50      	ldr	r2, [pc, #320]	; (8005978 <HAL_I2C_Master_Transmit+0x1f8>)
 8005836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005838:	8979      	ldrh	r1, [r7, #10]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f002 f8dc 	bl	80079fc <I2C_MasterRequestWrite>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e08d      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005864:	e066      	b.n	8005934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	6a39      	ldr	r1, [r7, #32]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f002 fc7c 	bl	8008168 <I2C_WaitOnTXEFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b04      	cmp	r3, #4
 800587c:	d107      	bne.n	800588e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e06b      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d11b      	bne.n	8005908 <HAL_I2C_Master_Transmit+0x188>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	6a39      	ldr	r1, [r7, #32]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f002 fc6c 	bl	80081ea <I2C_WaitOnBTFFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b04      	cmp	r3, #4
 800591e:	d107      	bne.n	8005930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e01a      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005938:	2b00      	cmp	r3, #0
 800593a:	d194      	bne.n	8005866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	00100002 	.word	0x00100002
 8005978:	ffff0000 	.word	0xffff0000

0800597c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	; 0x30
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	461a      	mov	r2, r3
 8005988:	460b      	mov	r3, r1
 800598a:	817b      	strh	r3, [r7, #10]
 800598c:	4613      	mov	r3, r2
 800598e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005990:	f7ff f9e8 	bl	8004d64 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	f040 820b 	bne.w	8005dba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2319      	movs	r3, #25
 80059aa:	2201      	movs	r2, #1
 80059ac:	497c      	ldr	r1, [pc, #496]	; (8005ba0 <HAL_I2C_Master_Receive+0x224>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f002 fb04 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
 80059bc:	e1fe      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_I2C_Master_Receive+0x50>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e1f7      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d007      	beq.n	80059f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2222      	movs	r2, #34	; 0x22
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	893a      	ldrh	r2, [r7, #8]
 8005a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a5c      	ldr	r2, [pc, #368]	; (8005ba4 <HAL_I2C_Master_Receive+0x228>)
 8005a32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a34:	8979      	ldrh	r1, [r7, #10]
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f002 f860 	bl	8007b00 <I2C_MasterRequestRead>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e1b8      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d113      	bne.n	8005a7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a52:	2300      	movs	r3, #0
 8005a54:	623b      	str	r3, [r7, #32]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	623b      	str	r3, [r7, #32]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	e18c      	b.n	8005d94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d11b      	bne.n	8005aba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e16c      	b.n	8005d94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d11b      	bne.n	8005afa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	e14c      	b.n	8005d94 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b20:	e138      	b.n	8005d94 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f200 80f1 	bhi.w	8005d0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d123      	bne.n	8005b7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f002 fbc9 	bl	80082d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e139      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b7a:	e10b      	b.n	8005d94 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d14e      	bne.n	8005c22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4906      	ldr	r1, [pc, #24]	; (8005ba8 <HAL_I2C_Master_Receive+0x22c>)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f002 fa14 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e10e      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
 8005b9e:	bf00      	nop
 8005ba0:	00100002 	.word	0x00100002
 8005ba4:	ffff0000 	.word	0xffff0000
 8005ba8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c20:	e0b8      	b.n	8005d94 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4966      	ldr	r1, [pc, #408]	; (8005dc4 <HAL_I2C_Master_Receive+0x448>)
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f002 f9c5 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0bf      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	2200      	movs	r2, #0
 8005c86:	494f      	ldr	r1, [pc, #316]	; (8005dc4 <HAL_I2C_Master_Receive+0x448>)
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f002 f997 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e091      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d0c:	e042      	b.n	8005d94 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f002 fadc 	bl	80082d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e04c      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d118      	bne.n	8005d94 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f47f aec2 	bne.w	8005b22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3728      	adds	r7, #40	; 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	00010004 	.word	0x00010004

08005dc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	817b      	strh	r3, [r7, #10]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	813b      	strh	r3, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005de2:	f7fe ffbf 	bl	8004d64 <HAL_GetTick>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	f040 8208 	bne.w	8006206 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	2319      	movs	r3, #25
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	497b      	ldr	r1, [pc, #492]	; (8005fec <HAL_I2C_Mem_Read+0x224>)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f002 f8db 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e1fb      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_I2C_Mem_Read+0x56>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e1f4      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d007      	beq.n	8005e44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2222      	movs	r2, #34	; 0x22
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2240      	movs	r2, #64	; 0x40
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4a5b      	ldr	r2, [pc, #364]	; (8005ff0 <HAL_I2C_Mem_Read+0x228>)
 8005e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e86:	88f8      	ldrh	r0, [r7, #6]
 8005e88:	893a      	ldrh	r2, [r7, #8]
 8005e8a:	8979      	ldrh	r1, [r7, #10]
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4603      	mov	r3, r0
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f001 ff00 	bl	8007c9c <I2C_RequestMemoryRead>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e1b0      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d113      	bne.n	8005ed6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e184      	b.n	80061e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d11b      	bne.n	8005f16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e164      	b.n	80061e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d11b      	bne.n	8005f56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	61bb      	str	r3, [r7, #24]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	e144      	b.n	80061e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f6c:	e138      	b.n	80061e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	f200 80f1 	bhi.w	800615a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d123      	bne.n	8005fc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f002 f9a3 	bl	80082d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e139      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc6:	e10b      	b.n	80061e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d14e      	bne.n	800606e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4906      	ldr	r1, [pc, #24]	; (8005ff4 <HAL_I2C_Mem_Read+0x22c>)
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 ffee 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e10e      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
 8005fea:	bf00      	nop
 8005fec:	00100002 	.word	0x00100002
 8005ff0:	ffff0000 	.word	0xffff0000
 8005ff4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800606c:	e0b8      	b.n	80061e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	2200      	movs	r2, #0
 8006076:	4966      	ldr	r1, [pc, #408]	; (8006210 <HAL_I2C_Mem_Read+0x448>)
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f001 ff9f 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0bf      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	2200      	movs	r2, #0
 80060d2:	494f      	ldr	r1, [pc, #316]	; (8006210 <HAL_I2C_Mem_Read+0x448>)
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f001 ff71 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e091      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006158:	e042      	b.n	80061e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800615a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f002 f8b6 	bl	80082d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e04c      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d118      	bne.n	80061e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f47f aec2 	bne.w	8005f6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	e000      	b.n	8006208 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006206:	2302      	movs	r3, #2
  }
}
 8006208:	4618      	mov	r0, r3
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	00010004 	.word	0x00010004

08006214 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006234:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	2b10      	cmp	r3, #16
 8006242:	d003      	beq.n	800624c <HAL_I2C_EV_IRQHandler+0x38>
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	f040 80c1 	bne.w	80063ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <HAL_I2C_EV_IRQHandler+0x6e>
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800626c:	d003      	beq.n	8006276 <HAL_I2C_EV_IRQHandler+0x62>
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006274:	d101      	bne.n	800627a <HAL_I2C_EV_IRQHandler+0x66>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <HAL_I2C_EV_IRQHandler+0x68>
 800627a:	2300      	movs	r3, #0
 800627c:	2b01      	cmp	r3, #1
 800627e:	f000 8132 	beq.w	80064e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00c      	beq.n	80062a6 <HAL_I2C_EV_IRQHandler+0x92>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	0a5b      	lsrs	r3, r3, #9
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d006      	beq.n	80062a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 f89e 	bl	80083da <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fd91 	bl	8006dc6 <I2C_Master_SB>
 80062a4:	e092      	b.n	80063cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	0a5b      	lsrs	r3, r3, #9
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fe07 	bl	8006ed2 <I2C_Master_ADD10>
 80062c4:	e082      	b.n	80063cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	0a5b      	lsrs	r3, r3, #9
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fe21 	bl	8006f26 <I2C_Master_ADDR>
 80062e4:	e072      	b.n	80063cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d03b      	beq.n	800636a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006300:	f000 80f3 	beq.w	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	09db      	lsrs	r3, r3, #7
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00f      	beq.n	8006330 <HAL_I2C_EV_IRQHandler+0x11c>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	0a9b      	lsrs	r3, r3, #10
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <HAL_I2C_EV_IRQHandler+0x11c>
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa01 	bl	8006730 <I2C_MasterTransmit_TXE>
 800632e:	e04d      	b.n	80063cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80d6 	beq.w	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	0a5b      	lsrs	r3, r3, #9
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80cf 	beq.w	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b21      	cmp	r3, #33	; 0x21
 8006350:	d103      	bne.n	800635a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa88 	bl	8006868 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006358:	e0c7      	b.n	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	f040 80c4 	bne.w	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 faf6 	bl	8006954 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006368:	e0bf      	b.n	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006378:	f000 80b7 	beq.w	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	099b      	lsrs	r3, r3, #6
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00f      	beq.n	80063a8 <HAL_I2C_EV_IRQHandler+0x194>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	0a9b      	lsrs	r3, r3, #10
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_I2C_EV_IRQHandler+0x194>
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	089b      	lsrs	r3, r3, #2
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d103      	bne.n	80063a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fb6b 	bl	8006a7c <I2C_MasterReceive_RXNE>
 80063a6:	e011      	b.n	80063cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	089b      	lsrs	r3, r3, #2
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 809a 	beq.w	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	0a5b      	lsrs	r3, r3, #9
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8093 	beq.w	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fc14 	bl	8006bf2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063ca:	e08e      	b.n	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80063cc:	e08d      	b.n	80064ea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	e007      	b.n	80063f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d012      	beq.n	8006422 <HAL_I2C_EV_IRQHandler+0x20e>
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	0a5b      	lsrs	r3, r3, #9
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006418:	69b9      	ldr	r1, [r7, #24]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 ffd2 	bl	80073c4 <I2C_Slave_ADDR>
 8006420:	e066      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	091b      	lsrs	r3, r3, #4
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <HAL_I2C_EV_IRQHandler+0x22e>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	0a5b      	lsrs	r3, r3, #9
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 f80c 	bl	8007458 <I2C_Slave_STOPF>
 8006440:	e056      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b21      	cmp	r3, #33	; 0x21
 8006446:	d002      	beq.n	800644e <HAL_I2C_EV_IRQHandler+0x23a>
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b29      	cmp	r3, #41	; 0x29
 800644c:	d125      	bne.n	800649a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	09db      	lsrs	r3, r3, #7
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <HAL_I2C_EV_IRQHandler+0x266>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	0a9b      	lsrs	r3, r3, #10
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <HAL_I2C_EV_IRQHandler+0x266>
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fee8 	bl	8007248 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006478:	e039      	b.n	80064ee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d033      	beq.n	80064ee <HAL_I2C_EV_IRQHandler+0x2da>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	0a5b      	lsrs	r3, r3, #9
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d02d      	beq.n	80064ee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 ff15 	bl	80072c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006498:	e029      	b.n	80064ee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	099b      	lsrs	r3, r3, #6
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00f      	beq.n	80064c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	0a9b      	lsrs	r3, r3, #10
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	089b      	lsrs	r3, r3, #2
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 ff20 	bl	8007304 <I2C_SlaveReceive_RXNE>
 80064c4:	e014      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	0a5b      	lsrs	r3, r3, #9
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 ff4e 	bl	8007380 <I2C_SlaveReceive_BTF>
 80064e4:	e004      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b08a      	sub	sp, #40	; 0x28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800650e:	2300      	movs	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006518:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <HAL_I2C_ER_IRQHandler+0x4e>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	0a1b      	lsrs	r3, r3, #8
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006542:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	0a5b      	lsrs	r3, r3, #9
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00e      	beq.n	800656e <HAL_I2C_ER_IRQHandler+0x78>
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800656c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	0a9b      	lsrs	r3, r3, #10
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d03f      	beq.n	80065fa <HAL_I2C_ER_IRQHandler+0x104>
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d039      	beq.n	80065fa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006586:	7efb      	ldrb	r3, [r7, #27]
 8006588:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006598:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80065a0:	7ebb      	ldrb	r3, [r7, #26]
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d112      	bne.n	80065cc <HAL_I2C_ER_IRQHandler+0xd6>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10f      	bne.n	80065cc <HAL_I2C_ER_IRQHandler+0xd6>
 80065ac:	7cfb      	ldrb	r3, [r7, #19]
 80065ae:	2b21      	cmp	r3, #33	; 0x21
 80065b0:	d008      	beq.n	80065c4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80065b2:	7cfb      	ldrb	r3, [r7, #19]
 80065b4:	2b29      	cmp	r3, #41	; 0x29
 80065b6:	d005      	beq.n	80065c4 <HAL_I2C_ER_IRQHandler+0xce>
 80065b8:	7cfb      	ldrb	r3, [r7, #19]
 80065ba:	2b28      	cmp	r3, #40	; 0x28
 80065bc:	d106      	bne.n	80065cc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b21      	cmp	r3, #33	; 0x21
 80065c2:	d103      	bne.n	80065cc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 f877 	bl	80076b8 <I2C_Slave_AF>
 80065ca:	e016      	b.n	80065fa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065d4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	f043 0304 	orr.w	r3, r3, #4
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065de:	7efb      	ldrb	r3, [r7, #27]
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d002      	beq.n	80065ea <HAL_I2C_ER_IRQHandler+0xf4>
 80065e4:	7efb      	ldrb	r3, [r7, #27]
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d107      	bne.n	80065fa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	0adb      	lsrs	r3, r3, #11
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00e      	beq.n	8006624 <HAL_I2C_ER_IRQHandler+0x12e>
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	0a1b      	lsrs	r3, r3, #8
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d008      	beq.n	8006624 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	f043 0308 	orr.w	r3, r3, #8
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006622:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 f8ae 	bl	8007798 <I2C_ITError>
  }
}
 800663c:	bf00      	nop
 800663e:	3728      	adds	r7, #40	; 0x28
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
 80066a0:	4613      	mov	r3, r2
 80066a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006722:	b2db      	uxtb	r3, r3
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006746:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d150      	bne.n	80067f8 <I2C_MasterTransmit_TXE+0xc8>
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b21      	cmp	r3, #33	; 0x21
 800675a:	d14d      	bne.n	80067f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b08      	cmp	r3, #8
 8006760:	d01d      	beq.n	800679e <I2C_MasterTransmit_TXE+0x6e>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b20      	cmp	r3, #32
 8006766:	d01a      	beq.n	800679e <I2C_MasterTransmit_TXE+0x6e>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800676e:	d016      	beq.n	800679e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800677e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2211      	movs	r2, #17
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff54 	bl	8006644 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800679c:	e060      	b.n	8006860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b40      	cmp	r3, #64	; 0x40
 80067d6:	d107      	bne.n	80067e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff6f 	bl	80066c4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067e6:	e03b      	b.n	8006860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff27 	bl	8006644 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067f6:	e033      	b.n	8006860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b21      	cmp	r3, #33	; 0x21
 80067fc:	d005      	beq.n	800680a <I2C_MasterTransmit_TXE+0xda>
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d12d      	bne.n	8006860 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b22      	cmp	r3, #34	; 0x22
 8006808:	d12a      	bne.n	8006860 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d108      	bne.n	8006826 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006822:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006824:	e01c      	b.n	8006860 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b40      	cmp	r3, #64	; 0x40
 8006830:	d103      	bne.n	800683a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f88e 	bl	8006954 <I2C_MemoryTransmit_TXE_BTF>
}
 8006838:	e012      	b.n	8006860 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800685e:	e7ff      	b.n	8006860 <I2C_MasterTransmit_TXE+0x130>
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b21      	cmp	r3, #33	; 0x21
 8006880:	d164      	bne.n	800694c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d012      	beq.n	80068b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80068b0:	e04c      	b.n	800694c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d01d      	beq.n	80068f4 <I2C_MasterTransmit_BTF+0x8c>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d01a      	beq.n	80068f4 <I2C_MasterTransmit_BTF+0x8c>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068c4:	d016      	beq.n	80068f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2211      	movs	r2, #17
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fea9 	bl	8006644 <HAL_I2C_MasterTxCpltCallback>
}
 80068f2:	e02b      	b.n	800694c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006902:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006912:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d107      	bne.n	800693e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fec4 	bl	80066c4 <HAL_I2C_MemTxCpltCallback>
}
 800693c:	e006      	b.n	800694c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fe7c 	bl	8006644 <HAL_I2C_MasterTxCpltCallback>
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006962:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	2b00      	cmp	r3, #0
 800696a:	d11d      	bne.n	80069a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10b      	bne.n	800698c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006978:	b2da      	uxtb	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006984:	1c9a      	adds	r2, r3, #2
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800698a:	e073      	b.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006990:	b29b      	uxth	r3, r3
 8006992:	121b      	asrs	r3, r3, #8
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069a6:	e065      	b.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10b      	bne.n	80069c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069c6:	e055      	b.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d151      	bne.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b22      	cmp	r3, #34	; 0x22
 80069d4:	d10d      	bne.n	80069f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069f0:	e040      	b.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d015      	beq.n	8006a28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	2b21      	cmp	r3, #33	; 0x21
 8006a00:	d112      	bne.n	8006a28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a26:	e025      	b.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d120      	bne.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b21      	cmp	r3, #33	; 0x21
 8006a36:	d11d      	bne.n	8006a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff fe28 	bl	80066c4 <HAL_I2C_MemTxCpltCallback>
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b22      	cmp	r3, #34	; 0x22
 8006a8e:	f040 80ac 	bne.w	8006bea <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d921      	bls.n	8006ae4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	f040 808c 	bne.w	8006bea <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006ae2:	e082      	b.n	8006bea <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d075      	beq.n	8006bd8 <I2C_MasterReceive_RXNE+0x15c>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <I2C_MasterReceive_RXNE+0x7c>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d16f      	bne.n	8006bd8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fbb7 	bl	800826c <I2C_WaitOnSTOPRequestThroughIT>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d142      	bne.n	8006b8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b40      	cmp	r3, #64	; 0x40
 8006b5c:	d10a      	bne.n	8006b74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fdb3 	bl	80066d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b72:	e03a      	b.n	8006bea <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2212      	movs	r2, #18
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fd68 	bl	8006658 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b88:	e02f      	b.n	8006bea <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fd8b 	bl	80066ec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006bd6:	e008      	b.n	8006bea <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be6:	605a      	str	r2, [r3, #4]
}
 8006be8:	e7ff      	b.n	8006bea <I2C_MasterReceive_RXNE+0x16e>
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d11b      	bne.n	8006c42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006c40:	e0bd      	b.n	8006dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d129      	bne.n	8006ca0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d00a      	beq.n	8006c78 <I2C_MasterReceive_BTF+0x86>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d007      	beq.n	8006c78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c9e:	e08e      	b.n	8006dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d176      	bne.n	8006d98 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d002      	beq.n	8006cb6 <I2C_MasterReceive_BTF+0xc4>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d108      	bne.n	8006cc8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e019      	b.n	8006cfc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d002      	beq.n	8006cd4 <I2C_MasterReceive_BTF+0xe2>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d108      	bne.n	8006ce6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e00a      	b.n	8006cfc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b10      	cmp	r3, #16
 8006cea:	d007      	beq.n	8006cfc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cfa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d10a      	bne.n	8006d82 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fcac 	bl	80066d8 <HAL_I2C_MemRxCpltCallback>
}
 8006d80:	e01d      	b.n	8006dbe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2212      	movs	r2, #18
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fc61 	bl	8006658 <HAL_I2C_MasterRxCpltCallback>
}
 8006d96:	e012      	b.n	8006dbe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d117      	bne.n	8006e0a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006df2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006df4:	e067      	b.n	8006ec6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f043 0301 	orr.w	r3, r3, #1
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	611a      	str	r2, [r3, #16]
}
 8006e08:	e05d      	b.n	8006ec6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e12:	d133      	bne.n	8006e7c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b21      	cmp	r3, #33	; 0x21
 8006e1e:	d109      	bne.n	8006e34 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e30:	611a      	str	r2, [r3, #16]
 8006e32:	e008      	b.n	8006e46 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <I2C_Master_SB+0x92>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d108      	bne.n	8006e6a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d032      	beq.n	8006ec6 <I2C_Master_SB+0x100>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d02d      	beq.n	8006ec6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e78:	605a      	str	r2, [r3, #4]
}
 8006e7a:	e024      	b.n	8006ec6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10e      	bne.n	8006ea2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	11db      	asrs	r3, r3, #7
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f003 0306 	and.w	r3, r3, #6
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f063 030f 	orn	r3, r3, #15
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	611a      	str	r2, [r3, #16]
}
 8006ea0:	e011      	b.n	8006ec6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d10d      	bne.n	8006ec6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	11db      	asrs	r3, r3, #7
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 0306 	and.w	r3, r3, #6
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f063 030e 	orn	r3, r3, #14
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	611a      	str	r2, [r3, #16]
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <I2C_Master_ADD10+0x26>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d108      	bne.n	8006f0a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00c      	beq.n	8006f1a <I2C_Master_ADD10+0x48>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f18:	605a      	str	r2, [r3, #4]
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b091      	sub	sp, #68	; 0x44
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b22      	cmp	r3, #34	; 0x22
 8006f4e:	f040 8169 	bne.w	8007224 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <I2C_Master_ADDR+0x54>
 8006f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f5e:	2b40      	cmp	r3, #64	; 0x40
 8006f60:	d10b      	bne.n	8006f7a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f62:	2300      	movs	r3, #0
 8006f64:	633b      	str	r3, [r7, #48]	; 0x30
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	633b      	str	r3, [r7, #48]	; 0x30
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	e160      	b.n	800723c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d11d      	bne.n	8006fbe <I2C_Master_ADDR+0x98>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f8a:	d118      	bne.n	8006fbe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	651a      	str	r2, [r3, #80]	; 0x50
 8006fbc:	e13e      	b.n	800723c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d113      	bne.n	8006ff0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e115      	b.n	800721c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	f040 808a 	bne.w	8007110 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007002:	d137      	bne.n	8007074 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007012:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800701e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007022:	d113      	bne.n	800704c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007032:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007034:	2300      	movs	r3, #0
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	e0e7      	b.n	800721c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800704c:	2300      	movs	r3, #0
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	623b      	str	r3, [r7, #32]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	623b      	str	r3, [r7, #32]
 8007060:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e0d3      	b.n	800721c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	2b08      	cmp	r3, #8
 8007078:	d02e      	beq.n	80070d8 <I2C_Master_ADDR+0x1b2>
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	2b20      	cmp	r3, #32
 800707e:	d02b      	beq.n	80070d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007082:	2b12      	cmp	r3, #18
 8007084:	d102      	bne.n	800708c <I2C_Master_ADDR+0x166>
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	2b01      	cmp	r3, #1
 800708a:	d125      	bne.n	80070d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	2b04      	cmp	r3, #4
 8007090:	d00e      	beq.n	80070b0 <I2C_Master_ADDR+0x18a>
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	2b02      	cmp	r3, #2
 8007096:	d00b      	beq.n	80070b0 <I2C_Master_ADDR+0x18a>
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	2b10      	cmp	r3, #16
 800709c:	d008      	beq.n	80070b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e007      	b.n	80070c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	e0a1      	b.n	800721c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070e8:	2300      	movs	r3, #0
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e085      	b.n	800721c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d14d      	bne.n	80071b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	2b04      	cmp	r3, #4
 800711e:	d016      	beq.n	800714e <I2C_Master_ADDR+0x228>
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	2b02      	cmp	r3, #2
 8007124:	d013      	beq.n	800714e <I2C_Master_ADDR+0x228>
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b10      	cmp	r3, #16
 800712a:	d010      	beq.n	800714e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	e007      	b.n	800715e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800715c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716c:	d117      	bne.n	800719e <I2C_Master_ADDR+0x278>
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007174:	d00b      	beq.n	800718e <I2C_Master_ADDR+0x268>
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	2b01      	cmp	r3, #1
 800717a:	d008      	beq.n	800718e <I2C_Master_ADDR+0x268>
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	2b08      	cmp	r3, #8
 8007180:	d005      	beq.n	800718e <I2C_Master_ADDR+0x268>
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	2b10      	cmp	r3, #16
 8007186:	d002      	beq.n	800718e <I2C_Master_ADDR+0x268>
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	2b20      	cmp	r3, #32
 800718c:	d107      	bne.n	800719e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800719c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	e032      	b.n	800721c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d4:	d117      	bne.n	8007206 <I2C_Master_ADDR+0x2e0>
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071dc:	d00b      	beq.n	80071f6 <I2C_Master_ADDR+0x2d0>
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d008      	beq.n	80071f6 <I2C_Master_ADDR+0x2d0>
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d005      	beq.n	80071f6 <I2C_Master_ADDR+0x2d0>
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d002      	beq.n	80071f6 <I2C_Master_ADDR+0x2d0>
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d107      	bne.n	8007206 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007204:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007222:	e00b      	b.n	800723c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
}
 800723a:	e7ff      	b.n	800723c <I2C_Master_ADDR+0x316>
 800723c:	bf00      	nop
 800723e:	3744      	adds	r7, #68	; 0x44
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007256:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d02b      	beq.n	80072ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728a:	b29b      	uxth	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d114      	bne.n	80072ba <I2C_SlaveTransmit_TXE+0x72>
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b29      	cmp	r3, #41	; 0x29
 8007294:	d111      	bne.n	80072ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2221      	movs	r2, #33	; 0x21
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2228      	movs	r2, #40	; 0x28
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff f9d9 	bl	800666c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d011      	beq.n	80072f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	781a      	ldrb	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007312:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d02c      	beq.n	8007378 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d114      	bne.n	8007378 <I2C_SlaveReceive_RXNE+0x74>
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b2a      	cmp	r3, #42	; 0x2a
 8007352:	d111      	bne.n	8007378 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007362:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2222      	movs	r2, #34	; 0x22
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2228      	movs	r2, #40	; 0x28
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff f984 	bl	8006680 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d012      	beq.n	80073b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073de:	2b28      	cmp	r3, #40	; 0x28
 80073e0:	d127      	bne.n	8007432 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	089b      	lsrs	r3, r3, #2
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80073fe:	2301      	movs	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	09db      	lsrs	r3, r3, #7
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	81bb      	strh	r3, [r7, #12]
 8007414:	e002      	b.n	800741c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007424:	89ba      	ldrh	r2, [r7, #12]
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff f932 	bl	8006694 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007430:	e00e      	b.n	8007450 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007432:	2300      	movs	r3, #0
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007466:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007476:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007478:	2300      	movs	r3, #0
 800747a:	60bb      	str	r3, [r7, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b4:	d172      	bne.n	800759c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b22      	cmp	r3, #34	; 0x22
 80074ba:	d002      	beq.n	80074c2 <I2C_Slave_STOPF+0x6a>
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b2a      	cmp	r3, #42	; 0x2a
 80074c0:	d135      	bne.n	800752e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	f043 0204 	orr.w	r2, r3, #4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fd fe05 	bl	800510a <HAL_DMA_GetState>
 8007500:	4603      	mov	r3, r0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d049      	beq.n	800759a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	4a69      	ldr	r2, [pc, #420]	; (80076b0 <I2C_Slave_STOPF+0x258>)
 800750c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	4618      	mov	r0, r3
 8007514:	f7fd fdd7 	bl	80050c6 <HAL_DMA_Abort_IT>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d03d      	beq.n	800759a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800752c:	e035      	b.n	800759a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f043 0204 	orr.w	r2, r3, #4
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007566:	4618      	mov	r0, r3
 8007568:	f7fd fdcf 	bl	800510a <HAL_DMA_GetState>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d014      	beq.n	800759c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007576:	4a4e      	ldr	r2, [pc, #312]	; (80076b0 <I2C_Slave_STOPF+0x258>)
 8007578:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	4618      	mov	r0, r3
 8007580:	f7fd fda1 	bl	80050c6 <HAL_DMA_Abort_IT>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d008      	beq.n	800759c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	e000      	b.n	800759c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800759a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d03e      	beq.n	8007624 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d112      	bne.n	80075da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d112      	bne.n	800760e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	f043 0204 	orr.w	r2, r3, #4
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f8b3 	bl	8007798 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007632:	e039      	b.n	80076a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b2a      	cmp	r3, #42	; 0x2a
 8007638:	d109      	bne.n	800764e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2228      	movs	r2, #40	; 0x28
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff f819 	bl	8006680 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b28      	cmp	r3, #40	; 0x28
 8007658:	d111      	bne.n	800767e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <I2C_Slave_STOPF+0x25c>)
 800765e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff f81a 	bl	80066b0 <HAL_I2C_ListenCpltCallback>
}
 800767c:	e014      	b.n	80076a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	2b22      	cmp	r3, #34	; 0x22
 8007684:	d002      	beq.n	800768c <I2C_Slave_STOPF+0x234>
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	2b22      	cmp	r3, #34	; 0x22
 800768a:	d10d      	bne.n	80076a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fe ffec 	bl	8006680 <HAL_I2C_SlaveRxCpltCallback>
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	08007e6d 	.word	0x08007e6d
 80076b4:	ffff0000 	.word	0xffff0000

080076b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d002      	beq.n	80076da <I2C_Slave_AF+0x22>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d129      	bne.n	800772e <I2C_Slave_AF+0x76>
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b28      	cmp	r3, #40	; 0x28
 80076de:	d126      	bne.n	800772e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a2c      	ldr	r2, [pc, #176]	; (8007794 <I2C_Slave_AF+0xdc>)
 80076e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800770e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fe ffc2 	bl	80066b0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800772c:	e02e      	b.n	800778c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	2b21      	cmp	r3, #33	; 0x21
 8007732:	d126      	bne.n	8007782 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <I2C_Slave_AF+0xdc>)
 8007738:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2221      	movs	r2, #33	; 0x21
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800775e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007768:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007778:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fe ff76 	bl	800666c <HAL_I2C_SlaveTxCpltCallback>
}
 8007780:	e004      	b.n	800778c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800778a:	615a      	str	r2, [r3, #20]
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	ffff0000 	.word	0xffff0000

08007798 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b10      	cmp	r3, #16
 80077b4:	d002      	beq.n	80077bc <I2C_ITError+0x24>
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b40      	cmp	r3, #64	; 0x40
 80077ba:	d10a      	bne.n	80077d2 <I2C_ITError+0x3a>
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b22      	cmp	r3, #34	; 0x22
 80077c0:	d107      	bne.n	80077d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077d8:	2b28      	cmp	r3, #40	; 0x28
 80077da:	d107      	bne.n	80077ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2228      	movs	r2, #40	; 0x28
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077ea:	e015      	b.n	8007818 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fa:	d00a      	beq.n	8007812 <I2C_ITError+0x7a>
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	2b60      	cmp	r3, #96	; 0x60
 8007800:	d007      	beq.n	8007812 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007826:	d162      	bne.n	80078ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007836:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	d020      	beq.n	8007888 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784a:	4a6a      	ldr	r2, [pc, #424]	; (80079f4 <I2C_ITError+0x25c>)
 800784c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007852:	4618      	mov	r0, r3
 8007854:	f7fd fc37 	bl	80050c6 <HAL_DMA_Abort_IT>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8089 	beq.w	8007972 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007882:	4610      	mov	r0, r2
 8007884:	4798      	blx	r3
 8007886:	e074      	b.n	8007972 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	4a59      	ldr	r2, [pc, #356]	; (80079f4 <I2C_ITError+0x25c>)
 800788e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	4618      	mov	r0, r3
 8007896:	f7fd fc16 	bl	80050c6 <HAL_DMA_Abort_IT>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d068      	beq.n	8007972 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d10b      	bne.n	80078c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	b2d2      	uxtb	r2, r2
 80078ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0201 	bic.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	e041      	b.n	8007972 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b60      	cmp	r3, #96	; 0x60
 80078f8:	d125      	bne.n	8007946 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d10b      	bne.n	800792e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fe fede 	bl	8006700 <HAL_I2C_AbortCpltCallback>
 8007944:	e015      	b.n	8007972 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007950:	2b40      	cmp	r3, #64	; 0x40
 8007952:	d10b      	bne.n	800796c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fe febd 	bl	80066ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10e      	bne.n	80079a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007988:	2b00      	cmp	r3, #0
 800798a:	d109      	bne.n	80079a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d113      	bne.n	80079ec <I2C_ITError+0x254>
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	2b28      	cmp	r3, #40	; 0x28
 80079c8:	d110      	bne.n	80079ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a0a      	ldr	r2, [pc, #40]	; (80079f8 <I2C_ITError+0x260>)
 80079ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fe fe62 	bl	80066b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	08007e6d 	.word	0x08007e6d
 80079f8:	ffff0000 	.word	0xffff0000

080079fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	607a      	str	r2, [r7, #4]
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d006      	beq.n	8007a26 <I2C_MasterRequestWrite+0x2a>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d003      	beq.n	8007a26 <I2C_MasterRequestWrite+0x2a>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a24:	d108      	bne.n	8007a38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e00b      	b.n	8007a50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	2b12      	cmp	r3, #18
 8007a3e:	d107      	bne.n	8007a50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 faad 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00d      	beq.n	8007a84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a76:	d103      	bne.n	8007a80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e035      	b.n	8007af0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a8c:	d108      	bne.n	8007aa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a8e:	897b      	ldrh	r3, [r7, #10]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a9c:	611a      	str	r2, [r3, #16]
 8007a9e:	e01b      	b.n	8007ad8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007aa0:	897b      	ldrh	r3, [r7, #10]
 8007aa2:	11db      	asrs	r3, r3, #7
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	f003 0306 	and.w	r3, r3, #6
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f063 030f 	orn	r3, r3, #15
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	490e      	ldr	r1, [pc, #56]	; (8007af8 <I2C_MasterRequestWrite+0xfc>)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fad3 	bl	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e010      	b.n	8007af0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ace:	897b      	ldrh	r3, [r7, #10]
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	4907      	ldr	r1, [pc, #28]	; (8007afc <I2C_MasterRequestWrite+0x100>)
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 fac3 	bl	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	00010008 	.word	0x00010008
 8007afc:	00010002 	.word	0x00010002

08007b00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d006      	beq.n	8007b3a <I2C_MasterRequestRead+0x3a>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d003      	beq.n	8007b3a <I2C_MasterRequestRead+0x3a>
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b38:	d108      	bne.n	8007b4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e00b      	b.n	8007b64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	2b11      	cmp	r3, #17
 8007b52:	d107      	bne.n	8007b64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fa23 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00d      	beq.n	8007b98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8a:	d103      	bne.n	8007b94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e079      	b.n	8007c8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ba0:	d108      	bne.n	8007bb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ba2:	897b      	ldrh	r3, [r7, #10]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	611a      	str	r2, [r3, #16]
 8007bb2:	e05f      	b.n	8007c74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bb4:	897b      	ldrh	r3, [r7, #10]
 8007bb6:	11db      	asrs	r3, r3, #7
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f003 0306 	and.w	r3, r3, #6
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f063 030f 	orn	r3, r3, #15
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4930      	ldr	r1, [pc, #192]	; (8007c94 <I2C_MasterRequestRead+0x194>)
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa49 	bl	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e054      	b.n	8007c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007be2:	897b      	ldrh	r3, [r7, #10]
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4929      	ldr	r1, [pc, #164]	; (8007c98 <I2C_MasterRequestRead+0x198>)
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fa39 	bl	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e044      	b.n	8007c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f9c1 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00d      	beq.n	8007c5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d103      	bne.n	8007c58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e017      	b.n	8007c8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007c5c:	897b      	ldrh	r3, [r7, #10]
 8007c5e:	11db      	asrs	r3, r3, #7
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	f003 0306 	and.w	r3, r3, #6
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f063 030e 	orn	r3, r3, #14
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4907      	ldr	r1, [pc, #28]	; (8007c98 <I2C_MasterRequestRead+0x198>)
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f9f5 	bl	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	00010008 	.word	0x00010008
 8007c98:	00010002 	.word	0x00010002

08007c9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	817b      	strh	r3, [r7, #10]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	813b      	strh	r3, [r7, #8]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f96a 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00d      	beq.n	8007d0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cfc:	d103      	bne.n	8007d06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e0aa      	b.n	8007e60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d0a:	897b      	ldrh	r3, [r7, #10]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	6a3a      	ldr	r2, [r7, #32]
 8007d1e:	4952      	ldr	r1, [pc, #328]	; (8007e68 <I2C_RequestMemoryRead+0x1cc>)
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f9a2 	bl	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e097      	b.n	8007e60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d48:	6a39      	ldr	r1, [r7, #32]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 fa0c 	bl	8008168 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00d      	beq.n	8007d72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d107      	bne.n	8007d6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e076      	b.n	8007e60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d105      	bne.n	8007d84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d78:	893b      	ldrh	r3, [r7, #8]
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	611a      	str	r2, [r3, #16]
 8007d82:	e021      	b.n	8007dc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d84:	893b      	ldrh	r3, [r7, #8]
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d94:	6a39      	ldr	r1, [r7, #32]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f9e6 	bl	8008168 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d107      	bne.n	8007dba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e050      	b.n	8007e60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dca:	6a39      	ldr	r1, [r7, #32]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f9cb 	bl	8008168 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00d      	beq.n	8007df4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d107      	bne.n	8007df0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e035      	b.n	8007e60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f8d3 	bl	8007fbc <I2C_WaitOnFlagUntilTimeout>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00d      	beq.n	8007e38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e2a:	d103      	bne.n	8007e34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e013      	b.n	8007e60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e38:	897b      	ldrh	r3, [r7, #10]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f043 0301 	orr.w	r3, r3, #1
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	6a3a      	ldr	r2, [r7, #32]
 8007e4c:	4906      	ldr	r1, [pc, #24]	; (8007e68 <I2C_RequestMemoryRead+0x1cc>)
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 f90b 	bl	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	00010002 	.word	0x00010002

08007e6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e84:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e86:	4b4b      	ldr	r3, [pc, #300]	; (8007fb4 <I2C_DMAAbort+0x148>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	4a4a      	ldr	r2, [pc, #296]	; (8007fb8 <I2C_DMAAbort+0x14c>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	0a1a      	lsrs	r2, r3, #8
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	00da      	lsls	r2, r3, #3
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	f043 0220 	orr.w	r2, r3, #32
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007eb2:	e00a      	b.n	8007eca <I2C_DMAAbort+0x5e>
    }
    count--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec8:	d0ea      	beq.n	8007ea0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0201 	bic.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b60      	cmp	r3, #96	; 0x60
 8007f3a:	d10e      	bne.n	8007f5a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f52:	6978      	ldr	r0, [r7, #20]
 8007f54:	f7fe fbd4 	bl	8006700 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f58:	e027      	b.n	8007faa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f5a:	7cfb      	ldrb	r3, [r7, #19]
 8007f5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f60:	2b28      	cmp	r3, #40	; 0x28
 8007f62:	d117      	bne.n	8007f94 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2200      	movs	r2, #0
 8007f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2228      	movs	r2, #40	; 0x28
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f92:	e007      	b.n	8007fa4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007fa4:	6978      	ldr	r0, [r7, #20]
 8007fa6:	f7fe fba1 	bl	80066ec <HAL_I2C_ErrorCallback>
}
 8007faa:	bf00      	nop
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000014 	.word	0x20000014
 8007fb8:	14f8b589 	.word	0x14f8b589

08007fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fcc:	e025      	b.n	800801a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd4:	d021      	beq.n	800801a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fd6:	f7fc fec5 	bl	8004d64 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d302      	bcc.n	8007fec <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d116      	bne.n	800801a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	f043 0220 	orr.w	r2, r3, #32
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e023      	b.n	8008062 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b01      	cmp	r3, #1
 8008022:	d10d      	bne.n	8008040 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	43da      	mvns	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4013      	ands	r3, r2
 8008030:	b29b      	uxth	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	bf0c      	ite	eq
 8008036:	2301      	moveq	r3, #1
 8008038:	2300      	movne	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	461a      	mov	r2, r3
 800803e:	e00c      	b.n	800805a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	43da      	mvns	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4013      	ands	r3, r2
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	bf0c      	ite	eq
 8008052:	2301      	moveq	r3, #1
 8008054:	2300      	movne	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	461a      	mov	r2, r3
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	429a      	cmp	r2, r3
 800805e:	d0b6      	beq.n	8007fce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	607a      	str	r2, [r7, #4]
 8008076:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008078:	e051      	b.n	800811e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008088:	d123      	bne.n	80080d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008098:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f043 0204 	orr.w	r2, r3, #4
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e046      	b.n	8008160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d8:	d021      	beq.n	800811e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080da:	f7fc fe43 	bl	8004d64 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d302      	bcc.n	80080f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d116      	bne.n	800811e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	f043 0220 	orr.w	r2, r3, #32
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e020      	b.n	8008160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	0c1b      	lsrs	r3, r3, #16
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	d10c      	bne.n	8008142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	43da      	mvns	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4013      	ands	r3, r2
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	bf14      	ite	ne
 800813a:	2301      	movne	r3, #1
 800813c:	2300      	moveq	r3, #0
 800813e:	b2db      	uxtb	r3, r3
 8008140:	e00b      	b.n	800815a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	43da      	mvns	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4013      	ands	r3, r2
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	bf14      	ite	ne
 8008154:	2301      	movne	r3, #1
 8008156:	2300      	moveq	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d18d      	bne.n	800807a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008174:	e02d      	b.n	80081d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 f900 	bl	800837c <I2C_IsAcknowledgeFailed>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e02d      	b.n	80081e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800818c:	d021      	beq.n	80081d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818e:	f7fc fde9 	bl	8004d64 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	429a      	cmp	r2, r3
 800819c:	d302      	bcc.n	80081a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d116      	bne.n	80081d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	f043 0220 	orr.w	r2, r3, #32
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e007      	b.n	80081e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081dc:	2b80      	cmp	r3, #128	; 0x80
 80081de:	d1ca      	bne.n	8008176 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081f6:	e02d      	b.n	8008254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f8bf 	bl	800837c <I2C_IsAcknowledgeFailed>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e02d      	b.n	8008264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820e:	d021      	beq.n	8008254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008210:	f7fc fda8 	bl	8004d64 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	429a      	cmp	r2, r3
 800821e:	d302      	bcc.n	8008226 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d116      	bne.n	8008254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	f043 0220 	orr.w	r2, r3, #32
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e007      	b.n	8008264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b04      	cmp	r3, #4
 8008260:	d1ca      	bne.n	80081f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008278:	4b13      	ldr	r3, [pc, #76]	; (80082c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	08db      	lsrs	r3, r3, #3
 800827e:	4a13      	ldr	r2, [pc, #76]	; (80082cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008280:	fba2 2303 	umull	r2, r3, r2, r3
 8008284:	0a1a      	lsrs	r2, r3, #8
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b01      	subs	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d107      	bne.n	80082aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	f043 0220 	orr.w	r2, r3, #32
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e008      	b.n	80082bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b8:	d0e9      	beq.n	800828e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	20000014 	.word	0x20000014
 80082cc:	14f8b589 	.word	0x14f8b589

080082d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082dc:	e042      	b.n	8008364 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b10      	cmp	r3, #16
 80082ea:	d119      	bne.n	8008320 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0210 	mvn.w	r2, #16
 80082f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2220      	movs	r2, #32
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e029      	b.n	8008374 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008320:	f7fc fd20 	bl	8004d64 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	429a      	cmp	r2, r3
 800832e:	d302      	bcc.n	8008336 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d116      	bne.n	8008364 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	f043 0220 	orr.w	r2, r3, #32
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e007      	b.n	8008374 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d1b5      	bne.n	80082de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008392:	d11b      	bne.n	80083cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800839c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	f043 0204 	orr.w	r2, r3, #4
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e000      	b.n	80083ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083ea:	d103      	bne.n	80083f4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80083f2:	e007      	b.n	8008404 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083fc:	d102      	bne.n	8008404 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2208      	movs	r2, #8
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e267      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d075      	beq.n	800851a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800842e:	4b88      	ldr	r3, [pc, #544]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 030c 	and.w	r3, r3, #12
 8008436:	2b04      	cmp	r3, #4
 8008438:	d00c      	beq.n	8008454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800843a:	4b85      	ldr	r3, [pc, #532]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008442:	2b08      	cmp	r3, #8
 8008444:	d112      	bne.n	800846c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008446:	4b82      	ldr	r3, [pc, #520]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800844e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008452:	d10b      	bne.n	800846c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008454:	4b7e      	ldr	r3, [pc, #504]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d05b      	beq.n	8008518 <HAL_RCC_OscConfig+0x108>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d157      	bne.n	8008518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e242      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008474:	d106      	bne.n	8008484 <HAL_RCC_OscConfig+0x74>
 8008476:	4b76      	ldr	r3, [pc, #472]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a75      	ldr	r2, [pc, #468]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 800847c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	e01d      	b.n	80084c0 <HAL_RCC_OscConfig+0xb0>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800848c:	d10c      	bne.n	80084a8 <HAL_RCC_OscConfig+0x98>
 800848e:	4b70      	ldr	r3, [pc, #448]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a6f      	ldr	r2, [pc, #444]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	4b6d      	ldr	r3, [pc, #436]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a6c      	ldr	r2, [pc, #432]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80084a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	e00b      	b.n	80084c0 <HAL_RCC_OscConfig+0xb0>
 80084a8:	4b69      	ldr	r3, [pc, #420]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a68      	ldr	r2, [pc, #416]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80084ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	4b66      	ldr	r3, [pc, #408]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a65      	ldr	r2, [pc, #404]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80084ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d013      	beq.n	80084f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c8:	f7fc fc4c 	bl	8004d64 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084d0:	f7fc fc48 	bl	8004d64 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b64      	cmp	r3, #100	; 0x64
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e207      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084e2:	4b5b      	ldr	r3, [pc, #364]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0f0      	beq.n	80084d0 <HAL_RCC_OscConfig+0xc0>
 80084ee:	e014      	b.n	800851a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084f0:	f7fc fc38 	bl	8004d64 <HAL_GetTick>
 80084f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084f6:	e008      	b.n	800850a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084f8:	f7fc fc34 	bl	8004d64 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b64      	cmp	r3, #100	; 0x64
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e1f3      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800850a:	4b51      	ldr	r3, [pc, #324]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1f0      	bne.n	80084f8 <HAL_RCC_OscConfig+0xe8>
 8008516:	e000      	b.n	800851a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d063      	beq.n	80085ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008526:	4b4a      	ldr	r3, [pc, #296]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 030c 	and.w	r3, r3, #12
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00b      	beq.n	800854a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008532:	4b47      	ldr	r3, [pc, #284]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800853a:	2b08      	cmp	r3, #8
 800853c:	d11c      	bne.n	8008578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800853e:	4b44      	ldr	r3, [pc, #272]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d116      	bne.n	8008578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800854a:	4b41      	ldr	r3, [pc, #260]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <HAL_RCC_OscConfig+0x152>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d001      	beq.n	8008562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e1c7      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008562:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	4937      	ldr	r1, [pc, #220]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008572:	4313      	orrs	r3, r2
 8008574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008576:	e03a      	b.n	80085ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d020      	beq.n	80085c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008580:	4b34      	ldr	r3, [pc, #208]	; (8008654 <HAL_RCC_OscConfig+0x244>)
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008586:	f7fc fbed 	bl	8004d64 <HAL_GetTick>
 800858a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800858c:	e008      	b.n	80085a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800858e:	f7fc fbe9 	bl	8004d64 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d901      	bls.n	80085a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e1a8      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085a0:	4b2b      	ldr	r3, [pc, #172]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0f0      	beq.n	800858e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ac:	4b28      	ldr	r3, [pc, #160]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	4925      	ldr	r1, [pc, #148]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	600b      	str	r3, [r1, #0]
 80085c0:	e015      	b.n	80085ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085c2:	4b24      	ldr	r3, [pc, #144]	; (8008654 <HAL_RCC_OscConfig+0x244>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c8:	f7fc fbcc 	bl	8004d64 <HAL_GetTick>
 80085cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085ce:	e008      	b.n	80085e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085d0:	f7fc fbc8 	bl	8004d64 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e187      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085e2:	4b1b      	ldr	r3, [pc, #108]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f0      	bne.n	80085d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d036      	beq.n	8008668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d016      	beq.n	8008630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <HAL_RCC_OscConfig+0x248>)
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008608:	f7fc fbac 	bl	8004d64 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008610:	f7fc fba8 	bl	8004d64 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e167      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008622:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <HAL_RCC_OscConfig+0x240>)
 8008624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0f0      	beq.n	8008610 <HAL_RCC_OscConfig+0x200>
 800862e:	e01b      	b.n	8008668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008630:	4b09      	ldr	r3, [pc, #36]	; (8008658 <HAL_RCC_OscConfig+0x248>)
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008636:	f7fc fb95 	bl	8004d64 <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800863c:	e00e      	b.n	800865c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800863e:	f7fc fb91 	bl	8004d64 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d907      	bls.n	800865c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e150      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
 8008650:	40023800 	.word	0x40023800
 8008654:	42470000 	.word	0x42470000
 8008658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800865c:	4b88      	ldr	r3, [pc, #544]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800865e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1ea      	bne.n	800863e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8097 	beq.w	80087a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800867a:	4b81      	ldr	r3, [pc, #516]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10f      	bne.n	80086a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]
 800868a:	4b7d      	ldr	r3, [pc, #500]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	4a7c      	ldr	r2, [pc, #496]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008694:	6413      	str	r3, [r2, #64]	; 0x40
 8008696:	4b7a      	ldr	r3, [pc, #488]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086a2:	2301      	movs	r3, #1
 80086a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a6:	4b77      	ldr	r3, [pc, #476]	; (8008884 <HAL_RCC_OscConfig+0x474>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d118      	bne.n	80086e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086b2:	4b74      	ldr	r3, [pc, #464]	; (8008884 <HAL_RCC_OscConfig+0x474>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a73      	ldr	r2, [pc, #460]	; (8008884 <HAL_RCC_OscConfig+0x474>)
 80086b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086be:	f7fc fb51 	bl	8004d64 <HAL_GetTick>
 80086c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086c4:	e008      	b.n	80086d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086c6:	f7fc fb4d 	bl	8004d64 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e10c      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086d8:	4b6a      	ldr	r3, [pc, #424]	; (8008884 <HAL_RCC_OscConfig+0x474>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f0      	beq.n	80086c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d106      	bne.n	80086fa <HAL_RCC_OscConfig+0x2ea>
 80086ec:	4b64      	ldr	r3, [pc, #400]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 80086ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f0:	4a63      	ldr	r2, [pc, #396]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 80086f2:	f043 0301 	orr.w	r3, r3, #1
 80086f6:	6713      	str	r3, [r2, #112]	; 0x70
 80086f8:	e01c      	b.n	8008734 <HAL_RCC_OscConfig+0x324>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d10c      	bne.n	800871c <HAL_RCC_OscConfig+0x30c>
 8008702:	4b5f      	ldr	r3, [pc, #380]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008706:	4a5e      	ldr	r2, [pc, #376]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008708:	f043 0304 	orr.w	r3, r3, #4
 800870c:	6713      	str	r3, [r2, #112]	; 0x70
 800870e:	4b5c      	ldr	r3, [pc, #368]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	4a5b      	ldr	r2, [pc, #364]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008714:	f043 0301 	orr.w	r3, r3, #1
 8008718:	6713      	str	r3, [r2, #112]	; 0x70
 800871a:	e00b      	b.n	8008734 <HAL_RCC_OscConfig+0x324>
 800871c:	4b58      	ldr	r3, [pc, #352]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800871e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008720:	4a57      	ldr	r2, [pc, #348]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008722:	f023 0301 	bic.w	r3, r3, #1
 8008726:	6713      	str	r3, [r2, #112]	; 0x70
 8008728:	4b55      	ldr	r3, [pc, #340]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800872a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872c:	4a54      	ldr	r2, [pc, #336]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800872e:	f023 0304 	bic.w	r3, r3, #4
 8008732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d015      	beq.n	8008768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873c:	f7fc fb12 	bl	8004d64 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008742:	e00a      	b.n	800875a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008744:	f7fc fb0e 	bl	8004d64 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008752:	4293      	cmp	r3, r2
 8008754:	d901      	bls.n	800875a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e0cb      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800875a:	4b49      	ldr	r3, [pc, #292]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0ee      	beq.n	8008744 <HAL_RCC_OscConfig+0x334>
 8008766:	e014      	b.n	8008792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008768:	f7fc fafc 	bl	8004d64 <HAL_GetTick>
 800876c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800876e:	e00a      	b.n	8008786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008770:	f7fc faf8 	bl	8004d64 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	f241 3288 	movw	r2, #5000	; 0x1388
 800877e:	4293      	cmp	r3, r2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e0b5      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008786:	4b3e      	ldr	r3, [pc, #248]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1ee      	bne.n	8008770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d105      	bne.n	80087a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008798:	4b39      	ldr	r3, [pc, #228]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	4a38      	ldr	r2, [pc, #224]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800879e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 80a1 	beq.w	80088f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087ae:	4b34      	ldr	r3, [pc, #208]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 030c 	and.w	r3, r3, #12
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d05c      	beq.n	8008874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d141      	bne.n	8008846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087c2:	4b31      	ldr	r3, [pc, #196]	; (8008888 <HAL_RCC_OscConfig+0x478>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c8:	f7fc facc 	bl	8004d64 <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087d0:	f7fc fac8 	bl	8004d64 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e087      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087e2:	4b27      	ldr	r3, [pc, #156]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	69da      	ldr	r2, [r3, #28]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	019b      	lsls	r3, r3, #6
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	085b      	lsrs	r3, r3, #1
 8008806:	3b01      	subs	r3, #1
 8008808:	041b      	lsls	r3, r3, #16
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	061b      	lsls	r3, r3, #24
 8008812:	491b      	ldr	r1, [pc, #108]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008814:	4313      	orrs	r3, r2
 8008816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008818:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <HAL_RCC_OscConfig+0x478>)
 800881a:	2201      	movs	r2, #1
 800881c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881e:	f7fc faa1 	bl	8004d64 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008826:	f7fc fa9d 	bl	8004d64 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e05c      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008838:	4b11      	ldr	r3, [pc, #68]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <HAL_RCC_OscConfig+0x416>
 8008844:	e054      	b.n	80088f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008846:	4b10      	ldr	r3, [pc, #64]	; (8008888 <HAL_RCC_OscConfig+0x478>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800884c:	f7fc fa8a 	bl	8004d64 <HAL_GetTick>
 8008850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008852:	e008      	b.n	8008866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008854:	f7fc fa86 	bl	8004d64 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e045      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008866:	4b06      	ldr	r3, [pc, #24]	; (8008880 <HAL_RCC_OscConfig+0x470>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f0      	bne.n	8008854 <HAL_RCC_OscConfig+0x444>
 8008872:	e03d      	b.n	80088f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d107      	bne.n	800888c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e038      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
 8008880:	40023800 	.word	0x40023800
 8008884:	40007000 	.word	0x40007000
 8008888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800888c:	4b1b      	ldr	r3, [pc, #108]	; (80088fc <HAL_RCC_OscConfig+0x4ec>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d028      	beq.n	80088ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d121      	bne.n	80088ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d11a      	bne.n	80088ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80088bc:	4013      	ands	r3, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d111      	bne.n	80088ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	3b01      	subs	r3, #1
 80088d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088d8:	429a      	cmp	r2, r3
 80088da:	d107      	bne.n	80088ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d001      	beq.n	80088f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e000      	b.n	80088f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40023800 	.word	0x40023800

08008900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e0cc      	b.n	8008aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008914:	4b68      	ldr	r3, [pc, #416]	; (8008ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d90c      	bls.n	800893c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008922:	4b65      	ldr	r3, [pc, #404]	; (8008ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	b2d2      	uxtb	r2, r2
 8008928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800892a:	4b63      	ldr	r3, [pc, #396]	; (8008ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d001      	beq.n	800893c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e0b8      	b.n	8008aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d020      	beq.n	800898a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008954:	4b59      	ldr	r3, [pc, #356]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	4a58      	ldr	r2, [pc, #352]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 800895a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800895e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800896c:	4b53      	ldr	r3, [pc, #332]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	4a52      	ldr	r2, [pc, #328]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008978:	4b50      	ldr	r3, [pc, #320]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	494d      	ldr	r1, [pc, #308]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008986:	4313      	orrs	r3, r2
 8008988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d044      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d107      	bne.n	80089ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800899e:	4b47      	ldr	r3, [pc, #284]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d119      	bne.n	80089de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e07f      	b.n	8008aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d003      	beq.n	80089be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d107      	bne.n	80089ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089be:	4b3f      	ldr	r3, [pc, #252]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d109      	bne.n	80089de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e06f      	b.n	8008aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089ce:	4b3b      	ldr	r3, [pc, #236]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e067      	b.n	8008aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089de:	4b37      	ldr	r3, [pc, #220]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f023 0203 	bic.w	r2, r3, #3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	4934      	ldr	r1, [pc, #208]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089f0:	f7fc f9b8 	bl	8004d64 <HAL_GetTick>
 80089f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f6:	e00a      	b.n	8008a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089f8:	f7fc f9b4 	bl	8004d64 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e04f      	b.n	8008aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a0e:	4b2b      	ldr	r3, [pc, #172]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 020c 	and.w	r2, r3, #12
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d1eb      	bne.n	80089f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a20:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d20c      	bcs.n	8008a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a2e:	4b22      	ldr	r3, [pc, #136]	; (8008ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	b2d2      	uxtb	r2, r2
 8008a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a36:	4b20      	ldr	r3, [pc, #128]	; (8008ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d001      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e032      	b.n	8008aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d008      	beq.n	8008a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a54:	4b19      	ldr	r3, [pc, #100]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	4916      	ldr	r1, [pc, #88]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	490e      	ldr	r1, [pc, #56]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a86:	f000 f821 	bl	8008acc <HAL_RCC_GetSysClockFreq>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	4b0b      	ldr	r3, [pc, #44]	; (8008abc <HAL_RCC_ClockConfig+0x1bc>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	091b      	lsrs	r3, r3, #4
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	490a      	ldr	r1, [pc, #40]	; (8008ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8008a98:	5ccb      	ldrb	r3, [r1, r3]
 8008a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9e:	4a09      	ldr	r2, [pc, #36]	; (8008ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fc f918 	bl	8004cdc <HAL_InitTick>

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	40023c00 	.word	0x40023c00
 8008abc:	40023800 	.word	0x40023800
 8008ac0:	0800e998 	.word	0x0800e998
 8008ac4:	20000014 	.word	0x20000014
 8008ac8:	20000018 	.word	0x20000018

08008acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad0:	b094      	sub	sp, #80	; 0x50
 8008ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad8:	2300      	movs	r3, #0
 8008ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008adc:	2300      	movs	r3, #0
 8008ade:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ae4:	4b79      	ldr	r3, [pc, #484]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 030c 	and.w	r3, r3, #12
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d00d      	beq.n	8008b0c <HAL_RCC_GetSysClockFreq+0x40>
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	f200 80e1 	bhi.w	8008cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_RCC_GetSysClockFreq+0x34>
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	d003      	beq.n	8008b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8008afe:	e0db      	b.n	8008cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b00:	4b73      	ldr	r3, [pc, #460]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008b04:	e0db      	b.n	8008cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b06:	4b73      	ldr	r3, [pc, #460]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b0a:	e0d8      	b.n	8008cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b0c:	4b6f      	ldr	r3, [pc, #444]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b16:	4b6d      	ldr	r3, [pc, #436]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d063      	beq.n	8008bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b22:	4b6a      	ldr	r3, [pc, #424]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	099b      	lsrs	r3, r3, #6
 8008b28:	2200      	movs	r2, #0
 8008b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b34:	633b      	str	r3, [r7, #48]	; 0x30
 8008b36:	2300      	movs	r3, #0
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008b3e:	4622      	mov	r2, r4
 8008b40:	462b      	mov	r3, r5
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f04f 0100 	mov.w	r1, #0
 8008b4a:	0159      	lsls	r1, r3, #5
 8008b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b50:	0150      	lsls	r0, r2, #5
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4621      	mov	r1, r4
 8008b58:	1a51      	subs	r1, r2, r1
 8008b5a:	6139      	str	r1, [r7, #16]
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b70:	4659      	mov	r1, fp
 8008b72:	018b      	lsls	r3, r1, #6
 8008b74:	4651      	mov	r1, sl
 8008b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b7a:	4651      	mov	r1, sl
 8008b7c:	018a      	lsls	r2, r1, #6
 8008b7e:	4651      	mov	r1, sl
 8008b80:	ebb2 0801 	subs.w	r8, r2, r1
 8008b84:	4659      	mov	r1, fp
 8008b86:	eb63 0901 	sbc.w	r9, r3, r1
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b9e:	4690      	mov	r8, r2
 8008ba0:	4699      	mov	r9, r3
 8008ba2:	4623      	mov	r3, r4
 8008ba4:	eb18 0303 	adds.w	r3, r8, r3
 8008ba8:	60bb      	str	r3, [r7, #8]
 8008baa:	462b      	mov	r3, r5
 8008bac:	eb49 0303 	adc.w	r3, r9, r3
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	f04f 0200 	mov.w	r2, #0
 8008bb6:	f04f 0300 	mov.w	r3, #0
 8008bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	024b      	lsls	r3, r1, #9
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008bc8:	4621      	mov	r1, r4
 8008bca:	024a      	lsls	r2, r1, #9
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bdc:	f7f8 f834 	bl	8000c48 <__aeabi_uldivmod>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4613      	mov	r3, r2
 8008be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008be8:	e058      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bea:	4b38      	ldr	r3, [pc, #224]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	099b      	lsrs	r3, r3, #6
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008bfa:	623b      	str	r3, [r7, #32]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	f04f 0000 	mov.w	r0, #0
 8008c0c:	f04f 0100 	mov.w	r1, #0
 8008c10:	0159      	lsls	r1, r3, #5
 8008c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c16:	0150      	lsls	r0, r2, #5
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c22:	4649      	mov	r1, r9
 8008c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	f04f 0300 	mov.w	r3, #0
 8008c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8008c40:	eb63 050b 	sbc.w	r5, r3, fp
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	00eb      	lsls	r3, r5, #3
 8008c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c52:	00e2      	lsls	r2, r4, #3
 8008c54:	4614      	mov	r4, r2
 8008c56:	461d      	mov	r5, r3
 8008c58:	4643      	mov	r3, r8
 8008c5a:	18e3      	adds	r3, r4, r3
 8008c5c:	603b      	str	r3, [r7, #0]
 8008c5e:	464b      	mov	r3, r9
 8008c60:	eb45 0303 	adc.w	r3, r5, r3
 8008c64:	607b      	str	r3, [r7, #4]
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	f04f 0300 	mov.w	r3, #0
 8008c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c72:	4629      	mov	r1, r5
 8008c74:	028b      	lsls	r3, r1, #10
 8008c76:	4621      	mov	r1, r4
 8008c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	028a      	lsls	r2, r1, #10
 8008c80:	4610      	mov	r0, r2
 8008c82:	4619      	mov	r1, r3
 8008c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c86:	2200      	movs	r2, #0
 8008c88:	61bb      	str	r3, [r7, #24]
 8008c8a:	61fa      	str	r2, [r7, #28]
 8008c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c90:	f7f7 ffda 	bl	8000c48 <__aeabi_uldivmod>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4613      	mov	r3, r2
 8008c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	0c1b      	lsrs	r3, r3, #16
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008cb6:	e002      	b.n	8008cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cb8:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008cba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3750      	adds	r7, #80	; 0x50
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cca:	bf00      	nop
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	00f42400 	.word	0x00f42400
 8008cd4:	007a1200 	.word	0x007a1200

08008cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cdc:	4b03      	ldr	r3, [pc, #12]	; (8008cec <HAL_RCC_GetHCLKFreq+0x14>)
 8008cde:	681b      	ldr	r3, [r3, #0]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20000014 	.word	0x20000014

08008cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cf4:	f7ff fff0 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	0a9b      	lsrs	r3, r3, #10
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	4903      	ldr	r1, [pc, #12]	; (8008d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d06:	5ccb      	ldrb	r3, [r1, r3]
 8008d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	40023800 	.word	0x40023800
 8008d14:	0800e9a8 	.word	0x0800e9a8

08008d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d1c:	f7ff ffdc 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8008d20:	4602      	mov	r2, r0
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	0b5b      	lsrs	r3, r3, #13
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	4903      	ldr	r1, [pc, #12]	; (8008d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d2e:	5ccb      	ldrb	r3, [r1, r3]
 8008d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40023800 	.word	0x40023800
 8008d3c:	0800e9a8 	.word	0x0800e9a8

08008d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e07b      	b.n	8008e4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d108      	bne.n	8008d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d62:	d009      	beq.n	8008d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	61da      	str	r2, [r3, #28]
 8008d6a:	e005      	b.n	8008d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d106      	bne.n	8008d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7fa fab4 	bl	8003300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	431a      	orrs	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008de8:	431a      	orrs	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfc:	ea42 0103 	orr.w	r1, r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	f003 0104 	and.w	r1, r3, #4
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	f003 0210 	and.w	r2, r3, #16
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69da      	ldr	r2, [r3, #28]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b082      	sub	sp, #8
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e041      	b.n	8008ee8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d106      	bne.n	8008e7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7fa faa9 	bl	80033d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2202      	movs	r2, #2
 8008e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f000 fed1 	bl	8009c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d001      	beq.n	8008f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e04e      	b.n	8008fa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0201 	orr.w	r2, r2, #1
 8008f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a23      	ldr	r2, [pc, #140]	; (8008fb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d022      	beq.n	8008f70 <HAL_TIM_Base_Start_IT+0x80>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f32:	d01d      	beq.n	8008f70 <HAL_TIM_Base_Start_IT+0x80>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1f      	ldr	r2, [pc, #124]	; (8008fb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d018      	beq.n	8008f70 <HAL_TIM_Base_Start_IT+0x80>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1e      	ldr	r2, [pc, #120]	; (8008fbc <HAL_TIM_Base_Start_IT+0xcc>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d013      	beq.n	8008f70 <HAL_TIM_Base_Start_IT+0x80>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1c      	ldr	r2, [pc, #112]	; (8008fc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00e      	beq.n	8008f70 <HAL_TIM_Base_Start_IT+0x80>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a1b      	ldr	r2, [pc, #108]	; (8008fc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d009      	beq.n	8008f70 <HAL_TIM_Base_Start_IT+0x80>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d004      	beq.n	8008f70 <HAL_TIM_Base_Start_IT+0x80>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <HAL_TIM_Base_Start_IT+0xdc>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d111      	bne.n	8008f94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b06      	cmp	r3, #6
 8008f80:	d010      	beq.n	8008fa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f042 0201 	orr.w	r2, r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f92:	e007      	b.n	8008fa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0201 	orr.w	r2, r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40010000 	.word	0x40010000
 8008fb8:	40000400 	.word	0x40000400
 8008fbc:	40000800 	.word	0x40000800
 8008fc0:	40000c00 	.word	0x40000c00
 8008fc4:	40010400 	.word	0x40010400
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40001800 	.word	0x40001800

08008fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e041      	b.n	8009066 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f839 	bl	800906e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3304      	adds	r3, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f000 fe12 	bl	8009c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
	...

08009084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d109      	bne.n	80090a8 <HAL_TIM_PWM_Start+0x24>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b01      	cmp	r3, #1
 800909e:	bf14      	ite	ne
 80090a0:	2301      	movne	r3, #1
 80090a2:	2300      	moveq	r3, #0
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	e022      	b.n	80090ee <HAL_TIM_PWM_Start+0x6a>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d109      	bne.n	80090c2 <HAL_TIM_PWM_Start+0x3e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	bf14      	ite	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	2300      	moveq	r3, #0
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	e015      	b.n	80090ee <HAL_TIM_PWM_Start+0x6a>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d109      	bne.n	80090dc <HAL_TIM_PWM_Start+0x58>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	bf14      	ite	ne
 80090d4:	2301      	movne	r3, #1
 80090d6:	2300      	moveq	r3, #0
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	e008      	b.n	80090ee <HAL_TIM_PWM_Start+0x6a>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	bf14      	ite	ne
 80090e8:	2301      	movne	r3, #1
 80090ea:	2300      	moveq	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e07c      	b.n	80091f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <HAL_TIM_PWM_Start+0x82>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009104:	e013      	b.n	800912e <HAL_TIM_PWM_Start+0xaa>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b04      	cmp	r3, #4
 800910a:	d104      	bne.n	8009116 <HAL_TIM_PWM_Start+0x92>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009114:	e00b      	b.n	800912e <HAL_TIM_PWM_Start+0xaa>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b08      	cmp	r3, #8
 800911a:	d104      	bne.n	8009126 <HAL_TIM_PWM_Start+0xa2>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2202      	movs	r2, #2
 8009120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009124:	e003      	b.n	800912e <HAL_TIM_PWM_Start+0xaa>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2202      	movs	r2, #2
 800912a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2201      	movs	r2, #1
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f001 f992 	bl	800a460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a2d      	ldr	r2, [pc, #180]	; (80091f8 <HAL_TIM_PWM_Start+0x174>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d004      	beq.n	8009150 <HAL_TIM_PWM_Start+0xcc>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a2c      	ldr	r2, [pc, #176]	; (80091fc <HAL_TIM_PWM_Start+0x178>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d101      	bne.n	8009154 <HAL_TIM_PWM_Start+0xd0>
 8009150:	2301      	movs	r3, #1
 8009152:	e000      	b.n	8009156 <HAL_TIM_PWM_Start+0xd2>
 8009154:	2300      	movs	r3, #0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a22      	ldr	r2, [pc, #136]	; (80091f8 <HAL_TIM_PWM_Start+0x174>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d022      	beq.n	80091ba <HAL_TIM_PWM_Start+0x136>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917c:	d01d      	beq.n	80091ba <HAL_TIM_PWM_Start+0x136>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1f      	ldr	r2, [pc, #124]	; (8009200 <HAL_TIM_PWM_Start+0x17c>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d018      	beq.n	80091ba <HAL_TIM_PWM_Start+0x136>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <HAL_TIM_PWM_Start+0x180>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <HAL_TIM_PWM_Start+0x136>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <HAL_TIM_PWM_Start+0x184>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d00e      	beq.n	80091ba <HAL_TIM_PWM_Start+0x136>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a16      	ldr	r2, [pc, #88]	; (80091fc <HAL_TIM_PWM_Start+0x178>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d009      	beq.n	80091ba <HAL_TIM_PWM_Start+0x136>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a18      	ldr	r2, [pc, #96]	; (800920c <HAL_TIM_PWM_Start+0x188>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d004      	beq.n	80091ba <HAL_TIM_PWM_Start+0x136>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a16      	ldr	r2, [pc, #88]	; (8009210 <HAL_TIM_PWM_Start+0x18c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d111      	bne.n	80091de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b06      	cmp	r3, #6
 80091ca:	d010      	beq.n	80091ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0201 	orr.w	r2, r2, #1
 80091da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091dc:	e007      	b.n	80091ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0201 	orr.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	40010000 	.word	0x40010000
 80091fc:	40010400 	.word	0x40010400
 8009200:	40000400 	.word	0x40000400
 8009204:	40000800 	.word	0x40000800
 8009208:	40000c00 	.word	0x40000c00
 800920c:	40014000 	.word	0x40014000
 8009210:	40001800 	.word	0x40001800

08009214 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e041      	b.n	80092aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7fa f9a6 	bl	800358c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3304      	adds	r3, #4
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f000 fcf0 	bl	8009c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d104      	bne.n	80092d2 <HAL_TIM_IC_Start_IT+0x1e>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	e013      	b.n	80092fa <HAL_TIM_IC_Start_IT+0x46>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d104      	bne.n	80092e2 <HAL_TIM_IC_Start_IT+0x2e>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	e00b      	b.n	80092fa <HAL_TIM_IC_Start_IT+0x46>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d104      	bne.n	80092f2 <HAL_TIM_IC_Start_IT+0x3e>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	e003      	b.n	80092fa <HAL_TIM_IC_Start_IT+0x46>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d104      	bne.n	800930c <HAL_TIM_IC_Start_IT+0x58>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009308:	b2db      	uxtb	r3, r3
 800930a:	e013      	b.n	8009334 <HAL_TIM_IC_Start_IT+0x80>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b04      	cmp	r3, #4
 8009310:	d104      	bne.n	800931c <HAL_TIM_IC_Start_IT+0x68>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009318:	b2db      	uxtb	r3, r3
 800931a:	e00b      	b.n	8009334 <HAL_TIM_IC_Start_IT+0x80>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b08      	cmp	r3, #8
 8009320:	d104      	bne.n	800932c <HAL_TIM_IC_Start_IT+0x78>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009328:	b2db      	uxtb	r3, r3
 800932a:	e003      	b.n	8009334 <HAL_TIM_IC_Start_IT+0x80>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009332:	b2db      	uxtb	r3, r3
 8009334:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d102      	bne.n	8009342 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800933c:	7b7b      	ldrb	r3, [r7, #13]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d001      	beq.n	8009346 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e0cc      	b.n	80094e0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <HAL_TIM_IC_Start_IT+0xa2>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009354:	e013      	b.n	800937e <HAL_TIM_IC_Start_IT+0xca>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b04      	cmp	r3, #4
 800935a:	d104      	bne.n	8009366 <HAL_TIM_IC_Start_IT+0xb2>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009364:	e00b      	b.n	800937e <HAL_TIM_IC_Start_IT+0xca>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b08      	cmp	r3, #8
 800936a:	d104      	bne.n	8009376 <HAL_TIM_IC_Start_IT+0xc2>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009374:	e003      	b.n	800937e <HAL_TIM_IC_Start_IT+0xca>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d104      	bne.n	800938e <HAL_TIM_IC_Start_IT+0xda>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800938c:	e013      	b.n	80093b6 <HAL_TIM_IC_Start_IT+0x102>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b04      	cmp	r3, #4
 8009392:	d104      	bne.n	800939e <HAL_TIM_IC_Start_IT+0xea>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800939c:	e00b      	b.n	80093b6 <HAL_TIM_IC_Start_IT+0x102>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d104      	bne.n	80093ae <HAL_TIM_IC_Start_IT+0xfa>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ac:	e003      	b.n	80093b6 <HAL_TIM_IC_Start_IT+0x102>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b0c      	cmp	r3, #12
 80093ba:	d841      	bhi.n	8009440 <HAL_TIM_IC_Start_IT+0x18c>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <HAL_TIM_IC_Start_IT+0x110>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	080093f9 	.word	0x080093f9
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009441 	.word	0x08009441
 80093d0:	08009441 	.word	0x08009441
 80093d4:	0800940b 	.word	0x0800940b
 80093d8:	08009441 	.word	0x08009441
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009441 	.word	0x08009441
 80093e4:	0800941d 	.word	0x0800941d
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009441 	.word	0x08009441
 80093f0:	08009441 	.word	0x08009441
 80093f4:	0800942f 	.word	0x0800942f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f042 0202 	orr.w	r2, r2, #2
 8009406:	60da      	str	r2, [r3, #12]
      break;
 8009408:	e01d      	b.n	8009446 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0204 	orr.w	r2, r2, #4
 8009418:	60da      	str	r2, [r3, #12]
      break;
 800941a:	e014      	b.n	8009446 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0208 	orr.w	r2, r2, #8
 800942a:	60da      	str	r2, [r3, #12]
      break;
 800942c:	e00b      	b.n	8009446 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f042 0210 	orr.w	r2, r2, #16
 800943c:	60da      	str	r2, [r3, #12]
      break;
 800943e:	e002      	b.n	8009446 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
      break;
 8009444:	bf00      	nop
  }

  if (status == HAL_OK)
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d148      	bne.n	80094de <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2201      	movs	r2, #1
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	f001 f803 	bl	800a460 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <HAL_TIM_IC_Start_IT+0x234>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d022      	beq.n	80094aa <HAL_TIM_IC_Start_IT+0x1f6>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946c:	d01d      	beq.n	80094aa <HAL_TIM_IC_Start_IT+0x1f6>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <HAL_TIM_IC_Start_IT+0x238>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d018      	beq.n	80094aa <HAL_TIM_IC_Start_IT+0x1f6>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1c      	ldr	r2, [pc, #112]	; (80094f0 <HAL_TIM_IC_Start_IT+0x23c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_TIM_IC_Start_IT+0x1f6>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1b      	ldr	r2, [pc, #108]	; (80094f4 <HAL_TIM_IC_Start_IT+0x240>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00e      	beq.n	80094aa <HAL_TIM_IC_Start_IT+0x1f6>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a19      	ldr	r2, [pc, #100]	; (80094f8 <HAL_TIM_IC_Start_IT+0x244>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d009      	beq.n	80094aa <HAL_TIM_IC_Start_IT+0x1f6>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a18      	ldr	r2, [pc, #96]	; (80094fc <HAL_TIM_IC_Start_IT+0x248>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d004      	beq.n	80094aa <HAL_TIM_IC_Start_IT+0x1f6>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a16      	ldr	r2, [pc, #88]	; (8009500 <HAL_TIM_IC_Start_IT+0x24c>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d111      	bne.n	80094ce <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b06      	cmp	r3, #6
 80094ba:	d010      	beq.n	80094de <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0201 	orr.w	r2, r2, #1
 80094ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094cc:	e007      	b.n	80094de <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0201 	orr.w	r2, r2, #1
 80094dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80094de:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	40010000 	.word	0x40010000
 80094ec:	40000400 	.word	0x40000400
 80094f0:	40000800 	.word	0x40000800
 80094f4:	40000c00 	.word	0x40000c00
 80094f8:	40010400 	.word	0x40010400
 80094fc:	40014000 	.word	0x40014000
 8009500:	40001800 	.word	0x40001800

08009504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b02      	cmp	r3, #2
 8009518:	d122      	bne.n	8009560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d11b      	bne.n	8009560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f06f 0202 	mvn.w	r2, #2
 8009530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7fa fa1e 	bl	8003988 <HAL_TIM_IC_CaptureCallback>
 800954c:	e005      	b.n	800955a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fb54 	bl	8009bfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fb5b 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b04      	cmp	r3, #4
 800956c:	d122      	bne.n	80095b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b04      	cmp	r3, #4
 800957a:	d11b      	bne.n	80095b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f06f 0204 	mvn.w	r2, #4
 8009584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fa f9f4 	bl	8003988 <HAL_TIM_IC_CaptureCallback>
 80095a0:	e005      	b.n	80095ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fb2a 	bl	8009bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fb31 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0308 	and.w	r3, r3, #8
 80095be:	2b08      	cmp	r3, #8
 80095c0:	d122      	bne.n	8009608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d11b      	bne.n	8009608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0208 	mvn.w	r2, #8
 80095d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2204      	movs	r2, #4
 80095de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fa f9ca 	bl	8003988 <HAL_TIM_IC_CaptureCallback>
 80095f4:	e005      	b.n	8009602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fb00 	bl	8009bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fb07 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b10      	cmp	r3, #16
 8009614:	d122      	bne.n	800965c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f003 0310 	and.w	r3, r3, #16
 8009620:	2b10      	cmp	r3, #16
 8009622:	d11b      	bne.n	800965c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f06f 0210 	mvn.w	r2, #16
 800962c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2208      	movs	r2, #8
 8009632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fa f9a0 	bl	8003988 <HAL_TIM_IC_CaptureCallback>
 8009648:	e005      	b.n	8009656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fad6 	bl	8009bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fadd 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b01      	cmp	r3, #1
 8009668:	d10e      	bne.n	8009688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b01      	cmp	r3, #1
 8009676:	d107      	bne.n	8009688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0201 	mvn.w	r2, #1
 8009680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fab0 	bl	8009be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009692:	2b80      	cmp	r3, #128	; 0x80
 8009694:	d10e      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a0:	2b80      	cmp	r3, #128	; 0x80
 80096a2:	d107      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 ffd4 	bl	800a65c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096be:	2b40      	cmp	r3, #64	; 0x40
 80096c0:	d10e      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096cc:	2b40      	cmp	r3, #64	; 0x40
 80096ce:	d107      	bne.n	80096e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 faa2 	bl	8009c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d10e      	bne.n	800970c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b20      	cmp	r3, #32
 80096fa:	d107      	bne.n	800970c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f06f 0220 	mvn.w	r2, #32
 8009704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 ff9e 	bl	800a648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <HAL_TIM_IC_ConfigChannel+0x1e>
 800972e:	2302      	movs	r3, #2
 8009730:	e088      	b.n	8009844 <HAL_TIM_IC_ConfigChannel+0x130>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11b      	bne.n	8009778 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6819      	ldr	r1, [r3, #0]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f000 fcc2 	bl	800a0d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	699a      	ldr	r2, [r3, #24]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 020c 	bic.w	r2, r2, #12
 8009762:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6999      	ldr	r1, [r3, #24]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	689a      	ldr	r2, [r3, #8]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	619a      	str	r2, [r3, #24]
 8009776:	e060      	b.n	800983a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b04      	cmp	r3, #4
 800977c:	d11c      	bne.n	80097b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6819      	ldr	r1, [r3, #0]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	f000 fd46 	bl	800a21e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699a      	ldr	r2, [r3, #24]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80097a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6999      	ldr	r1, [r3, #24]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	021a      	lsls	r2, r3, #8
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	619a      	str	r2, [r3, #24]
 80097b6:	e040      	b.n	800983a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b08      	cmp	r3, #8
 80097bc:	d11b      	bne.n	80097f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	6819      	ldr	r1, [r3, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f000 fd93 	bl	800a2f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 020c 	bic.w	r2, r2, #12
 80097e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69d9      	ldr	r1, [r3, #28]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	61da      	str	r2, [r3, #28]
 80097f4:	e021      	b.n	800983a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b0c      	cmp	r3, #12
 80097fa:	d11c      	bne.n	8009836 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6819      	ldr	r1, [r3, #0]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f000 fdb0 	bl	800a370 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69da      	ldr	r2, [r3, #28]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800981e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69d9      	ldr	r1, [r3, #28]
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	021a      	lsls	r2, r3, #8
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	61da      	str	r2, [r3, #28]
 8009834:	e001      	b.n	800983a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009866:	2302      	movs	r3, #2
 8009868:	e0ae      	b.n	80099c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b0c      	cmp	r3, #12
 8009876:	f200 809f 	bhi.w	80099b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	080098b5 	.word	0x080098b5
 8009884:	080099b9 	.word	0x080099b9
 8009888:	080099b9 	.word	0x080099b9
 800988c:	080099b9 	.word	0x080099b9
 8009890:	080098f5 	.word	0x080098f5
 8009894:	080099b9 	.word	0x080099b9
 8009898:	080099b9 	.word	0x080099b9
 800989c:	080099b9 	.word	0x080099b9
 80098a0:	08009937 	.word	0x08009937
 80098a4:	080099b9 	.word	0x080099b9
 80098a8:	080099b9 	.word	0x080099b9
 80098ac:	080099b9 	.word	0x080099b9
 80098b0:	08009977 	.word	0x08009977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fa5c 	bl	8009d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0208 	orr.w	r2, r2, #8
 80098ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 0204 	bic.w	r2, r2, #4
 80098de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6999      	ldr	r1, [r3, #24]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	619a      	str	r2, [r3, #24]
      break;
 80098f2:	e064      	b.n	80099be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68b9      	ldr	r1, [r7, #8]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 faac 	bl	8009e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800990e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699a      	ldr	r2, [r3, #24]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800991e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6999      	ldr	r1, [r3, #24]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	021a      	lsls	r2, r3, #8
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	619a      	str	r2, [r3, #24]
      break;
 8009934:	e043      	b.n	80099be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fb01 	bl	8009f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69da      	ldr	r2, [r3, #28]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0208 	orr.w	r2, r2, #8
 8009950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0204 	bic.w	r2, r2, #4
 8009960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69d9      	ldr	r1, [r3, #28]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	61da      	str	r2, [r3, #28]
      break;
 8009974:	e023      	b.n	80099be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68b9      	ldr	r1, [r7, #8]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 fb55 	bl	800a02c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	69da      	ldr	r2, [r3, #28]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69da      	ldr	r2, [r3, #28]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69d9      	ldr	r1, [r3, #28]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	021a      	lsls	r2, r3, #8
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	61da      	str	r2, [r3, #28]
      break;
 80099b6:	e002      	b.n	80099be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	75fb      	strb	r3, [r7, #23]
      break;
 80099bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_TIM_ConfigClockSource+0x1c>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e0b4      	b.n	8009b56 <HAL_TIM_ConfigClockSource+0x186>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a24:	d03e      	beq.n	8009aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8009a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2a:	f200 8087 	bhi.w	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a32:	f000 8086 	beq.w	8009b42 <HAL_TIM_ConfigClockSource+0x172>
 8009a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3a:	d87f      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a3c:	2b70      	cmp	r3, #112	; 0x70
 8009a3e:	d01a      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0xa6>
 8009a40:	2b70      	cmp	r3, #112	; 0x70
 8009a42:	d87b      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a44:	2b60      	cmp	r3, #96	; 0x60
 8009a46:	d050      	beq.n	8009aea <HAL_TIM_ConfigClockSource+0x11a>
 8009a48:	2b60      	cmp	r3, #96	; 0x60
 8009a4a:	d877      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a4c:	2b50      	cmp	r3, #80	; 0x50
 8009a4e:	d03c      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0xfa>
 8009a50:	2b50      	cmp	r3, #80	; 0x50
 8009a52:	d873      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a54:	2b40      	cmp	r3, #64	; 0x40
 8009a56:	d058      	beq.n	8009b0a <HAL_TIM_ConfigClockSource+0x13a>
 8009a58:	2b40      	cmp	r3, #64	; 0x40
 8009a5a:	d86f      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a5c:	2b30      	cmp	r3, #48	; 0x30
 8009a5e:	d064      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x15a>
 8009a60:	2b30      	cmp	r3, #48	; 0x30
 8009a62:	d86b      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d060      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x15a>
 8009a68:	2b20      	cmp	r3, #32
 8009a6a:	d867      	bhi.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d05c      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x15a>
 8009a70:	2b10      	cmp	r3, #16
 8009a72:	d05a      	beq.n	8009b2a <HAL_TIM_ConfigClockSource+0x15a>
 8009a74:	e062      	b.n	8009b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6818      	ldr	r0, [r3, #0]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	6899      	ldr	r1, [r3, #8]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f000 fccb 	bl	800a420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	609a      	str	r2, [r3, #8]
      break;
 8009aa2:	e04f      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	6899      	ldr	r1, [r3, #8]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	f000 fcb4 	bl	800a420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ac6:	609a      	str	r2, [r3, #8]
      break;
 8009ac8:	e03c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6859      	ldr	r1, [r3, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f000 fb72 	bl	800a1c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2150      	movs	r1, #80	; 0x50
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fc81 	bl	800a3ea <TIM_ITRx_SetConfig>
      break;
 8009ae8:	e02c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6859      	ldr	r1, [r3, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f000 fbce 	bl	800a298 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2160      	movs	r1, #96	; 0x60
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fc71 	bl	800a3ea <TIM_ITRx_SetConfig>
      break;
 8009b08:	e01c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	6859      	ldr	r1, [r3, #4]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f000 fb52 	bl	800a1c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2140      	movs	r1, #64	; 0x40
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fc61 	bl	800a3ea <TIM_ITRx_SetConfig>
      break;
 8009b28:	e00c      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f000 fc58 	bl	800a3ea <TIM_ITRx_SetConfig>
      break;
 8009b3a:	e003      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b40:	e000      	b.n	8009b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b0c      	cmp	r3, #12
 8009b72:	d831      	bhi.n	8009bd8 <HAL_TIM_ReadCapturedValue+0x78>
 8009b74:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009bb1 	.word	0x08009bb1
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	08009bd9 	.word	0x08009bd9
 8009b88:	08009bd9 	.word	0x08009bd9
 8009b8c:	08009bbb 	.word	0x08009bbb
 8009b90:	08009bd9 	.word	0x08009bd9
 8009b94:	08009bd9 	.word	0x08009bd9
 8009b98:	08009bd9 	.word	0x08009bd9
 8009b9c:	08009bc5 	.word	0x08009bc5
 8009ba0:	08009bd9 	.word	0x08009bd9
 8009ba4:	08009bd9 	.word	0x08009bd9
 8009ba8:	08009bd9 	.word	0x08009bd9
 8009bac:	08009bcf 	.word	0x08009bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb6:	60fb      	str	r3, [r7, #12]

      break;
 8009bb8:	e00f      	b.n	8009bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	60fb      	str	r3, [r7, #12]

      break;
 8009bc2:	e00a      	b.n	8009bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bca:	60fb      	str	r3, [r7, #12]

      break;
 8009bcc:	e005      	b.n	8009bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd4:	60fb      	str	r3, [r7, #12]

      break;
 8009bd6:	e000      	b.n	8009bda <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009bd8:	bf00      	nop
  }

  return tmpreg;
 8009bda:	68fb      	ldr	r3, [r7, #12]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a40      	ldr	r2, [pc, #256]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d013      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c56:	d00f      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3d      	ldr	r2, [pc, #244]	; (8009d50 <TIM_Base_SetConfig+0x118>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d00b      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3c      	ldr	r2, [pc, #240]	; (8009d54 <TIM_Base_SetConfig+0x11c>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d007      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a3b      	ldr	r2, [pc, #236]	; (8009d58 <TIM_Base_SetConfig+0x120>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a3a      	ldr	r2, [pc, #232]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d108      	bne.n	8009c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2f      	ldr	r2, [pc, #188]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d02b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c98:	d027      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2c      	ldr	r2, [pc, #176]	; (8009d50 <TIM_Base_SetConfig+0x118>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d023      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2b      	ldr	r2, [pc, #172]	; (8009d54 <TIM_Base_SetConfig+0x11c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01f      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a2a      	ldr	r2, [pc, #168]	; (8009d58 <TIM_Base_SetConfig+0x120>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d01b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d017      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a28      	ldr	r2, [pc, #160]	; (8009d60 <TIM_Base_SetConfig+0x128>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d013      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a27      	ldr	r2, [pc, #156]	; (8009d64 <TIM_Base_SetConfig+0x12c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00f      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a26      	ldr	r2, [pc, #152]	; (8009d68 <TIM_Base_SetConfig+0x130>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d00b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a25      	ldr	r2, [pc, #148]	; (8009d6c <TIM_Base_SetConfig+0x134>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d007      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <TIM_Base_SetConfig+0x138>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d003      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a23      	ldr	r2, [pc, #140]	; (8009d74 <TIM_Base_SetConfig+0x13c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d108      	bne.n	8009cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d003      	beq.n	8009d30 <TIM_Base_SetConfig+0xf8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d103      	bne.n	8009d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	615a      	str	r2, [r3, #20]
}
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	40010000 	.word	0x40010000
 8009d50:	40000400 	.word	0x40000400
 8009d54:	40000800 	.word	0x40000800
 8009d58:	40000c00 	.word	0x40000c00
 8009d5c:	40010400 	.word	0x40010400
 8009d60:	40014000 	.word	0x40014000
 8009d64:	40014400 	.word	0x40014400
 8009d68:	40014800 	.word	0x40014800
 8009d6c:	40001800 	.word	0x40001800
 8009d70:	40001c00 	.word	0x40001c00
 8009d74:	40002000 	.word	0x40002000

08009d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	f023 0201 	bic.w	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f023 0302 	bic.w	r3, r3, #2
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a20      	ldr	r2, [pc, #128]	; (8009e50 <TIM_OC1_SetConfig+0xd8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_OC1_SetConfig+0x64>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a1f      	ldr	r2, [pc, #124]	; (8009e54 <TIM_OC1_SetConfig+0xdc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d10c      	bne.n	8009df6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f023 0308 	bic.w	r3, r3, #8
 8009de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 0304 	bic.w	r3, r3, #4
 8009df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a15      	ldr	r2, [pc, #84]	; (8009e50 <TIM_OC1_SetConfig+0xd8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d003      	beq.n	8009e06 <TIM_OC1_SetConfig+0x8e>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a14      	ldr	r2, [pc, #80]	; (8009e54 <TIM_OC1_SetConfig+0xdc>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d111      	bne.n	8009e2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	621a      	str	r2, [r3, #32]
}
 8009e44:	bf00      	nop
 8009e46:	371c      	adds	r7, #28
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40010400 	.word	0x40010400

08009e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f023 0210 	bic.w	r2, r3, #16
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f023 0320 	bic.w	r3, r3, #32
 8009ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	011b      	lsls	r3, r3, #4
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a22      	ldr	r2, [pc, #136]	; (8009f3c <TIM_OC2_SetConfig+0xe4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d003      	beq.n	8009ec0 <TIM_OC2_SetConfig+0x68>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a21      	ldr	r2, [pc, #132]	; (8009f40 <TIM_OC2_SetConfig+0xe8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d10d      	bne.n	8009edc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a17      	ldr	r2, [pc, #92]	; (8009f3c <TIM_OC2_SetConfig+0xe4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC2_SetConfig+0x94>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <TIM_OC2_SetConfig+0xe8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d113      	bne.n	8009f14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	621a      	str	r2, [r3, #32]
}
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40010400 	.word	0x40010400

08009f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0303 	bic.w	r3, r3, #3
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a21      	ldr	r2, [pc, #132]	; (800a024 <TIM_OC3_SetConfig+0xe0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d003      	beq.n	8009faa <TIM_OC3_SetConfig+0x66>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a20      	ldr	r2, [pc, #128]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d10d      	bne.n	8009fc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a16      	ldr	r2, [pc, #88]	; (800a024 <TIM_OC3_SetConfig+0xe0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d003      	beq.n	8009fd6 <TIM_OC3_SetConfig+0x92>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a15      	ldr	r2, [pc, #84]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d113      	bne.n	8009ffe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	621a      	str	r2, [r3, #32]
}
 800a018:	bf00      	nop
 800a01a:	371c      	adds	r7, #28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	40010000 	.word	0x40010000
 800a028:	40010400 	.word	0x40010400

0800a02c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	031b      	lsls	r3, r3, #12
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a12      	ldr	r2, [pc, #72]	; (800a0d0 <TIM_OC4_SetConfig+0xa4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d003      	beq.n	800a094 <TIM_OC4_SetConfig+0x68>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a11      	ldr	r2, [pc, #68]	; (800a0d4 <TIM_OC4_SetConfig+0xa8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d109      	bne.n	800a0a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a09a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	019b      	lsls	r3, r3, #6
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	621a      	str	r2, [r3, #32]
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	40010000 	.word	0x40010000
 800a0d4:	40010400 	.word	0x40010400

0800a0d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	f023 0201 	bic.w	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	4a28      	ldr	r2, [pc, #160]	; (800a1a4 <TIM_TI1_SetConfig+0xcc>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d01b      	beq.n	800a13e <TIM_TI1_SetConfig+0x66>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10c:	d017      	beq.n	800a13e <TIM_TI1_SetConfig+0x66>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4a25      	ldr	r2, [pc, #148]	; (800a1a8 <TIM_TI1_SetConfig+0xd0>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d013      	beq.n	800a13e <TIM_TI1_SetConfig+0x66>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4a24      	ldr	r2, [pc, #144]	; (800a1ac <TIM_TI1_SetConfig+0xd4>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00f      	beq.n	800a13e <TIM_TI1_SetConfig+0x66>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	4a23      	ldr	r2, [pc, #140]	; (800a1b0 <TIM_TI1_SetConfig+0xd8>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00b      	beq.n	800a13e <TIM_TI1_SetConfig+0x66>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4a22      	ldr	r2, [pc, #136]	; (800a1b4 <TIM_TI1_SetConfig+0xdc>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d007      	beq.n	800a13e <TIM_TI1_SetConfig+0x66>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4a21      	ldr	r2, [pc, #132]	; (800a1b8 <TIM_TI1_SetConfig+0xe0>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d003      	beq.n	800a13e <TIM_TI1_SetConfig+0x66>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	4a20      	ldr	r2, [pc, #128]	; (800a1bc <TIM_TI1_SetConfig+0xe4>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d101      	bne.n	800a142 <TIM_TI1_SetConfig+0x6a>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <TIM_TI1_SetConfig+0x6c>
 800a142:	2300      	movs	r3, #0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d008      	beq.n	800a15a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f023 0303 	bic.w	r3, r3, #3
 800a14e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4313      	orrs	r3, r2
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	e003      	b.n	800a162 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f043 0301 	orr.w	r3, r3, #1
 800a160:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	4313      	orrs	r3, r2
 800a174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f023 030a 	bic.w	r3, r3, #10
 800a17c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f003 030a 	and.w	r3, r3, #10
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	621a      	str	r2, [r3, #32]
}
 800a196:	bf00      	nop
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40010000 	.word	0x40010000
 800a1a8:	40000400 	.word	0x40000400
 800a1ac:	40000800 	.word	0x40000800
 800a1b0:	40000c00 	.word	0x40000c00
 800a1b4:	40010400 	.word	0x40010400
 800a1b8:	40014000 	.word	0x40014000
 800a1bc:	40001800 	.word	0x40001800

0800a1c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	f023 0201 	bic.w	r2, r3, #1
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	011b      	lsls	r3, r3, #4
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f023 030a 	bic.w	r3, r3, #10
 800a1fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	4313      	orrs	r3, r2
 800a204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	621a      	str	r2, [r3, #32]
}
 800a212:	bf00      	nop
 800a214:	371c      	adds	r7, #28
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a21e:	b480      	push	{r7}
 800a220:	b087      	sub	sp, #28
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	f023 0210 	bic.w	r2, r3, #16
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4313      	orrs	r3, r2
 800a254:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a25c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	031b      	lsls	r3, r3, #12
 800a262:	b29b      	uxth	r3, r3
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	4313      	orrs	r3, r2
 800a268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a270:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	621a      	str	r2, [r3, #32]
}
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	f023 0210 	bic.w	r2, r3, #16
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	031b      	lsls	r3, r3, #12
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	011b      	lsls	r3, r3, #4
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	621a      	str	r2, [r3, #32]
}
 800a2ec:	bf00      	nop
 800a2ee:	371c      	adds	r7, #28
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f023 0303 	bic.w	r3, r3, #3
 800a324:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a334:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	011b      	lsls	r3, r3, #4
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a348:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	021b      	lsls	r3, r3, #8
 800a34e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	4313      	orrs	r3, r2
 800a356:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	621a      	str	r2, [r3, #32]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a39c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	031b      	lsls	r3, r3, #12
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a3c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	031b      	lsls	r3, r3, #12
 800a3c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	621a      	str	r2, [r3, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	371c      	adds	r7, #28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	f043 0307 	orr.w	r3, r3, #7
 800a40c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	609a      	str	r2, [r3, #8]
}
 800a414:	bf00      	nop
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a43a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	021a      	lsls	r2, r3, #8
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	431a      	orrs	r2, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4313      	orrs	r3, r2
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	609a      	str	r2, [r3, #8]
}
 800a454:	bf00      	nop
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 031f 	and.w	r3, r3, #31
 800a472:	2201      	movs	r2, #1
 800a474:	fa02 f303 	lsl.w	r3, r2, r3
 800a478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6a1a      	ldr	r2, [r3, #32]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	43db      	mvns	r3, r3
 800a482:	401a      	ands	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6a1a      	ldr	r2, [r3, #32]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f003 031f 	and.w	r3, r3, #31
 800a492:	6879      	ldr	r1, [r7, #4]
 800a494:	fa01 f303 	lsl.w	r3, r1, r3
 800a498:	431a      	orrs	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e05a      	b.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a21      	ldr	r2, [pc, #132]	; (800a588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d022      	beq.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a510:	d01d      	beq.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a1d      	ldr	r2, [pc, #116]	; (800a58c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d018      	beq.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a1b      	ldr	r2, [pc, #108]	; (800a590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d013      	beq.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a1a      	ldr	r2, [pc, #104]	; (800a594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00e      	beq.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a18      	ldr	r2, [pc, #96]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d009      	beq.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a17      	ldr	r2, [pc, #92]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d004      	beq.n	800a54e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a15      	ldr	r2, [pc, #84]	; (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d10c      	bne.n	800a568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40010000 	.word	0x40010000
 800a58c:	40000400 	.word	0x40000400
 800a590:	40000800 	.word	0x40000800
 800a594:	40000c00 	.word	0x40000c00
 800a598:	40010400 	.word	0x40010400
 800a59c:	40014000 	.word	0x40014000
 800a5a0:	40001800 	.word	0x40001800

0800a5a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d101      	bne.n	800a5c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e03d      	b.n	800a63c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	4313      	orrs	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e03f      	b.n	800a702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7f9 f84a 	bl	8003730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2224      	movs	r2, #36	; 0x24
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68da      	ldr	r2, [r3, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fd19 	bl	800b0ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	695a      	ldr	r2, [r3, #20]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b085      	sub	sp, #20
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	4613      	mov	r3, r2
 800a716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b20      	cmp	r3, #32
 800a722:	d130      	bne.n	800a786 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <HAL_UART_Transmit_IT+0x26>
 800a72a:	88fb      	ldrh	r3, [r7, #6]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e029      	b.n	800a788 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_UART_Transmit_IT+0x38>
 800a73e:	2302      	movs	r3, #2
 800a740:	e022      	b.n	800a788 <HAL_UART_Transmit_IT+0x7e>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	88fa      	ldrh	r2, [r7, #6]
 800a754:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	88fa      	ldrh	r2, [r7, #6]
 800a75a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2221      	movs	r2, #33	; 0x21
 800a766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68da      	ldr	r2, [r3, #12]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a780:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	e000      	b.n	800a788 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a786:	2302      	movs	r3, #2
  }
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b20      	cmp	r3, #32
 800a7ac:	d11d      	bne.n	800a7ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <HAL_UART_Receive_IT+0x26>
 800a7b4:	88fb      	ldrh	r3, [r7, #6]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e016      	b.n	800a7ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_UART_Receive_IT+0x38>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e00f      	b.n	800a7ec <HAL_UART_Receive_IT+0x58>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a7da:	88fb      	ldrh	r3, [r7, #6]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 faab 	bl	800ad3c <UART_Start_Receive_IT>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	e000      	b.n	800a7ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a7ea:	2302      	movs	r3, #2
  }
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b0ba      	sub	sp, #232	; 0xe8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a820:	2300      	movs	r3, #0
 800a822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a82a:	f003 030f 	and.w	r3, r3, #15
 800a82e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10f      	bne.n	800a85a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d009      	beq.n	800a85a <HAL_UART_IRQHandler+0x66>
 800a846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fb8f 	bl	800af76 <UART_Receive_IT>
      return;
 800a858:	e256      	b.n	800ad08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a85a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 80de 	beq.w	800aa20 <HAL_UART_IRQHandler+0x22c>
 800a864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a874:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 80d1 	beq.w	800aa20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00b      	beq.n	800a8a2 <HAL_UART_IRQHandler+0xae>
 800a88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a892:	2b00      	cmp	r3, #0
 800a894:	d005      	beq.n	800a8a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89a:	f043 0201 	orr.w	r2, r3, #1
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00b      	beq.n	800a8c6 <HAL_UART_IRQHandler+0xd2>
 800a8ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	f043 0202 	orr.w	r2, r3, #2
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00b      	beq.n	800a8ea <HAL_UART_IRQHandler+0xf6>
 800a8d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	f043 0204 	orr.w	r2, r3, #4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a8ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ee:	f003 0308 	and.w	r3, r3, #8
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d011      	beq.n	800a91a <HAL_UART_IRQHandler+0x126>
 800a8f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d105      	bne.n	800a90e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d005      	beq.n	800a91a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a912:	f043 0208 	orr.w	r2, r3, #8
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 81ed 	beq.w	800acfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d008      	beq.n	800a942 <HAL_UART_IRQHandler+0x14e>
 800a930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fb1a 	bl	800af76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94c:	2b40      	cmp	r3, #64	; 0x40
 800a94e:	bf0c      	ite	eq
 800a950:	2301      	moveq	r3, #1
 800a952:	2300      	movne	r3, #0
 800a954:	b2db      	uxtb	r3, r3
 800a956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95e:	f003 0308 	and.w	r3, r3, #8
 800a962:	2b00      	cmp	r3, #0
 800a964:	d103      	bne.n	800a96e <HAL_UART_IRQHandler+0x17a>
 800a966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d04f      	beq.n	800aa0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa22 	bl	800adb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d141      	bne.n	800aa06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3314      	adds	r3, #20
 800a988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a99c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3314      	adds	r3, #20
 800a9aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a9ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a9b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a9ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1d9      	bne.n	800a982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d013      	beq.n	800a9fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	4a7d      	ldr	r2, [pc, #500]	; (800abd0 <HAL_UART_IRQHandler+0x3dc>)
 800a9dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fa fb6f 	bl	80050c6 <HAL_DMA_Abort_IT>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d016      	beq.n	800aa1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fc:	e00e      	b.n	800aa1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f986 	bl	800ad10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa04:	e00a      	b.n	800aa1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f982 	bl	800ad10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0c:	e006      	b.n	800aa1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f97e 	bl	800ad10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aa1a:	e170      	b.n	800acfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa1c:	bf00      	nop
    return;
 800aa1e:	e16e      	b.n	800acfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	f040 814a 	bne.w	800acbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aa2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2e:	f003 0310 	and.w	r3, r3, #16
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 8143 	beq.w	800acbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aa38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa3c:	f003 0310 	and.w	r3, r3, #16
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 813c 	beq.w	800acbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa46:	2300      	movs	r3, #0
 800aa48:	60bb      	str	r3, [r7, #8]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	60bb      	str	r3, [r7, #8]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	60bb      	str	r3, [r7, #8]
 800aa5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa66:	2b40      	cmp	r3, #64	; 0x40
 800aa68:	f040 80b4 	bne.w	800abd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8140 	beq.w	800ad02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	f080 8139 	bcs.w	800ad02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa2:	f000 8088 	beq.w	800abb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	330c      	adds	r3, #12
 800aaac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aabc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	330c      	adds	r3, #12
 800aace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aaea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1d9      	bne.n	800aaa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3314      	adds	r3, #20
 800aaf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ab02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab04:	f023 0301 	bic.w	r3, r3, #1
 800ab08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3314      	adds	r3, #20
 800ab12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e1      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3314      	adds	r3, #20
 800ab34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab38:	e853 3f00 	ldrex	r3, [r3]
 800ab3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3314      	adds	r3, #20
 800ab4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab52:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab5a:	e841 2300 	strex	r3, r2, [r1]
 800ab5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1e3      	bne.n	800ab2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	330c      	adds	r3, #12
 800ab7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab7e:	e853 3f00 	ldrex	r3, [r3]
 800ab82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab86:	f023 0310 	bic.w	r3, r3, #16
 800ab8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	330c      	adds	r3, #12
 800ab94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab98:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aba0:	e841 2300 	strex	r3, r2, [r1]
 800aba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e3      	bne.n	800ab74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fa fa18 	bl	8004fe6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f8ac 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abcc:	e099      	b.n	800ad02 <HAL_UART_IRQHandler+0x50e>
 800abce:	bf00      	nop
 800abd0:	0800ae7f 	.word	0x0800ae7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abe8:	b29b      	uxth	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 808b 	beq.w	800ad06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800abf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 8086 	beq.w	800ad06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	330c      	adds	r3, #12
 800ac00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	330c      	adds	r3, #12
 800ac1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac1e:	647a      	str	r2, [r7, #68]	; 0x44
 800ac20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e3      	bne.n	800abfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3314      	adds	r3, #20
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	623b      	str	r3, [r7, #32]
   return(result);
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3314      	adds	r3, #20
 800ac52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac56:	633a      	str	r2, [r7, #48]	; 0x30
 800ac58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e3      	bne.n	800ac32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0310 	bic.w	r3, r3, #16
 800ac8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	330c      	adds	r3, #12
 800ac98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac9c:	61fa      	str	r2, [r7, #28]
 800ac9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca0:	69b9      	ldr	r1, [r7, #24]
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	e841 2300 	strex	r3, r2, [r1]
 800aca8:	617b      	str	r3, [r7, #20]
   return(result);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e3      	bne.n	800ac78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f834 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800acbc:	e023      	b.n	800ad06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800acbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d009      	beq.n	800acde <HAL_UART_IRQHandler+0x4ea>
 800acca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f8e5 	bl	800aea6 <UART_Transmit_IT>
    return;
 800acdc:	e014      	b.n	800ad08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800acde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00e      	beq.n	800ad08 <HAL_UART_IRQHandler+0x514>
 800acea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d008      	beq.n	800ad08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f925 	bl	800af46 <UART_EndTransmit_IT>
    return;
 800acfc:	e004      	b.n	800ad08 <HAL_UART_IRQHandler+0x514>
    return;
 800acfe:	bf00      	nop
 800ad00:	e002      	b.n	800ad08 <HAL_UART_IRQHandler+0x514>
      return;
 800ad02:	bf00      	nop
 800ad04:	e000      	b.n	800ad08 <HAL_UART_IRQHandler+0x514>
      return;
 800ad06:	bf00      	nop
  }
}
 800ad08:	37e8      	adds	r7, #232	; 0xe8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop

0800ad10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	88fa      	ldrh	r2, [r7, #6]
 800ad54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	88fa      	ldrh	r2, [r7, #6]
 800ad5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2222      	movs	r2, #34	; 0x22
 800ad66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d007      	beq.n	800ad8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	695a      	ldr	r2, [r3, #20]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f042 0201 	orr.w	r2, r2, #1
 800ad98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f042 0220 	orr.w	r2, r2, #32
 800ada8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adb8:	b480      	push	{r7}
 800adba:	b095      	sub	sp, #84	; 0x54
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800add6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	330c      	adds	r3, #12
 800adde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ade0:	643a      	str	r2, [r7, #64]	; 0x40
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ade6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e5      	bne.n	800adc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3314      	adds	r3, #20
 800adfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	f023 0301 	bic.w	r3, r3, #1
 800ae0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3314      	adds	r3, #20
 800ae12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae1c:	e841 2300 	strex	r3, r2, [r1]
 800ae20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e5      	bne.n	800adf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d119      	bne.n	800ae64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	330c      	adds	r3, #12
 800ae36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f023 0310 	bic.w	r3, r3, #16
 800ae46:	647b      	str	r3, [r7, #68]	; 0x44
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	330c      	adds	r3, #12
 800ae4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae50:	61ba      	str	r2, [r7, #24]
 800ae52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6979      	ldr	r1, [r7, #20]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e5      	bne.n	800ae30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae72:	bf00      	nop
 800ae74:	3754      	adds	r7, #84	; 0x54
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7ff ff39 	bl	800ad10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b21      	cmp	r3, #33	; 0x21
 800aeb8:	d13e      	bne.n	800af38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec2:	d114      	bne.n	800aeee <UART_Transmit_IT+0x48>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d110      	bne.n	800aeee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aee0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	1c9a      	adds	r2, r3, #2
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	621a      	str	r2, [r3, #32]
 800aeec:	e008      	b.n	800af00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	1c59      	adds	r1, r3, #1
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	6211      	str	r1, [r2, #32]
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af04:	b29b      	uxth	r3, r3
 800af06:	3b01      	subs	r3, #1
 800af08:	b29b      	uxth	r3, r3
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	4619      	mov	r1, r3
 800af0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10f      	bne.n	800af34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68da      	ldr	r2, [r3, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	e000      	b.n	800af3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af38:	2302      	movs	r3, #2
  }
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2220      	movs	r2, #32
 800af62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7f8 fcc4 	bl	80038f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b08c      	sub	sp, #48	; 0x30
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b22      	cmp	r3, #34	; 0x22
 800af88:	f040 80ab 	bne.w	800b0e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af94:	d117      	bne.n	800afc6 <UART_Receive_IT+0x50>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d113      	bne.n	800afc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	1c9a      	adds	r2, r3, #2
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	629a      	str	r2, [r3, #40]	; 0x28
 800afc4:	e026      	b.n	800b014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd8:	d007      	beq.n	800afea <UART_Receive_IT+0x74>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <UART_Receive_IT+0x82>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	e008      	b.n	800b00a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b004:	b2da      	uxtb	r2, r3
 800b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b018:	b29b      	uxth	r3, r3
 800b01a:	3b01      	subs	r3, #1
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	4619      	mov	r1, r3
 800b022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b024:	2b00      	cmp	r3, #0
 800b026:	d15a      	bne.n	800b0de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0220 	bic.w	r2, r2, #32
 800b036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	695a      	ldr	r2, [r3, #20]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 0201 	bic.w	r2, r2, #1
 800b056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b064:	2b01      	cmp	r3, #1
 800b066:	d135      	bne.n	800b0d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	330c      	adds	r3, #12
 800b074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	e853 3f00 	ldrex	r3, [r3]
 800b07c:	613b      	str	r3, [r7, #16]
   return(result);
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f023 0310 	bic.w	r3, r3, #16
 800b084:	627b      	str	r3, [r7, #36]	; 0x24
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	330c      	adds	r3, #12
 800b08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b08e:	623a      	str	r2, [r7, #32]
 800b090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b092:	69f9      	ldr	r1, [r7, #28]
 800b094:	6a3a      	ldr	r2, [r7, #32]
 800b096:	e841 2300 	strex	r3, r2, [r1]
 800b09a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1e5      	bne.n	800b06e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	2b10      	cmp	r3, #16
 800b0ae:	d10a      	bne.n	800b0c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff fe29 	bl	800ad24 <HAL_UARTEx_RxEventCallback>
 800b0d2:	e002      	b.n	800b0da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7f8 fc1b 	bl	8003910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e002      	b.n	800b0e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e000      	b.n	800b0e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b0e2:	2302      	movs	r3, #2
  }
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3730      	adds	r7, #48	; 0x30
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0f0:	b0c0      	sub	sp, #256	; 0x100
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b108:	68d9      	ldr	r1, [r3, #12]
 800b10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	ea40 0301 	orr.w	r3, r0, r1
 800b114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b11a:	689a      	ldr	r2, [r3, #8]
 800b11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	431a      	orrs	r2, r3
 800b124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	431a      	orrs	r2, r3
 800b12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b130:	69db      	ldr	r3, [r3, #28]
 800b132:	4313      	orrs	r3, r2
 800b134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b144:	f021 010c 	bic.w	r1, r1, #12
 800b148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b152:	430b      	orrs	r3, r1
 800b154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b166:	6999      	ldr	r1, [r3, #24]
 800b168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	ea40 0301 	orr.w	r3, r0, r1
 800b172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	4b8f      	ldr	r3, [pc, #572]	; (800b3b8 <UART_SetConfig+0x2cc>)
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d005      	beq.n	800b18c <UART_SetConfig+0xa0>
 800b180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	4b8d      	ldr	r3, [pc, #564]	; (800b3bc <UART_SetConfig+0x2d0>)
 800b188:	429a      	cmp	r2, r3
 800b18a:	d104      	bne.n	800b196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b18c:	f7fd fdc4 	bl	8008d18 <HAL_RCC_GetPCLK2Freq>
 800b190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b194:	e003      	b.n	800b19e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b196:	f7fd fdab 	bl	8008cf0 <HAL_RCC_GetPCLK1Freq>
 800b19a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1a8:	f040 810c 	bne.w	800b3c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b1ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b1be:	4622      	mov	r2, r4
 800b1c0:	462b      	mov	r3, r5
 800b1c2:	1891      	adds	r1, r2, r2
 800b1c4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b1c6:	415b      	adcs	r3, r3
 800b1c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	eb12 0801 	adds.w	r8, r2, r1
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	eb43 0901 	adc.w	r9, r3, r1
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1ee:	4690      	mov	r8, r2
 800b1f0:	4699      	mov	r9, r3
 800b1f2:	4623      	mov	r3, r4
 800b1f4:	eb18 0303 	adds.w	r3, r8, r3
 800b1f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b1fc:	462b      	mov	r3, r5
 800b1fe:	eb49 0303 	adc.w	r3, r9, r3
 800b202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b212:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b21a:	460b      	mov	r3, r1
 800b21c:	18db      	adds	r3, r3, r3
 800b21e:	653b      	str	r3, [r7, #80]	; 0x50
 800b220:	4613      	mov	r3, r2
 800b222:	eb42 0303 	adc.w	r3, r2, r3
 800b226:	657b      	str	r3, [r7, #84]	; 0x54
 800b228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b22c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b230:	f7f5 fd0a 	bl	8000c48 <__aeabi_uldivmod>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	4b61      	ldr	r3, [pc, #388]	; (800b3c0 <UART_SetConfig+0x2d4>)
 800b23a:	fba3 2302 	umull	r2, r3, r3, r2
 800b23e:	095b      	lsrs	r3, r3, #5
 800b240:	011c      	lsls	r4, r3, #4
 800b242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b246:	2200      	movs	r2, #0
 800b248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b24c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	1891      	adds	r1, r2, r2
 800b25a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b25c:	415b      	adcs	r3, r3
 800b25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b264:	4641      	mov	r1, r8
 800b266:	eb12 0a01 	adds.w	sl, r2, r1
 800b26a:	4649      	mov	r1, r9
 800b26c:	eb43 0b01 	adc.w	fp, r3, r1
 800b270:	f04f 0200 	mov.w	r2, #0
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b27c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b284:	4692      	mov	sl, r2
 800b286:	469b      	mov	fp, r3
 800b288:	4643      	mov	r3, r8
 800b28a:	eb1a 0303 	adds.w	r3, sl, r3
 800b28e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b292:	464b      	mov	r3, r9
 800b294:	eb4b 0303 	adc.w	r3, fp, r3
 800b298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b2ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	18db      	adds	r3, r3, r3
 800b2b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	eb42 0303 	adc.w	r3, r2, r3
 800b2bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b2be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b2c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b2c6:	f7f5 fcbf 	bl	8000c48 <__aeabi_uldivmod>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4b3b      	ldr	r3, [pc, #236]	; (800b3c0 <UART_SetConfig+0x2d4>)
 800b2d2:	fba3 2301 	umull	r2, r3, r3, r1
 800b2d6:	095b      	lsrs	r3, r3, #5
 800b2d8:	2264      	movs	r2, #100	; 0x64
 800b2da:	fb02 f303 	mul.w	r3, r2, r3
 800b2de:	1acb      	subs	r3, r1, r3
 800b2e0:	00db      	lsls	r3, r3, #3
 800b2e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b2e6:	4b36      	ldr	r3, [pc, #216]	; (800b3c0 <UART_SetConfig+0x2d4>)
 800b2e8:	fba3 2302 	umull	r2, r3, r3, r2
 800b2ec:	095b      	lsrs	r3, r3, #5
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b2f4:	441c      	add	r4, r3
 800b2f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b300:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	1891      	adds	r1, r2, r2
 800b30e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b310:	415b      	adcs	r3, r3
 800b312:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b318:	4641      	mov	r1, r8
 800b31a:	1851      	adds	r1, r2, r1
 800b31c:	6339      	str	r1, [r7, #48]	; 0x30
 800b31e:	4649      	mov	r1, r9
 800b320:	414b      	adcs	r3, r1
 800b322:	637b      	str	r3, [r7, #52]	; 0x34
 800b324:	f04f 0200 	mov.w	r2, #0
 800b328:	f04f 0300 	mov.w	r3, #0
 800b32c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b330:	4659      	mov	r1, fp
 800b332:	00cb      	lsls	r3, r1, #3
 800b334:	4651      	mov	r1, sl
 800b336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b33a:	4651      	mov	r1, sl
 800b33c:	00ca      	lsls	r2, r1, #3
 800b33e:	4610      	mov	r0, r2
 800b340:	4619      	mov	r1, r3
 800b342:	4603      	mov	r3, r0
 800b344:	4642      	mov	r2, r8
 800b346:	189b      	adds	r3, r3, r2
 800b348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b34c:	464b      	mov	r3, r9
 800b34e:	460a      	mov	r2, r1
 800b350:	eb42 0303 	adc.w	r3, r2, r3
 800b354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b364:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b36c:	460b      	mov	r3, r1
 800b36e:	18db      	adds	r3, r3, r3
 800b370:	62bb      	str	r3, [r7, #40]	; 0x28
 800b372:	4613      	mov	r3, r2
 800b374:	eb42 0303 	adc.w	r3, r2, r3
 800b378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b37a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b37e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b382:	f7f5 fc61 	bl	8000c48 <__aeabi_uldivmod>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <UART_SetConfig+0x2d4>)
 800b38c:	fba3 1302 	umull	r1, r3, r3, r2
 800b390:	095b      	lsrs	r3, r3, #5
 800b392:	2164      	movs	r1, #100	; 0x64
 800b394:	fb01 f303 	mul.w	r3, r1, r3
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	00db      	lsls	r3, r3, #3
 800b39c:	3332      	adds	r3, #50	; 0x32
 800b39e:	4a08      	ldr	r2, [pc, #32]	; (800b3c0 <UART_SetConfig+0x2d4>)
 800b3a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a4:	095b      	lsrs	r3, r3, #5
 800b3a6:	f003 0207 	and.w	r2, r3, #7
 800b3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4422      	add	r2, r4
 800b3b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b3b4:	e105      	b.n	800b5c2 <UART_SetConfig+0x4d6>
 800b3b6:	bf00      	nop
 800b3b8:	40011000 	.word	0x40011000
 800b3bc:	40011400 	.word	0x40011400
 800b3c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b3d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	1891      	adds	r1, r2, r2
 800b3dc:	6239      	str	r1, [r7, #32]
 800b3de:	415b      	adcs	r3, r3
 800b3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b3e6:	4641      	mov	r1, r8
 800b3e8:	1854      	adds	r4, r2, r1
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	eb43 0501 	adc.w	r5, r3, r1
 800b3f0:	f04f 0200 	mov.w	r2, #0
 800b3f4:	f04f 0300 	mov.w	r3, #0
 800b3f8:	00eb      	lsls	r3, r5, #3
 800b3fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b3fe:	00e2      	lsls	r2, r4, #3
 800b400:	4614      	mov	r4, r2
 800b402:	461d      	mov	r5, r3
 800b404:	4643      	mov	r3, r8
 800b406:	18e3      	adds	r3, r4, r3
 800b408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b40c:	464b      	mov	r3, r9
 800b40e:	eb45 0303 	adc.w	r3, r5, r3
 800b412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b426:	f04f 0200 	mov.w	r2, #0
 800b42a:	f04f 0300 	mov.w	r3, #0
 800b42e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b432:	4629      	mov	r1, r5
 800b434:	008b      	lsls	r3, r1, #2
 800b436:	4621      	mov	r1, r4
 800b438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b43c:	4621      	mov	r1, r4
 800b43e:	008a      	lsls	r2, r1, #2
 800b440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b444:	f7f5 fc00 	bl	8000c48 <__aeabi_uldivmod>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4b60      	ldr	r3, [pc, #384]	; (800b5d0 <UART_SetConfig+0x4e4>)
 800b44e:	fba3 2302 	umull	r2, r3, r3, r2
 800b452:	095b      	lsrs	r3, r3, #5
 800b454:	011c      	lsls	r4, r3, #4
 800b456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b468:	4642      	mov	r2, r8
 800b46a:	464b      	mov	r3, r9
 800b46c:	1891      	adds	r1, r2, r2
 800b46e:	61b9      	str	r1, [r7, #24]
 800b470:	415b      	adcs	r3, r3
 800b472:	61fb      	str	r3, [r7, #28]
 800b474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b478:	4641      	mov	r1, r8
 800b47a:	1851      	adds	r1, r2, r1
 800b47c:	6139      	str	r1, [r7, #16]
 800b47e:	4649      	mov	r1, r9
 800b480:	414b      	adcs	r3, r1
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	f04f 0200 	mov.w	r2, #0
 800b488:	f04f 0300 	mov.w	r3, #0
 800b48c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b490:	4659      	mov	r1, fp
 800b492:	00cb      	lsls	r3, r1, #3
 800b494:	4651      	mov	r1, sl
 800b496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b49a:	4651      	mov	r1, sl
 800b49c:	00ca      	lsls	r2, r1, #3
 800b49e:	4610      	mov	r0, r2
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4642      	mov	r2, r8
 800b4a6:	189b      	adds	r3, r3, r2
 800b4a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4ac:	464b      	mov	r3, r9
 800b4ae:	460a      	mov	r2, r1
 800b4b0:	eb42 0303 	adc.w	r3, r2, r3
 800b4b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	f04f 0300 	mov.w	r3, #0
 800b4cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	008b      	lsls	r3, r1, #2
 800b4d4:	4641      	mov	r1, r8
 800b4d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4da:	4641      	mov	r1, r8
 800b4dc:	008a      	lsls	r2, r1, #2
 800b4de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b4e2:	f7f5 fbb1 	bl	8000c48 <__aeabi_uldivmod>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4b39      	ldr	r3, [pc, #228]	; (800b5d0 <UART_SetConfig+0x4e4>)
 800b4ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b4f0:	095b      	lsrs	r3, r3, #5
 800b4f2:	2164      	movs	r1, #100	; 0x64
 800b4f4:	fb01 f303 	mul.w	r3, r1, r3
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	011b      	lsls	r3, r3, #4
 800b4fc:	3332      	adds	r3, #50	; 0x32
 800b4fe:	4a34      	ldr	r2, [pc, #208]	; (800b5d0 <UART_SetConfig+0x4e4>)
 800b500:	fba2 2303 	umull	r2, r3, r2, r3
 800b504:	095b      	lsrs	r3, r3, #5
 800b506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b50a:	441c      	add	r4, r3
 800b50c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b510:	2200      	movs	r2, #0
 800b512:	673b      	str	r3, [r7, #112]	; 0x70
 800b514:	677a      	str	r2, [r7, #116]	; 0x74
 800b516:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b51a:	4642      	mov	r2, r8
 800b51c:	464b      	mov	r3, r9
 800b51e:	1891      	adds	r1, r2, r2
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	415b      	adcs	r3, r3
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b52a:	4641      	mov	r1, r8
 800b52c:	1851      	adds	r1, r2, r1
 800b52e:	6039      	str	r1, [r7, #0]
 800b530:	4649      	mov	r1, r9
 800b532:	414b      	adcs	r3, r1
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	f04f 0200 	mov.w	r2, #0
 800b53a:	f04f 0300 	mov.w	r3, #0
 800b53e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b542:	4659      	mov	r1, fp
 800b544:	00cb      	lsls	r3, r1, #3
 800b546:	4651      	mov	r1, sl
 800b548:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b54c:	4651      	mov	r1, sl
 800b54e:	00ca      	lsls	r2, r1, #3
 800b550:	4610      	mov	r0, r2
 800b552:	4619      	mov	r1, r3
 800b554:	4603      	mov	r3, r0
 800b556:	4642      	mov	r2, r8
 800b558:	189b      	adds	r3, r3, r2
 800b55a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b55c:	464b      	mov	r3, r9
 800b55e:	460a      	mov	r2, r1
 800b560:	eb42 0303 	adc.w	r3, r2, r3
 800b564:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	663b      	str	r3, [r7, #96]	; 0x60
 800b570:	667a      	str	r2, [r7, #100]	; 0x64
 800b572:	f04f 0200 	mov.w	r2, #0
 800b576:	f04f 0300 	mov.w	r3, #0
 800b57a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b57e:	4649      	mov	r1, r9
 800b580:	008b      	lsls	r3, r1, #2
 800b582:	4641      	mov	r1, r8
 800b584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b588:	4641      	mov	r1, r8
 800b58a:	008a      	lsls	r2, r1, #2
 800b58c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b590:	f7f5 fb5a 	bl	8000c48 <__aeabi_uldivmod>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <UART_SetConfig+0x4e4>)
 800b59a:	fba3 1302 	umull	r1, r3, r3, r2
 800b59e:	095b      	lsrs	r3, r3, #5
 800b5a0:	2164      	movs	r1, #100	; 0x64
 800b5a2:	fb01 f303 	mul.w	r3, r1, r3
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	3332      	adds	r3, #50	; 0x32
 800b5ac:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <UART_SetConfig+0x4e4>)
 800b5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b2:	095b      	lsrs	r3, r3, #5
 800b5b4:	f003 020f 	and.w	r2, r3, #15
 800b5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4422      	add	r2, r4
 800b5c0:	609a      	str	r2, [r3, #8]
}
 800b5c2:	bf00      	nop
 800b5c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5ce:	bf00      	nop
 800b5d0:	51eb851f 	.word	0x51eb851f

0800b5d4 <__errno>:
 800b5d4:	4b01      	ldr	r3, [pc, #4]	; (800b5dc <__errno+0x8>)
 800b5d6:	6818      	ldr	r0, [r3, #0]
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20000020 	.word	0x20000020

0800b5e0 <__libc_init_array>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	4d0d      	ldr	r5, [pc, #52]	; (800b618 <__libc_init_array+0x38>)
 800b5e4:	4c0d      	ldr	r4, [pc, #52]	; (800b61c <__libc_init_array+0x3c>)
 800b5e6:	1b64      	subs	r4, r4, r5
 800b5e8:	10a4      	asrs	r4, r4, #2
 800b5ea:	2600      	movs	r6, #0
 800b5ec:	42a6      	cmp	r6, r4
 800b5ee:	d109      	bne.n	800b604 <__libc_init_array+0x24>
 800b5f0:	4d0b      	ldr	r5, [pc, #44]	; (800b620 <__libc_init_array+0x40>)
 800b5f2:	4c0c      	ldr	r4, [pc, #48]	; (800b624 <__libc_init_array+0x44>)
 800b5f4:	f003 f9b4 	bl	800e960 <_init>
 800b5f8:	1b64      	subs	r4, r4, r5
 800b5fa:	10a4      	asrs	r4, r4, #2
 800b5fc:	2600      	movs	r6, #0
 800b5fe:	42a6      	cmp	r6, r4
 800b600:	d105      	bne.n	800b60e <__libc_init_array+0x2e>
 800b602:	bd70      	pop	{r4, r5, r6, pc}
 800b604:	f855 3b04 	ldr.w	r3, [r5], #4
 800b608:	4798      	blx	r3
 800b60a:	3601      	adds	r6, #1
 800b60c:	e7ee      	b.n	800b5ec <__libc_init_array+0xc>
 800b60e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b612:	4798      	blx	r3
 800b614:	3601      	adds	r6, #1
 800b616:	e7f2      	b.n	800b5fe <__libc_init_array+0x1e>
 800b618:	0800ec10 	.word	0x0800ec10
 800b61c:	0800ec10 	.word	0x0800ec10
 800b620:	0800ec10 	.word	0x0800ec10
 800b624:	0800ec14 	.word	0x0800ec14

0800b628 <memset>:
 800b628:	4402      	add	r2, r0
 800b62a:	4603      	mov	r3, r0
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d100      	bne.n	800b632 <memset+0xa>
 800b630:	4770      	bx	lr
 800b632:	f803 1b01 	strb.w	r1, [r3], #1
 800b636:	e7f9      	b.n	800b62c <memset+0x4>

0800b638 <siprintf>:
 800b638:	b40e      	push	{r1, r2, r3}
 800b63a:	b500      	push	{lr}
 800b63c:	b09c      	sub	sp, #112	; 0x70
 800b63e:	ab1d      	add	r3, sp, #116	; 0x74
 800b640:	9002      	str	r0, [sp, #8]
 800b642:	9006      	str	r0, [sp, #24]
 800b644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b648:	4809      	ldr	r0, [pc, #36]	; (800b670 <siprintf+0x38>)
 800b64a:	9107      	str	r1, [sp, #28]
 800b64c:	9104      	str	r1, [sp, #16]
 800b64e:	4909      	ldr	r1, [pc, #36]	; (800b674 <siprintf+0x3c>)
 800b650:	f853 2b04 	ldr.w	r2, [r3], #4
 800b654:	9105      	str	r1, [sp, #20]
 800b656:	6800      	ldr	r0, [r0, #0]
 800b658:	9301      	str	r3, [sp, #4]
 800b65a:	a902      	add	r1, sp, #8
 800b65c:	f000 f868 	bl	800b730 <_svfiprintf_r>
 800b660:	9b02      	ldr	r3, [sp, #8]
 800b662:	2200      	movs	r2, #0
 800b664:	701a      	strb	r2, [r3, #0]
 800b666:	b01c      	add	sp, #112	; 0x70
 800b668:	f85d eb04 	ldr.w	lr, [sp], #4
 800b66c:	b003      	add	sp, #12
 800b66e:	4770      	bx	lr
 800b670:	20000020 	.word	0x20000020
 800b674:	ffff0208 	.word	0xffff0208

0800b678 <__ssputs_r>:
 800b678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	688e      	ldr	r6, [r1, #8]
 800b67e:	429e      	cmp	r6, r3
 800b680:	4682      	mov	sl, r0
 800b682:	460c      	mov	r4, r1
 800b684:	4690      	mov	r8, r2
 800b686:	461f      	mov	r7, r3
 800b688:	d838      	bhi.n	800b6fc <__ssputs_r+0x84>
 800b68a:	898a      	ldrh	r2, [r1, #12]
 800b68c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b690:	d032      	beq.n	800b6f8 <__ssputs_r+0x80>
 800b692:	6825      	ldr	r5, [r4, #0]
 800b694:	6909      	ldr	r1, [r1, #16]
 800b696:	eba5 0901 	sub.w	r9, r5, r1
 800b69a:	6965      	ldr	r5, [r4, #20]
 800b69c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	444b      	add	r3, r9
 800b6a8:	106d      	asrs	r5, r5, #1
 800b6aa:	429d      	cmp	r5, r3
 800b6ac:	bf38      	it	cc
 800b6ae:	461d      	movcc	r5, r3
 800b6b0:	0553      	lsls	r3, r2, #21
 800b6b2:	d531      	bpl.n	800b718 <__ssputs_r+0xa0>
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	f000 fb63 	bl	800bd80 <_malloc_r>
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	b950      	cbnz	r0, 800b6d4 <__ssputs_r+0x5c>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	f8ca 3000 	str.w	r3, [sl]
 800b6c4:	89a3      	ldrh	r3, [r4, #12]
 800b6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ca:	81a3      	strh	r3, [r4, #12]
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d4:	6921      	ldr	r1, [r4, #16]
 800b6d6:	464a      	mov	r2, r9
 800b6d8:	f000 fabe 	bl	800bc58 <memcpy>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	6126      	str	r6, [r4, #16]
 800b6ea:	6165      	str	r5, [r4, #20]
 800b6ec:	444e      	add	r6, r9
 800b6ee:	eba5 0509 	sub.w	r5, r5, r9
 800b6f2:	6026      	str	r6, [r4, #0]
 800b6f4:	60a5      	str	r5, [r4, #8]
 800b6f6:	463e      	mov	r6, r7
 800b6f8:	42be      	cmp	r6, r7
 800b6fa:	d900      	bls.n	800b6fe <__ssputs_r+0x86>
 800b6fc:	463e      	mov	r6, r7
 800b6fe:	6820      	ldr	r0, [r4, #0]
 800b700:	4632      	mov	r2, r6
 800b702:	4641      	mov	r1, r8
 800b704:	f000 fab6 	bl	800bc74 <memmove>
 800b708:	68a3      	ldr	r3, [r4, #8]
 800b70a:	1b9b      	subs	r3, r3, r6
 800b70c:	60a3      	str	r3, [r4, #8]
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	4433      	add	r3, r6
 800b712:	6023      	str	r3, [r4, #0]
 800b714:	2000      	movs	r0, #0
 800b716:	e7db      	b.n	800b6d0 <__ssputs_r+0x58>
 800b718:	462a      	mov	r2, r5
 800b71a:	f000 fba5 	bl	800be68 <_realloc_r>
 800b71e:	4606      	mov	r6, r0
 800b720:	2800      	cmp	r0, #0
 800b722:	d1e1      	bne.n	800b6e8 <__ssputs_r+0x70>
 800b724:	6921      	ldr	r1, [r4, #16]
 800b726:	4650      	mov	r0, sl
 800b728:	f000 fabe 	bl	800bca8 <_free_r>
 800b72c:	e7c7      	b.n	800b6be <__ssputs_r+0x46>
	...

0800b730 <_svfiprintf_r>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	4698      	mov	r8, r3
 800b736:	898b      	ldrh	r3, [r1, #12]
 800b738:	061b      	lsls	r3, r3, #24
 800b73a:	b09d      	sub	sp, #116	; 0x74
 800b73c:	4607      	mov	r7, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	4614      	mov	r4, r2
 800b742:	d50e      	bpl.n	800b762 <_svfiprintf_r+0x32>
 800b744:	690b      	ldr	r3, [r1, #16]
 800b746:	b963      	cbnz	r3, 800b762 <_svfiprintf_r+0x32>
 800b748:	2140      	movs	r1, #64	; 0x40
 800b74a:	f000 fb19 	bl	800bd80 <_malloc_r>
 800b74e:	6028      	str	r0, [r5, #0]
 800b750:	6128      	str	r0, [r5, #16]
 800b752:	b920      	cbnz	r0, 800b75e <_svfiprintf_r+0x2e>
 800b754:	230c      	movs	r3, #12
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b75c:	e0d1      	b.n	800b902 <_svfiprintf_r+0x1d2>
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	616b      	str	r3, [r5, #20]
 800b762:	2300      	movs	r3, #0
 800b764:	9309      	str	r3, [sp, #36]	; 0x24
 800b766:	2320      	movs	r3, #32
 800b768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b76c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b770:	2330      	movs	r3, #48	; 0x30
 800b772:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b91c <_svfiprintf_r+0x1ec>
 800b776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b77a:	f04f 0901 	mov.w	r9, #1
 800b77e:	4623      	mov	r3, r4
 800b780:	469a      	mov	sl, r3
 800b782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b786:	b10a      	cbz	r2, 800b78c <_svfiprintf_r+0x5c>
 800b788:	2a25      	cmp	r2, #37	; 0x25
 800b78a:	d1f9      	bne.n	800b780 <_svfiprintf_r+0x50>
 800b78c:	ebba 0b04 	subs.w	fp, sl, r4
 800b790:	d00b      	beq.n	800b7aa <_svfiprintf_r+0x7a>
 800b792:	465b      	mov	r3, fp
 800b794:	4622      	mov	r2, r4
 800b796:	4629      	mov	r1, r5
 800b798:	4638      	mov	r0, r7
 800b79a:	f7ff ff6d 	bl	800b678 <__ssputs_r>
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f000 80aa 	beq.w	800b8f8 <_svfiprintf_r+0x1c8>
 800b7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a6:	445a      	add	r2, fp
 800b7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 80a2 	beq.w	800b8f8 <_svfiprintf_r+0x1c8>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7be:	f10a 0a01 	add.w	sl, sl, #1
 800b7c2:	9304      	str	r3, [sp, #16]
 800b7c4:	9307      	str	r3, [sp, #28]
 800b7c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b7cc:	4654      	mov	r4, sl
 800b7ce:	2205      	movs	r2, #5
 800b7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d4:	4851      	ldr	r0, [pc, #324]	; (800b91c <_svfiprintf_r+0x1ec>)
 800b7d6:	f7f4 fd03 	bl	80001e0 <memchr>
 800b7da:	9a04      	ldr	r2, [sp, #16]
 800b7dc:	b9d8      	cbnz	r0, 800b816 <_svfiprintf_r+0xe6>
 800b7de:	06d0      	lsls	r0, r2, #27
 800b7e0:	bf44      	itt	mi
 800b7e2:	2320      	movmi	r3, #32
 800b7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e8:	0711      	lsls	r1, r2, #28
 800b7ea:	bf44      	itt	mi
 800b7ec:	232b      	movmi	r3, #43	; 0x2b
 800b7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f8:	d015      	beq.n	800b826 <_svfiprintf_r+0xf6>
 800b7fa:	9a07      	ldr	r2, [sp, #28]
 800b7fc:	4654      	mov	r4, sl
 800b7fe:	2000      	movs	r0, #0
 800b800:	f04f 0c0a 	mov.w	ip, #10
 800b804:	4621      	mov	r1, r4
 800b806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80a:	3b30      	subs	r3, #48	; 0x30
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d94e      	bls.n	800b8ae <_svfiprintf_r+0x17e>
 800b810:	b1b0      	cbz	r0, 800b840 <_svfiprintf_r+0x110>
 800b812:	9207      	str	r2, [sp, #28]
 800b814:	e014      	b.n	800b840 <_svfiprintf_r+0x110>
 800b816:	eba0 0308 	sub.w	r3, r0, r8
 800b81a:	fa09 f303 	lsl.w	r3, r9, r3
 800b81e:	4313      	orrs	r3, r2
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	46a2      	mov	sl, r4
 800b824:	e7d2      	b.n	800b7cc <_svfiprintf_r+0x9c>
 800b826:	9b03      	ldr	r3, [sp, #12]
 800b828:	1d19      	adds	r1, r3, #4
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	9103      	str	r1, [sp, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bfbb      	ittet	lt
 800b832:	425b      	neglt	r3, r3
 800b834:	f042 0202 	orrlt.w	r2, r2, #2
 800b838:	9307      	strge	r3, [sp, #28]
 800b83a:	9307      	strlt	r3, [sp, #28]
 800b83c:	bfb8      	it	lt
 800b83e:	9204      	strlt	r2, [sp, #16]
 800b840:	7823      	ldrb	r3, [r4, #0]
 800b842:	2b2e      	cmp	r3, #46	; 0x2e
 800b844:	d10c      	bne.n	800b860 <_svfiprintf_r+0x130>
 800b846:	7863      	ldrb	r3, [r4, #1]
 800b848:	2b2a      	cmp	r3, #42	; 0x2a
 800b84a:	d135      	bne.n	800b8b8 <_svfiprintf_r+0x188>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	1d1a      	adds	r2, r3, #4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	9203      	str	r2, [sp, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfb8      	it	lt
 800b858:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b85c:	3402      	adds	r4, #2
 800b85e:	9305      	str	r3, [sp, #20]
 800b860:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b92c <_svfiprintf_r+0x1fc>
 800b864:	7821      	ldrb	r1, [r4, #0]
 800b866:	2203      	movs	r2, #3
 800b868:	4650      	mov	r0, sl
 800b86a:	f7f4 fcb9 	bl	80001e0 <memchr>
 800b86e:	b140      	cbz	r0, 800b882 <_svfiprintf_r+0x152>
 800b870:	2340      	movs	r3, #64	; 0x40
 800b872:	eba0 000a 	sub.w	r0, r0, sl
 800b876:	fa03 f000 	lsl.w	r0, r3, r0
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	4303      	orrs	r3, r0
 800b87e:	3401      	adds	r4, #1
 800b880:	9304      	str	r3, [sp, #16]
 800b882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b886:	4826      	ldr	r0, [pc, #152]	; (800b920 <_svfiprintf_r+0x1f0>)
 800b888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b88c:	2206      	movs	r2, #6
 800b88e:	f7f4 fca7 	bl	80001e0 <memchr>
 800b892:	2800      	cmp	r0, #0
 800b894:	d038      	beq.n	800b908 <_svfiprintf_r+0x1d8>
 800b896:	4b23      	ldr	r3, [pc, #140]	; (800b924 <_svfiprintf_r+0x1f4>)
 800b898:	bb1b      	cbnz	r3, 800b8e2 <_svfiprintf_r+0x1b2>
 800b89a:	9b03      	ldr	r3, [sp, #12]
 800b89c:	3307      	adds	r3, #7
 800b89e:	f023 0307 	bic.w	r3, r3, #7
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	9303      	str	r3, [sp, #12]
 800b8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a8:	4433      	add	r3, r6
 800b8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ac:	e767      	b.n	800b77e <_svfiprintf_r+0x4e>
 800b8ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	e7a5      	b.n	800b804 <_svfiprintf_r+0xd4>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	3401      	adds	r4, #1
 800b8bc:	9305      	str	r3, [sp, #20]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	f04f 0c0a 	mov.w	ip, #10
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ca:	3a30      	subs	r2, #48	; 0x30
 800b8cc:	2a09      	cmp	r2, #9
 800b8ce:	d903      	bls.n	800b8d8 <_svfiprintf_r+0x1a8>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0c5      	beq.n	800b860 <_svfiprintf_r+0x130>
 800b8d4:	9105      	str	r1, [sp, #20]
 800b8d6:	e7c3      	b.n	800b860 <_svfiprintf_r+0x130>
 800b8d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8dc:	4604      	mov	r4, r0
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7f0      	b.n	800b8c4 <_svfiprintf_r+0x194>
 800b8e2:	ab03      	add	r3, sp, #12
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <_svfiprintf_r+0x1f8>)
 800b8ea:	a904      	add	r1, sp, #16
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f3af 8000 	nop.w
 800b8f2:	1c42      	adds	r2, r0, #1
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	d1d6      	bne.n	800b8a6 <_svfiprintf_r+0x176>
 800b8f8:	89ab      	ldrh	r3, [r5, #12]
 800b8fa:	065b      	lsls	r3, r3, #25
 800b8fc:	f53f af2c 	bmi.w	800b758 <_svfiprintf_r+0x28>
 800b900:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b902:	b01d      	add	sp, #116	; 0x74
 800b904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <_svfiprintf_r+0x1f8>)
 800b910:	a904      	add	r1, sp, #16
 800b912:	4638      	mov	r0, r7
 800b914:	f000 f87a 	bl	800ba0c <_printf_i>
 800b918:	e7eb      	b.n	800b8f2 <_svfiprintf_r+0x1c2>
 800b91a:	bf00      	nop
 800b91c:	0800e9b0 	.word	0x0800e9b0
 800b920:	0800e9ba 	.word	0x0800e9ba
 800b924:	00000000 	.word	0x00000000
 800b928:	0800b679 	.word	0x0800b679
 800b92c:	0800e9b6 	.word	0x0800e9b6

0800b930 <_printf_common>:
 800b930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b934:	4616      	mov	r6, r2
 800b936:	4699      	mov	r9, r3
 800b938:	688a      	ldr	r2, [r1, #8]
 800b93a:	690b      	ldr	r3, [r1, #16]
 800b93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b940:	4293      	cmp	r3, r2
 800b942:	bfb8      	it	lt
 800b944:	4613      	movlt	r3, r2
 800b946:	6033      	str	r3, [r6, #0]
 800b948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b94c:	4607      	mov	r7, r0
 800b94e:	460c      	mov	r4, r1
 800b950:	b10a      	cbz	r2, 800b956 <_printf_common+0x26>
 800b952:	3301      	adds	r3, #1
 800b954:	6033      	str	r3, [r6, #0]
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	0699      	lsls	r1, r3, #26
 800b95a:	bf42      	ittt	mi
 800b95c:	6833      	ldrmi	r3, [r6, #0]
 800b95e:	3302      	addmi	r3, #2
 800b960:	6033      	strmi	r3, [r6, #0]
 800b962:	6825      	ldr	r5, [r4, #0]
 800b964:	f015 0506 	ands.w	r5, r5, #6
 800b968:	d106      	bne.n	800b978 <_printf_common+0x48>
 800b96a:	f104 0a19 	add.w	sl, r4, #25
 800b96e:	68e3      	ldr	r3, [r4, #12]
 800b970:	6832      	ldr	r2, [r6, #0]
 800b972:	1a9b      	subs	r3, r3, r2
 800b974:	42ab      	cmp	r3, r5
 800b976:	dc26      	bgt.n	800b9c6 <_printf_common+0x96>
 800b978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b97c:	1e13      	subs	r3, r2, #0
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	bf18      	it	ne
 800b982:	2301      	movne	r3, #1
 800b984:	0692      	lsls	r2, r2, #26
 800b986:	d42b      	bmi.n	800b9e0 <_printf_common+0xb0>
 800b988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b98c:	4649      	mov	r1, r9
 800b98e:	4638      	mov	r0, r7
 800b990:	47c0      	blx	r8
 800b992:	3001      	adds	r0, #1
 800b994:	d01e      	beq.n	800b9d4 <_printf_common+0xa4>
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	68e5      	ldr	r5, [r4, #12]
 800b99a:	6832      	ldr	r2, [r6, #0]
 800b99c:	f003 0306 	and.w	r3, r3, #6
 800b9a0:	2b04      	cmp	r3, #4
 800b9a2:	bf08      	it	eq
 800b9a4:	1aad      	subeq	r5, r5, r2
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	6922      	ldr	r2, [r4, #16]
 800b9aa:	bf0c      	ite	eq
 800b9ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9b0:	2500      	movne	r5, #0
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	bfc4      	itt	gt
 800b9b6:	1a9b      	subgt	r3, r3, r2
 800b9b8:	18ed      	addgt	r5, r5, r3
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	341a      	adds	r4, #26
 800b9be:	42b5      	cmp	r5, r6
 800b9c0:	d11a      	bne.n	800b9f8 <_printf_common+0xc8>
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	e008      	b.n	800b9d8 <_printf_common+0xa8>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	4652      	mov	r2, sl
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	47c0      	blx	r8
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	d103      	bne.n	800b9dc <_printf_common+0xac>
 800b9d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9dc:	3501      	adds	r5, #1
 800b9de:	e7c6      	b.n	800b96e <_printf_common+0x3e>
 800b9e0:	18e1      	adds	r1, r4, r3
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	2030      	movs	r0, #48	; 0x30
 800b9e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9ea:	4422      	add	r2, r4
 800b9ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	e7c7      	b.n	800b988 <_printf_common+0x58>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4638      	mov	r0, r7
 800ba00:	47c0      	blx	r8
 800ba02:	3001      	adds	r0, #1
 800ba04:	d0e6      	beq.n	800b9d4 <_printf_common+0xa4>
 800ba06:	3601      	adds	r6, #1
 800ba08:	e7d9      	b.n	800b9be <_printf_common+0x8e>
	...

0800ba0c <_printf_i>:
 800ba0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba10:	7e0f      	ldrb	r7, [r1, #24]
 800ba12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba14:	2f78      	cmp	r7, #120	; 0x78
 800ba16:	4691      	mov	r9, r2
 800ba18:	4680      	mov	r8, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	469a      	mov	sl, r3
 800ba1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba22:	d807      	bhi.n	800ba34 <_printf_i+0x28>
 800ba24:	2f62      	cmp	r7, #98	; 0x62
 800ba26:	d80a      	bhi.n	800ba3e <_printf_i+0x32>
 800ba28:	2f00      	cmp	r7, #0
 800ba2a:	f000 80d8 	beq.w	800bbde <_printf_i+0x1d2>
 800ba2e:	2f58      	cmp	r7, #88	; 0x58
 800ba30:	f000 80a3 	beq.w	800bb7a <_printf_i+0x16e>
 800ba34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba3c:	e03a      	b.n	800bab4 <_printf_i+0xa8>
 800ba3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba42:	2b15      	cmp	r3, #21
 800ba44:	d8f6      	bhi.n	800ba34 <_printf_i+0x28>
 800ba46:	a101      	add	r1, pc, #4	; (adr r1, 800ba4c <_printf_i+0x40>)
 800ba48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba4c:	0800baa5 	.word	0x0800baa5
 800ba50:	0800bab9 	.word	0x0800bab9
 800ba54:	0800ba35 	.word	0x0800ba35
 800ba58:	0800ba35 	.word	0x0800ba35
 800ba5c:	0800ba35 	.word	0x0800ba35
 800ba60:	0800ba35 	.word	0x0800ba35
 800ba64:	0800bab9 	.word	0x0800bab9
 800ba68:	0800ba35 	.word	0x0800ba35
 800ba6c:	0800ba35 	.word	0x0800ba35
 800ba70:	0800ba35 	.word	0x0800ba35
 800ba74:	0800ba35 	.word	0x0800ba35
 800ba78:	0800bbc5 	.word	0x0800bbc5
 800ba7c:	0800bae9 	.word	0x0800bae9
 800ba80:	0800bba7 	.word	0x0800bba7
 800ba84:	0800ba35 	.word	0x0800ba35
 800ba88:	0800ba35 	.word	0x0800ba35
 800ba8c:	0800bbe7 	.word	0x0800bbe7
 800ba90:	0800ba35 	.word	0x0800ba35
 800ba94:	0800bae9 	.word	0x0800bae9
 800ba98:	0800ba35 	.word	0x0800ba35
 800ba9c:	0800ba35 	.word	0x0800ba35
 800baa0:	0800bbaf 	.word	0x0800bbaf
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	1d1a      	adds	r2, r3, #4
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	602a      	str	r2, [r5, #0]
 800baac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bab4:	2301      	movs	r3, #1
 800bab6:	e0a3      	b.n	800bc00 <_printf_i+0x1f4>
 800bab8:	6820      	ldr	r0, [r4, #0]
 800baba:	6829      	ldr	r1, [r5, #0]
 800babc:	0606      	lsls	r6, r0, #24
 800babe:	f101 0304 	add.w	r3, r1, #4
 800bac2:	d50a      	bpl.n	800bada <_printf_i+0xce>
 800bac4:	680e      	ldr	r6, [r1, #0]
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	2e00      	cmp	r6, #0
 800baca:	da03      	bge.n	800bad4 <_printf_i+0xc8>
 800bacc:	232d      	movs	r3, #45	; 0x2d
 800bace:	4276      	negs	r6, r6
 800bad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bad4:	485e      	ldr	r0, [pc, #376]	; (800bc50 <_printf_i+0x244>)
 800bad6:	230a      	movs	r3, #10
 800bad8:	e019      	b.n	800bb0e <_printf_i+0x102>
 800bada:	680e      	ldr	r6, [r1, #0]
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bae2:	bf18      	it	ne
 800bae4:	b236      	sxthne	r6, r6
 800bae6:	e7ef      	b.n	800bac8 <_printf_i+0xbc>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	6820      	ldr	r0, [r4, #0]
 800baec:	1d19      	adds	r1, r3, #4
 800baee:	6029      	str	r1, [r5, #0]
 800baf0:	0601      	lsls	r1, r0, #24
 800baf2:	d501      	bpl.n	800baf8 <_printf_i+0xec>
 800baf4:	681e      	ldr	r6, [r3, #0]
 800baf6:	e002      	b.n	800bafe <_printf_i+0xf2>
 800baf8:	0646      	lsls	r6, r0, #25
 800bafa:	d5fb      	bpl.n	800baf4 <_printf_i+0xe8>
 800bafc:	881e      	ldrh	r6, [r3, #0]
 800bafe:	4854      	ldr	r0, [pc, #336]	; (800bc50 <_printf_i+0x244>)
 800bb00:	2f6f      	cmp	r7, #111	; 0x6f
 800bb02:	bf0c      	ite	eq
 800bb04:	2308      	moveq	r3, #8
 800bb06:	230a      	movne	r3, #10
 800bb08:	2100      	movs	r1, #0
 800bb0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb0e:	6865      	ldr	r5, [r4, #4]
 800bb10:	60a5      	str	r5, [r4, #8]
 800bb12:	2d00      	cmp	r5, #0
 800bb14:	bfa2      	ittt	ge
 800bb16:	6821      	ldrge	r1, [r4, #0]
 800bb18:	f021 0104 	bicge.w	r1, r1, #4
 800bb1c:	6021      	strge	r1, [r4, #0]
 800bb1e:	b90e      	cbnz	r6, 800bb24 <_printf_i+0x118>
 800bb20:	2d00      	cmp	r5, #0
 800bb22:	d04d      	beq.n	800bbc0 <_printf_i+0x1b4>
 800bb24:	4615      	mov	r5, r2
 800bb26:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb2a:	fb03 6711 	mls	r7, r3, r1, r6
 800bb2e:	5dc7      	ldrb	r7, [r0, r7]
 800bb30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb34:	4637      	mov	r7, r6
 800bb36:	42bb      	cmp	r3, r7
 800bb38:	460e      	mov	r6, r1
 800bb3a:	d9f4      	bls.n	800bb26 <_printf_i+0x11a>
 800bb3c:	2b08      	cmp	r3, #8
 800bb3e:	d10b      	bne.n	800bb58 <_printf_i+0x14c>
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	07de      	lsls	r6, r3, #31
 800bb44:	d508      	bpl.n	800bb58 <_printf_i+0x14c>
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	6861      	ldr	r1, [r4, #4]
 800bb4a:	4299      	cmp	r1, r3
 800bb4c:	bfde      	ittt	le
 800bb4e:	2330      	movle	r3, #48	; 0x30
 800bb50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bb58:	1b52      	subs	r2, r2, r5
 800bb5a:	6122      	str	r2, [r4, #16]
 800bb5c:	f8cd a000 	str.w	sl, [sp]
 800bb60:	464b      	mov	r3, r9
 800bb62:	aa03      	add	r2, sp, #12
 800bb64:	4621      	mov	r1, r4
 800bb66:	4640      	mov	r0, r8
 800bb68:	f7ff fee2 	bl	800b930 <_printf_common>
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d14c      	bne.n	800bc0a <_printf_i+0x1fe>
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb74:	b004      	add	sp, #16
 800bb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7a:	4835      	ldr	r0, [pc, #212]	; (800bc50 <_printf_i+0x244>)
 800bb7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb80:	6829      	ldr	r1, [r5, #0]
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb88:	6029      	str	r1, [r5, #0]
 800bb8a:	061d      	lsls	r5, r3, #24
 800bb8c:	d514      	bpl.n	800bbb8 <_printf_i+0x1ac>
 800bb8e:	07df      	lsls	r7, r3, #31
 800bb90:	bf44      	itt	mi
 800bb92:	f043 0320 	orrmi.w	r3, r3, #32
 800bb96:	6023      	strmi	r3, [r4, #0]
 800bb98:	b91e      	cbnz	r6, 800bba2 <_printf_i+0x196>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	f023 0320 	bic.w	r3, r3, #32
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	2310      	movs	r3, #16
 800bba4:	e7b0      	b.n	800bb08 <_printf_i+0xfc>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	f043 0320 	orr.w	r3, r3, #32
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	2378      	movs	r3, #120	; 0x78
 800bbb0:	4828      	ldr	r0, [pc, #160]	; (800bc54 <_printf_i+0x248>)
 800bbb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbb6:	e7e3      	b.n	800bb80 <_printf_i+0x174>
 800bbb8:	0659      	lsls	r1, r3, #25
 800bbba:	bf48      	it	mi
 800bbbc:	b2b6      	uxthmi	r6, r6
 800bbbe:	e7e6      	b.n	800bb8e <_printf_i+0x182>
 800bbc0:	4615      	mov	r5, r2
 800bbc2:	e7bb      	b.n	800bb3c <_printf_i+0x130>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	6826      	ldr	r6, [r4, #0]
 800bbc8:	6961      	ldr	r1, [r4, #20]
 800bbca:	1d18      	adds	r0, r3, #4
 800bbcc:	6028      	str	r0, [r5, #0]
 800bbce:	0635      	lsls	r5, r6, #24
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	d501      	bpl.n	800bbd8 <_printf_i+0x1cc>
 800bbd4:	6019      	str	r1, [r3, #0]
 800bbd6:	e002      	b.n	800bbde <_printf_i+0x1d2>
 800bbd8:	0670      	lsls	r0, r6, #25
 800bbda:	d5fb      	bpl.n	800bbd4 <_printf_i+0x1c8>
 800bbdc:	8019      	strh	r1, [r3, #0]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	4615      	mov	r5, r2
 800bbe4:	e7ba      	b.n	800bb5c <_printf_i+0x150>
 800bbe6:	682b      	ldr	r3, [r5, #0]
 800bbe8:	1d1a      	adds	r2, r3, #4
 800bbea:	602a      	str	r2, [r5, #0]
 800bbec:	681d      	ldr	r5, [r3, #0]
 800bbee:	6862      	ldr	r2, [r4, #4]
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f7f4 faf4 	bl	80001e0 <memchr>
 800bbf8:	b108      	cbz	r0, 800bbfe <_printf_i+0x1f2>
 800bbfa:	1b40      	subs	r0, r0, r5
 800bbfc:	6060      	str	r0, [r4, #4]
 800bbfe:	6863      	ldr	r3, [r4, #4]
 800bc00:	6123      	str	r3, [r4, #16]
 800bc02:	2300      	movs	r3, #0
 800bc04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc08:	e7a8      	b.n	800bb5c <_printf_i+0x150>
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	462a      	mov	r2, r5
 800bc0e:	4649      	mov	r1, r9
 800bc10:	4640      	mov	r0, r8
 800bc12:	47d0      	blx	sl
 800bc14:	3001      	adds	r0, #1
 800bc16:	d0ab      	beq.n	800bb70 <_printf_i+0x164>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	079b      	lsls	r3, r3, #30
 800bc1c:	d413      	bmi.n	800bc46 <_printf_i+0x23a>
 800bc1e:	68e0      	ldr	r0, [r4, #12]
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	4298      	cmp	r0, r3
 800bc24:	bfb8      	it	lt
 800bc26:	4618      	movlt	r0, r3
 800bc28:	e7a4      	b.n	800bb74 <_printf_i+0x168>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	4649      	mov	r1, r9
 800bc30:	4640      	mov	r0, r8
 800bc32:	47d0      	blx	sl
 800bc34:	3001      	adds	r0, #1
 800bc36:	d09b      	beq.n	800bb70 <_printf_i+0x164>
 800bc38:	3501      	adds	r5, #1
 800bc3a:	68e3      	ldr	r3, [r4, #12]
 800bc3c:	9903      	ldr	r1, [sp, #12]
 800bc3e:	1a5b      	subs	r3, r3, r1
 800bc40:	42ab      	cmp	r3, r5
 800bc42:	dcf2      	bgt.n	800bc2a <_printf_i+0x21e>
 800bc44:	e7eb      	b.n	800bc1e <_printf_i+0x212>
 800bc46:	2500      	movs	r5, #0
 800bc48:	f104 0619 	add.w	r6, r4, #25
 800bc4c:	e7f5      	b.n	800bc3a <_printf_i+0x22e>
 800bc4e:	bf00      	nop
 800bc50:	0800e9c1 	.word	0x0800e9c1
 800bc54:	0800e9d2 	.word	0x0800e9d2

0800bc58 <memcpy>:
 800bc58:	440a      	add	r2, r1
 800bc5a:	4291      	cmp	r1, r2
 800bc5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc60:	d100      	bne.n	800bc64 <memcpy+0xc>
 800bc62:	4770      	bx	lr
 800bc64:	b510      	push	{r4, lr}
 800bc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc6e:	4291      	cmp	r1, r2
 800bc70:	d1f9      	bne.n	800bc66 <memcpy+0xe>
 800bc72:	bd10      	pop	{r4, pc}

0800bc74 <memmove>:
 800bc74:	4288      	cmp	r0, r1
 800bc76:	b510      	push	{r4, lr}
 800bc78:	eb01 0402 	add.w	r4, r1, r2
 800bc7c:	d902      	bls.n	800bc84 <memmove+0x10>
 800bc7e:	4284      	cmp	r4, r0
 800bc80:	4623      	mov	r3, r4
 800bc82:	d807      	bhi.n	800bc94 <memmove+0x20>
 800bc84:	1e43      	subs	r3, r0, #1
 800bc86:	42a1      	cmp	r1, r4
 800bc88:	d008      	beq.n	800bc9c <memmove+0x28>
 800bc8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc92:	e7f8      	b.n	800bc86 <memmove+0x12>
 800bc94:	4402      	add	r2, r0
 800bc96:	4601      	mov	r1, r0
 800bc98:	428a      	cmp	r2, r1
 800bc9a:	d100      	bne.n	800bc9e <memmove+0x2a>
 800bc9c:	bd10      	pop	{r4, pc}
 800bc9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bca6:	e7f7      	b.n	800bc98 <memmove+0x24>

0800bca8 <_free_r>:
 800bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcaa:	2900      	cmp	r1, #0
 800bcac:	d044      	beq.n	800bd38 <_free_r+0x90>
 800bcae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcb2:	9001      	str	r0, [sp, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f1a1 0404 	sub.w	r4, r1, #4
 800bcba:	bfb8      	it	lt
 800bcbc:	18e4      	addlt	r4, r4, r3
 800bcbe:	f000 f913 	bl	800bee8 <__malloc_lock>
 800bcc2:	4a1e      	ldr	r2, [pc, #120]	; (800bd3c <_free_r+0x94>)
 800bcc4:	9801      	ldr	r0, [sp, #4]
 800bcc6:	6813      	ldr	r3, [r2, #0]
 800bcc8:	b933      	cbnz	r3, 800bcd8 <_free_r+0x30>
 800bcca:	6063      	str	r3, [r4, #4]
 800bccc:	6014      	str	r4, [r2, #0]
 800bcce:	b003      	add	sp, #12
 800bcd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcd4:	f000 b90e 	b.w	800bef4 <__malloc_unlock>
 800bcd8:	42a3      	cmp	r3, r4
 800bcda:	d908      	bls.n	800bcee <_free_r+0x46>
 800bcdc:	6825      	ldr	r5, [r4, #0]
 800bcde:	1961      	adds	r1, r4, r5
 800bce0:	428b      	cmp	r3, r1
 800bce2:	bf01      	itttt	eq
 800bce4:	6819      	ldreq	r1, [r3, #0]
 800bce6:	685b      	ldreq	r3, [r3, #4]
 800bce8:	1949      	addeq	r1, r1, r5
 800bcea:	6021      	streq	r1, [r4, #0]
 800bcec:	e7ed      	b.n	800bcca <_free_r+0x22>
 800bcee:	461a      	mov	r2, r3
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	b10b      	cbz	r3, 800bcf8 <_free_r+0x50>
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	d9fa      	bls.n	800bcee <_free_r+0x46>
 800bcf8:	6811      	ldr	r1, [r2, #0]
 800bcfa:	1855      	adds	r5, r2, r1
 800bcfc:	42a5      	cmp	r5, r4
 800bcfe:	d10b      	bne.n	800bd18 <_free_r+0x70>
 800bd00:	6824      	ldr	r4, [r4, #0]
 800bd02:	4421      	add	r1, r4
 800bd04:	1854      	adds	r4, r2, r1
 800bd06:	42a3      	cmp	r3, r4
 800bd08:	6011      	str	r1, [r2, #0]
 800bd0a:	d1e0      	bne.n	800bcce <_free_r+0x26>
 800bd0c:	681c      	ldr	r4, [r3, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	6053      	str	r3, [r2, #4]
 800bd12:	4421      	add	r1, r4
 800bd14:	6011      	str	r1, [r2, #0]
 800bd16:	e7da      	b.n	800bcce <_free_r+0x26>
 800bd18:	d902      	bls.n	800bd20 <_free_r+0x78>
 800bd1a:	230c      	movs	r3, #12
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	e7d6      	b.n	800bcce <_free_r+0x26>
 800bd20:	6825      	ldr	r5, [r4, #0]
 800bd22:	1961      	adds	r1, r4, r5
 800bd24:	428b      	cmp	r3, r1
 800bd26:	bf04      	itt	eq
 800bd28:	6819      	ldreq	r1, [r3, #0]
 800bd2a:	685b      	ldreq	r3, [r3, #4]
 800bd2c:	6063      	str	r3, [r4, #4]
 800bd2e:	bf04      	itt	eq
 800bd30:	1949      	addeq	r1, r1, r5
 800bd32:	6021      	streq	r1, [r4, #0]
 800bd34:	6054      	str	r4, [r2, #4]
 800bd36:	e7ca      	b.n	800bcce <_free_r+0x26>
 800bd38:	b003      	add	sp, #12
 800bd3a:	bd30      	pop	{r4, r5, pc}
 800bd3c:	2000098c 	.word	0x2000098c

0800bd40 <sbrk_aligned>:
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	4e0e      	ldr	r6, [pc, #56]	; (800bd7c <sbrk_aligned+0x3c>)
 800bd44:	460c      	mov	r4, r1
 800bd46:	6831      	ldr	r1, [r6, #0]
 800bd48:	4605      	mov	r5, r0
 800bd4a:	b911      	cbnz	r1, 800bd52 <sbrk_aligned+0x12>
 800bd4c:	f000 f8bc 	bl	800bec8 <_sbrk_r>
 800bd50:	6030      	str	r0, [r6, #0]
 800bd52:	4621      	mov	r1, r4
 800bd54:	4628      	mov	r0, r5
 800bd56:	f000 f8b7 	bl	800bec8 <_sbrk_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d00a      	beq.n	800bd74 <sbrk_aligned+0x34>
 800bd5e:	1cc4      	adds	r4, r0, #3
 800bd60:	f024 0403 	bic.w	r4, r4, #3
 800bd64:	42a0      	cmp	r0, r4
 800bd66:	d007      	beq.n	800bd78 <sbrk_aligned+0x38>
 800bd68:	1a21      	subs	r1, r4, r0
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f000 f8ac 	bl	800bec8 <_sbrk_r>
 800bd70:	3001      	adds	r0, #1
 800bd72:	d101      	bne.n	800bd78 <sbrk_aligned+0x38>
 800bd74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bd78:	4620      	mov	r0, r4
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	20000990 	.word	0x20000990

0800bd80 <_malloc_r>:
 800bd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd84:	1ccd      	adds	r5, r1, #3
 800bd86:	f025 0503 	bic.w	r5, r5, #3
 800bd8a:	3508      	adds	r5, #8
 800bd8c:	2d0c      	cmp	r5, #12
 800bd8e:	bf38      	it	cc
 800bd90:	250c      	movcc	r5, #12
 800bd92:	2d00      	cmp	r5, #0
 800bd94:	4607      	mov	r7, r0
 800bd96:	db01      	blt.n	800bd9c <_malloc_r+0x1c>
 800bd98:	42a9      	cmp	r1, r5
 800bd9a:	d905      	bls.n	800bda8 <_malloc_r+0x28>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	2600      	movs	r6, #0
 800bda2:	4630      	mov	r0, r6
 800bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda8:	4e2e      	ldr	r6, [pc, #184]	; (800be64 <_malloc_r+0xe4>)
 800bdaa:	f000 f89d 	bl	800bee8 <__malloc_lock>
 800bdae:	6833      	ldr	r3, [r6, #0]
 800bdb0:	461c      	mov	r4, r3
 800bdb2:	bb34      	cbnz	r4, 800be02 <_malloc_r+0x82>
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f7ff ffc2 	bl	800bd40 <sbrk_aligned>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	d14d      	bne.n	800be5e <_malloc_r+0xde>
 800bdc2:	6834      	ldr	r4, [r6, #0]
 800bdc4:	4626      	mov	r6, r4
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	d140      	bne.n	800be4c <_malloc_r+0xcc>
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4638      	mov	r0, r7
 800bdd0:	eb04 0803 	add.w	r8, r4, r3
 800bdd4:	f000 f878 	bl	800bec8 <_sbrk_r>
 800bdd8:	4580      	cmp	r8, r0
 800bdda:	d13a      	bne.n	800be52 <_malloc_r+0xd2>
 800bddc:	6821      	ldr	r1, [r4, #0]
 800bdde:	3503      	adds	r5, #3
 800bde0:	1a6d      	subs	r5, r5, r1
 800bde2:	f025 0503 	bic.w	r5, r5, #3
 800bde6:	3508      	adds	r5, #8
 800bde8:	2d0c      	cmp	r5, #12
 800bdea:	bf38      	it	cc
 800bdec:	250c      	movcc	r5, #12
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f7ff ffa5 	bl	800bd40 <sbrk_aligned>
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	d02b      	beq.n	800be52 <_malloc_r+0xd2>
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	442b      	add	r3, r5
 800bdfe:	6023      	str	r3, [r4, #0]
 800be00:	e00e      	b.n	800be20 <_malloc_r+0xa0>
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	1b52      	subs	r2, r2, r5
 800be06:	d41e      	bmi.n	800be46 <_malloc_r+0xc6>
 800be08:	2a0b      	cmp	r2, #11
 800be0a:	d916      	bls.n	800be3a <_malloc_r+0xba>
 800be0c:	1961      	adds	r1, r4, r5
 800be0e:	42a3      	cmp	r3, r4
 800be10:	6025      	str	r5, [r4, #0]
 800be12:	bf18      	it	ne
 800be14:	6059      	strne	r1, [r3, #4]
 800be16:	6863      	ldr	r3, [r4, #4]
 800be18:	bf08      	it	eq
 800be1a:	6031      	streq	r1, [r6, #0]
 800be1c:	5162      	str	r2, [r4, r5]
 800be1e:	604b      	str	r3, [r1, #4]
 800be20:	4638      	mov	r0, r7
 800be22:	f104 060b 	add.w	r6, r4, #11
 800be26:	f000 f865 	bl	800bef4 <__malloc_unlock>
 800be2a:	f026 0607 	bic.w	r6, r6, #7
 800be2e:	1d23      	adds	r3, r4, #4
 800be30:	1af2      	subs	r2, r6, r3
 800be32:	d0b6      	beq.n	800bda2 <_malloc_r+0x22>
 800be34:	1b9b      	subs	r3, r3, r6
 800be36:	50a3      	str	r3, [r4, r2]
 800be38:	e7b3      	b.n	800bda2 <_malloc_r+0x22>
 800be3a:	6862      	ldr	r2, [r4, #4]
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	bf0c      	ite	eq
 800be40:	6032      	streq	r2, [r6, #0]
 800be42:	605a      	strne	r2, [r3, #4]
 800be44:	e7ec      	b.n	800be20 <_malloc_r+0xa0>
 800be46:	4623      	mov	r3, r4
 800be48:	6864      	ldr	r4, [r4, #4]
 800be4a:	e7b2      	b.n	800bdb2 <_malloc_r+0x32>
 800be4c:	4634      	mov	r4, r6
 800be4e:	6876      	ldr	r6, [r6, #4]
 800be50:	e7b9      	b.n	800bdc6 <_malloc_r+0x46>
 800be52:	230c      	movs	r3, #12
 800be54:	603b      	str	r3, [r7, #0]
 800be56:	4638      	mov	r0, r7
 800be58:	f000 f84c 	bl	800bef4 <__malloc_unlock>
 800be5c:	e7a1      	b.n	800bda2 <_malloc_r+0x22>
 800be5e:	6025      	str	r5, [r4, #0]
 800be60:	e7de      	b.n	800be20 <_malloc_r+0xa0>
 800be62:	bf00      	nop
 800be64:	2000098c 	.word	0x2000098c

0800be68 <_realloc_r>:
 800be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6c:	4680      	mov	r8, r0
 800be6e:	4614      	mov	r4, r2
 800be70:	460e      	mov	r6, r1
 800be72:	b921      	cbnz	r1, 800be7e <_realloc_r+0x16>
 800be74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	4611      	mov	r1, r2
 800be7a:	f7ff bf81 	b.w	800bd80 <_malloc_r>
 800be7e:	b92a      	cbnz	r2, 800be8c <_realloc_r+0x24>
 800be80:	f7ff ff12 	bl	800bca8 <_free_r>
 800be84:	4625      	mov	r5, r4
 800be86:	4628      	mov	r0, r5
 800be88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be8c:	f000 f838 	bl	800bf00 <_malloc_usable_size_r>
 800be90:	4284      	cmp	r4, r0
 800be92:	4607      	mov	r7, r0
 800be94:	d802      	bhi.n	800be9c <_realloc_r+0x34>
 800be96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be9a:	d812      	bhi.n	800bec2 <_realloc_r+0x5a>
 800be9c:	4621      	mov	r1, r4
 800be9e:	4640      	mov	r0, r8
 800bea0:	f7ff ff6e 	bl	800bd80 <_malloc_r>
 800bea4:	4605      	mov	r5, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d0ed      	beq.n	800be86 <_realloc_r+0x1e>
 800beaa:	42bc      	cmp	r4, r7
 800beac:	4622      	mov	r2, r4
 800beae:	4631      	mov	r1, r6
 800beb0:	bf28      	it	cs
 800beb2:	463a      	movcs	r2, r7
 800beb4:	f7ff fed0 	bl	800bc58 <memcpy>
 800beb8:	4631      	mov	r1, r6
 800beba:	4640      	mov	r0, r8
 800bebc:	f7ff fef4 	bl	800bca8 <_free_r>
 800bec0:	e7e1      	b.n	800be86 <_realloc_r+0x1e>
 800bec2:	4635      	mov	r5, r6
 800bec4:	e7df      	b.n	800be86 <_realloc_r+0x1e>
	...

0800bec8 <_sbrk_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d06      	ldr	r5, [pc, #24]	; (800bee4 <_sbrk_r+0x1c>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7f8 fe6e 	bl	8004bb4 <_sbrk>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d102      	bne.n	800bee2 <_sbrk_r+0x1a>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b103      	cbz	r3, 800bee2 <_sbrk_r+0x1a>
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	20000994 	.word	0x20000994

0800bee8 <__malloc_lock>:
 800bee8:	4801      	ldr	r0, [pc, #4]	; (800bef0 <__malloc_lock+0x8>)
 800beea:	f000 b811 	b.w	800bf10 <__retarget_lock_acquire_recursive>
 800beee:	bf00      	nop
 800bef0:	20000998 	.word	0x20000998

0800bef4 <__malloc_unlock>:
 800bef4:	4801      	ldr	r0, [pc, #4]	; (800befc <__malloc_unlock+0x8>)
 800bef6:	f000 b80c 	b.w	800bf12 <__retarget_lock_release_recursive>
 800befa:	bf00      	nop
 800befc:	20000998 	.word	0x20000998

0800bf00 <_malloc_usable_size_r>:
 800bf00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf04:	1f18      	subs	r0, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	bfbc      	itt	lt
 800bf0a:	580b      	ldrlt	r3, [r1, r0]
 800bf0c:	18c0      	addlt	r0, r0, r3
 800bf0e:	4770      	bx	lr

0800bf10 <__retarget_lock_acquire_recursive>:
 800bf10:	4770      	bx	lr

0800bf12 <__retarget_lock_release_recursive>:
 800bf12:	4770      	bx	lr
 800bf14:	0000      	movs	r0, r0
	...

0800bf18 <sin>:
 800bf18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf1a:	ec53 2b10 	vmov	r2, r3, d0
 800bf1e:	4828      	ldr	r0, [pc, #160]	; (800bfc0 <sin+0xa8>)
 800bf20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf24:	4281      	cmp	r1, r0
 800bf26:	dc07      	bgt.n	800bf38 <sin+0x20>
 800bf28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800bfb8 <sin+0xa0>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	b005      	add	sp, #20
 800bf30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf34:	f002 ba5c 	b.w	800e3f0 <__kernel_sin>
 800bf38:	4822      	ldr	r0, [pc, #136]	; (800bfc4 <sin+0xac>)
 800bf3a:	4281      	cmp	r1, r0
 800bf3c:	dd09      	ble.n	800bf52 <sin+0x3a>
 800bf3e:	ee10 0a10 	vmov	r0, s0
 800bf42:	4619      	mov	r1, r3
 800bf44:	f7f4 f9a0 	bl	8000288 <__aeabi_dsub>
 800bf48:	ec41 0b10 	vmov	d0, r0, r1
 800bf4c:	b005      	add	sp, #20
 800bf4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf52:	4668      	mov	r0, sp
 800bf54:	f001 f8a4 	bl	800d0a0 <__ieee754_rem_pio2>
 800bf58:	f000 0003 	and.w	r0, r0, #3
 800bf5c:	2801      	cmp	r0, #1
 800bf5e:	d00c      	beq.n	800bf7a <sin+0x62>
 800bf60:	2802      	cmp	r0, #2
 800bf62:	d011      	beq.n	800bf88 <sin+0x70>
 800bf64:	b9f0      	cbnz	r0, 800bfa4 <sin+0x8c>
 800bf66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf6a:	ed9d 0b00 	vldr	d0, [sp]
 800bf6e:	2001      	movs	r0, #1
 800bf70:	f002 fa3e 	bl	800e3f0 <__kernel_sin>
 800bf74:	ec51 0b10 	vmov	r0, r1, d0
 800bf78:	e7e6      	b.n	800bf48 <sin+0x30>
 800bf7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf7e:	ed9d 0b00 	vldr	d0, [sp]
 800bf82:	f001 fe1d 	bl	800dbc0 <__kernel_cos>
 800bf86:	e7f5      	b.n	800bf74 <sin+0x5c>
 800bf88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf8c:	ed9d 0b00 	vldr	d0, [sp]
 800bf90:	2001      	movs	r0, #1
 800bf92:	f002 fa2d 	bl	800e3f0 <__kernel_sin>
 800bf96:	ec53 2b10 	vmov	r2, r3, d0
 800bf9a:	ee10 0a10 	vmov	r0, s0
 800bf9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bfa2:	e7d1      	b.n	800bf48 <sin+0x30>
 800bfa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfa8:	ed9d 0b00 	vldr	d0, [sp]
 800bfac:	f001 fe08 	bl	800dbc0 <__kernel_cos>
 800bfb0:	e7f1      	b.n	800bf96 <sin+0x7e>
 800bfb2:	bf00      	nop
 800bfb4:	f3af 8000 	nop.w
	...
 800bfc0:	3fe921fb 	.word	0x3fe921fb
 800bfc4:	7fefffff 	.word	0x7fefffff

0800bfc8 <asin>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	ed2d 8b02 	vpush	{d8}
 800bfce:	ec55 4b10 	vmov	r4, r5, d0
 800bfd2:	f000 f921 	bl	800c218 <__ieee754_asin>
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	462b      	mov	r3, r5
 800bfda:	4620      	mov	r0, r4
 800bfdc:	4629      	mov	r1, r5
 800bfde:	eeb0 8a40 	vmov.f32	s16, s0
 800bfe2:	eef0 8a60 	vmov.f32	s17, s1
 800bfe6:	f7f4 fda1 	bl	8000b2c <__aeabi_dcmpun>
 800bfea:	b9a8      	cbnz	r0, 800c018 <asin+0x50>
 800bfec:	ec45 4b10 	vmov	d0, r4, r5
 800bff0:	f002 fb0e 	bl	800e610 <fabs>
 800bff4:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <asin+0x60>)
 800bff6:	ec51 0b10 	vmov	r0, r1, d0
 800bffa:	2200      	movs	r2, #0
 800bffc:	f7f4 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 800c000:	b150      	cbz	r0, 800c018 <asin+0x50>
 800c002:	f7ff fae7 	bl	800b5d4 <__errno>
 800c006:	ecbd 8b02 	vpop	{d8}
 800c00a:	2321      	movs	r3, #33	; 0x21
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c012:	4806      	ldr	r0, [pc, #24]	; (800c02c <asin+0x64>)
 800c014:	f002 bb90 	b.w	800e738 <nan>
 800c018:	eeb0 0a48 	vmov.f32	s0, s16
 800c01c:	eef0 0a68 	vmov.f32	s1, s17
 800c020:	ecbd 8b02 	vpop	{d8}
 800c024:	bd38      	pop	{r3, r4, r5, pc}
 800c026:	bf00      	nop
 800c028:	3ff00000 	.word	0x3ff00000
 800c02c:	0800e9b5 	.word	0x0800e9b5

0800c030 <pow>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	ed2d 8b02 	vpush	{d8}
 800c036:	eeb0 8a40 	vmov.f32	s16, s0
 800c03a:	eef0 8a60 	vmov.f32	s17, s1
 800c03e:	ec55 4b11 	vmov	r4, r5, d1
 800c042:	f000 fafd 	bl	800c640 <__ieee754_pow>
 800c046:	4622      	mov	r2, r4
 800c048:	462b      	mov	r3, r5
 800c04a:	4620      	mov	r0, r4
 800c04c:	4629      	mov	r1, r5
 800c04e:	ec57 6b10 	vmov	r6, r7, d0
 800c052:	f7f4 fd6b 	bl	8000b2c <__aeabi_dcmpun>
 800c056:	2800      	cmp	r0, #0
 800c058:	d13b      	bne.n	800c0d2 <pow+0xa2>
 800c05a:	ec51 0b18 	vmov	r0, r1, d8
 800c05e:	2200      	movs	r2, #0
 800c060:	2300      	movs	r3, #0
 800c062:	f7f4 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 800c066:	b1b8      	cbz	r0, 800c098 <pow+0x68>
 800c068:	2200      	movs	r2, #0
 800c06a:	2300      	movs	r3, #0
 800c06c:	4620      	mov	r0, r4
 800c06e:	4629      	mov	r1, r5
 800c070:	f7f4 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c074:	2800      	cmp	r0, #0
 800c076:	d146      	bne.n	800c106 <pow+0xd6>
 800c078:	ec45 4b10 	vmov	d0, r4, r5
 800c07c:	f002 fad1 	bl	800e622 <finite>
 800c080:	b338      	cbz	r0, 800c0d2 <pow+0xa2>
 800c082:	2200      	movs	r2, #0
 800c084:	2300      	movs	r3, #0
 800c086:	4620      	mov	r0, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	f7f4 fd27 	bl	8000adc <__aeabi_dcmplt>
 800c08e:	b300      	cbz	r0, 800c0d2 <pow+0xa2>
 800c090:	f7ff faa0 	bl	800b5d4 <__errno>
 800c094:	2322      	movs	r3, #34	; 0x22
 800c096:	e01b      	b.n	800c0d0 <pow+0xa0>
 800c098:	ec47 6b10 	vmov	d0, r6, r7
 800c09c:	f002 fac1 	bl	800e622 <finite>
 800c0a0:	b9e0      	cbnz	r0, 800c0dc <pow+0xac>
 800c0a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c0a6:	eef0 0a68 	vmov.f32	s1, s17
 800c0aa:	f002 faba 	bl	800e622 <finite>
 800c0ae:	b1a8      	cbz	r0, 800c0dc <pow+0xac>
 800c0b0:	ec45 4b10 	vmov	d0, r4, r5
 800c0b4:	f002 fab5 	bl	800e622 <finite>
 800c0b8:	b180      	cbz	r0, 800c0dc <pow+0xac>
 800c0ba:	4632      	mov	r2, r6
 800c0bc:	463b      	mov	r3, r7
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	f7f4 fd33 	bl	8000b2c <__aeabi_dcmpun>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d0e2      	beq.n	800c090 <pow+0x60>
 800c0ca:	f7ff fa83 	bl	800b5d4 <__errno>
 800c0ce:	2321      	movs	r3, #33	; 0x21
 800c0d0:	6003      	str	r3, [r0, #0]
 800c0d2:	ecbd 8b02 	vpop	{d8}
 800c0d6:	ec47 6b10 	vmov	d0, r6, r7
 800c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d0f2      	beq.n	800c0d2 <pow+0xa2>
 800c0ec:	eeb0 0a48 	vmov.f32	s0, s16
 800c0f0:	eef0 0a68 	vmov.f32	s1, s17
 800c0f4:	f002 fa95 	bl	800e622 <finite>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d0ea      	beq.n	800c0d2 <pow+0xa2>
 800c0fc:	ec45 4b10 	vmov	d0, r4, r5
 800c100:	f002 fa8f 	bl	800e622 <finite>
 800c104:	e7c3      	b.n	800c08e <pow+0x5e>
 800c106:	4f01      	ldr	r7, [pc, #4]	; (800c10c <pow+0xdc>)
 800c108:	2600      	movs	r6, #0
 800c10a:	e7e2      	b.n	800c0d2 <pow+0xa2>
 800c10c:	3ff00000 	.word	0x3ff00000

0800c110 <sqrt>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	ed2d 8b02 	vpush	{d8}
 800c116:	ec55 4b10 	vmov	r4, r5, d0
 800c11a:	f001 f9cd 	bl	800d4b8 <__ieee754_sqrt>
 800c11e:	4622      	mov	r2, r4
 800c120:	462b      	mov	r3, r5
 800c122:	4620      	mov	r0, r4
 800c124:	4629      	mov	r1, r5
 800c126:	eeb0 8a40 	vmov.f32	s16, s0
 800c12a:	eef0 8a60 	vmov.f32	s17, s1
 800c12e:	f7f4 fcfd 	bl	8000b2c <__aeabi_dcmpun>
 800c132:	b990      	cbnz	r0, 800c15a <sqrt+0x4a>
 800c134:	2200      	movs	r2, #0
 800c136:	2300      	movs	r3, #0
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 fcce 	bl	8000adc <__aeabi_dcmplt>
 800c140:	b158      	cbz	r0, 800c15a <sqrt+0x4a>
 800c142:	f7ff fa47 	bl	800b5d4 <__errno>
 800c146:	2321      	movs	r3, #33	; 0x21
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	2200      	movs	r2, #0
 800c14c:	2300      	movs	r3, #0
 800c14e:	4610      	mov	r0, r2
 800c150:	4619      	mov	r1, r3
 800c152:	f7f4 fb7b 	bl	800084c <__aeabi_ddiv>
 800c156:	ec41 0b18 	vmov	d8, r0, r1
 800c15a:	eeb0 0a48 	vmov.f32	s0, s16
 800c15e:	eef0 0a68 	vmov.f32	s1, s17
 800c162:	ecbd 8b02 	vpop	{d8}
 800c166:	bd38      	pop	{r3, r4, r5, pc}

0800c168 <powf>:
 800c168:	b508      	push	{r3, lr}
 800c16a:	ed2d 8b04 	vpush	{d8-d9}
 800c16e:	eeb0 8a60 	vmov.f32	s16, s1
 800c172:	eeb0 9a40 	vmov.f32	s18, s0
 800c176:	f001 fa51 	bl	800d61c <__ieee754_powf>
 800c17a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c182:	eef0 8a40 	vmov.f32	s17, s0
 800c186:	d63e      	bvs.n	800c206 <powf+0x9e>
 800c188:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c190:	d112      	bne.n	800c1b8 <powf+0x50>
 800c192:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c19a:	d039      	beq.n	800c210 <powf+0xa8>
 800c19c:	eeb0 0a48 	vmov.f32	s0, s16
 800c1a0:	f002 fb5f 	bl	800e862 <finitef>
 800c1a4:	b378      	cbz	r0, 800c206 <powf+0x9e>
 800c1a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ae:	d52a      	bpl.n	800c206 <powf+0x9e>
 800c1b0:	f7ff fa10 	bl	800b5d4 <__errno>
 800c1b4:	2322      	movs	r3, #34	; 0x22
 800c1b6:	e014      	b.n	800c1e2 <powf+0x7a>
 800c1b8:	f002 fb53 	bl	800e862 <finitef>
 800c1bc:	b998      	cbnz	r0, 800c1e6 <powf+0x7e>
 800c1be:	eeb0 0a49 	vmov.f32	s0, s18
 800c1c2:	f002 fb4e 	bl	800e862 <finitef>
 800c1c6:	b170      	cbz	r0, 800c1e6 <powf+0x7e>
 800c1c8:	eeb0 0a48 	vmov.f32	s0, s16
 800c1cc:	f002 fb49 	bl	800e862 <finitef>
 800c1d0:	b148      	cbz	r0, 800c1e6 <powf+0x7e>
 800c1d2:	eef4 8a68 	vcmp.f32	s17, s17
 800c1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1da:	d7e9      	bvc.n	800c1b0 <powf+0x48>
 800c1dc:	f7ff f9fa 	bl	800b5d4 <__errno>
 800c1e0:	2321      	movs	r3, #33	; 0x21
 800c1e2:	6003      	str	r3, [r0, #0]
 800c1e4:	e00f      	b.n	800c206 <powf+0x9e>
 800c1e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ee:	d10a      	bne.n	800c206 <powf+0x9e>
 800c1f0:	eeb0 0a49 	vmov.f32	s0, s18
 800c1f4:	f002 fb35 	bl	800e862 <finitef>
 800c1f8:	b128      	cbz	r0, 800c206 <powf+0x9e>
 800c1fa:	eeb0 0a48 	vmov.f32	s0, s16
 800c1fe:	f002 fb30 	bl	800e862 <finitef>
 800c202:	2800      	cmp	r0, #0
 800c204:	d1d4      	bne.n	800c1b0 <powf+0x48>
 800c206:	eeb0 0a68 	vmov.f32	s0, s17
 800c20a:	ecbd 8b04 	vpop	{d8-d9}
 800c20e:	bd08      	pop	{r3, pc}
 800c210:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c214:	e7f7      	b.n	800c206 <powf+0x9e>
	...

0800c218 <__ieee754_asin>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	ed2d 8b04 	vpush	{d8-d9}
 800c220:	ec55 4b10 	vmov	r4, r5, d0
 800c224:	4bcc      	ldr	r3, [pc, #816]	; (800c558 <__ieee754_asin+0x340>)
 800c226:	b083      	sub	sp, #12
 800c228:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c22c:	4598      	cmp	r8, r3
 800c22e:	9501      	str	r5, [sp, #4]
 800c230:	dd35      	ble.n	800c29e <__ieee754_asin+0x86>
 800c232:	ee10 3a10 	vmov	r3, s0
 800c236:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800c23a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800c23e:	ea58 0303 	orrs.w	r3, r8, r3
 800c242:	d117      	bne.n	800c274 <__ieee754_asin+0x5c>
 800c244:	a3aa      	add	r3, pc, #680	; (adr r3, 800c4f0 <__ieee754_asin+0x2d8>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	ee10 0a10 	vmov	r0, s0
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f4 f9d2 	bl	80005f8 <__aeabi_dmul>
 800c254:	a3a8      	add	r3, pc, #672	; (adr r3, 800c4f8 <__ieee754_asin+0x2e0>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	4606      	mov	r6, r0
 800c25c:	460f      	mov	r7, r1
 800c25e:	4620      	mov	r0, r4
 800c260:	4629      	mov	r1, r5
 800c262:	f7f4 f9c9 	bl	80005f8 <__aeabi_dmul>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4630      	mov	r0, r6
 800c26c:	4639      	mov	r1, r7
 800c26e:	f7f4 f80d 	bl	800028c <__adddf3>
 800c272:	e00b      	b.n	800c28c <__ieee754_asin+0x74>
 800c274:	ee10 2a10 	vmov	r2, s0
 800c278:	462b      	mov	r3, r5
 800c27a:	ee10 0a10 	vmov	r0, s0
 800c27e:	4629      	mov	r1, r5
 800c280:	f7f4 f802 	bl	8000288 <__aeabi_dsub>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	f7f4 fae0 	bl	800084c <__aeabi_ddiv>
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	ec45 4b10 	vmov	d0, r4, r5
 800c294:	b003      	add	sp, #12
 800c296:	ecbd 8b04 	vpop	{d8-d9}
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	4baf      	ldr	r3, [pc, #700]	; (800c55c <__ieee754_asin+0x344>)
 800c2a0:	4598      	cmp	r8, r3
 800c2a2:	dc11      	bgt.n	800c2c8 <__ieee754_asin+0xb0>
 800c2a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c2a8:	f280 80ae 	bge.w	800c408 <__ieee754_asin+0x1f0>
 800c2ac:	a394      	add	r3, pc, #592	; (adr r3, 800c500 <__ieee754_asin+0x2e8>)
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	ee10 0a10 	vmov	r0, s0
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f7f3 ffe8 	bl	800028c <__adddf3>
 800c2bc:	4ba8      	ldr	r3, [pc, #672]	; (800c560 <__ieee754_asin+0x348>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f7f4 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d1e3      	bne.n	800c290 <__ieee754_asin+0x78>
 800c2c8:	ec45 4b10 	vmov	d0, r4, r5
 800c2cc:	f002 f9a0 	bl	800e610 <fabs>
 800c2d0:	49a3      	ldr	r1, [pc, #652]	; (800c560 <__ieee754_asin+0x348>)
 800c2d2:	ec53 2b10 	vmov	r2, r3, d0
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f7f3 ffd6 	bl	8000288 <__aeabi_dsub>
 800c2dc:	4ba1      	ldr	r3, [pc, #644]	; (800c564 <__ieee754_asin+0x34c>)
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f7f4 f98a 	bl	80005f8 <__aeabi_dmul>
 800c2e4:	a388      	add	r3, pc, #544	; (adr r3, 800c508 <__ieee754_asin+0x2f0>)
 800c2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	f7f4 f983 	bl	80005f8 <__aeabi_dmul>
 800c2f2:	a387      	add	r3, pc, #540	; (adr r3, 800c510 <__ieee754_asin+0x2f8>)
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	f7f3 ffc8 	bl	800028c <__adddf3>
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	f7f4 f97a 	bl	80005f8 <__aeabi_dmul>
 800c304:	a384      	add	r3, pc, #528	; (adr r3, 800c518 <__ieee754_asin+0x300>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	f7f3 ffbd 	bl	8000288 <__aeabi_dsub>
 800c30e:	4622      	mov	r2, r4
 800c310:	462b      	mov	r3, r5
 800c312:	f7f4 f971 	bl	80005f8 <__aeabi_dmul>
 800c316:	a382      	add	r3, pc, #520	; (adr r3, 800c520 <__ieee754_asin+0x308>)
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	f7f3 ffb6 	bl	800028c <__adddf3>
 800c320:	4622      	mov	r2, r4
 800c322:	462b      	mov	r3, r5
 800c324:	f7f4 f968 	bl	80005f8 <__aeabi_dmul>
 800c328:	a37f      	add	r3, pc, #508	; (adr r3, 800c528 <__ieee754_asin+0x310>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f7f3 ffab 	bl	8000288 <__aeabi_dsub>
 800c332:	4622      	mov	r2, r4
 800c334:	462b      	mov	r3, r5
 800c336:	f7f4 f95f 	bl	80005f8 <__aeabi_dmul>
 800c33a:	a37d      	add	r3, pc, #500	; (adr r3, 800c530 <__ieee754_asin+0x318>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	f7f3 ffa4 	bl	800028c <__adddf3>
 800c344:	4622      	mov	r2, r4
 800c346:	462b      	mov	r3, r5
 800c348:	f7f4 f956 	bl	80005f8 <__aeabi_dmul>
 800c34c:	a37a      	add	r3, pc, #488	; (adr r3, 800c538 <__ieee754_asin+0x320>)
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	ec41 0b18 	vmov	d8, r0, r1
 800c356:	4620      	mov	r0, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	f7f4 f94d 	bl	80005f8 <__aeabi_dmul>
 800c35e:	a378      	add	r3, pc, #480	; (adr r3, 800c540 <__ieee754_asin+0x328>)
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	f7f3 ff90 	bl	8000288 <__aeabi_dsub>
 800c368:	4622      	mov	r2, r4
 800c36a:	462b      	mov	r3, r5
 800c36c:	f7f4 f944 	bl	80005f8 <__aeabi_dmul>
 800c370:	a375      	add	r3, pc, #468	; (adr r3, 800c548 <__ieee754_asin+0x330>)
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f7f3 ff89 	bl	800028c <__adddf3>
 800c37a:	4622      	mov	r2, r4
 800c37c:	462b      	mov	r3, r5
 800c37e:	f7f4 f93b 	bl	80005f8 <__aeabi_dmul>
 800c382:	a373      	add	r3, pc, #460	; (adr r3, 800c550 <__ieee754_asin+0x338>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	f7f3 ff7e 	bl	8000288 <__aeabi_dsub>
 800c38c:	4622      	mov	r2, r4
 800c38e:	462b      	mov	r3, r5
 800c390:	f7f4 f932 	bl	80005f8 <__aeabi_dmul>
 800c394:	4b72      	ldr	r3, [pc, #456]	; (800c560 <__ieee754_asin+0x348>)
 800c396:	2200      	movs	r2, #0
 800c398:	f7f3 ff78 	bl	800028c <__adddf3>
 800c39c:	ec45 4b10 	vmov	d0, r4, r5
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	460f      	mov	r7, r1
 800c3a4:	f001 f888 	bl	800d4b8 <__ieee754_sqrt>
 800c3a8:	4b6f      	ldr	r3, [pc, #444]	; (800c568 <__ieee754_asin+0x350>)
 800c3aa:	4598      	cmp	r8, r3
 800c3ac:	ec5b ab10 	vmov	sl, fp, d0
 800c3b0:	f340 80dc 	ble.w	800c56c <__ieee754_asin+0x354>
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	463b      	mov	r3, r7
 800c3b8:	ec51 0b18 	vmov	r0, r1, d8
 800c3bc:	f7f4 fa46 	bl	800084c <__aeabi_ddiv>
 800c3c0:	4652      	mov	r2, sl
 800c3c2:	465b      	mov	r3, fp
 800c3c4:	f7f4 f918 	bl	80005f8 <__aeabi_dmul>
 800c3c8:	4652      	mov	r2, sl
 800c3ca:	465b      	mov	r3, fp
 800c3cc:	f7f3 ff5e 	bl	800028c <__adddf3>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	f7f3 ff5a 	bl	800028c <__adddf3>
 800c3d8:	a347      	add	r3, pc, #284	; (adr r3, 800c4f8 <__ieee754_asin+0x2e0>)
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	f7f3 ff53 	bl	8000288 <__aeabi_dsub>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	a142      	add	r1, pc, #264	; (adr r1, 800c4f0 <__ieee754_asin+0x2d8>)
 800c3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ec:	f7f3 ff4c 	bl	8000288 <__aeabi_dsub>
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bfdc      	itt	le
 800c3f6:	4602      	movle	r2, r0
 800c3f8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	bfdc      	itt	le
 800c402:	4614      	movle	r4, r2
 800c404:	461d      	movle	r5, r3
 800c406:	e743      	b.n	800c290 <__ieee754_asin+0x78>
 800c408:	ee10 2a10 	vmov	r2, s0
 800c40c:	ee10 0a10 	vmov	r0, s0
 800c410:	462b      	mov	r3, r5
 800c412:	4629      	mov	r1, r5
 800c414:	f7f4 f8f0 	bl	80005f8 <__aeabi_dmul>
 800c418:	a33b      	add	r3, pc, #236	; (adr r3, 800c508 <__ieee754_asin+0x2f0>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	4606      	mov	r6, r0
 800c420:	460f      	mov	r7, r1
 800c422:	f7f4 f8e9 	bl	80005f8 <__aeabi_dmul>
 800c426:	a33a      	add	r3, pc, #232	; (adr r3, 800c510 <__ieee754_asin+0x2f8>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	f7f3 ff2e 	bl	800028c <__adddf3>
 800c430:	4632      	mov	r2, r6
 800c432:	463b      	mov	r3, r7
 800c434:	f7f4 f8e0 	bl	80005f8 <__aeabi_dmul>
 800c438:	a337      	add	r3, pc, #220	; (adr r3, 800c518 <__ieee754_asin+0x300>)
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	f7f3 ff23 	bl	8000288 <__aeabi_dsub>
 800c442:	4632      	mov	r2, r6
 800c444:	463b      	mov	r3, r7
 800c446:	f7f4 f8d7 	bl	80005f8 <__aeabi_dmul>
 800c44a:	a335      	add	r3, pc, #212	; (adr r3, 800c520 <__ieee754_asin+0x308>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f7f3 ff1c 	bl	800028c <__adddf3>
 800c454:	4632      	mov	r2, r6
 800c456:	463b      	mov	r3, r7
 800c458:	f7f4 f8ce 	bl	80005f8 <__aeabi_dmul>
 800c45c:	a332      	add	r3, pc, #200	; (adr r3, 800c528 <__ieee754_asin+0x310>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	4632      	mov	r2, r6
 800c468:	463b      	mov	r3, r7
 800c46a:	f7f4 f8c5 	bl	80005f8 <__aeabi_dmul>
 800c46e:	a330      	add	r3, pc, #192	; (adr r3, 800c530 <__ieee754_asin+0x318>)
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	f7f3 ff0a 	bl	800028c <__adddf3>
 800c478:	4632      	mov	r2, r6
 800c47a:	463b      	mov	r3, r7
 800c47c:	f7f4 f8bc 	bl	80005f8 <__aeabi_dmul>
 800c480:	a32d      	add	r3, pc, #180	; (adr r3, 800c538 <__ieee754_asin+0x320>)
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	4630      	mov	r0, r6
 800c48c:	4639      	mov	r1, r7
 800c48e:	f7f4 f8b3 	bl	80005f8 <__aeabi_dmul>
 800c492:	a32b      	add	r3, pc, #172	; (adr r3, 800c540 <__ieee754_asin+0x328>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f3 fef6 	bl	8000288 <__aeabi_dsub>
 800c49c:	4632      	mov	r2, r6
 800c49e:	463b      	mov	r3, r7
 800c4a0:	f7f4 f8aa 	bl	80005f8 <__aeabi_dmul>
 800c4a4:	a328      	add	r3, pc, #160	; (adr r3, 800c548 <__ieee754_asin+0x330>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 feef 	bl	800028c <__adddf3>
 800c4ae:	4632      	mov	r2, r6
 800c4b0:	463b      	mov	r3, r7
 800c4b2:	f7f4 f8a1 	bl	80005f8 <__aeabi_dmul>
 800c4b6:	a326      	add	r3, pc, #152	; (adr r3, 800c550 <__ieee754_asin+0x338>)
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	f7f3 fee4 	bl	8000288 <__aeabi_dsub>
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	f7f4 f898 	bl	80005f8 <__aeabi_dmul>
 800c4c8:	4b25      	ldr	r3, [pc, #148]	; (800c560 <__ieee754_asin+0x348>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f7f3 fede 	bl	800028c <__adddf3>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	f7f4 f9b8 	bl	800084c <__aeabi_ddiv>
 800c4dc:	4622      	mov	r2, r4
 800c4de:	462b      	mov	r3, r5
 800c4e0:	f7f4 f88a 	bl	80005f8 <__aeabi_dmul>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	e6bf      	b.n	800c26e <__ieee754_asin+0x56>
 800c4ee:	bf00      	nop
 800c4f0:	54442d18 	.word	0x54442d18
 800c4f4:	3ff921fb 	.word	0x3ff921fb
 800c4f8:	33145c07 	.word	0x33145c07
 800c4fc:	3c91a626 	.word	0x3c91a626
 800c500:	8800759c 	.word	0x8800759c
 800c504:	7e37e43c 	.word	0x7e37e43c
 800c508:	0dfdf709 	.word	0x0dfdf709
 800c50c:	3f023de1 	.word	0x3f023de1
 800c510:	7501b288 	.word	0x7501b288
 800c514:	3f49efe0 	.word	0x3f49efe0
 800c518:	b5688f3b 	.word	0xb5688f3b
 800c51c:	3fa48228 	.word	0x3fa48228
 800c520:	0e884455 	.word	0x0e884455
 800c524:	3fc9c155 	.word	0x3fc9c155
 800c528:	03eb6f7d 	.word	0x03eb6f7d
 800c52c:	3fd4d612 	.word	0x3fd4d612
 800c530:	55555555 	.word	0x55555555
 800c534:	3fc55555 	.word	0x3fc55555
 800c538:	b12e9282 	.word	0xb12e9282
 800c53c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c540:	1b8d0159 	.word	0x1b8d0159
 800c544:	3fe6066c 	.word	0x3fe6066c
 800c548:	9c598ac8 	.word	0x9c598ac8
 800c54c:	40002ae5 	.word	0x40002ae5
 800c550:	1c8a2d4b 	.word	0x1c8a2d4b
 800c554:	40033a27 	.word	0x40033a27
 800c558:	3fefffff 	.word	0x3fefffff
 800c55c:	3fdfffff 	.word	0x3fdfffff
 800c560:	3ff00000 	.word	0x3ff00000
 800c564:	3fe00000 	.word	0x3fe00000
 800c568:	3fef3332 	.word	0x3fef3332
 800c56c:	ee10 2a10 	vmov	r2, s0
 800c570:	ee10 0a10 	vmov	r0, s0
 800c574:	465b      	mov	r3, fp
 800c576:	4659      	mov	r1, fp
 800c578:	f7f3 fe88 	bl	800028c <__adddf3>
 800c57c:	4632      	mov	r2, r6
 800c57e:	463b      	mov	r3, r7
 800c580:	ec41 0b19 	vmov	d9, r0, r1
 800c584:	ec51 0b18 	vmov	r0, r1, d8
 800c588:	f7f4 f960 	bl	800084c <__aeabi_ddiv>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	ec51 0b19 	vmov	r0, r1, d9
 800c594:	f7f4 f830 	bl	80005f8 <__aeabi_dmul>
 800c598:	f04f 0800 	mov.w	r8, #0
 800c59c:	4606      	mov	r6, r0
 800c59e:	460f      	mov	r7, r1
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4659      	mov	r1, fp
 800c5a8:	f7f4 f826 	bl	80005f8 <__aeabi_dmul>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	f7f3 fe68 	bl	8000288 <__aeabi_dsub>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	460d      	mov	r5, r1
 800c5be:	465b      	mov	r3, fp
 800c5c0:	4650      	mov	r0, sl
 800c5c2:	4659      	mov	r1, fp
 800c5c4:	f7f3 fe62 	bl	800028c <__adddf3>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f4 f93c 	bl	800084c <__aeabi_ddiv>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	f7f3 fe58 	bl	800028c <__adddf3>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	a113      	add	r1, pc, #76	; (adr r1, 800c630 <__ieee754_asin+0x418>)
 800c5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e6:	f7f3 fe4f 	bl	8000288 <__aeabi_dsub>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	f7f3 fe49 	bl	8000288 <__aeabi_dsub>
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	465b      	mov	r3, fp
 800c5fe:	4640      	mov	r0, r8
 800c600:	4659      	mov	r1, fp
 800c602:	f7f3 fe43 	bl	800028c <__adddf3>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	a10b      	add	r1, pc, #44	; (adr r1, 800c638 <__ieee754_asin+0x420>)
 800c60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c610:	f7f3 fe3a 	bl	8000288 <__aeabi_dsub>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	4620      	mov	r0, r4
 800c61a:	4629      	mov	r1, r5
 800c61c:	f7f3 fe34 	bl	8000288 <__aeabi_dsub>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	a104      	add	r1, pc, #16	; (adr r1, 800c638 <__ieee754_asin+0x420>)
 800c626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c62a:	e6df      	b.n	800c3ec <__ieee754_asin+0x1d4>
 800c62c:	f3af 8000 	nop.w
 800c630:	33145c07 	.word	0x33145c07
 800c634:	3c91a626 	.word	0x3c91a626
 800c638:	54442d18 	.word	0x54442d18
 800c63c:	3fe921fb 	.word	0x3fe921fb

0800c640 <__ieee754_pow>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	ed2d 8b06 	vpush	{d8-d10}
 800c648:	b089      	sub	sp, #36	; 0x24
 800c64a:	ed8d 1b00 	vstr	d1, [sp]
 800c64e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c652:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c656:	ea58 0102 	orrs.w	r1, r8, r2
 800c65a:	ec57 6b10 	vmov	r6, r7, d0
 800c65e:	d115      	bne.n	800c68c <__ieee754_pow+0x4c>
 800c660:	19b3      	adds	r3, r6, r6
 800c662:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c666:	4152      	adcs	r2, r2
 800c668:	4299      	cmp	r1, r3
 800c66a:	4b89      	ldr	r3, [pc, #548]	; (800c890 <__ieee754_pow+0x250>)
 800c66c:	4193      	sbcs	r3, r2
 800c66e:	f080 84d2 	bcs.w	800d016 <__ieee754_pow+0x9d6>
 800c672:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	f7f3 fe07 	bl	800028c <__adddf3>
 800c67e:	ec41 0b10 	vmov	d0, r0, r1
 800c682:	b009      	add	sp, #36	; 0x24
 800c684:	ecbd 8b06 	vpop	{d8-d10}
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	4b81      	ldr	r3, [pc, #516]	; (800c894 <__ieee754_pow+0x254>)
 800c68e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c692:	429c      	cmp	r4, r3
 800c694:	ee10 aa10 	vmov	sl, s0
 800c698:	463d      	mov	r5, r7
 800c69a:	dc06      	bgt.n	800c6aa <__ieee754_pow+0x6a>
 800c69c:	d101      	bne.n	800c6a2 <__ieee754_pow+0x62>
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	d1e7      	bne.n	800c672 <__ieee754_pow+0x32>
 800c6a2:	4598      	cmp	r8, r3
 800c6a4:	dc01      	bgt.n	800c6aa <__ieee754_pow+0x6a>
 800c6a6:	d10f      	bne.n	800c6c8 <__ieee754_pow+0x88>
 800c6a8:	b172      	cbz	r2, 800c6c8 <__ieee754_pow+0x88>
 800c6aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c6ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c6b2:	ea55 050a 	orrs.w	r5, r5, sl
 800c6b6:	d1dc      	bne.n	800c672 <__ieee754_pow+0x32>
 800c6b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c6bc:	18db      	adds	r3, r3, r3
 800c6be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c6c2:	4152      	adcs	r2, r2
 800c6c4:	429d      	cmp	r5, r3
 800c6c6:	e7d0      	b.n	800c66a <__ieee754_pow+0x2a>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	da3b      	bge.n	800c744 <__ieee754_pow+0x104>
 800c6cc:	4b72      	ldr	r3, [pc, #456]	; (800c898 <__ieee754_pow+0x258>)
 800c6ce:	4598      	cmp	r8, r3
 800c6d0:	dc51      	bgt.n	800c776 <__ieee754_pow+0x136>
 800c6d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c6d6:	4598      	cmp	r8, r3
 800c6d8:	f340 84ac 	ble.w	800d034 <__ieee754_pow+0x9f4>
 800c6dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c6e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6e4:	2b14      	cmp	r3, #20
 800c6e6:	dd0f      	ble.n	800c708 <__ieee754_pow+0xc8>
 800c6e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c6ec:	fa22 f103 	lsr.w	r1, r2, r3
 800c6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	f040 849d 	bne.w	800d034 <__ieee754_pow+0x9f4>
 800c6fa:	f001 0101 	and.w	r1, r1, #1
 800c6fe:	f1c1 0302 	rsb	r3, r1, #2
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	b182      	cbz	r2, 800c728 <__ieee754_pow+0xe8>
 800c706:	e05f      	b.n	800c7c8 <__ieee754_pow+0x188>
 800c708:	2a00      	cmp	r2, #0
 800c70a:	d15b      	bne.n	800c7c4 <__ieee754_pow+0x184>
 800c70c:	f1c3 0314 	rsb	r3, r3, #20
 800c710:	fa48 f103 	asr.w	r1, r8, r3
 800c714:	fa01 f303 	lsl.w	r3, r1, r3
 800c718:	4543      	cmp	r3, r8
 800c71a:	f040 8488 	bne.w	800d02e <__ieee754_pow+0x9ee>
 800c71e:	f001 0101 	and.w	r1, r1, #1
 800c722:	f1c1 0302 	rsb	r3, r1, #2
 800c726:	9304      	str	r3, [sp, #16]
 800c728:	4b5c      	ldr	r3, [pc, #368]	; (800c89c <__ieee754_pow+0x25c>)
 800c72a:	4598      	cmp	r8, r3
 800c72c:	d132      	bne.n	800c794 <__ieee754_pow+0x154>
 800c72e:	f1b9 0f00 	cmp.w	r9, #0
 800c732:	f280 8478 	bge.w	800d026 <__ieee754_pow+0x9e6>
 800c736:	4959      	ldr	r1, [pc, #356]	; (800c89c <__ieee754_pow+0x25c>)
 800c738:	4632      	mov	r2, r6
 800c73a:	463b      	mov	r3, r7
 800c73c:	2000      	movs	r0, #0
 800c73e:	f7f4 f885 	bl	800084c <__aeabi_ddiv>
 800c742:	e79c      	b.n	800c67e <__ieee754_pow+0x3e>
 800c744:	2300      	movs	r3, #0
 800c746:	9304      	str	r3, [sp, #16]
 800c748:	2a00      	cmp	r2, #0
 800c74a:	d13d      	bne.n	800c7c8 <__ieee754_pow+0x188>
 800c74c:	4b51      	ldr	r3, [pc, #324]	; (800c894 <__ieee754_pow+0x254>)
 800c74e:	4598      	cmp	r8, r3
 800c750:	d1ea      	bne.n	800c728 <__ieee754_pow+0xe8>
 800c752:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c756:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c75a:	ea53 030a 	orrs.w	r3, r3, sl
 800c75e:	f000 845a 	beq.w	800d016 <__ieee754_pow+0x9d6>
 800c762:	4b4f      	ldr	r3, [pc, #316]	; (800c8a0 <__ieee754_pow+0x260>)
 800c764:	429c      	cmp	r4, r3
 800c766:	dd08      	ble.n	800c77a <__ieee754_pow+0x13a>
 800c768:	f1b9 0f00 	cmp.w	r9, #0
 800c76c:	f2c0 8457 	blt.w	800d01e <__ieee754_pow+0x9de>
 800c770:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c774:	e783      	b.n	800c67e <__ieee754_pow+0x3e>
 800c776:	2302      	movs	r3, #2
 800c778:	e7e5      	b.n	800c746 <__ieee754_pow+0x106>
 800c77a:	f1b9 0f00 	cmp.w	r9, #0
 800c77e:	f04f 0000 	mov.w	r0, #0
 800c782:	f04f 0100 	mov.w	r1, #0
 800c786:	f6bf af7a 	bge.w	800c67e <__ieee754_pow+0x3e>
 800c78a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c78e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c792:	e774      	b.n	800c67e <__ieee754_pow+0x3e>
 800c794:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c798:	d106      	bne.n	800c7a8 <__ieee754_pow+0x168>
 800c79a:	4632      	mov	r2, r6
 800c79c:	463b      	mov	r3, r7
 800c79e:	4630      	mov	r0, r6
 800c7a0:	4639      	mov	r1, r7
 800c7a2:	f7f3 ff29 	bl	80005f8 <__aeabi_dmul>
 800c7a6:	e76a      	b.n	800c67e <__ieee754_pow+0x3e>
 800c7a8:	4b3e      	ldr	r3, [pc, #248]	; (800c8a4 <__ieee754_pow+0x264>)
 800c7aa:	4599      	cmp	r9, r3
 800c7ac:	d10c      	bne.n	800c7c8 <__ieee754_pow+0x188>
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	db0a      	blt.n	800c7c8 <__ieee754_pow+0x188>
 800c7b2:	ec47 6b10 	vmov	d0, r6, r7
 800c7b6:	b009      	add	sp, #36	; 0x24
 800c7b8:	ecbd 8b06 	vpop	{d8-d10}
 800c7bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c0:	f000 be7a 	b.w	800d4b8 <__ieee754_sqrt>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	ec47 6b10 	vmov	d0, r6, r7
 800c7cc:	f001 ff20 	bl	800e610 <fabs>
 800c7d0:	ec51 0b10 	vmov	r0, r1, d0
 800c7d4:	f1ba 0f00 	cmp.w	sl, #0
 800c7d8:	d129      	bne.n	800c82e <__ieee754_pow+0x1ee>
 800c7da:	b124      	cbz	r4, 800c7e6 <__ieee754_pow+0x1a6>
 800c7dc:	4b2f      	ldr	r3, [pc, #188]	; (800c89c <__ieee754_pow+0x25c>)
 800c7de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d123      	bne.n	800c82e <__ieee754_pow+0x1ee>
 800c7e6:	f1b9 0f00 	cmp.w	r9, #0
 800c7ea:	da05      	bge.n	800c7f8 <__ieee754_pow+0x1b8>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	492a      	ldr	r1, [pc, #168]	; (800c89c <__ieee754_pow+0x25c>)
 800c7f4:	f7f4 f82a 	bl	800084c <__aeabi_ddiv>
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	f6bf af40 	bge.w	800c67e <__ieee754_pow+0x3e>
 800c7fe:	9b04      	ldr	r3, [sp, #16]
 800c800:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c804:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c808:	4323      	orrs	r3, r4
 800c80a:	d108      	bne.n	800c81e <__ieee754_pow+0x1de>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4610      	mov	r0, r2
 800c812:	4619      	mov	r1, r3
 800c814:	f7f3 fd38 	bl	8000288 <__aeabi_dsub>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	e78f      	b.n	800c73e <__ieee754_pow+0xfe>
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	2b01      	cmp	r3, #1
 800c822:	f47f af2c 	bne.w	800c67e <__ieee754_pow+0x3e>
 800c826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c82a:	4619      	mov	r1, r3
 800c82c:	e727      	b.n	800c67e <__ieee754_pow+0x3e>
 800c82e:	0feb      	lsrs	r3, r5, #31
 800c830:	3b01      	subs	r3, #1
 800c832:	9306      	str	r3, [sp, #24]
 800c834:	9a06      	ldr	r2, [sp, #24]
 800c836:	9b04      	ldr	r3, [sp, #16]
 800c838:	4313      	orrs	r3, r2
 800c83a:	d102      	bne.n	800c842 <__ieee754_pow+0x202>
 800c83c:	4632      	mov	r2, r6
 800c83e:	463b      	mov	r3, r7
 800c840:	e7e6      	b.n	800c810 <__ieee754_pow+0x1d0>
 800c842:	4b19      	ldr	r3, [pc, #100]	; (800c8a8 <__ieee754_pow+0x268>)
 800c844:	4598      	cmp	r8, r3
 800c846:	f340 80fb 	ble.w	800ca40 <__ieee754_pow+0x400>
 800c84a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c84e:	4598      	cmp	r8, r3
 800c850:	4b13      	ldr	r3, [pc, #76]	; (800c8a0 <__ieee754_pow+0x260>)
 800c852:	dd0c      	ble.n	800c86e <__ieee754_pow+0x22e>
 800c854:	429c      	cmp	r4, r3
 800c856:	dc0f      	bgt.n	800c878 <__ieee754_pow+0x238>
 800c858:	f1b9 0f00 	cmp.w	r9, #0
 800c85c:	da0f      	bge.n	800c87e <__ieee754_pow+0x23e>
 800c85e:	2000      	movs	r0, #0
 800c860:	b009      	add	sp, #36	; 0x24
 800c862:	ecbd 8b06 	vpop	{d8-d10}
 800c866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86a:	f001 bea6 	b.w	800e5ba <__math_oflow>
 800c86e:	429c      	cmp	r4, r3
 800c870:	dbf2      	blt.n	800c858 <__ieee754_pow+0x218>
 800c872:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <__ieee754_pow+0x25c>)
 800c874:	429c      	cmp	r4, r3
 800c876:	dd19      	ble.n	800c8ac <__ieee754_pow+0x26c>
 800c878:	f1b9 0f00 	cmp.w	r9, #0
 800c87c:	dcef      	bgt.n	800c85e <__ieee754_pow+0x21e>
 800c87e:	2000      	movs	r0, #0
 800c880:	b009      	add	sp, #36	; 0x24
 800c882:	ecbd 8b06 	vpop	{d8-d10}
 800c886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88a:	f001 be8d 	b.w	800e5a8 <__math_uflow>
 800c88e:	bf00      	nop
 800c890:	fff00000 	.word	0xfff00000
 800c894:	7ff00000 	.word	0x7ff00000
 800c898:	433fffff 	.word	0x433fffff
 800c89c:	3ff00000 	.word	0x3ff00000
 800c8a0:	3fefffff 	.word	0x3fefffff
 800c8a4:	3fe00000 	.word	0x3fe00000
 800c8a8:	41e00000 	.word	0x41e00000
 800c8ac:	4b60      	ldr	r3, [pc, #384]	; (800ca30 <__ieee754_pow+0x3f0>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f7f3 fcea 	bl	8000288 <__aeabi_dsub>
 800c8b4:	a354      	add	r3, pc, #336	; (adr r3, 800ca08 <__ieee754_pow+0x3c8>)
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	460d      	mov	r5, r1
 800c8be:	f7f3 fe9b 	bl	80005f8 <__aeabi_dmul>
 800c8c2:	a353      	add	r3, pc, #332	; (adr r3, 800ca10 <__ieee754_pow+0x3d0>)
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	4606      	mov	r6, r0
 800c8ca:	460f      	mov	r7, r1
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	f7f3 fe92 	bl	80005f8 <__aeabi_dmul>
 800c8d4:	4b57      	ldr	r3, [pc, #348]	; (800ca34 <__ieee754_pow+0x3f4>)
 800c8d6:	4682      	mov	sl, r0
 800c8d8:	468b      	mov	fp, r1
 800c8da:	2200      	movs	r2, #0
 800c8dc:	4620      	mov	r0, r4
 800c8de:	4629      	mov	r1, r5
 800c8e0:	f7f3 fe8a 	bl	80005f8 <__aeabi_dmul>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	a14b      	add	r1, pc, #300	; (adr r1, 800ca18 <__ieee754_pow+0x3d8>)
 800c8ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ee:	f7f3 fccb 	bl	8000288 <__aeabi_dsub>
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	f7f3 fe7f 	bl	80005f8 <__aeabi_dmul>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	2000      	movs	r0, #0
 800c900:	494d      	ldr	r1, [pc, #308]	; (800ca38 <__ieee754_pow+0x3f8>)
 800c902:	f7f3 fcc1 	bl	8000288 <__aeabi_dsub>
 800c906:	4622      	mov	r2, r4
 800c908:	4680      	mov	r8, r0
 800c90a:	4689      	mov	r9, r1
 800c90c:	462b      	mov	r3, r5
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f3 fe71 	bl	80005f8 <__aeabi_dmul>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4640      	mov	r0, r8
 800c91c:	4649      	mov	r1, r9
 800c91e:	f7f3 fe6b 	bl	80005f8 <__aeabi_dmul>
 800c922:	a33f      	add	r3, pc, #252	; (adr r3, 800ca20 <__ieee754_pow+0x3e0>)
 800c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c928:	f7f3 fe66 	bl	80005f8 <__aeabi_dmul>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4650      	mov	r0, sl
 800c932:	4659      	mov	r1, fp
 800c934:	f7f3 fca8 	bl	8000288 <__aeabi_dsub>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4680      	mov	r8, r0
 800c93e:	4689      	mov	r9, r1
 800c940:	4630      	mov	r0, r6
 800c942:	4639      	mov	r1, r7
 800c944:	f7f3 fca2 	bl	800028c <__adddf3>
 800c948:	2000      	movs	r0, #0
 800c94a:	4632      	mov	r2, r6
 800c94c:	463b      	mov	r3, r7
 800c94e:	4604      	mov	r4, r0
 800c950:	460d      	mov	r5, r1
 800c952:	f7f3 fc99 	bl	8000288 <__aeabi_dsub>
 800c956:	4602      	mov	r2, r0
 800c958:	460b      	mov	r3, r1
 800c95a:	4640      	mov	r0, r8
 800c95c:	4649      	mov	r1, r9
 800c95e:	f7f3 fc93 	bl	8000288 <__aeabi_dsub>
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	9a06      	ldr	r2, [sp, #24]
 800c966:	3b01      	subs	r3, #1
 800c968:	4313      	orrs	r3, r2
 800c96a:	4682      	mov	sl, r0
 800c96c:	468b      	mov	fp, r1
 800c96e:	f040 81e7 	bne.w	800cd40 <__ieee754_pow+0x700>
 800c972:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ca28 <__ieee754_pow+0x3e8>
 800c976:	eeb0 8a47 	vmov.f32	s16, s14
 800c97a:	eef0 8a67 	vmov.f32	s17, s15
 800c97e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c982:	2600      	movs	r6, #0
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c98c:	f7f3 fc7c 	bl	8000288 <__aeabi_dsub>
 800c990:	4622      	mov	r2, r4
 800c992:	462b      	mov	r3, r5
 800c994:	f7f3 fe30 	bl	80005f8 <__aeabi_dmul>
 800c998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c99c:	4680      	mov	r8, r0
 800c99e:	4689      	mov	r9, r1
 800c9a0:	4650      	mov	r0, sl
 800c9a2:	4659      	mov	r1, fp
 800c9a4:	f7f3 fe28 	bl	80005f8 <__aeabi_dmul>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	f7f3 fc6c 	bl	800028c <__adddf3>
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	463b      	mov	r3, r7
 800c9b8:	4680      	mov	r8, r0
 800c9ba:	4689      	mov	r9, r1
 800c9bc:	4620      	mov	r0, r4
 800c9be:	4629      	mov	r1, r5
 800c9c0:	f7f3 fe1a 	bl	80005f8 <__aeabi_dmul>
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	f7f3 fc5c 	bl	800028c <__adddf3>
 800c9d4:	4b19      	ldr	r3, [pc, #100]	; (800ca3c <__ieee754_pow+0x3fc>)
 800c9d6:	4299      	cmp	r1, r3
 800c9d8:	ec45 4b19 	vmov	d9, r4, r5
 800c9dc:	4606      	mov	r6, r0
 800c9de:	460f      	mov	r7, r1
 800c9e0:	468b      	mov	fp, r1
 800c9e2:	f340 82f1 	ble.w	800cfc8 <__ieee754_pow+0x988>
 800c9e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c9ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c9ee:	4303      	orrs	r3, r0
 800c9f0:	f000 81e4 	beq.w	800cdbc <__ieee754_pow+0x77c>
 800c9f4:	ec51 0b18 	vmov	r0, r1, d8
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f7f4 f86e 	bl	8000adc <__aeabi_dcmplt>
 800ca00:	3800      	subs	r0, #0
 800ca02:	bf18      	it	ne
 800ca04:	2001      	movne	r0, #1
 800ca06:	e72b      	b.n	800c860 <__ieee754_pow+0x220>
 800ca08:	60000000 	.word	0x60000000
 800ca0c:	3ff71547 	.word	0x3ff71547
 800ca10:	f85ddf44 	.word	0xf85ddf44
 800ca14:	3e54ae0b 	.word	0x3e54ae0b
 800ca18:	55555555 	.word	0x55555555
 800ca1c:	3fd55555 	.word	0x3fd55555
 800ca20:	652b82fe 	.word	0x652b82fe
 800ca24:	3ff71547 	.word	0x3ff71547
 800ca28:	00000000 	.word	0x00000000
 800ca2c:	bff00000 	.word	0xbff00000
 800ca30:	3ff00000 	.word	0x3ff00000
 800ca34:	3fd00000 	.word	0x3fd00000
 800ca38:	3fe00000 	.word	0x3fe00000
 800ca3c:	408fffff 	.word	0x408fffff
 800ca40:	4bd5      	ldr	r3, [pc, #852]	; (800cd98 <__ieee754_pow+0x758>)
 800ca42:	402b      	ands	r3, r5
 800ca44:	2200      	movs	r2, #0
 800ca46:	b92b      	cbnz	r3, 800ca54 <__ieee754_pow+0x414>
 800ca48:	4bd4      	ldr	r3, [pc, #848]	; (800cd9c <__ieee754_pow+0x75c>)
 800ca4a:	f7f3 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ca4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ca52:	460c      	mov	r4, r1
 800ca54:	1523      	asrs	r3, r4, #20
 800ca56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ca5a:	4413      	add	r3, r2
 800ca5c:	9305      	str	r3, [sp, #20]
 800ca5e:	4bd0      	ldr	r3, [pc, #832]	; (800cda0 <__ieee754_pow+0x760>)
 800ca60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca6e:	dd08      	ble.n	800ca82 <__ieee754_pow+0x442>
 800ca70:	4bcc      	ldr	r3, [pc, #816]	; (800cda4 <__ieee754_pow+0x764>)
 800ca72:	429c      	cmp	r4, r3
 800ca74:	f340 8162 	ble.w	800cd3c <__ieee754_pow+0x6fc>
 800ca78:	9b05      	ldr	r3, [sp, #20]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	9305      	str	r3, [sp, #20]
 800ca7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ca82:	2400      	movs	r4, #0
 800ca84:	00e3      	lsls	r3, r4, #3
 800ca86:	9307      	str	r3, [sp, #28]
 800ca88:	4bc7      	ldr	r3, [pc, #796]	; (800cda8 <__ieee754_pow+0x768>)
 800ca8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca8e:	ed93 7b00 	vldr	d7, [r3]
 800ca92:	4629      	mov	r1, r5
 800ca94:	ec53 2b17 	vmov	r2, r3, d7
 800ca98:	eeb0 9a47 	vmov.f32	s18, s14
 800ca9c:	eef0 9a67 	vmov.f32	s19, s15
 800caa0:	4682      	mov	sl, r0
 800caa2:	f7f3 fbf1 	bl	8000288 <__aeabi_dsub>
 800caa6:	4652      	mov	r2, sl
 800caa8:	4606      	mov	r6, r0
 800caaa:	460f      	mov	r7, r1
 800caac:	462b      	mov	r3, r5
 800caae:	ec51 0b19 	vmov	r0, r1, d9
 800cab2:	f7f3 fbeb 	bl	800028c <__adddf3>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	2000      	movs	r0, #0
 800cabc:	49bb      	ldr	r1, [pc, #748]	; (800cdac <__ieee754_pow+0x76c>)
 800cabe:	f7f3 fec5 	bl	800084c <__aeabi_ddiv>
 800cac2:	ec41 0b1a 	vmov	d10, r0, r1
 800cac6:	4602      	mov	r2, r0
 800cac8:	460b      	mov	r3, r1
 800caca:	4630      	mov	r0, r6
 800cacc:	4639      	mov	r1, r7
 800cace:	f7f3 fd93 	bl	80005f8 <__aeabi_dmul>
 800cad2:	2300      	movs	r3, #0
 800cad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cad8:	9302      	str	r3, [sp, #8]
 800cada:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cade:	46ab      	mov	fp, r5
 800cae0:	106d      	asrs	r5, r5, #1
 800cae2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cae6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800caea:	ec41 0b18 	vmov	d8, r0, r1
 800caee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800caf2:	2200      	movs	r2, #0
 800caf4:	4640      	mov	r0, r8
 800caf6:	4649      	mov	r1, r9
 800caf8:	4614      	mov	r4, r2
 800cafa:	461d      	mov	r5, r3
 800cafc:	f7f3 fd7c 	bl	80005f8 <__aeabi_dmul>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	4630      	mov	r0, r6
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 fbbe 	bl	8000288 <__aeabi_dsub>
 800cb0c:	ec53 2b19 	vmov	r2, r3, d9
 800cb10:	4606      	mov	r6, r0
 800cb12:	460f      	mov	r7, r1
 800cb14:	4620      	mov	r0, r4
 800cb16:	4629      	mov	r1, r5
 800cb18:	f7f3 fbb6 	bl	8000288 <__aeabi_dsub>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4650      	mov	r0, sl
 800cb22:	4659      	mov	r1, fp
 800cb24:	f7f3 fbb0 	bl	8000288 <__aeabi_dsub>
 800cb28:	4642      	mov	r2, r8
 800cb2a:	464b      	mov	r3, r9
 800cb2c:	f7f3 fd64 	bl	80005f8 <__aeabi_dmul>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4630      	mov	r0, r6
 800cb36:	4639      	mov	r1, r7
 800cb38:	f7f3 fba6 	bl	8000288 <__aeabi_dsub>
 800cb3c:	ec53 2b1a 	vmov	r2, r3, d10
 800cb40:	f7f3 fd5a 	bl	80005f8 <__aeabi_dmul>
 800cb44:	ec53 2b18 	vmov	r2, r3, d8
 800cb48:	ec41 0b19 	vmov	d9, r0, r1
 800cb4c:	ec51 0b18 	vmov	r0, r1, d8
 800cb50:	f7f3 fd52 	bl	80005f8 <__aeabi_dmul>
 800cb54:	a37c      	add	r3, pc, #496	; (adr r3, 800cd48 <__ieee754_pow+0x708>)
 800cb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	460d      	mov	r5, r1
 800cb5e:	f7f3 fd4b 	bl	80005f8 <__aeabi_dmul>
 800cb62:	a37b      	add	r3, pc, #492	; (adr r3, 800cd50 <__ieee754_pow+0x710>)
 800cb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb68:	f7f3 fb90 	bl	800028c <__adddf3>
 800cb6c:	4622      	mov	r2, r4
 800cb6e:	462b      	mov	r3, r5
 800cb70:	f7f3 fd42 	bl	80005f8 <__aeabi_dmul>
 800cb74:	a378      	add	r3, pc, #480	; (adr r3, 800cd58 <__ieee754_pow+0x718>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	f7f3 fb87 	bl	800028c <__adddf3>
 800cb7e:	4622      	mov	r2, r4
 800cb80:	462b      	mov	r3, r5
 800cb82:	f7f3 fd39 	bl	80005f8 <__aeabi_dmul>
 800cb86:	a376      	add	r3, pc, #472	; (adr r3, 800cd60 <__ieee754_pow+0x720>)
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	f7f3 fb7e 	bl	800028c <__adddf3>
 800cb90:	4622      	mov	r2, r4
 800cb92:	462b      	mov	r3, r5
 800cb94:	f7f3 fd30 	bl	80005f8 <__aeabi_dmul>
 800cb98:	a373      	add	r3, pc, #460	; (adr r3, 800cd68 <__ieee754_pow+0x728>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	f7f3 fb75 	bl	800028c <__adddf3>
 800cba2:	4622      	mov	r2, r4
 800cba4:	462b      	mov	r3, r5
 800cba6:	f7f3 fd27 	bl	80005f8 <__aeabi_dmul>
 800cbaa:	a371      	add	r3, pc, #452	; (adr r3, 800cd70 <__ieee754_pow+0x730>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fb6c 	bl	800028c <__adddf3>
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	460f      	mov	r7, r1
 800cbba:	462b      	mov	r3, r5
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	f7f3 fd1a 	bl	80005f8 <__aeabi_dmul>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4630      	mov	r0, r6
 800cbca:	4639      	mov	r1, r7
 800cbcc:	f7f3 fd14 	bl	80005f8 <__aeabi_dmul>
 800cbd0:	4642      	mov	r2, r8
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	460d      	mov	r5, r1
 800cbd6:	464b      	mov	r3, r9
 800cbd8:	ec51 0b18 	vmov	r0, r1, d8
 800cbdc:	f7f3 fb56 	bl	800028c <__adddf3>
 800cbe0:	ec53 2b19 	vmov	r2, r3, d9
 800cbe4:	f7f3 fd08 	bl	80005f8 <__aeabi_dmul>
 800cbe8:	4622      	mov	r2, r4
 800cbea:	462b      	mov	r3, r5
 800cbec:	f7f3 fb4e 	bl	800028c <__adddf3>
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	4682      	mov	sl, r0
 800cbf4:	468b      	mov	fp, r1
 800cbf6:	464b      	mov	r3, r9
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	f7f3 fcfc 	bl	80005f8 <__aeabi_dmul>
 800cc00:	4b6b      	ldr	r3, [pc, #428]	; (800cdb0 <__ieee754_pow+0x770>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	4606      	mov	r6, r0
 800cc06:	460f      	mov	r7, r1
 800cc08:	f7f3 fb40 	bl	800028c <__adddf3>
 800cc0c:	4652      	mov	r2, sl
 800cc0e:	465b      	mov	r3, fp
 800cc10:	f7f3 fb3c 	bl	800028c <__adddf3>
 800cc14:	2000      	movs	r0, #0
 800cc16:	4604      	mov	r4, r0
 800cc18:	460d      	mov	r5, r1
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4640      	mov	r0, r8
 800cc20:	4649      	mov	r1, r9
 800cc22:	f7f3 fce9 	bl	80005f8 <__aeabi_dmul>
 800cc26:	4b62      	ldr	r3, [pc, #392]	; (800cdb0 <__ieee754_pow+0x770>)
 800cc28:	4680      	mov	r8, r0
 800cc2a:	4689      	mov	r9, r1
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fb29 	bl	8000288 <__aeabi_dsub>
 800cc36:	4632      	mov	r2, r6
 800cc38:	463b      	mov	r3, r7
 800cc3a:	f7f3 fb25 	bl	8000288 <__aeabi_dsub>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4650      	mov	r0, sl
 800cc44:	4659      	mov	r1, fp
 800cc46:	f7f3 fb1f 	bl	8000288 <__aeabi_dsub>
 800cc4a:	ec53 2b18 	vmov	r2, r3, d8
 800cc4e:	f7f3 fcd3 	bl	80005f8 <__aeabi_dmul>
 800cc52:	4622      	mov	r2, r4
 800cc54:	4606      	mov	r6, r0
 800cc56:	460f      	mov	r7, r1
 800cc58:	462b      	mov	r3, r5
 800cc5a:	ec51 0b19 	vmov	r0, r1, d9
 800cc5e:	f7f3 fccb 	bl	80005f8 <__aeabi_dmul>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4630      	mov	r0, r6
 800cc68:	4639      	mov	r1, r7
 800cc6a:	f7f3 fb0f 	bl	800028c <__adddf3>
 800cc6e:	4606      	mov	r6, r0
 800cc70:	460f      	mov	r7, r1
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4640      	mov	r0, r8
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f7f3 fb07 	bl	800028c <__adddf3>
 800cc7e:	a33e      	add	r3, pc, #248	; (adr r3, 800cd78 <__ieee754_pow+0x738>)
 800cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc84:	2000      	movs	r0, #0
 800cc86:	4604      	mov	r4, r0
 800cc88:	460d      	mov	r5, r1
 800cc8a:	f7f3 fcb5 	bl	80005f8 <__aeabi_dmul>
 800cc8e:	4642      	mov	r2, r8
 800cc90:	ec41 0b18 	vmov	d8, r0, r1
 800cc94:	464b      	mov	r3, r9
 800cc96:	4620      	mov	r0, r4
 800cc98:	4629      	mov	r1, r5
 800cc9a:	f7f3 faf5 	bl	8000288 <__aeabi_dsub>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4630      	mov	r0, r6
 800cca4:	4639      	mov	r1, r7
 800cca6:	f7f3 faef 	bl	8000288 <__aeabi_dsub>
 800ccaa:	a335      	add	r3, pc, #212	; (adr r3, 800cd80 <__ieee754_pow+0x740>)
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	f7f3 fca2 	bl	80005f8 <__aeabi_dmul>
 800ccb4:	a334      	add	r3, pc, #208	; (adr r3, 800cd88 <__ieee754_pow+0x748>)
 800ccb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7f3 fc99 	bl	80005f8 <__aeabi_dmul>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fadd 	bl	800028c <__adddf3>
 800ccd2:	9a07      	ldr	r2, [sp, #28]
 800ccd4:	4b37      	ldr	r3, [pc, #220]	; (800cdb4 <__ieee754_pow+0x774>)
 800ccd6:	4413      	add	r3, r2
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	f7f3 fad6 	bl	800028c <__adddf3>
 800cce0:	4682      	mov	sl, r0
 800cce2:	9805      	ldr	r0, [sp, #20]
 800cce4:	468b      	mov	fp, r1
 800cce6:	f7f3 fc1d 	bl	8000524 <__aeabi_i2d>
 800ccea:	9a07      	ldr	r2, [sp, #28]
 800ccec:	4b32      	ldr	r3, [pc, #200]	; (800cdb8 <__ieee754_pow+0x778>)
 800ccee:	4413      	add	r3, r2
 800ccf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	460f      	mov	r7, r1
 800ccf8:	4652      	mov	r2, sl
 800ccfa:	465b      	mov	r3, fp
 800ccfc:	ec51 0b18 	vmov	r0, r1, d8
 800cd00:	f7f3 fac4 	bl	800028c <__adddf3>
 800cd04:	4642      	mov	r2, r8
 800cd06:	464b      	mov	r3, r9
 800cd08:	f7f3 fac0 	bl	800028c <__adddf3>
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	463b      	mov	r3, r7
 800cd10:	f7f3 fabc 	bl	800028c <__adddf3>
 800cd14:	2000      	movs	r0, #0
 800cd16:	4632      	mov	r2, r6
 800cd18:	463b      	mov	r3, r7
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	460d      	mov	r5, r1
 800cd1e:	f7f3 fab3 	bl	8000288 <__aeabi_dsub>
 800cd22:	4642      	mov	r2, r8
 800cd24:	464b      	mov	r3, r9
 800cd26:	f7f3 faaf 	bl	8000288 <__aeabi_dsub>
 800cd2a:	ec53 2b18 	vmov	r2, r3, d8
 800cd2e:	f7f3 faab 	bl	8000288 <__aeabi_dsub>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4650      	mov	r0, sl
 800cd38:	4659      	mov	r1, fp
 800cd3a:	e610      	b.n	800c95e <__ieee754_pow+0x31e>
 800cd3c:	2401      	movs	r4, #1
 800cd3e:	e6a1      	b.n	800ca84 <__ieee754_pow+0x444>
 800cd40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd90 <__ieee754_pow+0x750>
 800cd44:	e617      	b.n	800c976 <__ieee754_pow+0x336>
 800cd46:	bf00      	nop
 800cd48:	4a454eef 	.word	0x4a454eef
 800cd4c:	3fca7e28 	.word	0x3fca7e28
 800cd50:	93c9db65 	.word	0x93c9db65
 800cd54:	3fcd864a 	.word	0x3fcd864a
 800cd58:	a91d4101 	.word	0xa91d4101
 800cd5c:	3fd17460 	.word	0x3fd17460
 800cd60:	518f264d 	.word	0x518f264d
 800cd64:	3fd55555 	.word	0x3fd55555
 800cd68:	db6fabff 	.word	0xdb6fabff
 800cd6c:	3fdb6db6 	.word	0x3fdb6db6
 800cd70:	33333303 	.word	0x33333303
 800cd74:	3fe33333 	.word	0x3fe33333
 800cd78:	e0000000 	.word	0xe0000000
 800cd7c:	3feec709 	.word	0x3feec709
 800cd80:	dc3a03fd 	.word	0xdc3a03fd
 800cd84:	3feec709 	.word	0x3feec709
 800cd88:	145b01f5 	.word	0x145b01f5
 800cd8c:	be3e2fe0 	.word	0xbe3e2fe0
 800cd90:	00000000 	.word	0x00000000
 800cd94:	3ff00000 	.word	0x3ff00000
 800cd98:	7ff00000 	.word	0x7ff00000
 800cd9c:	43400000 	.word	0x43400000
 800cda0:	0003988e 	.word	0x0003988e
 800cda4:	000bb679 	.word	0x000bb679
 800cda8:	0800e9e8 	.word	0x0800e9e8
 800cdac:	3ff00000 	.word	0x3ff00000
 800cdb0:	40080000 	.word	0x40080000
 800cdb4:	0800ea08 	.word	0x0800ea08
 800cdb8:	0800e9f8 	.word	0x0800e9f8
 800cdbc:	a3b5      	add	r3, pc, #724	; (adr r3, 800d094 <__ieee754_pow+0xa54>)
 800cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fa61 	bl	800028c <__adddf3>
 800cdca:	4622      	mov	r2, r4
 800cdcc:	ec41 0b1a 	vmov	d10, r0, r1
 800cdd0:	462b      	mov	r3, r5
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f7f3 fa57 	bl	8000288 <__aeabi_dsub>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	ec51 0b1a 	vmov	r0, r1, d10
 800cde2:	f7f3 fe99 	bl	8000b18 <__aeabi_dcmpgt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f47f ae04 	bne.w	800c9f4 <__ieee754_pow+0x3b4>
 800cdec:	4aa4      	ldr	r2, [pc, #656]	; (800d080 <__ieee754_pow+0xa40>)
 800cdee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	f340 8108 	ble.w	800d008 <__ieee754_pow+0x9c8>
 800cdf8:	151b      	asrs	r3, r3, #20
 800cdfa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cdfe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ce02:	fa4a f303 	asr.w	r3, sl, r3
 800ce06:	445b      	add	r3, fp
 800ce08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce0c:	4e9d      	ldr	r6, [pc, #628]	; (800d084 <__ieee754_pow+0xa44>)
 800ce0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ce12:	4116      	asrs	r6, r2
 800ce14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ce18:	2000      	movs	r0, #0
 800ce1a:	ea23 0106 	bic.w	r1, r3, r6
 800ce1e:	f1c2 0214 	rsb	r2, r2, #20
 800ce22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ce26:	fa4a fa02 	asr.w	sl, sl, r2
 800ce2a:	f1bb 0f00 	cmp.w	fp, #0
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4620      	mov	r0, r4
 800ce34:	4629      	mov	r1, r5
 800ce36:	bfb8      	it	lt
 800ce38:	f1ca 0a00 	rsblt	sl, sl, #0
 800ce3c:	f7f3 fa24 	bl	8000288 <__aeabi_dsub>
 800ce40:	ec41 0b19 	vmov	d9, r0, r1
 800ce44:	4642      	mov	r2, r8
 800ce46:	464b      	mov	r3, r9
 800ce48:	ec51 0b19 	vmov	r0, r1, d9
 800ce4c:	f7f3 fa1e 	bl	800028c <__adddf3>
 800ce50:	a37b      	add	r3, pc, #492	; (adr r3, 800d040 <__ieee754_pow+0xa00>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	2000      	movs	r0, #0
 800ce58:	4604      	mov	r4, r0
 800ce5a:	460d      	mov	r5, r1
 800ce5c:	f7f3 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ce60:	ec53 2b19 	vmov	r2, r3, d9
 800ce64:	4606      	mov	r6, r0
 800ce66:	460f      	mov	r7, r1
 800ce68:	4620      	mov	r0, r4
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	f7f3 fa0c 	bl	8000288 <__aeabi_dsub>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	4640      	mov	r0, r8
 800ce76:	4649      	mov	r1, r9
 800ce78:	f7f3 fa06 	bl	8000288 <__aeabi_dsub>
 800ce7c:	a372      	add	r3, pc, #456	; (adr r3, 800d048 <__ieee754_pow+0xa08>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	f7f3 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ce86:	a372      	add	r3, pc, #456	; (adr r3, 800d050 <__ieee754_pow+0xa10>)
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	4680      	mov	r8, r0
 800ce8e:	4689      	mov	r9, r1
 800ce90:	4620      	mov	r0, r4
 800ce92:	4629      	mov	r1, r5
 800ce94:	f7f3 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4640      	mov	r0, r8
 800ce9e:	4649      	mov	r1, r9
 800cea0:	f7f3 f9f4 	bl	800028c <__adddf3>
 800cea4:	4604      	mov	r4, r0
 800cea6:	460d      	mov	r5, r1
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4630      	mov	r0, r6
 800ceae:	4639      	mov	r1, r7
 800ceb0:	f7f3 f9ec 	bl	800028c <__adddf3>
 800ceb4:	4632      	mov	r2, r6
 800ceb6:	463b      	mov	r3, r7
 800ceb8:	4680      	mov	r8, r0
 800ceba:	4689      	mov	r9, r1
 800cebc:	f7f3 f9e4 	bl	8000288 <__aeabi_dsub>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	4620      	mov	r0, r4
 800cec6:	4629      	mov	r1, r5
 800cec8:	f7f3 f9de 	bl	8000288 <__aeabi_dsub>
 800cecc:	4642      	mov	r2, r8
 800cece:	4606      	mov	r6, r0
 800ced0:	460f      	mov	r7, r1
 800ced2:	464b      	mov	r3, r9
 800ced4:	4640      	mov	r0, r8
 800ced6:	4649      	mov	r1, r9
 800ced8:	f7f3 fb8e 	bl	80005f8 <__aeabi_dmul>
 800cedc:	a35e      	add	r3, pc, #376	; (adr r3, 800d058 <__ieee754_pow+0xa18>)
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	4604      	mov	r4, r0
 800cee4:	460d      	mov	r5, r1
 800cee6:	f7f3 fb87 	bl	80005f8 <__aeabi_dmul>
 800ceea:	a35d      	add	r3, pc, #372	; (adr r3, 800d060 <__ieee754_pow+0xa20>)
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	f7f3 f9ca 	bl	8000288 <__aeabi_dsub>
 800cef4:	4622      	mov	r2, r4
 800cef6:	462b      	mov	r3, r5
 800cef8:	f7f3 fb7e 	bl	80005f8 <__aeabi_dmul>
 800cefc:	a35a      	add	r3, pc, #360	; (adr r3, 800d068 <__ieee754_pow+0xa28>)
 800cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf02:	f7f3 f9c3 	bl	800028c <__adddf3>
 800cf06:	4622      	mov	r2, r4
 800cf08:	462b      	mov	r3, r5
 800cf0a:	f7f3 fb75 	bl	80005f8 <__aeabi_dmul>
 800cf0e:	a358      	add	r3, pc, #352	; (adr r3, 800d070 <__ieee754_pow+0xa30>)
 800cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf14:	f7f3 f9b8 	bl	8000288 <__aeabi_dsub>
 800cf18:	4622      	mov	r2, r4
 800cf1a:	462b      	mov	r3, r5
 800cf1c:	f7f3 fb6c 	bl	80005f8 <__aeabi_dmul>
 800cf20:	a355      	add	r3, pc, #340	; (adr r3, 800d078 <__ieee754_pow+0xa38>)
 800cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf26:	f7f3 f9b1 	bl	800028c <__adddf3>
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	462b      	mov	r3, r5
 800cf2e:	f7f3 fb63 	bl	80005f8 <__aeabi_dmul>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	4640      	mov	r0, r8
 800cf38:	4649      	mov	r1, r9
 800cf3a:	f7f3 f9a5 	bl	8000288 <__aeabi_dsub>
 800cf3e:	4604      	mov	r4, r0
 800cf40:	460d      	mov	r5, r1
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4640      	mov	r0, r8
 800cf48:	4649      	mov	r1, r9
 800cf4a:	f7f3 fb55 	bl	80005f8 <__aeabi_dmul>
 800cf4e:	2200      	movs	r2, #0
 800cf50:	ec41 0b19 	vmov	d9, r0, r1
 800cf54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf58:	4620      	mov	r0, r4
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	f7f3 f994 	bl	8000288 <__aeabi_dsub>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	ec51 0b19 	vmov	r0, r1, d9
 800cf68:	f7f3 fc70 	bl	800084c <__aeabi_ddiv>
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	4604      	mov	r4, r0
 800cf70:	460d      	mov	r5, r1
 800cf72:	463b      	mov	r3, r7
 800cf74:	4640      	mov	r0, r8
 800cf76:	4649      	mov	r1, r9
 800cf78:	f7f3 fb3e 	bl	80005f8 <__aeabi_dmul>
 800cf7c:	4632      	mov	r2, r6
 800cf7e:	463b      	mov	r3, r7
 800cf80:	f7f3 f984 	bl	800028c <__adddf3>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4620      	mov	r0, r4
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f7f3 f97c 	bl	8000288 <__aeabi_dsub>
 800cf90:	4642      	mov	r2, r8
 800cf92:	464b      	mov	r3, r9
 800cf94:	f7f3 f978 	bl	8000288 <__aeabi_dsub>
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	493a      	ldr	r1, [pc, #232]	; (800d088 <__ieee754_pow+0xa48>)
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	f7f3 f972 	bl	8000288 <__aeabi_dsub>
 800cfa4:	ec41 0b10 	vmov	d0, r0, r1
 800cfa8:	ee10 3a90 	vmov	r3, s1
 800cfac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cfb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfb4:	da2b      	bge.n	800d00e <__ieee754_pow+0x9ce>
 800cfb6:	4650      	mov	r0, sl
 800cfb8:	f001 fbc6 	bl	800e748 <scalbn>
 800cfbc:	ec51 0b10 	vmov	r0, r1, d0
 800cfc0:	ec53 2b18 	vmov	r2, r3, d8
 800cfc4:	f7ff bbed 	b.w	800c7a2 <__ieee754_pow+0x162>
 800cfc8:	4b30      	ldr	r3, [pc, #192]	; (800d08c <__ieee754_pow+0xa4c>)
 800cfca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cfce:	429e      	cmp	r6, r3
 800cfd0:	f77f af0c 	ble.w	800cdec <__ieee754_pow+0x7ac>
 800cfd4:	4b2e      	ldr	r3, [pc, #184]	; (800d090 <__ieee754_pow+0xa50>)
 800cfd6:	440b      	add	r3, r1
 800cfd8:	4303      	orrs	r3, r0
 800cfda:	d009      	beq.n	800cff0 <__ieee754_pow+0x9b0>
 800cfdc:	ec51 0b18 	vmov	r0, r1, d8
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	f7f3 fd7a 	bl	8000adc <__aeabi_dcmplt>
 800cfe8:	3800      	subs	r0, #0
 800cfea:	bf18      	it	ne
 800cfec:	2001      	movne	r0, #1
 800cfee:	e447      	b.n	800c880 <__ieee754_pow+0x240>
 800cff0:	4622      	mov	r2, r4
 800cff2:	462b      	mov	r3, r5
 800cff4:	f7f3 f948 	bl	8000288 <__aeabi_dsub>
 800cff8:	4642      	mov	r2, r8
 800cffa:	464b      	mov	r3, r9
 800cffc:	f7f3 fd82 	bl	8000b04 <__aeabi_dcmpge>
 800d000:	2800      	cmp	r0, #0
 800d002:	f43f aef3 	beq.w	800cdec <__ieee754_pow+0x7ac>
 800d006:	e7e9      	b.n	800cfdc <__ieee754_pow+0x99c>
 800d008:	f04f 0a00 	mov.w	sl, #0
 800d00c:	e71a      	b.n	800ce44 <__ieee754_pow+0x804>
 800d00e:	ec51 0b10 	vmov	r0, r1, d0
 800d012:	4619      	mov	r1, r3
 800d014:	e7d4      	b.n	800cfc0 <__ieee754_pow+0x980>
 800d016:	491c      	ldr	r1, [pc, #112]	; (800d088 <__ieee754_pow+0xa48>)
 800d018:	2000      	movs	r0, #0
 800d01a:	f7ff bb30 	b.w	800c67e <__ieee754_pow+0x3e>
 800d01e:	2000      	movs	r0, #0
 800d020:	2100      	movs	r1, #0
 800d022:	f7ff bb2c 	b.w	800c67e <__ieee754_pow+0x3e>
 800d026:	4630      	mov	r0, r6
 800d028:	4639      	mov	r1, r7
 800d02a:	f7ff bb28 	b.w	800c67e <__ieee754_pow+0x3e>
 800d02e:	9204      	str	r2, [sp, #16]
 800d030:	f7ff bb7a 	b.w	800c728 <__ieee754_pow+0xe8>
 800d034:	2300      	movs	r3, #0
 800d036:	f7ff bb64 	b.w	800c702 <__ieee754_pow+0xc2>
 800d03a:	bf00      	nop
 800d03c:	f3af 8000 	nop.w
 800d040:	00000000 	.word	0x00000000
 800d044:	3fe62e43 	.word	0x3fe62e43
 800d048:	fefa39ef 	.word	0xfefa39ef
 800d04c:	3fe62e42 	.word	0x3fe62e42
 800d050:	0ca86c39 	.word	0x0ca86c39
 800d054:	be205c61 	.word	0xbe205c61
 800d058:	72bea4d0 	.word	0x72bea4d0
 800d05c:	3e663769 	.word	0x3e663769
 800d060:	c5d26bf1 	.word	0xc5d26bf1
 800d064:	3ebbbd41 	.word	0x3ebbbd41
 800d068:	af25de2c 	.word	0xaf25de2c
 800d06c:	3f11566a 	.word	0x3f11566a
 800d070:	16bebd93 	.word	0x16bebd93
 800d074:	3f66c16c 	.word	0x3f66c16c
 800d078:	5555553e 	.word	0x5555553e
 800d07c:	3fc55555 	.word	0x3fc55555
 800d080:	3fe00000 	.word	0x3fe00000
 800d084:	000fffff 	.word	0x000fffff
 800d088:	3ff00000 	.word	0x3ff00000
 800d08c:	4090cbff 	.word	0x4090cbff
 800d090:	3f6f3400 	.word	0x3f6f3400
 800d094:	652b82fe 	.word	0x652b82fe
 800d098:	3c971547 	.word	0x3c971547
 800d09c:	00000000 	.word	0x00000000

0800d0a0 <__ieee754_rem_pio2>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	ed2d 8b02 	vpush	{d8}
 800d0a8:	ec55 4b10 	vmov	r4, r5, d0
 800d0ac:	4bca      	ldr	r3, [pc, #808]	; (800d3d8 <__ieee754_rem_pio2+0x338>)
 800d0ae:	b08b      	sub	sp, #44	; 0x2c
 800d0b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d0b4:	4598      	cmp	r8, r3
 800d0b6:	4682      	mov	sl, r0
 800d0b8:	9502      	str	r5, [sp, #8]
 800d0ba:	dc08      	bgt.n	800d0ce <__ieee754_rem_pio2+0x2e>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2300      	movs	r3, #0
 800d0c0:	ed80 0b00 	vstr	d0, [r0]
 800d0c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d0c8:	f04f 0b00 	mov.w	fp, #0
 800d0cc:	e028      	b.n	800d120 <__ieee754_rem_pio2+0x80>
 800d0ce:	4bc3      	ldr	r3, [pc, #780]	; (800d3dc <__ieee754_rem_pio2+0x33c>)
 800d0d0:	4598      	cmp	r8, r3
 800d0d2:	dc78      	bgt.n	800d1c6 <__ieee754_rem_pio2+0x126>
 800d0d4:	9b02      	ldr	r3, [sp, #8]
 800d0d6:	4ec2      	ldr	r6, [pc, #776]	; (800d3e0 <__ieee754_rem_pio2+0x340>)
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	ee10 0a10 	vmov	r0, s0
 800d0de:	a3b0      	add	r3, pc, #704	; (adr r3, 800d3a0 <__ieee754_rem_pio2+0x300>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	dd39      	ble.n	800d15c <__ieee754_rem_pio2+0xbc>
 800d0e8:	f7f3 f8ce 	bl	8000288 <__aeabi_dsub>
 800d0ec:	45b0      	cmp	r8, r6
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	460d      	mov	r5, r1
 800d0f2:	d01b      	beq.n	800d12c <__ieee754_rem_pio2+0x8c>
 800d0f4:	a3ac      	add	r3, pc, #688	; (adr r3, 800d3a8 <__ieee754_rem_pio2+0x308>)
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	f7f3 f8c5 	bl	8000288 <__aeabi_dsub>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	e9ca 2300 	strd	r2, r3, [sl]
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	f7f3 f8bd 	bl	8000288 <__aeabi_dsub>
 800d10e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d3a8 <__ieee754_rem_pio2+0x308>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 f8b8 	bl	8000288 <__aeabi_dsub>
 800d118:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d11c:	f04f 0b01 	mov.w	fp, #1
 800d120:	4658      	mov	r0, fp
 800d122:	b00b      	add	sp, #44	; 0x2c
 800d124:	ecbd 8b02 	vpop	{d8}
 800d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x310>)
 800d12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d132:	f7f3 f8a9 	bl	8000288 <__aeabi_dsub>
 800d136:	a3a0      	add	r3, pc, #640	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x318>)
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	4604      	mov	r4, r0
 800d13e:	460d      	mov	r5, r1
 800d140:	f7f3 f8a2 	bl	8000288 <__aeabi_dsub>
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	e9ca 2300 	strd	r2, r3, [sl]
 800d14c:	4620      	mov	r0, r4
 800d14e:	4629      	mov	r1, r5
 800d150:	f7f3 f89a 	bl	8000288 <__aeabi_dsub>
 800d154:	a398      	add	r3, pc, #608	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x318>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	e7db      	b.n	800d114 <__ieee754_rem_pio2+0x74>
 800d15c:	f7f3 f896 	bl	800028c <__adddf3>
 800d160:	45b0      	cmp	r8, r6
 800d162:	4604      	mov	r4, r0
 800d164:	460d      	mov	r5, r1
 800d166:	d016      	beq.n	800d196 <__ieee754_rem_pio2+0xf6>
 800d168:	a38f      	add	r3, pc, #572	; (adr r3, 800d3a8 <__ieee754_rem_pio2+0x308>)
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	f7f3 f88d 	bl	800028c <__adddf3>
 800d172:	4602      	mov	r2, r0
 800d174:	460b      	mov	r3, r1
 800d176:	e9ca 2300 	strd	r2, r3, [sl]
 800d17a:	4620      	mov	r0, r4
 800d17c:	4629      	mov	r1, r5
 800d17e:	f7f3 f883 	bl	8000288 <__aeabi_dsub>
 800d182:	a389      	add	r3, pc, #548	; (adr r3, 800d3a8 <__ieee754_rem_pio2+0x308>)
 800d184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d188:	f7f3 f880 	bl	800028c <__adddf3>
 800d18c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d190:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d194:	e7c4      	b.n	800d120 <__ieee754_rem_pio2+0x80>
 800d196:	a386      	add	r3, pc, #536	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x310>)
 800d198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19c:	f7f3 f876 	bl	800028c <__adddf3>
 800d1a0:	a385      	add	r3, pc, #532	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x318>)
 800d1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	460d      	mov	r5, r1
 800d1aa:	f7f3 f86f 	bl	800028c <__adddf3>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	e9ca 2300 	strd	r2, r3, [sl]
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f865 	bl	8000288 <__aeabi_dsub>
 800d1be:	a37e      	add	r3, pc, #504	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x318>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	e7e0      	b.n	800d188 <__ieee754_rem_pio2+0xe8>
 800d1c6:	4b87      	ldr	r3, [pc, #540]	; (800d3e4 <__ieee754_rem_pio2+0x344>)
 800d1c8:	4598      	cmp	r8, r3
 800d1ca:	f300 80d9 	bgt.w	800d380 <__ieee754_rem_pio2+0x2e0>
 800d1ce:	f001 fa1f 	bl	800e610 <fabs>
 800d1d2:	ec55 4b10 	vmov	r4, r5, d0
 800d1d6:	ee10 0a10 	vmov	r0, s0
 800d1da:	a379      	add	r3, pc, #484	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x320>)
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f7f3 fa09 	bl	80005f8 <__aeabi_dmul>
 800d1e6:	4b80      	ldr	r3, [pc, #512]	; (800d3e8 <__ieee754_rem_pio2+0x348>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f7f3 f84f 	bl	800028c <__adddf3>
 800d1ee:	f7f3 fcb3 	bl	8000b58 <__aeabi_d2iz>
 800d1f2:	4683      	mov	fp, r0
 800d1f4:	f7f3 f996 	bl	8000524 <__aeabi_i2d>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	ec43 2b18 	vmov	d8, r2, r3
 800d200:	a367      	add	r3, pc, #412	; (adr r3, 800d3a0 <__ieee754_rem_pio2+0x300>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f7f3 f9f7 	bl	80005f8 <__aeabi_dmul>
 800d20a:	4602      	mov	r2, r0
 800d20c:	460b      	mov	r3, r1
 800d20e:	4620      	mov	r0, r4
 800d210:	4629      	mov	r1, r5
 800d212:	f7f3 f839 	bl	8000288 <__aeabi_dsub>
 800d216:	a364      	add	r3, pc, #400	; (adr r3, 800d3a8 <__ieee754_rem_pio2+0x308>)
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	4606      	mov	r6, r0
 800d21e:	460f      	mov	r7, r1
 800d220:	ec51 0b18 	vmov	r0, r1, d8
 800d224:	f7f3 f9e8 	bl	80005f8 <__aeabi_dmul>
 800d228:	f1bb 0f1f 	cmp.w	fp, #31
 800d22c:	4604      	mov	r4, r0
 800d22e:	460d      	mov	r5, r1
 800d230:	dc0d      	bgt.n	800d24e <__ieee754_rem_pio2+0x1ae>
 800d232:	4b6e      	ldr	r3, [pc, #440]	; (800d3ec <__ieee754_rem_pio2+0x34c>)
 800d234:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23c:	4543      	cmp	r3, r8
 800d23e:	d006      	beq.n	800d24e <__ieee754_rem_pio2+0x1ae>
 800d240:	4622      	mov	r2, r4
 800d242:	462b      	mov	r3, r5
 800d244:	4630      	mov	r0, r6
 800d246:	4639      	mov	r1, r7
 800d248:	f7f3 f81e 	bl	8000288 <__aeabi_dsub>
 800d24c:	e00f      	b.n	800d26e <__ieee754_rem_pio2+0x1ce>
 800d24e:	462b      	mov	r3, r5
 800d250:	4622      	mov	r2, r4
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 f817 	bl	8000288 <__aeabi_dsub>
 800d25a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d25e:	9303      	str	r3, [sp, #12]
 800d260:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d264:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d268:	f1b8 0f10 	cmp.w	r8, #16
 800d26c:	dc02      	bgt.n	800d274 <__ieee754_rem_pio2+0x1d4>
 800d26e:	e9ca 0100 	strd	r0, r1, [sl]
 800d272:	e039      	b.n	800d2e8 <__ieee754_rem_pio2+0x248>
 800d274:	a34e      	add	r3, pc, #312	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x310>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	ec51 0b18 	vmov	r0, r1, d8
 800d27e:	f7f3 f9bb 	bl	80005f8 <__aeabi_dmul>
 800d282:	4604      	mov	r4, r0
 800d284:	460d      	mov	r5, r1
 800d286:	4602      	mov	r2, r0
 800d288:	460b      	mov	r3, r1
 800d28a:	4630      	mov	r0, r6
 800d28c:	4639      	mov	r1, r7
 800d28e:	f7f2 fffb 	bl	8000288 <__aeabi_dsub>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	4680      	mov	r8, r0
 800d298:	4689      	mov	r9, r1
 800d29a:	4630      	mov	r0, r6
 800d29c:	4639      	mov	r1, r7
 800d29e:	f7f2 fff3 	bl	8000288 <__aeabi_dsub>
 800d2a2:	4622      	mov	r2, r4
 800d2a4:	462b      	mov	r3, r5
 800d2a6:	f7f2 ffef 	bl	8000288 <__aeabi_dsub>
 800d2aa:	a343      	add	r3, pc, #268	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x318>)
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	ec51 0b18 	vmov	r0, r1, d8
 800d2b8:	f7f3 f99e 	bl	80005f8 <__aeabi_dmul>
 800d2bc:	4622      	mov	r2, r4
 800d2be:	462b      	mov	r3, r5
 800d2c0:	f7f2 ffe2 	bl	8000288 <__aeabi_dsub>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	4649      	mov	r1, r9
 800d2d0:	f7f2 ffda 	bl	8000288 <__aeabi_dsub>
 800d2d4:	9a03      	ldr	r2, [sp, #12]
 800d2d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	2b31      	cmp	r3, #49	; 0x31
 800d2de:	dc24      	bgt.n	800d32a <__ieee754_rem_pio2+0x28a>
 800d2e0:	e9ca 0100 	strd	r0, r1, [sl]
 800d2e4:	4646      	mov	r6, r8
 800d2e6:	464f      	mov	r7, r9
 800d2e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	4642      	mov	r2, r8
 800d2f0:	464b      	mov	r3, r9
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	f7f2 ffc8 	bl	8000288 <__aeabi_dsub>
 800d2f8:	462b      	mov	r3, r5
 800d2fa:	4622      	mov	r2, r4
 800d2fc:	f7f2 ffc4 	bl	8000288 <__aeabi_dsub>
 800d300:	9b02      	ldr	r3, [sp, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d308:	f6bf af0a 	bge.w	800d120 <__ieee754_rem_pio2+0x80>
 800d30c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d310:	f8ca 3004 	str.w	r3, [sl, #4]
 800d314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d318:	f8ca 8000 	str.w	r8, [sl]
 800d31c:	f8ca 0008 	str.w	r0, [sl, #8]
 800d320:	f8ca 300c 	str.w	r3, [sl, #12]
 800d324:	f1cb 0b00 	rsb	fp, fp, #0
 800d328:	e6fa      	b.n	800d120 <__ieee754_rem_pio2+0x80>
 800d32a:	a327      	add	r3, pc, #156	; (adr r3, 800d3c8 <__ieee754_rem_pio2+0x328>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	ec51 0b18 	vmov	r0, r1, d8
 800d334:	f7f3 f960 	bl	80005f8 <__aeabi_dmul>
 800d338:	4604      	mov	r4, r0
 800d33a:	460d      	mov	r5, r1
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4640      	mov	r0, r8
 800d342:	4649      	mov	r1, r9
 800d344:	f7f2 ffa0 	bl	8000288 <__aeabi_dsub>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4606      	mov	r6, r0
 800d34e:	460f      	mov	r7, r1
 800d350:	4640      	mov	r0, r8
 800d352:	4649      	mov	r1, r9
 800d354:	f7f2 ff98 	bl	8000288 <__aeabi_dsub>
 800d358:	4622      	mov	r2, r4
 800d35a:	462b      	mov	r3, r5
 800d35c:	f7f2 ff94 	bl	8000288 <__aeabi_dsub>
 800d360:	a31b      	add	r3, pc, #108	; (adr r3, 800d3d0 <__ieee754_rem_pio2+0x330>)
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	4604      	mov	r4, r0
 800d368:	460d      	mov	r5, r1
 800d36a:	ec51 0b18 	vmov	r0, r1, d8
 800d36e:	f7f3 f943 	bl	80005f8 <__aeabi_dmul>
 800d372:	4622      	mov	r2, r4
 800d374:	462b      	mov	r3, r5
 800d376:	f7f2 ff87 	bl	8000288 <__aeabi_dsub>
 800d37a:	4604      	mov	r4, r0
 800d37c:	460d      	mov	r5, r1
 800d37e:	e75f      	b.n	800d240 <__ieee754_rem_pio2+0x1a0>
 800d380:	4b1b      	ldr	r3, [pc, #108]	; (800d3f0 <__ieee754_rem_pio2+0x350>)
 800d382:	4598      	cmp	r8, r3
 800d384:	dd36      	ble.n	800d3f4 <__ieee754_rem_pio2+0x354>
 800d386:	ee10 2a10 	vmov	r2, s0
 800d38a:	462b      	mov	r3, r5
 800d38c:	4620      	mov	r0, r4
 800d38e:	4629      	mov	r1, r5
 800d390:	f7f2 ff7a 	bl	8000288 <__aeabi_dsub>
 800d394:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d398:	e9ca 0100 	strd	r0, r1, [sl]
 800d39c:	e694      	b.n	800d0c8 <__ieee754_rem_pio2+0x28>
 800d39e:	bf00      	nop
 800d3a0:	54400000 	.word	0x54400000
 800d3a4:	3ff921fb 	.word	0x3ff921fb
 800d3a8:	1a626331 	.word	0x1a626331
 800d3ac:	3dd0b461 	.word	0x3dd0b461
 800d3b0:	1a600000 	.word	0x1a600000
 800d3b4:	3dd0b461 	.word	0x3dd0b461
 800d3b8:	2e037073 	.word	0x2e037073
 800d3bc:	3ba3198a 	.word	0x3ba3198a
 800d3c0:	6dc9c883 	.word	0x6dc9c883
 800d3c4:	3fe45f30 	.word	0x3fe45f30
 800d3c8:	2e000000 	.word	0x2e000000
 800d3cc:	3ba3198a 	.word	0x3ba3198a
 800d3d0:	252049c1 	.word	0x252049c1
 800d3d4:	397b839a 	.word	0x397b839a
 800d3d8:	3fe921fb 	.word	0x3fe921fb
 800d3dc:	4002d97b 	.word	0x4002d97b
 800d3e0:	3ff921fb 	.word	0x3ff921fb
 800d3e4:	413921fb 	.word	0x413921fb
 800d3e8:	3fe00000 	.word	0x3fe00000
 800d3ec:	0800ea18 	.word	0x0800ea18
 800d3f0:	7fefffff 	.word	0x7fefffff
 800d3f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d3f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d3fc:	ee10 0a10 	vmov	r0, s0
 800d400:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d404:	ee10 6a10 	vmov	r6, s0
 800d408:	460f      	mov	r7, r1
 800d40a:	f7f3 fba5 	bl	8000b58 <__aeabi_d2iz>
 800d40e:	f7f3 f889 	bl	8000524 <__aeabi_i2d>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	4630      	mov	r0, r6
 800d418:	4639      	mov	r1, r7
 800d41a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d41e:	f7f2 ff33 	bl	8000288 <__aeabi_dsub>
 800d422:	4b23      	ldr	r3, [pc, #140]	; (800d4b0 <__ieee754_rem_pio2+0x410>)
 800d424:	2200      	movs	r2, #0
 800d426:	f7f3 f8e7 	bl	80005f8 <__aeabi_dmul>
 800d42a:	460f      	mov	r7, r1
 800d42c:	4606      	mov	r6, r0
 800d42e:	f7f3 fb93 	bl	8000b58 <__aeabi_d2iz>
 800d432:	f7f3 f877 	bl	8000524 <__aeabi_i2d>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4630      	mov	r0, r6
 800d43c:	4639      	mov	r1, r7
 800d43e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d442:	f7f2 ff21 	bl	8000288 <__aeabi_dsub>
 800d446:	4b1a      	ldr	r3, [pc, #104]	; (800d4b0 <__ieee754_rem_pio2+0x410>)
 800d448:	2200      	movs	r2, #0
 800d44a:	f7f3 f8d5 	bl	80005f8 <__aeabi_dmul>
 800d44e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d452:	ad04      	add	r5, sp, #16
 800d454:	f04f 0803 	mov.w	r8, #3
 800d458:	46a9      	mov	r9, r5
 800d45a:	2600      	movs	r6, #0
 800d45c:	2700      	movs	r7, #0
 800d45e:	4632      	mov	r2, r6
 800d460:	463b      	mov	r3, r7
 800d462:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d466:	46c3      	mov	fp, r8
 800d468:	3d08      	subs	r5, #8
 800d46a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d46e:	f7f3 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d472:	2800      	cmp	r0, #0
 800d474:	d1f3      	bne.n	800d45e <__ieee754_rem_pio2+0x3be>
 800d476:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <__ieee754_rem_pio2+0x414>)
 800d478:	9301      	str	r3, [sp, #4]
 800d47a:	2302      	movs	r3, #2
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	4622      	mov	r2, r4
 800d480:	465b      	mov	r3, fp
 800d482:	4651      	mov	r1, sl
 800d484:	4648      	mov	r0, r9
 800d486:	f000 fc63 	bl	800dd50 <__kernel_rem_pio2>
 800d48a:	9b02      	ldr	r3, [sp, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	4683      	mov	fp, r0
 800d490:	f6bf ae46 	bge.w	800d120 <__ieee754_rem_pio2+0x80>
 800d494:	e9da 2100 	ldrd	r2, r1, [sl]
 800d498:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d49c:	e9ca 2300 	strd	r2, r3, [sl]
 800d4a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d4a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d4ac:	e73a      	b.n	800d324 <__ieee754_rem_pio2+0x284>
 800d4ae:	bf00      	nop
 800d4b0:	41700000 	.word	0x41700000
 800d4b4:	0800ea98 	.word	0x0800ea98

0800d4b8 <__ieee754_sqrt>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	ec55 4b10 	vmov	r4, r5, d0
 800d4c0:	4e55      	ldr	r6, [pc, #340]	; (800d618 <__ieee754_sqrt+0x160>)
 800d4c2:	43ae      	bics	r6, r5
 800d4c4:	ee10 0a10 	vmov	r0, s0
 800d4c8:	ee10 3a10 	vmov	r3, s0
 800d4cc:	462a      	mov	r2, r5
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	d110      	bne.n	800d4f4 <__ieee754_sqrt+0x3c>
 800d4d2:	ee10 2a10 	vmov	r2, s0
 800d4d6:	462b      	mov	r3, r5
 800d4d8:	f7f3 f88e 	bl	80005f8 <__aeabi_dmul>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	f7f2 fed2 	bl	800028c <__adddf3>
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	460d      	mov	r5, r1
 800d4ec:	ec45 4b10 	vmov	d0, r4, r5
 800d4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f4:	2d00      	cmp	r5, #0
 800d4f6:	dc10      	bgt.n	800d51a <__ieee754_sqrt+0x62>
 800d4f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d4fc:	4330      	orrs	r0, r6
 800d4fe:	d0f5      	beq.n	800d4ec <__ieee754_sqrt+0x34>
 800d500:	b15d      	cbz	r5, 800d51a <__ieee754_sqrt+0x62>
 800d502:	ee10 2a10 	vmov	r2, s0
 800d506:	462b      	mov	r3, r5
 800d508:	ee10 0a10 	vmov	r0, s0
 800d50c:	f7f2 febc 	bl	8000288 <__aeabi_dsub>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	f7f3 f99a 	bl	800084c <__aeabi_ddiv>
 800d518:	e7e6      	b.n	800d4e8 <__ieee754_sqrt+0x30>
 800d51a:	1512      	asrs	r2, r2, #20
 800d51c:	d074      	beq.n	800d608 <__ieee754_sqrt+0x150>
 800d51e:	07d4      	lsls	r4, r2, #31
 800d520:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d524:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d52c:	bf5e      	ittt	pl
 800d52e:	0fda      	lsrpl	r2, r3, #31
 800d530:	005b      	lslpl	r3, r3, #1
 800d532:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d536:	2400      	movs	r4, #0
 800d538:	0fda      	lsrs	r2, r3, #31
 800d53a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d53e:	107f      	asrs	r7, r7, #1
 800d540:	005b      	lsls	r3, r3, #1
 800d542:	2516      	movs	r5, #22
 800d544:	4620      	mov	r0, r4
 800d546:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d54a:	1886      	adds	r6, r0, r2
 800d54c:	428e      	cmp	r6, r1
 800d54e:	bfde      	ittt	le
 800d550:	1b89      	suble	r1, r1, r6
 800d552:	18b0      	addle	r0, r6, r2
 800d554:	18a4      	addle	r4, r4, r2
 800d556:	0049      	lsls	r1, r1, #1
 800d558:	3d01      	subs	r5, #1
 800d55a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d55e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d562:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d566:	d1f0      	bne.n	800d54a <__ieee754_sqrt+0x92>
 800d568:	462a      	mov	r2, r5
 800d56a:	f04f 0e20 	mov.w	lr, #32
 800d56e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d572:	4281      	cmp	r1, r0
 800d574:	eb06 0c05 	add.w	ip, r6, r5
 800d578:	dc02      	bgt.n	800d580 <__ieee754_sqrt+0xc8>
 800d57a:	d113      	bne.n	800d5a4 <__ieee754_sqrt+0xec>
 800d57c:	459c      	cmp	ip, r3
 800d57e:	d811      	bhi.n	800d5a4 <__ieee754_sqrt+0xec>
 800d580:	f1bc 0f00 	cmp.w	ip, #0
 800d584:	eb0c 0506 	add.w	r5, ip, r6
 800d588:	da43      	bge.n	800d612 <__ieee754_sqrt+0x15a>
 800d58a:	2d00      	cmp	r5, #0
 800d58c:	db41      	blt.n	800d612 <__ieee754_sqrt+0x15a>
 800d58e:	f100 0801 	add.w	r8, r0, #1
 800d592:	1a09      	subs	r1, r1, r0
 800d594:	459c      	cmp	ip, r3
 800d596:	bf88      	it	hi
 800d598:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800d59c:	eba3 030c 	sub.w	r3, r3, ip
 800d5a0:	4432      	add	r2, r6
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d5a8:	f1be 0e01 	subs.w	lr, lr, #1
 800d5ac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d5b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d5b8:	d1db      	bne.n	800d572 <__ieee754_sqrt+0xba>
 800d5ba:	430b      	orrs	r3, r1
 800d5bc:	d006      	beq.n	800d5cc <__ieee754_sqrt+0x114>
 800d5be:	1c50      	adds	r0, r2, #1
 800d5c0:	bf13      	iteet	ne
 800d5c2:	3201      	addne	r2, #1
 800d5c4:	3401      	addeq	r4, #1
 800d5c6:	4672      	moveq	r2, lr
 800d5c8:	f022 0201 	bicne.w	r2, r2, #1
 800d5cc:	1063      	asrs	r3, r4, #1
 800d5ce:	0852      	lsrs	r2, r2, #1
 800d5d0:	07e1      	lsls	r1, r4, #31
 800d5d2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d5d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d5da:	bf48      	it	mi
 800d5dc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d5e0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	e781      	b.n	800d4ec <__ieee754_sqrt+0x34>
 800d5e8:	0ad9      	lsrs	r1, r3, #11
 800d5ea:	3815      	subs	r0, #21
 800d5ec:	055b      	lsls	r3, r3, #21
 800d5ee:	2900      	cmp	r1, #0
 800d5f0:	d0fa      	beq.n	800d5e8 <__ieee754_sqrt+0x130>
 800d5f2:	02cd      	lsls	r5, r1, #11
 800d5f4:	d50a      	bpl.n	800d60c <__ieee754_sqrt+0x154>
 800d5f6:	f1c2 0420 	rsb	r4, r2, #32
 800d5fa:	fa23 f404 	lsr.w	r4, r3, r4
 800d5fe:	1e55      	subs	r5, r2, #1
 800d600:	4093      	lsls	r3, r2
 800d602:	4321      	orrs	r1, r4
 800d604:	1b42      	subs	r2, r0, r5
 800d606:	e78a      	b.n	800d51e <__ieee754_sqrt+0x66>
 800d608:	4610      	mov	r0, r2
 800d60a:	e7f0      	b.n	800d5ee <__ieee754_sqrt+0x136>
 800d60c:	0049      	lsls	r1, r1, #1
 800d60e:	3201      	adds	r2, #1
 800d610:	e7ef      	b.n	800d5f2 <__ieee754_sqrt+0x13a>
 800d612:	4680      	mov	r8, r0
 800d614:	e7bd      	b.n	800d592 <__ieee754_sqrt+0xda>
 800d616:	bf00      	nop
 800d618:	7ff00000 	.word	0x7ff00000

0800d61c <__ieee754_powf>:
 800d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d620:	ee10 4a90 	vmov	r4, s1
 800d624:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800d628:	ed2d 8b02 	vpush	{d8}
 800d62c:	ee10 6a10 	vmov	r6, s0
 800d630:	eeb0 8a40 	vmov.f32	s16, s0
 800d634:	eef0 8a60 	vmov.f32	s17, s1
 800d638:	d10c      	bne.n	800d654 <__ieee754_powf+0x38>
 800d63a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d63e:	0076      	lsls	r6, r6, #1
 800d640:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d644:	f240 8296 	bls.w	800db74 <__ieee754_powf+0x558>
 800d648:	ee38 0a28 	vadd.f32	s0, s16, s17
 800d64c:	ecbd 8b02 	vpop	{d8}
 800d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d654:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d658:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d65c:	dcf4      	bgt.n	800d648 <__ieee754_powf+0x2c>
 800d65e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800d662:	dd08      	ble.n	800d676 <__ieee754_powf+0x5a>
 800d664:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800d668:	d1ee      	bne.n	800d648 <__ieee754_powf+0x2c>
 800d66a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800d66e:	0064      	lsls	r4, r4, #1
 800d670:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800d674:	e7e6      	b.n	800d644 <__ieee754_powf+0x28>
 800d676:	2e00      	cmp	r6, #0
 800d678:	da20      	bge.n	800d6bc <__ieee754_powf+0xa0>
 800d67a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800d67e:	da2d      	bge.n	800d6dc <__ieee754_powf+0xc0>
 800d680:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d684:	f2c0 827f 	blt.w	800db86 <__ieee754_powf+0x56a>
 800d688:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800d68c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d690:	fa48 f703 	asr.w	r7, r8, r3
 800d694:	fa07 f303 	lsl.w	r3, r7, r3
 800d698:	4543      	cmp	r3, r8
 800d69a:	f040 8274 	bne.w	800db86 <__ieee754_powf+0x56a>
 800d69e:	f007 0701 	and.w	r7, r7, #1
 800d6a2:	f1c7 0702 	rsb	r7, r7, #2
 800d6a6:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d6aa:	d11f      	bne.n	800d6ec <__ieee754_powf+0xd0>
 800d6ac:	2c00      	cmp	r4, #0
 800d6ae:	f280 8267 	bge.w	800db80 <__ieee754_powf+0x564>
 800d6b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d6b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d6ba:	e7c7      	b.n	800d64c <__ieee754_powf+0x30>
 800d6bc:	2700      	movs	r7, #0
 800d6be:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800d6c2:	d1f0      	bne.n	800d6a6 <__ieee754_powf+0x8a>
 800d6c4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800d6c8:	f000 8254 	beq.w	800db74 <__ieee754_powf+0x558>
 800d6cc:	dd08      	ble.n	800d6e0 <__ieee754_powf+0xc4>
 800d6ce:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800d9d8 <__ieee754_powf+0x3bc>
 800d6d2:	2c00      	cmp	r4, #0
 800d6d4:	bfa8      	it	ge
 800d6d6:	eeb0 0a68 	vmovge.f32	s0, s17
 800d6da:	e7b7      	b.n	800d64c <__ieee754_powf+0x30>
 800d6dc:	2702      	movs	r7, #2
 800d6de:	e7ee      	b.n	800d6be <__ieee754_powf+0xa2>
 800d6e0:	2c00      	cmp	r4, #0
 800d6e2:	f280 824a 	bge.w	800db7a <__ieee754_powf+0x55e>
 800d6e6:	eeb1 0a68 	vneg.f32	s0, s17
 800d6ea:	e7af      	b.n	800d64c <__ieee754_powf+0x30>
 800d6ec:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d6f0:	d102      	bne.n	800d6f8 <__ieee754_powf+0xdc>
 800d6f2:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d6f6:	e7a9      	b.n	800d64c <__ieee754_powf+0x30>
 800d6f8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d6fc:	eeb0 0a48 	vmov.f32	s0, s16
 800d700:	d107      	bne.n	800d712 <__ieee754_powf+0xf6>
 800d702:	2e00      	cmp	r6, #0
 800d704:	db05      	blt.n	800d712 <__ieee754_powf+0xf6>
 800d706:	ecbd 8b02 	vpop	{d8}
 800d70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d70e:	f000 ba53 	b.w	800dbb8 <__ieee754_sqrtf>
 800d712:	f001 f89f 	bl	800e854 <fabsf>
 800d716:	b125      	cbz	r5, 800d722 <__ieee754_powf+0x106>
 800d718:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800d71c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d720:	d116      	bne.n	800d750 <__ieee754_powf+0x134>
 800d722:	2c00      	cmp	r4, #0
 800d724:	bfbc      	itt	lt
 800d726:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d72a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d72e:	2e00      	cmp	r6, #0
 800d730:	da8c      	bge.n	800d64c <__ieee754_powf+0x30>
 800d732:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800d736:	ea55 0307 	orrs.w	r3, r5, r7
 800d73a:	d104      	bne.n	800d746 <__ieee754_powf+0x12a>
 800d73c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d740:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d744:	e782      	b.n	800d64c <__ieee754_powf+0x30>
 800d746:	2f01      	cmp	r7, #1
 800d748:	d180      	bne.n	800d64c <__ieee754_powf+0x30>
 800d74a:	eeb1 0a40 	vneg.f32	s0, s0
 800d74e:	e77d      	b.n	800d64c <__ieee754_powf+0x30>
 800d750:	0ff0      	lsrs	r0, r6, #31
 800d752:	3801      	subs	r0, #1
 800d754:	ea57 0300 	orrs.w	r3, r7, r0
 800d758:	d104      	bne.n	800d764 <__ieee754_powf+0x148>
 800d75a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d75e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d762:	e773      	b.n	800d64c <__ieee754_powf+0x30>
 800d764:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800d768:	dd74      	ble.n	800d854 <__ieee754_powf+0x238>
 800d76a:	4b9c      	ldr	r3, [pc, #624]	; (800d9dc <__ieee754_powf+0x3c0>)
 800d76c:	429d      	cmp	r5, r3
 800d76e:	dc08      	bgt.n	800d782 <__ieee754_powf+0x166>
 800d770:	2c00      	cmp	r4, #0
 800d772:	da0b      	bge.n	800d78c <__ieee754_powf+0x170>
 800d774:	2000      	movs	r0, #0
 800d776:	ecbd 8b02 	vpop	{d8}
 800d77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d77e:	f000 bf41 	b.w	800e604 <__math_oflowf>
 800d782:	4b97      	ldr	r3, [pc, #604]	; (800d9e0 <__ieee754_powf+0x3c4>)
 800d784:	429d      	cmp	r5, r3
 800d786:	dd08      	ble.n	800d79a <__ieee754_powf+0x17e>
 800d788:	2c00      	cmp	r4, #0
 800d78a:	dcf3      	bgt.n	800d774 <__ieee754_powf+0x158>
 800d78c:	2000      	movs	r0, #0
 800d78e:	ecbd 8b02 	vpop	{d8}
 800d792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d796:	f000 bf2f 	b.w	800e5f8 <__math_uflowf>
 800d79a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d79e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d7a2:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d9e4 <__ieee754_powf+0x3c8>
 800d7a6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d7aa:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d7ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d7b2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d7b6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7be:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d9e8 <__ieee754_powf+0x3cc>
 800d7c2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d7c6:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800d9ec <__ieee754_powf+0x3d0>
 800d7ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d7ce:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d9f0 <__ieee754_powf+0x3d4>
 800d7d2:	eef0 6a67 	vmov.f32	s13, s15
 800d7d6:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d7da:	ee16 3a90 	vmov	r3, s13
 800d7de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d7e2:	f023 030f 	bic.w	r3, r3, #15
 800d7e6:	ee00 3a90 	vmov	s1, r3
 800d7ea:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d7ee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d7f2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800d7f6:	f024 040f 	bic.w	r4, r4, #15
 800d7fa:	ee07 4a10 	vmov	s14, r4
 800d7fe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d802:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d806:	ee07 3a90 	vmov	s15, r3
 800d80a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d80e:	3f01      	subs	r7, #1
 800d810:	ea57 0200 	orrs.w	r2, r7, r0
 800d814:	ee07 4a10 	vmov	s14, r4
 800d818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d81c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d820:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d824:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d828:	ee17 4a10 	vmov	r4, s14
 800d82c:	bf08      	it	eq
 800d82e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d832:	2c00      	cmp	r4, #0
 800d834:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d838:	f340 817e 	ble.w	800db38 <__ieee754_powf+0x51c>
 800d83c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d840:	f340 80f8 	ble.w	800da34 <__ieee754_powf+0x418>
 800d844:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d84c:	bf4c      	ite	mi
 800d84e:	2001      	movmi	r0, #1
 800d850:	2000      	movpl	r0, #0
 800d852:	e790      	b.n	800d776 <__ieee754_powf+0x15a>
 800d854:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800d858:	bf01      	itttt	eq
 800d85a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800d9f4 <__ieee754_powf+0x3d8>
 800d85e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d862:	f06f 0217 	mvneq.w	r2, #23
 800d866:	ee17 5a90 	vmoveq	r5, s15
 800d86a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d86e:	bf18      	it	ne
 800d870:	2200      	movne	r2, #0
 800d872:	3b7f      	subs	r3, #127	; 0x7f
 800d874:	4413      	add	r3, r2
 800d876:	4a60      	ldr	r2, [pc, #384]	; (800d9f8 <__ieee754_powf+0x3dc>)
 800d878:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800d87c:	4295      	cmp	r5, r2
 800d87e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800d882:	dd06      	ble.n	800d892 <__ieee754_powf+0x276>
 800d884:	4a5d      	ldr	r2, [pc, #372]	; (800d9fc <__ieee754_powf+0x3e0>)
 800d886:	4295      	cmp	r5, r2
 800d888:	f340 80a4 	ble.w	800d9d4 <__ieee754_powf+0x3b8>
 800d88c:	3301      	adds	r3, #1
 800d88e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d892:	2500      	movs	r5, #0
 800d894:	4a5a      	ldr	r2, [pc, #360]	; (800da00 <__ieee754_powf+0x3e4>)
 800d896:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800d89a:	ee07 1a90 	vmov	s15, r1
 800d89e:	ed92 7a00 	vldr	s14, [r2]
 800d8a2:	4a58      	ldr	r2, [pc, #352]	; (800da04 <__ieee754_powf+0x3e8>)
 800d8a4:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d8a8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d8ac:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d8b0:	1049      	asrs	r1, r1, #1
 800d8b2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d8b6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d8ba:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800d8be:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d8c2:	ee06 1a10 	vmov	s12, r1
 800d8c6:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d8ca:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d8ce:	ee14 6a90 	vmov	r6, s9
 800d8d2:	4016      	ands	r6, r2
 800d8d4:	ee05 6a90 	vmov	s11, r6
 800d8d8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d8dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8e0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800da08 <__ieee754_powf+0x3ec>
 800d8e4:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d8e8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d8ec:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d8f0:	eddf 6a46 	vldr	s13, [pc, #280]	; 800da0c <__ieee754_powf+0x3f0>
 800d8f4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d8f8:	eddf 6a45 	vldr	s13, [pc, #276]	; 800da10 <__ieee754_powf+0x3f4>
 800d8fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d900:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d9e4 <__ieee754_powf+0x3c8>
 800d904:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d908:	eddf 6a42 	vldr	s13, [pc, #264]	; 800da14 <__ieee754_powf+0x3f8>
 800d90c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d910:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800da18 <__ieee754_powf+0x3fc>
 800d914:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d918:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d91c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d920:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d924:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d928:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d92c:	eef0 7a45 	vmov.f32	s15, s10
 800d930:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d938:	ee17 1a90 	vmov	r1, s15
 800d93c:	4011      	ands	r1, r2
 800d93e:	ee07 1a90 	vmov	s15, r1
 800d942:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d946:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d94a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d94e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d952:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d956:	eeb0 6a47 	vmov.f32	s12, s14
 800d95a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d95e:	ee16 1a10 	vmov	r1, s12
 800d962:	4011      	ands	r1, r2
 800d964:	ee06 1a90 	vmov	s13, r1
 800d968:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d96c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800da1c <__ieee754_powf+0x400>
 800d970:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800da20 <__ieee754_powf+0x404>
 800d974:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d978:	ee06 1a10 	vmov	s12, r1
 800d97c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d980:	eddf 7a28 	vldr	s15, [pc, #160]	; 800da24 <__ieee754_powf+0x408>
 800d984:	4928      	ldr	r1, [pc, #160]	; (800da28 <__ieee754_powf+0x40c>)
 800d986:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d98a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800d98e:	edd1 7a00 	vldr	s15, [r1]
 800d992:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d996:	ee07 3a90 	vmov	s15, r3
 800d99a:	4b24      	ldr	r3, [pc, #144]	; (800da2c <__ieee754_powf+0x410>)
 800d99c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d9a0:	eef0 7a47 	vmov.f32	s15, s14
 800d9a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d9a8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d9ac:	edd5 0a00 	vldr	s1, [r5]
 800d9b0:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d9b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b8:	ee17 3a90 	vmov	r3, s15
 800d9bc:	4013      	ands	r3, r2
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d9c6:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d9ca:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d9ce:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d9d2:	e70e      	b.n	800d7f2 <__ieee754_powf+0x1d6>
 800d9d4:	2501      	movs	r5, #1
 800d9d6:	e75d      	b.n	800d894 <__ieee754_powf+0x278>
 800d9d8:	00000000 	.word	0x00000000
 800d9dc:	3f7ffff3 	.word	0x3f7ffff3
 800d9e0:	3f800007 	.word	0x3f800007
 800d9e4:	3eaaaaab 	.word	0x3eaaaaab
 800d9e8:	3fb8aa3b 	.word	0x3fb8aa3b
 800d9ec:	36eca570 	.word	0x36eca570
 800d9f0:	3fb8aa00 	.word	0x3fb8aa00
 800d9f4:	4b800000 	.word	0x4b800000
 800d9f8:	001cc471 	.word	0x001cc471
 800d9fc:	005db3d6 	.word	0x005db3d6
 800da00:	0800eba0 	.word	0x0800eba0
 800da04:	fffff000 	.word	0xfffff000
 800da08:	3e6c3255 	.word	0x3e6c3255
 800da0c:	3e53f142 	.word	0x3e53f142
 800da10:	3e8ba305 	.word	0x3e8ba305
 800da14:	3edb6db7 	.word	0x3edb6db7
 800da18:	3f19999a 	.word	0x3f19999a
 800da1c:	3f76384f 	.word	0x3f76384f
 800da20:	3f763800 	.word	0x3f763800
 800da24:	369dc3a0 	.word	0x369dc3a0
 800da28:	0800ebb0 	.word	0x0800ebb0
 800da2c:	0800eba8 	.word	0x0800eba8
 800da30:	3338aa3c 	.word	0x3338aa3c
 800da34:	f040 8095 	bne.w	800db62 <__ieee754_powf+0x546>
 800da38:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800da30 <__ieee754_powf+0x414>
 800da3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da40:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800da44:	eef4 6ac7 	vcmpe.f32	s13, s14
 800da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4c:	f73f aefa 	bgt.w	800d844 <__ieee754_powf+0x228>
 800da50:	15db      	asrs	r3, r3, #23
 800da52:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800da56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800da5a:	4103      	asrs	r3, r0
 800da5c:	4423      	add	r3, r4
 800da5e:	494b      	ldr	r1, [pc, #300]	; (800db8c <__ieee754_powf+0x570>)
 800da60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800da64:	3a7f      	subs	r2, #127	; 0x7f
 800da66:	4111      	asrs	r1, r2
 800da68:	ea23 0101 	bic.w	r1, r3, r1
 800da6c:	ee07 1a10 	vmov	s14, r1
 800da70:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800da74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800da78:	f1c2 0217 	rsb	r2, r2, #23
 800da7c:	4110      	asrs	r0, r2
 800da7e:	2c00      	cmp	r4, #0
 800da80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da84:	bfb8      	it	lt
 800da86:	4240      	neglt	r0, r0
 800da88:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800da8c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800db90 <__ieee754_powf+0x574>
 800da90:	eddf 6a40 	vldr	s13, [pc, #256]	; 800db94 <__ieee754_powf+0x578>
 800da94:	ee17 3a10 	vmov	r3, s14
 800da98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800da9c:	f023 030f 	bic.w	r3, r3, #15
 800daa0:	ee07 3a10 	vmov	s14, r3
 800daa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daa8:	ee27 0a00 	vmul.f32	s0, s14, s0
 800daac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800dab0:	eddf 7a39 	vldr	s15, [pc, #228]	; 800db98 <__ieee754_powf+0x57c>
 800dab4:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800dab8:	eef0 7a40 	vmov.f32	s15, s0
 800dabc:	eee7 7a26 	vfma.f32	s15, s14, s13
 800dac0:	eeb0 6a67 	vmov.f32	s12, s15
 800dac4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800dac8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dacc:	ee30 0a46 	vsub.f32	s0, s0, s12
 800dad0:	eddf 6a32 	vldr	s13, [pc, #200]	; 800db9c <__ieee754_powf+0x580>
 800dad4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800dba0 <__ieee754_powf+0x584>
 800dad8:	eee7 6a06 	vfma.f32	s13, s14, s12
 800dadc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800dba4 <__ieee754_powf+0x588>
 800dae0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800dae4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800dba8 <__ieee754_powf+0x58c>
 800dae8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800daec:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800dbac <__ieee754_powf+0x590>
 800daf0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800daf4:	eef0 6a67 	vmov.f32	s13, s15
 800daf8:	eee6 6a47 	vfms.f32	s13, s12, s14
 800dafc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800db00:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800db04:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800db08:	eea7 0a80 	vfma.f32	s0, s15, s0
 800db0c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800db10:	ee37 0a40 	vsub.f32	s0, s14, s0
 800db14:	ee70 7a67 	vsub.f32	s15, s0, s15
 800db18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800db1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db20:	ee10 3a10 	vmov	r3, s0
 800db24:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800db28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db2c:	da1f      	bge.n	800db6e <__ieee754_powf+0x552>
 800db2e:	f000 fea5 	bl	800e87c <scalbnf>
 800db32:	ee20 0a08 	vmul.f32	s0, s0, s16
 800db36:	e589      	b.n	800d64c <__ieee754_powf+0x30>
 800db38:	4a1d      	ldr	r2, [pc, #116]	; (800dbb0 <__ieee754_powf+0x594>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	dd07      	ble.n	800db4e <__ieee754_powf+0x532>
 800db3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800db42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db46:	bf4c      	ite	mi
 800db48:	2001      	movmi	r0, #1
 800db4a:	2000      	movpl	r0, #0
 800db4c:	e61f      	b.n	800d78e <__ieee754_powf+0x172>
 800db4e:	d108      	bne.n	800db62 <__ieee754_powf+0x546>
 800db50:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db54:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800db58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5c:	f6ff af78 	blt.w	800da50 <__ieee754_powf+0x434>
 800db60:	e7ed      	b.n	800db3e <__ieee754_powf+0x522>
 800db62:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800db66:	f73f af73 	bgt.w	800da50 <__ieee754_powf+0x434>
 800db6a:	2000      	movs	r0, #0
 800db6c:	e78c      	b.n	800da88 <__ieee754_powf+0x46c>
 800db6e:	ee00 3a10 	vmov	s0, r3
 800db72:	e7de      	b.n	800db32 <__ieee754_powf+0x516>
 800db74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800db78:	e568      	b.n	800d64c <__ieee754_powf+0x30>
 800db7a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800dbb4 <__ieee754_powf+0x598>
 800db7e:	e565      	b.n	800d64c <__ieee754_powf+0x30>
 800db80:	eeb0 0a48 	vmov.f32	s0, s16
 800db84:	e562      	b.n	800d64c <__ieee754_powf+0x30>
 800db86:	2700      	movs	r7, #0
 800db88:	e58d      	b.n	800d6a6 <__ieee754_powf+0x8a>
 800db8a:	bf00      	nop
 800db8c:	007fffff 	.word	0x007fffff
 800db90:	35bfbe8c 	.word	0x35bfbe8c
 800db94:	3f317200 	.word	0x3f317200
 800db98:	3f317218 	.word	0x3f317218
 800db9c:	b5ddea0e 	.word	0xb5ddea0e
 800dba0:	3331bb4c 	.word	0x3331bb4c
 800dba4:	388ab355 	.word	0x388ab355
 800dba8:	bb360b61 	.word	0xbb360b61
 800dbac:	3e2aaaab 	.word	0x3e2aaaab
 800dbb0:	43160000 	.word	0x43160000
 800dbb4:	00000000 	.word	0x00000000

0800dbb8 <__ieee754_sqrtf>:
 800dbb8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dbbc:	4770      	bx	lr
	...

0800dbc0 <__kernel_cos>:
 800dbc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	ec57 6b10 	vmov	r6, r7, d0
 800dbc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dbcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dbd0:	ed8d 1b00 	vstr	d1, [sp]
 800dbd4:	da07      	bge.n	800dbe6 <__kernel_cos+0x26>
 800dbd6:	ee10 0a10 	vmov	r0, s0
 800dbda:	4639      	mov	r1, r7
 800dbdc:	f7f2 ffbc 	bl	8000b58 <__aeabi_d2iz>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	f000 8088 	beq.w	800dcf6 <__kernel_cos+0x136>
 800dbe6:	4632      	mov	r2, r6
 800dbe8:	463b      	mov	r3, r7
 800dbea:	4630      	mov	r0, r6
 800dbec:	4639      	mov	r1, r7
 800dbee:	f7f2 fd03 	bl	80005f8 <__aeabi_dmul>
 800dbf2:	4b51      	ldr	r3, [pc, #324]	; (800dd38 <__kernel_cos+0x178>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	f7f2 fcfd 	bl	80005f8 <__aeabi_dmul>
 800dbfe:	a340      	add	r3, pc, #256	; (adr r3, 800dd00 <__kernel_cos+0x140>)
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	4682      	mov	sl, r0
 800dc06:	468b      	mov	fp, r1
 800dc08:	4620      	mov	r0, r4
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	f7f2 fcf4 	bl	80005f8 <__aeabi_dmul>
 800dc10:	a33d      	add	r3, pc, #244	; (adr r3, 800dd08 <__kernel_cos+0x148>)
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	f7f2 fb39 	bl	800028c <__adddf3>
 800dc1a:	4622      	mov	r2, r4
 800dc1c:	462b      	mov	r3, r5
 800dc1e:	f7f2 fceb 	bl	80005f8 <__aeabi_dmul>
 800dc22:	a33b      	add	r3, pc, #236	; (adr r3, 800dd10 <__kernel_cos+0x150>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	f7f2 fb2e 	bl	8000288 <__aeabi_dsub>
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	462b      	mov	r3, r5
 800dc30:	f7f2 fce2 	bl	80005f8 <__aeabi_dmul>
 800dc34:	a338      	add	r3, pc, #224	; (adr r3, 800dd18 <__kernel_cos+0x158>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	f7f2 fb27 	bl	800028c <__adddf3>
 800dc3e:	4622      	mov	r2, r4
 800dc40:	462b      	mov	r3, r5
 800dc42:	f7f2 fcd9 	bl	80005f8 <__aeabi_dmul>
 800dc46:	a336      	add	r3, pc, #216	; (adr r3, 800dd20 <__kernel_cos+0x160>)
 800dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4c:	f7f2 fb1c 	bl	8000288 <__aeabi_dsub>
 800dc50:	4622      	mov	r2, r4
 800dc52:	462b      	mov	r3, r5
 800dc54:	f7f2 fcd0 	bl	80005f8 <__aeabi_dmul>
 800dc58:	a333      	add	r3, pc, #204	; (adr r3, 800dd28 <__kernel_cos+0x168>)
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f7f2 fb15 	bl	800028c <__adddf3>
 800dc62:	4622      	mov	r2, r4
 800dc64:	462b      	mov	r3, r5
 800dc66:	f7f2 fcc7 	bl	80005f8 <__aeabi_dmul>
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	f7f2 fcc3 	bl	80005f8 <__aeabi_dmul>
 800dc72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc76:	4604      	mov	r4, r0
 800dc78:	460d      	mov	r5, r1
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	4639      	mov	r1, r7
 800dc7e:	f7f2 fcbb 	bl	80005f8 <__aeabi_dmul>
 800dc82:	460b      	mov	r3, r1
 800dc84:	4602      	mov	r2, r0
 800dc86:	4629      	mov	r1, r5
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f7f2 fafd 	bl	8000288 <__aeabi_dsub>
 800dc8e:	4b2b      	ldr	r3, [pc, #172]	; (800dd3c <__kernel_cos+0x17c>)
 800dc90:	4598      	cmp	r8, r3
 800dc92:	4606      	mov	r6, r0
 800dc94:	460f      	mov	r7, r1
 800dc96:	dc10      	bgt.n	800dcba <__kernel_cos+0xfa>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4650      	mov	r0, sl
 800dc9e:	4659      	mov	r1, fp
 800dca0:	f7f2 faf2 	bl	8000288 <__aeabi_dsub>
 800dca4:	460b      	mov	r3, r1
 800dca6:	4926      	ldr	r1, [pc, #152]	; (800dd40 <__kernel_cos+0x180>)
 800dca8:	4602      	mov	r2, r0
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f7f2 faec 	bl	8000288 <__aeabi_dsub>
 800dcb0:	ec41 0b10 	vmov	d0, r0, r1
 800dcb4:	b003      	add	sp, #12
 800dcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcba:	4b22      	ldr	r3, [pc, #136]	; (800dd44 <__kernel_cos+0x184>)
 800dcbc:	4920      	ldr	r1, [pc, #128]	; (800dd40 <__kernel_cos+0x180>)
 800dcbe:	4598      	cmp	r8, r3
 800dcc0:	bfcc      	ite	gt
 800dcc2:	4d21      	ldrgt	r5, [pc, #132]	; (800dd48 <__kernel_cos+0x188>)
 800dcc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dcc8:	2400      	movs	r4, #0
 800dcca:	4622      	mov	r2, r4
 800dccc:	462b      	mov	r3, r5
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f7f2 fada 	bl	8000288 <__aeabi_dsub>
 800dcd4:	4622      	mov	r2, r4
 800dcd6:	4680      	mov	r8, r0
 800dcd8:	4689      	mov	r9, r1
 800dcda:	462b      	mov	r3, r5
 800dcdc:	4650      	mov	r0, sl
 800dcde:	4659      	mov	r1, fp
 800dce0:	f7f2 fad2 	bl	8000288 <__aeabi_dsub>
 800dce4:	4632      	mov	r2, r6
 800dce6:	463b      	mov	r3, r7
 800dce8:	f7f2 face 	bl	8000288 <__aeabi_dsub>
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	e7da      	b.n	800dcac <__kernel_cos+0xec>
 800dcf6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dd30 <__kernel_cos+0x170>
 800dcfa:	e7db      	b.n	800dcb4 <__kernel_cos+0xf4>
 800dcfc:	f3af 8000 	nop.w
 800dd00:	be8838d4 	.word	0xbe8838d4
 800dd04:	bda8fae9 	.word	0xbda8fae9
 800dd08:	bdb4b1c4 	.word	0xbdb4b1c4
 800dd0c:	3e21ee9e 	.word	0x3e21ee9e
 800dd10:	809c52ad 	.word	0x809c52ad
 800dd14:	3e927e4f 	.word	0x3e927e4f
 800dd18:	19cb1590 	.word	0x19cb1590
 800dd1c:	3efa01a0 	.word	0x3efa01a0
 800dd20:	16c15177 	.word	0x16c15177
 800dd24:	3f56c16c 	.word	0x3f56c16c
 800dd28:	5555554c 	.word	0x5555554c
 800dd2c:	3fa55555 	.word	0x3fa55555
 800dd30:	00000000 	.word	0x00000000
 800dd34:	3ff00000 	.word	0x3ff00000
 800dd38:	3fe00000 	.word	0x3fe00000
 800dd3c:	3fd33332 	.word	0x3fd33332
 800dd40:	3ff00000 	.word	0x3ff00000
 800dd44:	3fe90000 	.word	0x3fe90000
 800dd48:	3fd20000 	.word	0x3fd20000
 800dd4c:	00000000 	.word	0x00000000

0800dd50 <__kernel_rem_pio2>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	ed2d 8b02 	vpush	{d8}
 800dd58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800dd5c:	f112 0f14 	cmn.w	r2, #20
 800dd60:	9308      	str	r3, [sp, #32]
 800dd62:	9101      	str	r1, [sp, #4]
 800dd64:	4bc4      	ldr	r3, [pc, #784]	; (800e078 <__kernel_rem_pio2+0x328>)
 800dd66:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800dd68:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd6e:	9302      	str	r3, [sp, #8]
 800dd70:	9b08      	ldr	r3, [sp, #32]
 800dd72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800dd76:	bfa8      	it	ge
 800dd78:	1ed4      	subge	r4, r2, #3
 800dd7a:	9306      	str	r3, [sp, #24]
 800dd7c:	bfb2      	itee	lt
 800dd7e:	2400      	movlt	r4, #0
 800dd80:	2318      	movge	r3, #24
 800dd82:	fb94 f4f3 	sdivge	r4, r4, r3
 800dd86:	f06f 0317 	mvn.w	r3, #23
 800dd8a:	fb04 3303 	mla	r3, r4, r3, r3
 800dd8e:	eb03 0a02 	add.w	sl, r3, r2
 800dd92:	9b02      	ldr	r3, [sp, #8]
 800dd94:	9a06      	ldr	r2, [sp, #24]
 800dd96:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e068 <__kernel_rem_pio2+0x318>
 800dd9a:	eb03 0802 	add.w	r8, r3, r2
 800dd9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dda0:	1aa7      	subs	r7, r4, r2
 800dda2:	ae22      	add	r6, sp, #136	; 0x88
 800dda4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dda8:	2500      	movs	r5, #0
 800ddaa:	4545      	cmp	r5, r8
 800ddac:	dd13      	ble.n	800ddd6 <__kernel_rem_pio2+0x86>
 800ddae:	9b08      	ldr	r3, [sp, #32]
 800ddb0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e068 <__kernel_rem_pio2+0x318>
 800ddb4:	aa22      	add	r2, sp, #136	; 0x88
 800ddb6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ddba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ddbe:	f04f 0800 	mov.w	r8, #0
 800ddc2:	9b02      	ldr	r3, [sp, #8]
 800ddc4:	4598      	cmp	r8, r3
 800ddc6:	dc2f      	bgt.n	800de28 <__kernel_rem_pio2+0xd8>
 800ddc8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ddcc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ddd0:	462f      	mov	r7, r5
 800ddd2:	2600      	movs	r6, #0
 800ddd4:	e01b      	b.n	800de0e <__kernel_rem_pio2+0xbe>
 800ddd6:	42ef      	cmn	r7, r5
 800ddd8:	d407      	bmi.n	800ddea <__kernel_rem_pio2+0x9a>
 800ddda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ddde:	f7f2 fba1 	bl	8000524 <__aeabi_i2d>
 800dde2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dde6:	3501      	adds	r5, #1
 800dde8:	e7df      	b.n	800ddaa <__kernel_rem_pio2+0x5a>
 800ddea:	ec51 0b18 	vmov	r0, r1, d8
 800ddee:	e7f8      	b.n	800dde2 <__kernel_rem_pio2+0x92>
 800ddf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ddf8:	f7f2 fbfe 	bl	80005f8 <__aeabi_dmul>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	460b      	mov	r3, r1
 800de00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de04:	f7f2 fa42 	bl	800028c <__adddf3>
 800de08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de0c:	3601      	adds	r6, #1
 800de0e:	9b06      	ldr	r3, [sp, #24]
 800de10:	429e      	cmp	r6, r3
 800de12:	f1a7 0708 	sub.w	r7, r7, #8
 800de16:	ddeb      	ble.n	800ddf0 <__kernel_rem_pio2+0xa0>
 800de18:	ed9d 7b04 	vldr	d7, [sp, #16]
 800de1c:	f108 0801 	add.w	r8, r8, #1
 800de20:	ecab 7b02 	vstmia	fp!, {d7}
 800de24:	3508      	adds	r5, #8
 800de26:	e7cc      	b.n	800ddc2 <__kernel_rem_pio2+0x72>
 800de28:	9b02      	ldr	r3, [sp, #8]
 800de2a:	aa0e      	add	r2, sp, #56	; 0x38
 800de2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de30:	930d      	str	r3, [sp, #52]	; 0x34
 800de32:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800de34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800de38:	9c02      	ldr	r4, [sp, #8]
 800de3a:	930c      	str	r3, [sp, #48]	; 0x30
 800de3c:	00e3      	lsls	r3, r4, #3
 800de3e:	930a      	str	r3, [sp, #40]	; 0x28
 800de40:	ab9a      	add	r3, sp, #616	; 0x268
 800de42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800de4a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800de4e:	ab72      	add	r3, sp, #456	; 0x1c8
 800de50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800de54:	46c3      	mov	fp, r8
 800de56:	46a1      	mov	r9, r4
 800de58:	f1b9 0f00 	cmp.w	r9, #0
 800de5c:	f1a5 0508 	sub.w	r5, r5, #8
 800de60:	dc77      	bgt.n	800df52 <__kernel_rem_pio2+0x202>
 800de62:	ec47 6b10 	vmov	d0, r6, r7
 800de66:	4650      	mov	r0, sl
 800de68:	f000 fc6e 	bl	800e748 <scalbn>
 800de6c:	ec57 6b10 	vmov	r6, r7, d0
 800de70:	2200      	movs	r2, #0
 800de72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800de76:	ee10 0a10 	vmov	r0, s0
 800de7a:	4639      	mov	r1, r7
 800de7c:	f7f2 fbbc 	bl	80005f8 <__aeabi_dmul>
 800de80:	ec41 0b10 	vmov	d0, r0, r1
 800de84:	f000 fbd8 	bl	800e638 <floor>
 800de88:	4b7c      	ldr	r3, [pc, #496]	; (800e07c <__kernel_rem_pio2+0x32c>)
 800de8a:	ec51 0b10 	vmov	r0, r1, d0
 800de8e:	2200      	movs	r2, #0
 800de90:	f7f2 fbb2 	bl	80005f8 <__aeabi_dmul>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4630      	mov	r0, r6
 800de9a:	4639      	mov	r1, r7
 800de9c:	f7f2 f9f4 	bl	8000288 <__aeabi_dsub>
 800dea0:	460f      	mov	r7, r1
 800dea2:	4606      	mov	r6, r0
 800dea4:	f7f2 fe58 	bl	8000b58 <__aeabi_d2iz>
 800dea8:	9004      	str	r0, [sp, #16]
 800deaa:	f7f2 fb3b 	bl	8000524 <__aeabi_i2d>
 800deae:	4602      	mov	r2, r0
 800deb0:	460b      	mov	r3, r1
 800deb2:	4630      	mov	r0, r6
 800deb4:	4639      	mov	r1, r7
 800deb6:	f7f2 f9e7 	bl	8000288 <__aeabi_dsub>
 800deba:	f1ba 0f00 	cmp.w	sl, #0
 800debe:	4606      	mov	r6, r0
 800dec0:	460f      	mov	r7, r1
 800dec2:	dd6d      	ble.n	800dfa0 <__kernel_rem_pio2+0x250>
 800dec4:	1e62      	subs	r2, r4, #1
 800dec6:	ab0e      	add	r3, sp, #56	; 0x38
 800dec8:	9d04      	ldr	r5, [sp, #16]
 800deca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dece:	f1ca 0118 	rsb	r1, sl, #24
 800ded2:	fa40 f301 	asr.w	r3, r0, r1
 800ded6:	441d      	add	r5, r3
 800ded8:	408b      	lsls	r3, r1
 800deda:	1ac0      	subs	r0, r0, r3
 800dedc:	ab0e      	add	r3, sp, #56	; 0x38
 800dede:	9504      	str	r5, [sp, #16]
 800dee0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dee4:	f1ca 0317 	rsb	r3, sl, #23
 800dee8:	fa40 fb03 	asr.w	fp, r0, r3
 800deec:	f1bb 0f00 	cmp.w	fp, #0
 800def0:	dd65      	ble.n	800dfbe <__kernel_rem_pio2+0x26e>
 800def2:	9b04      	ldr	r3, [sp, #16]
 800def4:	2200      	movs	r2, #0
 800def6:	3301      	adds	r3, #1
 800def8:	9304      	str	r3, [sp, #16]
 800defa:	4615      	mov	r5, r2
 800defc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800df00:	4294      	cmp	r4, r2
 800df02:	f300 809c 	bgt.w	800e03e <__kernel_rem_pio2+0x2ee>
 800df06:	f1ba 0f00 	cmp.w	sl, #0
 800df0a:	dd07      	ble.n	800df1c <__kernel_rem_pio2+0x1cc>
 800df0c:	f1ba 0f01 	cmp.w	sl, #1
 800df10:	f000 80c0 	beq.w	800e094 <__kernel_rem_pio2+0x344>
 800df14:	f1ba 0f02 	cmp.w	sl, #2
 800df18:	f000 80c6 	beq.w	800e0a8 <__kernel_rem_pio2+0x358>
 800df1c:	f1bb 0f02 	cmp.w	fp, #2
 800df20:	d14d      	bne.n	800dfbe <__kernel_rem_pio2+0x26e>
 800df22:	4632      	mov	r2, r6
 800df24:	463b      	mov	r3, r7
 800df26:	4956      	ldr	r1, [pc, #344]	; (800e080 <__kernel_rem_pio2+0x330>)
 800df28:	2000      	movs	r0, #0
 800df2a:	f7f2 f9ad 	bl	8000288 <__aeabi_dsub>
 800df2e:	4606      	mov	r6, r0
 800df30:	460f      	mov	r7, r1
 800df32:	2d00      	cmp	r5, #0
 800df34:	d043      	beq.n	800dfbe <__kernel_rem_pio2+0x26e>
 800df36:	4650      	mov	r0, sl
 800df38:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e070 <__kernel_rem_pio2+0x320>
 800df3c:	f000 fc04 	bl	800e748 <scalbn>
 800df40:	4630      	mov	r0, r6
 800df42:	4639      	mov	r1, r7
 800df44:	ec53 2b10 	vmov	r2, r3, d0
 800df48:	f7f2 f99e 	bl	8000288 <__aeabi_dsub>
 800df4c:	4606      	mov	r6, r0
 800df4e:	460f      	mov	r7, r1
 800df50:	e035      	b.n	800dfbe <__kernel_rem_pio2+0x26e>
 800df52:	4b4c      	ldr	r3, [pc, #304]	; (800e084 <__kernel_rem_pio2+0x334>)
 800df54:	2200      	movs	r2, #0
 800df56:	4630      	mov	r0, r6
 800df58:	4639      	mov	r1, r7
 800df5a:	f7f2 fb4d 	bl	80005f8 <__aeabi_dmul>
 800df5e:	f7f2 fdfb 	bl	8000b58 <__aeabi_d2iz>
 800df62:	f7f2 fadf 	bl	8000524 <__aeabi_i2d>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	ec43 2b18 	vmov	d8, r2, r3
 800df6e:	4b46      	ldr	r3, [pc, #280]	; (800e088 <__kernel_rem_pio2+0x338>)
 800df70:	2200      	movs	r2, #0
 800df72:	f7f2 fb41 	bl	80005f8 <__aeabi_dmul>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	4630      	mov	r0, r6
 800df7c:	4639      	mov	r1, r7
 800df7e:	f7f2 f983 	bl	8000288 <__aeabi_dsub>
 800df82:	f7f2 fde9 	bl	8000b58 <__aeabi_d2iz>
 800df86:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df8a:	f84b 0b04 	str.w	r0, [fp], #4
 800df8e:	ec51 0b18 	vmov	r0, r1, d8
 800df92:	f7f2 f97b 	bl	800028c <__adddf3>
 800df96:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800df9a:	4606      	mov	r6, r0
 800df9c:	460f      	mov	r7, r1
 800df9e:	e75b      	b.n	800de58 <__kernel_rem_pio2+0x108>
 800dfa0:	d106      	bne.n	800dfb0 <__kernel_rem_pio2+0x260>
 800dfa2:	1e63      	subs	r3, r4, #1
 800dfa4:	aa0e      	add	r2, sp, #56	; 0x38
 800dfa6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dfaa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800dfae:	e79d      	b.n	800deec <__kernel_rem_pio2+0x19c>
 800dfb0:	4b36      	ldr	r3, [pc, #216]	; (800e08c <__kernel_rem_pio2+0x33c>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f7f2 fda6 	bl	8000b04 <__aeabi_dcmpge>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d13d      	bne.n	800e038 <__kernel_rem_pio2+0x2e8>
 800dfbc:	4683      	mov	fp, r0
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	f7f2 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f000 80c0 	beq.w	800e150 <__kernel_rem_pio2+0x400>
 800dfd0:	1e65      	subs	r5, r4, #1
 800dfd2:	462b      	mov	r3, r5
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	9902      	ldr	r1, [sp, #8]
 800dfd8:	428b      	cmp	r3, r1
 800dfda:	da6c      	bge.n	800e0b6 <__kernel_rem_pio2+0x366>
 800dfdc:	2a00      	cmp	r2, #0
 800dfde:	f000 8089 	beq.w	800e0f4 <__kernel_rem_pio2+0x3a4>
 800dfe2:	ab0e      	add	r3, sp, #56	; 0x38
 800dfe4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dfe8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f000 80ad 	beq.w	800e14c <__kernel_rem_pio2+0x3fc>
 800dff2:	4650      	mov	r0, sl
 800dff4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e070 <__kernel_rem_pio2+0x320>
 800dff8:	f000 fba6 	bl	800e748 <scalbn>
 800dffc:	ab9a      	add	r3, sp, #616	; 0x268
 800dffe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e002:	ec57 6b10 	vmov	r6, r7, d0
 800e006:	00ec      	lsls	r4, r5, #3
 800e008:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e00c:	46aa      	mov	sl, r5
 800e00e:	f1ba 0f00 	cmp.w	sl, #0
 800e012:	f280 80d6 	bge.w	800e1c2 <__kernel_rem_pio2+0x472>
 800e016:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e068 <__kernel_rem_pio2+0x318>
 800e01a:	462e      	mov	r6, r5
 800e01c:	2e00      	cmp	r6, #0
 800e01e:	f2c0 8104 	blt.w	800e22a <__kernel_rem_pio2+0x4da>
 800e022:	ab72      	add	r3, sp, #456	; 0x1c8
 800e024:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e028:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e090 <__kernel_rem_pio2+0x340>
 800e02c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e030:	f04f 0800 	mov.w	r8, #0
 800e034:	1baf      	subs	r7, r5, r6
 800e036:	e0ea      	b.n	800e20e <__kernel_rem_pio2+0x4be>
 800e038:	f04f 0b02 	mov.w	fp, #2
 800e03c:	e759      	b.n	800def2 <__kernel_rem_pio2+0x1a2>
 800e03e:	f8d8 3000 	ldr.w	r3, [r8]
 800e042:	b955      	cbnz	r5, 800e05a <__kernel_rem_pio2+0x30a>
 800e044:	b123      	cbz	r3, 800e050 <__kernel_rem_pio2+0x300>
 800e046:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e04a:	f8c8 3000 	str.w	r3, [r8]
 800e04e:	2301      	movs	r3, #1
 800e050:	3201      	adds	r2, #1
 800e052:	f108 0804 	add.w	r8, r8, #4
 800e056:	461d      	mov	r5, r3
 800e058:	e752      	b.n	800df00 <__kernel_rem_pio2+0x1b0>
 800e05a:	1acb      	subs	r3, r1, r3
 800e05c:	f8c8 3000 	str.w	r3, [r8]
 800e060:	462b      	mov	r3, r5
 800e062:	e7f5      	b.n	800e050 <__kernel_rem_pio2+0x300>
 800e064:	f3af 8000 	nop.w
	...
 800e074:	3ff00000 	.word	0x3ff00000
 800e078:	0800ebf8 	.word	0x0800ebf8
 800e07c:	40200000 	.word	0x40200000
 800e080:	3ff00000 	.word	0x3ff00000
 800e084:	3e700000 	.word	0x3e700000
 800e088:	41700000 	.word	0x41700000
 800e08c:	3fe00000 	.word	0x3fe00000
 800e090:	0800ebb8 	.word	0x0800ebb8
 800e094:	1e62      	subs	r2, r4, #1
 800e096:	ab0e      	add	r3, sp, #56	; 0x38
 800e098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e09c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e0a0:	a90e      	add	r1, sp, #56	; 0x38
 800e0a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e0a6:	e739      	b.n	800df1c <__kernel_rem_pio2+0x1cc>
 800e0a8:	1e62      	subs	r2, r4, #1
 800e0aa:	ab0e      	add	r3, sp, #56	; 0x38
 800e0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e0b4:	e7f4      	b.n	800e0a0 <__kernel_rem_pio2+0x350>
 800e0b6:	a90e      	add	r1, sp, #56	; 0x38
 800e0b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	e789      	b.n	800dfd6 <__kernel_rem_pio2+0x286>
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e0c8:	2900      	cmp	r1, #0
 800e0ca:	d0fa      	beq.n	800e0c2 <__kernel_rem_pio2+0x372>
 800e0cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0ce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e0d2:	446a      	add	r2, sp
 800e0d4:	3a98      	subs	r2, #152	; 0x98
 800e0d6:	920a      	str	r2, [sp, #40]	; 0x28
 800e0d8:	9a08      	ldr	r2, [sp, #32]
 800e0da:	18e3      	adds	r3, r4, r3
 800e0dc:	18a5      	adds	r5, r4, r2
 800e0de:	aa22      	add	r2, sp, #136	; 0x88
 800e0e0:	f104 0801 	add.w	r8, r4, #1
 800e0e4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	9b04      	ldr	r3, [sp, #16]
 800e0ec:	4543      	cmp	r3, r8
 800e0ee:	da04      	bge.n	800e0fa <__kernel_rem_pio2+0x3aa>
 800e0f0:	461c      	mov	r4, r3
 800e0f2:	e6a3      	b.n	800de3c <__kernel_rem_pio2+0xec>
 800e0f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e7e4      	b.n	800e0c4 <__kernel_rem_pio2+0x374>
 800e0fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e100:	f7f2 fa10 	bl	8000524 <__aeabi_i2d>
 800e104:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e10a:	46ab      	mov	fp, r5
 800e10c:	461c      	mov	r4, r3
 800e10e:	f04f 0900 	mov.w	r9, #0
 800e112:	2600      	movs	r6, #0
 800e114:	2700      	movs	r7, #0
 800e116:	9b06      	ldr	r3, [sp, #24]
 800e118:	4599      	cmp	r9, r3
 800e11a:	dd06      	ble.n	800e12a <__kernel_rem_pio2+0x3da>
 800e11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e11e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e122:	f108 0801 	add.w	r8, r8, #1
 800e126:	930a      	str	r3, [sp, #40]	; 0x28
 800e128:	e7df      	b.n	800e0ea <__kernel_rem_pio2+0x39a>
 800e12a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e12e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e132:	f7f2 fa61 	bl	80005f8 <__aeabi_dmul>
 800e136:	4602      	mov	r2, r0
 800e138:	460b      	mov	r3, r1
 800e13a:	4630      	mov	r0, r6
 800e13c:	4639      	mov	r1, r7
 800e13e:	f7f2 f8a5 	bl	800028c <__adddf3>
 800e142:	f109 0901 	add.w	r9, r9, #1
 800e146:	4606      	mov	r6, r0
 800e148:	460f      	mov	r7, r1
 800e14a:	e7e4      	b.n	800e116 <__kernel_rem_pio2+0x3c6>
 800e14c:	3d01      	subs	r5, #1
 800e14e:	e748      	b.n	800dfe2 <__kernel_rem_pio2+0x292>
 800e150:	ec47 6b10 	vmov	d0, r6, r7
 800e154:	f1ca 0000 	rsb	r0, sl, #0
 800e158:	f000 faf6 	bl	800e748 <scalbn>
 800e15c:	ec57 6b10 	vmov	r6, r7, d0
 800e160:	4ba0      	ldr	r3, [pc, #640]	; (800e3e4 <__kernel_rem_pio2+0x694>)
 800e162:	ee10 0a10 	vmov	r0, s0
 800e166:	2200      	movs	r2, #0
 800e168:	4639      	mov	r1, r7
 800e16a:	f7f2 fccb 	bl	8000b04 <__aeabi_dcmpge>
 800e16e:	b1f8      	cbz	r0, 800e1b0 <__kernel_rem_pio2+0x460>
 800e170:	4b9d      	ldr	r3, [pc, #628]	; (800e3e8 <__kernel_rem_pio2+0x698>)
 800e172:	2200      	movs	r2, #0
 800e174:	4630      	mov	r0, r6
 800e176:	4639      	mov	r1, r7
 800e178:	f7f2 fa3e 	bl	80005f8 <__aeabi_dmul>
 800e17c:	f7f2 fcec 	bl	8000b58 <__aeabi_d2iz>
 800e180:	4680      	mov	r8, r0
 800e182:	f7f2 f9cf 	bl	8000524 <__aeabi_i2d>
 800e186:	4b97      	ldr	r3, [pc, #604]	; (800e3e4 <__kernel_rem_pio2+0x694>)
 800e188:	2200      	movs	r2, #0
 800e18a:	f7f2 fa35 	bl	80005f8 <__aeabi_dmul>
 800e18e:	460b      	mov	r3, r1
 800e190:	4602      	mov	r2, r0
 800e192:	4639      	mov	r1, r7
 800e194:	4630      	mov	r0, r6
 800e196:	f7f2 f877 	bl	8000288 <__aeabi_dsub>
 800e19a:	f7f2 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800e19e:	1c65      	adds	r5, r4, #1
 800e1a0:	ab0e      	add	r3, sp, #56	; 0x38
 800e1a2:	f10a 0a18 	add.w	sl, sl, #24
 800e1a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e1aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e1ae:	e720      	b.n	800dff2 <__kernel_rem_pio2+0x2a2>
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	4639      	mov	r1, r7
 800e1b4:	f7f2 fcd0 	bl	8000b58 <__aeabi_d2iz>
 800e1b8:	ab0e      	add	r3, sp, #56	; 0x38
 800e1ba:	4625      	mov	r5, r4
 800e1bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e1c0:	e717      	b.n	800dff2 <__kernel_rem_pio2+0x2a2>
 800e1c2:	ab0e      	add	r3, sp, #56	; 0x38
 800e1c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e1c8:	f7f2 f9ac 	bl	8000524 <__aeabi_i2d>
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	463b      	mov	r3, r7
 800e1d0:	f7f2 fa12 	bl	80005f8 <__aeabi_dmul>
 800e1d4:	4b84      	ldr	r3, [pc, #528]	; (800e3e8 <__kernel_rem_pio2+0x698>)
 800e1d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e1da:	2200      	movs	r2, #0
 800e1dc:	4630      	mov	r0, r6
 800e1de:	4639      	mov	r1, r7
 800e1e0:	f7f2 fa0a 	bl	80005f8 <__aeabi_dmul>
 800e1e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	460f      	mov	r7, r1
 800e1ec:	e70f      	b.n	800e00e <__kernel_rem_pio2+0x2be>
 800e1ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e1f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e1f6:	f7f2 f9ff 	bl	80005f8 <__aeabi_dmul>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e202:	f7f2 f843 	bl	800028c <__adddf3>
 800e206:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e20a:	f108 0801 	add.w	r8, r8, #1
 800e20e:	9b02      	ldr	r3, [sp, #8]
 800e210:	4598      	cmp	r8, r3
 800e212:	dc01      	bgt.n	800e218 <__kernel_rem_pio2+0x4c8>
 800e214:	45b8      	cmp	r8, r7
 800e216:	ddea      	ble.n	800e1ee <__kernel_rem_pio2+0x49e>
 800e218:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e21c:	ab4a      	add	r3, sp, #296	; 0x128
 800e21e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e222:	ed87 7b00 	vstr	d7, [r7]
 800e226:	3e01      	subs	r6, #1
 800e228:	e6f8      	b.n	800e01c <__kernel_rem_pio2+0x2cc>
 800e22a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	dc0b      	bgt.n	800e248 <__kernel_rem_pio2+0x4f8>
 800e230:	2b00      	cmp	r3, #0
 800e232:	dc35      	bgt.n	800e2a0 <__kernel_rem_pio2+0x550>
 800e234:	d059      	beq.n	800e2ea <__kernel_rem_pio2+0x59a>
 800e236:	9b04      	ldr	r3, [sp, #16]
 800e238:	f003 0007 	and.w	r0, r3, #7
 800e23c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e240:	ecbd 8b02 	vpop	{d8}
 800e244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e248:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e24a:	2b03      	cmp	r3, #3
 800e24c:	d1f3      	bne.n	800e236 <__kernel_rem_pio2+0x4e6>
 800e24e:	ab4a      	add	r3, sp, #296	; 0x128
 800e250:	4423      	add	r3, r4
 800e252:	9306      	str	r3, [sp, #24]
 800e254:	461c      	mov	r4, r3
 800e256:	469a      	mov	sl, r3
 800e258:	9502      	str	r5, [sp, #8]
 800e25a:	9b02      	ldr	r3, [sp, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f1aa 0a08 	sub.w	sl, sl, #8
 800e262:	dc6b      	bgt.n	800e33c <__kernel_rem_pio2+0x5ec>
 800e264:	46aa      	mov	sl, r5
 800e266:	f1ba 0f01 	cmp.w	sl, #1
 800e26a:	f1a4 0408 	sub.w	r4, r4, #8
 800e26e:	f300 8085 	bgt.w	800e37c <__kernel_rem_pio2+0x62c>
 800e272:	9c06      	ldr	r4, [sp, #24]
 800e274:	2000      	movs	r0, #0
 800e276:	3408      	adds	r4, #8
 800e278:	2100      	movs	r1, #0
 800e27a:	2d01      	cmp	r5, #1
 800e27c:	f300 809d 	bgt.w	800e3ba <__kernel_rem_pio2+0x66a>
 800e280:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e284:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e288:	f1bb 0f00 	cmp.w	fp, #0
 800e28c:	f040 809b 	bne.w	800e3c6 <__kernel_rem_pio2+0x676>
 800e290:	9b01      	ldr	r3, [sp, #4]
 800e292:	e9c3 5600 	strd	r5, r6, [r3]
 800e296:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e29a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e29e:	e7ca      	b.n	800e236 <__kernel_rem_pio2+0x4e6>
 800e2a0:	3408      	adds	r4, #8
 800e2a2:	ab4a      	add	r3, sp, #296	; 0x128
 800e2a4:	441c      	add	r4, r3
 800e2a6:	462e      	mov	r6, r5
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	2e00      	cmp	r6, #0
 800e2ae:	da36      	bge.n	800e31e <__kernel_rem_pio2+0x5ce>
 800e2b0:	f1bb 0f00 	cmp.w	fp, #0
 800e2b4:	d039      	beq.n	800e32a <__kernel_rem_pio2+0x5da>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2bc:	9c01      	ldr	r4, [sp, #4]
 800e2be:	e9c4 2300 	strd	r2, r3, [r4]
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e2ca:	f7f1 ffdd 	bl	8000288 <__aeabi_dsub>
 800e2ce:	ae4c      	add	r6, sp, #304	; 0x130
 800e2d0:	2401      	movs	r4, #1
 800e2d2:	42a5      	cmp	r5, r4
 800e2d4:	da2c      	bge.n	800e330 <__kernel_rem_pio2+0x5e0>
 800e2d6:	f1bb 0f00 	cmp.w	fp, #0
 800e2da:	d002      	beq.n	800e2e2 <__kernel_rem_pio2+0x592>
 800e2dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	9b01      	ldr	r3, [sp, #4]
 800e2e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e2e8:	e7a5      	b.n	800e236 <__kernel_rem_pio2+0x4e6>
 800e2ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e2ee:	eb0d 0403 	add.w	r4, sp, r3
 800e2f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	2d00      	cmp	r5, #0
 800e2fc:	da09      	bge.n	800e312 <__kernel_rem_pio2+0x5c2>
 800e2fe:	f1bb 0f00 	cmp.w	fp, #0
 800e302:	d002      	beq.n	800e30a <__kernel_rem_pio2+0x5ba>
 800e304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e308:	4619      	mov	r1, r3
 800e30a:	9b01      	ldr	r3, [sp, #4]
 800e30c:	e9c3 0100 	strd	r0, r1, [r3]
 800e310:	e791      	b.n	800e236 <__kernel_rem_pio2+0x4e6>
 800e312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e316:	f7f1 ffb9 	bl	800028c <__adddf3>
 800e31a:	3d01      	subs	r5, #1
 800e31c:	e7ed      	b.n	800e2fa <__kernel_rem_pio2+0x5aa>
 800e31e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e322:	f7f1 ffb3 	bl	800028c <__adddf3>
 800e326:	3e01      	subs	r6, #1
 800e328:	e7c0      	b.n	800e2ac <__kernel_rem_pio2+0x55c>
 800e32a:	4602      	mov	r2, r0
 800e32c:	460b      	mov	r3, r1
 800e32e:	e7c5      	b.n	800e2bc <__kernel_rem_pio2+0x56c>
 800e330:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e334:	f7f1 ffaa 	bl	800028c <__adddf3>
 800e338:	3401      	adds	r4, #1
 800e33a:	e7ca      	b.n	800e2d2 <__kernel_rem_pio2+0x582>
 800e33c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e340:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e344:	9b02      	ldr	r3, [sp, #8]
 800e346:	3b01      	subs	r3, #1
 800e348:	9302      	str	r3, [sp, #8]
 800e34a:	4632      	mov	r2, r6
 800e34c:	463b      	mov	r3, r7
 800e34e:	4640      	mov	r0, r8
 800e350:	4649      	mov	r1, r9
 800e352:	f7f1 ff9b 	bl	800028c <__adddf3>
 800e356:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	4640      	mov	r0, r8
 800e360:	4649      	mov	r1, r9
 800e362:	f7f1 ff91 	bl	8000288 <__aeabi_dsub>
 800e366:	4632      	mov	r2, r6
 800e368:	463b      	mov	r3, r7
 800e36a:	f7f1 ff8f 	bl	800028c <__adddf3>
 800e36e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e372:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e376:	ed8a 7b00 	vstr	d7, [sl]
 800e37a:	e76e      	b.n	800e25a <__kernel_rem_pio2+0x50a>
 800e37c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e380:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e384:	4640      	mov	r0, r8
 800e386:	4632      	mov	r2, r6
 800e388:	463b      	mov	r3, r7
 800e38a:	4649      	mov	r1, r9
 800e38c:	f7f1 ff7e 	bl	800028c <__adddf3>
 800e390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	4640      	mov	r0, r8
 800e39a:	4649      	mov	r1, r9
 800e39c:	f7f1 ff74 	bl	8000288 <__aeabi_dsub>
 800e3a0:	4632      	mov	r2, r6
 800e3a2:	463b      	mov	r3, r7
 800e3a4:	f7f1 ff72 	bl	800028c <__adddf3>
 800e3a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e3b0:	ed84 7b00 	vstr	d7, [r4]
 800e3b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e3b8:	e755      	b.n	800e266 <__kernel_rem_pio2+0x516>
 800e3ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3be:	f7f1 ff65 	bl	800028c <__adddf3>
 800e3c2:	3d01      	subs	r5, #1
 800e3c4:	e759      	b.n	800e27a <__kernel_rem_pio2+0x52a>
 800e3c6:	9b01      	ldr	r3, [sp, #4]
 800e3c8:	9a01      	ldr	r2, [sp, #4]
 800e3ca:	601d      	str	r5, [r3, #0]
 800e3cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e3d0:	605c      	str	r4, [r3, #4]
 800e3d2:	609f      	str	r7, [r3, #8]
 800e3d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e3d8:	60d3      	str	r3, [r2, #12]
 800e3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3de:	6110      	str	r0, [r2, #16]
 800e3e0:	6153      	str	r3, [r2, #20]
 800e3e2:	e728      	b.n	800e236 <__kernel_rem_pio2+0x4e6>
 800e3e4:	41700000 	.word	0x41700000
 800e3e8:	3e700000 	.word	0x3e700000
 800e3ec:	00000000 	.word	0x00000000

0800e3f0 <__kernel_sin>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	ed2d 8b04 	vpush	{d8-d9}
 800e3f8:	eeb0 8a41 	vmov.f32	s16, s2
 800e3fc:	eef0 8a61 	vmov.f32	s17, s3
 800e400:	ec55 4b10 	vmov	r4, r5, d0
 800e404:	b083      	sub	sp, #12
 800e406:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e40a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e40e:	9001      	str	r0, [sp, #4]
 800e410:	da06      	bge.n	800e420 <__kernel_sin+0x30>
 800e412:	ee10 0a10 	vmov	r0, s0
 800e416:	4629      	mov	r1, r5
 800e418:	f7f2 fb9e 	bl	8000b58 <__aeabi_d2iz>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d051      	beq.n	800e4c4 <__kernel_sin+0xd4>
 800e420:	4622      	mov	r2, r4
 800e422:	462b      	mov	r3, r5
 800e424:	4620      	mov	r0, r4
 800e426:	4629      	mov	r1, r5
 800e428:	f7f2 f8e6 	bl	80005f8 <__aeabi_dmul>
 800e42c:	4682      	mov	sl, r0
 800e42e:	468b      	mov	fp, r1
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4620      	mov	r0, r4
 800e436:	4629      	mov	r1, r5
 800e438:	f7f2 f8de 	bl	80005f8 <__aeabi_dmul>
 800e43c:	a341      	add	r3, pc, #260	; (adr r3, 800e544 <__kernel_sin+0x154>)
 800e43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e442:	4680      	mov	r8, r0
 800e444:	4689      	mov	r9, r1
 800e446:	4650      	mov	r0, sl
 800e448:	4659      	mov	r1, fp
 800e44a:	f7f2 f8d5 	bl	80005f8 <__aeabi_dmul>
 800e44e:	a33f      	add	r3, pc, #252	; (adr r3, 800e54c <__kernel_sin+0x15c>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	f7f1 ff18 	bl	8000288 <__aeabi_dsub>
 800e458:	4652      	mov	r2, sl
 800e45a:	465b      	mov	r3, fp
 800e45c:	f7f2 f8cc 	bl	80005f8 <__aeabi_dmul>
 800e460:	a33c      	add	r3, pc, #240	; (adr r3, 800e554 <__kernel_sin+0x164>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 ff11 	bl	800028c <__adddf3>
 800e46a:	4652      	mov	r2, sl
 800e46c:	465b      	mov	r3, fp
 800e46e:	f7f2 f8c3 	bl	80005f8 <__aeabi_dmul>
 800e472:	a33a      	add	r3, pc, #232	; (adr r3, 800e55c <__kernel_sin+0x16c>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f1 ff06 	bl	8000288 <__aeabi_dsub>
 800e47c:	4652      	mov	r2, sl
 800e47e:	465b      	mov	r3, fp
 800e480:	f7f2 f8ba 	bl	80005f8 <__aeabi_dmul>
 800e484:	a337      	add	r3, pc, #220	; (adr r3, 800e564 <__kernel_sin+0x174>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 feff 	bl	800028c <__adddf3>
 800e48e:	9b01      	ldr	r3, [sp, #4]
 800e490:	4606      	mov	r6, r0
 800e492:	460f      	mov	r7, r1
 800e494:	b9eb      	cbnz	r3, 800e4d2 <__kernel_sin+0xe2>
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	4650      	mov	r0, sl
 800e49c:	4659      	mov	r1, fp
 800e49e:	f7f2 f8ab 	bl	80005f8 <__aeabi_dmul>
 800e4a2:	a325      	add	r3, pc, #148	; (adr r3, 800e538 <__kernel_sin+0x148>)
 800e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a8:	f7f1 feee 	bl	8000288 <__aeabi_dsub>
 800e4ac:	4642      	mov	r2, r8
 800e4ae:	464b      	mov	r3, r9
 800e4b0:	f7f2 f8a2 	bl	80005f8 <__aeabi_dmul>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	f7f1 fee6 	bl	800028c <__adddf3>
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	ec45 4b10 	vmov	d0, r4, r5
 800e4c8:	b003      	add	sp, #12
 800e4ca:	ecbd 8b04 	vpop	{d8-d9}
 800e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d2:	4b1b      	ldr	r3, [pc, #108]	; (800e540 <__kernel_sin+0x150>)
 800e4d4:	ec51 0b18 	vmov	r0, r1, d8
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f7f2 f88d 	bl	80005f8 <__aeabi_dmul>
 800e4de:	4632      	mov	r2, r6
 800e4e0:	ec41 0b19 	vmov	d9, r0, r1
 800e4e4:	463b      	mov	r3, r7
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	4649      	mov	r1, r9
 800e4ea:	f7f2 f885 	bl	80005f8 <__aeabi_dmul>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	ec51 0b19 	vmov	r0, r1, d9
 800e4f6:	f7f1 fec7 	bl	8000288 <__aeabi_dsub>
 800e4fa:	4652      	mov	r2, sl
 800e4fc:	465b      	mov	r3, fp
 800e4fe:	f7f2 f87b 	bl	80005f8 <__aeabi_dmul>
 800e502:	ec53 2b18 	vmov	r2, r3, d8
 800e506:	f7f1 febf 	bl	8000288 <__aeabi_dsub>
 800e50a:	a30b      	add	r3, pc, #44	; (adr r3, 800e538 <__kernel_sin+0x148>)
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	4606      	mov	r6, r0
 800e512:	460f      	mov	r7, r1
 800e514:	4640      	mov	r0, r8
 800e516:	4649      	mov	r1, r9
 800e518:	f7f2 f86e 	bl	80005f8 <__aeabi_dmul>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	4630      	mov	r0, r6
 800e522:	4639      	mov	r1, r7
 800e524:	f7f1 feb2 	bl	800028c <__adddf3>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4620      	mov	r0, r4
 800e52e:	4629      	mov	r1, r5
 800e530:	f7f1 feaa 	bl	8000288 <__aeabi_dsub>
 800e534:	e7c4      	b.n	800e4c0 <__kernel_sin+0xd0>
 800e536:	bf00      	nop
 800e538:	55555549 	.word	0x55555549
 800e53c:	3fc55555 	.word	0x3fc55555
 800e540:	3fe00000 	.word	0x3fe00000
 800e544:	5acfd57c 	.word	0x5acfd57c
 800e548:	3de5d93a 	.word	0x3de5d93a
 800e54c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e550:	3e5ae5e6 	.word	0x3e5ae5e6
 800e554:	57b1fe7d 	.word	0x57b1fe7d
 800e558:	3ec71de3 	.word	0x3ec71de3
 800e55c:	19c161d5 	.word	0x19c161d5
 800e560:	3f2a01a0 	.word	0x3f2a01a0
 800e564:	1110f8a6 	.word	0x1110f8a6
 800e568:	3f811111 	.word	0x3f811111

0800e56c <with_errno>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	4604      	mov	r4, r0
 800e570:	460d      	mov	r5, r1
 800e572:	4616      	mov	r6, r2
 800e574:	f7fd f82e 	bl	800b5d4 <__errno>
 800e578:	4629      	mov	r1, r5
 800e57a:	6006      	str	r6, [r0, #0]
 800e57c:	4620      	mov	r0, r4
 800e57e:	bd70      	pop	{r4, r5, r6, pc}

0800e580 <xflow>:
 800e580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e582:	4614      	mov	r4, r2
 800e584:	461d      	mov	r5, r3
 800e586:	b108      	cbz	r0, 800e58c <xflow+0xc>
 800e588:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e58c:	e9cd 2300 	strd	r2, r3, [sp]
 800e590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e594:	4620      	mov	r0, r4
 800e596:	4629      	mov	r1, r5
 800e598:	f7f2 f82e 	bl	80005f8 <__aeabi_dmul>
 800e59c:	2222      	movs	r2, #34	; 0x22
 800e59e:	b003      	add	sp, #12
 800e5a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5a4:	f7ff bfe2 	b.w	800e56c <with_errno>

0800e5a8 <__math_uflow>:
 800e5a8:	b508      	push	{r3, lr}
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5b0:	f7ff ffe6 	bl	800e580 <xflow>
 800e5b4:	ec41 0b10 	vmov	d0, r0, r1
 800e5b8:	bd08      	pop	{r3, pc}

0800e5ba <__math_oflow>:
 800e5ba:	b508      	push	{r3, lr}
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e5c2:	f7ff ffdd 	bl	800e580 <xflow>
 800e5c6:	ec41 0b10 	vmov	d0, r0, r1
 800e5ca:	bd08      	pop	{r3, pc}

0800e5cc <with_errnof>:
 800e5cc:	b513      	push	{r0, r1, r4, lr}
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e5d4:	f7fc fffe 	bl	800b5d4 <__errno>
 800e5d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e5dc:	6004      	str	r4, [r0, #0]
 800e5de:	b002      	add	sp, #8
 800e5e0:	bd10      	pop	{r4, pc}

0800e5e2 <xflowf>:
 800e5e2:	b130      	cbz	r0, 800e5f2 <xflowf+0x10>
 800e5e4:	eef1 7a40 	vneg.f32	s15, s0
 800e5e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e5ec:	2022      	movs	r0, #34	; 0x22
 800e5ee:	f7ff bfed 	b.w	800e5cc <with_errnof>
 800e5f2:	eef0 7a40 	vmov.f32	s15, s0
 800e5f6:	e7f7      	b.n	800e5e8 <xflowf+0x6>

0800e5f8 <__math_uflowf>:
 800e5f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e600 <__math_uflowf+0x8>
 800e5fc:	f7ff bff1 	b.w	800e5e2 <xflowf>
 800e600:	10000000 	.word	0x10000000

0800e604 <__math_oflowf>:
 800e604:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e60c <__math_oflowf+0x8>
 800e608:	f7ff bfeb 	b.w	800e5e2 <xflowf>
 800e60c:	70000000 	.word	0x70000000

0800e610 <fabs>:
 800e610:	ec51 0b10 	vmov	r0, r1, d0
 800e614:	ee10 2a10 	vmov	r2, s0
 800e618:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e61c:	ec43 2b10 	vmov	d0, r2, r3
 800e620:	4770      	bx	lr

0800e622 <finite>:
 800e622:	b082      	sub	sp, #8
 800e624:	ed8d 0b00 	vstr	d0, [sp]
 800e628:	9801      	ldr	r0, [sp, #4]
 800e62a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e62e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e632:	0fc0      	lsrs	r0, r0, #31
 800e634:	b002      	add	sp, #8
 800e636:	4770      	bx	lr

0800e638 <floor>:
 800e638:	ec51 0b10 	vmov	r0, r1, d0
 800e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e640:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e644:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e648:	2e13      	cmp	r6, #19
 800e64a:	ee10 5a10 	vmov	r5, s0
 800e64e:	ee10 8a10 	vmov	r8, s0
 800e652:	460c      	mov	r4, r1
 800e654:	dc32      	bgt.n	800e6bc <floor+0x84>
 800e656:	2e00      	cmp	r6, #0
 800e658:	da14      	bge.n	800e684 <floor+0x4c>
 800e65a:	a333      	add	r3, pc, #204	; (adr r3, 800e728 <floor+0xf0>)
 800e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e660:	f7f1 fe14 	bl	800028c <__adddf3>
 800e664:	2200      	movs	r2, #0
 800e666:	2300      	movs	r3, #0
 800e668:	f7f2 fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800e66c:	b138      	cbz	r0, 800e67e <floor+0x46>
 800e66e:	2c00      	cmp	r4, #0
 800e670:	da57      	bge.n	800e722 <floor+0xea>
 800e672:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e676:	431d      	orrs	r5, r3
 800e678:	d001      	beq.n	800e67e <floor+0x46>
 800e67a:	4c2d      	ldr	r4, [pc, #180]	; (800e730 <floor+0xf8>)
 800e67c:	2500      	movs	r5, #0
 800e67e:	4621      	mov	r1, r4
 800e680:	4628      	mov	r0, r5
 800e682:	e025      	b.n	800e6d0 <floor+0x98>
 800e684:	4f2b      	ldr	r7, [pc, #172]	; (800e734 <floor+0xfc>)
 800e686:	4137      	asrs	r7, r6
 800e688:	ea01 0307 	and.w	r3, r1, r7
 800e68c:	4303      	orrs	r3, r0
 800e68e:	d01f      	beq.n	800e6d0 <floor+0x98>
 800e690:	a325      	add	r3, pc, #148	; (adr r3, 800e728 <floor+0xf0>)
 800e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e696:	f7f1 fdf9 	bl	800028c <__adddf3>
 800e69a:	2200      	movs	r2, #0
 800e69c:	2300      	movs	r3, #0
 800e69e:	f7f2 fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d0eb      	beq.n	800e67e <floor+0x46>
 800e6a6:	2c00      	cmp	r4, #0
 800e6a8:	bfbe      	ittt	lt
 800e6aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e6ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800e6b2:	19a4      	addlt	r4, r4, r6
 800e6b4:	ea24 0407 	bic.w	r4, r4, r7
 800e6b8:	2500      	movs	r5, #0
 800e6ba:	e7e0      	b.n	800e67e <floor+0x46>
 800e6bc:	2e33      	cmp	r6, #51	; 0x33
 800e6be:	dd0b      	ble.n	800e6d8 <floor+0xa0>
 800e6c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e6c4:	d104      	bne.n	800e6d0 <floor+0x98>
 800e6c6:	ee10 2a10 	vmov	r2, s0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	f7f1 fdde 	bl	800028c <__adddf3>
 800e6d0:	ec41 0b10 	vmov	d0, r0, r1
 800e6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e6dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6e0:	fa23 f707 	lsr.w	r7, r3, r7
 800e6e4:	4207      	tst	r7, r0
 800e6e6:	d0f3      	beq.n	800e6d0 <floor+0x98>
 800e6e8:	a30f      	add	r3, pc, #60	; (adr r3, 800e728 <floor+0xf0>)
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	f7f1 fdcd 	bl	800028c <__adddf3>
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f7f2 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	d0bf      	beq.n	800e67e <floor+0x46>
 800e6fe:	2c00      	cmp	r4, #0
 800e700:	da02      	bge.n	800e708 <floor+0xd0>
 800e702:	2e14      	cmp	r6, #20
 800e704:	d103      	bne.n	800e70e <floor+0xd6>
 800e706:	3401      	adds	r4, #1
 800e708:	ea25 0507 	bic.w	r5, r5, r7
 800e70c:	e7b7      	b.n	800e67e <floor+0x46>
 800e70e:	2301      	movs	r3, #1
 800e710:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e714:	fa03 f606 	lsl.w	r6, r3, r6
 800e718:	4435      	add	r5, r6
 800e71a:	4545      	cmp	r5, r8
 800e71c:	bf38      	it	cc
 800e71e:	18e4      	addcc	r4, r4, r3
 800e720:	e7f2      	b.n	800e708 <floor+0xd0>
 800e722:	2500      	movs	r5, #0
 800e724:	462c      	mov	r4, r5
 800e726:	e7aa      	b.n	800e67e <floor+0x46>
 800e728:	8800759c 	.word	0x8800759c
 800e72c:	7e37e43c 	.word	0x7e37e43c
 800e730:	bff00000 	.word	0xbff00000
 800e734:	000fffff 	.word	0x000fffff

0800e738 <nan>:
 800e738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e740 <nan+0x8>
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	00000000 	.word	0x00000000
 800e744:	7ff80000 	.word	0x7ff80000

0800e748 <scalbn>:
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	ec55 4b10 	vmov	r4, r5, d0
 800e74e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e752:	4606      	mov	r6, r0
 800e754:	462b      	mov	r3, r5
 800e756:	b99a      	cbnz	r2, 800e780 <scalbn+0x38>
 800e758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e75c:	4323      	orrs	r3, r4
 800e75e:	d036      	beq.n	800e7ce <scalbn+0x86>
 800e760:	4b39      	ldr	r3, [pc, #228]	; (800e848 <scalbn+0x100>)
 800e762:	4629      	mov	r1, r5
 800e764:	ee10 0a10 	vmov	r0, s0
 800e768:	2200      	movs	r2, #0
 800e76a:	f7f1 ff45 	bl	80005f8 <__aeabi_dmul>
 800e76e:	4b37      	ldr	r3, [pc, #220]	; (800e84c <scalbn+0x104>)
 800e770:	429e      	cmp	r6, r3
 800e772:	4604      	mov	r4, r0
 800e774:	460d      	mov	r5, r1
 800e776:	da10      	bge.n	800e79a <scalbn+0x52>
 800e778:	a32b      	add	r3, pc, #172	; (adr r3, 800e828 <scalbn+0xe0>)
 800e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77e:	e03a      	b.n	800e7f6 <scalbn+0xae>
 800e780:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e784:	428a      	cmp	r2, r1
 800e786:	d10c      	bne.n	800e7a2 <scalbn+0x5a>
 800e788:	ee10 2a10 	vmov	r2, s0
 800e78c:	4620      	mov	r0, r4
 800e78e:	4629      	mov	r1, r5
 800e790:	f7f1 fd7c 	bl	800028c <__adddf3>
 800e794:	4604      	mov	r4, r0
 800e796:	460d      	mov	r5, r1
 800e798:	e019      	b.n	800e7ce <scalbn+0x86>
 800e79a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e79e:	460b      	mov	r3, r1
 800e7a0:	3a36      	subs	r2, #54	; 0x36
 800e7a2:	4432      	add	r2, r6
 800e7a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e7a8:	428a      	cmp	r2, r1
 800e7aa:	dd08      	ble.n	800e7be <scalbn+0x76>
 800e7ac:	2d00      	cmp	r5, #0
 800e7ae:	a120      	add	r1, pc, #128	; (adr r1, 800e830 <scalbn+0xe8>)
 800e7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7b4:	da1c      	bge.n	800e7f0 <scalbn+0xa8>
 800e7b6:	a120      	add	r1, pc, #128	; (adr r1, 800e838 <scalbn+0xf0>)
 800e7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7bc:	e018      	b.n	800e7f0 <scalbn+0xa8>
 800e7be:	2a00      	cmp	r2, #0
 800e7c0:	dd08      	ble.n	800e7d4 <scalbn+0x8c>
 800e7c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e7c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e7ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e7ce:	ec45 4b10 	vmov	d0, r4, r5
 800e7d2:	bd70      	pop	{r4, r5, r6, pc}
 800e7d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e7d8:	da19      	bge.n	800e80e <scalbn+0xc6>
 800e7da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e7de:	429e      	cmp	r6, r3
 800e7e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e7e4:	dd0a      	ble.n	800e7fc <scalbn+0xb4>
 800e7e6:	a112      	add	r1, pc, #72	; (adr r1, 800e830 <scalbn+0xe8>)
 800e7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1e2      	bne.n	800e7b6 <scalbn+0x6e>
 800e7f0:	a30f      	add	r3, pc, #60	; (adr r3, 800e830 <scalbn+0xe8>)
 800e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f6:	f7f1 feff 	bl	80005f8 <__aeabi_dmul>
 800e7fa:	e7cb      	b.n	800e794 <scalbn+0x4c>
 800e7fc:	a10a      	add	r1, pc, #40	; (adr r1, 800e828 <scalbn+0xe0>)
 800e7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d0b8      	beq.n	800e778 <scalbn+0x30>
 800e806:	a10e      	add	r1, pc, #56	; (adr r1, 800e840 <scalbn+0xf8>)
 800e808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e80c:	e7b4      	b.n	800e778 <scalbn+0x30>
 800e80e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e812:	3236      	adds	r2, #54	; 0x36
 800e814:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e818:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e81c:	4620      	mov	r0, r4
 800e81e:	4b0c      	ldr	r3, [pc, #48]	; (800e850 <scalbn+0x108>)
 800e820:	2200      	movs	r2, #0
 800e822:	e7e8      	b.n	800e7f6 <scalbn+0xae>
 800e824:	f3af 8000 	nop.w
 800e828:	c2f8f359 	.word	0xc2f8f359
 800e82c:	01a56e1f 	.word	0x01a56e1f
 800e830:	8800759c 	.word	0x8800759c
 800e834:	7e37e43c 	.word	0x7e37e43c
 800e838:	8800759c 	.word	0x8800759c
 800e83c:	fe37e43c 	.word	0xfe37e43c
 800e840:	c2f8f359 	.word	0xc2f8f359
 800e844:	81a56e1f 	.word	0x81a56e1f
 800e848:	43500000 	.word	0x43500000
 800e84c:	ffff3cb0 	.word	0xffff3cb0
 800e850:	3c900000 	.word	0x3c900000

0800e854 <fabsf>:
 800e854:	ee10 3a10 	vmov	r3, s0
 800e858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e85c:	ee00 3a10 	vmov	s0, r3
 800e860:	4770      	bx	lr

0800e862 <finitef>:
 800e862:	b082      	sub	sp, #8
 800e864:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e868:	9801      	ldr	r0, [sp, #4]
 800e86a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e86e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e872:	bfac      	ite	ge
 800e874:	2000      	movge	r0, #0
 800e876:	2001      	movlt	r0, #1
 800e878:	b002      	add	sp, #8
 800e87a:	4770      	bx	lr

0800e87c <scalbnf>:
 800e87c:	ee10 3a10 	vmov	r3, s0
 800e880:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e884:	d025      	beq.n	800e8d2 <scalbnf+0x56>
 800e886:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e88a:	d302      	bcc.n	800e892 <scalbnf+0x16>
 800e88c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e890:	4770      	bx	lr
 800e892:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e896:	d122      	bne.n	800e8de <scalbnf+0x62>
 800e898:	4b2a      	ldr	r3, [pc, #168]	; (800e944 <scalbnf+0xc8>)
 800e89a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e948 <scalbnf+0xcc>
 800e89e:	4298      	cmp	r0, r3
 800e8a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8a4:	db16      	blt.n	800e8d4 <scalbnf+0x58>
 800e8a6:	ee10 3a10 	vmov	r3, s0
 800e8aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e8ae:	3a19      	subs	r2, #25
 800e8b0:	4402      	add	r2, r0
 800e8b2:	2afe      	cmp	r2, #254	; 0xfe
 800e8b4:	dd15      	ble.n	800e8e2 <scalbnf+0x66>
 800e8b6:	ee10 3a10 	vmov	r3, s0
 800e8ba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e94c <scalbnf+0xd0>
 800e8be:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e950 <scalbnf+0xd4>
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	eeb0 7a67 	vmov.f32	s14, s15
 800e8c8:	bfb8      	it	lt
 800e8ca:	eef0 7a66 	vmovlt.f32	s15, s13
 800e8ce:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e8d2:	4770      	bx	lr
 800e8d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e954 <scalbnf+0xd8>
 800e8d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8dc:	4770      	bx	lr
 800e8de:	0dd2      	lsrs	r2, r2, #23
 800e8e0:	e7e6      	b.n	800e8b0 <scalbnf+0x34>
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	dd06      	ble.n	800e8f4 <scalbnf+0x78>
 800e8e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e8ee:	ee00 3a10 	vmov	s0, r3
 800e8f2:	4770      	bx	lr
 800e8f4:	f112 0f16 	cmn.w	r2, #22
 800e8f8:	da1a      	bge.n	800e930 <scalbnf+0xb4>
 800e8fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e8fe:	4298      	cmp	r0, r3
 800e900:	ee10 3a10 	vmov	r3, s0
 800e904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e908:	dd0a      	ble.n	800e920 <scalbnf+0xa4>
 800e90a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e94c <scalbnf+0xd0>
 800e90e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e950 <scalbnf+0xd4>
 800e912:	eef0 7a40 	vmov.f32	s15, s0
 800e916:	2b00      	cmp	r3, #0
 800e918:	bf18      	it	ne
 800e91a:	eeb0 0a47 	vmovne.f32	s0, s14
 800e91e:	e7db      	b.n	800e8d8 <scalbnf+0x5c>
 800e920:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e954 <scalbnf+0xd8>
 800e924:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e958 <scalbnf+0xdc>
 800e928:	eef0 7a40 	vmov.f32	s15, s0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	e7f3      	b.n	800e918 <scalbnf+0x9c>
 800e930:	3219      	adds	r2, #25
 800e932:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e936:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e93a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e95c <scalbnf+0xe0>
 800e93e:	ee07 3a10 	vmov	s14, r3
 800e942:	e7c4      	b.n	800e8ce <scalbnf+0x52>
 800e944:	ffff3cb0 	.word	0xffff3cb0
 800e948:	4c000000 	.word	0x4c000000
 800e94c:	7149f2ca 	.word	0x7149f2ca
 800e950:	f149f2ca 	.word	0xf149f2ca
 800e954:	0da24260 	.word	0x0da24260
 800e958:	8da24260 	.word	0x8da24260
 800e95c:	33000000 	.word	0x33000000

0800e960 <_init>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	bf00      	nop
 800e964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e966:	bc08      	pop	{r3}
 800e968:	469e      	mov	lr, r3
 800e96a:	4770      	bx	lr

0800e96c <_fini>:
 800e96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96e:	bf00      	nop
 800e970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e972:	bc08      	pop	{r3}
 800e974:	469e      	mov	lr, r3
 800e976:	4770      	bx	lr
