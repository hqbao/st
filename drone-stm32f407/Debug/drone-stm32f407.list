
drone-stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d508  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800d698  0800d698  0001d698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d928  0800d928  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d930  0800d930  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d930  0800d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000684  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f00  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000278a  00000000  00000000  00034fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00037758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a93  00000000  00000000  00039ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016783  00000000  00000000  0005c563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d087e  00000000  00000000  00072ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143564  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b0c  00000000  00000000  001435b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d680 	.word	0x0800d680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800d680 	.word	0x0800d680

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f58:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f5c:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	609a      	str	r2, [r3, #8]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 8000f7e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fbe:	ed97 6a00 	vldr	s12, [r7]
 8000fc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff faaa 	bl	8000548 <__aeabi_f2d>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	ed93 7a04 	vldr	s14, [r3, #16]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	eef0 7ae7 	vabs.f32	s15, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	4680      	mov	r8, r0
 8001016:	4689      	mov	r9, r1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4640      	mov	r0, r8
 8001028:	4649      	mov	r1, r9
 800102a:	f7ff fae5 	bl	80005f8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff f929 	bl	800028c <__adddf3>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fdb1 	bl	8000ba8 <__aeabi_d2f>
 8001046:	4602      	mov	r2, r0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	ee07 3a90 	vmov	s15, r3
}
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001068 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e024      	b.n	80010c8 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d103      	bne.n	800108c <flash+0x24>
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <flash+0x78>)
 8001088:	f003 fd03 	bl	8004a92 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d103      	bne.n	800109a <flash+0x32>
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	4812      	ldr	r0, [pc, #72]	; (80010e0 <flash+0x78>)
 8001096:	f003 fcfc 	bl	8004a92 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800109a:	2032      	movs	r0, #50	; 0x32
 800109c:	f003 f956 	bl	800434c <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d103      	bne.n	80010ae <flash+0x46>
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <flash+0x78>)
 80010aa:	f003 fcf2 	bl	8004a92 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d103      	bne.n	80010bc <flash+0x54>
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash+0x78>)
 80010b8:	f003 fceb 	bl	8004a92 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f003 f945 	bl	800434c <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbd6      	blt.n	800107e <flash+0x16>
  }

  HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f003 f93b 	bl	800434c <HAL_Delay>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020000 	.word	0x40020000

080010e4 <console>:

// Monitor console
void console(const char *str) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f86f 	bl	80001d0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <console+0x24>)
 80010fc:	f008 fa05 	bl	800950a <HAL_UART_Transmit_IT>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000280 	.word	0x20000280

0800110c <send_data>:

char g_console_msg[256] = {0};
void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b093      	sub	sp, #76	; 0x4c
 8001110:	af08      	add	r7, sp, #32
 8001112:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001116:	edc7 0a08 	vstr	s1, [r7, #32]
 800111a:	ed87 1a07 	vstr	s2, [r7, #28]
 800111e:	edc7 1a06 	vstr	s3, [r7, #24]
 8001122:	ed87 2a05 	vstr	s4, [r7, #20]
 8001126:	edc7 2a04 	vstr	s5, [r7, #16]
 800112a:	ed87 3a03 	vstr	s6, [r7, #12]
 800112e:	edc7 3a02 	vstr	s7, [r7, #8]
 8001132:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 8001136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113a:	2100      	movs	r1, #0
 800113c:	4837      	ldr	r0, [pc, #220]	; (800121c <send_data+0x110>)
 800113e:	f009 f905 	bl	800a34c <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8001142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001146:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001220 <send_data+0x114>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800114e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001152:	edd7 7a08 	vldr	s15, [r7, #32]
 8001156:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001220 <send_data+0x114>
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800115e:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001162:	edd7 7a07 	vldr	s15, [r7, #28]
 8001166:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001220 <send_data+0x114>
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8001176:	edd7 7a06 	vldr	s15, [r7, #24]
 800117a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001220 <send_data+0x114>
 800117e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800118a:	edd7 7a05 	vldr	s15, [r7, #20]
 800118e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001220 <send_data+0x114>
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119a:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 800119e:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001220 <send_data+0x114>
 80011a6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ae:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80011b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001220 <send_data+0x114>
 80011ba:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80011c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001220 <send_data+0x114>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d6:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001220 <send_data+0x114>
 80011e2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80011e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ea:	ee17 6a90 	vmov	r6, s15
 80011ee:	9606      	str	r6, [sp, #24]
 80011f0:	9505      	str	r5, [sp, #20]
 80011f2:	9404      	str	r4, [sp, #16]
 80011f4:	9003      	str	r0, [sp, #12]
 80011f6:	9102      	str	r1, [sp, #8]
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	ee16 3a10 	vmov	r3, s12
 8001200:	ee16 2a90 	vmov	r2, s13
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <send_data+0x118>)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <send_data+0x110>)
 8001208:	f009 f8a8 	bl	800a35c <siprintf>
  console(g_console_msg);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <send_data+0x110>)
 800120e:	f7ff ff69 	bl	80010e4 <console>
}
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	; 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	bf00      	nop
 800121c:	200004cc 	.word	0x200004cc
 8001220:	47c35000 	.word	0x47c35000
 8001224:	0800d698 	.word	0x0800d698

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f003 f81b 	bl	8004268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f93b 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 fc6b 	bl	8001b10 <MX_GPIO_Init>
  MX_I2C1_Init();
 800123a:	f000 f9a1 	bl	8001580 <MX_I2C1_Init>
  MX_TIM1_Init();
 800123e:	f000 fa03 	bl	8001648 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001242:	f000 fac5 	bl	80017d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001246:	f000 fb59 	bl	80018fc <MX_TIM3_Init>
  MX_TIM4_Init();
 800124a:	f000 fba5 	bl	8001998 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800124e:	f000 fc35 	bl	8001abc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001252:	f000 f9c3 	bl	80015dc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Turn off leds
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4887      	ldr	r0, [pc, #540]	; (8001478 <main+0x250>)
 800125c:	f003 fc00 	bl	8004a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4884      	ldr	r0, [pc, #528]	; (8001478 <main+0x250>)
 8001266:	f003 fbfb 	bl	8004a60 <HAL_GPIO_WritePin>

  flash(1, 5);
 800126a:	2105      	movs	r1, #5
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fefb 	bl	8001068 <flash>

  // Initialise Kalman filters
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 1);
 8001272:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001276:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800127a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800127e:	487f      	ldr	r0, [pc, #508]	; (800147c <main+0x254>)
 8001280:	f7ff fe64 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 1);
 8001284:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001288:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800128c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001290:	487b      	ldr	r0, [pc, #492]	; (8001480 <main+0x258>)
 8001292:	f7ff fe5b 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 1);
 8001296:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800129a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800129e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012a2:	4878      	ldr	r0, [pc, #480]	; (8001484 <main+0x25c>)
 80012a4:	f7ff fe52 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 1);
 80012a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012b4:	4874      	ldr	r0, [pc, #464]	; (8001488 <main+0x260>)
 80012b6:	f7ff fe49 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 1);
 80012ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012c6:	4871      	ldr	r0, [pc, #452]	; (800148c <main+0x264>)
 80012c8:	f7ff fe40 	bl	8000f4c <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 1);
 80012cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80012d0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012d8:	486d      	ldr	r0, [pc, #436]	; (8001490 <main+0x268>)
 80012da:	f7ff fe37 	bl	8000f4c <SimpleKalmanFilter_Init>

  // Init gy-86
  while (1) {
    int error = MPU6050_init(
 80012de:	2303      	movs	r3, #3
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2303      	movs	r3, #3
 80012e4:	2200      	movs	r2, #0
 80012e6:	496b      	ldr	r1, [pc, #428]	; (8001494 <main+0x26c>)
 80012e8:	486b      	ldr	r0, [pc, #428]	; (8001498 <main+0x270>)
 80012ea:	f000 fc90 	bl	8001c0e <MPU6050_init>
 80012ee:	6178      	str	r0, [r7, #20]
        &g_mpu6050,
        &hi2c1,
        MPU6050_DataRate_8KHz,
        MPU6050_Accelerometer_16G,
        MPU6050_Gyroscope_2000s);
    if (error == 0) break;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <main+0xd0>
 80012f6:	e006      	b.n	8001306 <main+0xde>
    flash(2, error);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	2002      	movs	r0, #2
 8001300:	f7ff feb2 	bl	8001068 <flash>
  while (1) {
 8001304:	e7eb      	b.n	80012de <main+0xb6>
  }

  while (1) {
    int error = MS5611_init(
 8001306:	4963      	ldr	r1, [pc, #396]	; (8001494 <main+0x26c>)
 8001308:	4864      	ldr	r0, [pc, #400]	; (800149c <main+0x274>)
 800130a:	f001 f813 	bl	8002334 <MS5611_init>
 800130e:	6138      	str	r0, [r7, #16]
        &g_ms5611,
        &hi2c1);
    if (error == 0) break;
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <main+0xfc>
    flash(2, error);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff fea3 	bl	8001068 <flash>
  while (1) {
 8001322:	e7f0      	b.n	8001306 <main+0xde>
    if (error == 0) break;
 8001324:	bf00      	nop
  }

  // Initialise motor PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001326:	2100      	movs	r1, #0
 8001328:	485d      	ldr	r0, [pc, #372]	; (80014a0 <main+0x278>)
 800132a:	f006 fec9 	bl	80080c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800132e:	2104      	movs	r1, #4
 8001330:	485b      	ldr	r0, [pc, #364]	; (80014a0 <main+0x278>)
 8001332:	f006 fec5 	bl	80080c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001336:	2108      	movs	r1, #8
 8001338:	4859      	ldr	r0, [pc, #356]	; (80014a0 <main+0x278>)
 800133a:	f006 fec1 	bl	80080c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800133e:	210c      	movs	r1, #12
 8001340:	4857      	ldr	r0, [pc, #348]	; (80014a0 <main+0x278>)
 8001342:	f006 febd 	bl	80080c0 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//    HAL_UART_Receive_IT(&huart1, g_control, 10);

    MS5611_req_temperature(&g_ms5611, OSR_4096);
 8001346:	2104      	movs	r1, #4
 8001348:	4854      	ldr	r0, [pc, #336]	; (800149c <main+0x274>)
 800134a:	f001 f806 	bl	800235a <MS5611_req_temperature>
    HAL_Delay(10);
 800134e:	200a      	movs	r0, #10
 8001350:	f002 fffc 	bl	800434c <HAL_Delay>

    MS5611_read_temperature(&g_ms5611);
 8001354:	4851      	ldr	r0, [pc, #324]	; (800149c <main+0x274>)
 8001356:	f001 f838 	bl	80023ca <MS5611_read_temperature>
    MS5611_calc_temperature(&g_ms5611);
 800135a:	4850      	ldr	r0, [pc, #320]	; (800149c <main+0x274>)
 800135c:	f001 f891 	bl	8002482 <MS5611_calc_temperature>
    MS5611_req_pressure(&g_ms5611, OSR_4096);
 8001360:	2104      	movs	r1, #4
 8001362:	484e      	ldr	r0, [pc, #312]	; (800149c <main+0x274>)
 8001364:	f001 f815 	bl	8002392 <MS5611_req_pressure>
    HAL_Delay(10);
 8001368:	200a      	movs	r0, #10
 800136a:	f002 ffef 	bl	800434c <HAL_Delay>

    MS5611_read_pressure(&g_ms5611);
 800136e:	484b      	ldr	r0, [pc, #300]	; (800149c <main+0x274>)
 8001370:	f001 f859 	bl	8002426 <MS5611_read_pressure>
    MS5611_calc_pressure(&g_ms5611);
 8001374:	4849      	ldr	r0, [pc, #292]	; (800149c <main+0x274>)
 8001376:	f001 f8b9 	bl	80024ec <MS5611_calc_pressure>
    HAL_Delay(10);
 800137a:	200a      	movs	r0, #10
 800137c:	f002 ffe6 	bl	800434c <HAL_Delay>

    float temperature = (float)g_ms5611.TEMP/100.f;
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <main+0x274>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138c:	eddf 6a45 	vldr	s13, [pc, #276]	; 80014a4 <main+0x27c>
 8001390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001394:	edc7 7a03 	vstr	s15, [r7, #12]
    float pressure = (float)g_ms5611.P/100.f;
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <main+0x274>)
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80014a4 <main+0x27c>
 80013a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ac:	edc7 7a02 	vstr	s15, [r7, #8]
    float altitude = MS5611_get_altitude((float)g_ms5611.P/100.f, (float)g_ms5611.TEMP/100.f);
 80013b0:	4b3a      	ldr	r3, [pc, #232]	; (800149c <main+0x274>)
 80013b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	eddf 6a39 	vldr	s13, [pc, #228]	; 80014a4 <main+0x27c>
 80013c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013c4:	4b35      	ldr	r3, [pc, #212]	; (800149c <main+0x274>)
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80014a4 <main+0x27c>
 80013d4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80013d8:	eef0 0a66 	vmov.f32	s1, s13
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	f001 f934 	bl	800264c <MS5611_get_altitude>
 80013e4:	ed87 0a01 	vstr	s0, [r7, #4]
    monitor[0] = temperature;
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <main+0x280>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6013      	str	r3, [r2, #0]
    monitor[1] = temperature;
 80013ee:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <main+0x280>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6053      	str	r3, [r2, #4]
    monitor[2] = temperature;
 80013f4:	4a2c      	ldr	r2, [pc, #176]	; (80014a8 <main+0x280>)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6093      	str	r3, [r2, #8]
    monitor[3] = pressure;
 80013fa:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <main+0x280>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
    monitor[4] = pressure;
 8001400:	4a29      	ldr	r2, [pc, #164]	; (80014a8 <main+0x280>)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	6113      	str	r3, [r2, #16]
    monitor[5] = pressure;
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <main+0x280>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	6153      	str	r3, [r2, #20]
    monitor[6] = altitude;
 800140c:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <main+0x280>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6193      	str	r3, [r2, #24]
    monitor[7] = altitude;
 8001412:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <main+0x280>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	61d3      	str	r3, [r2, #28]
    monitor[8] = altitude;
 8001418:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <main+0x280>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6213      	str	r3, [r2, #32]

    send_data(monitor[0], monitor[1], monitor[2],
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <main+0x280>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <main+0x280>)
 8001426:	ed93 7a01 	vldr	s14, [r3, #4]
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <main+0x280>)
 800142c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <main+0x280>)
 8001432:	ed93 6a03 	vldr	s12, [r3, #12]
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <main+0x280>)
 8001438:	edd3 5a04 	vldr	s11, [r3, #16]
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <main+0x280>)
 800143e:	ed93 5a05 	vldr	s10, [r3, #20]
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <main+0x280>)
 8001444:	edd3 4a06 	vldr	s9, [r3, #24]
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <main+0x280>)
 800144a:	edd3 3a07 	vldr	s7, [r3, #28]
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <main+0x280>)
 8001450:	ed93 4a08 	vldr	s8, [r3, #32]
 8001454:	eeb0 3a64 	vmov.f32	s6, s9
 8001458:	eef0 2a45 	vmov.f32	s5, s10
 800145c:	eeb0 2a65 	vmov.f32	s4, s11
 8001460:	eef0 1a46 	vmov.f32	s3, s12
 8001464:	eeb0 1a66 	vmov.f32	s2, s13
 8001468:	eef0 0a47 	vmov.f32	s1, s14
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fe4c 	bl	800110c <send_data>
  {
 8001474:	e767      	b.n	8001346 <main+0x11e>
 8001476:	bf00      	nop
 8001478:	40020000 	.word	0x40020000
 800147c:	200002c4 	.word	0x200002c4
 8001480:	200002dc 	.word	0x200002dc
 8001484:	200002f4 	.word	0x200002f4
 8001488:	2000030c 	.word	0x2000030c
 800148c:	20000324 	.word	0x20000324
 8001490:	2000033c 	.word	0x2000033c
 8001494:	200000b4 	.word	0x200000b4
 8001498:	20000444 	.word	0x20000444
 800149c:	20000468 	.word	0x20000468
 80014a0:	20000160 	.word	0x20000160
 80014a4:	42c80000 	.word	0x42c80000
 80014a8:	200006dc 	.word	0x200006dc

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	; 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2230      	movs	r2, #48	; 0x30
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f008 ff46 	bl	800a34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <SystemClock_Config+0xcc>)
 80014da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <SystemClock_Config+0xcc>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <SystemClock_Config+0xd0>)
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <SystemClock_Config+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2301      	movs	r3, #1
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001520:	23a8      	movs	r3, #168	; 0xa8
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001528:	2304      	movs	r3, #4
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f005 fffb 	bl	800752c <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800153c:	f000 fb62 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800154c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001552:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2105      	movs	r1, #5
 800155e:	4618      	mov	r0, r3
 8001560:	f006 fa5c 	bl	8007a1c <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800156a:	f000 fb4b 	bl	8001c04 <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3750      	adds	r7, #80	; 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <MX_I2C1_Init+0x54>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C1_Init+0x50>)
 800158c:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_I2C1_Init+0x58>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_I2C1_Init+0x50>)
 800159e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015be:	f003 fa83 	bl	8004ac8 <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f000 fb1c 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200000b4 	.word	0x200000b4
 80015d4:	40005400 	.word	0x40005400
 80015d8:	000186a0 	.word	0x000186a0

080015dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI2_Init+0x64>)
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_SPI2_Init+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI2_Init+0x64>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI2_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPI2_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI2_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI2_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI2_Init+0x64>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI2_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPI2_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI2_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPI2_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI2_Init+0x64>)
 8001628:	220a      	movs	r2, #10
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_SPI2_Init+0x64>)
 800162e:	f006 fc15 	bl	8007e5c <HAL_SPI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001638:	f000 fae4 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000108 	.word	0x20000108
 8001644:	40003800 	.word	0x40003800

08001648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	; 0x58
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2220      	movs	r2, #32
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f008 fe63 	bl	800a34c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <MX_TIM1_Init+0x180>)
 8001688:	4a50      	ldr	r2, [pc, #320]	; (80017cc <MX_TIM1_Init+0x184>)
 800168a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 800168c:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <MX_TIM1_Init+0x180>)
 800168e:	2215      	movs	r2, #21
 8001690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b4d      	ldr	r3, [pc, #308]	; (80017c8 <MX_TIM1_Init+0x180>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <MX_TIM1_Init+0x180>)
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <MX_TIM1_Init+0x180>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a6:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <MX_TIM1_Init+0x180>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <MX_TIM1_Init+0x180>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b2:	4845      	ldr	r0, [pc, #276]	; (80017c8 <MX_TIM1_Init+0x180>)
 80016b4:	f006 fc5b 	bl	8007f6e <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016be:	f000 faa1 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016cc:	4619      	mov	r1, r3
 80016ce:	483e      	ldr	r0, [pc, #248]	; (80017c8 <MX_TIM1_Init+0x180>)
 80016d0:	f007 f87e 	bl	80087d0 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016da:	f000 fa93 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016de:	483a      	ldr	r0, [pc, #232]	; (80017c8 <MX_TIM1_Init+0x180>)
 80016e0:	f006 fc94 	bl	800800c <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016ea:	f000 fa8b 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016fa:	4619      	mov	r1, r3
 80016fc:	4832      	ldr	r0, [pc, #200]	; (80017c8 <MX_TIM1_Init+0x180>)
 80016fe:	f007 fdd5 	bl	80092ac <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001708:	f000 fa7c 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	4825      	ldr	r0, [pc, #148]	; (80017c8 <MX_TIM1_Init+0x180>)
 8001732:	f006 ff8b 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800173c:	f000 fa62 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	2204      	movs	r2, #4
 8001746:	4619      	mov	r1, r3
 8001748:	481f      	ldr	r0, [pc, #124]	; (80017c8 <MX_TIM1_Init+0x180>)
 800174a:	f006 ff7f 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001754:	f000 fa56 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	2208      	movs	r2, #8
 800175e:	4619      	mov	r1, r3
 8001760:	4819      	ldr	r0, [pc, #100]	; (80017c8 <MX_TIM1_Init+0x180>)
 8001762:	f006 ff73 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800176c:	f000 fa4a 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	220c      	movs	r2, #12
 8001776:	4619      	mov	r1, r3
 8001778:	4813      	ldr	r0, [pc, #76]	; (80017c8 <MX_TIM1_Init+0x180>)
 800177a:	f006 ff67 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001784:	f000 fa3e 	bl	8001c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800179c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM1_Init+0x180>)
 80017ac:	f007 fdfa 	bl	80093a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80017b6:	f000 fa25 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM1_Init+0x180>)
 80017bc:	f001 f8fa 	bl	80029b4 <HAL_TIM_MspPostInit>

}
 80017c0:	bf00      	nop
 80017c2:	3758      	adds	r7, #88	; 0x58
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000160 	.word	0x20000160
 80017cc:	40010000 	.word	0x40010000

080017d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <MX_TIM2_Init+0x128>)
 8001802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <MX_TIM2_Init+0x128>)
 800180a:	2215      	movs	r2, #21
 800180c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <MX_TIM2_Init+0x128>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <MX_TIM2_Init+0x128>)
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <MX_TIM2_Init+0x128>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <MX_TIM2_Init+0x128>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001828:	4833      	ldr	r0, [pc, #204]	; (80018f8 <MX_TIM2_Init+0x128>)
 800182a:	f006 fba0 	bl	8007f6e <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001834:	f000 f9e6 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	4619      	mov	r1, r3
 8001844:	482c      	ldr	r0, [pc, #176]	; (80018f8 <MX_TIM2_Init+0x128>)
 8001846:	f006 ffc3 	bl	80087d0 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001850:	f000 f9d8 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001854:	4828      	ldr	r0, [pc, #160]	; (80018f8 <MX_TIM2_Init+0x128>)
 8001856:	f006 fbd9 	bl	800800c <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001860:	f000 f9d0 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800186c:	f107 0320 	add.w	r3, r7, #32
 8001870:	4619      	mov	r1, r3
 8001872:	4821      	ldr	r0, [pc, #132]	; (80018f8 <MX_TIM2_Init+0x128>)
 8001874:	f007 fd1a 	bl	80092ac <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800187e:	f000 f9c1 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001882:	2360      	movs	r3, #96	; 0x60
 8001884:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	4619      	mov	r1, r3
 8001898:	4817      	ldr	r0, [pc, #92]	; (80018f8 <MX_TIM2_Init+0x128>)
 800189a:	f006 fed7 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80018a4:	f000 f9ae 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2204      	movs	r2, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <MX_TIM2_Init+0x128>)
 80018b0:	f006 fecc 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80018ba:	f000 f9a3 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2208      	movs	r2, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_TIM2_Init+0x128>)
 80018c6:	f006 fec1 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80018d0:	f000 f998 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	220c      	movs	r2, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_TIM2_Init+0x128>)
 80018dc:	f006 feb6 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80018e6:	f000 f98d 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_TIM2_Init+0x128>)
 80018ec:	f001 f862 	bl	80029b4 <HAL_TIM_MspPostInit>

}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001a8 	.word	0x200001a8

080018fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_TIM3_Init+0x94>)
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <MX_TIM3_Init+0x98>)
 800191c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MX_TIM3_Init+0x94>)
 8001920:	2254      	movs	r2, #84	; 0x54
 8001922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_TIM3_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_TIM3_Init+0x94>)
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_TIM3_Init+0x94>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_TIM3_Init+0x94>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800193e:	4814      	ldr	r0, [pc, #80]	; (8001990 <MX_TIM3_Init+0x94>)
 8001940:	f006 fb15 	bl	8007f6e <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800194a:	f000 f95b 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <MX_TIM3_Init+0x94>)
 800195c:	f006 ff38 	bl	80087d0 <HAL_TIM_ConfigClockSource>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001966:	f000 f94d 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <MX_TIM3_Init+0x94>)
 8001978:	f007 fc98 	bl	80092ac <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001982:	f000 f93f 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200001f0 	.word	0x200001f0
 8001994:	40000400 	.word	0x40000400

08001998 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0318 	add.w	r3, r7, #24
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 80019c4:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <MX_TIM4_Init+0x120>)
 80019c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 80019ca:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80019ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000;
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 80019d8:	f24a 4210 	movw	r2, #42000	; 0xa410
 80019dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ea:	4832      	ldr	r0, [pc, #200]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 80019ec:	f006 fabf 	bl	8007f6e <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80019f6:	f000 f905 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	4619      	mov	r1, r3
 8001a06:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 8001a08:	f006 fee2 	bl	80087d0 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a12:	f000 f8f7 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a16:	4827      	ldr	r0, [pc, #156]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 8001a18:	f006 fc1a 	bl	8008250 <HAL_TIM_IC_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001a22:	f000 f8ef 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	4619      	mov	r1, r3
 8001a34:	481f      	ldr	r0, [pc, #124]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 8001a36:	f007 fc39 	bl	80092ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001a40:	f000 f8e0 	bl	8001c04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a44:	230a      	movs	r3, #10
 8001a46:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 8001a5c:	f006 fd59 	bl	8008512 <HAL_TIM_IC_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001a66:	f000 f8cd 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 8001a72:	f006 fd4e 	bl	8008512 <HAL_TIM_IC_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001a7c:	f000 f8c2 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a80:	463b      	mov	r3, r7
 8001a82:	2208      	movs	r2, #8
 8001a84:	4619      	mov	r1, r3
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 8001a88:	f006 fd43 	bl	8008512 <HAL_TIM_IC_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001a92:	f000 f8b7 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	220c      	movs	r2, #12
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_TIM4_Init+0x11c>)
 8001a9e:	f006 fd38 	bl	8008512 <HAL_TIM_IC_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001aa8:	f000 f8ac 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000238 	.word	0x20000238
 8001ab8:	40000800 	.word	0x40000800

08001abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <MX_USART1_UART_Init+0x50>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001af4:	f007 fcbc 	bl	8009470 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001afe:	f000 f881 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000280 	.word	0x20000280
 8001b0c:	40011000 	.word	0x40011000

08001b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_GPIO_Init+0xec>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	21c0      	movs	r1, #192	; 0xc0
 8001bd2:	480b      	ldr	r0, [pc, #44]	; (8001c00 <MX_GPIO_Init+0xf0>)
 8001bd4:	f002 ff44 	bl	8004a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd8:	23c0      	movs	r3, #192	; 0xc0
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_GPIO_Init+0xf0>)
 8001bf0:	f002 fd82 	bl	80046f8 <HAL_GPIO_Init>

}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	; 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>

08001c0e <MPU6050_init>:
#define MPU6050_I2C_ADDR 0xD0

uint8_t i2c_rx_buffer[32] = {0};

int MPU6050_init(mpu6050_t *mpu6050, I2C_HandleTypeDef *i2c,
    uint8_t data_rate, MPU6050_Accelerometer accel, MPU6050_Gyroscope gyro) {
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b08a      	sub	sp, #40	; 0x28
 8001c12:	af02      	add	r7, sp, #8
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
  int counter;

  // Hold i2c
  mpu6050->i2c = i2c;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	601a      	str	r2, [r3, #0]

  // Update device address, 2 addresses: 0x00, 0x02. Using 0x00
  mpu6050->address = (uint8_t) MPU6050_I2C_ADDR | (uint8_t) 0x00;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	22d0      	movs	r2, #208	; 0xd0
 8001c2e:	711a      	strb	r2, [r3, #4]

  // Check device state
  for (counter = 0; counter < 5; counter += 1) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e00a      	b.n	8001c4c <MPU6050_init+0x3e>
    if (HAL_I2C_GetState(mpu6050->i2c) == HAL_I2C_STATE_READY) {
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fee0 	bl	8005a00 <HAL_I2C_GetState>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d006      	beq.n	8001c54 <MPU6050_init+0x46>
  for (counter = 0; counter < 5; counter += 1) {
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	ddf1      	ble.n	8001c36 <MPU6050_init+0x28>
 8001c52:	e000      	b.n	8001c56 <MPU6050_init+0x48>
      break;
 8001c54:	bf00      	nop
    }
  }
  if (counter >= 5) return 1;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	dd01      	ble.n	8001c60 <MPU6050_init+0x52>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e160      	b.n	8001f22 <MPU6050_init+0x314>

  // Check MPU id
  uint8_t whoiam = 0x75;
 8001c60:	2375      	movs	r3, #117	; 0x75
 8001c62:	76fb      	strb	r3, [r7, #27]
  uint8_t whoiam_res;
  for (counter = 0; counter < 5; counter += 1) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e011      	b.n	8001c8e <MPU6050_init+0x80>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &whoiam, 1, 100) == HAL_OK) {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	791b      	ldrb	r3, [r3, #4]
 8001c72:	b299      	uxth	r1, r3
 8001c74:	f107 021b 	add.w	r2, r7, #27
 8001c78:	2364      	movs	r3, #100	; 0x64
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f003 f867 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <MPU6050_init+0x88>
  for (counter = 0; counter < 5; counter += 1) {
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	ddea      	ble.n	8001c6a <MPU6050_init+0x5c>
 8001c94:	e000      	b.n	8001c98 <MPU6050_init+0x8a>
      break;
 8001c96:	bf00      	nop
    }
  }
  if (counter >= 5) return 3;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	dd01      	ble.n	8001ca2 <MPU6050_init+0x94>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e13f      	b.n	8001f22 <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e011      	b.n	8001ccc <MPU6050_init+0xbe>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &whoiam_res, 1, 100) == HAL_OK) {
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	f107 021a 	add.w	r2, r7, #26
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f003 f946 	bl	8004f4c <HAL_I2C_Master_Receive>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <MPU6050_init+0xc6>
  for (counter = 0; counter < 5; counter += 1) {
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	ddea      	ble.n	8001ca8 <MPU6050_init+0x9a>
 8001cd2:	e000      	b.n	8001cd6 <MPU6050_init+0xc8>
      break;
 8001cd4:	bf00      	nop
    }
  }
  if (counter >= 5) return 4;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	dd01      	ble.n	8001ce0 <MPU6050_init+0xd2>
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e120      	b.n	8001f22 <MPU6050_init+0x314>

  if (whoiam_res != 0x68) return 5;
 8001ce0:	7ebb      	ldrb	r3, [r7, #26]
 8001ce2:	2b68      	cmp	r3, #104	; 0x68
 8001ce4:	d001      	beq.n	8001cea <MPU6050_init+0xdc>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e11b      	b.n	8001f22 <MPU6050_init+0x314>

  // Wake up MPU6050
  uint8_t weakup_req[2] = {0x6B, 0x00};
 8001cea:	236b      	movs	r3, #107	; 0x6b
 8001cec:	833b      	strh	r3, [r7, #24]
  for (counter = 0; counter < 5; counter += 1) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e011      	b.n	8001d18 <MPU6050_init+0x10a>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, weakup_req, 2, 100) == HAL_OK) {
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	b299      	uxth	r1, r3
 8001cfe:	f107 0218 	add.w	r2, r7, #24
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2302      	movs	r3, #2
 8001d08:	f003 f822 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <MPU6050_init+0x112>
  for (counter = 0; counter < 5; counter += 1) {
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	ddea      	ble.n	8001cf4 <MPU6050_init+0xe6>
 8001d1e:	e000      	b.n	8001d22 <MPU6050_init+0x114>
      break;
 8001d20:	bf00      	nop
    }
  }
  if (counter >= 5) return 6;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	dd01      	ble.n	8001d2c <MPU6050_init+0x11e>
 8001d28:	2306      	movs	r3, #6
 8001d2a:	e0fa      	b.n	8001f22 <MPU6050_init+0x314>

  // Set data rate
  uint8_t data_rate_req[2] = {0x19, data_rate};
 8001d2c:	2319      	movs	r3, #25
 8001d2e:	753b      	strb	r3, [r7, #20]
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	757b      	strb	r3, [r7, #21]
  for (counter = 0; counter < 5; counter += 1) {
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	e011      	b.n	8001d5e <MPU6050_init+0x150>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, data_rate_req, 2, 100) == HAL_OK) {
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	b299      	uxth	r1, r3
 8001d44:	f107 0214 	add.w	r2, r7, #20
 8001d48:	2364      	movs	r3, #100	; 0x64
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f002 ffff 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <MPU6050_init+0x158>
  for (counter = 0; counter < 5; counter += 1) {
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	ddea      	ble.n	8001d3a <MPU6050_init+0x12c>
 8001d64:	e000      	b.n	8001d68 <MPU6050_init+0x15a>
      break;
 8001d66:	bf00      	nop
    }
  }
  if (counter >= 5) return 7;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	dd01      	ble.n	8001d72 <MPU6050_init+0x164>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e0d7      	b.n	8001f22 <MPU6050_init+0x314>

  // Set accel config
  uint8_t accel_config = 0x1C;
 8001d72:	231c      	movs	r3, #28
 8001d74:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e011      	b.n	8001da0 <MPU6050_init+0x192>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	791b      	ldrb	r3, [r3, #4]
 8001d84:	b299      	uxth	r1, r3
 8001d86:	f107 0213 	add.w	r2, r7, #19
 8001d8a:	2364      	movs	r3, #100	; 0x64
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f002 ffde 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <MPU6050_init+0x19a>
  for (counter = 0; counter < 5; counter += 1) {
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	ddea      	ble.n	8001d7c <MPU6050_init+0x16e>
 8001da6:	e000      	b.n	8001daa <MPU6050_init+0x19c>
      break;
 8001da8:	bf00      	nop
    }
  }
  if (counter >= 5) return 8;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	dd01      	ble.n	8001db4 <MPU6050_init+0x1a6>
 8001db0:	2308      	movs	r3, #8
 8001db2:	e0b6      	b.n	8001f22 <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	e011      	b.n	8001dde <MPU6050_init+0x1d0>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	b299      	uxth	r1, r3
 8001dc4:	f107 0213 	add.w	r2, r7, #19
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f003 f8bd 	bl	8004f4c <HAL_I2C_Master_Receive>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <MPU6050_init+0x1d8>
  for (counter = 0; counter < 5; counter += 1) {
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	ddea      	ble.n	8001dba <MPU6050_init+0x1ac>
 8001de4:	e000      	b.n	8001de8 <MPU6050_init+0x1da>
      break;
 8001de6:	bf00      	nop
    }
  }
  if (counter >= 5) return 9;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	dd01      	ble.n	8001df2 <MPU6050_init+0x1e4>
 8001dee:	2309      	movs	r3, #9
 8001df0:	e097      	b.n	8001f22 <MPU6050_init+0x314>

  accel_config = (accel_config & 0xE7) | (uint8_t)accel << 3;
 8001df2:	7cfb      	ldrb	r3, [r7, #19]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	f023 0318 	bic.w	r3, r3, #24
 8001dfa:	b25a      	sxtb	r2, r3
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e011      	b.n	8001e34 <MPU6050_init+0x226>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &accel_config, 1, 100) == HAL_OK) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	791b      	ldrb	r3, [r3, #4]
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	f107 0213 	add.w	r2, r7, #19
 8001e1e:	2364      	movs	r3, #100	; 0x64
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	f002 ff94 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <MPU6050_init+0x22e>
  for (counter = 0; counter < 5; counter += 1) {
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	ddea      	ble.n	8001e10 <MPU6050_init+0x202>
 8001e3a:	e000      	b.n	8001e3e <MPU6050_init+0x230>
      break;
 8001e3c:	bf00      	nop
    }
  }
  if (counter >= 5) return 10;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	dd01      	ble.n	8001e48 <MPU6050_init+0x23a>
 8001e44:	230a      	movs	r3, #10
 8001e46:	e06c      	b.n	8001f22 <MPU6050_init+0x314>

  // Set gyro config
  uint8_t gyro_config = 0x1B;
 8001e48:	231b      	movs	r3, #27
 8001e4a:	74bb      	strb	r3, [r7, #18]
  for (counter = 0; counter < 5; counter += 1) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	e011      	b.n	8001e76 <MPU6050_init+0x268>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	791b      	ldrb	r3, [r3, #4]
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	f107 0212 	add.w	r2, r7, #18
 8001e60:	2364      	movs	r3, #100	; 0x64
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	f002 ff73 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <MPU6050_init+0x270>
  for (counter = 0; counter < 5; counter += 1) {
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3301      	adds	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	ddea      	ble.n	8001e52 <MPU6050_init+0x244>
 8001e7c:	e000      	b.n	8001e80 <MPU6050_init+0x272>
      break;
 8001e7e:	bf00      	nop
    }
  }
  if (counter >= 5) return 11;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	dd01      	ble.n	8001e8a <MPU6050_init+0x27c>
 8001e86:	230b      	movs	r3, #11
 8001e88:	e04b      	b.n	8001f22 <MPU6050_init+0x314>

  for (counter = 0; counter < 5; counter += 1) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e011      	b.n	8001eb4 <MPU6050_init+0x2a6>
    if (HAL_I2C_Master_Receive(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	f107 0212 	add.w	r2, r7, #18
 8001e9e:	2364      	movs	r3, #100	; 0x64
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f003 f852 	bl	8004f4c <HAL_I2C_Master_Receive>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <MPU6050_init+0x2ae>
  for (counter = 0; counter < 5; counter += 1) {
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	ddea      	ble.n	8001e90 <MPU6050_init+0x282>
 8001eba:	e000      	b.n	8001ebe <MPU6050_init+0x2b0>
      break;
 8001ebc:	bf00      	nop
    }
  }
  if (counter >= 5) return 12;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	dd01      	ble.n	8001ec8 <MPU6050_init+0x2ba>
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	e02c      	b.n	8001f22 <MPU6050_init+0x314>

  accel_config = (accel_config & 0xE7) | (uint8_t)gyro << 3;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	f023 0318 	bic.w	r3, r3, #24
 8001ed0:	b25a      	sxtb	r2, r3
 8001ed2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	b25b      	sxtb	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	74fb      	strb	r3, [r7, #19]
  for (counter = 0; counter < 5; counter += 1) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e011      	b.n	8001f0c <MPU6050_init+0x2fe>
    if (HAL_I2C_Master_Transmit(mpu6050->i2c, mpu6050->address, &gyro_config, 1, 100) == HAL_OK) {
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	f107 0212 	add.w	r2, r7, #18
 8001ef6:	2364      	movs	r3, #100	; 0x64
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	f002 ff28 	bl	8004d50 <HAL_I2C_Master_Transmit>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <MPU6050_init+0x306>
  for (counter = 0; counter < 5; counter += 1) {
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	ddea      	ble.n	8001ee8 <MPU6050_init+0x2da>
 8001f12:	e000      	b.n	8001f16 <MPU6050_init+0x308>
      break;
 8001f14:	bf00      	nop
    }
  }
  if (counter >= 5) return 13;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	dd01      	ble.n	8001f20 <MPU6050_init+0x312>
 8001f1c:	230d      	movs	r3, #13
 8001f1e:	e000      	b.n	8001f22 <MPU6050_init+0x314>

  return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <MPU6050_update>:

void MPU6050_update(mpu6050_t *mpu6050) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  HAL_I2C_Mem_Read_IT(mpu6050->i2c, mpu6050->address, 0x3B, 1, i2c_rx_buffer, 14);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	791b      	ldrb	r3, [r3, #4]
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	230e      	movs	r3, #14
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <MPU6050_update+0x2c>)
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	223b      	movs	r2, #59	; 0x3b
 8001f4a:	f003 fa25 	bl	8005398 <HAL_I2C_Mem_Read_IT>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200005cc 	.word	0x200005cc

08001f5c <MPU6050_i2c_mem_read_cb_handler>:

void MPU6050_i2c_mem_read_cb_handler(mpu6050_t *mpu6050) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  // Read MPU6050
  mpu6050->ax = (int16_t)(i2c_rx_buffer[0] << 8 | i2c_rx_buffer[1]);
 8001f64:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f6e:	785b      	ldrb	r3, [r3, #1]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	edc3 7a02 	vstr	s15, [r3, #8]
  mpu6050->ay = (int16_t)(i2c_rx_buffer[2] << 8 | i2c_rx_buffer[3]);
 8001f84:	4b37      	ldr	r3, [pc, #220]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f86:	789b      	ldrb	r3, [r3, #2]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001f8e:	78db      	ldrb	r3, [r3, #3]
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edc3 7a03 	vstr	s15, [r3, #12]
  mpu6050->az = (int16_t)(i2c_rx_buffer[4] << 8 | i2c_rx_buffer[5]);
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001fa6:	791b      	ldrb	r3, [r3, #4]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001fae:	795b      	ldrb	r3, [r3, #5]
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	edc3 7a04 	vstr	s15, [r3, #16]

  int16_t temp = (i2c_rx_buffer[6] << 8 | i2c_rx_buffer[7]);
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001fc6:	799b      	ldrb	r3, [r3, #6]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001fce:	79db      	ldrb	r3, [r3, #7]
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	81fb      	strh	r3, [r7, #14]
  mpu6050->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002068 <MPU6050_i2c_mem_read_cb_handler+0x10c>
 8001fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800206c <MPU6050_i2c_mem_read_cb_handler+0x110>
 8001fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	edc3 7a05 	vstr	s15, [r3, #20]

  mpu6050->gx = (int16_t)(i2c_rx_buffer[8] << 8 | i2c_rx_buffer[9]);
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8001ffa:	7a1b      	ldrb	r3, [r3, #8]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8002002:	7a5b      	ldrb	r3, [r3, #9]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	edc3 7a06 	vstr	s15, [r3, #24]
  mpu6050->gy = (int16_t)(i2c_rx_buffer[10] << 8 | i2c_rx_buffer[11]);
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 800201a:	7a9b      	ldrb	r3, [r3, #10]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b21a      	sxth	r2, r3
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8002022:	7adb      	ldrb	r3, [r3, #11]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b21b      	sxth	r3, r3
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	edc3 7a07 	vstr	s15, [r3, #28]
  mpu6050->gz = (int16_t)(i2c_rx_buffer[12] << 8 | i2c_rx_buffer[13]);
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 800203a:	7b1b      	ldrb	r3, [r3, #12]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b21a      	sxth	r2, r3
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MPU6050_i2c_mem_read_cb_handler+0x108>)
 8002042:	7b5b      	ldrb	r3, [r3, #13]
 8002044:	b21b      	sxth	r3, r3
 8002046:	4313      	orrs	r3, r2
 8002048:	b21b      	sxth	r3, r3
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	200005cc 	.word	0x200005cc
 8002068:	43aa0000 	.word	0x43aa0000
 800206c:	42121eb8 	.word	0x42121eb8

08002070 <_reset>:
#define TEMP_OSR_512 0x52
#define TEMP_OSR_1024 0x54
#define TEMP_OSR_2048 0x56
#define TEMP_OSR_4096 0x58

void _reset(ms5611_t *ms5611) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af02      	add	r7, sp, #8
 8002076:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_RESET;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	221e      	movs	r2, #30
 800207c:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1 , &ms5611->tx, 1, 100);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 0216 	add.w	r2, r3, #22
 8002088:	2364      	movs	r3, #100	; 0x64
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2301      	movs	r3, #1
 800208e:	21ee      	movs	r1, #238	; 0xee
 8002090:	f002 fe5e 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8002094:	200a      	movs	r0, #10
 8002096:	f002 f959 	bl	800434c <HAL_Delay>

  // For Temperature > 20 Celsius
  ms5611->T2 = 0;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	651a      	str	r2, [r3, #80]	; 0x50
  ms5611->OFF2 = 0;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	64da      	str	r2, [r3, #76]	; 0x4c
  ms5611->SENS2 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_read_PROM>:

void _read_PROM(ms5611_t *ms5611) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	6078      	str	r0, [r7, #4]
  ms5611->tx = CMD_PROM_C0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	22a0      	movs	r2, #160	; 0xa0
 80020c0:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f103 0216 	add.w	r2, r3, #22
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	21ee      	movs	r1, #238	; 0xee
 80020d4:	f002 fe3c 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	2364      	movs	r3, #100	; 0x64
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2302      	movs	r3, #2
 80020e6:	21ee      	movs	r1, #238	; 0xee
 80020e8:	f002 ff30 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[0] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	795b      	ldrb	r3, [r3, #5]
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	831a      	strh	r2, [r3, #24]
  HAL_Delay(10);
 8002104:	200a      	movs	r0, #10
 8002106:	f002 f921 	bl	800434c <HAL_Delay>

  ms5611->tx = CMD_PROM_C1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	22a2      	movs	r2, #162	; 0xa2
 800210e:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f103 0216 	add.w	r2, r3, #22
 800211a:	2364      	movs	r3, #100	; 0x64
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	21ee      	movs	r1, #238	; 0xee
 8002122:	f002 fe15 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1d1a      	adds	r2, r3, #4
 800212e:	2364      	movs	r3, #100	; 0x64
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2302      	movs	r3, #2
 8002134:	21ee      	movs	r1, #238	; 0xee
 8002136:	f002 ff09 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[1] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	791b      	ldrb	r3, [r3, #4]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b21a      	sxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	795b      	ldrb	r3, [r3, #5]
 8002146:	b21b      	sxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b21b      	sxth	r3, r3
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	835a      	strh	r2, [r3, #26]
  HAL_Delay(10);
 8002152:	200a      	movs	r0, #10
 8002154:	f002 f8fa 	bl	800434c <HAL_Delay>

  ms5611->tx = CMD_PROM_C2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	22a4      	movs	r2, #164	; 0xa4
 800215c:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f103 0216 	add.w	r2, r3, #22
 8002168:	2364      	movs	r3, #100	; 0x64
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	21ee      	movs	r1, #238	; 0xee
 8002170:	f002 fdee 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	1d1a      	adds	r2, r3, #4
 800217c:	2364      	movs	r3, #100	; 0x64
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2302      	movs	r3, #2
 8002182:	21ee      	movs	r1, #238	; 0xee
 8002184:	f002 fee2 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[2] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	791b      	ldrb	r3, [r3, #4]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21a      	sxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	795b      	ldrb	r3, [r3, #5]
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21b      	sxth	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	839a      	strh	r2, [r3, #28]
  HAL_Delay(10);
 80021a0:	200a      	movs	r0, #10
 80021a2:	f002 f8d3 	bl	800434c <HAL_Delay>

  ms5611->tx = CMD_PROM_C3;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	22a6      	movs	r2, #166	; 0xa6
 80021aa:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0216 	add.w	r2, r3, #22
 80021b6:	2364      	movs	r3, #100	; 0x64
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	21ee      	movs	r1, #238	; 0xee
 80021be:	f002 fdc7 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	1d1a      	adds	r2, r3, #4
 80021ca:	2364      	movs	r3, #100	; 0x64
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2302      	movs	r3, #2
 80021d0:	21ee      	movs	r1, #238	; 0xee
 80021d2:	f002 febb 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[3] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	791b      	ldrb	r3, [r3, #4]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b21a      	sxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	795b      	ldrb	r3, [r3, #5]
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	83da      	strh	r2, [r3, #30]
  HAL_Delay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f002 f8ac 	bl	800434c <HAL_Delay>

  ms5611->tx = CMD_PROM_C4;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	22a8      	movs	r2, #168	; 0xa8
 80021f8:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f103 0216 	add.w	r2, r3, #22
 8002204:	2364      	movs	r3, #100	; 0x64
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	21ee      	movs	r1, #238	; 0xee
 800220c:	f002 fda0 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1d1a      	adds	r2, r3, #4
 8002218:	2364      	movs	r3, #100	; 0x64
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2302      	movs	r3, #2
 800221e:	21ee      	movs	r1, #238	; 0xee
 8002220:	f002 fe94 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[4] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	791b      	ldrb	r3, [r3, #4]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	b21a      	sxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	795b      	ldrb	r3, [r3, #5]
 8002230:	b21b      	sxth	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b21b      	sxth	r3, r3
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	841a      	strh	r2, [r3, #32]
  HAL_Delay(10);
 800223c:	200a      	movs	r0, #10
 800223e:	f002 f885 	bl	800434c <HAL_Delay>

  ms5611->tx = CMD_PROM_C5;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	22aa      	movs	r2, #170	; 0xaa
 8002246:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 0216 	add.w	r2, r3, #22
 8002252:	2364      	movs	r3, #100	; 0x64
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2301      	movs	r3, #1
 8002258:	21ee      	movs	r1, #238	; 0xee
 800225a:	f002 fd79 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	1d1a      	adds	r2, r3, #4
 8002266:	2364      	movs	r3, #100	; 0x64
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2302      	movs	r3, #2
 800226c:	21ee      	movs	r1, #238	; 0xee
 800226e:	f002 fe6d 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[5] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	791b      	ldrb	r3, [r3, #4]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	795b      	ldrb	r3, [r3, #5]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21b      	sxth	r3, r3
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	845a      	strh	r2, [r3, #34]	; 0x22
  HAL_Delay(10);
 800228a:	200a      	movs	r0, #10
 800228c:	f002 f85e 	bl	800434c <HAL_Delay>

  ms5611->tx = CMD_PROM_C6;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	22ac      	movs	r2, #172	; 0xac
 8002294:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 0216 	add.w	r2, r3, #22
 80022a0:	2364      	movs	r3, #100	; 0x64
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2301      	movs	r3, #1
 80022a6:	21ee      	movs	r1, #238	; 0xee
 80022a8:	f002 fd52 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	1d1a      	adds	r2, r3, #4
 80022b4:	2364      	movs	r3, #100	; 0x64
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2302      	movs	r3, #2
 80022ba:	21ee      	movs	r1, #238	; 0xee
 80022bc:	f002 fe46 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[6] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	791b      	ldrb	r3, [r3, #4]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	795b      	ldrb	r3, [r3, #5]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	849a      	strh	r2, [r3, #36]	; 0x24
  HAL_Delay(10);
 80022d8:	200a      	movs	r0, #10
 80022da:	f002 f837 	bl	800434c <HAL_Delay>

  ms5611->tx = CMD_PROM_C7;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	22ae      	movs	r2, #174	; 0xae
 80022e2:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0216 	add.w	r2, r3, #22
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	21ee      	movs	r1, #238	; 0xee
 80022f6:	f002 fd2b 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, MS5611_ADDR << 1 , ms5611->rx_buf, 2, 100);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	1d1a      	adds	r2, r3, #4
 8002302:	2364      	movs	r3, #100	; 0x64
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2302      	movs	r3, #2
 8002308:	21ee      	movs	r1, #238	; 0xee
 800230a:	f002 fe1f 	bl	8004f4c <HAL_I2C_Master_Receive>
  ms5611->C[7] = ms5611->rx_buf[0] << 8 | ms5611->rx_buf[1];
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	791b      	ldrb	r3, [r3, #4]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b21a      	sxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	795b      	ldrb	r3, [r3, #5]
 800231a:	b21b      	sxth	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b21b      	sxth	r3, r3
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_Delay(10);
 8002326:	200a      	movs	r0, #10
 8002328:	f002 f810 	bl	800434c <HAL_Delay>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <MS5611_init>:

int MS5611_init(ms5611_t *ms5611, I2C_HandleTypeDef *i2c) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  ms5611->i2c = i2c;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	601a      	str	r2, [r3, #0]

  _reset(ms5611);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fe93 	bl	8002070 <_reset>
  _read_PROM(ms5611);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff feb2 	bl	80020b4 <_read_PROM>

  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <MS5611_req_temperature>:

void MS5611_req_temperature(ms5611_t *ms5611, OSR osr) {
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af02      	add	r7, sp, #8
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = TEMP_OSR_256 + (2 * osr);
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	3328      	adds	r3, #40	; 0x28
 800236a:	b2db      	uxtb	r3, r3
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 0216 	add.w	r2, r3, #22
 800237e:	2364      	movs	r3, #100	; 0x64
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2301      	movs	r3, #1
 8002384:	21ee      	movs	r1, #238	; 0xee
 8002386:	f002 fce3 	bl	8004d50 <HAL_I2C_Master_Transmit>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <MS5611_req_pressure>:

void MS5611_req_pressure(ms5611_t *ms5611, OSR osr) {
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af02      	add	r7, sp, #8
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	70fb      	strb	r3, [r7, #3]
  ms5611->tx = PRESSURE_OSR_256 + (2 * osr);
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	3320      	adds	r3, #32
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0216 	add.w	r2, r3, #22
 80023b6:	2364      	movs	r3, #100	; 0x64
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	21ee      	movs	r1, #238	; 0xee
 80023be:	f002 fcc7 	bl	8004d50 <HAL_I2C_Master_Transmit>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <MS5611_read_temperature>:

void MS5611_read_temperature(ms5611_t *ms5611) {
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af02      	add	r7, sp, #8
 80023d0:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0216 	add.w	r2, r3, #22
 80023e2:	2364      	movs	r3, #100	; 0x64
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	21ee      	movs	r1, #238	; 0xee
 80023ea:	f002 fcb1 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_temp, 3, 100);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f103 0210 	add.w	r2, r3, #16
 80023f8:	2364      	movs	r3, #100	; 0x64
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2303      	movs	r3, #3
 80023fe:	21ef      	movs	r1, #239	; 0xef
 8002400:	f002 fda4 	bl	8004f4c <HAL_I2C_Master_Receive>
//  HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1 , 0x00, 1, ms5611->rx_temp, 3, 100);

  ms5611->digi_tem_D2 = (ms5611->rx_temp[0] << 16) | (ms5611->rx_temp[1] << 8) | ms5611->rx_temp[2];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7c1b      	ldrb	r3, [r3, #16]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7c5b      	ldrb	r3, [r3, #17]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	4313      	orrs	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	7c92      	ldrb	r2, [r2, #18]
 8002416:	4313      	orrs	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <MS5611_read_pressure>:

void MS5611_read_pressure(ms5611_t *ms5611) {
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af02      	add	r7, sp, #8
 800242c:	6078      	str	r0, [r7, #4]
  //Read ADC
  ms5611->tx = 0x00;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	759a      	strb	r2, [r3, #22]
  HAL_I2C_Master_Transmit(ms5611->i2c, MS5611_ADDR << 1, &ms5611->tx, 1, 100);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f103 0216 	add.w	r2, r3, #22
 800243e:	2364      	movs	r3, #100	; 0x64
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2301      	movs	r3, #1
 8002444:	21ee      	movs	r1, #238	; 0xee
 8002446:	f002 fc83 	bl	8004d50 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(ms5611->i2c, (MS5611_ADDR << 1) | 0x01, ms5611->rx_press, 3, 100);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f103 0213 	add.w	r2, r3, #19
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2303      	movs	r3, #3
 800245a:	21ef      	movs	r1, #239	; 0xef
 800245c:	f002 fd76 	bl	8004f4c <HAL_I2C_Master_Receive>
  //HAL_I2C_Mem_Read(ms5611->i2c, MS5611_ADDR <<1, 0x00, 1, ms5611->rx_press, 3, 100);

  ms5611->digi_psr_D1 = ms5611->rx_press[0] << 16 | ms5611->rx_press[1] << 8 | ms5611->rx_press[2];
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7cdb      	ldrb	r3, [r3, #19]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7d1b      	ldrb	r3, [r3, #20]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4313      	orrs	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	7d52      	ldrb	r2, [r2, #21]
 8002472:	4313      	orrs	r3, r2
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <MS5611_calc_temperature>:

void MS5611_calc_temperature(ms5611_t *ms5611) {
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  ms5611->dT = ms5611->C[5];
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT <<= 8; // Calculated up to C5 * 2^8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	021a      	lsls	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT *= -1; // Apply negative sign
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	425a      	negs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  ms5611->dT += ms5611->digi_tem_D2; // = D2 - C5 * 2^8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	4413      	add	r3, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30

  ms5611->TEMP = ms5611->dT * ms5611->C[6];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	15da      	asrs	r2, r3, #23
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	635a      	str	r2, [r3, #52]	; 0x34
  ms5611->TEMP += 2000;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <MS5611_calc_pressure>:

void MS5611_calc_pressure(ms5611_t *ms5611) {
 80024ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f0:	b08c      	sub	sp, #48	; 0x30
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  ms5611->OFF = ms5611->C[2];
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	8b9b      	ldrh	r3, [r3, #28]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2200      	movs	r2, #0
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	61fa      	str	r2, [r7, #28]
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002508:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
  ms5611->OFF <<= 16; // Calculated up to C2 * 2^16
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002512:	f04f 0000 	mov.w	r0, #0
 8002516:	f04f 0100 	mov.w	r1, #0
 800251a:	0419      	lsls	r1, r3, #16
 800251c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002520:	0410      	lsls	r0, r2, #16
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
  ms5611->OFF += (ms5611->C[4] * ms5611->dT) >> 7;
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	8c1b      	ldrh	r3, [r3, #32]
 8002532:	461a      	mov	r2, r3
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	11db      	asrs	r3, r3, #7
 800253e:	17da      	asrs	r2, r3, #31
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	627a      	str	r2, [r7, #36]	; 0x24
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	18c3      	adds	r3, r0, r3
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	eb41 0303 	adc.w	r3, r1, r3
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002558:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38


  ms5611->SENS = ms5611->C[1];
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	8b5b      	ldrh	r3, [r3, #26]
 8002560:	b29b      	uxth	r3, r3
 8002562:	2200      	movs	r2, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800256e:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
  ms5611->SENS <<= 15; // Calculated up to C1 * 2^15
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	03cb      	lsls	r3, r1, #15
 8002582:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8002586:	03c2      	lsls	r2, r0, #15
 8002588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800258a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  ms5611->SENS += (ms5611->C[3] * ms5611->dT) >>8;
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002594:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002596:	8bc9      	ldrh	r1, [r1, #30]
 8002598:	4608      	mov	r0, r1
 800259a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800259c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800259e:	fb00 f101 	mul.w	r1, r0, r1
 80025a2:	1209      	asrs	r1, r1, #8
 80025a4:	17c8      	asrs	r0, r1, #31
 80025a6:	468a      	mov	sl, r1
 80025a8:	4683      	mov	fp, r0
 80025aa:	eb12 010a 	adds.w	r1, r2, sl
 80025ae:	6039      	str	r1, [r7, #0]
 80025b0:	eb43 030b 	adc.w	r3, r3, fp
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80025bc:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

  ms5611->P = ((ms5611->digi_psr_D1 * ms5611->SENS) / pow(2, 21) - ms5611->OFF) / pow(2, 15);
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	2200      	movs	r2, #0
 80025c6:	4698      	mov	r8, r3
 80025c8:	4691      	mov	r9, r2
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80025d0:	fb02 f009 	mul.w	r0, r2, r9
 80025d4:	fb08 f103 	mul.w	r1, r8, r3
 80025d8:	4401      	add	r1, r0
 80025da:	fba8 4502 	umull	r4, r5, r8, r2
 80025de:	194b      	adds	r3, r1, r5
 80025e0:	461d      	mov	r5, r3
 80025e2:	4620      	mov	r0, r4
 80025e4:	4629      	mov	r1, r5
 80025e6:	f7fd ffd9 	bl	800059c <__aeabi_l2d>
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MS5611_calc_pressure+0x158>)
 80025f0:	f7fe f92c 	bl	800084c <__aeabi_ddiv>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4614      	mov	r4, r2
 80025fa:	461d      	mov	r5, r3
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f7fd ffc9 	bl	800059c <__aeabi_l2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd fe39 	bl	8000288 <__aeabi_dsub>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MS5611_calc_pressure+0x15c>)
 8002624:	f7fe f912 	bl	800084c <__aeabi_ddiv>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	f7fe fa92 	bl	8000b58 <__aeabi_d2iz>
 8002634:	4602      	mov	r2, r0
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	649a      	str	r2, [r3, #72]	; 0x48
}
 800263a:	bf00      	nop
 800263c:	3730      	adds	r7, #48	; 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002644:	41400000 	.word	0x41400000
 8002648:	40e00000 	.word	0x40e00000

0800264c <MS5611_get_altitude>:

#define SEA_PRESSURE 1013.25f
float MS5611_get_altitude(float pressure, float temperature) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	ed87 0a01 	vstr	s0, [r7, #4]
 8002656:	edc7 0a00 	vstr	s1, [r7]
  return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 800265a:	edd7 7a01 	vldr	s15, [r7, #4]
 800265e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80026a4 <MS5611_get_altitude+0x58>
 8002662:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002666:	eddf 0a10 	vldr	s1, [pc, #64]	; 80026a8 <MS5611_get_altitude+0x5c>
 800266a:	eeb0 0a47 	vmov.f32	s0, s14
 800266e:	f008 fc0b 	bl	800ae88 <powf>
 8002672:	eef0 7a40 	vmov.f32	s15, s0
 8002676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800267a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800267e:	edd7 7a00 	vldr	s15, [r7]
 8002682:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80026ac <MS5611_get_altitude+0x60>
 8002686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80026b0 <MS5611_get_altitude+0x64>
 8002692:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002696:	eef0 7a66 	vmov.f32	s15, s13
}
 800269a:	eeb0 0a67 	vmov.f32	s0, s15
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	447d5000 	.word	0x447d5000
 80026a8:	3e42c9b7 	.word	0x3e42c9b7
 80026ac:	43889333 	.word	0x43889333
 80026b0:	3bd4fdf4 	.word	0x3bd4fdf4

080026b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <HAL_MspInit+0x4c>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_MspInit+0x4c>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <HAL_I2C_MspInit+0xa4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d13b      	bne.n	800279e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_I2C_MspInit+0xa8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <HAL_I2C_MspInit+0xa8>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_I2C_MspInit+0xa8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002742:	23c0      	movs	r3, #192	; 0xc0
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002746:	2312      	movs	r3, #18
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002752:	2304      	movs	r3, #4
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4814      	ldr	r0, [pc, #80]	; (80027b0 <HAL_I2C_MspInit+0xac>)
 800275e:	f001 ffcb 	bl	80046f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_I2C_MspInit+0xa8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_I2C_MspInit+0xa8>)
 800276c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_I2C_MspInit+0xa8>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	201f      	movs	r0, #31
 8002784:	f001 fee1 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002788:	201f      	movs	r0, #31
 800278a:	f001 fefa 	bl	8004582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	2020      	movs	r0, #32
 8002794:	f001 fed9 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002798:	2020      	movs	r0, #32
 800279a:	f001 fef2 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40005400 	.word	0x40005400
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020400 	.word	0x40020400

080027b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <HAL_SPI_MspInit+0xc0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d14a      	bne.n	800286c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_SPI_MspInit+0xc4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800282a:	230c      	movs	r3, #12
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800283a:	2305      	movs	r3, #5
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <HAL_SPI_MspInit+0xc8>)
 8002846:	f001 ff57 	bl	80046f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800284a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800284e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800285c:	2305      	movs	r3, #5
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	4806      	ldr	r0, [pc, #24]	; (8002880 <HAL_SPI_MspInit+0xcc>)
 8002868:	f001 ff46 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800286c:	bf00      	nop
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40003800 	.word	0x40003800
 8002878:	40023800 	.word	0x40023800
 800287c:	40020800 	.word	0x40020800
 8002880:	40020400 	.word	0x40020400

08002884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a3f      	ldr	r2, [pc, #252]	; (80029a0 <HAL_TIM_Base_MspInit+0x11c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a3d      	ldr	r2, [pc, #244]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c2:	e069      	b.n	8002998 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a33      	ldr	r2, [pc, #204]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]
}
 80028ea:	e055      	b.n	8002998 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <HAL_TIM_Base_MspInit+0x124>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d116      	bne.n	8002924 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	201d      	movs	r0, #29
 8002918:	f001 fe17 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800291c:	201d      	movs	r0, #29
 800291e:	f001 fe30 	bl	8004582 <HAL_NVIC_EnableIRQ>
}
 8002922:	e039      	b.n	8002998 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <HAL_TIM_Base_MspInit+0x128>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d134      	bne.n	8002998 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 8002954:	f043 0308 	orr.w	r3, r3, #8
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_TIM_Base_MspInit+0x120>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002966:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002978:	2302      	movs	r3, #2
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	480b      	ldr	r0, [pc, #44]	; (80029b0 <HAL_TIM_Base_MspInit+0x12c>)
 8002984:	f001 feb8 	bl	80046f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	201e      	movs	r0, #30
 800298e:	f001 fddc 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002992:	201e      	movs	r0, #30
 8002994:	f001 fdf5 	bl	8004582 <HAL_NVIC_EnableIRQ>
}
 8002998:	bf00      	nop
 800299a:	3730      	adds	r7, #48	; 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40020c00 	.word	0x40020c00

080029b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <HAL_TIM_MspPostInit+0xb0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d11f      	bne.n	8002a16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_TIM_MspPostInit+0xb4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_TIM_MspPostInit+0xb4>)
 80029e0:	f043 0310 	orr.w	r3, r3, #16
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <HAL_TIM_MspPostInit+0xb4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80029f2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4817      	ldr	r0, [pc, #92]	; (8002a6c <HAL_TIM_MspPostInit+0xb8>)
 8002a10:	f001 fe72 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a14:	e022      	b.n	8002a5c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d11d      	bne.n	8002a5c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_TIM_MspPostInit+0xb4>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_TIM_MspPostInit+0xb4>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_TIM_MspPostInit+0xb4>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4806      	ldr	r0, [pc, #24]	; (8002a70 <HAL_TIM_MspPostInit+0xbc>)
 8002a58:	f001 fe4e 	bl	80046f8 <HAL_GPIO_Init>
}
 8002a5c:	bf00      	nop
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_UART_MspInit+0x94>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d134      	bne.n	8002b00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_UART_MspInit+0x98>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <HAL_UART_MspInit+0x98>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_UART_MspInit+0x98>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_UART_MspInit+0x98>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_UART_MspInit+0x98>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_UART_MspInit+0x98>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ae0:	2307      	movs	r3, #7
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4809      	ldr	r0, [pc, #36]	; (8002b10 <HAL_UART_MspInit+0x9c>)
 8002aec:	f001 fe04 	bl	80046f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2025      	movs	r0, #37	; 0x25
 8002af6:	f001 fd28 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002afa:	2025      	movs	r0, #37	; 0x25
 8002afc:	f001 fd41 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020000 	.word	0x40020000

08002b14 <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b22:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002b26:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d501      	bpl.n	8002b3c <limit+0x28>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	e00b      	b.n	8002b54 <limit+0x40>
 8002b3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4c:	dd01      	ble.n	8002b52 <limit+0x3e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	e000      	b.n	8002b54 <limit+0x40>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	ee07 3a90 	vmov	s15, r3
}
 8002b58:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <ctl_motors_speed+0x34>)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <ctl_motors_speed+0x34>)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002b82:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <ctl_motors_speed+0x34>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <ctl_motors_speed+0x34>)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000

08002ba0 <calc_angles>:

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles() {
 8002ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba4:	af00      	add	r7, sp, #0
  // Angle calculation using integration
  gyro_angle[X] += (g_gx / (FREQ * SSF_GYRO));
 8002ba6:	4bd0      	ldr	r3, [pc, #832]	; (8002ee8 <calc_angles+0x348>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fccc 	bl	8000548 <__aeabi_f2d>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	460d      	mov	r5, r1
 8002bb4:	4bcd      	ldr	r3, [pc, #820]	; (8002eec <calc_angles+0x34c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fcc5 	bl	8000548 <__aeabi_f2d>
 8002bbe:	a3c2      	add	r3, pc, #776	; (adr r3, 8002ec8 <calc_angles+0x328>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fe42 	bl	800084c <__aeabi_ddiv>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fb5c 	bl	800028c <__adddf3>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fd ffe4 	bl	8000ba8 <__aeabi_d2f>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4ac1      	ldr	r2, [pc, #772]	; (8002ee8 <calc_angles+0x348>)
 8002be4:	6013      	str	r3, [r2, #0]
  gyro_angle[Y] += (-g_gy / (FREQ * SSF_GYRO)); // Change sign to match the accelerometer's one
 8002be6:	4bc0      	ldr	r3, [pc, #768]	; (8002ee8 <calc_angles+0x348>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcac 	bl	8000548 <__aeabi_f2d>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	4bbe      	ldr	r3, [pc, #760]	; (8002ef0 <calc_angles+0x350>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eef1 7a67 	vneg.f32	s15, s15
 8002bfe:	ee17 3a90 	vmov	r3, s15
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fca0 	bl	8000548 <__aeabi_f2d>
 8002c08:	a3af      	add	r3, pc, #700	; (adr r3, 8002ec8 <calc_angles+0x328>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fe1d 	bl	800084c <__aeabi_ddiv>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4620      	mov	r0, r4
 8002c18:	4629      	mov	r1, r5
 8002c1a:	f7fd fb37 	bl	800028c <__adddf3>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd ffbf 	bl	8000ba8 <__aeabi_d2f>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4aae      	ldr	r2, [pc, #696]	; (8002ee8 <calc_angles+0x348>)
 8002c2e:	6053      	str	r3, [r2, #4]

  // Transfer roll to pitch if IMU has yawed
  gyro_angle[Y] += gyro_angle[X] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002c30:	4bad      	ldr	r3, [pc, #692]	; (8002ee8 <calc_angles+0x348>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc87 	bl	8000548 <__aeabi_f2d>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	460d      	mov	r5, r1
 8002c3e:	4baa      	ldr	r3, [pc, #680]	; (8002ee8 <calc_angles+0x348>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc80 	bl	8000548 <__aeabi_f2d>
 8002c48:	4680      	mov	r8, r0
 8002c4a:	4689      	mov	r9, r1
 8002c4c:	4ba9      	ldr	r3, [pc, #676]	; (8002ef4 <calc_angles+0x354>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc79 	bl	8000548 <__aeabi_f2d>
 8002c56:	a39e      	add	r3, pc, #632	; (adr r3, 8002ed0 <calc_angles+0x330>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fccc 	bl	80005f8 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	ec43 2b17 	vmov	d7, r2, r3
 8002c68:	eeb0 0a47 	vmov.f32	s0, s14
 8002c6c:	eef0 0a67 	vmov.f32	s1, s15
 8002c70:	f007 ffe2 	bl	800ac38 <sin>
 8002c74:	ec53 2b10 	vmov	r2, r3, d0
 8002c78:	4640      	mov	r0, r8
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	f7fd fcbc 	bl	80005f8 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4620      	mov	r0, r4
 8002c86:	4629      	mov	r1, r5
 8002c88:	f7fd fb00 	bl	800028c <__adddf3>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f7fd ff88 	bl	8000ba8 <__aeabi_d2f>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a93      	ldr	r2, [pc, #588]	; (8002ee8 <calc_angles+0x348>)
 8002c9c:	6053      	str	r3, [r2, #4]
  gyro_angle[X] -= gyro_angle[Y] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002c9e:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <calc_angles+0x348>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc50 	bl	8000548 <__aeabi_f2d>
 8002ca8:	4604      	mov	r4, r0
 8002caa:	460d      	mov	r5, r1
 8002cac:	4b8e      	ldr	r3, [pc, #568]	; (8002ee8 <calc_angles+0x348>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc49 	bl	8000548 <__aeabi_f2d>
 8002cb6:	4680      	mov	r8, r0
 8002cb8:	4689      	mov	r9, r1
 8002cba:	4b8e      	ldr	r3, [pc, #568]	; (8002ef4 <calc_angles+0x354>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc42 	bl	8000548 <__aeabi_f2d>
 8002cc4:	a382      	add	r3, pc, #520	; (adr r3, 8002ed0 <calc_angles+0x330>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fc95 	bl	80005f8 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	ec43 2b17 	vmov	d7, r2, r3
 8002cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cda:	eef0 0a67 	vmov.f32	s1, s15
 8002cde:	f007 ffab 	bl	800ac38 <sin>
 8002ce2:	ec53 2b10 	vmov	r2, r3, d0
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4649      	mov	r1, r9
 8002cea:	f7fd fc85 	bl	80005f8 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fac7 	bl	8000288 <__aeabi_dsub>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd ff51 	bl	8000ba8 <__aeabi_d2f>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a77      	ldr	r2, [pc, #476]	; (8002ee8 <calc_angles+0x348>)
 8002d0a:	6013      	str	r3, [r2, #0]

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  acc_total_vector = sqrt(pow(g_ax, 2) + pow(g_ay, 2) + pow(g_az, 2));
 8002d0c:	4b7a      	ldr	r3, [pc, #488]	; (8002ef8 <calc_angles+0x358>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc19 	bl	8000548 <__aeabi_f2d>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002ed8 <calc_angles+0x338>
 8002d1e:	ec43 2b10 	vmov	d0, r2, r3
 8002d22:	f008 f815 	bl	800ad50 <pow>
 8002d26:	ec55 4b10 	vmov	r4, r5, d0
 8002d2a:	4b74      	ldr	r3, [pc, #464]	; (8002efc <calc_angles+0x35c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc0a 	bl	8000548 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8002ed8 <calc_angles+0x338>
 8002d3c:	ec43 2b10 	vmov	d0, r2, r3
 8002d40:	f008 f806 	bl	800ad50 <pow>
 8002d44:	ec53 2b10 	vmov	r2, r3, d0
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	f7fd fa9e 	bl	800028c <__adddf3>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4614      	mov	r4, r2
 8002d56:	461d      	mov	r5, r3
 8002d58:	4b69      	ldr	r3, [pc, #420]	; (8002f00 <calc_angles+0x360>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fbf3 	bl	8000548 <__aeabi_f2d>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8002ed8 <calc_angles+0x338>
 8002d6a:	ec43 2b10 	vmov	d0, r2, r3
 8002d6e:	f007 ffef 	bl	800ad50 <pow>
 8002d72:	ec53 2b10 	vmov	r2, r3, d0
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fa87 	bl	800028c <__adddf3>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	ec43 2b17 	vmov	d7, r2, r3
 8002d86:	eeb0 0a47 	vmov.f32	s0, s14
 8002d8a:	eef0 0a67 	vmov.f32	s1, s15
 8002d8e:	f008 f84f 	bl	800ae30 <sqrt>
 8002d92:	ec53 2b10 	vmov	r2, r3, d0
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd fedd 	bl	8000b58 <__aeabi_d2iz>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <calc_angles+0x364>)
 8002da2:	6013      	str	r3, [r2, #0]

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(g_ax) < acc_total_vector) {
 8002da4:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <calc_angles+0x358>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dae:	ee17 3a90 	vmov	r3, s15
 8002db2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002db6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002dba:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <calc_angles+0x364>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	da24      	bge.n	8002e0c <calc_angles+0x26c>
    acc_angle[X] = asin((float)g_ay / acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <calc_angles+0x35c>)
 8002dc4:	ed93 7a00 	vldr	s14, [r3]
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <calc_angles+0x364>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002dd8:	ee16 0a90 	vmov	r0, s13
 8002ddc:	f7fd fbb4 	bl	8000548 <__aeabi_f2d>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	ec43 2b10 	vmov	d0, r2, r3
 8002de8:	f007 ff7e 	bl	800ace8 <asin>
 8002dec:	ec51 0b10 	vmov	r0, r1, d0
 8002df0:	a33b      	add	r3, pc, #236	; (adr r3, 8002ee0 <calc_angles+0x340>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fbff 	bl	80005f8 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	f7fd fed1 	bl	8000ba8 <__aeabi_d2f>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a3f      	ldr	r2, [pc, #252]	; (8002f08 <calc_angles+0x368>)
 8002e0a:	6013      	str	r3, [r2, #0]
  }

  if (abs(g_ay) < acc_total_vector) {
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <calc_angles+0x35c>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e16:	ee17 3a90 	vmov	r3, s15
 8002e1a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e1e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <calc_angles+0x364>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	da24      	bge.n	8002e74 <calc_angles+0x2d4>
    acc_angle[Y] = asin((float)g_ax / acc_total_vector) * (180 / M_PI);
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <calc_angles+0x358>)
 8002e2c:	ed93 7a00 	vldr	s14, [r3]
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <calc_angles+0x364>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e40:	ee16 0a90 	vmov	r0, s13
 8002e44:	f7fd fb80 	bl	8000548 <__aeabi_f2d>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	ec43 2b10 	vmov	d0, r2, r3
 8002e50:	f007 ff4a 	bl	800ace8 <asin>
 8002e54:	ec51 0b10 	vmov	r0, r1, d0
 8002e58:	a321      	add	r3, pc, #132	; (adr r3, 8002ee0 <calc_angles+0x340>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fbcb 	bl	80005f8 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fe9d 	bl	8000ba8 <__aeabi_d2f>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <calc_angles+0x368>)
 8002e72:	6053      	str	r3, [r2, #4]
  }

  if (initialized == 1) {
 8002e74:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <calc_angles+0x36c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d178      	bne.n	8002f6e <calc_angles+0x3ce>
    // Correct the drift of the gyro with the accelerometer
    gyro_angle[X] = gyro_angle[X] * 0.5 + acc_angle[X] * 0.5;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <calc_angles+0x348>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb61 	bl	8000548 <__aeabi_f2d>
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <calc_angles+0x370>)
 8002e8c:	f7fd fbb4 	bl	80005f8 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <calc_angles+0x368>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fb53 	bl	8000548 <__aeabi_f2d>
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <calc_angles+0x370>)
 8002ea8:	f7fd fba6 	bl	80005f8 <__aeabi_dmul>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f7fd f9ea 	bl	800028c <__adddf3>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	e028      	b.n	8002f14 <calc_angles+0x374>
 8002ec2:	bf00      	nop
 8002ec4:	f3af 8000 	nop.w
 8002ec8:	00000000 	.word	0x00000000
 8002ecc:	40c99600 	.word	0x40c99600
 8002ed0:	fb7aa1c6 	.word	0xfb7aa1c6
 8002ed4:	3eb65a3c 	.word	0x3eb65a3c
 8002ed8:	00000000 	.word	0x00000000
 8002edc:	40000000 	.word	0x40000000
 8002ee0:	1a63c1f8 	.word	0x1a63c1f8
 8002ee4:	404ca5dc 	.word	0x404ca5dc
 8002ee8:	20000604 	.word	0x20000604
 8002eec:	200005f8 	.word	0x200005f8
 8002ef0:	200005fc 	.word	0x200005fc
 8002ef4:	20000600 	.word	0x20000600
 8002ef8:	200005ec 	.word	0x200005ec
 8002efc:	200005f0 	.word	0x200005f0
 8002f00:	200005f4 	.word	0x200005f4
 8002f04:	20000628 	.word	0x20000628
 8002f08:	20000610 	.word	0x20000610
 8002f0c:	2000062c 	.word	0x2000062c
 8002f10:	3fe00000 	.word	0x3fe00000
 8002f14:	f7fd fe48 	bl	8000ba8 <__aeabi_d2f>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <calc_angles+0x510>)
 8002f1c:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = gyro_angle[Y] * 0.5 + acc_angle[Y] * 0.5;
 8002f1e:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <calc_angles+0x510>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fb10 	bl	8000548 <__aeabi_f2d>
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <calc_angles+0x514>)
 8002f2e:	f7fd fb63 	bl	80005f8 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4614      	mov	r4, r2
 8002f38:	461d      	mov	r5, r3
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <calc_angles+0x518>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fb02 	bl	8000548 <__aeabi_f2d>
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	4b5a      	ldr	r3, [pc, #360]	; (80030b4 <calc_angles+0x514>)
 8002f4a:	f7fd fb55 	bl	80005f8 <__aeabi_dmul>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd f999 	bl	800028c <__adddf3>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7fd fe21 	bl	8000ba8 <__aeabi_d2f>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a51      	ldr	r2, [pc, #324]	; (80030b0 <calc_angles+0x510>)
 8002f6a:	6053      	str	r3, [r2, #4]
 8002f6c:	e00a      	b.n	8002f84 <calc_angles+0x3e4>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    gyro_angle[X] = acc_angle[X];
 8002f6e:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <calc_angles+0x518>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <calc_angles+0x510>)
 8002f74:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = acc_angle[Y];
 8002f76:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <calc_angles+0x518>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a4d      	ldr	r2, [pc, #308]	; (80030b0 <calc_angles+0x510>)
 8002f7c:	6053      	str	r3, [r2, #4]

    initialized = 1;
 8002f7e:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <calc_angles+0x51c>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
  }

  // To dampen the pitch and roll angles a complementary filter is used
  measures[ROLL] = measures[ROLL] * 0.9 + gyro_angle[X] * 0.1;
 8002f84:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <calc_angles+0x520>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fadd 	bl	8000548 <__aeabi_f2d>
 8002f8e:	a342      	add	r3, pc, #264	; (adr r3, 8003098 <calc_angles+0x4f8>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fb30 	bl	80005f8 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <calc_angles+0x510>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd facf 	bl	8000548 <__aeabi_f2d>
 8002faa:	a33d      	add	r3, pc, #244	; (adr r3, 80030a0 <calc_angles+0x500>)
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f7fd fb22 	bl	80005f8 <__aeabi_dmul>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fd f966 	bl	800028c <__adddf3>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fdee 	bl	8000ba8 <__aeabi_d2f>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <calc_angles+0x520>)
 8002fd0:	6093      	str	r3, [r2, #8]
  measures[PITCH] = measures[PITCH] * 0.9 + gyro_angle[Y] * 0.1;
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <calc_angles+0x520>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fab6 	bl	8000548 <__aeabi_f2d>
 8002fdc:	a32e      	add	r3, pc, #184	; (adr r3, 8003098 <calc_angles+0x4f8>)
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f7fd fb09 	bl	80005f8 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4614      	mov	r4, r2
 8002fec:	461d      	mov	r5, r3
 8002fee:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <calc_angles+0x510>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd faa8 	bl	8000548 <__aeabi_f2d>
 8002ff8:	a329      	add	r3, pc, #164	; (adr r3, 80030a0 <calc_angles+0x500>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f7fd fafb 	bl	80005f8 <__aeabi_dmul>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd f93f 	bl	800028c <__adddf3>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f7fd fdc7 	bl	8000ba8 <__aeabi_d2f>
 800301a:	4603      	mov	r3, r0
 800301c:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <calc_angles+0x520>)
 800301e:	6053      	str	r3, [r2, #4]
  measures[YAW] = -g_gz / SSF_GYRO; // Store the angular motion for this axis
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <calc_angles+0x524>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	eeb1 7a67 	vneg.f32	s14, s15
 800302a:	eddf 6a27 	vldr	s13, [pc, #156]	; 80030c8 <calc_angles+0x528>
 800302e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <calc_angles+0x520>)
 8003034:	edc3 7a00 	vstr	s15, [r3]

  // Norm [-1, 1]
  g_angle_x = -measures[PITCH];
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <calc_angles+0x520>)
 800303a:	edd3 7a01 	vldr	s15, [r3, #4]
 800303e:	eef1 7a67 	vneg.f32	s15, s15
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <calc_angles+0x52c>)
 8003044:	edc3 7a00 	vstr	s15, [r3]
  g_angle_y = measures[ROLL];
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <calc_angles+0x520>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <calc_angles+0x530>)
 800304e:	6013      	str	r3, [r2, #0]
  g_angle_z += measures[YAW]*0.001;
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <calc_angles+0x534>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa77 	bl	8000548 <__aeabi_f2d>
 800305a:	4604      	mov	r4, r0
 800305c:	460d      	mov	r5, r1
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <calc_angles+0x520>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa70 	bl	8000548 <__aeabi_f2d>
 8003068:	a30f      	add	r3, pc, #60	; (adr r3, 80030a8 <calc_angles+0x508>)
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f7fd fac3 	bl	80005f8 <__aeabi_dmul>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4620      	mov	r0, r4
 8003078:	4629      	mov	r1, r5
 800307a:	f7fd f907 	bl	800028c <__adddf3>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f7fd fd8f 	bl	8000ba8 <__aeabi_d2f>
 800308a:	4603      	mov	r3, r0
 800308c:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <calc_angles+0x534>)
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003096:	bf00      	nop
 8003098:	cccccccd 	.word	0xcccccccd
 800309c:	3feccccc 	.word	0x3feccccc
 80030a0:	9999999a 	.word	0x9999999a
 80030a4:	3fb99999 	.word	0x3fb99999
 80030a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80030ac:	3f50624d 	.word	0x3f50624d
 80030b0:	20000604 	.word	0x20000604
 80030b4:	3fe00000 	.word	0x3fe00000
 80030b8:	20000610 	.word	0x20000610
 80030bc:	2000062c 	.word	0x2000062c
 80030c0:	2000061c 	.word	0x2000061c
 80030c4:	20000600 	.word	0x20000600
 80030c8:	42830000 	.word	0x42830000
 80030cc:	20000630 	.word	0x20000630
 80030d0:	20000634 	.word	0x20000634
 80030d4:	20000638 	.word	0x20000638

080030d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <NMI_Handler+0x4>

080030de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <HardFault_Handler+0x4>

080030e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <MemManage_Handler+0x4>

080030ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ee:	e7fe      	b.n	80030ee <BusFault_Handler+0x4>

080030f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <UsageFault_Handler+0x4>

080030f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003124:	f001 f8f2 	bl	800430c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	0000      	movs	r0, r0
	...

08003130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003130:	b5b0      	push	{r4, r5, r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  // Activate reading
  MPU6050_update(&g_mpu6050);
 8003136:	48d0      	ldr	r0, [pc, #832]	; (8003478 <TIM3_IRQHandler+0x348>)
 8003138:	f7fe fef8 	bl	8001f2c <MPU6050_update>

  // Raw 6-axis, remove noise
  g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], g_mpu6050.ax) + g_ax_offset;
 800313c:	4bce      	ldr	r3, [pc, #824]	; (8003478 <TIM3_IRQHandler+0x348>)
 800313e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003142:	eeb0 0a67 	vmov.f32	s0, s15
 8003146:	48cd      	ldr	r0, [pc, #820]	; (800347c <TIM3_IRQHandler+0x34c>)
 8003148:	f7fd ff19 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 800314c:	eeb0 7a40 	vmov.f32	s14, s0
 8003150:	4bcb      	ldr	r3, [pc, #812]	; (8003480 <TIM3_IRQHandler+0x350>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315a:	4bca      	ldr	r3, [pc, #808]	; (8003484 <TIM3_IRQHandler+0x354>)
 800315c:	edc3 7a00 	vstr	s15, [r3]
  g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], g_mpu6050.ay) + g_ay_offset;
 8003160:	4bc5      	ldr	r3, [pc, #788]	; (8003478 <TIM3_IRQHandler+0x348>)
 8003162:	edd3 7a03 	vldr	s15, [r3, #12]
 8003166:	eeb0 0a67 	vmov.f32	s0, s15
 800316a:	48c7      	ldr	r0, [pc, #796]	; (8003488 <TIM3_IRQHandler+0x358>)
 800316c:	f7fd ff07 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003170:	eeb0 7a40 	vmov.f32	s14, s0
 8003174:	4bc5      	ldr	r3, [pc, #788]	; (800348c <TIM3_IRQHandler+0x35c>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317e:	4bc4      	ldr	r3, [pc, #784]	; (8003490 <TIM3_IRQHandler+0x360>)
 8003180:	edc3 7a00 	vstr	s15, [r3]
  g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], g_mpu6050.az) + g_az_offset;
 8003184:	4bbc      	ldr	r3, [pc, #752]	; (8003478 <TIM3_IRQHandler+0x348>)
 8003186:	edd3 7a04 	vldr	s15, [r3, #16]
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	48c1      	ldr	r0, [pc, #772]	; (8003494 <TIM3_IRQHandler+0x364>)
 8003190:	f7fd fef5 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003194:	eeb0 7a40 	vmov.f32	s14, s0
 8003198:	4bbf      	ldr	r3, [pc, #764]	; (8003498 <TIM3_IRQHandler+0x368>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	4bbe      	ldr	r3, [pc, #760]	; (800349c <TIM3_IRQHandler+0x36c>)
 80031a4:	edc3 7a00 	vstr	s15, [r3]
  g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], g_mpu6050.gx) + g_gx_offset;
 80031a8:	4bb3      	ldr	r3, [pc, #716]	; (8003478 <TIM3_IRQHandler+0x348>)
 80031aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80031ae:	eeb0 0a67 	vmov.f32	s0, s15
 80031b2:	48bb      	ldr	r0, [pc, #748]	; (80034a0 <TIM3_IRQHandler+0x370>)
 80031b4:	f7fd fee3 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80031b8:	eeb0 7a40 	vmov.f32	s14, s0
 80031bc:	4bb9      	ldr	r3, [pc, #740]	; (80034a4 <TIM3_IRQHandler+0x374>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c6:	4bb8      	ldr	r3, [pc, #736]	; (80034a8 <TIM3_IRQHandler+0x378>)
 80031c8:	edc3 7a00 	vstr	s15, [r3]
  g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], g_mpu6050.gy) + g_gy_offset;
 80031cc:	4baa      	ldr	r3, [pc, #680]	; (8003478 <TIM3_IRQHandler+0x348>)
 80031ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80031d2:	eeb0 0a67 	vmov.f32	s0, s15
 80031d6:	48b5      	ldr	r0, [pc, #724]	; (80034ac <TIM3_IRQHandler+0x37c>)
 80031d8:	f7fd fed1 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80031dc:	eeb0 7a40 	vmov.f32	s14, s0
 80031e0:	4bb3      	ldr	r3, [pc, #716]	; (80034b0 <TIM3_IRQHandler+0x380>)
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ea:	4bb2      	ldr	r3, [pc, #712]	; (80034b4 <TIM3_IRQHandler+0x384>)
 80031ec:	edc3 7a00 	vstr	s15, [r3]
  g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], g_mpu6050.gz) + g_gz_offset;
 80031f0:	4ba1      	ldr	r3, [pc, #644]	; (8003478 <TIM3_IRQHandler+0x348>)
 80031f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80031f6:	eeb0 0a67 	vmov.f32	s0, s15
 80031fa:	48af      	ldr	r0, [pc, #700]	; (80034b8 <TIM3_IRQHandler+0x388>)
 80031fc:	f7fd febf 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8003200:	eeb0 7a40 	vmov.f32	s14, s0
 8003204:	4bad      	ldr	r3, [pc, #692]	; (80034bc <TIM3_IRQHandler+0x38c>)
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320e:	4bac      	ldr	r3, [pc, #688]	; (80034c0 <TIM3_IRQHandler+0x390>)
 8003210:	edc3 7a00 	vstr	s15, [r3]

  calc_angles();
 8003214:	f7ff fcc4 	bl	8002ba0 <calc_angles>

  g_gyro_x = limit(g_gx, -2000, 2000) / 2000;
 8003218:	4ba3      	ldr	r3, [pc, #652]	; (80034a8 <TIM3_IRQHandler+0x378>)
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 80034c4 <TIM3_IRQHandler+0x394>
 8003222:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80034c8 <TIM3_IRQHandler+0x398>
 8003226:	eeb0 0a67 	vmov.f32	s0, s15
 800322a:	f7ff fc73 	bl	8002b14 <limit>
 800322e:	eeb0 7a40 	vmov.f32	s14, s0
 8003232:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80034c4 <TIM3_IRQHandler+0x394>
 8003236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800323a:	4ba4      	ldr	r3, [pc, #656]	; (80034cc <TIM3_IRQHandler+0x39c>)
 800323c:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_y = limit(g_gy, -2000, 2000) / 2000;
 8003240:	4b9c      	ldr	r3, [pc, #624]	; (80034b4 <TIM3_IRQHandler+0x384>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 80034c4 <TIM3_IRQHandler+0x394>
 800324a:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80034c8 <TIM3_IRQHandler+0x398>
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	f7ff fc5f 	bl	8002b14 <limit>
 8003256:	eeb0 7a40 	vmov.f32	s14, s0
 800325a:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80034c4 <TIM3_IRQHandler+0x394>
 800325e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003262:	4b9b      	ldr	r3, [pc, #620]	; (80034d0 <TIM3_IRQHandler+0x3a0>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_z = limit(g_gz, -2000, 2000) / 2000;
 8003268:	4b95      	ldr	r3, [pc, #596]	; (80034c0 <TIM3_IRQHandler+0x390>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ed9f 1a95 	vldr	s2, [pc, #596]	; 80034c4 <TIM3_IRQHandler+0x394>
 8003272:	eddf 0a95 	vldr	s1, [pc, #596]	; 80034c8 <TIM3_IRQHandler+0x398>
 8003276:	eeb0 0a67 	vmov.f32	s0, s15
 800327a:	f7ff fc4b 	bl	8002b14 <limit>
 800327e:	eeb0 7a40 	vmov.f32	s14, s0
 8003282:	eddf 6a90 	vldr	s13, [pc, #576]	; 80034c4 <TIM3_IRQHandler+0x394>
 8003286:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800328a:	4b92      	ldr	r3, [pc, #584]	; (80034d4 <TIM3_IRQHandler+0x3a4>)
 800328c:	edc3 7a00 	vstr	s15, [r3]

  // Control pitch, roll, yaw using offsets
  float angle_x = limit(g_angle_x, -90, 90) / 90 - 0.01*g_pitch;
 8003290:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <TIM3_IRQHandler+0x3a8>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	ed9f 1a91 	vldr	s2, [pc, #580]	; 80034dc <TIM3_IRQHandler+0x3ac>
 800329a:	eddf 0a91 	vldr	s1, [pc, #580]	; 80034e0 <TIM3_IRQHandler+0x3b0>
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	f7ff fc37 	bl	8002b14 <limit>
 80032a6:	eef0 7a40 	vmov.f32	s15, s0
 80032aa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80034dc <TIM3_IRQHandler+0x3ac>
 80032ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032b2:	ee16 0a90 	vmov	r0, s13
 80032b6:	f7fd f947 	bl	8000548 <__aeabi_f2d>
 80032ba:	4604      	mov	r4, r0
 80032bc:	460d      	mov	r5, r1
 80032be:	4b89      	ldr	r3, [pc, #548]	; (80034e4 <TIM3_IRQHandler+0x3b4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f940 	bl	8000548 <__aeabi_f2d>
 80032c8:	a369      	add	r3, pc, #420	; (adr r3, 8003470 <TIM3_IRQHandler+0x340>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd f993 	bl	80005f8 <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4620      	mov	r0, r4
 80032d8:	4629      	mov	r1, r5
 80032da:	f7fc ffd5 	bl	8000288 <__aeabi_dsub>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fc5f 	bl	8000ba8 <__aeabi_d2f>
 80032ea:	4603      	mov	r3, r0
 80032ec:	60fb      	str	r3, [r7, #12]
  float angle_y = limit(g_angle_y, -90, 90) / 90 - 0.01*g_roll;
 80032ee:	4b7e      	ldr	r3, [pc, #504]	; (80034e8 <TIM3_IRQHandler+0x3b8>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	ed9f 1a79 	vldr	s2, [pc, #484]	; 80034dc <TIM3_IRQHandler+0x3ac>
 80032f8:	eddf 0a79 	vldr	s1, [pc, #484]	; 80034e0 <TIM3_IRQHandler+0x3b0>
 80032fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003300:	f7ff fc08 	bl	8002b14 <limit>
 8003304:	eef0 7a40 	vmov.f32	s15, s0
 8003308:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80034dc <TIM3_IRQHandler+0x3ac>
 800330c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003310:	ee16 0a90 	vmov	r0, s13
 8003314:	f7fd f918 	bl	8000548 <__aeabi_f2d>
 8003318:	4604      	mov	r4, r0
 800331a:	460d      	mov	r5, r1
 800331c:	4b73      	ldr	r3, [pc, #460]	; (80034ec <TIM3_IRQHandler+0x3bc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd f911 	bl	8000548 <__aeabi_f2d>
 8003326:	a352      	add	r3, pc, #328	; (adr r3, 8003470 <TIM3_IRQHandler+0x340>)
 8003328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332c:	f7fd f964 	bl	80005f8 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fc ffa6 	bl	8000288 <__aeabi_dsub>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f7fd fc30 	bl	8000ba8 <__aeabi_d2f>
 8003348:	4603      	mov	r3, r0
 800334a:	60bb      	str	r3, [r7, #8]
  float angle_z = limit(g_angle_z, -90, 90) / 90 - 0.01*g_yaw;
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <TIM3_IRQHandler+0x3c0>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ed9f 1a62 	vldr	s2, [pc, #392]	; 80034dc <TIM3_IRQHandler+0x3ac>
 8003356:	eddf 0a62 	vldr	s1, [pc, #392]	; 80034e0 <TIM3_IRQHandler+0x3b0>
 800335a:	eeb0 0a67 	vmov.f32	s0, s15
 800335e:	f7ff fbd9 	bl	8002b14 <limit>
 8003362:	eef0 7a40 	vmov.f32	s15, s0
 8003366:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80034dc <TIM3_IRQHandler+0x3ac>
 800336a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800336e:	ee16 0a90 	vmov	r0, s13
 8003372:	f7fd f8e9 	bl	8000548 <__aeabi_f2d>
 8003376:	4604      	mov	r4, r0
 8003378:	460d      	mov	r5, r1
 800337a:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <TIM3_IRQHandler+0x3c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f8e2 	bl	8000548 <__aeabi_f2d>
 8003384:	a33a      	add	r3, pc, #232	; (adr r3, 8003470 <TIM3_IRQHandler+0x340>)
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f7fd f935 	bl	80005f8 <__aeabi_dmul>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4620      	mov	r0, r4
 8003394:	4629      	mov	r1, r5
 8003396:	f7fc ff77 	bl	8000288 <__aeabi_dsub>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f7fd fc01 	bl	8000ba8 <__aeabi_d2f>
 80033a6:	4603      	mov	r3, r0
 80033a8:	607b      	str	r3, [r7, #4]

  if (g_thrust <= -99 && g_yaw <= -99
 80033aa:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <TIM3_IRQHandler+0x3c8>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80034fc <TIM3_IRQHandler+0x3cc>
 80033b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	d820      	bhi.n	8003400 <TIM3_IRQHandler+0x2d0>
 80033be:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <TIM3_IRQHandler+0x3c4>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80034fc <TIM3_IRQHandler+0x3cc>
 80033c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	d816      	bhi.n	8003400 <TIM3_IRQHandler+0x2d0>
      && g_pitch <= -99 && g_roll >= 98) {
 80033d2:	4b44      	ldr	r3, [pc, #272]	; (80034e4 <TIM3_IRQHandler+0x3b4>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80034fc <TIM3_IRQHandler+0x3cc>
 80033dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e4:	d80c      	bhi.n	8003400 <TIM3_IRQHandler+0x2d0>
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <TIM3_IRQHandler+0x3bc>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003500 <TIM3_IRQHandler+0x3d0>
 80033f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f8:	db02      	blt.n	8003400 <TIM3_IRQHandler+0x2d0>
    fly_mode = ready;
 80033fa:	4b42      	ldr	r3, [pc, #264]	; (8003504 <TIM3_IRQHandler+0x3d4>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
  }

  g_conn_lost_counter += 1;
 8003400:	4b41      	ldr	r3, [pc, #260]	; (8003508 <TIM3_IRQHandler+0x3d8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a40      	ldr	r2, [pc, #256]	; (8003508 <TIM3_IRQHandler+0x3d8>)
 8003408:	6013      	str	r3, [r2, #0]
  if (g_conn_lost_counter > MAX_LOST_CONN_COUNTER || g_conn_lost_counter < 0) {
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <TIM3_IRQHandler+0x3d8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b32      	cmp	r3, #50	; 0x32
 8003410:	dc03      	bgt.n	800341a <TIM3_IRQHandler+0x2ea>
 8003412:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <TIM3_IRQHandler+0x3d8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	da14      	bge.n	8003444 <TIM3_IRQHandler+0x314>
    g_I_pitch_accumulated = 0;
 800341a:	4b3c      	ldr	r3, [pc, #240]	; (800350c <TIM3_IRQHandler+0x3dc>)
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
    g_I_roll_accumulated = 0;
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <TIM3_IRQHandler+0x3e0>)
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    g_I_yaw_accumulated = 0;
 800342a:	4b3a      	ldr	r3, [pc, #232]	; (8003514 <TIM3_IRQHandler+0x3e4>)
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003432:	230f      	movs	r3, #15
 8003434:	220f      	movs	r2, #15
 8003436:	210f      	movs	r1, #15
 8003438:	200f      	movs	r0, #15
 800343a:	f7ff fb95 	bl	8002b68 <ctl_motors_speed>
    fly_mode = init;
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <TIM3_IRQHandler+0x3d4>)
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <TIM3_IRQHandler+0x3d4>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b06      	cmp	r3, #6
 800344a:	f200 83aa 	bhi.w	8003ba2 <TIM3_IRQHandler+0xa72>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <TIM3_IRQHandler+0x324>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003519 	.word	0x08003519
 8003458:	0800353f 	.word	0x0800353f
 800345c:	08003585 	.word	0x08003585
 8003460:	0800359b 	.word	0x0800359b
 8003464:	080035b1 	.word	0x080035b1
 8003468:	080035c7 	.word	0x080035c7
 800346c:	0800369d 	.word	0x0800369d
 8003470:	47ae147b 	.word	0x47ae147b
 8003474:	3f847ae1 	.word	0x3f847ae1
 8003478:	20000444 	.word	0x20000444
 800347c:	200002c4 	.word	0x200002c4
 8003480:	20000004 	.word	0x20000004
 8003484:	200005ec 	.word	0x200005ec
 8003488:	200002dc 	.word	0x200002dc
 800348c:	20000008 	.word	0x20000008
 8003490:	200005f0 	.word	0x200005f0
 8003494:	200002f4 	.word	0x200002f4
 8003498:	2000000c 	.word	0x2000000c
 800349c:	200005f4 	.word	0x200005f4
 80034a0:	2000030c 	.word	0x2000030c
 80034a4:	20000010 	.word	0x20000010
 80034a8:	200005f8 	.word	0x200005f8
 80034ac:	20000324 	.word	0x20000324
 80034b0:	20000014 	.word	0x20000014
 80034b4:	200005fc 	.word	0x200005fc
 80034b8:	2000033c 	.word	0x2000033c
 80034bc:	20000018 	.word	0x20000018
 80034c0:	20000600 	.word	0x20000600
 80034c4:	44fa0000 	.word	0x44fa0000
 80034c8:	c4fa0000 	.word	0xc4fa0000
 80034cc:	2000063c 	.word	0x2000063c
 80034d0:	20000640 	.word	0x20000640
 80034d4:	20000644 	.word	0x20000644
 80034d8:	20000630 	.word	0x20000630
 80034dc:	42b40000 	.word	0x42b40000
 80034e0:	c2b40000 	.word	0xc2b40000
 80034e4:	200006d0 	.word	0x200006d0
 80034e8:	20000634 	.word	0x20000634
 80034ec:	200006d4 	.word	0x200006d4
 80034f0:	20000638 	.word	0x20000638
 80034f4:	200006d8 	.word	0x200006d8
 80034f8:	200006cc 	.word	0x200006cc
 80034fc:	c2c60000 	.word	0xc2c60000
 8003500:	42c40000 	.word	0x42c40000
 8003504:	20000648 	.word	0x20000648
 8003508:	20000000 	.word	0x20000000
 800350c:	20000654 	.word	0x20000654
 8003510:	20000664 	.word	0x20000664
 8003514:	20000674 	.word	0x20000674
    case init:
      g_I_pitch_accumulated = 0;
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <TIM3_IRQHandler+0x540>)
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003520:	4b54      	ldr	r3, [pc, #336]	; (8003674 <TIM3_IRQHandler+0x544>)
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <TIM3_IRQHandler+0x548>)
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003530:	230f      	movs	r3, #15
 8003532:	220f      	movs	r2, #15
 8003534:	210f      	movs	r1, #15
 8003536:	200f      	movs	r0, #15
 8003538:	f7ff fb16 	bl	8002b68 <ctl_motors_speed>
      break;
 800353c:	e331      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
    case ready:
      g_I_pitch_accumulated = 0;
 800353e:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <TIM3_IRQHandler+0x540>)
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <TIM3_IRQHandler+0x544>)
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <TIM3_IRQHandler+0x548>)
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003556:	f240 2323 	movw	r3, #547	; 0x223
 800355a:	f240 2223 	movw	r2, #547	; 0x223
 800355e:	f240 2123 	movw	r1, #547	; 0x223
 8003562:	f240 2023 	movw	r0, #547	; 0x223
 8003566:	f7ff faff 	bl	8002b68 <ctl_motors_speed>
      if (g_thrust > 0) {
 800356a:	4b44      	ldr	r3, [pc, #272]	; (800367c <TIM3_IRQHandler+0x54c>)
 800356c:	edd3 7a00 	vldr	s15, [r3]
 8003570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	dc00      	bgt.n	800357c <TIM3_IRQHandler+0x44c>
        fly_mode = testing_2;
      }

      break;
 800357a:	e312      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
        fly_mode = testing_2;
 800357c:	4b40      	ldr	r3, [pc, #256]	; (8003680 <TIM3_IRQHandler+0x550>)
 800357e:	2206      	movs	r2, #6
 8003580:	701a      	strb	r2, [r3, #0]
      break;
 8003582:	e30e      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
    case holding:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003584:	f240 2323 	movw	r3, #547	; 0x223
 8003588:	f240 2223 	movw	r2, #547	; 0x223
 800358c:	f240 2123 	movw	r1, #547	; 0x223
 8003590:	f240 2023 	movw	r0, #547	; 0x223
 8003594:	f7ff fae8 	bl	8002b68 <ctl_motors_speed>
      break;
 8003598:	e303      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
    case moving:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800359a:	f240 2323 	movw	r3, #547	; 0x223
 800359e:	f240 2223 	movw	r2, #547	; 0x223
 80035a2:	f240 2123 	movw	r1, #547	; 0x223
 80035a6:	f240 2023 	movw	r0, #547	; 0x223
 80035aa:	f7ff fadd 	bl	8002b68 <ctl_motors_speed>
      break;
 80035ae:	e2f8      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
    case landing:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 80035b0:	f240 2323 	movw	r3, #547	; 0x223
 80035b4:	f240 2223 	movw	r2, #547	; 0x223
 80035b8:	f240 2123 	movw	r1, #547	; 0x223
 80035bc:	f240 2023 	movw	r0, #547	; 0x223
 80035c0:	f7ff fad2 	bl	8002b68 <ctl_motors_speed>
      break;
 80035c4:	e2ed      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
    case testing_1:
      g_sig1 = MIN_SPEED + g_thrust;
 80035c6:	4b2d      	ldr	r3, [pc, #180]	; (800367c <TIM3_IRQHandler+0x54c>)
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003684 <TIM3_IRQHandler+0x554>
 80035d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <TIM3_IRQHandler+0x558>)
 80035d6:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <TIM3_IRQHandler+0x54c>)
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003684 <TIM3_IRQHandler+0x554>
 80035e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <TIM3_IRQHandler+0x55c>)
 80035ea:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <TIM3_IRQHandler+0x54c>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003684 <TIM3_IRQHandler+0x554>
 80035f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <TIM3_IRQHandler+0x560>)
 80035fe:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <TIM3_IRQHandler+0x54c>)
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003684 <TIM3_IRQHandler+0x554>
 800360c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <TIM3_IRQHandler+0x564>)
 8003612:	edc3 7a00 	vstr	s15, [r3]
      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <TIM3_IRQHandler+0x558>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <TIM3_IRQHandler+0x55c>)
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <TIM3_IRQHandler+0x560>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <TIM3_IRQHandler+0x564>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800363e:	ee17 3a90 	vmov	r3, s15
 8003642:	ee16 2a10 	vmov	r2, s12
 8003646:	ee16 1a90 	vmov	r1, s13
 800364a:	ee17 0a10 	vmov	r0, s14
 800364e:	f7ff fa8b 	bl	8002b68 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <TIM3_IRQHandler+0x54c>)
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003698 <TIM3_IRQHandler+0x568>
 800365c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d900      	bls.n	8003668 <TIM3_IRQHandler+0x538>
        fly_mode = init;
      }

      break;
 8003666:	e29c      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
        fly_mode = init;
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <TIM3_IRQHandler+0x550>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
      break;
 800366e:	e298      	b.n	8003ba2 <TIM3_IRQHandler+0xa72>
 8003670:	20000654 	.word	0x20000654
 8003674:	20000664 	.word	0x20000664
 8003678:	20000674 	.word	0x20000674
 800367c:	200006cc 	.word	0x200006cc
 8003680:	20000648 	.word	0x20000648
 8003684:	4408c000 	.word	0x4408c000
 8003688:	2000067c 	.word	0x2000067c
 800368c:	20000680 	.word	0x20000680
 8003690:	20000684 	.word	0x20000684
 8003694:	20000688 	.word	0x20000688
 8003698:	c2c60000 	.word	0xc2c60000
    case testing_2:
      g_P_pitch = angle_x*g_P_pitch_gain;
 800369c:	4bd0      	ldr	r3, [pc, #832]	; (80039e0 <TIM3_IRQHandler+0x8b0>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b0:	4bcc      	ldr	r3, [pc, #816]	; (80039e4 <TIM3_IRQHandler+0x8b4>)
 80036b2:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_x*ACCUMULATION_TIME; // 0.005 = 1/FREQ
 80036b6:	4bcc      	ldr	r3, [pc, #816]	; (80039e8 <TIM3_IRQHandler+0x8b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc ff44 	bl	8000548 <__aeabi_f2d>
 80036c0:	4604      	mov	r4, r0
 80036c2:	460d      	mov	r5, r1
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7fc ff3f 	bl	8000548 <__aeabi_f2d>
 80036ca:	a3c3      	add	r3, pc, #780	; (adr r3, 80039d8 <TIM3_IRQHandler+0x8a8>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc ff92 	bl	80005f8 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4620      	mov	r0, r4
 80036da:	4629      	mov	r1, r5
 80036dc:	f7fc fdd6 	bl	800028c <__adddf3>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7fd fa5e 	bl	8000ba8 <__aeabi_d2f>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4abe      	ldr	r2, [pc, #760]	; (80039e8 <TIM3_IRQHandler+0x8b8>)
 80036f0:	6013      	str	r3, [r2, #0]
      g_I_pitch = limit(g_I_pitch_accumulated*g_I_pitch_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 80036f2:	4bbe      	ldr	r3, [pc, #760]	; (80039ec <TIM3_IRQHandler+0x8bc>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036fe:	4bba      	ldr	r3, [pc, #744]	; (80039e8 <TIM3_IRQHandler+0x8b8>)
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003708:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 80039f0 <TIM3_IRQHandler+0x8c0>
 800370c:	eddf 0ab9 	vldr	s1, [pc, #740]	; 80039f4 <TIM3_IRQHandler+0x8c4>
 8003710:	eeb0 0a67 	vmov.f32	s0, s15
 8003714:	f7ff f9fe 	bl	8002b14 <limit>
 8003718:	eef0 7a40 	vmov.f32	s15, s0
 800371c:	4bb6      	ldr	r3, [pc, #728]	; (80039f8 <TIM3_IRQHandler+0x8c8>)
 800371e:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = g_gyro_y*g_D_pitch_gain;
 8003722:	4bb6      	ldr	r3, [pc, #728]	; (80039fc <TIM3_IRQHandler+0x8cc>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372e:	4bb4      	ldr	r3, [pc, #720]	; (8003a00 <TIM3_IRQHandler+0x8d0>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003738:	4bb2      	ldr	r3, [pc, #712]	; (8003a04 <TIM3_IRQHandler+0x8d4>)
 800373a:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = angle_y*g_P_roll_gain;
 800373e:	4bb2      	ldr	r3, [pc, #712]	; (8003a08 <TIM3_IRQHandler+0x8d8>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800374a:	edd7 7a02 	vldr	s15, [r7, #8]
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	4bae      	ldr	r3, [pc, #696]	; (8003a0c <TIM3_IRQHandler+0x8dc>)
 8003754:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_y*ACCUMULATION_TIME;
 8003758:	4bad      	ldr	r3, [pc, #692]	; (8003a10 <TIM3_IRQHandler+0x8e0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fef3 	bl	8000548 <__aeabi_f2d>
 8003762:	4604      	mov	r4, r0
 8003764:	460d      	mov	r5, r1
 8003766:	68b8      	ldr	r0, [r7, #8]
 8003768:	f7fc feee 	bl	8000548 <__aeabi_f2d>
 800376c:	a39a      	add	r3, pc, #616	; (adr r3, 80039d8 <TIM3_IRQHandler+0x8a8>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f7fc fd85 	bl	800028c <__adddf3>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	f7fd fa0d 	bl	8000ba8 <__aeabi_d2f>
 800378e:	4603      	mov	r3, r0
 8003790:	4a9f      	ldr	r2, [pc, #636]	; (8003a10 <TIM3_IRQHandler+0x8e0>)
 8003792:	6013      	str	r3, [r2, #0]
      g_I_roll = limit(g_I_roll_accumulated*g_I_roll_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 8003794:	4b9f      	ldr	r3, [pc, #636]	; (8003a14 <TIM3_IRQHandler+0x8e4>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037a0:	4b9b      	ldr	r3, [pc, #620]	; (8003a10 <TIM3_IRQHandler+0x8e0>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	ed9f 1a91 	vldr	s2, [pc, #580]	; 80039f0 <TIM3_IRQHandler+0x8c0>
 80037ae:	eddf 0a91 	vldr	s1, [pc, #580]	; 80039f4 <TIM3_IRQHandler+0x8c4>
 80037b2:	eeb0 0a67 	vmov.f32	s0, s15
 80037b6:	f7ff f9ad 	bl	8002b14 <limit>
 80037ba:	eef0 7a40 	vmov.f32	s15, s0
 80037be:	4b96      	ldr	r3, [pc, #600]	; (8003a18 <TIM3_IRQHandler+0x8e8>)
 80037c0:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = g_gyro_x*g_D_roll_gain;
 80037c4:	4b95      	ldr	r3, [pc, #596]	; (8003a1c <TIM3_IRQHandler+0x8ec>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d0:	4b93      	ldr	r3, [pc, #588]	; (8003a20 <TIM3_IRQHandler+0x8f0>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	4b92      	ldr	r3, [pc, #584]	; (8003a24 <TIM3_IRQHandler+0x8f4>)
 80037dc:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = angle_z*g_P_yaw_gain;
 80037e0:	4b91      	ldr	r3, [pc, #580]	; (8003a28 <TIM3_IRQHandler+0x8f8>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80037f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f4:	4b8d      	ldr	r3, [pc, #564]	; (8003a2c <TIM3_IRQHandler+0x8fc>)
 80037f6:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_z*ACCUMULATION_TIME;
 80037fa:	4b8d      	ldr	r3, [pc, #564]	; (8003a30 <TIM3_IRQHandler+0x900>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fea2 	bl	8000548 <__aeabi_f2d>
 8003804:	4604      	mov	r4, r0
 8003806:	460d      	mov	r5, r1
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fc fe9d 	bl	8000548 <__aeabi_f2d>
 800380e:	a372      	add	r3, pc, #456	; (adr r3, 80039d8 <TIM3_IRQHandler+0x8a8>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f7fc fef0 	bl	80005f8 <__aeabi_dmul>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4620      	mov	r0, r4
 800381e:	4629      	mov	r1, r5
 8003820:	f7fc fd34 	bl	800028c <__adddf3>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fd f9bc 	bl	8000ba8 <__aeabi_d2f>
 8003830:	4603      	mov	r3, r0
 8003832:	4a7f      	ldr	r2, [pc, #508]	; (8003a30 <TIM3_IRQHandler+0x900>)
 8003834:	6013      	str	r3, [r2, #0]
      g_I_yaw = limit(g_I_yaw_accumulated*g_I_yaw_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 8003836:	4b7f      	ldr	r3, [pc, #508]	; (8003a34 <TIM3_IRQHandler+0x904>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003842:	4b7b      	ldr	r3, [pc, #492]	; (8003a30 <TIM3_IRQHandler+0x900>)
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80039f0 <TIM3_IRQHandler+0x8c0>
 8003850:	eddf 0a68 	vldr	s1, [pc, #416]	; 80039f4 <TIM3_IRQHandler+0x8c4>
 8003854:	eeb0 0a67 	vmov.f32	s0, s15
 8003858:	f7ff f95c 	bl	8002b14 <limit>
 800385c:	eef0 7a40 	vmov.f32	s15, s0
 8003860:	4b75      	ldr	r3, [pc, #468]	; (8003a38 <TIM3_IRQHandler+0x908>)
 8003862:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = g_gyro_z*g_D_yaw_gain;
 8003866:	4b75      	ldr	r3, [pc, #468]	; (8003a3c <TIM3_IRQHandler+0x90c>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003872:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <TIM3_IRQHandler+0x910>)
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387c:	4b71      	ldr	r3, [pc, #452]	; (8003a44 <TIM3_IRQHandler+0x914>)
 800387e:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + g_thrust;
 8003882:	4b71      	ldr	r3, [pc, #452]	; (8003a48 <TIM3_IRQHandler+0x918>)
 8003884:	edd3 7a00 	vldr	s15, [r3]
 8003888:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003a4c <TIM3_IRQHandler+0x91c>
 800388c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003894:	ee17 3a90 	vmov	r3, s15
 8003898:	603b      	str	r3, [r7, #0]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038a4:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <TIM3_IRQHandler+0x8b4>)
 80038a6:	edd3 6a00 	vldr	s13, [r3]
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <TIM3_IRQHandler+0x8c8>)
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <TIM3_IRQHandler+0x8d4>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c2:	4b52      	ldr	r3, [pc, #328]	; (8003a0c <TIM3_IRQHandler+0x8dc>)
 80038c4:	edd3 6a00 	vldr	s13, [r3]
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <TIM3_IRQHandler+0x8e8>)
 80038ca:	edd3 7a00 	vldr	s15, [r3]
 80038ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <TIM3_IRQHandler+0x8f4>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038e0:	4b52      	ldr	r3, [pc, #328]	; (8003a2c <TIM3_IRQHandler+0x8fc>)
 80038e2:	edd3 6a00 	vldr	s13, [r3]
 80038e6:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <TIM3_IRQHandler+0x908>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038f0:	4b54      	ldr	r3, [pc, #336]	; (8003a44 <TIM3_IRQHandler+0x914>)
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fe:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <TIM3_IRQHandler+0x920>)
 8003900:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800390e:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <TIM3_IRQHandler+0x8b4>)
 8003910:	edd3 6a00 	vldr	s13, [r3]
 8003914:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <TIM3_IRQHandler+0x8c8>)
 8003916:	edd3 7a00 	vldr	s15, [r3]
 800391a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <TIM3_IRQHandler+0x8d4>)
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392c:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <TIM3_IRQHandler+0x8dc>)
 800392e:	edd3 6a00 	vldr	s13, [r3]
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <TIM3_IRQHandler+0x8e8>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800393c:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <TIM3_IRQHandler+0x8f4>)
 800393e:	edd3 7a00 	vldr	s15, [r3]
 8003942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800394a:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <TIM3_IRQHandler+0x8fc>)
 800394c:	edd3 6a00 	vldr	s13, [r3]
 8003950:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <TIM3_IRQHandler+0x908>)
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800395a:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <TIM3_IRQHandler+0x914>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003968:	4b3a      	ldr	r3, [pc, #232]	; (8003a54 <TIM3_IRQHandler+0x924>)
 800396a:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	ee07 3a90 	vmov	s15, r3
 8003974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <TIM3_IRQHandler+0x8b4>)
 800397a:	edd3 6a00 	vldr	s13, [r3]
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <TIM3_IRQHandler+0x8c8>)
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003988:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <TIM3_IRQHandler+0x8d4>)
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <TIM3_IRQHandler+0x8dc>)
 8003998:	edd3 6a00 	vldr	s13, [r3]
 800399c:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <TIM3_IRQHandler+0x8e8>)
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <TIM3_IRQHandler+0x8f4>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <TIM3_IRQHandler+0x8fc>)
 80039b6:	edd3 6a00 	vldr	s13, [r3]
 80039ba:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <TIM3_IRQHandler+0x908>)
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <TIM3_IRQHandler+0x914>)
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d2:	e041      	b.n	8003a58 <TIM3_IRQHandler+0x928>
 80039d4:	f3af 8000 	nop.w
 80039d8:	1eb851ec 	.word	0x1eb851ec
 80039dc:	3fb1eb85 	.word	0x3fb1eb85
 80039e0:	2000001c 	.word	0x2000001c
 80039e4:	2000064c 	.word	0x2000064c
 80039e8:	20000654 	.word	0x20000654
 80039ec:	2000001d 	.word	0x2000001d
 80039f0:	42c80000 	.word	0x42c80000
 80039f4:	c2c80000 	.word	0xc2c80000
 80039f8:	20000650 	.word	0x20000650
 80039fc:	2000001e 	.word	0x2000001e
 8003a00:	20000640 	.word	0x20000640
 8003a04:	20000658 	.word	0x20000658
 8003a08:	2000001f 	.word	0x2000001f
 8003a0c:	2000065c 	.word	0x2000065c
 8003a10:	20000664 	.word	0x20000664
 8003a14:	20000020 	.word	0x20000020
 8003a18:	20000660 	.word	0x20000660
 8003a1c:	20000021 	.word	0x20000021
 8003a20:	2000063c 	.word	0x2000063c
 8003a24:	20000668 	.word	0x20000668
 8003a28:	20000022 	.word	0x20000022
 8003a2c:	2000066c 	.word	0x2000066c
 8003a30:	20000674 	.word	0x20000674
 8003a34:	20000023 	.word	0x20000023
 8003a38:	20000670 	.word	0x20000670
 8003a3c:	20000024 	.word	0x20000024
 8003a40:	20000644 	.word	0x20000644
 8003a44:	20000678 	.word	0x20000678
 8003a48:	200006cc 	.word	0x200006cc
 8003a4c:	4408c000 	.word	0x4408c000
 8003a50:	2000067c 	.word	0x2000067c
 8003a54:	20000680 	.word	0x20000680
 8003a58:	4b60      	ldr	r3, [pc, #384]	; (8003bdc <TIM3_IRQHandler+0xaac>)
 8003a5a:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a68:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <TIM3_IRQHandler+0xab0>)
 8003a6a:	edd3 6a00 	vldr	s13, [r3]
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	; (8003be4 <TIM3_IRQHandler+0xab4>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a78:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <TIM3_IRQHandler+0xab8>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a86:	4b59      	ldr	r3, [pc, #356]	; (8003bec <TIM3_IRQHandler+0xabc>)
 8003a88:	edd3 6a00 	vldr	s13, [r3]
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <TIM3_IRQHandler+0xac0>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a96:	4b57      	ldr	r3, [pc, #348]	; (8003bf4 <TIM3_IRQHandler+0xac4>)
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aa4:	4b54      	ldr	r3, [pc, #336]	; (8003bf8 <TIM3_IRQHandler+0xac8>)
 8003aa6:	edd3 6a00 	vldr	s13, [r3]
 8003aaa:	4b54      	ldr	r3, [pc, #336]	; (8003bfc <TIM3_IRQHandler+0xacc>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <TIM3_IRQHandler+0xad0>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac2:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <TIM3_IRQHandler+0xad4>)
 8003ac4:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003ac8:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <TIM3_IRQHandler+0xad8>)
 8003aca:	edd3 7a00 	vldr	s15, [r3]
 8003ace:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8003c0c <TIM3_IRQHandler+0xadc>
 8003ad2:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8003c10 <TIM3_IRQHandler+0xae0>
 8003ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ada:	f7ff f81b 	bl	8002b14 <limit>
 8003ade:	eef0 7a40 	vmov.f32	s15, s0
 8003ae2:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <TIM3_IRQHandler+0xad8>)
 8003ae4:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 8003ae8:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <TIM3_IRQHandler+0xae4>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8003c0c <TIM3_IRQHandler+0xadc>
 8003af2:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003c10 <TIM3_IRQHandler+0xae0>
 8003af6:	eeb0 0a67 	vmov.f32	s0, s15
 8003afa:	f7ff f80b 	bl	8002b14 <limit>
 8003afe:	eef0 7a40 	vmov.f32	s15, s0
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <TIM3_IRQHandler+0xae4>)
 8003b04:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003b08:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <TIM3_IRQHandler+0xaac>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8003c0c <TIM3_IRQHandler+0xadc>
 8003b12:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8003c10 <TIM3_IRQHandler+0xae0>
 8003b16:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1a:	f7fe fffb 	bl	8002b14 <limit>
 8003b1e:	eef0 7a40 	vmov.f32	s15, s0
 8003b22:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <TIM3_IRQHandler+0xaac>)
 8003b24:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <TIM3_IRQHandler+0xad4>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8003c0c <TIM3_IRQHandler+0xadc>
 8003b32:	eddf 0a37 	vldr	s1, [pc, #220]	; 8003c10 <TIM3_IRQHandler+0xae0>
 8003b36:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3a:	f7fe ffeb 	bl	8002b14 <limit>
 8003b3e:	eef0 7a40 	vmov.f32	s15, s0
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <TIM3_IRQHandler+0xad4>)
 8003b44:	edc3 7a00 	vstr	s15, [r3]

      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003b48:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <TIM3_IRQHandler+0xad8>)
 8003b4a:	edd3 7a00 	vldr	s15, [r3]
 8003b4e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <TIM3_IRQHandler+0xae4>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <TIM3_IRQHandler+0xaac>)
 8003b5e:	edd3 7a00 	vldr	s15, [r3]
 8003b62:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <TIM3_IRQHandler+0xad4>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b70:	ee17 3a90 	vmov	r3, s15
 8003b74:	ee16 2a10 	vmov	r2, s12
 8003b78:	ee16 1a90 	vmov	r1, s13
 8003b7c:	ee17 0a10 	vmov	r0, s14
 8003b80:	f7fe fff2 	bl	8002b68 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <TIM3_IRQHandler+0xae8>)
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003c1c <TIM3_IRQHandler+0xaec>
 8003b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	d900      	bls.n	8003b9a <TIM3_IRQHandler+0xa6a>
        fly_mode = init;
      }

      break;
 8003b98:	e002      	b.n	8003ba0 <TIM3_IRQHandler+0xa70>
        fly_mode = init;
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <TIM3_IRQHandler+0xaf0>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
      break;
 8003ba0:	bf00      	nop
  }

#if MONITOR == 1
  monitor[0] = angle_x;
 8003ba2:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <TIM3_IRQHandler+0xaf4>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6013      	str	r3, [r2, #0]
  monitor[1] = angle_y;
 8003ba8:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <TIM3_IRQHandler+0xaf4>)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6053      	str	r3, [r2, #4]
  monitor[2] = angle_z;
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <TIM3_IRQHandler+0xaf4>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6093      	str	r3, [r2, #8]
  monitor[3] = g_gx;
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <TIM3_IRQHandler+0xaf8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <TIM3_IRQHandler+0xaf4>)
 8003bba:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_gy;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <TIM3_IRQHandler+0xafc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <TIM3_IRQHandler+0xaf4>)
 8003bc2:	6113      	str	r3, [r2, #16]
  monitor[5] = g_gz;
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <TIM3_IRQHandler+0xb00>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <TIM3_IRQHandler+0xaf4>)
 8003bca:	6153      	str	r3, [r2, #20]
  monitor[4] = g_sig4;
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bcc:	4819      	ldr	r0, [pc, #100]	; (8003c34 <TIM3_IRQHandler+0xb04>)
 8003bce:	f004 fb98 	bl	8008302 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000684 	.word	0x20000684
 8003be0:	2000064c 	.word	0x2000064c
 8003be4:	20000650 	.word	0x20000650
 8003be8:	20000658 	.word	0x20000658
 8003bec:	2000065c 	.word	0x2000065c
 8003bf0:	20000660 	.word	0x20000660
 8003bf4:	20000668 	.word	0x20000668
 8003bf8:	2000066c 	.word	0x2000066c
 8003bfc:	20000670 	.word	0x20000670
 8003c00:	20000678 	.word	0x20000678
 8003c04:	20000688 	.word	0x20000688
 8003c08:	2000067c 	.word	0x2000067c
 8003c0c:	446cc000 	.word	0x446cc000
 8003c10:	4408c000 	.word	0x4408c000
 8003c14:	20000680 	.word	0x20000680
 8003c18:	200006cc 	.word	0x200006cc
 8003c1c:	c2c60000 	.word	0xc2c60000
 8003c20:	20000648 	.word	0x20000648
 8003c24:	200006dc 	.word	0x200006dc
 8003c28:	200005f8 	.word	0x200005f8
 8003c2c:	200005fc 	.word	0x200005fc
 8003c30:	20000600 	.word	0x20000600
 8003c34:	200001f0 	.word	0x200001f0

08003c38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <TIM4_IRQHandler+0x10>)
 8003c3e:	f004 fb60 	bl	8008302 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000238 	.word	0x20000238

08003c4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <I2C1_EV_IRQHandler+0x10>)
 8003c52:	f001 fc5f 	bl	8005514 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200000b4 	.word	0x200000b4

08003c60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <I2C1_ER_IRQHandler+0x10>)
 8003c66:	f001 fdc6 	bl	80057f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200000b4 	.word	0x200000b4

08003c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <USART1_IRQHandler+0x10>)
 8003c7a:	f005 fc8b 	bl	8009594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000280 	.word	0x20000280

08003c88 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8003ca4:	4b87      	ldr	r3, [pc, #540]	; (8003ec4 <HAL_UART_RxCpltCallback+0x228>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
  // To know whether this timer is hanging
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);

  // Serialise control values
  static uint8_t g_control_1st_idx = 0;
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8003caa:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2bfe      	cmp	r3, #254	; 0xfe
 8003cb0:	d102      	bne.n	8003cb8 <HAL_UART_RxCpltCallback+0x1c>
 8003cb2:	4b86      	ldr	r3, [pc, #536]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8003cb8:	4b83      	ldr	r3, [pc, #524]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2bfe      	cmp	r3, #254	; 0xfe
 8003cbe:	d102      	bne.n	8003cc6 <HAL_UART_RxCpltCallback+0x2a>
 8003cc0:	4b82      	ldr	r3, [pc, #520]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	701a      	strb	r2, [r3, #0]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8003cc6:	4b80      	ldr	r3, [pc, #512]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003cc8:	789b      	ldrb	r3, [r3, #2]
 8003cca:	2bfe      	cmp	r3, #254	; 0xfe
 8003ccc:	d102      	bne.n	8003cd4 <HAL_UART_RxCpltCallback+0x38>
 8003cce:	4b7f      	ldr	r3, [pc, #508]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	701a      	strb	r2, [r3, #0]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8003cd4:	4b7c      	ldr	r3, [pc, #496]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003cd6:	78db      	ldrb	r3, [r3, #3]
 8003cd8:	2bfe      	cmp	r3, #254	; 0xfe
 8003cda:	d102      	bne.n	8003ce2 <HAL_UART_RxCpltCallback+0x46>
 8003cdc:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003cde:	2204      	movs	r2, #4
 8003ce0:	701a      	strb	r2, [r3, #0]
  if (g_control[4] == 254) g_control_1st_idx = 5;
 8003ce2:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003ce4:	791b      	ldrb	r3, [r3, #4]
 8003ce6:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce8:	d102      	bne.n	8003cf0 <HAL_UART_RxCpltCallback+0x54>
 8003cea:	4b78      	ldr	r3, [pc, #480]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003cec:	2205      	movs	r2, #5
 8003cee:	701a      	strb	r2, [r3, #0]
  if (g_control[5] == 254) g_control_1st_idx = 6;
 8003cf0:	4b75      	ldr	r3, [pc, #468]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003cf2:	795b      	ldrb	r3, [r3, #5]
 8003cf4:	2bfe      	cmp	r3, #254	; 0xfe
 8003cf6:	d102      	bne.n	8003cfe <HAL_UART_RxCpltCallback+0x62>
 8003cf8:	4b74      	ldr	r3, [pc, #464]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003cfa:	2206      	movs	r2, #6
 8003cfc:	701a      	strb	r2, [r3, #0]
  if (g_control[6] == 254) g_control_1st_idx = 7;
 8003cfe:	4b72      	ldr	r3, [pc, #456]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003d00:	799b      	ldrb	r3, [r3, #6]
 8003d02:	2bfe      	cmp	r3, #254	; 0xfe
 8003d04:	d102      	bne.n	8003d0c <HAL_UART_RxCpltCallback+0x70>
 8003d06:	4b71      	ldr	r3, [pc, #452]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d08:	2207      	movs	r2, #7
 8003d0a:	701a      	strb	r2, [r3, #0]
  if (g_control[7] == 254) g_control_1st_idx = 8;
 8003d0c:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003d0e:	79db      	ldrb	r3, [r3, #7]
 8003d10:	2bfe      	cmp	r3, #254	; 0xfe
 8003d12:	d102      	bne.n	8003d1a <HAL_UART_RxCpltCallback+0x7e>
 8003d14:	4b6d      	ldr	r3, [pc, #436]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d16:	2208      	movs	r2, #8
 8003d18:	701a      	strb	r2, [r3, #0]
  if (g_control[8] == 254) g_control_1st_idx = 9;
 8003d1a:	4b6b      	ldr	r3, [pc, #428]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003d1c:	7a1b      	ldrb	r3, [r3, #8]
 8003d1e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d20:	d102      	bne.n	8003d28 <HAL_UART_RxCpltCallback+0x8c>
 8003d22:	4b6a      	ldr	r3, [pc, #424]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d24:	2209      	movs	r2, #9
 8003d26:	701a      	strb	r2, [r3, #0]
  if (g_control[9] == 254) g_control_1st_idx = 0;
 8003d28:	4b67      	ldr	r3, [pc, #412]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003d2a:	7a5b      	ldrb	r3, [r3, #9]
 8003d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8003d2e:	d102      	bne.n	8003d36 <HAL_UART_RxCpltCallback+0x9a>
 8003d30:	4b66      	ldr	r3, [pc, #408]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
  g_P_pitch_gain = g_control[g_control_1st_idx];
 8003d36:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003d3e:	5c9a      	ldrb	r2, [r3, r2]
 8003d40:	4b63      	ldr	r3, [pc, #396]	; (8003ed0 <HAL_UART_RxCpltCallback+0x234>)
 8003d42:	701a      	strb	r2, [r3, #0]
  g_I_pitch_gain = g_control[(g_control_1st_idx+1)%10];
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	1c59      	adds	r1, r3, #1
 8003d4a:	4b62      	ldr	r3, [pc, #392]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003d4c:	fb83 2301 	smull	r2, r3, r3, r1
 8003d50:	109a      	asrs	r2, r3, #2
 8003d52:	17cb      	asrs	r3, r1, #31
 8003d54:	1ad2      	subs	r2, r2, r3
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	1aca      	subs	r2, r1, r3
 8003d60:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003d62:	5c9a      	ldrb	r2, [r3, r2]
 8003d64:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <HAL_UART_RxCpltCallback+0x23c>)
 8003d66:	701a      	strb	r2, [r3, #0]
  g_D_pitch_gain = g_control[(g_control_1st_idx+2)%10];
 8003d68:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	1c99      	adds	r1, r3, #2
 8003d6e:	4b59      	ldr	r3, [pc, #356]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003d70:	fb83 2301 	smull	r2, r3, r3, r1
 8003d74:	109a      	asrs	r2, r3, #2
 8003d76:	17cb      	asrs	r3, r1, #31
 8003d78:	1ad2      	subs	r2, r2, r3
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	1aca      	subs	r2, r1, r3
 8003d84:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003d86:	5c9a      	ldrb	r2, [r3, r2]
 8003d88:	4b54      	ldr	r3, [pc, #336]	; (8003edc <HAL_UART_RxCpltCallback+0x240>)
 8003d8a:	701a      	strb	r2, [r3, #0]
  g_P_roll_gain = g_control[(g_control_1st_idx+3)%10];
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	1cd9      	adds	r1, r3, #3
 8003d92:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003d94:	fb83 2301 	smull	r2, r3, r3, r1
 8003d98:	109a      	asrs	r2, r3, #2
 8003d9a:	17cb      	asrs	r3, r1, #31
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	1aca      	subs	r2, r1, r3
 8003da8:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003daa:	5c9a      	ldrb	r2, [r3, r2]
 8003dac:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <HAL_UART_RxCpltCallback+0x244>)
 8003dae:	701a      	strb	r2, [r3, #0]
  g_I_roll_gain = g_control[(g_control_1st_idx+4)%10];
 8003db0:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	1d19      	adds	r1, r3, #4
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003db8:	fb83 2301 	smull	r2, r3, r3, r1
 8003dbc:	109a      	asrs	r2, r3, #2
 8003dbe:	17cb      	asrs	r3, r1, #31
 8003dc0:	1ad2      	subs	r2, r2, r3
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	1aca      	subs	r2, r1, r3
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003dce:	5c9a      	ldrb	r2, [r3, r2]
 8003dd0:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_UART_RxCpltCallback+0x248>)
 8003dd2:	701a      	strb	r2, [r3, #0]
  g_D_roll_gain = g_control[(g_control_1st_idx+5)%10];
 8003dd4:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	1d59      	adds	r1, r3, #5
 8003dda:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003ddc:	fb83 2301 	smull	r2, r3, r3, r1
 8003de0:	109a      	asrs	r2, r3, #2
 8003de2:	17cb      	asrs	r3, r1, #31
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	1aca      	subs	r2, r1, r3
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003df2:	5c9a      	ldrb	r2, [r3, r2]
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <HAL_UART_RxCpltCallback+0x24c>)
 8003df6:	701a      	strb	r2, [r3, #0]
  g_P_yaw_gain = g_control[(g_control_1st_idx+6)%10];
 8003df8:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	1d99      	adds	r1, r3, #6
 8003dfe:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003e00:	fb83 2301 	smull	r2, r3, r3, r1
 8003e04:	109a      	asrs	r2, r3, #2
 8003e06:	17cb      	asrs	r3, r1, #31
 8003e08:	1ad2      	subs	r2, r2, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	1aca      	subs	r2, r1, r3
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003e16:	5c9a      	ldrb	r2, [r3, r2]
 8003e18:	4b34      	ldr	r3, [pc, #208]	; (8003eec <HAL_UART_RxCpltCallback+0x250>)
 8003e1a:	701a      	strb	r2, [r3, #0]
  g_I_yaw_gain = g_control[(g_control_1st_idx+7)%10];
 8003e1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	1dd9      	adds	r1, r3, #7
 8003e22:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003e24:	fb83 2301 	smull	r2, r3, r3, r1
 8003e28:	109a      	asrs	r2, r3, #2
 8003e2a:	17cb      	asrs	r3, r1, #31
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	1aca      	subs	r2, r1, r3
 8003e38:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003e3a:	5c9a      	ldrb	r2, [r3, r2]
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_UART_RxCpltCallback+0x254>)
 8003e3e:	701a      	strb	r2, [r3, #0]
  g_D_yaw_gain = g_control[(g_control_1st_idx+8)%10];
 8003e40:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <HAL_UART_RxCpltCallback+0x230>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f103 0108 	add.w	r1, r3, #8
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_UART_RxCpltCallback+0x238>)
 8003e4a:	fb83 2301 	smull	r2, r3, r3, r1
 8003e4e:	109a      	asrs	r2, r3, #2
 8003e50:	17cb      	asrs	r3, r1, #31
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	1aca      	subs	r2, r1, r3
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_UART_RxCpltCallback+0x22c>)
 8003e60:	5c9a      	ldrb	r2, [r3, r2]
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_UART_RxCpltCallback+0x258>)
 8003e64:	701a      	strb	r2, [r3, #0]

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e68:	edd3 7a00 	vldr	s15, [r3]
 8003e6c:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e72:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e74:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e7a:	ed93 6a03 	vldr	s12, [r3, #12]
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e80:	edd3 5a04 	vldr	s11, [r3, #16]
 8003e84:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e86:	ed93 5a05 	vldr	s10, [r3, #20]
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e8c:	edd3 4a06 	vldr	s9, [r3, #24]
 8003e90:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e92:	edd3 3a07 	vldr	s7, [r3, #28]
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <HAL_UART_RxCpltCallback+0x25c>)
 8003e98:	ed93 4a08 	vldr	s8, [r3, #32]
 8003e9c:	eeb0 3a64 	vmov.f32	s6, s9
 8003ea0:	eef0 2a45 	vmov.f32	s5, s10
 8003ea4:	eeb0 2a65 	vmov.f32	s4, s11
 8003ea8:	eef0 1a46 	vmov.f32	s3, s12
 8003eac:	eeb0 1a66 	vmov.f32	s2, s13
 8003eb0:	eef0 0a47 	vmov.f32	s1, s14
 8003eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb8:	f7fd f928 	bl	800110c <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	200004c0 	.word	0x200004c0
 8003ecc:	20000700 	.word	0x20000700
 8003ed0:	2000001c 	.word	0x2000001c
 8003ed4:	66666667 	.word	0x66666667
 8003ed8:	2000001d 	.word	0x2000001d
 8003edc:	2000001e 	.word	0x2000001e
 8003ee0:	2000001f 	.word	0x2000001f
 8003ee4:	20000020 	.word	0x20000020
 8003ee8:	20000021 	.word	0x20000021
 8003eec:	20000022 	.word	0x20000022
 8003ef0:	20000023 	.word	0x20000023
 8003ef4:	20000024 	.word	0x20000024
 8003ef8:	200006dc 	.word	0x200006dc

08003efc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7f1b      	ldrb	r3, [r3, #28]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d12f      	bne.n	8003f6c <HAL_TIM_IC_CaptureCallback+0x70>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f10:	488a      	ldr	r0, [pc, #552]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f12:	f000 fd8d 	bl	8004a30 <HAL_GPIO_ReadPin>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d107      	bne.n	8003f2c <HAL_TIM_IC_CaptureCallback+0x30>
      pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4888      	ldr	r0, [pc, #544]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f20:	f004 fd1e 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b86      	ldr	r3, [pc, #536]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f2a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8003f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f30:	4882      	ldr	r0, [pc, #520]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f32:	f000 fd7d 	bl	8004a30 <HAL_GPIO_ReadPin>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d117      	bne.n	8003f6c <HAL_TIM_IC_CaptureCallback+0x70>
      pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4880      	ldr	r0, [pc, #512]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f40:	f004 fd0e 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b7e      	ldr	r3, [pc, #504]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f4a:	605a      	str	r2, [r3, #4]
      int value = pwm_in[1] - pwm_in[0];
 8003f4c:	4b7d      	ldr	r3, [pc, #500]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4b7c      	ldr	r3, [pc, #496]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	617b      	str	r3, [r7, #20]
      if (value >= 200 && value < 400) {
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2bc7      	cmp	r3, #199	; 0xc7
 8003f5c:	dd06      	ble.n	8003f6c <HAL_TIM_IC_CaptureCallback+0x70>
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003f64:	da02      	bge.n	8003f6c <HAL_TIM_IC_CaptureCallback+0x70>
        pwm_in[2] = value;
 8003f66:	4a77      	ldr	r2, [pc, #476]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	6093      	str	r3, [r2, #8]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7f1b      	ldrb	r3, [r3, #28]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d12f      	bne.n	8003fd4 <HAL_TIM_IC_CaptureCallback+0xd8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8003f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f78:	4870      	ldr	r0, [pc, #448]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f7a:	f000 fd59 	bl	8004a30 <HAL_GPIO_ReadPin>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IC_CaptureCallback+0x98>
      pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003f84:	2104      	movs	r1, #4
 8003f86:	486e      	ldr	r0, [pc, #440]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f88:	f004 fcea 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f92:	60da      	str	r2, [r3, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f98:	4868      	ldr	r0, [pc, #416]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f9a:	f000 fd49 	bl	8004a30 <HAL_GPIO_ReadPin>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d117      	bne.n	8003fd4 <HAL_TIM_IC_CaptureCallback+0xd8>
      pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	4866      	ldr	r0, [pc, #408]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fa8:	f004 fcda 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fb2:	611a      	str	r2, [r3, #16]
      int value = pwm_in[4] - pwm_in[3];
 8003fb4:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	4b62      	ldr	r3, [pc, #392]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	613b      	str	r3, [r7, #16]
      if (value >= 200 && value < 400) {
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2bc7      	cmp	r3, #199	; 0xc7
 8003fc4:	dd06      	ble.n	8003fd4 <HAL_TIM_IC_CaptureCallback+0xd8>
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003fcc:	da02      	bge.n	8003fd4 <HAL_TIM_IC_CaptureCallback+0xd8>
        pwm_in[5] = value;
 8003fce:	4a5d      	ldr	r2, [pc, #372]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6153      	str	r3, [r2, #20]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7f1b      	ldrb	r3, [r3, #28]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d12f      	bne.n	800403c <HAL_TIM_IC_CaptureCallback+0x140>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8003fdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fe0:	4856      	ldr	r0, [pc, #344]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fe2:	f000 fd25 	bl	8004a30 <HAL_GPIO_ReadPin>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IC_CaptureCallback+0x100>
      pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8003fec:	2108      	movs	r1, #8
 8003fee:	4854      	ldr	r0, [pc, #336]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003ff0:	f004 fcb6 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b52      	ldr	r3, [pc, #328]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003ffa:	619a      	str	r2, [r3, #24]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8003ffc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004000:	484e      	ldr	r0, [pc, #312]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 8004002:	f000 fd15 	bl	8004a30 <HAL_GPIO_ReadPin>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d117      	bne.n	800403c <HAL_TIM_IC_CaptureCallback+0x140>
      pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 800400c:	2108      	movs	r1, #8
 800400e:	484c      	ldr	r0, [pc, #304]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004010:	f004 fca6 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 800401a:	61da      	str	r2, [r3, #28]
      int value = pwm_in[7] - pwm_in[6];
 800401c:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	4b48      	ldr	r3, [pc, #288]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	60fb      	str	r3, [r7, #12]
      if (value >= 200 && value < 400) {
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2bc7      	cmp	r3, #199	; 0xc7
 800402c:	dd06      	ble.n	800403c <HAL_TIM_IC_CaptureCallback+0x140>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004034:	da02      	bge.n	800403c <HAL_TIM_IC_CaptureCallback+0x140>
        pwm_in[8] = value;
 8004036:	4a43      	ldr	r2, [pc, #268]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6213      	str	r3, [r2, #32]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7f1b      	ldrb	r3, [r3, #28]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d12f      	bne.n	80040a4 <HAL_TIM_IC_CaptureCallback+0x1a8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8004044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004048:	483c      	ldr	r0, [pc, #240]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 800404a:	f000 fcf1 	bl	8004a30 <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d107      	bne.n	8004064 <HAL_TIM_IC_CaptureCallback+0x168>
      pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004054:	210c      	movs	r1, #12
 8004056:	483a      	ldr	r0, [pc, #232]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004058:	f004 fc82 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b38      	ldr	r3, [pc, #224]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8004064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004068:	4834      	ldr	r0, [pc, #208]	; (800413c <HAL_TIM_IC_CaptureCallback+0x240>)
 800406a:	f000 fce1 	bl	8004a30 <HAL_GPIO_ReadPin>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d117      	bne.n	80040a4 <HAL_TIM_IC_CaptureCallback+0x1a8>
      pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004074:	210c      	movs	r1, #12
 8004076:	4832      	ldr	r0, [pc, #200]	; (8004140 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004078:	f004 fc72 	bl	8008960 <HAL_TIM_ReadCapturedValue>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
      int value = pwm_in[10] - pwm_in[9];
 8004084:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004088:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	60bb      	str	r3, [r7, #8]
      if (value >= 200 && value < 400) {
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2bc7      	cmp	r3, #199	; 0xc7
 8004094:	dd06      	ble.n	80040a4 <HAL_TIM_IC_CaptureCallback+0x1a8>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800409c:	da02      	bge.n	80040a4 <HAL_TIM_IC_CaptureCallback+0x1a8>
        pwm_in[11] = value;
 800409e:	4a29      	ldr	r2, [pc, #164]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
    }
  }

  g_thrust = SimpleKalmanFilter_updateEstimate(&g_filters[6], pwm_in[5] - 300);
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b4:	eeb0 0a67 	vmov.f32	s0, s15
 80040b8:	4823      	ldr	r0, [pc, #140]	; (8004148 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80040ba:	f7fc ff60 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80040be:	eef0 7a40 	vmov.f32	s15, s0
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_TIM_IC_CaptureCallback+0x250>)
 80040c4:	edc3 7a00 	vstr	s15, [r3]
  g_yaw = SimpleKalmanFilter_updateEstimate(&g_filters[7], pwm_in[2] - 300);
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	eeb0 0a67 	vmov.f32	s0, s15
 80040dc:	481c      	ldr	r0, [pc, #112]	; (8004150 <HAL_TIM_IC_CaptureCallback+0x254>)
 80040de:	f7fc ff4e 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 80040e2:	eef0 7a40 	vmov.f32	s15, s0
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_TIM_IC_CaptureCallback+0x258>)
 80040e8:	edc3 7a00 	vstr	s15, [r3]
  g_pitch = SimpleKalmanFilter_updateEstimate(&g_filters[8], pwm_in[8] - 300);
 80040ec:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	4815      	ldr	r0, [pc, #84]	; (8004158 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8004102:	f7fc ff3c 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 8004106:	eef0 7a40 	vmov.f32	s15, s0
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_TIM_IC_CaptureCallback+0x260>)
 800410c:	edc3 7a00 	vstr	s15, [r3]
  g_roll = SimpleKalmanFilter_updateEstimate(&g_filters[9], pwm_in[11] - 300);
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004120:	eeb0 0a67 	vmov.f32	s0, s15
 8004124:	480e      	ldr	r0, [pc, #56]	; (8004160 <HAL_TIM_IC_CaptureCallback+0x264>)
 8004126:	f7fc ff2a 	bl	8000f7e <SimpleKalmanFilter_updateEstimate>
 800412a:	eef0 7a40 	vmov.f32	s15, s0
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_TIM_IC_CaptureCallback+0x268>)
 8004130:	edc3 7a00 	vstr	s15, [r3]
  monitor[2] = 0;
  monitor[3] = g_pitch;
  monitor[4] = g_roll;
  monitor[5] = 0;
#endif
}
 8004134:	bf00      	nop
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40020c00 	.word	0x40020c00
 8004140:	20000238 	.word	0x20000238
 8004144:	2000068c 	.word	0x2000068c
 8004148:	20000354 	.word	0x20000354
 800414c:	200006cc 	.word	0x200006cc
 8004150:	2000036c 	.word	0x2000036c
 8004154:	200006d8 	.word	0x200006d8
 8004158:	20000384 	.word	0x20000384
 800415c:	200006d0 	.word	0x200006d0
 8004160:	2000039c 	.word	0x2000039c
 8004164:	200006d4 	.word	0x200006d4

08004168 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  MPU6050_i2c_mem_read_cb_handler(&g_mpu6050);
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <HAL_I2C_MemRxCpltCallback+0x18>)
 8004172:	f7fd fef3 	bl	8001f5c <MPU6050_i2c_mem_read_cb_handler>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000444 	.word	0x20000444

08004184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <_sbrk+0x5c>)
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <_sbrk+0x60>)
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <_sbrk+0x64>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <_sbrk+0x64>)
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <_sbrk+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d207      	bcs.n	80041c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b4:	f006 f8a0 	bl	800a2f8 <__errno>
 80041b8:	4603      	mov	r3, r0
 80041ba:	220c      	movs	r2, #12
 80041bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c2:	e009      	b.n	80041d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <_sbrk+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <_sbrk+0x64>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <_sbrk+0x64>)
 80041d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20020000 	.word	0x20020000
 80041e4:	00000400 	.word	0x00000400
 80041e8:	20000704 	.word	0x20000704
 80041ec:	20000720 	.word	0x20000720

080041f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SystemInit+0x20>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	4a05      	ldr	r2, [pc, #20]	; (8004210 <SystemInit+0x20>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800424c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004218:	480d      	ldr	r0, [pc, #52]	; (8004250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800421a:	490e      	ldr	r1, [pc, #56]	; (8004254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800421c:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800421e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004220:	e002      	b.n	8004228 <LoopCopyDataInit>

08004222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004226:	3304      	adds	r3, #4

08004228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800422a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800422c:	d3f9      	bcc.n	8004222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004230:	4c0b      	ldr	r4, [pc, #44]	; (8004260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004234:	e001      	b.n	800423a <LoopFillZerobss>

08004236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004238:	3204      	adds	r2, #4

0800423a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800423a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800423c:	d3fb      	bcc.n	8004236 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800423e:	f7ff ffd7 	bl	80041f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004242:	f006 f85f 	bl	800a304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004246:	f7fc ffef 	bl	8001228 <main>
  bx  lr    
 800424a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800424c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004254:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004258:	0800d938 	.word	0x0800d938
  ldr r2, =_sbss
 800425c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004260:	2000071c 	.word	0x2000071c

08004264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004264:	e7fe      	b.n	8004264 <ADC_IRQHandler>
	...

08004268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <HAL_Init+0x40>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <HAL_Init+0x40>)
 8004272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_Init+0x40>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <HAL_Init+0x40>)
 800427e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_Init+0x40>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <HAL_Init+0x40>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004290:	2003      	movs	r0, #3
 8004292:	f000 f94f 	bl	8004534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004296:	200f      	movs	r0, #15
 8004298:	f000 f808 	bl	80042ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800429c:	f7fe fa0a 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00

080042ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_InitTick+0x54>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_InitTick+0x58>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f967 	bl	800459e <HAL_SYSTICK_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e00e      	b.n	80042f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	d80a      	bhi.n	80042f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042e0:	2200      	movs	r2, #0
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e8:	f000 f92f 	bl	800454a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042ec:	4a06      	ldr	r2, [pc, #24]	; (8004308 <HAL_InitTick+0x5c>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000028 	.word	0x20000028
 8004304:	20000030 	.word	0x20000030
 8004308:	2000002c 	.word	0x2000002c

0800430c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_IncTick+0x20>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_IncTick+0x24>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4413      	add	r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_IncTick+0x24>)
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000030 	.word	0x20000030
 8004330:	20000708 	.word	0x20000708

08004334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return uwTick;
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <HAL_GetTick+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000708 	.word	0x20000708

0800434c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004354:	f7ff ffee 	bl	8004334 <HAL_GetTick>
 8004358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004364:	d005      	beq.n	8004372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_Delay+0x44>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004372:	bf00      	nop
 8004374:	f7ff ffde 	bl	8004334 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	429a      	cmp	r2, r3
 8004382:	d8f7      	bhi.n	8004374 <HAL_Delay+0x28>
  {
  }
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000030 	.word	0x20000030

08004394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	2b00      	cmp	r3, #0
 8004408:	db0b      	blt.n	8004422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	f003 021f 	and.w	r2, r3, #31
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <__NVIC_EnableIRQ+0x38>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2001      	movs	r0, #1
 800441a:	fa00 f202 	lsl.w	r2, r0, r2
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e100 	.word	0xe000e100

08004434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	6039      	str	r1, [r7, #0]
 800443e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	2b00      	cmp	r3, #0
 8004446:	db0a      	blt.n	800445e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	490c      	ldr	r1, [pc, #48]	; (8004480 <__NVIC_SetPriority+0x4c>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	0112      	lsls	r2, r2, #4
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	440b      	add	r3, r1
 8004458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800445c:	e00a      	b.n	8004474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4908      	ldr	r1, [pc, #32]	; (8004484 <__NVIC_SetPriority+0x50>)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	3b04      	subs	r3, #4
 800446c:	0112      	lsls	r2, r2, #4
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	440b      	add	r3, r1
 8004472:	761a      	strb	r2, [r3, #24]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000e100 	.word	0xe000e100
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f1c3 0307 	rsb	r3, r3, #7
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf28      	it	cs
 80044a6:	2304      	movcs	r3, #4
 80044a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3304      	adds	r3, #4
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d902      	bls.n	80044b8 <NVIC_EncodePriority+0x30>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3b03      	subs	r3, #3
 80044b6:	e000      	b.n	80044ba <NVIC_EncodePriority+0x32>
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	401a      	ands	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43d9      	mvns	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e0:	4313      	orrs	r3, r2
         );
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004500:	d301      	bcc.n	8004506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004502:	2301      	movs	r3, #1
 8004504:	e00f      	b.n	8004526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <SysTick_Config+0x40>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450e:	210f      	movs	r1, #15
 8004510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004514:	f7ff ff8e 	bl	8004434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <SysTick_Config+0x40>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <SysTick_Config+0x40>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010

08004534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff29 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800455c:	f7ff ff3e 	bl	80043dc <__NVIC_GetPriorityGrouping>
 8004560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7ff ff8e 	bl	8004488 <NVIC_EncodePriority>
 800456c:	4602      	mov	r2, r0
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff5d 	bl	8004434 <__NVIC_SetPriority>
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff31 	bl	80043f8 <__NVIC_EnableIRQ>
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ffa2 	bl	80044f0 <SysTick_Config>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff feb6 	bl	8004334 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d008      	beq.n	80045e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2280      	movs	r2, #128	; 0x80
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e052      	b.n	800468e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0216 	bic.w	r2, r2, #22
 80045f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004606:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d103      	bne.n	8004618 <HAL_DMA_Abort+0x62>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0208 	bic.w	r2, r2, #8
 8004626:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004638:	e013      	b.n	8004662 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800463a:	f7ff fe7b 	bl	8004334 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b05      	cmp	r3, #5
 8004646:	d90c      	bls.n	8004662 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2203      	movs	r2, #3
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e015      	b.n	800468e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e4      	bne.n	800463a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	223f      	movs	r2, #63	; 0x3f
 8004676:	409a      	lsls	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d004      	beq.n	80046b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2280      	movs	r2, #128	; 0x80
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e00c      	b.n	80046ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2205      	movs	r2, #5
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e8:	b2db      	uxtb	r3, r3
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	e16b      	b.n	80049ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004714:	2201      	movs	r2, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	429a      	cmp	r2, r3
 800472e:	f040 815a 	bne.w	80049e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d005      	beq.n	800474a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004746:	2b02      	cmp	r3, #2
 8004748:	d130      	bne.n	80047ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	2203      	movs	r2, #3
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004780:	2201      	movs	r2, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0201 	and.w	r2, r3, #1
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d017      	beq.n	80047e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	2203      	movs	r2, #3
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d123      	bne.n	800483c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	08da      	lsrs	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3208      	adds	r2, #8
 80047fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	220f      	movs	r2, #15
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	69b9      	ldr	r1, [r7, #24]
 8004838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0203 	and.w	r2, r3, #3
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80b4 	beq.w	80049e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	4b60      	ldr	r3, [pc, #384]	; (8004a04 <HAL_GPIO_Init+0x30c>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	4a5f      	ldr	r2, [pc, #380]	; (8004a04 <HAL_GPIO_Init+0x30c>)
 8004888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800488c:	6453      	str	r3, [r2, #68]	; 0x44
 800488e:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <HAL_GPIO_Init+0x30c>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800489a:	4a5b      	ldr	r2, [pc, #364]	; (8004a08 <HAL_GPIO_Init+0x310>)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a52      	ldr	r2, [pc, #328]	; (8004a0c <HAL_GPIO_Init+0x314>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02b      	beq.n	800491e <HAL_GPIO_Init+0x226>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a51      	ldr	r2, [pc, #324]	; (8004a10 <HAL_GPIO_Init+0x318>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d025      	beq.n	800491a <HAL_GPIO_Init+0x222>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a50      	ldr	r2, [pc, #320]	; (8004a14 <HAL_GPIO_Init+0x31c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01f      	beq.n	8004916 <HAL_GPIO_Init+0x21e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4f      	ldr	r2, [pc, #316]	; (8004a18 <HAL_GPIO_Init+0x320>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d019      	beq.n	8004912 <HAL_GPIO_Init+0x21a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a4e      	ldr	r2, [pc, #312]	; (8004a1c <HAL_GPIO_Init+0x324>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_GPIO_Init+0x216>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a4d      	ldr	r2, [pc, #308]	; (8004a20 <HAL_GPIO_Init+0x328>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00d      	beq.n	800490a <HAL_GPIO_Init+0x212>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4c      	ldr	r2, [pc, #304]	; (8004a24 <HAL_GPIO_Init+0x32c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <HAL_GPIO_Init+0x20e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a4b      	ldr	r2, [pc, #300]	; (8004a28 <HAL_GPIO_Init+0x330>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d101      	bne.n	8004902 <HAL_GPIO_Init+0x20a>
 80048fe:	2307      	movs	r3, #7
 8004900:	e00e      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004902:	2308      	movs	r3, #8
 8004904:	e00c      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004906:	2306      	movs	r3, #6
 8004908:	e00a      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800490a:	2305      	movs	r3, #5
 800490c:	e008      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800490e:	2304      	movs	r3, #4
 8004910:	e006      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004912:	2303      	movs	r3, #3
 8004914:	e004      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004916:	2302      	movs	r3, #2
 8004918:	e002      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800491e:	2300      	movs	r3, #0
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	f002 0203 	and.w	r2, r2, #3
 8004926:	0092      	lsls	r2, r2, #2
 8004928:	4093      	lsls	r3, r2
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004930:	4935      	ldr	r1, [pc, #212]	; (8004a08 <HAL_GPIO_Init+0x310>)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	3302      	adds	r3, #2
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493e:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_GPIO_Init+0x334>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004962:	4a32      	ldr	r2, [pc, #200]	; (8004a2c <HAL_GPIO_Init+0x334>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004968:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <HAL_GPIO_Init+0x334>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800498c:	4a27      	ldr	r2, [pc, #156]	; (8004a2c <HAL_GPIO_Init+0x334>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_GPIO_Init+0x334>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b6:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_GPIO_Init+0x334>)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_GPIO_Init+0x334>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049e0:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <HAL_GPIO_Init+0x334>)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b0f      	cmp	r3, #15
 80049f0:	f67f ae90 	bls.w	8004714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	3724      	adds	r7, #36	; 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
 8004a08:	40013800 	.word	0x40013800
 8004a0c:	40020000 	.word	0x40020000
 8004a10:	40020400 	.word	0x40020400
 8004a14:	40020800 	.word	0x40020800
 8004a18:	40020c00 	.word	0x40020c00
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40021400 	.word	0x40021400
 8004a24:	40021800 	.word	0x40021800
 8004a28:	40021c00 	.word	0x40021c00
 8004a2c:	40013c00 	.word	0x40013c00

08004a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e001      	b.n	8004a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a70:	787b      	ldrb	r3, [r7, #1]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a76:	887a      	ldrh	r2, [r7, #2]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a7c:	e003      	b.n	8004a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	041a      	lsls	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	619a      	str	r2, [r3, #24]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aa4:	887a      	ldrh	r2, [r7, #2]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	041a      	lsls	r2, r3, #16
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	43d9      	mvns	r1, r3
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	619a      	str	r2, [r3, #24]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e12b      	b.n	8004d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd fe08 	bl	8002704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	; 0x24
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f003 f96e 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 8004b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4a81      	ldr	r2, [pc, #516]	; (8004d3c <HAL_I2C_Init+0x274>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d807      	bhi.n	8004b4c <HAL_I2C_Init+0x84>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a80      	ldr	r2, [pc, #512]	; (8004d40 <HAL_I2C_Init+0x278>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf94      	ite	ls
 8004b44:	2301      	movls	r3, #1
 8004b46:	2300      	movhi	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e006      	b.n	8004b5a <HAL_I2C_Init+0x92>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a7d      	ldr	r2, [pc, #500]	; (8004d44 <HAL_I2C_Init+0x27c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	bf94      	ite	ls
 8004b54:	2301      	movls	r3, #1
 8004b56:	2300      	movhi	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0e7      	b.n	8004d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a78      	ldr	r2, [pc, #480]	; (8004d48 <HAL_I2C_Init+0x280>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0c9b      	lsrs	r3, r3, #18
 8004b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a6a      	ldr	r2, [pc, #424]	; (8004d3c <HAL_I2C_Init+0x274>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d802      	bhi.n	8004b9c <HAL_I2C_Init+0xd4>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	e009      	b.n	8004bb0 <HAL_I2C_Init+0xe8>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	4a69      	ldr	r2, [pc, #420]	; (8004d4c <HAL_I2C_Init+0x284>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	3301      	adds	r3, #1
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	495c      	ldr	r1, [pc, #368]	; (8004d3c <HAL_I2C_Init+0x274>)
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	d819      	bhi.n	8004c04 <HAL_I2C_Init+0x13c>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1e59      	subs	r1, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bde:	1c59      	adds	r1, r3, #1
 8004be0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004be4:	400b      	ands	r3, r1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_I2C_Init+0x138>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1e59      	subs	r1, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfe:	e051      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c00:	2304      	movs	r3, #4
 8004c02:	e04f      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d111      	bne.n	8004c30 <HAL_I2C_Init+0x168>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1e58      	subs	r0, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	440b      	add	r3, r1
 8004c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e012      	b.n	8004c56 <HAL_I2C_Init+0x18e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1e58      	subs	r0, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	0099      	lsls	r1, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c46:	3301      	adds	r3, #1
 8004c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Init+0x196>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e022      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10e      	bne.n	8004c84 <HAL_I2C_Init+0x1bc>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1e58      	subs	r0, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6859      	ldr	r1, [r3, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	440b      	add	r3, r1
 8004c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	e00f      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1e58      	subs	r0, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	0099      	lsls	r1, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	6809      	ldr	r1, [r1, #0]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6911      	ldr	r1, [r2, #16]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	4311      	orrs	r1, r2
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	000186a0 	.word	0x000186a0
 8004d40:	001e847f 	.word	0x001e847f
 8004d44:	003d08ff 	.word	0x003d08ff
 8004d48:	431bde83 	.word	0x431bde83
 8004d4c:	10624dd3 	.word	0x10624dd3

08004d50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	817b      	strh	r3, [r7, #10]
 8004d60:	4613      	mov	r3, r2
 8004d62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d64:	f7ff fae6 	bl	8004334 <HAL_GetTick>
 8004d68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	f040 80e0 	bne.w	8004f38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	2319      	movs	r3, #25
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4970      	ldr	r1, [pc, #448]	; (8004f44 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f002 f9a8 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e0d3      	b.n	8004f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2C_Master_Transmit+0x50>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e0cc      	b.n	8004f3a <HAL_I2C_Master_Transmit+0x1ea>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d007      	beq.n	8004dc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2221      	movs	r2, #33	; 0x21
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2210      	movs	r2, #16
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	893a      	ldrh	r2, [r7, #8]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a50      	ldr	r2, [pc, #320]	; (8004f48 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e08:	8979      	ldrh	r1, [r7, #10]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f001 ff6a 	bl	8006ce8 <I2C_MasterRequestWrite>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e08d      	b.n	8004f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e34:	e066      	b.n	8004f04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6a39      	ldr	r1, [r7, #32]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f002 fa22 	bl	8007284 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d107      	bne.n	8004e5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e06b      	b.n	8004f3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_I2C_Master_Transmit+0x188>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d017      	beq.n	8004ed8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	781a      	ldrb	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	6a39      	ldr	r1, [r7, #32]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f002 fa12 	bl	8007306 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d107      	bne.n	8004f00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e01a      	b.n	8004f3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d194      	bne.n	8004e36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e000      	b.n	8004f3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	00100002 	.word	0x00100002
 8004f48:	ffff0000 	.word	0xffff0000

08004f4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08c      	sub	sp, #48	; 0x30
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	460b      	mov	r3, r1
 8004f5a:	817b      	strh	r3, [r7, #10]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f60:	f7ff f9e8 	bl	8004334 <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	f040 820b 	bne.w	800538a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2319      	movs	r3, #25
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	497c      	ldr	r1, [pc, #496]	; (8005170 <HAL_I2C_Master_Receive+0x224>)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f002 f8aa 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e1fe      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_I2C_Master_Receive+0x50>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e1f7      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d007      	beq.n	8004fc2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2222      	movs	r2, #34	; 0x22
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2210      	movs	r2, #16
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	893a      	ldrh	r2, [r7, #8]
 8004ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a5c      	ldr	r2, [pc, #368]	; (8005174 <HAL_I2C_Master_Receive+0x228>)
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005004:	8979      	ldrh	r1, [r7, #10]
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f001 feee 	bl	8006dec <I2C_MasterRequestRead>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e1b8      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d113      	bne.n	800504a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005022:	2300      	movs	r3, #0
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	623b      	str	r3, [r7, #32]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	623b      	str	r3, [r7, #32]
 8005036:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e18c      	b.n	8005364 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	2b01      	cmp	r3, #1
 8005050:	d11b      	bne.n	800508a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e16c      	b.n	8005364 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	2b02      	cmp	r3, #2
 8005090:	d11b      	bne.n	80050ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	e14c      	b.n	8005364 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050f0:	e138      	b.n	8005364 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	f200 80f1 	bhi.w	80052de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005100:	2b01      	cmp	r3, #1
 8005102:	d123      	bne.n	800514c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f002 f96f 	bl	80073ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e139      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514a:	e10b      	b.n	8005364 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	2b02      	cmp	r3, #2
 8005152:	d14e      	bne.n	80051f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	4906      	ldr	r1, [pc, #24]	; (8005178 <HAL_I2C_Master_Receive+0x22c>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f001 ffba 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e10e      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
 800516e:	bf00      	nop
 8005170:	00100002 	.word	0x00100002
 8005174:	ffff0000 	.word	0xffff0000
 8005178:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f0:	e0b8      	b.n	8005364 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2200      	movs	r2, #0
 80051fa:	4966      	ldr	r1, [pc, #408]	; (8005394 <HAL_I2C_Master_Receive+0x448>)
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f001 ff6b 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0bf      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2200      	movs	r2, #0
 8005256:	494f      	ldr	r1, [pc, #316]	; (8005394 <HAL_I2C_Master_Receive+0x448>)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f001 ff3d 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e091      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052dc:	e042      	b.n	8005364 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f002 f882 	bl	80073ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e04c      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d118      	bne.n	8005364 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005368:	2b00      	cmp	r3, #0
 800536a:	f47f aec2 	bne.w	80050f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3728      	adds	r7, #40	; 0x28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	00010004 	.word	0x00010004

08005398 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b20      	cmp	r3, #32
 80053c0:	f040 809a 	bne.w	80054f8 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053c4:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_I2C_Mem_Read_IT+0x170>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	08db      	lsrs	r3, r3, #3
 80053ca:	4a50      	ldr	r2, [pc, #320]	; (800550c <HAL_I2C_Mem_Read_IT+0x174>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	0a1a      	lsrs	r2, r3, #8
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009a      	lsls	r2, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d116      	bne.n	8005418 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e070      	b.n	80054fa <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d0db      	beq.n	80053de <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_I2C_Mem_Read_IT+0x9c>
 8005430:	2302      	movs	r3, #2
 8005432:	e062      	b.n	80054fa <HAL_I2C_Mem_Read_IT+0x162>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d007      	beq.n	800545a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2222      	movs	r2, #34	; 0x22
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2240      	movs	r2, #64	; 0x40
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800548a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <HAL_I2C_Mem_Read_IT+0x178>)
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800549c:	897a      	ldrh	r2, [r7, #10]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80054a2:	893a      	ldrh	r2, [r7, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80054f2:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000028 	.word	0x20000028
 800550c:	14f8b589 	.word	0x14f8b589
 8005510:	ffff0000 	.word	0xffff0000

08005514 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005534:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b10      	cmp	r3, #16
 8005542:	d003      	beq.n	800554c <HAL_I2C_EV_IRQHandler+0x38>
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	f040 80c1 	bne.w	80056ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <HAL_I2C_EV_IRQHandler+0x6e>
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800556c:	d003      	beq.n	8005576 <HAL_I2C_EV_IRQHandler+0x62>
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005574:	d101      	bne.n	800557a <HAL_I2C_EV_IRQHandler+0x66>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <HAL_I2C_EV_IRQHandler+0x68>
 800557a:	2300      	movs	r3, #0
 800557c:	2b01      	cmp	r3, #1
 800557e:	f000 8132 	beq.w	80057e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <HAL_I2C_EV_IRQHandler+0x92>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	0a5b      	lsrs	r3, r3, #9
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d006      	beq.n	80055a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 ffac 	bl	80074f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fd87 	bl	80060b2 <I2C_Master_SB>
 80055a4:	e092      	b.n	80056cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	0a5b      	lsrs	r3, r3, #9
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fdfd 	bl	80061be <I2C_Master_ADD10>
 80055c4:	e082      	b.n	80056cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	0a5b      	lsrs	r3, r3, #9
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fe17 	bl	8006212 <I2C_Master_ADDR>
 80055e4:	e072      	b.n	80056cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d03b      	beq.n	800566a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	f000 80f3 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	09db      	lsrs	r3, r3, #7
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00f      	beq.n	8005630 <HAL_I2C_EV_IRQHandler+0x11c>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	0a9b      	lsrs	r3, r3, #10
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <HAL_I2C_EV_IRQHandler+0x11c>
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f9f7 	bl	8005a1c <I2C_MasterTransmit_TXE>
 800562e:	e04d      	b.n	80056cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80d6 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	0a5b      	lsrs	r3, r3, #9
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80cf 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	2b21      	cmp	r3, #33	; 0x21
 8005650:	d103      	bne.n	800565a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa7e 	bl	8005b54 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005658:	e0c7      	b.n	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	f040 80c4 	bne.w	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 faec 	bl	8005c40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005668:	e0bf      	b.n	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005678:	f000 80b7 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00f      	beq.n	80056a8 <HAL_I2C_EV_IRQHandler+0x194>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	0a9b      	lsrs	r3, r3, #10
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <HAL_I2C_EV_IRQHandler+0x194>
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	089b      	lsrs	r3, r3, #2
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d103      	bne.n	80056a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fb61 	bl	8005d68 <I2C_MasterReceive_RXNE>
 80056a6:	e011      	b.n	80056cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	089b      	lsrs	r3, r3, #2
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 809a 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	0a5b      	lsrs	r3, r3, #9
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8093 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fc0a 	bl	8005ede <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ca:	e08e      	b.n	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80056cc:	e08d      	b.n	80057ea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d004      	beq.n	80056e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	e007      	b.n	80056f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d012      	beq.n	8005722 <HAL_I2C_EV_IRQHandler+0x20e>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0a5b      	lsrs	r3, r3, #9
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 ffc8 	bl	80066b0 <I2C_Slave_ADDR>
 8005720:	e066      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_I2C_EV_IRQHandler+0x22e>
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	0a5b      	lsrs	r3, r3, #9
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 f802 	bl	8006744 <I2C_Slave_STOPF>
 8005740:	e056      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005742:	7bbb      	ldrb	r3, [r7, #14]
 8005744:	2b21      	cmp	r3, #33	; 0x21
 8005746:	d002      	beq.n	800574e <HAL_I2C_EV_IRQHandler+0x23a>
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b29      	cmp	r3, #41	; 0x29
 800574c:	d125      	bne.n	800579a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	09db      	lsrs	r3, r3, #7
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00f      	beq.n	800577a <HAL_I2C_EV_IRQHandler+0x266>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	0a9b      	lsrs	r3, r3, #10
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_I2C_EV_IRQHandler+0x266>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fede 	bl	8006534 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005778:	e039      	b.n	80057ee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	089b      	lsrs	r3, r3, #2
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d033      	beq.n	80057ee <HAL_I2C_EV_IRQHandler+0x2da>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	0a5b      	lsrs	r3, r3, #9
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02d      	beq.n	80057ee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 ff0b 	bl	80065ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005798:	e029      	b.n	80057ee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	099b      	lsrs	r3, r3, #6
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00f      	beq.n	80057c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	0a9b      	lsrs	r3, r3, #10
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 ff16 	bl	80065f0 <I2C_SlaveReceive_RXNE>
 80057c4:	e014      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	0a5b      	lsrs	r3, r3, #9
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 ff44 	bl	800666c <I2C_SlaveReceive_BTF>
 80057e4:	e004      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08a      	sub	sp, #40	; 0x28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005818:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0x4e>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005842:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	0a5b      	lsrs	r3, r3, #9
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <HAL_I2C_ER_IRQHandler+0x78>
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800586c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	0a9b      	lsrs	r3, r3, #10
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03f      	beq.n	80058fa <HAL_I2C_ER_IRQHandler+0x104>
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d039      	beq.n	80058fa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005886:	7efb      	ldrb	r3, [r7, #27]
 8005888:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80058a0:	7ebb      	ldrb	r3, [r7, #26]
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d112      	bne.n	80058cc <HAL_I2C_ER_IRQHandler+0xd6>
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10f      	bne.n	80058cc <HAL_I2C_ER_IRQHandler+0xd6>
 80058ac:	7cfb      	ldrb	r3, [r7, #19]
 80058ae:	2b21      	cmp	r3, #33	; 0x21
 80058b0:	d008      	beq.n	80058c4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b29      	cmp	r3, #41	; 0x29
 80058b6:	d005      	beq.n	80058c4 <HAL_I2C_ER_IRQHandler+0xce>
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	2b28      	cmp	r3, #40	; 0x28
 80058bc:	d106      	bne.n	80058cc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b21      	cmp	r3, #33	; 0x21
 80058c2:	d103      	bne.n	80058cc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 f86d 	bl	80069a4 <I2C_Slave_AF>
 80058ca:	e016      	b.n	80058fa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058d4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	f043 0304 	orr.w	r3, r3, #4
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058de:	7efb      	ldrb	r3, [r7, #27]
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d002      	beq.n	80058ea <HAL_I2C_ER_IRQHandler+0xf4>
 80058e4:	7efb      	ldrb	r3, [r7, #27]
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d107      	bne.n	80058fa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	0adb      	lsrs	r3, r3, #11
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <HAL_I2C_ER_IRQHandler+0x12e>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	f043 0308 	orr.w	r3, r3, #8
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005922:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 f8a4 	bl	8006a84 <I2C_ITError>
  }
}
 800593c:	bf00      	nop
 800593e:	3728      	adds	r7, #40	; 0x28
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
 80059a0:	4613      	mov	r3, r2
 80059a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0e:	b2db      	uxtb	r3, r3
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d150      	bne.n	8005ae4 <I2C_MasterTransmit_TXE+0xc8>
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b21      	cmp	r3, #33	; 0x21
 8005a46:	d14d      	bne.n	8005ae4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d01d      	beq.n	8005a8a <I2C_MasterTransmit_TXE+0x6e>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d01a      	beq.n	8005a8a <I2C_MasterTransmit_TXE+0x6e>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a5a:	d016      	beq.n	8005a8a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2211      	movs	r2, #17
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff ff5e 	bl	8005944 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a88:	e060      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a98:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d107      	bne.n	8005ad4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ff79 	bl	80059c4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ad2:	e03b      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ff31 	bl	8005944 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ae2:	e033      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b21      	cmp	r3, #33	; 0x21
 8005ae8:	d005      	beq.n	8005af6 <I2C_MasterTransmit_TXE+0xda>
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d12d      	bne.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b22      	cmp	r3, #34	; 0x22
 8005af4:	d12a      	bne.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005b10:	e01c      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d103      	bne.n	8005b26 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f88e 	bl	8005c40 <I2C_MemoryTransmit_TXE_BTF>
}
 8005b24:	e012      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b4a:	e7ff      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b21      	cmp	r3, #33	; 0x21
 8005b6c:	d164      	bne.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005b9c:	e04c      	b.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d01d      	beq.n	8005be0 <I2C_MasterTransmit_BTF+0x8c>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d01a      	beq.n	8005be0 <I2C_MasterTransmit_BTF+0x8c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bb0:	d016      	beq.n	8005be0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bc0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2211      	movs	r2, #17
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff feb3 	bl	8005944 <HAL_I2C_MasterTxCpltCallback>
}
 8005bde:	e02b      	b.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d107      	bne.n	8005c2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fece 	bl	80059c4 <HAL_I2C_MemTxCpltCallback>
}
 8005c28:	e006      	b.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fe86 	bl	8005944 <HAL_I2C_MasterTxCpltCallback>
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11d      	bne.n	8005c94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d10b      	bne.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005c76:	e073      	b.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	121b      	asrs	r3, r3, #8
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c92:	e065      	b.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d10b      	bne.n	8005cb4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cb2:	e055      	b.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d151      	bne.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b22      	cmp	r3, #34	; 0x22
 8005cc0:	d10d      	bne.n	8005cde <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cdc:	e040      	b.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b21      	cmp	r3, #33	; 0x21
 8005cec:	d112      	bne.n	8005d14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d12:	e025      	b.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d120      	bne.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b21      	cmp	r3, #33	; 0x21
 8005d22:	d11d      	bne.n	8005d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fe32 	bl	80059c4 <HAL_I2C_MemTxCpltCallback>
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b22      	cmp	r3, #34	; 0x22
 8005d7a:	f040 80ac 	bne.w	8005ed6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d921      	bls.n	8005dd0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	f040 808c 	bne.w	8005ed6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dcc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005dce:	e082      	b.n	8005ed6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d075      	beq.n	8005ec4 <I2C_MasterReceive_RXNE+0x15c>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d002      	beq.n	8005de4 <I2C_MasterReceive_RXNE+0x7c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d16f      	bne.n	8005ec4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 facf 	bl	8007388 <I2C_WaitOnSTOPRequestThroughIT>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d142      	bne.n	8005e76 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d10a      	bne.n	8005e60 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7fe f985 	bl	8004168 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e5e:	e03a      	b.n	8005ed6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2212      	movs	r2, #18
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fd72 	bl	8005958 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e74:	e02f      	b.n	8005ed6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff fd8b 	bl	80059d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ec2:	e008      	b.n	8005ed6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed2:	605a      	str	r2, [r3, #4]
}
 8005ed4:	e7ff      	b.n	8005ed6 <I2C_MasterReceive_RXNE+0x16e>
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d11b      	bne.n	8005f2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005f2c:	e0bd      	b.n	80060aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d129      	bne.n	8005f8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d00a      	beq.n	8005f64 <I2C_MasterReceive_BTF+0x86>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d007      	beq.n	8005f64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f8a:	e08e      	b.n	80060aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d176      	bne.n	8006084 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d002      	beq.n	8005fa2 <I2C_MasterReceive_BTF+0xc4>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b10      	cmp	r3, #16
 8005fa0:	d108      	bne.n	8005fb4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e019      	b.n	8005fe8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d002      	beq.n	8005fc0 <I2C_MasterReceive_BTF+0xe2>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d108      	bne.n	8005fd2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e00a      	b.n	8005fe8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d007      	beq.n	8005fe8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006042:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d10a      	bne.n	800606e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fe f87e 	bl	8004168 <HAL_I2C_MemRxCpltCallback>
}
 800606c:	e01d      	b.n	80060aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2212      	movs	r2, #18
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fc6b 	bl	8005958 <HAL_I2C_MasterRxCpltCallback>
}
 8006082:	e012      	b.n	80060aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d117      	bne.n	80060f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80060e0:	e067      	b.n	80061b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	611a      	str	r2, [r3, #16]
}
 80060f4:	e05d      	b.n	80061b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060fe:	d133      	bne.n	8006168 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b21      	cmp	r3, #33	; 0x21
 800610a:	d109      	bne.n	8006120 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800611c:	611a      	str	r2, [r3, #16]
 800611e:	e008      	b.n	8006132 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	b2da      	uxtb	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <I2C_Master_SB+0x92>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d032      	beq.n	80061b2 <I2C_Master_SB+0x100>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d02d      	beq.n	80061b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006164:	605a      	str	r2, [r3, #4]
}
 8006166:	e024      	b.n	80061b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10e      	bne.n	800618e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006174:	b29b      	uxth	r3, r3
 8006176:	11db      	asrs	r3, r3, #7
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f003 0306 	and.w	r3, r3, #6
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f063 030f 	orn	r3, r3, #15
 8006184:	b2da      	uxtb	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	611a      	str	r2, [r3, #16]
}
 800618c:	e011      	b.n	80061b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10d      	bne.n	80061b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	b29b      	uxth	r3, r3
 800619c:	11db      	asrs	r3, r3, #7
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f003 0306 	and.w	r3, r3, #6
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f063 030e 	orn	r3, r3, #14
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	611a      	str	r2, [r3, #16]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <I2C_Master_ADD10+0x26>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d108      	bne.n	80061f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00c      	beq.n	8006206 <I2C_Master_ADD10+0x48>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006204:	605a      	str	r2, [r3, #4]
  }
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006212:	b480      	push	{r7}
 8006214:	b091      	sub	sp, #68	; 0x44
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006220:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b22      	cmp	r3, #34	; 0x22
 800623a:	f040 8169 	bne.w	8006510 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10f      	bne.n	8006266 <I2C_Master_ADDR+0x54>
 8006246:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	d10b      	bne.n	8006266 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624e:	2300      	movs	r3, #0
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	633b      	str	r3, [r7, #48]	; 0x30
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	633b      	str	r3, [r7, #48]	; 0x30
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	e160      	b.n	8006528 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626a:	2b00      	cmp	r3, #0
 800626c:	d11d      	bne.n	80062aa <I2C_Master_ADDR+0x98>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006276:	d118      	bne.n	80062aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006278:	2300      	movs	r3, #0
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	651a      	str	r2, [r3, #80]	; 0x50
 80062a8:	e13e      	b.n	8006528 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d113      	bne.n	80062dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b4:	2300      	movs	r3, #0
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	e115      	b.n	8006508 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	f040 808a 	bne.w	80063fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062ee:	d137      	bne.n	8006360 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630e:	d113      	bne.n	8006338 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006320:	2300      	movs	r3, #0
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	e0e7      	b.n	8006508 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e0d3      	b.n	8006508 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	2b08      	cmp	r3, #8
 8006364:	d02e      	beq.n	80063c4 <I2C_Master_ADDR+0x1b2>
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	2b20      	cmp	r3, #32
 800636a:	d02b      	beq.n	80063c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	2b12      	cmp	r3, #18
 8006370:	d102      	bne.n	8006378 <I2C_Master_ADDR+0x166>
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	2b01      	cmp	r3, #1
 8006376:	d125      	bne.n	80063c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	2b04      	cmp	r3, #4
 800637c:	d00e      	beq.n	800639c <I2C_Master_ADDR+0x18a>
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b02      	cmp	r3, #2
 8006382:	d00b      	beq.n	800639c <I2C_Master_ADDR+0x18a>
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	2b10      	cmp	r3, #16
 8006388:	d008      	beq.n	800639c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e007      	b.n	80063ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ac:	2300      	movs	r3, #0
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	e0a1      	b.n	8006508 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e085      	b.n	8006508 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d14d      	bne.n	80064a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	2b04      	cmp	r3, #4
 800640a:	d016      	beq.n	800643a <I2C_Master_ADDR+0x228>
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	2b02      	cmp	r3, #2
 8006410:	d013      	beq.n	800643a <I2C_Master_ADDR+0x228>
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	2b10      	cmp	r3, #16
 8006416:	d010      	beq.n	800643a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006426:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e007      	b.n	800644a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006448:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006458:	d117      	bne.n	800648a <I2C_Master_ADDR+0x278>
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006460:	d00b      	beq.n	800647a <I2C_Master_ADDR+0x268>
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	2b01      	cmp	r3, #1
 8006466:	d008      	beq.n	800647a <I2C_Master_ADDR+0x268>
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	2b08      	cmp	r3, #8
 800646c:	d005      	beq.n	800647a <I2C_Master_ADDR+0x268>
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b10      	cmp	r3, #16
 8006472:	d002      	beq.n	800647a <I2C_Master_ADDR+0x268>
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	2b20      	cmp	r3, #32
 8006478:	d107      	bne.n	800648a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006488:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	e032      	b.n	8006508 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d117      	bne.n	80064f2 <I2C_Master_ADDR+0x2e0>
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064c8:	d00b      	beq.n	80064e2 <I2C_Master_ADDR+0x2d0>
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d008      	beq.n	80064e2 <I2C_Master_ADDR+0x2d0>
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d005      	beq.n	80064e2 <I2C_Master_ADDR+0x2d0>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	2b10      	cmp	r3, #16
 80064da:	d002      	beq.n	80064e2 <I2C_Master_ADDR+0x2d0>
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d107      	bne.n	80064f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800650e:	e00b      	b.n	8006528 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
}
 8006526:	e7ff      	b.n	8006528 <I2C_Master_ADDR+0x316>
 8006528:	bf00      	nop
 800652a:	3744      	adds	r7, #68	; 0x44
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006542:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02b      	beq.n	80065a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d114      	bne.n	80065a6 <I2C_SlaveTransmit_TXE+0x72>
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b29      	cmp	r3, #41	; 0x29
 8006580:	d111      	bne.n	80065a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006590:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2221      	movs	r2, #33	; 0x21
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2228      	movs	r2, #40	; 0x28
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff f9e3 	bl	800596c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d011      	beq.n	80065e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d02c      	beq.n	8006664 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d114      	bne.n	8006664 <I2C_SlaveReceive_RXNE+0x74>
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	2b2a      	cmp	r3, #42	; 0x2a
 800663e:	d111      	bne.n	8006664 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2222      	movs	r2, #34	; 0x22
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2228      	movs	r2, #40	; 0x28
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff f98e 	bl	8005980 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d012      	beq.n	80066a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066ca:	2b28      	cmp	r3, #40	; 0x28
 80066cc:	d127      	bne.n	800671e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	089b      	lsrs	r3, r3, #2
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80066ea:	2301      	movs	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	09db      	lsrs	r3, r3, #7
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	81bb      	strh	r3, [r7, #12]
 8006700:	e002      	b.n	8006708 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006710:	89ba      	ldrh	r2, [r7, #12]
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff f93c 	bl	8005994 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800671c:	e00e      	b.n	800673c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	60bb      	str	r3, [r7, #8]
 8006732:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006762:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006764:	2300      	movs	r3, #0
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	60bb      	str	r3, [r7, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006790:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800679c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a0:	d172      	bne.n	8006888 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b22      	cmp	r3, #34	; 0x22
 80067a6:	d002      	beq.n	80067ae <I2C_Slave_STOPF+0x6a>
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	2b2a      	cmp	r3, #42	; 0x2a
 80067ac:	d135      	bne.n	800681a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f043 0204 	orr.w	r2, r3, #4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fd ff77 	bl	80046da <HAL_DMA_GetState>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d049      	beq.n	8006886 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	4a69      	ldr	r2, [pc, #420]	; (800699c <I2C_Slave_STOPF+0x258>)
 80067f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fd ff49 	bl	8004696 <HAL_DMA_Abort_IT>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d03d      	beq.n	8006886 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006818:	e035      	b.n	8006886 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f043 0204 	orr.w	r2, r3, #4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800684c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006852:	4618      	mov	r0, r3
 8006854:	f7fd ff41 	bl	80046da <HAL_DMA_GetState>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d014      	beq.n	8006888 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	4a4e      	ldr	r2, [pc, #312]	; (800699c <I2C_Slave_STOPF+0x258>)
 8006864:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686a:	4618      	mov	r0, r3
 800686c:	f7fd ff13 	bl	8004696 <HAL_DMA_Abort_IT>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
 8006884:	e000      	b.n	8006888 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006886:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d03e      	beq.n	8006910 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b04      	cmp	r3, #4
 800689e:	d112      	bne.n	80068c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d112      	bne.n	80068fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	f043 0204 	orr.w	r2, r3, #4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f8b3 	bl	8006a84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800691e:	e039      	b.n	8006994 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	2b2a      	cmp	r3, #42	; 0x2a
 8006924:	d109      	bne.n	800693a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2228      	movs	r2, #40	; 0x28
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff f823 	bl	8005980 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b28      	cmp	r3, #40	; 0x28
 8006944:	d111      	bne.n	800696a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <I2C_Slave_STOPF+0x25c>)
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff f824 	bl	80059b0 <HAL_I2C_ListenCpltCallback>
}
 8006968:	e014      	b.n	8006994 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	2b22      	cmp	r3, #34	; 0x22
 8006970:	d002      	beq.n	8006978 <I2C_Slave_STOPF+0x234>
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b22      	cmp	r3, #34	; 0x22
 8006976:	d10d      	bne.n	8006994 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe fff6 	bl	8005980 <HAL_I2C_SlaveRxCpltCallback>
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	08006f89 	.word	0x08006f89
 80069a0:	ffff0000 	.word	0xffff0000

080069a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d002      	beq.n	80069c6 <I2C_Slave_AF+0x22>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d129      	bne.n	8006a1a <I2C_Slave_AF+0x76>
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b28      	cmp	r3, #40	; 0x28
 80069ca:	d126      	bne.n	8006a1a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <I2C_Slave_AF+0xdc>)
 80069d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fe ffcc 	bl	80059b0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006a18:	e02e      	b.n	8006a78 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b21      	cmp	r3, #33	; 0x21
 8006a1e:	d126      	bne.n	8006a6e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a17      	ldr	r2, [pc, #92]	; (8006a80 <I2C_Slave_AF+0xdc>)
 8006a24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2221      	movs	r2, #33	; 0x21
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a4a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a54:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a64:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fe ff80 	bl	800596c <HAL_I2C_SlaveTxCpltCallback>
}
 8006a6c:	e004      	b.n	8006a78 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a76:	615a      	str	r2, [r3, #20]
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	ffff0000 	.word	0xffff0000

08006a84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d002      	beq.n	8006aa8 <I2C_ITError+0x24>
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d10a      	bne.n	8006abe <I2C_ITError+0x3a>
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b22      	cmp	r3, #34	; 0x22
 8006aac:	d107      	bne.n	8006abe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006abc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ac4:	2b28      	cmp	r3, #40	; 0x28
 8006ac6:	d107      	bne.n	8006ad8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2228      	movs	r2, #40	; 0x28
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ad6:	e015      	b.n	8006b04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae6:	d00a      	beq.n	8006afe <I2C_ITError+0x7a>
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	2b60      	cmp	r3, #96	; 0x60
 8006aec:	d007      	beq.n	8006afe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b12:	d162      	bne.n	8006bda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d020      	beq.n	8006b74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	4a6a      	ldr	r2, [pc, #424]	; (8006ce0 <I2C_ITError+0x25c>)
 8006b38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fd fda9 	bl	8004696 <HAL_DMA_Abort_IT>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8089 	beq.w	8006c5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0201 	bic.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b6e:	4610      	mov	r0, r2
 8006b70:	4798      	blx	r3
 8006b72:	e074      	b.n	8006c5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	4a59      	ldr	r2, [pc, #356]	; (8006ce0 <I2C_ITError+0x25c>)
 8006b7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fd fd88 	bl	8004696 <HAL_DMA_Abort_IT>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d068      	beq.n	8006c5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	d10b      	bne.n	8006bb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	e041      	b.n	8006c5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b60      	cmp	r3, #96	; 0x60
 8006be4:	d125      	bne.n	8006c32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d10b      	bne.n	8006c1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0201 	bic.w	r2, r2, #1
 8006c28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fe fede 	bl	80059ec <HAL_I2C_AbortCpltCallback>
 8006c30:	e015      	b.n	8006c5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d10b      	bne.n	8006c58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fe febd 	bl	80059d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10e      	bne.n	8006c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d109      	bne.n	8006c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d113      	bne.n	8006cd8 <I2C_ITError+0x254>
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b28      	cmp	r3, #40	; 0x28
 8006cb4:	d110      	bne.n	8006cd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <I2C_ITError+0x260>)
 8006cba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fe fe6c 	bl	80059b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	08006f89 	.word	0x08006f89
 8006ce4:	ffff0000 	.word	0xffff0000

08006ce8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d006      	beq.n	8006d12 <I2C_MasterRequestWrite+0x2a>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d003      	beq.n	8006d12 <I2C_MasterRequestWrite+0x2a>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d10:	d108      	bne.n	8006d24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e00b      	b.n	8006d3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	2b12      	cmp	r3, #18
 8006d2a:	d107      	bne.n	8006d3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f9c5 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d62:	d103      	bne.n	8006d6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e035      	b.n	8006ddc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d78:	d108      	bne.n	8006d8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d7a:	897b      	ldrh	r3, [r7, #10]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d88:	611a      	str	r2, [r3, #16]
 8006d8a:	e01b      	b.n	8006dc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d8c:	897b      	ldrh	r3, [r7, #10]
 8006d8e:	11db      	asrs	r3, r3, #7
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 0306 	and.w	r3, r3, #6
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f063 030f 	orn	r3, r3, #15
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	490e      	ldr	r1, [pc, #56]	; (8006de4 <I2C_MasterRequestWrite+0xfc>)
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f9eb 	bl	8007186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e010      	b.n	8006ddc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dba:	897b      	ldrh	r3, [r7, #10]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	4907      	ldr	r1, [pc, #28]	; (8006de8 <I2C_MasterRequestWrite+0x100>)
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f9db 	bl	8007186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	00010008 	.word	0x00010008
 8006de8:	00010002 	.word	0x00010002

08006dec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	607a      	str	r2, [r7, #4]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d006      	beq.n	8006e26 <I2C_MasterRequestRead+0x3a>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d003      	beq.n	8006e26 <I2C_MasterRequestRead+0x3a>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e24:	d108      	bne.n	8006e38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e00b      	b.n	8006e50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	2b11      	cmp	r3, #17
 8006e3e:	d107      	bne.n	8006e50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f93b 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00d      	beq.n	8006e84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e76:	d103      	bne.n	8006e80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e079      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e8c:	d108      	bne.n	8006ea0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e8e:	897b      	ldrh	r3, [r7, #10]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	611a      	str	r2, [r3, #16]
 8006e9e:	e05f      	b.n	8006f60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ea0:	897b      	ldrh	r3, [r7, #10]
 8006ea2:	11db      	asrs	r3, r3, #7
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0306 	and.w	r3, r3, #6
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f063 030f 	orn	r3, r3, #15
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4930      	ldr	r1, [pc, #192]	; (8006f80 <I2C_MasterRequestRead+0x194>)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f961 	bl	8007186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e054      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ece:	897b      	ldrh	r3, [r7, #10]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4929      	ldr	r1, [pc, #164]	; (8006f84 <I2C_MasterRequestRead+0x198>)
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f951 	bl	8007186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e044      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f8d9 	bl	80070d8 <I2C_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00d      	beq.n	8006f48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3a:	d103      	bne.n	8006f44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e017      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f48:	897b      	ldrh	r3, [r7, #10]
 8006f4a:	11db      	asrs	r3, r3, #7
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0306 	and.w	r3, r3, #6
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f063 030e 	orn	r3, r3, #14
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4907      	ldr	r1, [pc, #28]	; (8006f84 <I2C_MasterRequestRead+0x198>)
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f90d 	bl	8007186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	00010008 	.word	0x00010008
 8006f84:	00010002 	.word	0x00010002

08006f88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fa2:	4b4b      	ldr	r3, [pc, #300]	; (80070d0 <I2C_DMAAbort+0x148>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	08db      	lsrs	r3, r3, #3
 8006fa8:	4a4a      	ldr	r2, [pc, #296]	; (80070d4 <I2C_DMAAbort+0x14c>)
 8006faa:	fba2 2303 	umull	r2, r3, r2, r3
 8006fae:	0a1a      	lsrs	r2, r3, #8
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	00da      	lsls	r2, r3, #3
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	f043 0220 	orr.w	r2, r3, #32
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006fce:	e00a      	b.n	8006fe6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d0ea      	beq.n	8006fbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	2200      	movs	r2, #0
 8007004:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007014:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2200      	movs	r2, #0
 800701a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	2200      	movs	r2, #0
 800702a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	2200      	movs	r2, #0
 800703a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b60      	cmp	r3, #96	; 0x60
 8007056:	d10e      	bne.n	8007076 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2200      	movs	r2, #0
 800706c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f7fe fcbc 	bl	80059ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007074:	e027      	b.n	80070c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007076:	7cfb      	ldrb	r3, [r7, #19]
 8007078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800707c:	2b28      	cmp	r3, #40	; 0x28
 800707e:	d117      	bne.n	80070b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800709e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2200      	movs	r2, #0
 80070a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2228      	movs	r2, #40	; 0x28
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070ae:	e007      	b.n	80070c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80070c0:	6978      	ldr	r0, [r7, #20]
 80070c2:	f7fe fc89 	bl	80059d8 <HAL_I2C_ErrorCallback>
}
 80070c6:	bf00      	nop
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000028 	.word	0x20000028
 80070d4:	14f8b589 	.word	0x14f8b589

080070d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4613      	mov	r3, r2
 80070e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e8:	e025      	b.n	8007136 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f0:	d021      	beq.n	8007136 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f2:	f7fd f91f 	bl	8004334 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d116      	bne.n	8007136 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f043 0220 	orr.w	r2, r3, #32
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e023      	b.n	800717e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	0c1b      	lsrs	r3, r3, #16
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10d      	bne.n	800715c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	43da      	mvns	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4013      	ands	r3, r2
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	bf0c      	ite	eq
 8007152:	2301      	moveq	r3, #1
 8007154:	2300      	movne	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	e00c      	b.n	8007176 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	43da      	mvns	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4013      	ands	r3, r2
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	bf0c      	ite	eq
 800716e:	2301      	moveq	r3, #1
 8007170:	2300      	movne	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	429a      	cmp	r2, r3
 800717a:	d0b6      	beq.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007194:	e051      	b.n	800723a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a4:	d123      	bne.n	80071ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f043 0204 	orr.w	r2, r3, #4
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e046      	b.n	800727c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f4:	d021      	beq.n	800723a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f6:	f7fd f89d 	bl	8004334 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d302      	bcc.n	800720c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d116      	bne.n	800723a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f043 0220 	orr.w	r2, r3, #32
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e020      	b.n	800727c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d10c      	bne.n	800725e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	43da      	mvns	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4013      	ands	r3, r2
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	bf14      	ite	ne
 8007256:	2301      	movne	r3, #1
 8007258:	2300      	moveq	r3, #0
 800725a:	b2db      	uxtb	r3, r3
 800725c:	e00b      	b.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	43da      	mvns	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4013      	ands	r3, r2
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d18d      	bne.n	8007196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007290:	e02d      	b.n	80072ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f900 	bl	8007498 <I2C_IsAcknowledgeFailed>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e02d      	b.n	80072fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072a8:	d021      	beq.n	80072ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072aa:	f7fd f843 	bl	8004334 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d302      	bcc.n	80072c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d116      	bne.n	80072ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f043 0220 	orr.w	r2, r3, #32
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e007      	b.n	80072fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f8:	2b80      	cmp	r3, #128	; 0x80
 80072fa:	d1ca      	bne.n	8007292 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007312:	e02d      	b.n	8007370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f8bf 	bl	8007498 <I2C_IsAcknowledgeFailed>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e02d      	b.n	8007380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732a:	d021      	beq.n	8007370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732c:	f7fd f802 	bl	8004334 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	429a      	cmp	r2, r3
 800733a:	d302      	bcc.n	8007342 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d116      	bne.n	8007370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	f043 0220 	orr.w	r2, r3, #32
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e007      	b.n	8007380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d1ca      	bne.n	8007314 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007394:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800739c:	fba2 2303 	umull	r2, r3, r2, r3
 80073a0:	0a1a      	lsrs	r2, r3, #8
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d107      	bne.n	80073c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e008      	b.n	80073d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d4:	d0e9      	beq.n	80073aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	20000028 	.word	0x20000028
 80073e8:	14f8b589 	.word	0x14f8b589

080073ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073f8:	e042      	b.n	8007480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b10      	cmp	r3, #16
 8007406:	d119      	bne.n	800743c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0210 	mvn.w	r2, #16
 8007410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e029      	b.n	8007490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743c:	f7fc ff7a 	bl	8004334 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	d302      	bcc.n	8007452 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d116      	bne.n	8007480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e007      	b.n	8007490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d1b5      	bne.n	80073fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ae:	d11b      	bne.n	80074e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	f043 0204 	orr.w	r2, r3, #4
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007506:	d103      	bne.n	8007510 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800750e:	e007      	b.n	8007520 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007518:	d102      	bne.n	8007520 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2208      	movs	r2, #8
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e267      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d075      	beq.n	8007636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800754a:	4b88      	ldr	r3, [pc, #544]	; (800776c <HAL_RCC_OscConfig+0x240>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 030c 	and.w	r3, r3, #12
 8007552:	2b04      	cmp	r3, #4
 8007554:	d00c      	beq.n	8007570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007556:	4b85      	ldr	r3, [pc, #532]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800755e:	2b08      	cmp	r3, #8
 8007560:	d112      	bne.n	8007588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007562:	4b82      	ldr	r3, [pc, #520]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800756a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800756e:	d10b      	bne.n	8007588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007570:	4b7e      	ldr	r3, [pc, #504]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d05b      	beq.n	8007634 <HAL_RCC_OscConfig+0x108>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d157      	bne.n	8007634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e242      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007590:	d106      	bne.n	80075a0 <HAL_RCC_OscConfig+0x74>
 8007592:	4b76      	ldr	r3, [pc, #472]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a75      	ldr	r2, [pc, #468]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	e01d      	b.n	80075dc <HAL_RCC_OscConfig+0xb0>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x98>
 80075aa:	4b70      	ldr	r3, [pc, #448]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a6f      	ldr	r2, [pc, #444]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4b6d      	ldr	r3, [pc, #436]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a6c      	ldr	r2, [pc, #432]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	e00b      	b.n	80075dc <HAL_RCC_OscConfig+0xb0>
 80075c4:	4b69      	ldr	r3, [pc, #420]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a68      	ldr	r2, [pc, #416]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	4b66      	ldr	r3, [pc, #408]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a65      	ldr	r2, [pc, #404]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80075d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d013      	beq.n	800760c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e4:	f7fc fea6 	bl	8004334 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075ec:	f7fc fea2 	bl	8004334 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b64      	cmp	r3, #100	; 0x64
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e207      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075fe:	4b5b      	ldr	r3, [pc, #364]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCC_OscConfig+0xc0>
 800760a:	e014      	b.n	8007636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760c:	f7fc fe92 	bl	8004334 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007614:	f7fc fe8e 	bl	8004334 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b64      	cmp	r3, #100	; 0x64
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e1f3      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007626:	4b51      	ldr	r3, [pc, #324]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f0      	bne.n	8007614 <HAL_RCC_OscConfig+0xe8>
 8007632:	e000      	b.n	8007636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d063      	beq.n	800770a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007642:	4b4a      	ldr	r3, [pc, #296]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 030c 	and.w	r3, r3, #12
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800764e:	4b47      	ldr	r3, [pc, #284]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007656:	2b08      	cmp	r3, #8
 8007658:	d11c      	bne.n	8007694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800765a:	4b44      	ldr	r3, [pc, #272]	; (800776c <HAL_RCC_OscConfig+0x240>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d116      	bne.n	8007694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007666:	4b41      	ldr	r3, [pc, #260]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <HAL_RCC_OscConfig+0x152>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d001      	beq.n	800767e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e1c7      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800767e:	4b3b      	ldr	r3, [pc, #236]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4937      	ldr	r1, [pc, #220]	; (800776c <HAL_RCC_OscConfig+0x240>)
 800768e:	4313      	orrs	r3, r2
 8007690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007692:	e03a      	b.n	800770a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800769c:	4b34      	ldr	r3, [pc, #208]	; (8007770 <HAL_RCC_OscConfig+0x244>)
 800769e:	2201      	movs	r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a2:	f7fc fe47 	bl	8004334 <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076aa:	f7fc fe43 	bl	8004334 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e1a8      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076bc:	4b2b      	ldr	r3, [pc, #172]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f0      	beq.n	80076aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c8:	4b28      	ldr	r3, [pc, #160]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4925      	ldr	r1, [pc, #148]	; (800776c <HAL_RCC_OscConfig+0x240>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	600b      	str	r3, [r1, #0]
 80076dc:	e015      	b.n	800770a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <HAL_RCC_OscConfig+0x244>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fc fe26 	bl	8004334 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ec:	f7fc fe22 	bl	8004334 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e187      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076fe:	4b1b      	ldr	r3, [pc, #108]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d036      	beq.n	8007784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d016      	beq.n	800774c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800771e:	4b15      	ldr	r3, [pc, #84]	; (8007774 <HAL_RCC_OscConfig+0x248>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007724:	f7fc fe06 	bl	8004334 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800772c:	f7fc fe02 	bl	8004334 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e167      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <HAL_RCC_OscConfig+0x240>)
 8007740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <HAL_RCC_OscConfig+0x200>
 800774a:	e01b      	b.n	8007784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_RCC_OscConfig+0x248>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007752:	f7fc fdef 	bl	8004334 <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007758:	e00e      	b.n	8007778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800775a:	f7fc fdeb 	bl	8004334 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d907      	bls.n	8007778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e150      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
 800776c:	40023800 	.word	0x40023800
 8007770:	42470000 	.word	0x42470000
 8007774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007778:	4b88      	ldr	r3, [pc, #544]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1ea      	bne.n	800775a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 8097 	beq.w	80078c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007796:	4b81      	ldr	r3, [pc, #516]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10f      	bne.n	80077c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	4b7d      	ldr	r3, [pc, #500]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	4a7c      	ldr	r2, [pc, #496]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6413      	str	r3, [r2, #64]	; 0x40
 80077b2:	4b7a      	ldr	r3, [pc, #488]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077c2:	4b77      	ldr	r3, [pc, #476]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d118      	bne.n	8007800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077ce:	4b74      	ldr	r3, [pc, #464]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a73      	ldr	r2, [pc, #460]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077da:	f7fc fdab 	bl	8004334 <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077e2:	f7fc fda7 	bl	8004334 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e10c      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077f4:	4b6a      	ldr	r3, [pc, #424]	; (80079a0 <HAL_RCC_OscConfig+0x474>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0f0      	beq.n	80077e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d106      	bne.n	8007816 <HAL_RCC_OscConfig+0x2ea>
 8007808:	4b64      	ldr	r3, [pc, #400]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	4a63      	ldr	r2, [pc, #396]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	6713      	str	r3, [r2, #112]	; 0x70
 8007814:	e01c      	b.n	8007850 <HAL_RCC_OscConfig+0x324>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b05      	cmp	r3, #5
 800781c:	d10c      	bne.n	8007838 <HAL_RCC_OscConfig+0x30c>
 800781e:	4b5f      	ldr	r3, [pc, #380]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	4a5e      	ldr	r2, [pc, #376]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007824:	f043 0304 	orr.w	r3, r3, #4
 8007828:	6713      	str	r3, [r2, #112]	; 0x70
 800782a:	4b5c      	ldr	r3, [pc, #368]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782e:	4a5b      	ldr	r2, [pc, #364]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007830:	f043 0301 	orr.w	r3, r3, #1
 8007834:	6713      	str	r3, [r2, #112]	; 0x70
 8007836:	e00b      	b.n	8007850 <HAL_RCC_OscConfig+0x324>
 8007838:	4b58      	ldr	r3, [pc, #352]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800783a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783c:	4a57      	ldr	r2, [pc, #348]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800783e:	f023 0301 	bic.w	r3, r3, #1
 8007842:	6713      	str	r3, [r2, #112]	; 0x70
 8007844:	4b55      	ldr	r3, [pc, #340]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007848:	4a54      	ldr	r2, [pc, #336]	; (800799c <HAL_RCC_OscConfig+0x470>)
 800784a:	f023 0304 	bic.w	r3, r3, #4
 800784e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d015      	beq.n	8007884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007858:	f7fc fd6c 	bl	8004334 <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800785e:	e00a      	b.n	8007876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007860:	f7fc fd68 	bl	8004334 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	f241 3288 	movw	r2, #5000	; 0x1388
 800786e:	4293      	cmp	r3, r2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e0cb      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007876:	4b49      	ldr	r3, [pc, #292]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0ee      	beq.n	8007860 <HAL_RCC_OscConfig+0x334>
 8007882:	e014      	b.n	80078ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007884:	f7fc fd56 	bl	8004334 <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800788a:	e00a      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800788c:	f7fc fd52 	bl	8004334 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	f241 3288 	movw	r2, #5000	; 0x1388
 800789a:	4293      	cmp	r3, r2
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e0b5      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078a2:	4b3e      	ldr	r3, [pc, #248]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1ee      	bne.n	800788c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d105      	bne.n	80078c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078b4:	4b39      	ldr	r3, [pc, #228]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	4a38      	ldr	r2, [pc, #224]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80a1 	beq.w	8007a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078ca:	4b34      	ldr	r3, [pc, #208]	; (800799c <HAL_RCC_OscConfig+0x470>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 030c 	and.w	r3, r3, #12
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d05c      	beq.n	8007990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d141      	bne.n	8007962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078de:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <HAL_RCC_OscConfig+0x478>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e4:	f7fc fd26 	bl	8004334 <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ec:	f7fc fd22 	bl	8004334 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e087      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078fe:	4b27      	ldr	r3, [pc, #156]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f0      	bne.n	80078ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	019b      	lsls	r3, r3, #6
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	3b01      	subs	r3, #1
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	061b      	lsls	r3, r3, #24
 800792e:	491b      	ldr	r1, [pc, #108]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007930:	4313      	orrs	r3, r2
 8007932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007934:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_RCC_OscConfig+0x478>)
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793a:	f7fc fcfb 	bl	8004334 <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007942:	f7fc fcf7 	bl	8004334 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e05c      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007954:	4b11      	ldr	r3, [pc, #68]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x416>
 8007960:	e054      	b.n	8007a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <HAL_RCC_OscConfig+0x478>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007968:	f7fc fce4 	bl	8004334 <HAL_GetTick>
 800796c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007970:	f7fc fce0 	bl	8004334 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e045      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007982:	4b06      	ldr	r3, [pc, #24]	; (800799c <HAL_RCC_OscConfig+0x470>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f0      	bne.n	8007970 <HAL_RCC_OscConfig+0x444>
 800798e:	e03d      	b.n	8007a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d107      	bne.n	80079a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e038      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
 800799c:	40023800 	.word	0x40023800
 80079a0:	40007000 	.word	0x40007000
 80079a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079a8:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <HAL_RCC_OscConfig+0x4ec>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d028      	beq.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d121      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d11a      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079d8:	4013      	ands	r3, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d111      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	3b01      	subs	r3, #1
 80079f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d107      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40023800 	.word	0x40023800

08007a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0cc      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a30:	4b68      	ldr	r3, [pc, #416]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d90c      	bls.n	8007a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3e:	4b65      	ldr	r3, [pc, #404]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a46:	4b63      	ldr	r3, [pc, #396]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d001      	beq.n	8007a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e0b8      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d020      	beq.n	8007aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a70:	4b59      	ldr	r3, [pc, #356]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	4a58      	ldr	r2, [pc, #352]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a88:	4b53      	ldr	r3, [pc, #332]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	4a52      	ldr	r2, [pc, #328]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a94:	4b50      	ldr	r3, [pc, #320]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	494d      	ldr	r1, [pc, #308]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d044      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d107      	bne.n	8007aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aba:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d119      	bne.n	8007afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e07f      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d003      	beq.n	8007ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d107      	bne.n	8007aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ada:	4b3f      	ldr	r3, [pc, #252]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d109      	bne.n	8007afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e06f      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aea:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e067      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007afa:	4b37      	ldr	r3, [pc, #220]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f023 0203 	bic.w	r2, r3, #3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4934      	ldr	r1, [pc, #208]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b0c:	f7fc fc12 	bl	8004334 <HAL_GetTick>
 8007b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b12:	e00a      	b.n	8007b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b14:	f7fc fc0e 	bl	8004334 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e04f      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b2a:	4b2b      	ldr	r3, [pc, #172]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 020c 	and.w	r2, r3, #12
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d1eb      	bne.n	8007b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d20c      	bcs.n	8007b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b4a:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b52:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d001      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e032      	b.n	8007bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b70:	4b19      	ldr	r3, [pc, #100]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4916      	ldr	r1, [pc, #88]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	490e      	ldr	r1, [pc, #56]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ba2:	f000 f821 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	091b      	lsrs	r3, r3, #4
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	490a      	ldr	r1, [pc, #40]	; (8007bdc <HAL_RCC_ClockConfig+0x1c0>)
 8007bb4:	5ccb      	ldrb	r3, [r1, r3]
 8007bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bba:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fc fb72 	bl	80042ac <HAL_InitTick>

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40023c00 	.word	0x40023c00
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	0800d6b8 	.word	0x0800d6b8
 8007be0:	20000028 	.word	0x20000028
 8007be4:	2000002c 	.word	0x2000002c

08007be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bec:	b094      	sub	sp, #80	; 0x50
 8007bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c00:	4b79      	ldr	r3, [pc, #484]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d00d      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0x40>
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	f200 80e1 	bhi.w	8007dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_RCC_GetSysClockFreq+0x34>
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d003      	beq.n	8007c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c1a:	e0db      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c1c:	4b73      	ldr	r3, [pc, #460]	; (8007dec <HAL_RCC_GetSysClockFreq+0x204>)
 8007c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007c20:	e0db      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c22:	4b73      	ldr	r3, [pc, #460]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c26:	e0d8      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c28:	4b6f      	ldr	r3, [pc, #444]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c32:	4b6d      	ldr	r3, [pc, #436]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d063      	beq.n	8007d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c3e:	4b6a      	ldr	r3, [pc, #424]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	099b      	lsrs	r3, r3, #6
 8007c44:	2200      	movs	r2, #0
 8007c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30
 8007c52:	2300      	movs	r3, #0
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
 8007c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	f04f 0000 	mov.w	r0, #0
 8007c62:	f04f 0100 	mov.w	r1, #0
 8007c66:	0159      	lsls	r1, r3, #5
 8007c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c6c:	0150      	lsls	r0, r2, #5
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4621      	mov	r1, r4
 8007c74:	1a51      	subs	r1, r2, r1
 8007c76:	6139      	str	r1, [r7, #16]
 8007c78:	4629      	mov	r1, r5
 8007c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	018b      	lsls	r3, r1, #6
 8007c90:	4651      	mov	r1, sl
 8007c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c96:	4651      	mov	r1, sl
 8007c98:	018a      	lsls	r2, r1, #6
 8007c9a:	4651      	mov	r1, sl
 8007c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8007ca6:	f04f 0200 	mov.w	r2, #0
 8007caa:	f04f 0300 	mov.w	r3, #0
 8007cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cba:	4690      	mov	r8, r2
 8007cbc:	4699      	mov	r9, r3
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	eb18 0303 	adds.w	r3, r8, r3
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	eb49 0303 	adc.w	r3, r9, r3
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007cda:	4629      	mov	r1, r5
 8007cdc:	024b      	lsls	r3, r1, #9
 8007cde:	4621      	mov	r1, r4
 8007ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	024a      	lsls	r2, r1, #9
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4619      	mov	r1, r3
 8007cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cee:	2200      	movs	r2, #0
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cf8:	f7f8 ffa6 	bl	8000c48 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4613      	mov	r3, r2
 8007d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d04:	e058      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d06:	4b38      	ldr	r3, [pc, #224]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	099b      	lsrs	r3, r3, #6
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	4611      	mov	r1, r2
 8007d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d16:	623b      	str	r3, [r7, #32]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d20:	4642      	mov	r2, r8
 8007d22:	464b      	mov	r3, r9
 8007d24:	f04f 0000 	mov.w	r0, #0
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	0159      	lsls	r1, r3, #5
 8007d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d32:	0150      	lsls	r0, r2, #5
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4641      	mov	r1, r8
 8007d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d3e:	4649      	mov	r1, r9
 8007d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d58:	ebb2 040a 	subs.w	r4, r2, sl
 8007d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	00eb      	lsls	r3, r5, #3
 8007d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d6e:	00e2      	lsls	r2, r4, #3
 8007d70:	4614      	mov	r4, r2
 8007d72:	461d      	mov	r5, r3
 8007d74:	4643      	mov	r3, r8
 8007d76:	18e3      	adds	r3, r4, r3
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	eb45 0303 	adc.w	r3, r5, r3
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	f04f 0300 	mov.w	r3, #0
 8007d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d8e:	4629      	mov	r1, r5
 8007d90:	028b      	lsls	r3, r1, #10
 8007d92:	4621      	mov	r1, r4
 8007d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d98:	4621      	mov	r1, r4
 8007d9a:	028a      	lsls	r2, r1, #10
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da2:	2200      	movs	r2, #0
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	61fa      	str	r2, [r7, #28]
 8007da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dac:	f7f8 ff4c 	bl	8000c48 <__aeabi_uldivmod>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4613      	mov	r3, r2
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007db8:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	0c1b      	lsrs	r3, r3, #16
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dd2:	e002      	b.n	8007dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_RCC_GetSysClockFreq+0x204>)
 8007dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3750      	adds	r7, #80	; 0x50
 8007de0:	46bd      	mov	sp, r7
 8007de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de6:	bf00      	nop
 8007de8:	40023800 	.word	0x40023800
 8007dec:	00f42400 	.word	0x00f42400
 8007df0:	007a1200 	.word	0x007a1200

08007df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000028 	.word	0x20000028

08007e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e10:	f7ff fff0 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	0a9b      	lsrs	r3, r3, #10
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	4903      	ldr	r1, [pc, #12]	; (8007e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e22:	5ccb      	ldrb	r3, [r1, r3]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	0800d6c8 	.word	0x0800d6c8

08007e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e38:	f7ff ffdc 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	0b5b      	lsrs	r3, r3, #13
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	4903      	ldr	r1, [pc, #12]	; (8007e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e4a:	5ccb      	ldrb	r3, [r1, r3]
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40023800 	.word	0x40023800
 8007e58:	0800d6c8 	.word	0x0800d6c8

08007e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e07b      	b.n	8007f66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d108      	bne.n	8007e88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e7e:	d009      	beq.n	8007e94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	61da      	str	r2, [r3, #28]
 8007e86:	e005      	b.n	8007e94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fa fc80 	bl	80027b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	ea42 0103 	orr.w	r1, r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	0c1b      	lsrs	r3, r3, #16
 8007f32:	f003 0104 	and.w	r1, r3, #4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	f003 0210 	and.w	r2, r3, #16
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e041      	b.n	8008004 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7fa fc75 	bl	8002884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f000 fd43 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e041      	b.n	80080a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f839 	bl	80080aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	4619      	mov	r1, r3
 800804a:	4610      	mov	r0, r2
 800804c:	f000 fcf4 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <HAL_TIM_PWM_Start+0x24>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	e022      	b.n	800812a <HAL_TIM_PWM_Start+0x6a>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d109      	bne.n	80080fe <HAL_TIM_PWM_Start+0x3e>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	bf14      	ite	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	2300      	moveq	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	e015      	b.n	800812a <HAL_TIM_PWM_Start+0x6a>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b08      	cmp	r3, #8
 8008102:	d109      	bne.n	8008118 <HAL_TIM_PWM_Start+0x58>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b01      	cmp	r3, #1
 800810e:	bf14      	ite	ne
 8008110:	2301      	movne	r3, #1
 8008112:	2300      	moveq	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e008      	b.n	800812a <HAL_TIM_PWM_Start+0x6a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b01      	cmp	r3, #1
 8008122:	bf14      	ite	ne
 8008124:	2301      	movne	r3, #1
 8008126:	2300      	moveq	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e07c      	b.n	800822c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <HAL_TIM_PWM_Start+0x82>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008140:	e013      	b.n	800816a <HAL_TIM_PWM_Start+0xaa>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d104      	bne.n	8008152 <HAL_TIM_PWM_Start+0x92>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008150:	e00b      	b.n	800816a <HAL_TIM_PWM_Start+0xaa>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d104      	bne.n	8008162 <HAL_TIM_PWM_Start+0xa2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008160:	e003      	b.n	800816a <HAL_TIM_PWM_Start+0xaa>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2201      	movs	r2, #1
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f001 f874 	bl	8009260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a2d      	ldr	r2, [pc, #180]	; (8008234 <HAL_TIM_PWM_Start+0x174>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d004      	beq.n	800818c <HAL_TIM_PWM_Start+0xcc>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a2c      	ldr	r2, [pc, #176]	; (8008238 <HAL_TIM_PWM_Start+0x178>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d101      	bne.n	8008190 <HAL_TIM_PWM_Start+0xd0>
 800818c:	2301      	movs	r3, #1
 800818e:	e000      	b.n	8008192 <HAL_TIM_PWM_Start+0xd2>
 8008190:	2300      	movs	r3, #0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a22      	ldr	r2, [pc, #136]	; (8008234 <HAL_TIM_PWM_Start+0x174>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x136>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b8:	d01d      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x136>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1f      	ldr	r2, [pc, #124]	; (800823c <HAL_TIM_PWM_Start+0x17c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x136>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1d      	ldr	r2, [pc, #116]	; (8008240 <HAL_TIM_PWM_Start+0x180>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x136>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1c      	ldr	r2, [pc, #112]	; (8008244 <HAL_TIM_PWM_Start+0x184>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x136>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a16      	ldr	r2, [pc, #88]	; (8008238 <HAL_TIM_PWM_Start+0x178>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x136>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <HAL_TIM_PWM_Start+0x188>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x136>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a16      	ldr	r2, [pc, #88]	; (800824c <HAL_TIM_PWM_Start+0x18c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d111      	bne.n	800821a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b06      	cmp	r3, #6
 8008206:	d010      	beq.n	800822a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008218:	e007      	b.n	800822a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0201 	orr.w	r2, r2, #1
 8008228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40010000 	.word	0x40010000
 8008238:	40010400 	.word	0x40010400
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40014000 	.word	0x40014000
 800824c:	40001800 	.word	0x40001800

08008250 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e041      	b.n	80082e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d106      	bne.n	800827c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f839 	bl	80082ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3304      	adds	r3, #4
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f000 fbd2 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b02      	cmp	r3, #2
 8008316:	d122      	bne.n	800835e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d11b      	bne.n	800835e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f06f 0202 	mvn.w	r2, #2
 800832e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7fb fdd9 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 800834a:	e005      	b.n	8008358 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fb55 	bl	80089fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb5c 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b04      	cmp	r3, #4
 800836a:	d122      	bne.n	80083b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b04      	cmp	r3, #4
 8008378:	d11b      	bne.n	80083b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f06f 0204 	mvn.w	r2, #4
 8008382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7fb fdaf 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 800839e:	e005      	b.n	80083ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fb2b 	bl	80089fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fb32 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d122      	bne.n	8008406 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d11b      	bne.n	8008406 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f06f 0208 	mvn.w	r2, #8
 80083d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2204      	movs	r2, #4
 80083dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7fb fd85 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 80083f2:	e005      	b.n	8008400 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fb01 	bl	80089fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fb08 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b10      	cmp	r3, #16
 8008412:	d122      	bne.n	800845a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b10      	cmp	r3, #16
 8008420:	d11b      	bne.n	800845a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f06f 0210 	mvn.w	r2, #16
 800842a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2208      	movs	r2, #8
 8008430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7fb fd5b 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 8008446:	e005      	b.n	8008454 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fad7 	bl	80089fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fade 	bl	8008a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b01      	cmp	r3, #1
 8008466:	d10e      	bne.n	8008486 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b01      	cmp	r3, #1
 8008474:	d107      	bne.n	8008486 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f06f 0201 	mvn.w	r2, #1
 800847e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fab1 	bl	80089e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008490:	2b80      	cmp	r3, #128	; 0x80
 8008492:	d10e      	bne.n	80084b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	d107      	bne.n	80084b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 ffd5 	bl	800945c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084bc:	2b40      	cmp	r3, #64	; 0x40
 80084be:	d10e      	bne.n	80084de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d107      	bne.n	80084de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 faa3 	bl	8008a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d10e      	bne.n	800850a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d107      	bne.n	800850a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f06f 0220 	mvn.w	r2, #32
 8008502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 ff9f 	bl	8009448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_TIM_IC_ConfigChannel+0x1e>
 800852c:	2302      	movs	r3, #2
 800852e:	e088      	b.n	8008642 <HAL_TIM_IC_ConfigChannel+0x130>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d11b      	bne.n	8008576 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6819      	ldr	r1, [r3, #0]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f000 fcc3 	bl	8008ed8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	699a      	ldr	r2, [r3, #24]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 020c 	bic.w	r2, r2, #12
 8008560:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6999      	ldr	r1, [r3, #24]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	619a      	str	r2, [r3, #24]
 8008574:	e060      	b.n	8008638 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b04      	cmp	r3, #4
 800857a:	d11c      	bne.n	80085b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	6819      	ldr	r1, [r3, #0]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f000 fd47 	bl	800901e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800859e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6999      	ldr	r1, [r3, #24]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	021a      	lsls	r2, r3, #8
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	619a      	str	r2, [r3, #24]
 80085b4:	e040      	b.n	8008638 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d11b      	bne.n	80085f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f000 fd94 	bl	80090f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69da      	ldr	r2, [r3, #28]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 020c 	bic.w	r2, r2, #12
 80085de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69d9      	ldr	r1, [r3, #28]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	61da      	str	r2, [r3, #28]
 80085f2:	e021      	b.n	8008638 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b0c      	cmp	r3, #12
 80085f8:	d11c      	bne.n	8008634 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6819      	ldr	r1, [r3, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f000 fdb1 	bl	8009170 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800861c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69d9      	ldr	r1, [r3, #28]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	021a      	lsls	r2, r3, #8
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	61da      	str	r2, [r3, #28]
 8008632:	e001      	b.n	8008638 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008662:	2b01      	cmp	r3, #1
 8008664:	d101      	bne.n	800866a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008666:	2302      	movs	r3, #2
 8008668:	e0ae      	b.n	80087c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b0c      	cmp	r3, #12
 8008676:	f200 809f 	bhi.w	80087b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086b5 	.word	0x080086b5
 8008684:	080087b9 	.word	0x080087b9
 8008688:	080087b9 	.word	0x080087b9
 800868c:	080087b9 	.word	0x080087b9
 8008690:	080086f5 	.word	0x080086f5
 8008694:	080087b9 	.word	0x080087b9
 8008698:	080087b9 	.word	0x080087b9
 800869c:	080087b9 	.word	0x080087b9
 80086a0:	08008737 	.word	0x08008737
 80086a4:	080087b9 	.word	0x080087b9
 80086a8:	080087b9 	.word	0x080087b9
 80086ac:	080087b9 	.word	0x080087b9
 80086b0:	08008777 	.word	0x08008777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fa5c 	bl	8008b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0208 	orr.w	r2, r2, #8
 80086ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699a      	ldr	r2, [r3, #24]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 0204 	bic.w	r2, r2, #4
 80086de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6999      	ldr	r1, [r3, #24]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	691a      	ldr	r2, [r3, #16]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	619a      	str	r2, [r3, #24]
      break;
 80086f2:	e064      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 faac 	bl	8008c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699a      	ldr	r2, [r3, #24]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800870e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699a      	ldr	r2, [r3, #24]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800871e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6999      	ldr	r1, [r3, #24]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	021a      	lsls	r2, r3, #8
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	619a      	str	r2, [r3, #24]
      break;
 8008734:	e043      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fb01 	bl	8008d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f042 0208 	orr.w	r2, r2, #8
 8008750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69da      	ldr	r2, [r3, #28]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0204 	bic.w	r2, r2, #4
 8008760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69d9      	ldr	r1, [r3, #28]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	61da      	str	r2, [r3, #28]
      break;
 8008774:	e023      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fb55 	bl	8008e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69da      	ldr	r2, [r3, #28]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69d9      	ldr	r1, [r3, #28]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	021a      	lsls	r2, r3, #8
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	61da      	str	r2, [r3, #28]
      break;
 80087b6:	e002      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	75fb      	strb	r3, [r7, #23]
      break;
 80087bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_TIM_ConfigClockSource+0x1c>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e0b4      	b.n	8008956 <HAL_TIM_ConfigClockSource+0x186>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800880a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008824:	d03e      	beq.n	80088a4 <HAL_TIM_ConfigClockSource+0xd4>
 8008826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800882a:	f200 8087 	bhi.w	800893c <HAL_TIM_ConfigClockSource+0x16c>
 800882e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008832:	f000 8086 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x172>
 8008836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800883a:	d87f      	bhi.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
 800883c:	2b70      	cmp	r3, #112	; 0x70
 800883e:	d01a      	beq.n	8008876 <HAL_TIM_ConfigClockSource+0xa6>
 8008840:	2b70      	cmp	r3, #112	; 0x70
 8008842:	d87b      	bhi.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
 8008844:	2b60      	cmp	r3, #96	; 0x60
 8008846:	d050      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x11a>
 8008848:	2b60      	cmp	r3, #96	; 0x60
 800884a:	d877      	bhi.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
 800884c:	2b50      	cmp	r3, #80	; 0x50
 800884e:	d03c      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0xfa>
 8008850:	2b50      	cmp	r3, #80	; 0x50
 8008852:	d873      	bhi.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
 8008854:	2b40      	cmp	r3, #64	; 0x40
 8008856:	d058      	beq.n	800890a <HAL_TIM_ConfigClockSource+0x13a>
 8008858:	2b40      	cmp	r3, #64	; 0x40
 800885a:	d86f      	bhi.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
 800885c:	2b30      	cmp	r3, #48	; 0x30
 800885e:	d064      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x15a>
 8008860:	2b30      	cmp	r3, #48	; 0x30
 8008862:	d86b      	bhi.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
 8008864:	2b20      	cmp	r3, #32
 8008866:	d060      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x15a>
 8008868:	2b20      	cmp	r3, #32
 800886a:	d867      	bhi.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d05c      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x15a>
 8008870:	2b10      	cmp	r3, #16
 8008872:	d05a      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x15a>
 8008874:	e062      	b.n	800893c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	6899      	ldr	r1, [r3, #8]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f000 fccb 	bl	8009220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	609a      	str	r2, [r3, #8]
      break;
 80088a2:	e04f      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6818      	ldr	r0, [r3, #0]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	6899      	ldr	r1, [r3, #8]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f000 fcb4 	bl	8009220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088c6:	609a      	str	r2, [r3, #8]
      break;
 80088c8:	e03c      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	6859      	ldr	r1, [r3, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f000 fb72 	bl	8008fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2150      	movs	r1, #80	; 0x50
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fc81 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 80088e8:	e02c      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	6859      	ldr	r1, [r3, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f000 fbce 	bl	8009098 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2160      	movs	r1, #96	; 0x60
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fc71 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 8008908:	e01c      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	6859      	ldr	r1, [r3, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	461a      	mov	r2, r3
 8008918:	f000 fb52 	bl	8008fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2140      	movs	r1, #64	; 0x40
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fc61 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 8008928:	e00c      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4619      	mov	r1, r3
 8008934:	4610      	mov	r0, r2
 8008936:	f000 fc58 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 800893a:	e003      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
      break;
 8008940:	e000      	b.n	8008944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b0c      	cmp	r3, #12
 8008972:	d831      	bhi.n	80089d8 <HAL_TIM_ReadCapturedValue+0x78>
 8008974:	a201      	add	r2, pc, #4	; (adr r2, 800897c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	080089b1 	.word	0x080089b1
 8008980:	080089d9 	.word	0x080089d9
 8008984:	080089d9 	.word	0x080089d9
 8008988:	080089d9 	.word	0x080089d9
 800898c:	080089bb 	.word	0x080089bb
 8008990:	080089d9 	.word	0x080089d9
 8008994:	080089d9 	.word	0x080089d9
 8008998:	080089d9 	.word	0x080089d9
 800899c:	080089c5 	.word	0x080089c5
 80089a0:	080089d9 	.word	0x080089d9
 80089a4:	080089d9 	.word	0x080089d9
 80089a8:	080089d9 	.word	0x080089d9
 80089ac:	080089cf 	.word	0x080089cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b6:	60fb      	str	r3, [r7, #12]

      break;
 80089b8:	e00f      	b.n	80089da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c0:	60fb      	str	r3, [r7, #12]

      break;
 80089c2:	e00a      	b.n	80089da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ca:	60fb      	str	r3, [r7, #12]

      break;
 80089cc:	e005      	b.n	80089da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	60fb      	str	r3, [r7, #12]

      break;
 80089d6:	e000      	b.n	80089da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80089d8:	bf00      	nop
  }

  return tmpreg;
 80089da:	68fb      	ldr	r3, [r7, #12]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a40      	ldr	r2, [pc, #256]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d013      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a56:	d00f      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a3d      	ldr	r2, [pc, #244]	; (8008b50 <TIM_Base_SetConfig+0x118>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00b      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a3c      	ldr	r2, [pc, #240]	; (8008b54 <TIM_Base_SetConfig+0x11c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d007      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a3b      	ldr	r2, [pc, #236]	; (8008b58 <TIM_Base_SetConfig+0x120>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d003      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a3a      	ldr	r2, [pc, #232]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d108      	bne.n	8008a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a2f      	ldr	r2, [pc, #188]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d02b      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a98:	d027      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a2c      	ldr	r2, [pc, #176]	; (8008b50 <TIM_Base_SetConfig+0x118>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d023      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2b      	ldr	r2, [pc, #172]	; (8008b54 <TIM_Base_SetConfig+0x11c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d01f      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a2a      	ldr	r2, [pc, #168]	; (8008b58 <TIM_Base_SetConfig+0x120>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d01b      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a29      	ldr	r2, [pc, #164]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d017      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a28      	ldr	r2, [pc, #160]	; (8008b60 <TIM_Base_SetConfig+0x128>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d013      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a27      	ldr	r2, [pc, #156]	; (8008b64 <TIM_Base_SetConfig+0x12c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00f      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a26      	ldr	r2, [pc, #152]	; (8008b68 <TIM_Base_SetConfig+0x130>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00b      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a25      	ldr	r2, [pc, #148]	; (8008b6c <TIM_Base_SetConfig+0x134>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d007      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a24      	ldr	r2, [pc, #144]	; (8008b70 <TIM_Base_SetConfig+0x138>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a23      	ldr	r2, [pc, #140]	; (8008b74 <TIM_Base_SetConfig+0x13c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d108      	bne.n	8008afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a0a      	ldr	r2, [pc, #40]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_Base_SetConfig+0xf8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d103      	bne.n	8008b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	615a      	str	r2, [r3, #20]
}
 8008b3e:	bf00      	nop
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40000400 	.word	0x40000400
 8008b54:	40000800 	.word	0x40000800
 8008b58:	40000c00 	.word	0x40000c00
 8008b5c:	40010400 	.word	0x40010400
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400
 8008b68:	40014800 	.word	0x40014800
 8008b6c:	40001800 	.word	0x40001800
 8008b70:	40001c00 	.word	0x40001c00
 8008b74:	40002000 	.word	0x40002000

08008b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f023 0201 	bic.w	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f023 0302 	bic.w	r3, r3, #2
 8008bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a20      	ldr	r2, [pc, #128]	; (8008c50 <TIM_OC1_SetConfig+0xd8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d003      	beq.n	8008bdc <TIM_OC1_SetConfig+0x64>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a1f      	ldr	r2, [pc, #124]	; (8008c54 <TIM_OC1_SetConfig+0xdc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d10c      	bne.n	8008bf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f023 0308 	bic.w	r3, r3, #8
 8008be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f023 0304 	bic.w	r3, r3, #4
 8008bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a15      	ldr	r2, [pc, #84]	; (8008c50 <TIM_OC1_SetConfig+0xd8>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d003      	beq.n	8008c06 <TIM_OC1_SetConfig+0x8e>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a14      	ldr	r2, [pc, #80]	; (8008c54 <TIM_OC1_SetConfig+0xdc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d111      	bne.n	8008c2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	621a      	str	r2, [r3, #32]
}
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	40010000 	.word	0x40010000
 8008c54:	40010400 	.word	0x40010400

08008c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	f023 0210 	bic.w	r2, r3, #16
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f023 0320 	bic.w	r3, r3, #32
 8008ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a22      	ldr	r2, [pc, #136]	; (8008d3c <TIM_OC2_SetConfig+0xe4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_OC2_SetConfig+0x68>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <TIM_OC2_SetConfig+0xe8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10d      	bne.n	8008cdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a17      	ldr	r2, [pc, #92]	; (8008d3c <TIM_OC2_SetConfig+0xe4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d003      	beq.n	8008cec <TIM_OC2_SetConfig+0x94>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a16      	ldr	r2, [pc, #88]	; (8008d40 <TIM_OC2_SetConfig+0xe8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d113      	bne.n	8008d14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	621a      	str	r2, [r3, #32]
}
 8008d2e:	bf00      	nop
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400

08008d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a21      	ldr	r2, [pc, #132]	; (8008e24 <TIM_OC3_SetConfig+0xe0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d003      	beq.n	8008daa <TIM_OC3_SetConfig+0x66>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a20      	ldr	r2, [pc, #128]	; (8008e28 <TIM_OC3_SetConfig+0xe4>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d10d      	bne.n	8008dc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a16      	ldr	r2, [pc, #88]	; (8008e24 <TIM_OC3_SetConfig+0xe0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d003      	beq.n	8008dd6 <TIM_OC3_SetConfig+0x92>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <TIM_OC3_SetConfig+0xe4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d113      	bne.n	8008dfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	621a      	str	r2, [r3, #32]
}
 8008e18:	bf00      	nop
 8008e1a:	371c      	adds	r7, #28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	40010000 	.word	0x40010000
 8008e28:	40010400 	.word	0x40010400

08008e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	031b      	lsls	r3, r3, #12
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a12      	ldr	r2, [pc, #72]	; (8008ed0 <TIM_OC4_SetConfig+0xa4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_OC4_SetConfig+0x68>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a11      	ldr	r2, [pc, #68]	; (8008ed4 <TIM_OC4_SetConfig+0xa8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d109      	bne.n	8008ea8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	019b      	lsls	r3, r3, #6
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	621a      	str	r2, [r3, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40010000 	.word	0x40010000
 8008ed4:	40010400 	.word	0x40010400

08008ed8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	f023 0201 	bic.w	r2, r3, #1
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4a28      	ldr	r2, [pc, #160]	; (8008fa4 <TIM_TI1_SetConfig+0xcc>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d01b      	beq.n	8008f3e <TIM_TI1_SetConfig+0x66>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0c:	d017      	beq.n	8008f3e <TIM_TI1_SetConfig+0x66>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4a25      	ldr	r2, [pc, #148]	; (8008fa8 <TIM_TI1_SetConfig+0xd0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d013      	beq.n	8008f3e <TIM_TI1_SetConfig+0x66>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4a24      	ldr	r2, [pc, #144]	; (8008fac <TIM_TI1_SetConfig+0xd4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d00f      	beq.n	8008f3e <TIM_TI1_SetConfig+0x66>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4a23      	ldr	r2, [pc, #140]	; (8008fb0 <TIM_TI1_SetConfig+0xd8>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00b      	beq.n	8008f3e <TIM_TI1_SetConfig+0x66>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4a22      	ldr	r2, [pc, #136]	; (8008fb4 <TIM_TI1_SetConfig+0xdc>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d007      	beq.n	8008f3e <TIM_TI1_SetConfig+0x66>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	4a21      	ldr	r2, [pc, #132]	; (8008fb8 <TIM_TI1_SetConfig+0xe0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d003      	beq.n	8008f3e <TIM_TI1_SetConfig+0x66>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4a20      	ldr	r2, [pc, #128]	; (8008fbc <TIM_TI1_SetConfig+0xe4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d101      	bne.n	8008f42 <TIM_TI1_SetConfig+0x6a>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <TIM_TI1_SetConfig+0x6c>
 8008f42:	2300      	movs	r3, #0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f023 0303 	bic.w	r3, r3, #3
 8008f4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	e003      	b.n	8008f62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f043 0301 	orr.w	r3, r3, #1
 8008f60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f023 030a 	bic.w	r3, r3, #10
 8008f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f003 030a 	and.w	r3, r3, #10
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	40000800 	.word	0x40000800
 8008fb0:	40000c00 	.word	0x40000c00
 8008fb4:	40010400 	.word	0x40010400
 8008fb8:	40014000 	.word	0x40014000
 8008fbc:	40001800 	.word	0x40001800

08008fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f023 0201 	bic.w	r2, r3, #1
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	011b      	lsls	r3, r3, #4
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f023 030a 	bic.w	r3, r3, #10
 8008ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	621a      	str	r2, [r3, #32]
}
 8009012:	bf00      	nop
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800901e:	b480      	push	{r7}
 8009020:	b087      	sub	sp, #28
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	f023 0210 	bic.w	r2, r3, #16
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800904a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	021b      	lsls	r3, r3, #8
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800905c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	031b      	lsls	r3, r3, #12
 8009062:	b29b      	uxth	r3, r3
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009070:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	4313      	orrs	r3, r2
 800907e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	621a      	str	r2, [r3, #32]
}
 800908c:	bf00      	nop
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	f023 0210 	bic.w	r2, r3, #16
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	031b      	lsls	r3, r3, #12
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4313      	orrs	r3, r2
 80090de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	621a      	str	r2, [r3, #32]
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f023 0303 	bic.w	r3, r3, #3
 8009124:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009134:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	b2db      	uxtb	r3, r3
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009148:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	621a      	str	r2, [r3, #32]
}
 8009164:	bf00      	nop
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800919c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	021b      	lsls	r3, r3, #8
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	031b      	lsls	r3, r3, #12
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80091c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	031b      	lsls	r3, r3, #12
 80091c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4313      	orrs	r3, r2
 8009208:	f043 0307 	orr.w	r3, r3, #7
 800920c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	609a      	str	r2, [r3, #8]
}
 8009214:	bf00      	nop
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800923a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	021a      	lsls	r2, r3, #8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	431a      	orrs	r2, r3
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4313      	orrs	r3, r2
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	609a      	str	r2, [r3, #8]
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	2201      	movs	r2, #1
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6a1a      	ldr	r2, [r3, #32]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	43db      	mvns	r3, r3
 8009282:	401a      	ands	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f003 031f 	and.w	r3, r3, #31
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	fa01 f303 	lsl.w	r3, r1, r3
 8009298:	431a      	orrs	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	621a      	str	r2, [r3, #32]
}
 800929e:	bf00      	nop
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
	...

080092ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e05a      	b.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a21      	ldr	r2, [pc, #132]	; (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d022      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009310:	d01d      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1d      	ldr	r2, [pc, #116]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d018      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a1b      	ldr	r2, [pc, #108]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d013      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a1a      	ldr	r2, [pc, #104]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d00e      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a18      	ldr	r2, [pc, #96]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d009      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a17      	ldr	r2, [pc, #92]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d004      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a15      	ldr	r2, [pc, #84]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d10c      	bne.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	4313      	orrs	r3, r2
 800935e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40010000 	.word	0x40010000
 800938c:	40000400 	.word	0x40000400
 8009390:	40000800 	.word	0x40000800
 8009394:	40000c00 	.word	0x40000c00
 8009398:	40010400 	.word	0x40010400
 800939c:	40014000 	.word	0x40014000
 80093a0:	40001800 	.word	0x40001800

080093a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093bc:	2302      	movs	r3, #2
 80093be:	e03d      	b.n	800943c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	4313      	orrs	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e03f      	b.n	8009502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d106      	bne.n	800949c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7f9 faec 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2224      	movs	r2, #36	; 0x24
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fcab 	bl	8009e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691a      	ldr	r2, [r3, #16]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	695a      	ldr	r2, [r3, #20]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	4613      	mov	r3, r2
 8009516:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b20      	cmp	r3, #32
 8009522:	d130      	bne.n	8009586 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <HAL_UART_Transmit_IT+0x26>
 800952a:	88fb      	ldrh	r3, [r7, #6]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e029      	b.n	8009588 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_UART_Transmit_IT+0x38>
 800953e:	2302      	movs	r3, #2
 8009540:	e022      	b.n	8009588 <HAL_UART_Transmit_IT+0x7e>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	88fa      	ldrh	r2, [r7, #6]
 8009554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	88fa      	ldrh	r2, [r7, #6]
 800955a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2221      	movs	r2, #33	; 0x21
 8009566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009580:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	e000      	b.n	8009588 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009586:	2302      	movs	r3, #2
  }
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b0ba      	sub	sp, #232	; 0xe8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80095d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10f      	bne.n	80095fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <HAL_UART_IRQHandler+0x66>
 80095e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fb51 	bl	8009c9a <UART_Receive_IT>
      return;
 80095f8:	e256      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80de 	beq.w	80097c0 <HAL_UART_IRQHandler+0x22c>
 8009604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 80d1 	beq.w	80097c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800961e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <HAL_UART_IRQHandler+0xae>
 800962a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800962e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	f043 0201 	orr.w	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <HAL_UART_IRQHandler+0xd2>
 800964e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	f043 0202 	orr.w	r2, r3, #2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <HAL_UART_IRQHandler+0xf6>
 8009672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d005      	beq.n	800968a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f043 0204 	orr.w	r2, r3, #4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800968a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968e:	f003 0308 	and.w	r3, r3, #8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d011      	beq.n	80096ba <HAL_UART_IRQHandler+0x126>
 8009696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d105      	bne.n	80096ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	f043 0208 	orr.w	r2, r3, #8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 81ed 	beq.w	8009a9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d008      	beq.n	80096e2 <HAL_UART_IRQHandler+0x14e>
 80096d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fadc 	bl	8009c9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ec:	2b40      	cmp	r3, #64	; 0x40
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <HAL_UART_IRQHandler+0x17a>
 8009706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d04f      	beq.n	80097ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f9e4 	bl	8009adc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b40      	cmp	r3, #64	; 0x40
 8009720:	d141      	bne.n	80097a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3314      	adds	r3, #20
 8009728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800973c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3314      	adds	r3, #20
 800974a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800974e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800975a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1d9      	bne.n	8009722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	2b00      	cmp	r3, #0
 8009774:	d013      	beq.n	800979e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	4a7d      	ldr	r2, [pc, #500]	; (8009970 <HAL_UART_IRQHandler+0x3dc>)
 800977c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	4618      	mov	r0, r3
 8009784:	f7fa ff87 	bl	8004696 <HAL_DMA_Abort_IT>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d016      	beq.n	80097bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979c:	e00e      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f986 	bl	8009ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a4:	e00a      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f982 	bl	8009ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ac:	e006      	b.n	80097bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f97e 	bl	8009ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097ba:	e170      	b.n	8009a9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097bc:	bf00      	nop
    return;
 80097be:	e16e      	b.n	8009a9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	f040 814a 	bne.w	8009a5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 8143 	beq.w	8009a5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 813c 	beq.w	8009a5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097e6:	2300      	movs	r3, #0
 80097e8:	60bb      	str	r3, [r7, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	f040 80b4 	bne.w	8009974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8140 	beq.w	8009aa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800982a:	429a      	cmp	r2, r3
 800982c:	f080 8139 	bcs.w	8009aa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009842:	f000 8088 	beq.w	8009956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800985c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800987e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800988a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1d9      	bne.n	8009846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3314      	adds	r3, #20
 8009898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e1      	bne.n	8009892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3314      	adds	r3, #20
 80098ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e3      	bne.n	80098ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2220      	movs	r2, #32
 800990a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	330c      	adds	r3, #12
 800991a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009926:	f023 0310 	bic.w	r3, r3, #16
 800992a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	330c      	adds	r3, #12
 8009934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009938:	65ba      	str	r2, [r7, #88]	; 0x58
 800993a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800993e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e3      	bne.n	8009914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	4618      	mov	r0, r3
 8009952:	f7fa fe30 	bl	80045b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800995e:	b29b      	uxth	r3, r3
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	b29b      	uxth	r3, r3
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f8ac 	bl	8009ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800996c:	e099      	b.n	8009aa2 <HAL_UART_IRQHandler+0x50e>
 800996e:	bf00      	nop
 8009970:	08009ba3 	.word	0x08009ba3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800997c:	b29b      	uxth	r3, r3
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009988:	b29b      	uxth	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 808b 	beq.w	8009aa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 8086 	beq.w	8009aa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	330c      	adds	r3, #12
 80099a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80099be:	647a      	str	r2, [r7, #68]	; 0x44
 80099c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e3      	bne.n	800999a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3314      	adds	r3, #20
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	623b      	str	r3, [r7, #32]
   return(result);
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3314      	adds	r3, #20
 80099f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099f6:	633a      	str	r2, [r7, #48]	; 0x30
 80099f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e3      	bne.n	80099d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0310 	bic.w	r3, r3, #16
 8009a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	330c      	adds	r3, #12
 8009a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a3c:	61fa      	str	r2, [r7, #28]
 8009a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	617b      	str	r3, [r7, #20]
   return(result);
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e3      	bne.n	8009a18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f834 	bl	8009ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a5c:	e023      	b.n	8009aa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <HAL_UART_IRQHandler+0x4ea>
 8009a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f8a7 	bl	8009bca <UART_Transmit_IT>
    return;
 8009a7c:	e014      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00e      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x514>
 8009a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d008      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f8e7 	bl	8009c6a <UART_EndTransmit_IT>
    return;
 8009a9c:	e004      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
    return;
 8009a9e:	bf00      	nop
 8009aa0:	e002      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8009aa2:	bf00      	nop
 8009aa4:	e000      	b.n	8009aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8009aa6:	bf00      	nop
  }
}
 8009aa8:	37e8      	adds	r7, #232	; 0xe8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop

08009ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b095      	sub	sp, #84	; 0x54
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	330c      	adds	r3, #12
 8009b02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b04:	643a      	str	r2, [r7, #64]	; 0x40
 8009b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e5      	bne.n	8009ae4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3314      	adds	r3, #20
 8009b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	e853 3f00 	ldrex	r3, [r3]
 8009b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	f023 0301 	bic.w	r3, r3, #1
 8009b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3314      	adds	r3, #20
 8009b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b40:	e841 2300 	strex	r3, r2, [r1]
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1e5      	bne.n	8009b18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d119      	bne.n	8009b88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	330c      	adds	r3, #12
 8009b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f023 0310 	bic.w	r3, r3, #16
 8009b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	330c      	adds	r3, #12
 8009b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b74:	61ba      	str	r2, [r7, #24]
 8009b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6979      	ldr	r1, [r7, #20]
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	613b      	str	r3, [r7, #16]
   return(result);
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e5      	bne.n	8009b54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b96:	bf00      	nop
 8009b98:	3754      	adds	r7, #84	; 0x54
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff ff77 	bl	8009ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc2:	bf00      	nop
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b21      	cmp	r3, #33	; 0x21
 8009bdc:	d13e      	bne.n	8009c5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009be6:	d114      	bne.n	8009c12 <UART_Transmit_IT+0x48>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d110      	bne.n	8009c12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	1c9a      	adds	r2, r3, #2
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	621a      	str	r2, [r3, #32]
 8009c10:	e008      	b.n	8009c24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	1c59      	adds	r1, r3, #1
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	6211      	str	r1, [r2, #32]
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	4619      	mov	r1, r3
 8009c32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10f      	bne.n	8009c58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e000      	b.n	8009c5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c5c:	2302      	movs	r3, #2
  }
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f9 fffc 	bl	8003c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b08c      	sub	sp, #48	; 0x30
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b22      	cmp	r3, #34	; 0x22
 8009cac:	f040 80ab 	bne.w	8009e06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb8:	d117      	bne.n	8009cea <UART_Receive_IT+0x50>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d113      	bne.n	8009cea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	1c9a      	adds	r2, r3, #2
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ce8:	e026      	b.n	8009d38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfc:	d007      	beq.n	8009d0e <UART_Receive_IT+0x74>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10a      	bne.n	8009d1c <UART_Receive_IT+0x82>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d106      	bne.n	8009d1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	e008      	b.n	8009d2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4619      	mov	r1, r3
 8009d46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d15a      	bne.n	8009e02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0220 	bic.w	r2, r2, #32
 8009d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	695a      	ldr	r2, [r3, #20]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0201 	bic.w	r2, r2, #1
 8009d7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d135      	bne.n	8009df8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	330c      	adds	r3, #12
 8009d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	613b      	str	r3, [r7, #16]
   return(result);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f023 0310 	bic.w	r3, r3, #16
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	330c      	adds	r3, #12
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	623a      	str	r2, [r7, #32]
 8009db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db6:	69f9      	ldr	r1, [r7, #28]
 8009db8:	6a3a      	ldr	r2, [r7, #32]
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1e5      	bne.n	8009d92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0310 	and.w	r3, r3, #16
 8009dd0:	2b10      	cmp	r3, #16
 8009dd2:	d10a      	bne.n	8009dea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff fe67 	bl	8009ac4 <HAL_UARTEx_RxEventCallback>
 8009df6:	e002      	b.n	8009dfe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7f9 ff4f 	bl	8003c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e002      	b.n	8009e08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	e000      	b.n	8009e08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009e06:	2302      	movs	r3, #2
  }
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3730      	adds	r7, #48	; 0x30
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e14:	b0c0      	sub	sp, #256	; 0x100
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e2c:	68d9      	ldr	r1, [r3, #12]
 8009e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	ea40 0301 	orr.w	r3, r0, r1
 8009e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	431a      	orrs	r2, r3
 8009e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e68:	f021 010c 	bic.w	r1, r1, #12
 8009e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e76:	430b      	orrs	r3, r1
 8009e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8a:	6999      	ldr	r1, [r3, #24]
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	ea40 0301 	orr.w	r3, r0, r1
 8009e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	4b8f      	ldr	r3, [pc, #572]	; (800a0dc <UART_SetConfig+0x2cc>)
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d005      	beq.n	8009eb0 <UART_SetConfig+0xa0>
 8009ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b8d      	ldr	r3, [pc, #564]	; (800a0e0 <UART_SetConfig+0x2d0>)
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d104      	bne.n	8009eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009eb0:	f7fd ffc0 	bl	8007e34 <HAL_RCC_GetPCLK2Freq>
 8009eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009eb8:	e003      	b.n	8009ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009eba:	f7fd ffa7 	bl	8007e0c <HAL_RCC_GetPCLK1Freq>
 8009ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ecc:	f040 810c 	bne.w	800a0e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009eda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ee2:	4622      	mov	r2, r4
 8009ee4:	462b      	mov	r3, r5
 8009ee6:	1891      	adds	r1, r2, r2
 8009ee8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009eea:	415b      	adcs	r3, r3
 8009eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	eb12 0801 	adds.w	r8, r2, r1
 8009ef8:	4629      	mov	r1, r5
 8009efa:	eb43 0901 	adc.w	r9, r3, r1
 8009efe:	f04f 0200 	mov.w	r2, #0
 8009f02:	f04f 0300 	mov.w	r3, #0
 8009f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f12:	4690      	mov	r8, r2
 8009f14:	4699      	mov	r9, r3
 8009f16:	4623      	mov	r3, r4
 8009f18:	eb18 0303 	adds.w	r3, r8, r3
 8009f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f20:	462b      	mov	r3, r5
 8009f22:	eb49 0303 	adc.w	r3, r9, r3
 8009f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f3e:	460b      	mov	r3, r1
 8009f40:	18db      	adds	r3, r3, r3
 8009f42:	653b      	str	r3, [r7, #80]	; 0x50
 8009f44:	4613      	mov	r3, r2
 8009f46:	eb42 0303 	adc.w	r3, r2, r3
 8009f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f54:	f7f6 fe78 	bl	8000c48 <__aeabi_uldivmod>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4b61      	ldr	r3, [pc, #388]	; (800a0e4 <UART_SetConfig+0x2d4>)
 8009f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8009f62:	095b      	lsrs	r3, r3, #5
 8009f64:	011c      	lsls	r4, r3, #4
 8009f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009f78:	4642      	mov	r2, r8
 8009f7a:	464b      	mov	r3, r9
 8009f7c:	1891      	adds	r1, r2, r2
 8009f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009f80:	415b      	adcs	r3, r3
 8009f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009f88:	4641      	mov	r1, r8
 8009f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8009f8e:	4649      	mov	r1, r9
 8009f90:	eb43 0b01 	adc.w	fp, r3, r1
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fa8:	4692      	mov	sl, r2
 8009faa:	469b      	mov	fp, r3
 8009fac:	4643      	mov	r3, r8
 8009fae:	eb1a 0303 	adds.w	r3, sl, r3
 8009fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8009fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	18db      	adds	r3, r3, r3
 8009fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8009fda:	4613      	mov	r3, r2
 8009fdc:	eb42 0303 	adc.w	r3, r2, r3
 8009fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009fea:	f7f6 fe2d 	bl	8000c48 <__aeabi_uldivmod>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	4b3b      	ldr	r3, [pc, #236]	; (800a0e4 <UART_SetConfig+0x2d4>)
 8009ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	2264      	movs	r2, #100	; 0x64
 8009ffe:	fb02 f303 	mul.w	r3, r2, r3
 800a002:	1acb      	subs	r3, r1, r3
 800a004:	00db      	lsls	r3, r3, #3
 800a006:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a00a:	4b36      	ldr	r3, [pc, #216]	; (800a0e4 <UART_SetConfig+0x2d4>)
 800a00c:	fba3 2302 	umull	r2, r3, r3, r2
 800a010:	095b      	lsrs	r3, r3, #5
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a018:	441c      	add	r4, r3
 800a01a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a01e:	2200      	movs	r2, #0
 800a020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a024:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a02c:	4642      	mov	r2, r8
 800a02e:	464b      	mov	r3, r9
 800a030:	1891      	adds	r1, r2, r2
 800a032:	63b9      	str	r1, [r7, #56]	; 0x38
 800a034:	415b      	adcs	r3, r3
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a03c:	4641      	mov	r1, r8
 800a03e:	1851      	adds	r1, r2, r1
 800a040:	6339      	str	r1, [r7, #48]	; 0x30
 800a042:	4649      	mov	r1, r9
 800a044:	414b      	adcs	r3, r1
 800a046:	637b      	str	r3, [r7, #52]	; 0x34
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a054:	4659      	mov	r1, fp
 800a056:	00cb      	lsls	r3, r1, #3
 800a058:	4651      	mov	r1, sl
 800a05a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a05e:	4651      	mov	r1, sl
 800a060:	00ca      	lsls	r2, r1, #3
 800a062:	4610      	mov	r0, r2
 800a064:	4619      	mov	r1, r3
 800a066:	4603      	mov	r3, r0
 800a068:	4642      	mov	r2, r8
 800a06a:	189b      	adds	r3, r3, r2
 800a06c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a070:	464b      	mov	r3, r9
 800a072:	460a      	mov	r2, r1
 800a074:	eb42 0303 	adc.w	r3, r2, r3
 800a078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a088:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a08c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a090:	460b      	mov	r3, r1
 800a092:	18db      	adds	r3, r3, r3
 800a094:	62bb      	str	r3, [r7, #40]	; 0x28
 800a096:	4613      	mov	r3, r2
 800a098:	eb42 0303 	adc.w	r3, r2, r3
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a09e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a0a6:	f7f6 fdcf 	bl	8000c48 <__aeabi_uldivmod>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <UART_SetConfig+0x2d4>)
 800a0b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0b4:	095b      	lsrs	r3, r3, #5
 800a0b6:	2164      	movs	r1, #100	; 0x64
 800a0b8:	fb01 f303 	mul.w	r3, r1, r3
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	3332      	adds	r3, #50	; 0x32
 800a0c2:	4a08      	ldr	r2, [pc, #32]	; (800a0e4 <UART_SetConfig+0x2d4>)
 800a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c8:	095b      	lsrs	r3, r3, #5
 800a0ca:	f003 0207 	and.w	r2, r3, #7
 800a0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4422      	add	r2, r4
 800a0d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a0d8:	e105      	b.n	800a2e6 <UART_SetConfig+0x4d6>
 800a0da:	bf00      	nop
 800a0dc:	40011000 	.word	0x40011000
 800a0e0:	40011400 	.word	0x40011400
 800a0e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	1891      	adds	r1, r2, r2
 800a100:	6239      	str	r1, [r7, #32]
 800a102:	415b      	adcs	r3, r3
 800a104:	627b      	str	r3, [r7, #36]	; 0x24
 800a106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a10a:	4641      	mov	r1, r8
 800a10c:	1854      	adds	r4, r2, r1
 800a10e:	4649      	mov	r1, r9
 800a110:	eb43 0501 	adc.w	r5, r3, r1
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	f04f 0300 	mov.w	r3, #0
 800a11c:	00eb      	lsls	r3, r5, #3
 800a11e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a122:	00e2      	lsls	r2, r4, #3
 800a124:	4614      	mov	r4, r2
 800a126:	461d      	mov	r5, r3
 800a128:	4643      	mov	r3, r8
 800a12a:	18e3      	adds	r3, r4, r3
 800a12c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a130:	464b      	mov	r3, r9
 800a132:	eb45 0303 	adc.w	r3, r5, r3
 800a136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a14a:	f04f 0200 	mov.w	r2, #0
 800a14e:	f04f 0300 	mov.w	r3, #0
 800a152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a156:	4629      	mov	r1, r5
 800a158:	008b      	lsls	r3, r1, #2
 800a15a:	4621      	mov	r1, r4
 800a15c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a160:	4621      	mov	r1, r4
 800a162:	008a      	lsls	r2, r1, #2
 800a164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a168:	f7f6 fd6e 	bl	8000c48 <__aeabi_uldivmod>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4b60      	ldr	r3, [pc, #384]	; (800a2f4 <UART_SetConfig+0x4e4>)
 800a172:	fba3 2302 	umull	r2, r3, r3, r2
 800a176:	095b      	lsrs	r3, r3, #5
 800a178:	011c      	lsls	r4, r3, #4
 800a17a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a18c:	4642      	mov	r2, r8
 800a18e:	464b      	mov	r3, r9
 800a190:	1891      	adds	r1, r2, r2
 800a192:	61b9      	str	r1, [r7, #24]
 800a194:	415b      	adcs	r3, r3
 800a196:	61fb      	str	r3, [r7, #28]
 800a198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a19c:	4641      	mov	r1, r8
 800a19e:	1851      	adds	r1, r2, r1
 800a1a0:	6139      	str	r1, [r7, #16]
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	414b      	adcs	r3, r1
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	00cb      	lsls	r3, r1, #3
 800a1b8:	4651      	mov	r1, sl
 800a1ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1be:	4651      	mov	r1, sl
 800a1c0:	00ca      	lsls	r2, r1, #3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	460a      	mov	r2, r1
 800a1d4:	eb42 0303 	adc.w	r3, r2, r3
 800a1d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	f04f 0300 	mov.w	r3, #0
 800a1f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	008b      	lsls	r3, r1, #2
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1fe:	4641      	mov	r1, r8
 800a200:	008a      	lsls	r2, r1, #2
 800a202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a206:	f7f6 fd1f 	bl	8000c48 <__aeabi_uldivmod>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4b39      	ldr	r3, [pc, #228]	; (800a2f4 <UART_SetConfig+0x4e4>)
 800a210:	fba3 1302 	umull	r1, r3, r3, r2
 800a214:	095b      	lsrs	r3, r3, #5
 800a216:	2164      	movs	r1, #100	; 0x64
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	3332      	adds	r3, #50	; 0x32
 800a222:	4a34      	ldr	r2, [pc, #208]	; (800a2f4 <UART_SetConfig+0x4e4>)
 800a224:	fba2 2303 	umull	r2, r3, r2, r3
 800a228:	095b      	lsrs	r3, r3, #5
 800a22a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a22e:	441c      	add	r4, r3
 800a230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a234:	2200      	movs	r2, #0
 800a236:	673b      	str	r3, [r7, #112]	; 0x70
 800a238:	677a      	str	r2, [r7, #116]	; 0x74
 800a23a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	1891      	adds	r1, r2, r2
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	415b      	adcs	r3, r3
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a24e:	4641      	mov	r1, r8
 800a250:	1851      	adds	r1, r2, r1
 800a252:	6039      	str	r1, [r7, #0]
 800a254:	4649      	mov	r1, r9
 800a256:	414b      	adcs	r3, r1
 800a258:	607b      	str	r3, [r7, #4]
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a266:	4659      	mov	r1, fp
 800a268:	00cb      	lsls	r3, r1, #3
 800a26a:	4651      	mov	r1, sl
 800a26c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a270:	4651      	mov	r1, sl
 800a272:	00ca      	lsls	r2, r1, #3
 800a274:	4610      	mov	r0, r2
 800a276:	4619      	mov	r1, r3
 800a278:	4603      	mov	r3, r0
 800a27a:	4642      	mov	r2, r8
 800a27c:	189b      	adds	r3, r3, r2
 800a27e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a280:	464b      	mov	r3, r9
 800a282:	460a      	mov	r2, r1
 800a284:	eb42 0303 	adc.w	r3, r2, r3
 800a288:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	663b      	str	r3, [r7, #96]	; 0x60
 800a294:	667a      	str	r2, [r7, #100]	; 0x64
 800a296:	f04f 0200 	mov.w	r2, #0
 800a29a:	f04f 0300 	mov.w	r3, #0
 800a29e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	008b      	lsls	r3, r1, #2
 800a2a6:	4641      	mov	r1, r8
 800a2a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2ac:	4641      	mov	r1, r8
 800a2ae:	008a      	lsls	r2, r1, #2
 800a2b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2b4:	f7f6 fcc8 	bl	8000c48 <__aeabi_uldivmod>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4b0d      	ldr	r3, [pc, #52]	; (800a2f4 <UART_SetConfig+0x4e4>)
 800a2be:	fba3 1302 	umull	r1, r3, r3, r2
 800a2c2:	095b      	lsrs	r3, r3, #5
 800a2c4:	2164      	movs	r1, #100	; 0x64
 800a2c6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	3332      	adds	r3, #50	; 0x32
 800a2d0:	4a08      	ldr	r2, [pc, #32]	; (800a2f4 <UART_SetConfig+0x4e4>)
 800a2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d6:	095b      	lsrs	r3, r3, #5
 800a2d8:	f003 020f 	and.w	r2, r3, #15
 800a2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4422      	add	r2, r4
 800a2e4:	609a      	str	r2, [r3, #8]
}
 800a2e6:	bf00      	nop
 800a2e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2f2:	bf00      	nop
 800a2f4:	51eb851f 	.word	0x51eb851f

0800a2f8 <__errno>:
 800a2f8:	4b01      	ldr	r3, [pc, #4]	; (800a300 <__errno+0x8>)
 800a2fa:	6818      	ldr	r0, [r3, #0]
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20000034 	.word	0x20000034

0800a304 <__libc_init_array>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4d0d      	ldr	r5, [pc, #52]	; (800a33c <__libc_init_array+0x38>)
 800a308:	4c0d      	ldr	r4, [pc, #52]	; (800a340 <__libc_init_array+0x3c>)
 800a30a:	1b64      	subs	r4, r4, r5
 800a30c:	10a4      	asrs	r4, r4, #2
 800a30e:	2600      	movs	r6, #0
 800a310:	42a6      	cmp	r6, r4
 800a312:	d109      	bne.n	800a328 <__libc_init_array+0x24>
 800a314:	4d0b      	ldr	r5, [pc, #44]	; (800a344 <__libc_init_array+0x40>)
 800a316:	4c0c      	ldr	r4, [pc, #48]	; (800a348 <__libc_init_array+0x44>)
 800a318:	f003 f9b2 	bl	800d680 <_init>
 800a31c:	1b64      	subs	r4, r4, r5
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	2600      	movs	r6, #0
 800a322:	42a6      	cmp	r6, r4
 800a324:	d105      	bne.n	800a332 <__libc_init_array+0x2e>
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32c:	4798      	blx	r3
 800a32e:	3601      	adds	r6, #1
 800a330:	e7ee      	b.n	800a310 <__libc_init_array+0xc>
 800a332:	f855 3b04 	ldr.w	r3, [r5], #4
 800a336:	4798      	blx	r3
 800a338:	3601      	adds	r6, #1
 800a33a:	e7f2      	b.n	800a322 <__libc_init_array+0x1e>
 800a33c:	0800d930 	.word	0x0800d930
 800a340:	0800d930 	.word	0x0800d930
 800a344:	0800d930 	.word	0x0800d930
 800a348:	0800d934 	.word	0x0800d934

0800a34c <memset>:
 800a34c:	4402      	add	r2, r0
 800a34e:	4603      	mov	r3, r0
 800a350:	4293      	cmp	r3, r2
 800a352:	d100      	bne.n	800a356 <memset+0xa>
 800a354:	4770      	bx	lr
 800a356:	f803 1b01 	strb.w	r1, [r3], #1
 800a35a:	e7f9      	b.n	800a350 <memset+0x4>

0800a35c <siprintf>:
 800a35c:	b40e      	push	{r1, r2, r3}
 800a35e:	b500      	push	{lr}
 800a360:	b09c      	sub	sp, #112	; 0x70
 800a362:	ab1d      	add	r3, sp, #116	; 0x74
 800a364:	9002      	str	r0, [sp, #8]
 800a366:	9006      	str	r0, [sp, #24]
 800a368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a36c:	4809      	ldr	r0, [pc, #36]	; (800a394 <siprintf+0x38>)
 800a36e:	9107      	str	r1, [sp, #28]
 800a370:	9104      	str	r1, [sp, #16]
 800a372:	4909      	ldr	r1, [pc, #36]	; (800a398 <siprintf+0x3c>)
 800a374:	f853 2b04 	ldr.w	r2, [r3], #4
 800a378:	9105      	str	r1, [sp, #20]
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	a902      	add	r1, sp, #8
 800a380:	f000 f868 	bl	800a454 <_svfiprintf_r>
 800a384:	9b02      	ldr	r3, [sp, #8]
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	b01c      	add	sp, #112	; 0x70
 800a38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a390:	b003      	add	sp, #12
 800a392:	4770      	bx	lr
 800a394:	20000034 	.word	0x20000034
 800a398:	ffff0208 	.word	0xffff0208

0800a39c <__ssputs_r>:
 800a39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a0:	688e      	ldr	r6, [r1, #8]
 800a3a2:	429e      	cmp	r6, r3
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4690      	mov	r8, r2
 800a3aa:	461f      	mov	r7, r3
 800a3ac:	d838      	bhi.n	800a420 <__ssputs_r+0x84>
 800a3ae:	898a      	ldrh	r2, [r1, #12]
 800a3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3b4:	d032      	beq.n	800a41c <__ssputs_r+0x80>
 800a3b6:	6825      	ldr	r5, [r4, #0]
 800a3b8:	6909      	ldr	r1, [r1, #16]
 800a3ba:	eba5 0901 	sub.w	r9, r5, r1
 800a3be:	6965      	ldr	r5, [r4, #20]
 800a3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	444b      	add	r3, r9
 800a3cc:	106d      	asrs	r5, r5, #1
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	bf38      	it	cc
 800a3d2:	461d      	movcc	r5, r3
 800a3d4:	0553      	lsls	r3, r2, #21
 800a3d6:	d531      	bpl.n	800a43c <__ssputs_r+0xa0>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f000 fb63 	bl	800aaa4 <_malloc_r>
 800a3de:	4606      	mov	r6, r0
 800a3e0:	b950      	cbnz	r0, 800a3f8 <__ssputs_r+0x5c>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	f8ca 3000 	str.w	r3, [sl]
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f8:	6921      	ldr	r1, [r4, #16]
 800a3fa:	464a      	mov	r2, r9
 800a3fc:	f000 fabe 	bl	800a97c <memcpy>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	6126      	str	r6, [r4, #16]
 800a40e:	6165      	str	r5, [r4, #20]
 800a410:	444e      	add	r6, r9
 800a412:	eba5 0509 	sub.w	r5, r5, r9
 800a416:	6026      	str	r6, [r4, #0]
 800a418:	60a5      	str	r5, [r4, #8]
 800a41a:	463e      	mov	r6, r7
 800a41c:	42be      	cmp	r6, r7
 800a41e:	d900      	bls.n	800a422 <__ssputs_r+0x86>
 800a420:	463e      	mov	r6, r7
 800a422:	6820      	ldr	r0, [r4, #0]
 800a424:	4632      	mov	r2, r6
 800a426:	4641      	mov	r1, r8
 800a428:	f000 fab6 	bl	800a998 <memmove>
 800a42c:	68a3      	ldr	r3, [r4, #8]
 800a42e:	1b9b      	subs	r3, r3, r6
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	4433      	add	r3, r6
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	2000      	movs	r0, #0
 800a43a:	e7db      	b.n	800a3f4 <__ssputs_r+0x58>
 800a43c:	462a      	mov	r2, r5
 800a43e:	f000 fba5 	bl	800ab8c <_realloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	2800      	cmp	r0, #0
 800a446:	d1e1      	bne.n	800a40c <__ssputs_r+0x70>
 800a448:	6921      	ldr	r1, [r4, #16]
 800a44a:	4650      	mov	r0, sl
 800a44c:	f000 fabe 	bl	800a9cc <_free_r>
 800a450:	e7c7      	b.n	800a3e2 <__ssputs_r+0x46>
	...

0800a454 <_svfiprintf_r>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	4698      	mov	r8, r3
 800a45a:	898b      	ldrh	r3, [r1, #12]
 800a45c:	061b      	lsls	r3, r3, #24
 800a45e:	b09d      	sub	sp, #116	; 0x74
 800a460:	4607      	mov	r7, r0
 800a462:	460d      	mov	r5, r1
 800a464:	4614      	mov	r4, r2
 800a466:	d50e      	bpl.n	800a486 <_svfiprintf_r+0x32>
 800a468:	690b      	ldr	r3, [r1, #16]
 800a46a:	b963      	cbnz	r3, 800a486 <_svfiprintf_r+0x32>
 800a46c:	2140      	movs	r1, #64	; 0x40
 800a46e:	f000 fb19 	bl	800aaa4 <_malloc_r>
 800a472:	6028      	str	r0, [r5, #0]
 800a474:	6128      	str	r0, [r5, #16]
 800a476:	b920      	cbnz	r0, 800a482 <_svfiprintf_r+0x2e>
 800a478:	230c      	movs	r3, #12
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a480:	e0d1      	b.n	800a626 <_svfiprintf_r+0x1d2>
 800a482:	2340      	movs	r3, #64	; 0x40
 800a484:	616b      	str	r3, [r5, #20]
 800a486:	2300      	movs	r3, #0
 800a488:	9309      	str	r3, [sp, #36]	; 0x24
 800a48a:	2320      	movs	r3, #32
 800a48c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a490:	f8cd 800c 	str.w	r8, [sp, #12]
 800a494:	2330      	movs	r3, #48	; 0x30
 800a496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a640 <_svfiprintf_r+0x1ec>
 800a49a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a49e:	f04f 0901 	mov.w	r9, #1
 800a4a2:	4623      	mov	r3, r4
 800a4a4:	469a      	mov	sl, r3
 800a4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4aa:	b10a      	cbz	r2, 800a4b0 <_svfiprintf_r+0x5c>
 800a4ac:	2a25      	cmp	r2, #37	; 0x25
 800a4ae:	d1f9      	bne.n	800a4a4 <_svfiprintf_r+0x50>
 800a4b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4b4:	d00b      	beq.n	800a4ce <_svfiprintf_r+0x7a>
 800a4b6:	465b      	mov	r3, fp
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4638      	mov	r0, r7
 800a4be:	f7ff ff6d 	bl	800a39c <__ssputs_r>
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	f000 80aa 	beq.w	800a61c <_svfiprintf_r+0x1c8>
 800a4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ca:	445a      	add	r2, fp
 800a4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 80a2 	beq.w	800a61c <_svfiprintf_r+0x1c8>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e2:	f10a 0a01 	add.w	sl, sl, #1
 800a4e6:	9304      	str	r3, [sp, #16]
 800a4e8:	9307      	str	r3, [sp, #28]
 800a4ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a4f0:	4654      	mov	r4, sl
 800a4f2:	2205      	movs	r2, #5
 800a4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f8:	4851      	ldr	r0, [pc, #324]	; (800a640 <_svfiprintf_r+0x1ec>)
 800a4fa:	f7f5 fe71 	bl	80001e0 <memchr>
 800a4fe:	9a04      	ldr	r2, [sp, #16]
 800a500:	b9d8      	cbnz	r0, 800a53a <_svfiprintf_r+0xe6>
 800a502:	06d0      	lsls	r0, r2, #27
 800a504:	bf44      	itt	mi
 800a506:	2320      	movmi	r3, #32
 800a508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a50c:	0711      	lsls	r1, r2, #28
 800a50e:	bf44      	itt	mi
 800a510:	232b      	movmi	r3, #43	; 0x2b
 800a512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a516:	f89a 3000 	ldrb.w	r3, [sl]
 800a51a:	2b2a      	cmp	r3, #42	; 0x2a
 800a51c:	d015      	beq.n	800a54a <_svfiprintf_r+0xf6>
 800a51e:	9a07      	ldr	r2, [sp, #28]
 800a520:	4654      	mov	r4, sl
 800a522:	2000      	movs	r0, #0
 800a524:	f04f 0c0a 	mov.w	ip, #10
 800a528:	4621      	mov	r1, r4
 800a52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a52e:	3b30      	subs	r3, #48	; 0x30
 800a530:	2b09      	cmp	r3, #9
 800a532:	d94e      	bls.n	800a5d2 <_svfiprintf_r+0x17e>
 800a534:	b1b0      	cbz	r0, 800a564 <_svfiprintf_r+0x110>
 800a536:	9207      	str	r2, [sp, #28]
 800a538:	e014      	b.n	800a564 <_svfiprintf_r+0x110>
 800a53a:	eba0 0308 	sub.w	r3, r0, r8
 800a53e:	fa09 f303 	lsl.w	r3, r9, r3
 800a542:	4313      	orrs	r3, r2
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	46a2      	mov	sl, r4
 800a548:	e7d2      	b.n	800a4f0 <_svfiprintf_r+0x9c>
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	1d19      	adds	r1, r3, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	9103      	str	r1, [sp, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	bfbb      	ittet	lt
 800a556:	425b      	neglt	r3, r3
 800a558:	f042 0202 	orrlt.w	r2, r2, #2
 800a55c:	9307      	strge	r3, [sp, #28]
 800a55e:	9307      	strlt	r3, [sp, #28]
 800a560:	bfb8      	it	lt
 800a562:	9204      	strlt	r2, [sp, #16]
 800a564:	7823      	ldrb	r3, [r4, #0]
 800a566:	2b2e      	cmp	r3, #46	; 0x2e
 800a568:	d10c      	bne.n	800a584 <_svfiprintf_r+0x130>
 800a56a:	7863      	ldrb	r3, [r4, #1]
 800a56c:	2b2a      	cmp	r3, #42	; 0x2a
 800a56e:	d135      	bne.n	800a5dc <_svfiprintf_r+0x188>
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	1d1a      	adds	r2, r3, #4
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	9203      	str	r2, [sp, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bfb8      	it	lt
 800a57c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a580:	3402      	adds	r4, #2
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a650 <_svfiprintf_r+0x1fc>
 800a588:	7821      	ldrb	r1, [r4, #0]
 800a58a:	2203      	movs	r2, #3
 800a58c:	4650      	mov	r0, sl
 800a58e:	f7f5 fe27 	bl	80001e0 <memchr>
 800a592:	b140      	cbz	r0, 800a5a6 <_svfiprintf_r+0x152>
 800a594:	2340      	movs	r3, #64	; 0x40
 800a596:	eba0 000a 	sub.w	r0, r0, sl
 800a59a:	fa03 f000 	lsl.w	r0, r3, r0
 800a59e:	9b04      	ldr	r3, [sp, #16]
 800a5a0:	4303      	orrs	r3, r0
 800a5a2:	3401      	adds	r4, #1
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5aa:	4826      	ldr	r0, [pc, #152]	; (800a644 <_svfiprintf_r+0x1f0>)
 800a5ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5b0:	2206      	movs	r2, #6
 800a5b2:	f7f5 fe15 	bl	80001e0 <memchr>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d038      	beq.n	800a62c <_svfiprintf_r+0x1d8>
 800a5ba:	4b23      	ldr	r3, [pc, #140]	; (800a648 <_svfiprintf_r+0x1f4>)
 800a5bc:	bb1b      	cbnz	r3, 800a606 <_svfiprintf_r+0x1b2>
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	3307      	adds	r3, #7
 800a5c2:	f023 0307 	bic.w	r3, r3, #7
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	9303      	str	r3, [sp, #12]
 800a5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5cc:	4433      	add	r3, r6
 800a5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d0:	e767      	b.n	800a4a2 <_svfiprintf_r+0x4e>
 800a5d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	2001      	movs	r0, #1
 800a5da:	e7a5      	b.n	800a528 <_svfiprintf_r+0xd4>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	3401      	adds	r4, #1
 800a5e0:	9305      	str	r3, [sp, #20]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	f04f 0c0a 	mov.w	ip, #10
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ee:	3a30      	subs	r2, #48	; 0x30
 800a5f0:	2a09      	cmp	r2, #9
 800a5f2:	d903      	bls.n	800a5fc <_svfiprintf_r+0x1a8>
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0c5      	beq.n	800a584 <_svfiprintf_r+0x130>
 800a5f8:	9105      	str	r1, [sp, #20]
 800a5fa:	e7c3      	b.n	800a584 <_svfiprintf_r+0x130>
 800a5fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a600:	4604      	mov	r4, r0
 800a602:	2301      	movs	r3, #1
 800a604:	e7f0      	b.n	800a5e8 <_svfiprintf_r+0x194>
 800a606:	ab03      	add	r3, sp, #12
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	462a      	mov	r2, r5
 800a60c:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <_svfiprintf_r+0x1f8>)
 800a60e:	a904      	add	r1, sp, #16
 800a610:	4638      	mov	r0, r7
 800a612:	f3af 8000 	nop.w
 800a616:	1c42      	adds	r2, r0, #1
 800a618:	4606      	mov	r6, r0
 800a61a:	d1d6      	bne.n	800a5ca <_svfiprintf_r+0x176>
 800a61c:	89ab      	ldrh	r3, [r5, #12]
 800a61e:	065b      	lsls	r3, r3, #25
 800a620:	f53f af2c 	bmi.w	800a47c <_svfiprintf_r+0x28>
 800a624:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a626:	b01d      	add	sp, #116	; 0x74
 800a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62c:	ab03      	add	r3, sp, #12
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	462a      	mov	r2, r5
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <_svfiprintf_r+0x1f8>)
 800a634:	a904      	add	r1, sp, #16
 800a636:	4638      	mov	r0, r7
 800a638:	f000 f87a 	bl	800a730 <_printf_i>
 800a63c:	e7eb      	b.n	800a616 <_svfiprintf_r+0x1c2>
 800a63e:	bf00      	nop
 800a640:	0800d6d0 	.word	0x0800d6d0
 800a644:	0800d6da 	.word	0x0800d6da
 800a648:	00000000 	.word	0x00000000
 800a64c:	0800a39d 	.word	0x0800a39d
 800a650:	0800d6d6 	.word	0x0800d6d6

0800a654 <_printf_common>:
 800a654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a658:	4616      	mov	r6, r2
 800a65a:	4699      	mov	r9, r3
 800a65c:	688a      	ldr	r2, [r1, #8]
 800a65e:	690b      	ldr	r3, [r1, #16]
 800a660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a664:	4293      	cmp	r3, r2
 800a666:	bfb8      	it	lt
 800a668:	4613      	movlt	r3, r2
 800a66a:	6033      	str	r3, [r6, #0]
 800a66c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a670:	4607      	mov	r7, r0
 800a672:	460c      	mov	r4, r1
 800a674:	b10a      	cbz	r2, 800a67a <_printf_common+0x26>
 800a676:	3301      	adds	r3, #1
 800a678:	6033      	str	r3, [r6, #0]
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	0699      	lsls	r1, r3, #26
 800a67e:	bf42      	ittt	mi
 800a680:	6833      	ldrmi	r3, [r6, #0]
 800a682:	3302      	addmi	r3, #2
 800a684:	6033      	strmi	r3, [r6, #0]
 800a686:	6825      	ldr	r5, [r4, #0]
 800a688:	f015 0506 	ands.w	r5, r5, #6
 800a68c:	d106      	bne.n	800a69c <_printf_common+0x48>
 800a68e:	f104 0a19 	add.w	sl, r4, #25
 800a692:	68e3      	ldr	r3, [r4, #12]
 800a694:	6832      	ldr	r2, [r6, #0]
 800a696:	1a9b      	subs	r3, r3, r2
 800a698:	42ab      	cmp	r3, r5
 800a69a:	dc26      	bgt.n	800a6ea <_printf_common+0x96>
 800a69c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6a0:	1e13      	subs	r3, r2, #0
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	bf18      	it	ne
 800a6a6:	2301      	movne	r3, #1
 800a6a8:	0692      	lsls	r2, r2, #26
 800a6aa:	d42b      	bmi.n	800a704 <_printf_common+0xb0>
 800a6ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	47c0      	blx	r8
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d01e      	beq.n	800a6f8 <_printf_common+0xa4>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	68e5      	ldr	r5, [r4, #12]
 800a6be:	6832      	ldr	r2, [r6, #0]
 800a6c0:	f003 0306 	and.w	r3, r3, #6
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	bf08      	it	eq
 800a6c8:	1aad      	subeq	r5, r5, r2
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	bf0c      	ite	eq
 800a6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6d4:	2500      	movne	r5, #0
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	bfc4      	itt	gt
 800a6da:	1a9b      	subgt	r3, r3, r2
 800a6dc:	18ed      	addgt	r5, r5, r3
 800a6de:	2600      	movs	r6, #0
 800a6e0:	341a      	adds	r4, #26
 800a6e2:	42b5      	cmp	r5, r6
 800a6e4:	d11a      	bne.n	800a71c <_printf_common+0xc8>
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	e008      	b.n	800a6fc <_printf_common+0xa8>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	47c0      	blx	r8
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d103      	bne.n	800a700 <_printf_common+0xac>
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	3501      	adds	r5, #1
 800a702:	e7c6      	b.n	800a692 <_printf_common+0x3e>
 800a704:	18e1      	adds	r1, r4, r3
 800a706:	1c5a      	adds	r2, r3, #1
 800a708:	2030      	movs	r0, #48	; 0x30
 800a70a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a70e:	4422      	add	r2, r4
 800a710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a718:	3302      	adds	r3, #2
 800a71a:	e7c7      	b.n	800a6ac <_printf_common+0x58>
 800a71c:	2301      	movs	r3, #1
 800a71e:	4622      	mov	r2, r4
 800a720:	4649      	mov	r1, r9
 800a722:	4638      	mov	r0, r7
 800a724:	47c0      	blx	r8
 800a726:	3001      	adds	r0, #1
 800a728:	d0e6      	beq.n	800a6f8 <_printf_common+0xa4>
 800a72a:	3601      	adds	r6, #1
 800a72c:	e7d9      	b.n	800a6e2 <_printf_common+0x8e>
	...

0800a730 <_printf_i>:
 800a730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	7e0f      	ldrb	r7, [r1, #24]
 800a736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a738:	2f78      	cmp	r7, #120	; 0x78
 800a73a:	4691      	mov	r9, r2
 800a73c:	4680      	mov	r8, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	469a      	mov	sl, r3
 800a742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a746:	d807      	bhi.n	800a758 <_printf_i+0x28>
 800a748:	2f62      	cmp	r7, #98	; 0x62
 800a74a:	d80a      	bhi.n	800a762 <_printf_i+0x32>
 800a74c:	2f00      	cmp	r7, #0
 800a74e:	f000 80d8 	beq.w	800a902 <_printf_i+0x1d2>
 800a752:	2f58      	cmp	r7, #88	; 0x58
 800a754:	f000 80a3 	beq.w	800a89e <_printf_i+0x16e>
 800a758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a75c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a760:	e03a      	b.n	800a7d8 <_printf_i+0xa8>
 800a762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a766:	2b15      	cmp	r3, #21
 800a768:	d8f6      	bhi.n	800a758 <_printf_i+0x28>
 800a76a:	a101      	add	r1, pc, #4	; (adr r1, 800a770 <_printf_i+0x40>)
 800a76c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a770:	0800a7c9 	.word	0x0800a7c9
 800a774:	0800a7dd 	.word	0x0800a7dd
 800a778:	0800a759 	.word	0x0800a759
 800a77c:	0800a759 	.word	0x0800a759
 800a780:	0800a759 	.word	0x0800a759
 800a784:	0800a759 	.word	0x0800a759
 800a788:	0800a7dd 	.word	0x0800a7dd
 800a78c:	0800a759 	.word	0x0800a759
 800a790:	0800a759 	.word	0x0800a759
 800a794:	0800a759 	.word	0x0800a759
 800a798:	0800a759 	.word	0x0800a759
 800a79c:	0800a8e9 	.word	0x0800a8e9
 800a7a0:	0800a80d 	.word	0x0800a80d
 800a7a4:	0800a8cb 	.word	0x0800a8cb
 800a7a8:	0800a759 	.word	0x0800a759
 800a7ac:	0800a759 	.word	0x0800a759
 800a7b0:	0800a90b 	.word	0x0800a90b
 800a7b4:	0800a759 	.word	0x0800a759
 800a7b8:	0800a80d 	.word	0x0800a80d
 800a7bc:	0800a759 	.word	0x0800a759
 800a7c0:	0800a759 	.word	0x0800a759
 800a7c4:	0800a8d3 	.word	0x0800a8d3
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	1d1a      	adds	r2, r3, #4
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	602a      	str	r2, [r5, #0]
 800a7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e0a3      	b.n	800a924 <_printf_i+0x1f4>
 800a7dc:	6820      	ldr	r0, [r4, #0]
 800a7de:	6829      	ldr	r1, [r5, #0]
 800a7e0:	0606      	lsls	r6, r0, #24
 800a7e2:	f101 0304 	add.w	r3, r1, #4
 800a7e6:	d50a      	bpl.n	800a7fe <_printf_i+0xce>
 800a7e8:	680e      	ldr	r6, [r1, #0]
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	da03      	bge.n	800a7f8 <_printf_i+0xc8>
 800a7f0:	232d      	movs	r3, #45	; 0x2d
 800a7f2:	4276      	negs	r6, r6
 800a7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f8:	485e      	ldr	r0, [pc, #376]	; (800a974 <_printf_i+0x244>)
 800a7fa:	230a      	movs	r3, #10
 800a7fc:	e019      	b.n	800a832 <_printf_i+0x102>
 800a7fe:	680e      	ldr	r6, [r1, #0]
 800a800:	602b      	str	r3, [r5, #0]
 800a802:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a806:	bf18      	it	ne
 800a808:	b236      	sxthne	r6, r6
 800a80a:	e7ef      	b.n	800a7ec <_printf_i+0xbc>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	6820      	ldr	r0, [r4, #0]
 800a810:	1d19      	adds	r1, r3, #4
 800a812:	6029      	str	r1, [r5, #0]
 800a814:	0601      	lsls	r1, r0, #24
 800a816:	d501      	bpl.n	800a81c <_printf_i+0xec>
 800a818:	681e      	ldr	r6, [r3, #0]
 800a81a:	e002      	b.n	800a822 <_printf_i+0xf2>
 800a81c:	0646      	lsls	r6, r0, #25
 800a81e:	d5fb      	bpl.n	800a818 <_printf_i+0xe8>
 800a820:	881e      	ldrh	r6, [r3, #0]
 800a822:	4854      	ldr	r0, [pc, #336]	; (800a974 <_printf_i+0x244>)
 800a824:	2f6f      	cmp	r7, #111	; 0x6f
 800a826:	bf0c      	ite	eq
 800a828:	2308      	moveq	r3, #8
 800a82a:	230a      	movne	r3, #10
 800a82c:	2100      	movs	r1, #0
 800a82e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a832:	6865      	ldr	r5, [r4, #4]
 800a834:	60a5      	str	r5, [r4, #8]
 800a836:	2d00      	cmp	r5, #0
 800a838:	bfa2      	ittt	ge
 800a83a:	6821      	ldrge	r1, [r4, #0]
 800a83c:	f021 0104 	bicge.w	r1, r1, #4
 800a840:	6021      	strge	r1, [r4, #0]
 800a842:	b90e      	cbnz	r6, 800a848 <_printf_i+0x118>
 800a844:	2d00      	cmp	r5, #0
 800a846:	d04d      	beq.n	800a8e4 <_printf_i+0x1b4>
 800a848:	4615      	mov	r5, r2
 800a84a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a84e:	fb03 6711 	mls	r7, r3, r1, r6
 800a852:	5dc7      	ldrb	r7, [r0, r7]
 800a854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a858:	4637      	mov	r7, r6
 800a85a:	42bb      	cmp	r3, r7
 800a85c:	460e      	mov	r6, r1
 800a85e:	d9f4      	bls.n	800a84a <_printf_i+0x11a>
 800a860:	2b08      	cmp	r3, #8
 800a862:	d10b      	bne.n	800a87c <_printf_i+0x14c>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	07de      	lsls	r6, r3, #31
 800a868:	d508      	bpl.n	800a87c <_printf_i+0x14c>
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	6861      	ldr	r1, [r4, #4]
 800a86e:	4299      	cmp	r1, r3
 800a870:	bfde      	ittt	le
 800a872:	2330      	movle	r3, #48	; 0x30
 800a874:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a878:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a87c:	1b52      	subs	r2, r2, r5
 800a87e:	6122      	str	r2, [r4, #16]
 800a880:	f8cd a000 	str.w	sl, [sp]
 800a884:	464b      	mov	r3, r9
 800a886:	aa03      	add	r2, sp, #12
 800a888:	4621      	mov	r1, r4
 800a88a:	4640      	mov	r0, r8
 800a88c:	f7ff fee2 	bl	800a654 <_printf_common>
 800a890:	3001      	adds	r0, #1
 800a892:	d14c      	bne.n	800a92e <_printf_i+0x1fe>
 800a894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a898:	b004      	add	sp, #16
 800a89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a89e:	4835      	ldr	r0, [pc, #212]	; (800a974 <_printf_i+0x244>)
 800a8a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8a4:	6829      	ldr	r1, [r5, #0]
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8ac:	6029      	str	r1, [r5, #0]
 800a8ae:	061d      	lsls	r5, r3, #24
 800a8b0:	d514      	bpl.n	800a8dc <_printf_i+0x1ac>
 800a8b2:	07df      	lsls	r7, r3, #31
 800a8b4:	bf44      	itt	mi
 800a8b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ba:	6023      	strmi	r3, [r4, #0]
 800a8bc:	b91e      	cbnz	r6, 800a8c6 <_printf_i+0x196>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	f023 0320 	bic.w	r3, r3, #32
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	2310      	movs	r3, #16
 800a8c8:	e7b0      	b.n	800a82c <_printf_i+0xfc>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	f043 0320 	orr.w	r3, r3, #32
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	2378      	movs	r3, #120	; 0x78
 800a8d4:	4828      	ldr	r0, [pc, #160]	; (800a978 <_printf_i+0x248>)
 800a8d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8da:	e7e3      	b.n	800a8a4 <_printf_i+0x174>
 800a8dc:	0659      	lsls	r1, r3, #25
 800a8de:	bf48      	it	mi
 800a8e0:	b2b6      	uxthmi	r6, r6
 800a8e2:	e7e6      	b.n	800a8b2 <_printf_i+0x182>
 800a8e4:	4615      	mov	r5, r2
 800a8e6:	e7bb      	b.n	800a860 <_printf_i+0x130>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	6826      	ldr	r6, [r4, #0]
 800a8ec:	6961      	ldr	r1, [r4, #20]
 800a8ee:	1d18      	adds	r0, r3, #4
 800a8f0:	6028      	str	r0, [r5, #0]
 800a8f2:	0635      	lsls	r5, r6, #24
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	d501      	bpl.n	800a8fc <_printf_i+0x1cc>
 800a8f8:	6019      	str	r1, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <_printf_i+0x1d2>
 800a8fc:	0670      	lsls	r0, r6, #25
 800a8fe:	d5fb      	bpl.n	800a8f8 <_printf_i+0x1c8>
 800a900:	8019      	strh	r1, [r3, #0]
 800a902:	2300      	movs	r3, #0
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	4615      	mov	r5, r2
 800a908:	e7ba      	b.n	800a880 <_printf_i+0x150>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	1d1a      	adds	r2, r3, #4
 800a90e:	602a      	str	r2, [r5, #0]
 800a910:	681d      	ldr	r5, [r3, #0]
 800a912:	6862      	ldr	r2, [r4, #4]
 800a914:	2100      	movs	r1, #0
 800a916:	4628      	mov	r0, r5
 800a918:	f7f5 fc62 	bl	80001e0 <memchr>
 800a91c:	b108      	cbz	r0, 800a922 <_printf_i+0x1f2>
 800a91e:	1b40      	subs	r0, r0, r5
 800a920:	6060      	str	r0, [r4, #4]
 800a922:	6863      	ldr	r3, [r4, #4]
 800a924:	6123      	str	r3, [r4, #16]
 800a926:	2300      	movs	r3, #0
 800a928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a92c:	e7a8      	b.n	800a880 <_printf_i+0x150>
 800a92e:	6923      	ldr	r3, [r4, #16]
 800a930:	462a      	mov	r2, r5
 800a932:	4649      	mov	r1, r9
 800a934:	4640      	mov	r0, r8
 800a936:	47d0      	blx	sl
 800a938:	3001      	adds	r0, #1
 800a93a:	d0ab      	beq.n	800a894 <_printf_i+0x164>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	079b      	lsls	r3, r3, #30
 800a940:	d413      	bmi.n	800a96a <_printf_i+0x23a>
 800a942:	68e0      	ldr	r0, [r4, #12]
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	4298      	cmp	r0, r3
 800a948:	bfb8      	it	lt
 800a94a:	4618      	movlt	r0, r3
 800a94c:	e7a4      	b.n	800a898 <_printf_i+0x168>
 800a94e:	2301      	movs	r3, #1
 800a950:	4632      	mov	r2, r6
 800a952:	4649      	mov	r1, r9
 800a954:	4640      	mov	r0, r8
 800a956:	47d0      	blx	sl
 800a958:	3001      	adds	r0, #1
 800a95a:	d09b      	beq.n	800a894 <_printf_i+0x164>
 800a95c:	3501      	adds	r5, #1
 800a95e:	68e3      	ldr	r3, [r4, #12]
 800a960:	9903      	ldr	r1, [sp, #12]
 800a962:	1a5b      	subs	r3, r3, r1
 800a964:	42ab      	cmp	r3, r5
 800a966:	dcf2      	bgt.n	800a94e <_printf_i+0x21e>
 800a968:	e7eb      	b.n	800a942 <_printf_i+0x212>
 800a96a:	2500      	movs	r5, #0
 800a96c:	f104 0619 	add.w	r6, r4, #25
 800a970:	e7f5      	b.n	800a95e <_printf_i+0x22e>
 800a972:	bf00      	nop
 800a974:	0800d6e1 	.word	0x0800d6e1
 800a978:	0800d6f2 	.word	0x0800d6f2

0800a97c <memcpy>:
 800a97c:	440a      	add	r2, r1
 800a97e:	4291      	cmp	r1, r2
 800a980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a984:	d100      	bne.n	800a988 <memcpy+0xc>
 800a986:	4770      	bx	lr
 800a988:	b510      	push	{r4, lr}
 800a98a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a98e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a992:	4291      	cmp	r1, r2
 800a994:	d1f9      	bne.n	800a98a <memcpy+0xe>
 800a996:	bd10      	pop	{r4, pc}

0800a998 <memmove>:
 800a998:	4288      	cmp	r0, r1
 800a99a:	b510      	push	{r4, lr}
 800a99c:	eb01 0402 	add.w	r4, r1, r2
 800a9a0:	d902      	bls.n	800a9a8 <memmove+0x10>
 800a9a2:	4284      	cmp	r4, r0
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	d807      	bhi.n	800a9b8 <memmove+0x20>
 800a9a8:	1e43      	subs	r3, r0, #1
 800a9aa:	42a1      	cmp	r1, r4
 800a9ac:	d008      	beq.n	800a9c0 <memmove+0x28>
 800a9ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9b6:	e7f8      	b.n	800a9aa <memmove+0x12>
 800a9b8:	4402      	add	r2, r0
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	428a      	cmp	r2, r1
 800a9be:	d100      	bne.n	800a9c2 <memmove+0x2a>
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ca:	e7f7      	b.n	800a9bc <memmove+0x24>

0800a9cc <_free_r>:
 800a9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ce:	2900      	cmp	r1, #0
 800a9d0:	d044      	beq.n	800aa5c <_free_r+0x90>
 800a9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d6:	9001      	str	r0, [sp, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f1a1 0404 	sub.w	r4, r1, #4
 800a9de:	bfb8      	it	lt
 800a9e0:	18e4      	addlt	r4, r4, r3
 800a9e2:	f000 f913 	bl	800ac0c <__malloc_lock>
 800a9e6:	4a1e      	ldr	r2, [pc, #120]	; (800aa60 <_free_r+0x94>)
 800a9e8:	9801      	ldr	r0, [sp, #4]
 800a9ea:	6813      	ldr	r3, [r2, #0]
 800a9ec:	b933      	cbnz	r3, 800a9fc <_free_r+0x30>
 800a9ee:	6063      	str	r3, [r4, #4]
 800a9f0:	6014      	str	r4, [r2, #0]
 800a9f2:	b003      	add	sp, #12
 800a9f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9f8:	f000 b90e 	b.w	800ac18 <__malloc_unlock>
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	d908      	bls.n	800aa12 <_free_r+0x46>
 800aa00:	6825      	ldr	r5, [r4, #0]
 800aa02:	1961      	adds	r1, r4, r5
 800aa04:	428b      	cmp	r3, r1
 800aa06:	bf01      	itttt	eq
 800aa08:	6819      	ldreq	r1, [r3, #0]
 800aa0a:	685b      	ldreq	r3, [r3, #4]
 800aa0c:	1949      	addeq	r1, r1, r5
 800aa0e:	6021      	streq	r1, [r4, #0]
 800aa10:	e7ed      	b.n	800a9ee <_free_r+0x22>
 800aa12:	461a      	mov	r2, r3
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	b10b      	cbz	r3, 800aa1c <_free_r+0x50>
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	d9fa      	bls.n	800aa12 <_free_r+0x46>
 800aa1c:	6811      	ldr	r1, [r2, #0]
 800aa1e:	1855      	adds	r5, r2, r1
 800aa20:	42a5      	cmp	r5, r4
 800aa22:	d10b      	bne.n	800aa3c <_free_r+0x70>
 800aa24:	6824      	ldr	r4, [r4, #0]
 800aa26:	4421      	add	r1, r4
 800aa28:	1854      	adds	r4, r2, r1
 800aa2a:	42a3      	cmp	r3, r4
 800aa2c:	6011      	str	r1, [r2, #0]
 800aa2e:	d1e0      	bne.n	800a9f2 <_free_r+0x26>
 800aa30:	681c      	ldr	r4, [r3, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	6053      	str	r3, [r2, #4]
 800aa36:	4421      	add	r1, r4
 800aa38:	6011      	str	r1, [r2, #0]
 800aa3a:	e7da      	b.n	800a9f2 <_free_r+0x26>
 800aa3c:	d902      	bls.n	800aa44 <_free_r+0x78>
 800aa3e:	230c      	movs	r3, #12
 800aa40:	6003      	str	r3, [r0, #0]
 800aa42:	e7d6      	b.n	800a9f2 <_free_r+0x26>
 800aa44:	6825      	ldr	r5, [r4, #0]
 800aa46:	1961      	adds	r1, r4, r5
 800aa48:	428b      	cmp	r3, r1
 800aa4a:	bf04      	itt	eq
 800aa4c:	6819      	ldreq	r1, [r3, #0]
 800aa4e:	685b      	ldreq	r3, [r3, #4]
 800aa50:	6063      	str	r3, [r4, #4]
 800aa52:	bf04      	itt	eq
 800aa54:	1949      	addeq	r1, r1, r5
 800aa56:	6021      	streq	r1, [r4, #0]
 800aa58:	6054      	str	r4, [r2, #4]
 800aa5a:	e7ca      	b.n	800a9f2 <_free_r+0x26>
 800aa5c:	b003      	add	sp, #12
 800aa5e:	bd30      	pop	{r4, r5, pc}
 800aa60:	2000070c 	.word	0x2000070c

0800aa64 <sbrk_aligned>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	4e0e      	ldr	r6, [pc, #56]	; (800aaa0 <sbrk_aligned+0x3c>)
 800aa68:	460c      	mov	r4, r1
 800aa6a:	6831      	ldr	r1, [r6, #0]
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	b911      	cbnz	r1, 800aa76 <sbrk_aligned+0x12>
 800aa70:	f000 f8bc 	bl	800abec <_sbrk_r>
 800aa74:	6030      	str	r0, [r6, #0]
 800aa76:	4621      	mov	r1, r4
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f000 f8b7 	bl	800abec <_sbrk_r>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d00a      	beq.n	800aa98 <sbrk_aligned+0x34>
 800aa82:	1cc4      	adds	r4, r0, #3
 800aa84:	f024 0403 	bic.w	r4, r4, #3
 800aa88:	42a0      	cmp	r0, r4
 800aa8a:	d007      	beq.n	800aa9c <sbrk_aligned+0x38>
 800aa8c:	1a21      	subs	r1, r4, r0
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 f8ac 	bl	800abec <_sbrk_r>
 800aa94:	3001      	adds	r0, #1
 800aa96:	d101      	bne.n	800aa9c <sbrk_aligned+0x38>
 800aa98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	20000710 	.word	0x20000710

0800aaa4 <_malloc_r>:
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	1ccd      	adds	r5, r1, #3
 800aaaa:	f025 0503 	bic.w	r5, r5, #3
 800aaae:	3508      	adds	r5, #8
 800aab0:	2d0c      	cmp	r5, #12
 800aab2:	bf38      	it	cc
 800aab4:	250c      	movcc	r5, #12
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	4607      	mov	r7, r0
 800aaba:	db01      	blt.n	800aac0 <_malloc_r+0x1c>
 800aabc:	42a9      	cmp	r1, r5
 800aabe:	d905      	bls.n	800aacc <_malloc_r+0x28>
 800aac0:	230c      	movs	r3, #12
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	2600      	movs	r6, #0
 800aac6:	4630      	mov	r0, r6
 800aac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aacc:	4e2e      	ldr	r6, [pc, #184]	; (800ab88 <_malloc_r+0xe4>)
 800aace:	f000 f89d 	bl	800ac0c <__malloc_lock>
 800aad2:	6833      	ldr	r3, [r6, #0]
 800aad4:	461c      	mov	r4, r3
 800aad6:	bb34      	cbnz	r4, 800ab26 <_malloc_r+0x82>
 800aad8:	4629      	mov	r1, r5
 800aada:	4638      	mov	r0, r7
 800aadc:	f7ff ffc2 	bl	800aa64 <sbrk_aligned>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	4604      	mov	r4, r0
 800aae4:	d14d      	bne.n	800ab82 <_malloc_r+0xde>
 800aae6:	6834      	ldr	r4, [r6, #0]
 800aae8:	4626      	mov	r6, r4
 800aaea:	2e00      	cmp	r6, #0
 800aaec:	d140      	bne.n	800ab70 <_malloc_r+0xcc>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	eb04 0803 	add.w	r8, r4, r3
 800aaf8:	f000 f878 	bl	800abec <_sbrk_r>
 800aafc:	4580      	cmp	r8, r0
 800aafe:	d13a      	bne.n	800ab76 <_malloc_r+0xd2>
 800ab00:	6821      	ldr	r1, [r4, #0]
 800ab02:	3503      	adds	r5, #3
 800ab04:	1a6d      	subs	r5, r5, r1
 800ab06:	f025 0503 	bic.w	r5, r5, #3
 800ab0a:	3508      	adds	r5, #8
 800ab0c:	2d0c      	cmp	r5, #12
 800ab0e:	bf38      	it	cc
 800ab10:	250c      	movcc	r5, #12
 800ab12:	4629      	mov	r1, r5
 800ab14:	4638      	mov	r0, r7
 800ab16:	f7ff ffa5 	bl	800aa64 <sbrk_aligned>
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	d02b      	beq.n	800ab76 <_malloc_r+0xd2>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	442b      	add	r3, r5
 800ab22:	6023      	str	r3, [r4, #0]
 800ab24:	e00e      	b.n	800ab44 <_malloc_r+0xa0>
 800ab26:	6822      	ldr	r2, [r4, #0]
 800ab28:	1b52      	subs	r2, r2, r5
 800ab2a:	d41e      	bmi.n	800ab6a <_malloc_r+0xc6>
 800ab2c:	2a0b      	cmp	r2, #11
 800ab2e:	d916      	bls.n	800ab5e <_malloc_r+0xba>
 800ab30:	1961      	adds	r1, r4, r5
 800ab32:	42a3      	cmp	r3, r4
 800ab34:	6025      	str	r5, [r4, #0]
 800ab36:	bf18      	it	ne
 800ab38:	6059      	strne	r1, [r3, #4]
 800ab3a:	6863      	ldr	r3, [r4, #4]
 800ab3c:	bf08      	it	eq
 800ab3e:	6031      	streq	r1, [r6, #0]
 800ab40:	5162      	str	r2, [r4, r5]
 800ab42:	604b      	str	r3, [r1, #4]
 800ab44:	4638      	mov	r0, r7
 800ab46:	f104 060b 	add.w	r6, r4, #11
 800ab4a:	f000 f865 	bl	800ac18 <__malloc_unlock>
 800ab4e:	f026 0607 	bic.w	r6, r6, #7
 800ab52:	1d23      	adds	r3, r4, #4
 800ab54:	1af2      	subs	r2, r6, r3
 800ab56:	d0b6      	beq.n	800aac6 <_malloc_r+0x22>
 800ab58:	1b9b      	subs	r3, r3, r6
 800ab5a:	50a3      	str	r3, [r4, r2]
 800ab5c:	e7b3      	b.n	800aac6 <_malloc_r+0x22>
 800ab5e:	6862      	ldr	r2, [r4, #4]
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	bf0c      	ite	eq
 800ab64:	6032      	streq	r2, [r6, #0]
 800ab66:	605a      	strne	r2, [r3, #4]
 800ab68:	e7ec      	b.n	800ab44 <_malloc_r+0xa0>
 800ab6a:	4623      	mov	r3, r4
 800ab6c:	6864      	ldr	r4, [r4, #4]
 800ab6e:	e7b2      	b.n	800aad6 <_malloc_r+0x32>
 800ab70:	4634      	mov	r4, r6
 800ab72:	6876      	ldr	r6, [r6, #4]
 800ab74:	e7b9      	b.n	800aaea <_malloc_r+0x46>
 800ab76:	230c      	movs	r3, #12
 800ab78:	603b      	str	r3, [r7, #0]
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	f000 f84c 	bl	800ac18 <__malloc_unlock>
 800ab80:	e7a1      	b.n	800aac6 <_malloc_r+0x22>
 800ab82:	6025      	str	r5, [r4, #0]
 800ab84:	e7de      	b.n	800ab44 <_malloc_r+0xa0>
 800ab86:	bf00      	nop
 800ab88:	2000070c 	.word	0x2000070c

0800ab8c <_realloc_r>:
 800ab8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab90:	4680      	mov	r8, r0
 800ab92:	4614      	mov	r4, r2
 800ab94:	460e      	mov	r6, r1
 800ab96:	b921      	cbnz	r1, 800aba2 <_realloc_r+0x16>
 800ab98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	f7ff bf81 	b.w	800aaa4 <_malloc_r>
 800aba2:	b92a      	cbnz	r2, 800abb0 <_realloc_r+0x24>
 800aba4:	f7ff ff12 	bl	800a9cc <_free_r>
 800aba8:	4625      	mov	r5, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb0:	f000 f838 	bl	800ac24 <_malloc_usable_size_r>
 800abb4:	4284      	cmp	r4, r0
 800abb6:	4607      	mov	r7, r0
 800abb8:	d802      	bhi.n	800abc0 <_realloc_r+0x34>
 800abba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abbe:	d812      	bhi.n	800abe6 <_realloc_r+0x5a>
 800abc0:	4621      	mov	r1, r4
 800abc2:	4640      	mov	r0, r8
 800abc4:	f7ff ff6e 	bl	800aaa4 <_malloc_r>
 800abc8:	4605      	mov	r5, r0
 800abca:	2800      	cmp	r0, #0
 800abcc:	d0ed      	beq.n	800abaa <_realloc_r+0x1e>
 800abce:	42bc      	cmp	r4, r7
 800abd0:	4622      	mov	r2, r4
 800abd2:	4631      	mov	r1, r6
 800abd4:	bf28      	it	cs
 800abd6:	463a      	movcs	r2, r7
 800abd8:	f7ff fed0 	bl	800a97c <memcpy>
 800abdc:	4631      	mov	r1, r6
 800abde:	4640      	mov	r0, r8
 800abe0:	f7ff fef4 	bl	800a9cc <_free_r>
 800abe4:	e7e1      	b.n	800abaa <_realloc_r+0x1e>
 800abe6:	4635      	mov	r5, r6
 800abe8:	e7df      	b.n	800abaa <_realloc_r+0x1e>
	...

0800abec <_sbrk_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d06      	ldr	r5, [pc, #24]	; (800ac08 <_sbrk_r+0x1c>)
 800abf0:	2300      	movs	r3, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	602b      	str	r3, [r5, #0]
 800abf8:	f7f9 fac4 	bl	8004184 <_sbrk>
 800abfc:	1c43      	adds	r3, r0, #1
 800abfe:	d102      	bne.n	800ac06 <_sbrk_r+0x1a>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b103      	cbz	r3, 800ac06 <_sbrk_r+0x1a>
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	20000714 	.word	0x20000714

0800ac0c <__malloc_lock>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	; (800ac14 <__malloc_lock+0x8>)
 800ac0e:	f000 b811 	b.w	800ac34 <__retarget_lock_acquire_recursive>
 800ac12:	bf00      	nop
 800ac14:	20000718 	.word	0x20000718

0800ac18 <__malloc_unlock>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__malloc_unlock+0x8>)
 800ac1a:	f000 b80c 	b.w	800ac36 <__retarget_lock_release_recursive>
 800ac1e:	bf00      	nop
 800ac20:	20000718 	.word	0x20000718

0800ac24 <_malloc_usable_size_r>:
 800ac24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac28:	1f18      	subs	r0, r3, #4
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfbc      	itt	lt
 800ac2e:	580b      	ldrlt	r3, [r1, r0]
 800ac30:	18c0      	addlt	r0, r0, r3
 800ac32:	4770      	bx	lr

0800ac34 <__retarget_lock_acquire_recursive>:
 800ac34:	4770      	bx	lr

0800ac36 <__retarget_lock_release_recursive>:
 800ac36:	4770      	bx	lr

0800ac38 <sin>:
 800ac38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac3a:	ec53 2b10 	vmov	r2, r3, d0
 800ac3e:	4828      	ldr	r0, [pc, #160]	; (800ace0 <sin+0xa8>)
 800ac40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac44:	4281      	cmp	r1, r0
 800ac46:	dc07      	bgt.n	800ac58 <sin+0x20>
 800ac48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800acd8 <sin+0xa0>
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	b005      	add	sp, #20
 800ac50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac54:	f002 ba5c 	b.w	800d110 <__kernel_sin>
 800ac58:	4822      	ldr	r0, [pc, #136]	; (800ace4 <sin+0xac>)
 800ac5a:	4281      	cmp	r1, r0
 800ac5c:	dd09      	ble.n	800ac72 <sin+0x3a>
 800ac5e:	ee10 0a10 	vmov	r0, s0
 800ac62:	4619      	mov	r1, r3
 800ac64:	f7f5 fb10 	bl	8000288 <__aeabi_dsub>
 800ac68:	ec41 0b10 	vmov	d0, r0, r1
 800ac6c:	b005      	add	sp, #20
 800ac6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac72:	4668      	mov	r0, sp
 800ac74:	f001 f8a4 	bl	800bdc0 <__ieee754_rem_pio2>
 800ac78:	f000 0003 	and.w	r0, r0, #3
 800ac7c:	2801      	cmp	r0, #1
 800ac7e:	d00c      	beq.n	800ac9a <sin+0x62>
 800ac80:	2802      	cmp	r0, #2
 800ac82:	d011      	beq.n	800aca8 <sin+0x70>
 800ac84:	b9f0      	cbnz	r0, 800acc4 <sin+0x8c>
 800ac86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac8a:	ed9d 0b00 	vldr	d0, [sp]
 800ac8e:	2001      	movs	r0, #1
 800ac90:	f002 fa3e 	bl	800d110 <__kernel_sin>
 800ac94:	ec51 0b10 	vmov	r0, r1, d0
 800ac98:	e7e6      	b.n	800ac68 <sin+0x30>
 800ac9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac9e:	ed9d 0b00 	vldr	d0, [sp]
 800aca2:	f001 fe1d 	bl	800c8e0 <__kernel_cos>
 800aca6:	e7f5      	b.n	800ac94 <sin+0x5c>
 800aca8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800acac:	ed9d 0b00 	vldr	d0, [sp]
 800acb0:	2001      	movs	r0, #1
 800acb2:	f002 fa2d 	bl	800d110 <__kernel_sin>
 800acb6:	ec53 2b10 	vmov	r2, r3, d0
 800acba:	ee10 0a10 	vmov	r0, s0
 800acbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acc2:	e7d1      	b.n	800ac68 <sin+0x30>
 800acc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800acc8:	ed9d 0b00 	vldr	d0, [sp]
 800accc:	f001 fe08 	bl	800c8e0 <__kernel_cos>
 800acd0:	e7f1      	b.n	800acb6 <sin+0x7e>
 800acd2:	bf00      	nop
 800acd4:	f3af 8000 	nop.w
	...
 800ace0:	3fe921fb 	.word	0x3fe921fb
 800ace4:	7fefffff 	.word	0x7fefffff

0800ace8 <asin>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	ed2d 8b02 	vpush	{d8}
 800acee:	ec55 4b10 	vmov	r4, r5, d0
 800acf2:	f000 f921 	bl	800af38 <__ieee754_asin>
 800acf6:	4622      	mov	r2, r4
 800acf8:	462b      	mov	r3, r5
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	eeb0 8a40 	vmov.f32	s16, s0
 800ad02:	eef0 8a60 	vmov.f32	s17, s1
 800ad06:	f7f5 ff11 	bl	8000b2c <__aeabi_dcmpun>
 800ad0a:	b9a8      	cbnz	r0, 800ad38 <asin+0x50>
 800ad0c:	ec45 4b10 	vmov	d0, r4, r5
 800ad10:	f002 fb0e 	bl	800d330 <fabs>
 800ad14:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <asin+0x60>)
 800ad16:	ec51 0b10 	vmov	r0, r1, d0
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f7f5 fefc 	bl	8000b18 <__aeabi_dcmpgt>
 800ad20:	b150      	cbz	r0, 800ad38 <asin+0x50>
 800ad22:	f7ff fae9 	bl	800a2f8 <__errno>
 800ad26:	ecbd 8b02 	vpop	{d8}
 800ad2a:	2321      	movs	r3, #33	; 0x21
 800ad2c:	6003      	str	r3, [r0, #0]
 800ad2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad32:	4806      	ldr	r0, [pc, #24]	; (800ad4c <asin+0x64>)
 800ad34:	f002 bb90 	b.w	800d458 <nan>
 800ad38:	eeb0 0a48 	vmov.f32	s0, s16
 800ad3c:	eef0 0a68 	vmov.f32	s1, s17
 800ad40:	ecbd 8b02 	vpop	{d8}
 800ad44:	bd38      	pop	{r3, r4, r5, pc}
 800ad46:	bf00      	nop
 800ad48:	3ff00000 	.word	0x3ff00000
 800ad4c:	0800d6d5 	.word	0x0800d6d5

0800ad50 <pow>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	ed2d 8b02 	vpush	{d8}
 800ad56:	eeb0 8a40 	vmov.f32	s16, s0
 800ad5a:	eef0 8a60 	vmov.f32	s17, s1
 800ad5e:	ec55 4b11 	vmov	r4, r5, d1
 800ad62:	f000 fafd 	bl	800b360 <__ieee754_pow>
 800ad66:	4622      	mov	r2, r4
 800ad68:	462b      	mov	r3, r5
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	ec57 6b10 	vmov	r6, r7, d0
 800ad72:	f7f5 fedb 	bl	8000b2c <__aeabi_dcmpun>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d13b      	bne.n	800adf2 <pow+0xa2>
 800ad7a:	ec51 0b18 	vmov	r0, r1, d8
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2300      	movs	r3, #0
 800ad82:	f7f5 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad86:	b1b8      	cbz	r0, 800adb8 <pow+0x68>
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	f7f5 fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d146      	bne.n	800ae26 <pow+0xd6>
 800ad98:	ec45 4b10 	vmov	d0, r4, r5
 800ad9c:	f002 fad1 	bl	800d342 <finite>
 800ada0:	b338      	cbz	r0, 800adf2 <pow+0xa2>
 800ada2:	2200      	movs	r2, #0
 800ada4:	2300      	movs	r3, #0
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fe97 	bl	8000adc <__aeabi_dcmplt>
 800adae:	b300      	cbz	r0, 800adf2 <pow+0xa2>
 800adb0:	f7ff faa2 	bl	800a2f8 <__errno>
 800adb4:	2322      	movs	r3, #34	; 0x22
 800adb6:	e01b      	b.n	800adf0 <pow+0xa0>
 800adb8:	ec47 6b10 	vmov	d0, r6, r7
 800adbc:	f002 fac1 	bl	800d342 <finite>
 800adc0:	b9e0      	cbnz	r0, 800adfc <pow+0xac>
 800adc2:	eeb0 0a48 	vmov.f32	s0, s16
 800adc6:	eef0 0a68 	vmov.f32	s1, s17
 800adca:	f002 faba 	bl	800d342 <finite>
 800adce:	b1a8      	cbz	r0, 800adfc <pow+0xac>
 800add0:	ec45 4b10 	vmov	d0, r4, r5
 800add4:	f002 fab5 	bl	800d342 <finite>
 800add8:	b180      	cbz	r0, 800adfc <pow+0xac>
 800adda:	4632      	mov	r2, r6
 800addc:	463b      	mov	r3, r7
 800adde:	4630      	mov	r0, r6
 800ade0:	4639      	mov	r1, r7
 800ade2:	f7f5 fea3 	bl	8000b2c <__aeabi_dcmpun>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d0e2      	beq.n	800adb0 <pow+0x60>
 800adea:	f7ff fa85 	bl	800a2f8 <__errno>
 800adee:	2321      	movs	r3, #33	; 0x21
 800adf0:	6003      	str	r3, [r0, #0]
 800adf2:	ecbd 8b02 	vpop	{d8}
 800adf6:	ec47 6b10 	vmov	d0, r6, r7
 800adfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adfc:	2200      	movs	r2, #0
 800adfe:	2300      	movs	r3, #0
 800ae00:	4630      	mov	r0, r6
 800ae02:	4639      	mov	r1, r7
 800ae04:	f7f5 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d0f2      	beq.n	800adf2 <pow+0xa2>
 800ae0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae10:	eef0 0a68 	vmov.f32	s1, s17
 800ae14:	f002 fa95 	bl	800d342 <finite>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d0ea      	beq.n	800adf2 <pow+0xa2>
 800ae1c:	ec45 4b10 	vmov	d0, r4, r5
 800ae20:	f002 fa8f 	bl	800d342 <finite>
 800ae24:	e7c3      	b.n	800adae <pow+0x5e>
 800ae26:	4f01      	ldr	r7, [pc, #4]	; (800ae2c <pow+0xdc>)
 800ae28:	2600      	movs	r6, #0
 800ae2a:	e7e2      	b.n	800adf2 <pow+0xa2>
 800ae2c:	3ff00000 	.word	0x3ff00000

0800ae30 <sqrt>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	ed2d 8b02 	vpush	{d8}
 800ae36:	ec55 4b10 	vmov	r4, r5, d0
 800ae3a:	f001 f9cd 	bl	800c1d8 <__ieee754_sqrt>
 800ae3e:	4622      	mov	r2, r4
 800ae40:	462b      	mov	r3, r5
 800ae42:	4620      	mov	r0, r4
 800ae44:	4629      	mov	r1, r5
 800ae46:	eeb0 8a40 	vmov.f32	s16, s0
 800ae4a:	eef0 8a60 	vmov.f32	s17, s1
 800ae4e:	f7f5 fe6d 	bl	8000b2c <__aeabi_dcmpun>
 800ae52:	b990      	cbnz	r0, 800ae7a <sqrt+0x4a>
 800ae54:	2200      	movs	r2, #0
 800ae56:	2300      	movs	r3, #0
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	f7f5 fe3e 	bl	8000adc <__aeabi_dcmplt>
 800ae60:	b158      	cbz	r0, 800ae7a <sqrt+0x4a>
 800ae62:	f7ff fa49 	bl	800a2f8 <__errno>
 800ae66:	2321      	movs	r3, #33	; 0x21
 800ae68:	6003      	str	r3, [r0, #0]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4619      	mov	r1, r3
 800ae72:	f7f5 fceb 	bl	800084c <__aeabi_ddiv>
 800ae76:	ec41 0b18 	vmov	d8, r0, r1
 800ae7a:	eeb0 0a48 	vmov.f32	s0, s16
 800ae7e:	eef0 0a68 	vmov.f32	s1, s17
 800ae82:	ecbd 8b02 	vpop	{d8}
 800ae86:	bd38      	pop	{r3, r4, r5, pc}

0800ae88 <powf>:
 800ae88:	b508      	push	{r3, lr}
 800ae8a:	ed2d 8b04 	vpush	{d8-d9}
 800ae8e:	eeb0 8a60 	vmov.f32	s16, s1
 800ae92:	eeb0 9a40 	vmov.f32	s18, s0
 800ae96:	f001 fa51 	bl	800c33c <__ieee754_powf>
 800ae9a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ae9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea2:	eef0 8a40 	vmov.f32	s17, s0
 800aea6:	d63e      	bvs.n	800af26 <powf+0x9e>
 800aea8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800aeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb0:	d112      	bne.n	800aed8 <powf+0x50>
 800aeb2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeba:	d039      	beq.n	800af30 <powf+0xa8>
 800aebc:	eeb0 0a48 	vmov.f32	s0, s16
 800aec0:	f002 fb5f 	bl	800d582 <finitef>
 800aec4:	b378      	cbz	r0, 800af26 <powf+0x9e>
 800aec6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aece:	d52a      	bpl.n	800af26 <powf+0x9e>
 800aed0:	f7ff fa12 	bl	800a2f8 <__errno>
 800aed4:	2322      	movs	r3, #34	; 0x22
 800aed6:	e014      	b.n	800af02 <powf+0x7a>
 800aed8:	f002 fb53 	bl	800d582 <finitef>
 800aedc:	b998      	cbnz	r0, 800af06 <powf+0x7e>
 800aede:	eeb0 0a49 	vmov.f32	s0, s18
 800aee2:	f002 fb4e 	bl	800d582 <finitef>
 800aee6:	b170      	cbz	r0, 800af06 <powf+0x7e>
 800aee8:	eeb0 0a48 	vmov.f32	s0, s16
 800aeec:	f002 fb49 	bl	800d582 <finitef>
 800aef0:	b148      	cbz	r0, 800af06 <powf+0x7e>
 800aef2:	eef4 8a68 	vcmp.f32	s17, s17
 800aef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefa:	d7e9      	bvc.n	800aed0 <powf+0x48>
 800aefc:	f7ff f9fc 	bl	800a2f8 <__errno>
 800af00:	2321      	movs	r3, #33	; 0x21
 800af02:	6003      	str	r3, [r0, #0]
 800af04:	e00f      	b.n	800af26 <powf+0x9e>
 800af06:	eef5 8a40 	vcmp.f32	s17, #0.0
 800af0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0e:	d10a      	bne.n	800af26 <powf+0x9e>
 800af10:	eeb0 0a49 	vmov.f32	s0, s18
 800af14:	f002 fb35 	bl	800d582 <finitef>
 800af18:	b128      	cbz	r0, 800af26 <powf+0x9e>
 800af1a:	eeb0 0a48 	vmov.f32	s0, s16
 800af1e:	f002 fb30 	bl	800d582 <finitef>
 800af22:	2800      	cmp	r0, #0
 800af24:	d1d4      	bne.n	800aed0 <powf+0x48>
 800af26:	eeb0 0a68 	vmov.f32	s0, s17
 800af2a:	ecbd 8b04 	vpop	{d8-d9}
 800af2e:	bd08      	pop	{r3, pc}
 800af30:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800af34:	e7f7      	b.n	800af26 <powf+0x9e>
	...

0800af38 <__ieee754_asin>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	ed2d 8b04 	vpush	{d8-d9}
 800af40:	ec55 4b10 	vmov	r4, r5, d0
 800af44:	4bcc      	ldr	r3, [pc, #816]	; (800b278 <__ieee754_asin+0x340>)
 800af46:	b083      	sub	sp, #12
 800af48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800af4c:	4598      	cmp	r8, r3
 800af4e:	9501      	str	r5, [sp, #4]
 800af50:	dd35      	ble.n	800afbe <__ieee754_asin+0x86>
 800af52:	ee10 3a10 	vmov	r3, s0
 800af56:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800af5a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800af5e:	ea58 0303 	orrs.w	r3, r8, r3
 800af62:	d117      	bne.n	800af94 <__ieee754_asin+0x5c>
 800af64:	a3aa      	add	r3, pc, #680	; (adr r3, 800b210 <__ieee754_asin+0x2d8>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	ee10 0a10 	vmov	r0, s0
 800af6e:	4629      	mov	r1, r5
 800af70:	f7f5 fb42 	bl	80005f8 <__aeabi_dmul>
 800af74:	a3a8      	add	r3, pc, #672	; (adr r3, 800b218 <__ieee754_asin+0x2e0>)
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	4606      	mov	r6, r0
 800af7c:	460f      	mov	r7, r1
 800af7e:	4620      	mov	r0, r4
 800af80:	4629      	mov	r1, r5
 800af82:	f7f5 fb39 	bl	80005f8 <__aeabi_dmul>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	f7f5 f97d 	bl	800028c <__adddf3>
 800af92:	e00b      	b.n	800afac <__ieee754_asin+0x74>
 800af94:	ee10 2a10 	vmov	r2, s0
 800af98:	462b      	mov	r3, r5
 800af9a:	ee10 0a10 	vmov	r0, s0
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 f972 	bl	8000288 <__aeabi_dsub>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	f7f5 fc50 	bl	800084c <__aeabi_ddiv>
 800afac:	4604      	mov	r4, r0
 800afae:	460d      	mov	r5, r1
 800afb0:	ec45 4b10 	vmov	d0, r4, r5
 800afb4:	b003      	add	sp, #12
 800afb6:	ecbd 8b04 	vpop	{d8-d9}
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	4baf      	ldr	r3, [pc, #700]	; (800b27c <__ieee754_asin+0x344>)
 800afc0:	4598      	cmp	r8, r3
 800afc2:	dc11      	bgt.n	800afe8 <__ieee754_asin+0xb0>
 800afc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800afc8:	f280 80ae 	bge.w	800b128 <__ieee754_asin+0x1f0>
 800afcc:	a394      	add	r3, pc, #592	; (adr r3, 800b220 <__ieee754_asin+0x2e8>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	ee10 0a10 	vmov	r0, s0
 800afd6:	4629      	mov	r1, r5
 800afd8:	f7f5 f958 	bl	800028c <__adddf3>
 800afdc:	4ba8      	ldr	r3, [pc, #672]	; (800b280 <__ieee754_asin+0x348>)
 800afde:	2200      	movs	r2, #0
 800afe0:	f7f5 fd9a 	bl	8000b18 <__aeabi_dcmpgt>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1e3      	bne.n	800afb0 <__ieee754_asin+0x78>
 800afe8:	ec45 4b10 	vmov	d0, r4, r5
 800afec:	f002 f9a0 	bl	800d330 <fabs>
 800aff0:	49a3      	ldr	r1, [pc, #652]	; (800b280 <__ieee754_asin+0x348>)
 800aff2:	ec53 2b10 	vmov	r2, r3, d0
 800aff6:	2000      	movs	r0, #0
 800aff8:	f7f5 f946 	bl	8000288 <__aeabi_dsub>
 800affc:	4ba1      	ldr	r3, [pc, #644]	; (800b284 <__ieee754_asin+0x34c>)
 800affe:	2200      	movs	r2, #0
 800b000:	f7f5 fafa 	bl	80005f8 <__aeabi_dmul>
 800b004:	a388      	add	r3, pc, #544	; (adr r3, 800b228 <__ieee754_asin+0x2f0>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	4604      	mov	r4, r0
 800b00c:	460d      	mov	r5, r1
 800b00e:	f7f5 faf3 	bl	80005f8 <__aeabi_dmul>
 800b012:	a387      	add	r3, pc, #540	; (adr r3, 800b230 <__ieee754_asin+0x2f8>)
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f7f5 f938 	bl	800028c <__adddf3>
 800b01c:	4622      	mov	r2, r4
 800b01e:	462b      	mov	r3, r5
 800b020:	f7f5 faea 	bl	80005f8 <__aeabi_dmul>
 800b024:	a384      	add	r3, pc, #528	; (adr r3, 800b238 <__ieee754_asin+0x300>)
 800b026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02a:	f7f5 f92d 	bl	8000288 <__aeabi_dsub>
 800b02e:	4622      	mov	r2, r4
 800b030:	462b      	mov	r3, r5
 800b032:	f7f5 fae1 	bl	80005f8 <__aeabi_dmul>
 800b036:	a382      	add	r3, pc, #520	; (adr r3, 800b240 <__ieee754_asin+0x308>)
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f7f5 f926 	bl	800028c <__adddf3>
 800b040:	4622      	mov	r2, r4
 800b042:	462b      	mov	r3, r5
 800b044:	f7f5 fad8 	bl	80005f8 <__aeabi_dmul>
 800b048:	a37f      	add	r3, pc, #508	; (adr r3, 800b248 <__ieee754_asin+0x310>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 f91b 	bl	8000288 <__aeabi_dsub>
 800b052:	4622      	mov	r2, r4
 800b054:	462b      	mov	r3, r5
 800b056:	f7f5 facf 	bl	80005f8 <__aeabi_dmul>
 800b05a:	a37d      	add	r3, pc, #500	; (adr r3, 800b250 <__ieee754_asin+0x318>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 f914 	bl	800028c <__adddf3>
 800b064:	4622      	mov	r2, r4
 800b066:	462b      	mov	r3, r5
 800b068:	f7f5 fac6 	bl	80005f8 <__aeabi_dmul>
 800b06c:	a37a      	add	r3, pc, #488	; (adr r3, 800b258 <__ieee754_asin+0x320>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	ec41 0b18 	vmov	d8, r0, r1
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 fabd 	bl	80005f8 <__aeabi_dmul>
 800b07e:	a378      	add	r3, pc, #480	; (adr r3, 800b260 <__ieee754_asin+0x328>)
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	f7f5 f900 	bl	8000288 <__aeabi_dsub>
 800b088:	4622      	mov	r2, r4
 800b08a:	462b      	mov	r3, r5
 800b08c:	f7f5 fab4 	bl	80005f8 <__aeabi_dmul>
 800b090:	a375      	add	r3, pc, #468	; (adr r3, 800b268 <__ieee754_asin+0x330>)
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f7f5 f8f9 	bl	800028c <__adddf3>
 800b09a:	4622      	mov	r2, r4
 800b09c:	462b      	mov	r3, r5
 800b09e:	f7f5 faab 	bl	80005f8 <__aeabi_dmul>
 800b0a2:	a373      	add	r3, pc, #460	; (adr r3, 800b270 <__ieee754_asin+0x338>)
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f7f5 f8ee 	bl	8000288 <__aeabi_dsub>
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	462b      	mov	r3, r5
 800b0b0:	f7f5 faa2 	bl	80005f8 <__aeabi_dmul>
 800b0b4:	4b72      	ldr	r3, [pc, #456]	; (800b280 <__ieee754_asin+0x348>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f7f5 f8e8 	bl	800028c <__adddf3>
 800b0bc:	ec45 4b10 	vmov	d0, r4, r5
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	f001 f888 	bl	800c1d8 <__ieee754_sqrt>
 800b0c8:	4b6f      	ldr	r3, [pc, #444]	; (800b288 <__ieee754_asin+0x350>)
 800b0ca:	4598      	cmp	r8, r3
 800b0cc:	ec5b ab10 	vmov	sl, fp, d0
 800b0d0:	f340 80dc 	ble.w	800b28c <__ieee754_asin+0x354>
 800b0d4:	4632      	mov	r2, r6
 800b0d6:	463b      	mov	r3, r7
 800b0d8:	ec51 0b18 	vmov	r0, r1, d8
 800b0dc:	f7f5 fbb6 	bl	800084c <__aeabi_ddiv>
 800b0e0:	4652      	mov	r2, sl
 800b0e2:	465b      	mov	r3, fp
 800b0e4:	f7f5 fa88 	bl	80005f8 <__aeabi_dmul>
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	465b      	mov	r3, fp
 800b0ec:	f7f5 f8ce 	bl	800028c <__adddf3>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	f7f5 f8ca 	bl	800028c <__adddf3>
 800b0f8:	a347      	add	r3, pc, #284	; (adr r3, 800b218 <__ieee754_asin+0x2e0>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f7f5 f8c3 	bl	8000288 <__aeabi_dsub>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	a142      	add	r1, pc, #264	; (adr r1, 800b210 <__ieee754_asin+0x2d8>)
 800b108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b10c:	f7f5 f8bc 	bl	8000288 <__aeabi_dsub>
 800b110:	9b01      	ldr	r3, [sp, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	bfdc      	itt	le
 800b116:	4602      	movle	r2, r0
 800b118:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b11c:	4604      	mov	r4, r0
 800b11e:	460d      	mov	r5, r1
 800b120:	bfdc      	itt	le
 800b122:	4614      	movle	r4, r2
 800b124:	461d      	movle	r5, r3
 800b126:	e743      	b.n	800afb0 <__ieee754_asin+0x78>
 800b128:	ee10 2a10 	vmov	r2, s0
 800b12c:	ee10 0a10 	vmov	r0, s0
 800b130:	462b      	mov	r3, r5
 800b132:	4629      	mov	r1, r5
 800b134:	f7f5 fa60 	bl	80005f8 <__aeabi_dmul>
 800b138:	a33b      	add	r3, pc, #236	; (adr r3, 800b228 <__ieee754_asin+0x2f0>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	4606      	mov	r6, r0
 800b140:	460f      	mov	r7, r1
 800b142:	f7f5 fa59 	bl	80005f8 <__aeabi_dmul>
 800b146:	a33a      	add	r3, pc, #232	; (adr r3, 800b230 <__ieee754_asin+0x2f8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 f89e 	bl	800028c <__adddf3>
 800b150:	4632      	mov	r2, r6
 800b152:	463b      	mov	r3, r7
 800b154:	f7f5 fa50 	bl	80005f8 <__aeabi_dmul>
 800b158:	a337      	add	r3, pc, #220	; (adr r3, 800b238 <__ieee754_asin+0x300>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 f893 	bl	8000288 <__aeabi_dsub>
 800b162:	4632      	mov	r2, r6
 800b164:	463b      	mov	r3, r7
 800b166:	f7f5 fa47 	bl	80005f8 <__aeabi_dmul>
 800b16a:	a335      	add	r3, pc, #212	; (adr r3, 800b240 <__ieee754_asin+0x308>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 f88c 	bl	800028c <__adddf3>
 800b174:	4632      	mov	r2, r6
 800b176:	463b      	mov	r3, r7
 800b178:	f7f5 fa3e 	bl	80005f8 <__aeabi_dmul>
 800b17c:	a332      	add	r3, pc, #200	; (adr r3, 800b248 <__ieee754_asin+0x310>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f5 f881 	bl	8000288 <__aeabi_dsub>
 800b186:	4632      	mov	r2, r6
 800b188:	463b      	mov	r3, r7
 800b18a:	f7f5 fa35 	bl	80005f8 <__aeabi_dmul>
 800b18e:	a330      	add	r3, pc, #192	; (adr r3, 800b250 <__ieee754_asin+0x318>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f7f5 f87a 	bl	800028c <__adddf3>
 800b198:	4632      	mov	r2, r6
 800b19a:	463b      	mov	r3, r7
 800b19c:	f7f5 fa2c 	bl	80005f8 <__aeabi_dmul>
 800b1a0:	a32d      	add	r3, pc, #180	; (adr r3, 800b258 <__ieee754_asin+0x320>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	4689      	mov	r9, r1
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	f7f5 fa23 	bl	80005f8 <__aeabi_dmul>
 800b1b2:	a32b      	add	r3, pc, #172	; (adr r3, 800b260 <__ieee754_asin+0x328>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f866 	bl	8000288 <__aeabi_dsub>
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	f7f5 fa1a 	bl	80005f8 <__aeabi_dmul>
 800b1c4:	a328      	add	r3, pc, #160	; (adr r3, 800b268 <__ieee754_asin+0x330>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f7f5 f85f 	bl	800028c <__adddf3>
 800b1ce:	4632      	mov	r2, r6
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	f7f5 fa11 	bl	80005f8 <__aeabi_dmul>
 800b1d6:	a326      	add	r3, pc, #152	; (adr r3, 800b270 <__ieee754_asin+0x338>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f7f5 f854 	bl	8000288 <__aeabi_dsub>
 800b1e0:	4632      	mov	r2, r6
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	f7f5 fa08 	bl	80005f8 <__aeabi_dmul>
 800b1e8:	4b25      	ldr	r3, [pc, #148]	; (800b280 <__ieee754_asin+0x348>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f7f5 f84e 	bl	800028c <__adddf3>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	f7f5 fb28 	bl	800084c <__aeabi_ddiv>
 800b1fc:	4622      	mov	r2, r4
 800b1fe:	462b      	mov	r3, r5
 800b200:	f7f5 f9fa 	bl	80005f8 <__aeabi_dmul>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	4620      	mov	r0, r4
 800b20a:	4629      	mov	r1, r5
 800b20c:	e6bf      	b.n	800af8e <__ieee754_asin+0x56>
 800b20e:	bf00      	nop
 800b210:	54442d18 	.word	0x54442d18
 800b214:	3ff921fb 	.word	0x3ff921fb
 800b218:	33145c07 	.word	0x33145c07
 800b21c:	3c91a626 	.word	0x3c91a626
 800b220:	8800759c 	.word	0x8800759c
 800b224:	7e37e43c 	.word	0x7e37e43c
 800b228:	0dfdf709 	.word	0x0dfdf709
 800b22c:	3f023de1 	.word	0x3f023de1
 800b230:	7501b288 	.word	0x7501b288
 800b234:	3f49efe0 	.word	0x3f49efe0
 800b238:	b5688f3b 	.word	0xb5688f3b
 800b23c:	3fa48228 	.word	0x3fa48228
 800b240:	0e884455 	.word	0x0e884455
 800b244:	3fc9c155 	.word	0x3fc9c155
 800b248:	03eb6f7d 	.word	0x03eb6f7d
 800b24c:	3fd4d612 	.word	0x3fd4d612
 800b250:	55555555 	.word	0x55555555
 800b254:	3fc55555 	.word	0x3fc55555
 800b258:	b12e9282 	.word	0xb12e9282
 800b25c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b260:	1b8d0159 	.word	0x1b8d0159
 800b264:	3fe6066c 	.word	0x3fe6066c
 800b268:	9c598ac8 	.word	0x9c598ac8
 800b26c:	40002ae5 	.word	0x40002ae5
 800b270:	1c8a2d4b 	.word	0x1c8a2d4b
 800b274:	40033a27 	.word	0x40033a27
 800b278:	3fefffff 	.word	0x3fefffff
 800b27c:	3fdfffff 	.word	0x3fdfffff
 800b280:	3ff00000 	.word	0x3ff00000
 800b284:	3fe00000 	.word	0x3fe00000
 800b288:	3fef3332 	.word	0x3fef3332
 800b28c:	ee10 2a10 	vmov	r2, s0
 800b290:	ee10 0a10 	vmov	r0, s0
 800b294:	465b      	mov	r3, fp
 800b296:	4659      	mov	r1, fp
 800b298:	f7f4 fff8 	bl	800028c <__adddf3>
 800b29c:	4632      	mov	r2, r6
 800b29e:	463b      	mov	r3, r7
 800b2a0:	ec41 0b19 	vmov	d9, r0, r1
 800b2a4:	ec51 0b18 	vmov	r0, r1, d8
 800b2a8:	f7f5 fad0 	bl	800084c <__aeabi_ddiv>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	ec51 0b19 	vmov	r0, r1, d9
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	f04f 0800 	mov.w	r8, #0
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460f      	mov	r7, r1
 800b2c0:	4642      	mov	r2, r8
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	4659      	mov	r1, fp
 800b2c8:	f7f5 f996 	bl	80005f8 <__aeabi_dmul>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	f7f4 ffd8 	bl	8000288 <__aeabi_dsub>
 800b2d8:	4642      	mov	r2, r8
 800b2da:	4604      	mov	r4, r0
 800b2dc:	460d      	mov	r5, r1
 800b2de:	465b      	mov	r3, fp
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	4659      	mov	r1, fp
 800b2e4:	f7f4 ffd2 	bl	800028c <__adddf3>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	f7f5 faac 	bl	800084c <__aeabi_ddiv>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	f7f4 ffc8 	bl	800028c <__adddf3>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	a113      	add	r1, pc, #76	; (adr r1, 800b350 <__ieee754_asin+0x418>)
 800b302:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b306:	f7f4 ffbf 	bl	8000288 <__aeabi_dsub>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4630      	mov	r0, r6
 800b310:	4639      	mov	r1, r7
 800b312:	f7f4 ffb9 	bl	8000288 <__aeabi_dsub>
 800b316:	4642      	mov	r2, r8
 800b318:	4604      	mov	r4, r0
 800b31a:	460d      	mov	r5, r1
 800b31c:	465b      	mov	r3, fp
 800b31e:	4640      	mov	r0, r8
 800b320:	4659      	mov	r1, fp
 800b322:	f7f4 ffb3 	bl	800028c <__adddf3>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	a10b      	add	r1, pc, #44	; (adr r1, 800b358 <__ieee754_asin+0x420>)
 800b32c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b330:	f7f4 ffaa 	bl	8000288 <__aeabi_dsub>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4620      	mov	r0, r4
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f4 ffa4 	bl	8000288 <__aeabi_dsub>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	a104      	add	r1, pc, #16	; (adr r1, 800b358 <__ieee754_asin+0x420>)
 800b346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b34a:	e6df      	b.n	800b10c <__ieee754_asin+0x1d4>
 800b34c:	f3af 8000 	nop.w
 800b350:	33145c07 	.word	0x33145c07
 800b354:	3c91a626 	.word	0x3c91a626
 800b358:	54442d18 	.word	0x54442d18
 800b35c:	3fe921fb 	.word	0x3fe921fb

0800b360 <__ieee754_pow>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	ed2d 8b06 	vpush	{d8-d10}
 800b368:	b089      	sub	sp, #36	; 0x24
 800b36a:	ed8d 1b00 	vstr	d1, [sp]
 800b36e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b372:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b376:	ea58 0102 	orrs.w	r1, r8, r2
 800b37a:	ec57 6b10 	vmov	r6, r7, d0
 800b37e:	d115      	bne.n	800b3ac <__ieee754_pow+0x4c>
 800b380:	19b3      	adds	r3, r6, r6
 800b382:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b386:	4152      	adcs	r2, r2
 800b388:	4299      	cmp	r1, r3
 800b38a:	4b89      	ldr	r3, [pc, #548]	; (800b5b0 <__ieee754_pow+0x250>)
 800b38c:	4193      	sbcs	r3, r2
 800b38e:	f080 84d2 	bcs.w	800bd36 <__ieee754_pow+0x9d6>
 800b392:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b396:	4630      	mov	r0, r6
 800b398:	4639      	mov	r1, r7
 800b39a:	f7f4 ff77 	bl	800028c <__adddf3>
 800b39e:	ec41 0b10 	vmov	d0, r0, r1
 800b3a2:	b009      	add	sp, #36	; 0x24
 800b3a4:	ecbd 8b06 	vpop	{d8-d10}
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	4b81      	ldr	r3, [pc, #516]	; (800b5b4 <__ieee754_pow+0x254>)
 800b3ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b3b2:	429c      	cmp	r4, r3
 800b3b4:	ee10 aa10 	vmov	sl, s0
 800b3b8:	463d      	mov	r5, r7
 800b3ba:	dc06      	bgt.n	800b3ca <__ieee754_pow+0x6a>
 800b3bc:	d101      	bne.n	800b3c2 <__ieee754_pow+0x62>
 800b3be:	2e00      	cmp	r6, #0
 800b3c0:	d1e7      	bne.n	800b392 <__ieee754_pow+0x32>
 800b3c2:	4598      	cmp	r8, r3
 800b3c4:	dc01      	bgt.n	800b3ca <__ieee754_pow+0x6a>
 800b3c6:	d10f      	bne.n	800b3e8 <__ieee754_pow+0x88>
 800b3c8:	b172      	cbz	r2, 800b3e8 <__ieee754_pow+0x88>
 800b3ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b3ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b3d2:	ea55 050a 	orrs.w	r5, r5, sl
 800b3d6:	d1dc      	bne.n	800b392 <__ieee754_pow+0x32>
 800b3d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3dc:	18db      	adds	r3, r3, r3
 800b3de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b3e2:	4152      	adcs	r2, r2
 800b3e4:	429d      	cmp	r5, r3
 800b3e6:	e7d0      	b.n	800b38a <__ieee754_pow+0x2a>
 800b3e8:	2d00      	cmp	r5, #0
 800b3ea:	da3b      	bge.n	800b464 <__ieee754_pow+0x104>
 800b3ec:	4b72      	ldr	r3, [pc, #456]	; (800b5b8 <__ieee754_pow+0x258>)
 800b3ee:	4598      	cmp	r8, r3
 800b3f0:	dc51      	bgt.n	800b496 <__ieee754_pow+0x136>
 800b3f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b3f6:	4598      	cmp	r8, r3
 800b3f8:	f340 84ac 	ble.w	800bd54 <__ieee754_pow+0x9f4>
 800b3fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b400:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b404:	2b14      	cmp	r3, #20
 800b406:	dd0f      	ble.n	800b428 <__ieee754_pow+0xc8>
 800b408:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b40c:	fa22 f103 	lsr.w	r1, r2, r3
 800b410:	fa01 f303 	lsl.w	r3, r1, r3
 800b414:	4293      	cmp	r3, r2
 800b416:	f040 849d 	bne.w	800bd54 <__ieee754_pow+0x9f4>
 800b41a:	f001 0101 	and.w	r1, r1, #1
 800b41e:	f1c1 0302 	rsb	r3, r1, #2
 800b422:	9304      	str	r3, [sp, #16]
 800b424:	b182      	cbz	r2, 800b448 <__ieee754_pow+0xe8>
 800b426:	e05f      	b.n	800b4e8 <__ieee754_pow+0x188>
 800b428:	2a00      	cmp	r2, #0
 800b42a:	d15b      	bne.n	800b4e4 <__ieee754_pow+0x184>
 800b42c:	f1c3 0314 	rsb	r3, r3, #20
 800b430:	fa48 f103 	asr.w	r1, r8, r3
 800b434:	fa01 f303 	lsl.w	r3, r1, r3
 800b438:	4543      	cmp	r3, r8
 800b43a:	f040 8488 	bne.w	800bd4e <__ieee754_pow+0x9ee>
 800b43e:	f001 0101 	and.w	r1, r1, #1
 800b442:	f1c1 0302 	rsb	r3, r1, #2
 800b446:	9304      	str	r3, [sp, #16]
 800b448:	4b5c      	ldr	r3, [pc, #368]	; (800b5bc <__ieee754_pow+0x25c>)
 800b44a:	4598      	cmp	r8, r3
 800b44c:	d132      	bne.n	800b4b4 <__ieee754_pow+0x154>
 800b44e:	f1b9 0f00 	cmp.w	r9, #0
 800b452:	f280 8478 	bge.w	800bd46 <__ieee754_pow+0x9e6>
 800b456:	4959      	ldr	r1, [pc, #356]	; (800b5bc <__ieee754_pow+0x25c>)
 800b458:	4632      	mov	r2, r6
 800b45a:	463b      	mov	r3, r7
 800b45c:	2000      	movs	r0, #0
 800b45e:	f7f5 f9f5 	bl	800084c <__aeabi_ddiv>
 800b462:	e79c      	b.n	800b39e <__ieee754_pow+0x3e>
 800b464:	2300      	movs	r3, #0
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	2a00      	cmp	r2, #0
 800b46a:	d13d      	bne.n	800b4e8 <__ieee754_pow+0x188>
 800b46c:	4b51      	ldr	r3, [pc, #324]	; (800b5b4 <__ieee754_pow+0x254>)
 800b46e:	4598      	cmp	r8, r3
 800b470:	d1ea      	bne.n	800b448 <__ieee754_pow+0xe8>
 800b472:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b476:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b47a:	ea53 030a 	orrs.w	r3, r3, sl
 800b47e:	f000 845a 	beq.w	800bd36 <__ieee754_pow+0x9d6>
 800b482:	4b4f      	ldr	r3, [pc, #316]	; (800b5c0 <__ieee754_pow+0x260>)
 800b484:	429c      	cmp	r4, r3
 800b486:	dd08      	ble.n	800b49a <__ieee754_pow+0x13a>
 800b488:	f1b9 0f00 	cmp.w	r9, #0
 800b48c:	f2c0 8457 	blt.w	800bd3e <__ieee754_pow+0x9de>
 800b490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b494:	e783      	b.n	800b39e <__ieee754_pow+0x3e>
 800b496:	2302      	movs	r3, #2
 800b498:	e7e5      	b.n	800b466 <__ieee754_pow+0x106>
 800b49a:	f1b9 0f00 	cmp.w	r9, #0
 800b49e:	f04f 0000 	mov.w	r0, #0
 800b4a2:	f04f 0100 	mov.w	r1, #0
 800b4a6:	f6bf af7a 	bge.w	800b39e <__ieee754_pow+0x3e>
 800b4aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b4ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b4b2:	e774      	b.n	800b39e <__ieee754_pow+0x3e>
 800b4b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b4b8:	d106      	bne.n	800b4c8 <__ieee754_pow+0x168>
 800b4ba:	4632      	mov	r2, r6
 800b4bc:	463b      	mov	r3, r7
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f5 f899 	bl	80005f8 <__aeabi_dmul>
 800b4c6:	e76a      	b.n	800b39e <__ieee754_pow+0x3e>
 800b4c8:	4b3e      	ldr	r3, [pc, #248]	; (800b5c4 <__ieee754_pow+0x264>)
 800b4ca:	4599      	cmp	r9, r3
 800b4cc:	d10c      	bne.n	800b4e8 <__ieee754_pow+0x188>
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	db0a      	blt.n	800b4e8 <__ieee754_pow+0x188>
 800b4d2:	ec47 6b10 	vmov	d0, r6, r7
 800b4d6:	b009      	add	sp, #36	; 0x24
 800b4d8:	ecbd 8b06 	vpop	{d8-d10}
 800b4dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	f000 be7a 	b.w	800c1d8 <__ieee754_sqrt>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9304      	str	r3, [sp, #16]
 800b4e8:	ec47 6b10 	vmov	d0, r6, r7
 800b4ec:	f001 ff20 	bl	800d330 <fabs>
 800b4f0:	ec51 0b10 	vmov	r0, r1, d0
 800b4f4:	f1ba 0f00 	cmp.w	sl, #0
 800b4f8:	d129      	bne.n	800b54e <__ieee754_pow+0x1ee>
 800b4fa:	b124      	cbz	r4, 800b506 <__ieee754_pow+0x1a6>
 800b4fc:	4b2f      	ldr	r3, [pc, #188]	; (800b5bc <__ieee754_pow+0x25c>)
 800b4fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b502:	429a      	cmp	r2, r3
 800b504:	d123      	bne.n	800b54e <__ieee754_pow+0x1ee>
 800b506:	f1b9 0f00 	cmp.w	r9, #0
 800b50a:	da05      	bge.n	800b518 <__ieee754_pow+0x1b8>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	2000      	movs	r0, #0
 800b512:	492a      	ldr	r1, [pc, #168]	; (800b5bc <__ieee754_pow+0x25c>)
 800b514:	f7f5 f99a 	bl	800084c <__aeabi_ddiv>
 800b518:	2d00      	cmp	r5, #0
 800b51a:	f6bf af40 	bge.w	800b39e <__ieee754_pow+0x3e>
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b524:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b528:	4323      	orrs	r3, r4
 800b52a:	d108      	bne.n	800b53e <__ieee754_pow+0x1de>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4610      	mov	r0, r2
 800b532:	4619      	mov	r1, r3
 800b534:	f7f4 fea8 	bl	8000288 <__aeabi_dsub>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	e78f      	b.n	800b45e <__ieee754_pow+0xfe>
 800b53e:	9b04      	ldr	r3, [sp, #16]
 800b540:	2b01      	cmp	r3, #1
 800b542:	f47f af2c 	bne.w	800b39e <__ieee754_pow+0x3e>
 800b546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b54a:	4619      	mov	r1, r3
 800b54c:	e727      	b.n	800b39e <__ieee754_pow+0x3e>
 800b54e:	0feb      	lsrs	r3, r5, #31
 800b550:	3b01      	subs	r3, #1
 800b552:	9306      	str	r3, [sp, #24]
 800b554:	9a06      	ldr	r2, [sp, #24]
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	4313      	orrs	r3, r2
 800b55a:	d102      	bne.n	800b562 <__ieee754_pow+0x202>
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	e7e6      	b.n	800b530 <__ieee754_pow+0x1d0>
 800b562:	4b19      	ldr	r3, [pc, #100]	; (800b5c8 <__ieee754_pow+0x268>)
 800b564:	4598      	cmp	r8, r3
 800b566:	f340 80fb 	ble.w	800b760 <__ieee754_pow+0x400>
 800b56a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b56e:	4598      	cmp	r8, r3
 800b570:	4b13      	ldr	r3, [pc, #76]	; (800b5c0 <__ieee754_pow+0x260>)
 800b572:	dd0c      	ble.n	800b58e <__ieee754_pow+0x22e>
 800b574:	429c      	cmp	r4, r3
 800b576:	dc0f      	bgt.n	800b598 <__ieee754_pow+0x238>
 800b578:	f1b9 0f00 	cmp.w	r9, #0
 800b57c:	da0f      	bge.n	800b59e <__ieee754_pow+0x23e>
 800b57e:	2000      	movs	r0, #0
 800b580:	b009      	add	sp, #36	; 0x24
 800b582:	ecbd 8b06 	vpop	{d8-d10}
 800b586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58a:	f001 bea6 	b.w	800d2da <__math_oflow>
 800b58e:	429c      	cmp	r4, r3
 800b590:	dbf2      	blt.n	800b578 <__ieee754_pow+0x218>
 800b592:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <__ieee754_pow+0x25c>)
 800b594:	429c      	cmp	r4, r3
 800b596:	dd19      	ble.n	800b5cc <__ieee754_pow+0x26c>
 800b598:	f1b9 0f00 	cmp.w	r9, #0
 800b59c:	dcef      	bgt.n	800b57e <__ieee754_pow+0x21e>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	b009      	add	sp, #36	; 0x24
 800b5a2:	ecbd 8b06 	vpop	{d8-d10}
 800b5a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5aa:	f001 be8d 	b.w	800d2c8 <__math_uflow>
 800b5ae:	bf00      	nop
 800b5b0:	fff00000 	.word	0xfff00000
 800b5b4:	7ff00000 	.word	0x7ff00000
 800b5b8:	433fffff 	.word	0x433fffff
 800b5bc:	3ff00000 	.word	0x3ff00000
 800b5c0:	3fefffff 	.word	0x3fefffff
 800b5c4:	3fe00000 	.word	0x3fe00000
 800b5c8:	41e00000 	.word	0x41e00000
 800b5cc:	4b60      	ldr	r3, [pc, #384]	; (800b750 <__ieee754_pow+0x3f0>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f7f4 fe5a 	bl	8000288 <__aeabi_dsub>
 800b5d4:	a354      	add	r3, pc, #336	; (adr r3, 800b728 <__ieee754_pow+0x3c8>)
 800b5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5da:	4604      	mov	r4, r0
 800b5dc:	460d      	mov	r5, r1
 800b5de:	f7f5 f80b 	bl	80005f8 <__aeabi_dmul>
 800b5e2:	a353      	add	r3, pc, #332	; (adr r3, 800b730 <__ieee754_pow+0x3d0>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	460f      	mov	r7, r1
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	4b57      	ldr	r3, [pc, #348]	; (800b754 <__ieee754_pow+0x3f4>)
 800b5f6:	4682      	mov	sl, r0
 800b5f8:	468b      	mov	fp, r1
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	f7f4 fffa 	bl	80005f8 <__aeabi_dmul>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	a14b      	add	r1, pc, #300	; (adr r1, 800b738 <__ieee754_pow+0x3d8>)
 800b60a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b60e:	f7f4 fe3b 	bl	8000288 <__aeabi_dsub>
 800b612:	4622      	mov	r2, r4
 800b614:	462b      	mov	r3, r5
 800b616:	f7f4 ffef 	bl	80005f8 <__aeabi_dmul>
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	2000      	movs	r0, #0
 800b620:	494d      	ldr	r1, [pc, #308]	; (800b758 <__ieee754_pow+0x3f8>)
 800b622:	f7f4 fe31 	bl	8000288 <__aeabi_dsub>
 800b626:	4622      	mov	r2, r4
 800b628:	4680      	mov	r8, r0
 800b62a:	4689      	mov	r9, r1
 800b62c:	462b      	mov	r3, r5
 800b62e:	4620      	mov	r0, r4
 800b630:	4629      	mov	r1, r5
 800b632:	f7f4 ffe1 	bl	80005f8 <__aeabi_dmul>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 ffdb 	bl	80005f8 <__aeabi_dmul>
 800b642:	a33f      	add	r3, pc, #252	; (adr r3, 800b740 <__ieee754_pow+0x3e0>)
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	f7f4 ffd6 	bl	80005f8 <__aeabi_dmul>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4650      	mov	r0, sl
 800b652:	4659      	mov	r1, fp
 800b654:	f7f4 fe18 	bl	8000288 <__aeabi_dsub>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4680      	mov	r8, r0
 800b65e:	4689      	mov	r9, r1
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f4 fe12 	bl	800028c <__adddf3>
 800b668:	2000      	movs	r0, #0
 800b66a:	4632      	mov	r2, r6
 800b66c:	463b      	mov	r3, r7
 800b66e:	4604      	mov	r4, r0
 800b670:	460d      	mov	r5, r1
 800b672:	f7f4 fe09 	bl	8000288 <__aeabi_dsub>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	4640      	mov	r0, r8
 800b67c:	4649      	mov	r1, r9
 800b67e:	f7f4 fe03 	bl	8000288 <__aeabi_dsub>
 800b682:	9b04      	ldr	r3, [sp, #16]
 800b684:	9a06      	ldr	r2, [sp, #24]
 800b686:	3b01      	subs	r3, #1
 800b688:	4313      	orrs	r3, r2
 800b68a:	4682      	mov	sl, r0
 800b68c:	468b      	mov	fp, r1
 800b68e:	f040 81e7 	bne.w	800ba60 <__ieee754_pow+0x700>
 800b692:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b748 <__ieee754_pow+0x3e8>
 800b696:	eeb0 8a47 	vmov.f32	s16, s14
 800b69a:	eef0 8a67 	vmov.f32	s17, s15
 800b69e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6a2:	2600      	movs	r6, #0
 800b6a4:	4632      	mov	r2, r6
 800b6a6:	463b      	mov	r3, r7
 800b6a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6ac:	f7f4 fdec 	bl	8000288 <__aeabi_dsub>
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	462b      	mov	r3, r5
 800b6b4:	f7f4 ffa0 	bl	80005f8 <__aeabi_dmul>
 800b6b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6bc:	4680      	mov	r8, r0
 800b6be:	4689      	mov	r9, r1
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	4659      	mov	r1, fp
 800b6c4:	f7f4 ff98 	bl	80005f8 <__aeabi_dmul>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	f7f4 fddc 	bl	800028c <__adddf3>
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	463b      	mov	r3, r7
 800b6d8:	4680      	mov	r8, r0
 800b6da:	4689      	mov	r9, r1
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f4 ff8a 	bl	80005f8 <__aeabi_dmul>
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	f7f4 fdcc 	bl	800028c <__adddf3>
 800b6f4:	4b19      	ldr	r3, [pc, #100]	; (800b75c <__ieee754_pow+0x3fc>)
 800b6f6:	4299      	cmp	r1, r3
 800b6f8:	ec45 4b19 	vmov	d9, r4, r5
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	468b      	mov	fp, r1
 800b702:	f340 82f1 	ble.w	800bce8 <__ieee754_pow+0x988>
 800b706:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b70a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b70e:	4303      	orrs	r3, r0
 800b710:	f000 81e4 	beq.w	800badc <__ieee754_pow+0x77c>
 800b714:	ec51 0b18 	vmov	r0, r1, d8
 800b718:	2200      	movs	r2, #0
 800b71a:	2300      	movs	r3, #0
 800b71c:	f7f5 f9de 	bl	8000adc <__aeabi_dcmplt>
 800b720:	3800      	subs	r0, #0
 800b722:	bf18      	it	ne
 800b724:	2001      	movne	r0, #1
 800b726:	e72b      	b.n	800b580 <__ieee754_pow+0x220>
 800b728:	60000000 	.word	0x60000000
 800b72c:	3ff71547 	.word	0x3ff71547
 800b730:	f85ddf44 	.word	0xf85ddf44
 800b734:	3e54ae0b 	.word	0x3e54ae0b
 800b738:	55555555 	.word	0x55555555
 800b73c:	3fd55555 	.word	0x3fd55555
 800b740:	652b82fe 	.word	0x652b82fe
 800b744:	3ff71547 	.word	0x3ff71547
 800b748:	00000000 	.word	0x00000000
 800b74c:	bff00000 	.word	0xbff00000
 800b750:	3ff00000 	.word	0x3ff00000
 800b754:	3fd00000 	.word	0x3fd00000
 800b758:	3fe00000 	.word	0x3fe00000
 800b75c:	408fffff 	.word	0x408fffff
 800b760:	4bd5      	ldr	r3, [pc, #852]	; (800bab8 <__ieee754_pow+0x758>)
 800b762:	402b      	ands	r3, r5
 800b764:	2200      	movs	r2, #0
 800b766:	b92b      	cbnz	r3, 800b774 <__ieee754_pow+0x414>
 800b768:	4bd4      	ldr	r3, [pc, #848]	; (800babc <__ieee754_pow+0x75c>)
 800b76a:	f7f4 ff45 	bl	80005f8 <__aeabi_dmul>
 800b76e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b772:	460c      	mov	r4, r1
 800b774:	1523      	asrs	r3, r4, #20
 800b776:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b77a:	4413      	add	r3, r2
 800b77c:	9305      	str	r3, [sp, #20]
 800b77e:	4bd0      	ldr	r3, [pc, #832]	; (800bac0 <__ieee754_pow+0x760>)
 800b780:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b784:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b788:	429c      	cmp	r4, r3
 800b78a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b78e:	dd08      	ble.n	800b7a2 <__ieee754_pow+0x442>
 800b790:	4bcc      	ldr	r3, [pc, #816]	; (800bac4 <__ieee754_pow+0x764>)
 800b792:	429c      	cmp	r4, r3
 800b794:	f340 8162 	ble.w	800ba5c <__ieee754_pow+0x6fc>
 800b798:	9b05      	ldr	r3, [sp, #20]
 800b79a:	3301      	adds	r3, #1
 800b79c:	9305      	str	r3, [sp, #20]
 800b79e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b7a2:	2400      	movs	r4, #0
 800b7a4:	00e3      	lsls	r3, r4, #3
 800b7a6:	9307      	str	r3, [sp, #28]
 800b7a8:	4bc7      	ldr	r3, [pc, #796]	; (800bac8 <__ieee754_pow+0x768>)
 800b7aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7ae:	ed93 7b00 	vldr	d7, [r3]
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	ec53 2b17 	vmov	r2, r3, d7
 800b7b8:	eeb0 9a47 	vmov.f32	s18, s14
 800b7bc:	eef0 9a67 	vmov.f32	s19, s15
 800b7c0:	4682      	mov	sl, r0
 800b7c2:	f7f4 fd61 	bl	8000288 <__aeabi_dsub>
 800b7c6:	4652      	mov	r2, sl
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	460f      	mov	r7, r1
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	ec51 0b19 	vmov	r0, r1, d9
 800b7d2:	f7f4 fd5b 	bl	800028c <__adddf3>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	2000      	movs	r0, #0
 800b7dc:	49bb      	ldr	r1, [pc, #748]	; (800bacc <__ieee754_pow+0x76c>)
 800b7de:	f7f5 f835 	bl	800084c <__aeabi_ddiv>
 800b7e2:	ec41 0b1a 	vmov	d10, r0, r1
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f4 ff03 	bl	80005f8 <__aeabi_dmul>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7f8:	9302      	str	r3, [sp, #8]
 800b7fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7fe:	46ab      	mov	fp, r5
 800b800:	106d      	asrs	r5, r5, #1
 800b802:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b806:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b80a:	ec41 0b18 	vmov	d8, r0, r1
 800b80e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b812:	2200      	movs	r2, #0
 800b814:	4640      	mov	r0, r8
 800b816:	4649      	mov	r1, r9
 800b818:	4614      	mov	r4, r2
 800b81a:	461d      	mov	r5, r3
 800b81c:	f7f4 feec 	bl	80005f8 <__aeabi_dmul>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4630      	mov	r0, r6
 800b826:	4639      	mov	r1, r7
 800b828:	f7f4 fd2e 	bl	8000288 <__aeabi_dsub>
 800b82c:	ec53 2b19 	vmov	r2, r3, d9
 800b830:	4606      	mov	r6, r0
 800b832:	460f      	mov	r7, r1
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	f7f4 fd26 	bl	8000288 <__aeabi_dsub>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4650      	mov	r0, sl
 800b842:	4659      	mov	r1, fp
 800b844:	f7f4 fd20 	bl	8000288 <__aeabi_dsub>
 800b848:	4642      	mov	r2, r8
 800b84a:	464b      	mov	r3, r9
 800b84c:	f7f4 fed4 	bl	80005f8 <__aeabi_dmul>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4630      	mov	r0, r6
 800b856:	4639      	mov	r1, r7
 800b858:	f7f4 fd16 	bl	8000288 <__aeabi_dsub>
 800b85c:	ec53 2b1a 	vmov	r2, r3, d10
 800b860:	f7f4 feca 	bl	80005f8 <__aeabi_dmul>
 800b864:	ec53 2b18 	vmov	r2, r3, d8
 800b868:	ec41 0b19 	vmov	d9, r0, r1
 800b86c:	ec51 0b18 	vmov	r0, r1, d8
 800b870:	f7f4 fec2 	bl	80005f8 <__aeabi_dmul>
 800b874:	a37c      	add	r3, pc, #496	; (adr r3, 800ba68 <__ieee754_pow+0x708>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	4604      	mov	r4, r0
 800b87c:	460d      	mov	r5, r1
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	a37b      	add	r3, pc, #492	; (adr r3, 800ba70 <__ieee754_pow+0x710>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 fd00 	bl	800028c <__adddf3>
 800b88c:	4622      	mov	r2, r4
 800b88e:	462b      	mov	r3, r5
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	a378      	add	r3, pc, #480	; (adr r3, 800ba78 <__ieee754_pow+0x718>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4622      	mov	r2, r4
 800b8a0:	462b      	mov	r3, r5
 800b8a2:	f7f4 fea9 	bl	80005f8 <__aeabi_dmul>
 800b8a6:	a376      	add	r3, pc, #472	; (adr r3, 800ba80 <__ieee754_pow+0x720>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f7f4 fcee 	bl	800028c <__adddf3>
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	462b      	mov	r3, r5
 800b8b4:	f7f4 fea0 	bl	80005f8 <__aeabi_dmul>
 800b8b8:	a373      	add	r3, pc, #460	; (adr r3, 800ba88 <__ieee754_pow+0x728>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f4 fce5 	bl	800028c <__adddf3>
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	f7f4 fe97 	bl	80005f8 <__aeabi_dmul>
 800b8ca:	a371      	add	r3, pc, #452	; (adr r3, 800ba90 <__ieee754_pow+0x730>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f7f4 fcdc 	bl	800028c <__adddf3>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	460f      	mov	r7, r1
 800b8da:	462b      	mov	r3, r5
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f4 fe8a 	bl	80005f8 <__aeabi_dmul>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	460d      	mov	r5, r1
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	ec51 0b18 	vmov	r0, r1, d8
 800b8fc:	f7f4 fcc6 	bl	800028c <__adddf3>
 800b900:	ec53 2b19 	vmov	r2, r3, d9
 800b904:	f7f4 fe78 	bl	80005f8 <__aeabi_dmul>
 800b908:	4622      	mov	r2, r4
 800b90a:	462b      	mov	r3, r5
 800b90c:	f7f4 fcbe 	bl	800028c <__adddf3>
 800b910:	4642      	mov	r2, r8
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	464b      	mov	r3, r9
 800b918:	4640      	mov	r0, r8
 800b91a:	4649      	mov	r1, r9
 800b91c:	f7f4 fe6c 	bl	80005f8 <__aeabi_dmul>
 800b920:	4b6b      	ldr	r3, [pc, #428]	; (800bad0 <__ieee754_pow+0x770>)
 800b922:	2200      	movs	r2, #0
 800b924:	4606      	mov	r6, r0
 800b926:	460f      	mov	r7, r1
 800b928:	f7f4 fcb0 	bl	800028c <__adddf3>
 800b92c:	4652      	mov	r2, sl
 800b92e:	465b      	mov	r3, fp
 800b930:	f7f4 fcac 	bl	800028c <__adddf3>
 800b934:	2000      	movs	r0, #0
 800b936:	4604      	mov	r4, r0
 800b938:	460d      	mov	r5, r1
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	4640      	mov	r0, r8
 800b940:	4649      	mov	r1, r9
 800b942:	f7f4 fe59 	bl	80005f8 <__aeabi_dmul>
 800b946:	4b62      	ldr	r3, [pc, #392]	; (800bad0 <__ieee754_pow+0x770>)
 800b948:	4680      	mov	r8, r0
 800b94a:	4689      	mov	r9, r1
 800b94c:	2200      	movs	r2, #0
 800b94e:	4620      	mov	r0, r4
 800b950:	4629      	mov	r1, r5
 800b952:	f7f4 fc99 	bl	8000288 <__aeabi_dsub>
 800b956:	4632      	mov	r2, r6
 800b958:	463b      	mov	r3, r7
 800b95a:	f7f4 fc95 	bl	8000288 <__aeabi_dsub>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4650      	mov	r0, sl
 800b964:	4659      	mov	r1, fp
 800b966:	f7f4 fc8f 	bl	8000288 <__aeabi_dsub>
 800b96a:	ec53 2b18 	vmov	r2, r3, d8
 800b96e:	f7f4 fe43 	bl	80005f8 <__aeabi_dmul>
 800b972:	4622      	mov	r2, r4
 800b974:	4606      	mov	r6, r0
 800b976:	460f      	mov	r7, r1
 800b978:	462b      	mov	r3, r5
 800b97a:	ec51 0b19 	vmov	r0, r1, d9
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4630      	mov	r0, r6
 800b988:	4639      	mov	r1, r7
 800b98a:	f7f4 fc7f 	bl	800028c <__adddf3>
 800b98e:	4606      	mov	r6, r0
 800b990:	460f      	mov	r7, r1
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4640      	mov	r0, r8
 800b998:	4649      	mov	r1, r9
 800b99a:	f7f4 fc77 	bl	800028c <__adddf3>
 800b99e:	a33e      	add	r3, pc, #248	; (adr r3, 800ba98 <__ieee754_pow+0x738>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	460d      	mov	r5, r1
 800b9aa:	f7f4 fe25 	bl	80005f8 <__aeabi_dmul>
 800b9ae:	4642      	mov	r2, r8
 800b9b0:	ec41 0b18 	vmov	d8, r0, r1
 800b9b4:	464b      	mov	r3, r9
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f7f4 fc65 	bl	8000288 <__aeabi_dsub>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	f7f4 fc5f 	bl	8000288 <__aeabi_dsub>
 800b9ca:	a335      	add	r3, pc, #212	; (adr r3, 800baa0 <__ieee754_pow+0x740>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fe12 	bl	80005f8 <__aeabi_dmul>
 800b9d4:	a334      	add	r3, pc, #208	; (adr r3, 800baa8 <__ieee754_pow+0x748>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	4606      	mov	r6, r0
 800b9dc:	460f      	mov	r7, r1
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f7f4 fe09 	bl	80005f8 <__aeabi_dmul>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	f7f4 fc4d 	bl	800028c <__adddf3>
 800b9f2:	9a07      	ldr	r2, [sp, #28]
 800b9f4:	4b37      	ldr	r3, [pc, #220]	; (800bad4 <__ieee754_pow+0x774>)
 800b9f6:	4413      	add	r3, r2
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f7f4 fc46 	bl	800028c <__adddf3>
 800ba00:	4682      	mov	sl, r0
 800ba02:	9805      	ldr	r0, [sp, #20]
 800ba04:	468b      	mov	fp, r1
 800ba06:	f7f4 fd8d 	bl	8000524 <__aeabi_i2d>
 800ba0a:	9a07      	ldr	r2, [sp, #28]
 800ba0c:	4b32      	ldr	r3, [pc, #200]	; (800bad8 <__ieee754_pow+0x778>)
 800ba0e:	4413      	add	r3, r2
 800ba10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba14:	4606      	mov	r6, r0
 800ba16:	460f      	mov	r7, r1
 800ba18:	4652      	mov	r2, sl
 800ba1a:	465b      	mov	r3, fp
 800ba1c:	ec51 0b18 	vmov	r0, r1, d8
 800ba20:	f7f4 fc34 	bl	800028c <__adddf3>
 800ba24:	4642      	mov	r2, r8
 800ba26:	464b      	mov	r3, r9
 800ba28:	f7f4 fc30 	bl	800028c <__adddf3>
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	463b      	mov	r3, r7
 800ba30:	f7f4 fc2c 	bl	800028c <__adddf3>
 800ba34:	2000      	movs	r0, #0
 800ba36:	4632      	mov	r2, r6
 800ba38:	463b      	mov	r3, r7
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	460d      	mov	r5, r1
 800ba3e:	f7f4 fc23 	bl	8000288 <__aeabi_dsub>
 800ba42:	4642      	mov	r2, r8
 800ba44:	464b      	mov	r3, r9
 800ba46:	f7f4 fc1f 	bl	8000288 <__aeabi_dsub>
 800ba4a:	ec53 2b18 	vmov	r2, r3, d8
 800ba4e:	f7f4 fc1b 	bl	8000288 <__aeabi_dsub>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4650      	mov	r0, sl
 800ba58:	4659      	mov	r1, fp
 800ba5a:	e610      	b.n	800b67e <__ieee754_pow+0x31e>
 800ba5c:	2401      	movs	r4, #1
 800ba5e:	e6a1      	b.n	800b7a4 <__ieee754_pow+0x444>
 800ba60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bab0 <__ieee754_pow+0x750>
 800ba64:	e617      	b.n	800b696 <__ieee754_pow+0x336>
 800ba66:	bf00      	nop
 800ba68:	4a454eef 	.word	0x4a454eef
 800ba6c:	3fca7e28 	.word	0x3fca7e28
 800ba70:	93c9db65 	.word	0x93c9db65
 800ba74:	3fcd864a 	.word	0x3fcd864a
 800ba78:	a91d4101 	.word	0xa91d4101
 800ba7c:	3fd17460 	.word	0x3fd17460
 800ba80:	518f264d 	.word	0x518f264d
 800ba84:	3fd55555 	.word	0x3fd55555
 800ba88:	db6fabff 	.word	0xdb6fabff
 800ba8c:	3fdb6db6 	.word	0x3fdb6db6
 800ba90:	33333303 	.word	0x33333303
 800ba94:	3fe33333 	.word	0x3fe33333
 800ba98:	e0000000 	.word	0xe0000000
 800ba9c:	3feec709 	.word	0x3feec709
 800baa0:	dc3a03fd 	.word	0xdc3a03fd
 800baa4:	3feec709 	.word	0x3feec709
 800baa8:	145b01f5 	.word	0x145b01f5
 800baac:	be3e2fe0 	.word	0xbe3e2fe0
 800bab0:	00000000 	.word	0x00000000
 800bab4:	3ff00000 	.word	0x3ff00000
 800bab8:	7ff00000 	.word	0x7ff00000
 800babc:	43400000 	.word	0x43400000
 800bac0:	0003988e 	.word	0x0003988e
 800bac4:	000bb679 	.word	0x000bb679
 800bac8:	0800d708 	.word	0x0800d708
 800bacc:	3ff00000 	.word	0x3ff00000
 800bad0:	40080000 	.word	0x40080000
 800bad4:	0800d728 	.word	0x0800d728
 800bad8:	0800d718 	.word	0x0800d718
 800badc:	a3b5      	add	r3, pc, #724	; (adr r3, 800bdb4 <__ieee754_pow+0xa54>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	4640      	mov	r0, r8
 800bae4:	4649      	mov	r1, r9
 800bae6:	f7f4 fbd1 	bl	800028c <__adddf3>
 800baea:	4622      	mov	r2, r4
 800baec:	ec41 0b1a 	vmov	d10, r0, r1
 800baf0:	462b      	mov	r3, r5
 800baf2:	4630      	mov	r0, r6
 800baf4:	4639      	mov	r1, r7
 800baf6:	f7f4 fbc7 	bl	8000288 <__aeabi_dsub>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	ec51 0b1a 	vmov	r0, r1, d10
 800bb02:	f7f5 f809 	bl	8000b18 <__aeabi_dcmpgt>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	f47f ae04 	bne.w	800b714 <__ieee754_pow+0x3b4>
 800bb0c:	4aa4      	ldr	r2, [pc, #656]	; (800bda0 <__ieee754_pow+0xa40>)
 800bb0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb12:	4293      	cmp	r3, r2
 800bb14:	f340 8108 	ble.w	800bd28 <__ieee754_pow+0x9c8>
 800bb18:	151b      	asrs	r3, r3, #20
 800bb1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bb1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bb22:	fa4a f303 	asr.w	r3, sl, r3
 800bb26:	445b      	add	r3, fp
 800bb28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bb2c:	4e9d      	ldr	r6, [pc, #628]	; (800bda4 <__ieee754_pow+0xa44>)
 800bb2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bb32:	4116      	asrs	r6, r2
 800bb34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bb38:	2000      	movs	r0, #0
 800bb3a:	ea23 0106 	bic.w	r1, r3, r6
 800bb3e:	f1c2 0214 	rsb	r2, r2, #20
 800bb42:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bb46:	fa4a fa02 	asr.w	sl, sl, r2
 800bb4a:	f1bb 0f00 	cmp.w	fp, #0
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4620      	mov	r0, r4
 800bb54:	4629      	mov	r1, r5
 800bb56:	bfb8      	it	lt
 800bb58:	f1ca 0a00 	rsblt	sl, sl, #0
 800bb5c:	f7f4 fb94 	bl	8000288 <__aeabi_dsub>
 800bb60:	ec41 0b19 	vmov	d9, r0, r1
 800bb64:	4642      	mov	r2, r8
 800bb66:	464b      	mov	r3, r9
 800bb68:	ec51 0b19 	vmov	r0, r1, d9
 800bb6c:	f7f4 fb8e 	bl	800028c <__adddf3>
 800bb70:	a37b      	add	r3, pc, #492	; (adr r3, 800bd60 <__ieee754_pow+0xa00>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	2000      	movs	r0, #0
 800bb78:	4604      	mov	r4, r0
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	ec53 2b19 	vmov	r2, r3, d9
 800bb84:	4606      	mov	r6, r0
 800bb86:	460f      	mov	r7, r1
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fb7c 	bl	8000288 <__aeabi_dsub>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4640      	mov	r0, r8
 800bb96:	4649      	mov	r1, r9
 800bb98:	f7f4 fb76 	bl	8000288 <__aeabi_dsub>
 800bb9c:	a372      	add	r3, pc, #456	; (adr r3, 800bd68 <__ieee754_pow+0xa08>)
 800bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba2:	f7f4 fd29 	bl	80005f8 <__aeabi_dmul>
 800bba6:	a372      	add	r3, pc, #456	; (adr r3, 800bd70 <__ieee754_pow+0xa10>)
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	4680      	mov	r8, r0
 800bbae:	4689      	mov	r9, r1
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f7f4 fd20 	bl	80005f8 <__aeabi_dmul>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4640      	mov	r0, r8
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	f7f4 fb64 	bl	800028c <__adddf3>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	460d      	mov	r5, r1
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4630      	mov	r0, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	f7f4 fb5c 	bl	800028c <__adddf3>
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	463b      	mov	r3, r7
 800bbd8:	4680      	mov	r8, r0
 800bbda:	4689      	mov	r9, r1
 800bbdc:	f7f4 fb54 	bl	8000288 <__aeabi_dsub>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	f7f4 fb4e 	bl	8000288 <__aeabi_dsub>
 800bbec:	4642      	mov	r2, r8
 800bbee:	4606      	mov	r6, r0
 800bbf0:	460f      	mov	r7, r1
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	f7f4 fcfe 	bl	80005f8 <__aeabi_dmul>
 800bbfc:	a35e      	add	r3, pc, #376	; (adr r3, 800bd78 <__ieee754_pow+0xa18>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	4604      	mov	r4, r0
 800bc04:	460d      	mov	r5, r1
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	a35d      	add	r3, pc, #372	; (adr r3, 800bd80 <__ieee754_pow+0xa20>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f7f4 fb3a 	bl	8000288 <__aeabi_dsub>
 800bc14:	4622      	mov	r2, r4
 800bc16:	462b      	mov	r3, r5
 800bc18:	f7f4 fcee 	bl	80005f8 <__aeabi_dmul>
 800bc1c:	a35a      	add	r3, pc, #360	; (adr r3, 800bd88 <__ieee754_pow+0xa28>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	f7f4 fb33 	bl	800028c <__adddf3>
 800bc26:	4622      	mov	r2, r4
 800bc28:	462b      	mov	r3, r5
 800bc2a:	f7f4 fce5 	bl	80005f8 <__aeabi_dmul>
 800bc2e:	a358      	add	r3, pc, #352	; (adr r3, 800bd90 <__ieee754_pow+0xa30>)
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fb28 	bl	8000288 <__aeabi_dsub>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	f7f4 fcdc 	bl	80005f8 <__aeabi_dmul>
 800bc40:	a355      	add	r3, pc, #340	; (adr r3, 800bd98 <__ieee754_pow+0xa38>)
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f7f4 fb21 	bl	800028c <__adddf3>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fcd3 	bl	80005f8 <__aeabi_dmul>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	4640      	mov	r0, r8
 800bc58:	4649      	mov	r1, r9
 800bc5a:	f7f4 fb15 	bl	8000288 <__aeabi_dsub>
 800bc5e:	4604      	mov	r4, r0
 800bc60:	460d      	mov	r5, r1
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4640      	mov	r0, r8
 800bc68:	4649      	mov	r1, r9
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	2200      	movs	r2, #0
 800bc70:	ec41 0b19 	vmov	d9, r0, r1
 800bc74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc78:	4620      	mov	r0, r4
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f7f4 fb04 	bl	8000288 <__aeabi_dsub>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	ec51 0b19 	vmov	r0, r1, d9
 800bc88:	f7f4 fde0 	bl	800084c <__aeabi_ddiv>
 800bc8c:	4632      	mov	r2, r6
 800bc8e:	4604      	mov	r4, r0
 800bc90:	460d      	mov	r5, r1
 800bc92:	463b      	mov	r3, r7
 800bc94:	4640      	mov	r0, r8
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7f4 fcae 	bl	80005f8 <__aeabi_dmul>
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	463b      	mov	r3, r7
 800bca0:	f7f4 faf4 	bl	800028c <__adddf3>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4620      	mov	r0, r4
 800bcaa:	4629      	mov	r1, r5
 800bcac:	f7f4 faec 	bl	8000288 <__aeabi_dsub>
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	f7f4 fae8 	bl	8000288 <__aeabi_dsub>
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4602      	mov	r2, r0
 800bcbc:	493a      	ldr	r1, [pc, #232]	; (800bda8 <__ieee754_pow+0xa48>)
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f7f4 fae2 	bl	8000288 <__aeabi_dsub>
 800bcc4:	ec41 0b10 	vmov	d0, r0, r1
 800bcc8:	ee10 3a90 	vmov	r3, s1
 800bccc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bcd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcd4:	da2b      	bge.n	800bd2e <__ieee754_pow+0x9ce>
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	f001 fbc6 	bl	800d468 <scalbn>
 800bcdc:	ec51 0b10 	vmov	r0, r1, d0
 800bce0:	ec53 2b18 	vmov	r2, r3, d8
 800bce4:	f7ff bbed 	b.w	800b4c2 <__ieee754_pow+0x162>
 800bce8:	4b30      	ldr	r3, [pc, #192]	; (800bdac <__ieee754_pow+0xa4c>)
 800bcea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bcee:	429e      	cmp	r6, r3
 800bcf0:	f77f af0c 	ble.w	800bb0c <__ieee754_pow+0x7ac>
 800bcf4:	4b2e      	ldr	r3, [pc, #184]	; (800bdb0 <__ieee754_pow+0xa50>)
 800bcf6:	440b      	add	r3, r1
 800bcf8:	4303      	orrs	r3, r0
 800bcfa:	d009      	beq.n	800bd10 <__ieee754_pow+0x9b0>
 800bcfc:	ec51 0b18 	vmov	r0, r1, d8
 800bd00:	2200      	movs	r2, #0
 800bd02:	2300      	movs	r3, #0
 800bd04:	f7f4 feea 	bl	8000adc <__aeabi_dcmplt>
 800bd08:	3800      	subs	r0, #0
 800bd0a:	bf18      	it	ne
 800bd0c:	2001      	movne	r0, #1
 800bd0e:	e447      	b.n	800b5a0 <__ieee754_pow+0x240>
 800bd10:	4622      	mov	r2, r4
 800bd12:	462b      	mov	r3, r5
 800bd14:	f7f4 fab8 	bl	8000288 <__aeabi_dsub>
 800bd18:	4642      	mov	r2, r8
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	f7f4 fef2 	bl	8000b04 <__aeabi_dcmpge>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	f43f aef3 	beq.w	800bb0c <__ieee754_pow+0x7ac>
 800bd26:	e7e9      	b.n	800bcfc <__ieee754_pow+0x99c>
 800bd28:	f04f 0a00 	mov.w	sl, #0
 800bd2c:	e71a      	b.n	800bb64 <__ieee754_pow+0x804>
 800bd2e:	ec51 0b10 	vmov	r0, r1, d0
 800bd32:	4619      	mov	r1, r3
 800bd34:	e7d4      	b.n	800bce0 <__ieee754_pow+0x980>
 800bd36:	491c      	ldr	r1, [pc, #112]	; (800bda8 <__ieee754_pow+0xa48>)
 800bd38:	2000      	movs	r0, #0
 800bd3a:	f7ff bb30 	b.w	800b39e <__ieee754_pow+0x3e>
 800bd3e:	2000      	movs	r0, #0
 800bd40:	2100      	movs	r1, #0
 800bd42:	f7ff bb2c 	b.w	800b39e <__ieee754_pow+0x3e>
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7ff bb28 	b.w	800b39e <__ieee754_pow+0x3e>
 800bd4e:	9204      	str	r2, [sp, #16]
 800bd50:	f7ff bb7a 	b.w	800b448 <__ieee754_pow+0xe8>
 800bd54:	2300      	movs	r3, #0
 800bd56:	f7ff bb64 	b.w	800b422 <__ieee754_pow+0xc2>
 800bd5a:	bf00      	nop
 800bd5c:	f3af 8000 	nop.w
 800bd60:	00000000 	.word	0x00000000
 800bd64:	3fe62e43 	.word	0x3fe62e43
 800bd68:	fefa39ef 	.word	0xfefa39ef
 800bd6c:	3fe62e42 	.word	0x3fe62e42
 800bd70:	0ca86c39 	.word	0x0ca86c39
 800bd74:	be205c61 	.word	0xbe205c61
 800bd78:	72bea4d0 	.word	0x72bea4d0
 800bd7c:	3e663769 	.word	0x3e663769
 800bd80:	c5d26bf1 	.word	0xc5d26bf1
 800bd84:	3ebbbd41 	.word	0x3ebbbd41
 800bd88:	af25de2c 	.word	0xaf25de2c
 800bd8c:	3f11566a 	.word	0x3f11566a
 800bd90:	16bebd93 	.word	0x16bebd93
 800bd94:	3f66c16c 	.word	0x3f66c16c
 800bd98:	5555553e 	.word	0x5555553e
 800bd9c:	3fc55555 	.word	0x3fc55555
 800bda0:	3fe00000 	.word	0x3fe00000
 800bda4:	000fffff 	.word	0x000fffff
 800bda8:	3ff00000 	.word	0x3ff00000
 800bdac:	4090cbff 	.word	0x4090cbff
 800bdb0:	3f6f3400 	.word	0x3f6f3400
 800bdb4:	652b82fe 	.word	0x652b82fe
 800bdb8:	3c971547 	.word	0x3c971547
 800bdbc:	00000000 	.word	0x00000000

0800bdc0 <__ieee754_rem_pio2>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	ed2d 8b02 	vpush	{d8}
 800bdc8:	ec55 4b10 	vmov	r4, r5, d0
 800bdcc:	4bca      	ldr	r3, [pc, #808]	; (800c0f8 <__ieee754_rem_pio2+0x338>)
 800bdce:	b08b      	sub	sp, #44	; 0x2c
 800bdd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bdd4:	4598      	cmp	r8, r3
 800bdd6:	4682      	mov	sl, r0
 800bdd8:	9502      	str	r5, [sp, #8]
 800bdda:	dc08      	bgt.n	800bdee <__ieee754_rem_pio2+0x2e>
 800bddc:	2200      	movs	r2, #0
 800bdde:	2300      	movs	r3, #0
 800bde0:	ed80 0b00 	vstr	d0, [r0]
 800bde4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bde8:	f04f 0b00 	mov.w	fp, #0
 800bdec:	e028      	b.n	800be40 <__ieee754_rem_pio2+0x80>
 800bdee:	4bc3      	ldr	r3, [pc, #780]	; (800c0fc <__ieee754_rem_pio2+0x33c>)
 800bdf0:	4598      	cmp	r8, r3
 800bdf2:	dc78      	bgt.n	800bee6 <__ieee754_rem_pio2+0x126>
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	4ec2      	ldr	r6, [pc, #776]	; (800c100 <__ieee754_rem_pio2+0x340>)
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	ee10 0a10 	vmov	r0, s0
 800bdfe:	a3b0      	add	r3, pc, #704	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x300>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	4629      	mov	r1, r5
 800be06:	dd39      	ble.n	800be7c <__ieee754_rem_pio2+0xbc>
 800be08:	f7f4 fa3e 	bl	8000288 <__aeabi_dsub>
 800be0c:	45b0      	cmp	r8, r6
 800be0e:	4604      	mov	r4, r0
 800be10:	460d      	mov	r5, r1
 800be12:	d01b      	beq.n	800be4c <__ieee754_rem_pio2+0x8c>
 800be14:	a3ac      	add	r3, pc, #688	; (adr r3, 800c0c8 <__ieee754_rem_pio2+0x308>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	f7f4 fa35 	bl	8000288 <__aeabi_dsub>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	e9ca 2300 	strd	r2, r3, [sl]
 800be26:	4620      	mov	r0, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	f7f4 fa2d 	bl	8000288 <__aeabi_dsub>
 800be2e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c0c8 <__ieee754_rem_pio2+0x308>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 fa28 	bl	8000288 <__aeabi_dsub>
 800be38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be3c:	f04f 0b01 	mov.w	fp, #1
 800be40:	4658      	mov	r0, fp
 800be42:	b00b      	add	sp, #44	; 0x2c
 800be44:	ecbd 8b02 	vpop	{d8}
 800be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c0d0 <__ieee754_rem_pio2+0x310>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 fa19 	bl	8000288 <__aeabi_dsub>
 800be56:	a3a0      	add	r3, pc, #640	; (adr r3, 800c0d8 <__ieee754_rem_pio2+0x318>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	4604      	mov	r4, r0
 800be5e:	460d      	mov	r5, r1
 800be60:	f7f4 fa12 	bl	8000288 <__aeabi_dsub>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	e9ca 2300 	strd	r2, r3, [sl]
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fa0a 	bl	8000288 <__aeabi_dsub>
 800be74:	a398      	add	r3, pc, #608	; (adr r3, 800c0d8 <__ieee754_rem_pio2+0x318>)
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	e7db      	b.n	800be34 <__ieee754_rem_pio2+0x74>
 800be7c:	f7f4 fa06 	bl	800028c <__adddf3>
 800be80:	45b0      	cmp	r8, r6
 800be82:	4604      	mov	r4, r0
 800be84:	460d      	mov	r5, r1
 800be86:	d016      	beq.n	800beb6 <__ieee754_rem_pio2+0xf6>
 800be88:	a38f      	add	r3, pc, #572	; (adr r3, 800c0c8 <__ieee754_rem_pio2+0x308>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 f9fd 	bl	800028c <__adddf3>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	e9ca 2300 	strd	r2, r3, [sl]
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	f7f4 f9f3 	bl	8000288 <__aeabi_dsub>
 800bea2:	a389      	add	r3, pc, #548	; (adr r3, 800c0c8 <__ieee754_rem_pio2+0x308>)
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	f7f4 f9f0 	bl	800028c <__adddf3>
 800beac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800beb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800beb4:	e7c4      	b.n	800be40 <__ieee754_rem_pio2+0x80>
 800beb6:	a386      	add	r3, pc, #536	; (adr r3, 800c0d0 <__ieee754_rem_pio2+0x310>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f7f4 f9e6 	bl	800028c <__adddf3>
 800bec0:	a385      	add	r3, pc, #532	; (adr r3, 800c0d8 <__ieee754_rem_pio2+0x318>)
 800bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec6:	4604      	mov	r4, r0
 800bec8:	460d      	mov	r5, r1
 800beca:	f7f4 f9df 	bl	800028c <__adddf3>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	e9ca 2300 	strd	r2, r3, [sl]
 800bed6:	4620      	mov	r0, r4
 800bed8:	4629      	mov	r1, r5
 800beda:	f7f4 f9d5 	bl	8000288 <__aeabi_dsub>
 800bede:	a37e      	add	r3, pc, #504	; (adr r3, 800c0d8 <__ieee754_rem_pio2+0x318>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	e7e0      	b.n	800bea8 <__ieee754_rem_pio2+0xe8>
 800bee6:	4b87      	ldr	r3, [pc, #540]	; (800c104 <__ieee754_rem_pio2+0x344>)
 800bee8:	4598      	cmp	r8, r3
 800beea:	f300 80d9 	bgt.w	800c0a0 <__ieee754_rem_pio2+0x2e0>
 800beee:	f001 fa1f 	bl	800d330 <fabs>
 800bef2:	ec55 4b10 	vmov	r4, r5, d0
 800bef6:	ee10 0a10 	vmov	r0, s0
 800befa:	a379      	add	r3, pc, #484	; (adr r3, 800c0e0 <__ieee754_rem_pio2+0x320>)
 800befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf00:	4629      	mov	r1, r5
 800bf02:	f7f4 fb79 	bl	80005f8 <__aeabi_dmul>
 800bf06:	4b80      	ldr	r3, [pc, #512]	; (800c108 <__ieee754_rem_pio2+0x348>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f7f4 f9bf 	bl	800028c <__adddf3>
 800bf0e:	f7f4 fe23 	bl	8000b58 <__aeabi_d2iz>
 800bf12:	4683      	mov	fp, r0
 800bf14:	f7f4 fb06 	bl	8000524 <__aeabi_i2d>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	ec43 2b18 	vmov	d8, r2, r3
 800bf20:	a367      	add	r3, pc, #412	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x300>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fb67 	bl	80005f8 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 f9a9 	bl	8000288 <__aeabi_dsub>
 800bf36:	a364      	add	r3, pc, #400	; (adr r3, 800c0c8 <__ieee754_rem_pio2+0x308>)
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	460f      	mov	r7, r1
 800bf40:	ec51 0b18 	vmov	r0, r1, d8
 800bf44:	f7f4 fb58 	bl	80005f8 <__aeabi_dmul>
 800bf48:	f1bb 0f1f 	cmp.w	fp, #31
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	460d      	mov	r5, r1
 800bf50:	dc0d      	bgt.n	800bf6e <__ieee754_rem_pio2+0x1ae>
 800bf52:	4b6e      	ldr	r3, [pc, #440]	; (800c10c <__ieee754_rem_pio2+0x34c>)
 800bf54:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800bf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf5c:	4543      	cmp	r3, r8
 800bf5e:	d006      	beq.n	800bf6e <__ieee754_rem_pio2+0x1ae>
 800bf60:	4622      	mov	r2, r4
 800bf62:	462b      	mov	r3, r5
 800bf64:	4630      	mov	r0, r6
 800bf66:	4639      	mov	r1, r7
 800bf68:	f7f4 f98e 	bl	8000288 <__aeabi_dsub>
 800bf6c:	e00f      	b.n	800bf8e <__ieee754_rem_pio2+0x1ce>
 800bf6e:	462b      	mov	r3, r5
 800bf70:	4622      	mov	r2, r4
 800bf72:	4630      	mov	r0, r6
 800bf74:	4639      	mov	r1, r7
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bf7e:	9303      	str	r3, [sp, #12]
 800bf80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf84:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bf88:	f1b8 0f10 	cmp.w	r8, #16
 800bf8c:	dc02      	bgt.n	800bf94 <__ieee754_rem_pio2+0x1d4>
 800bf8e:	e9ca 0100 	strd	r0, r1, [sl]
 800bf92:	e039      	b.n	800c008 <__ieee754_rem_pio2+0x248>
 800bf94:	a34e      	add	r3, pc, #312	; (adr r3, 800c0d0 <__ieee754_rem_pio2+0x310>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	ec51 0b18 	vmov	r0, r1, d8
 800bf9e:	f7f4 fb2b 	bl	80005f8 <__aeabi_dmul>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4630      	mov	r0, r6
 800bfac:	4639      	mov	r1, r7
 800bfae:	f7f4 f96b 	bl	8000288 <__aeabi_dsub>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4680      	mov	r8, r0
 800bfb8:	4689      	mov	r9, r1
 800bfba:	4630      	mov	r0, r6
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	f7f4 f963 	bl	8000288 <__aeabi_dsub>
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	462b      	mov	r3, r5
 800bfc6:	f7f4 f95f 	bl	8000288 <__aeabi_dsub>
 800bfca:	a343      	add	r3, pc, #268	; (adr r3, 800c0d8 <__ieee754_rem_pio2+0x318>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	ec51 0b18 	vmov	r0, r1, d8
 800bfd8:	f7f4 fb0e 	bl	80005f8 <__aeabi_dmul>
 800bfdc:	4622      	mov	r2, r4
 800bfde:	462b      	mov	r3, r5
 800bfe0:	f7f4 f952 	bl	8000288 <__aeabi_dsub>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	4604      	mov	r4, r0
 800bfea:	460d      	mov	r5, r1
 800bfec:	4640      	mov	r0, r8
 800bfee:	4649      	mov	r1, r9
 800bff0:	f7f4 f94a 	bl	8000288 <__aeabi_dsub>
 800bff4:	9a03      	ldr	r2, [sp, #12]
 800bff6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	2b31      	cmp	r3, #49	; 0x31
 800bffe:	dc24      	bgt.n	800c04a <__ieee754_rem_pio2+0x28a>
 800c000:	e9ca 0100 	strd	r0, r1, [sl]
 800c004:	4646      	mov	r6, r8
 800c006:	464f      	mov	r7, r9
 800c008:	e9da 8900 	ldrd	r8, r9, [sl]
 800c00c:	4630      	mov	r0, r6
 800c00e:	4642      	mov	r2, r8
 800c010:	464b      	mov	r3, r9
 800c012:	4639      	mov	r1, r7
 800c014:	f7f4 f938 	bl	8000288 <__aeabi_dsub>
 800c018:	462b      	mov	r3, r5
 800c01a:	4622      	mov	r2, r4
 800c01c:	f7f4 f934 	bl	8000288 <__aeabi_dsub>
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c028:	f6bf af0a 	bge.w	800be40 <__ieee754_rem_pio2+0x80>
 800c02c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c030:	f8ca 3004 	str.w	r3, [sl, #4]
 800c034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c038:	f8ca 8000 	str.w	r8, [sl]
 800c03c:	f8ca 0008 	str.w	r0, [sl, #8]
 800c040:	f8ca 300c 	str.w	r3, [sl, #12]
 800c044:	f1cb 0b00 	rsb	fp, fp, #0
 800c048:	e6fa      	b.n	800be40 <__ieee754_rem_pio2+0x80>
 800c04a:	a327      	add	r3, pc, #156	; (adr r3, 800c0e8 <__ieee754_rem_pio2+0x328>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	ec51 0b18 	vmov	r0, r1, d8
 800c054:	f7f4 fad0 	bl	80005f8 <__aeabi_dmul>
 800c058:	4604      	mov	r4, r0
 800c05a:	460d      	mov	r5, r1
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4640      	mov	r0, r8
 800c062:	4649      	mov	r1, r9
 800c064:	f7f4 f910 	bl	8000288 <__aeabi_dsub>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4606      	mov	r6, r0
 800c06e:	460f      	mov	r7, r1
 800c070:	4640      	mov	r0, r8
 800c072:	4649      	mov	r1, r9
 800c074:	f7f4 f908 	bl	8000288 <__aeabi_dsub>
 800c078:	4622      	mov	r2, r4
 800c07a:	462b      	mov	r3, r5
 800c07c:	f7f4 f904 	bl	8000288 <__aeabi_dsub>
 800c080:	a31b      	add	r3, pc, #108	; (adr r3, 800c0f0 <__ieee754_rem_pio2+0x330>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	4604      	mov	r4, r0
 800c088:	460d      	mov	r5, r1
 800c08a:	ec51 0b18 	vmov	r0, r1, d8
 800c08e:	f7f4 fab3 	bl	80005f8 <__aeabi_dmul>
 800c092:	4622      	mov	r2, r4
 800c094:	462b      	mov	r3, r5
 800c096:	f7f4 f8f7 	bl	8000288 <__aeabi_dsub>
 800c09a:	4604      	mov	r4, r0
 800c09c:	460d      	mov	r5, r1
 800c09e:	e75f      	b.n	800bf60 <__ieee754_rem_pio2+0x1a0>
 800c0a0:	4b1b      	ldr	r3, [pc, #108]	; (800c110 <__ieee754_rem_pio2+0x350>)
 800c0a2:	4598      	cmp	r8, r3
 800c0a4:	dd36      	ble.n	800c114 <__ieee754_rem_pio2+0x354>
 800c0a6:	ee10 2a10 	vmov	r2, s0
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 f8ea 	bl	8000288 <__aeabi_dsub>
 800c0b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c0b8:	e9ca 0100 	strd	r0, r1, [sl]
 800c0bc:	e694      	b.n	800bde8 <__ieee754_rem_pio2+0x28>
 800c0be:	bf00      	nop
 800c0c0:	54400000 	.word	0x54400000
 800c0c4:	3ff921fb 	.word	0x3ff921fb
 800c0c8:	1a626331 	.word	0x1a626331
 800c0cc:	3dd0b461 	.word	0x3dd0b461
 800c0d0:	1a600000 	.word	0x1a600000
 800c0d4:	3dd0b461 	.word	0x3dd0b461
 800c0d8:	2e037073 	.word	0x2e037073
 800c0dc:	3ba3198a 	.word	0x3ba3198a
 800c0e0:	6dc9c883 	.word	0x6dc9c883
 800c0e4:	3fe45f30 	.word	0x3fe45f30
 800c0e8:	2e000000 	.word	0x2e000000
 800c0ec:	3ba3198a 	.word	0x3ba3198a
 800c0f0:	252049c1 	.word	0x252049c1
 800c0f4:	397b839a 	.word	0x397b839a
 800c0f8:	3fe921fb 	.word	0x3fe921fb
 800c0fc:	4002d97b 	.word	0x4002d97b
 800c100:	3ff921fb 	.word	0x3ff921fb
 800c104:	413921fb 	.word	0x413921fb
 800c108:	3fe00000 	.word	0x3fe00000
 800c10c:	0800d738 	.word	0x0800d738
 800c110:	7fefffff 	.word	0x7fefffff
 800c114:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c118:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c11c:	ee10 0a10 	vmov	r0, s0
 800c120:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c124:	ee10 6a10 	vmov	r6, s0
 800c128:	460f      	mov	r7, r1
 800c12a:	f7f4 fd15 	bl	8000b58 <__aeabi_d2iz>
 800c12e:	f7f4 f9f9 	bl	8000524 <__aeabi_i2d>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	4630      	mov	r0, r6
 800c138:	4639      	mov	r1, r7
 800c13a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c13e:	f7f4 f8a3 	bl	8000288 <__aeabi_dsub>
 800c142:	4b23      	ldr	r3, [pc, #140]	; (800c1d0 <__ieee754_rem_pio2+0x410>)
 800c144:	2200      	movs	r2, #0
 800c146:	f7f4 fa57 	bl	80005f8 <__aeabi_dmul>
 800c14a:	460f      	mov	r7, r1
 800c14c:	4606      	mov	r6, r0
 800c14e:	f7f4 fd03 	bl	8000b58 <__aeabi_d2iz>
 800c152:	f7f4 f9e7 	bl	8000524 <__aeabi_i2d>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4630      	mov	r0, r6
 800c15c:	4639      	mov	r1, r7
 800c15e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c162:	f7f4 f891 	bl	8000288 <__aeabi_dsub>
 800c166:	4b1a      	ldr	r3, [pc, #104]	; (800c1d0 <__ieee754_rem_pio2+0x410>)
 800c168:	2200      	movs	r2, #0
 800c16a:	f7f4 fa45 	bl	80005f8 <__aeabi_dmul>
 800c16e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c172:	ad04      	add	r5, sp, #16
 800c174:	f04f 0803 	mov.w	r8, #3
 800c178:	46a9      	mov	r9, r5
 800c17a:	2600      	movs	r6, #0
 800c17c:	2700      	movs	r7, #0
 800c17e:	4632      	mov	r2, r6
 800c180:	463b      	mov	r3, r7
 800c182:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c186:	46c3      	mov	fp, r8
 800c188:	3d08      	subs	r5, #8
 800c18a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c18e:	f7f4 fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c192:	2800      	cmp	r0, #0
 800c194:	d1f3      	bne.n	800c17e <__ieee754_rem_pio2+0x3be>
 800c196:	4b0f      	ldr	r3, [pc, #60]	; (800c1d4 <__ieee754_rem_pio2+0x414>)
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	2302      	movs	r3, #2
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	4622      	mov	r2, r4
 800c1a0:	465b      	mov	r3, fp
 800c1a2:	4651      	mov	r1, sl
 800c1a4:	4648      	mov	r0, r9
 800c1a6:	f000 fc63 	bl	800ca70 <__kernel_rem_pio2>
 800c1aa:	9b02      	ldr	r3, [sp, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	4683      	mov	fp, r0
 800c1b0:	f6bf ae46 	bge.w	800be40 <__ieee754_rem_pio2+0x80>
 800c1b4:	e9da 2100 	ldrd	r2, r1, [sl]
 800c1b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1bc:	e9ca 2300 	strd	r2, r3, [sl]
 800c1c0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c1c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1c8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c1cc:	e73a      	b.n	800c044 <__ieee754_rem_pio2+0x284>
 800c1ce:	bf00      	nop
 800c1d0:	41700000 	.word	0x41700000
 800c1d4:	0800d7b8 	.word	0x0800d7b8

0800c1d8 <__ieee754_sqrt>:
 800c1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1dc:	ec55 4b10 	vmov	r4, r5, d0
 800c1e0:	4e55      	ldr	r6, [pc, #340]	; (800c338 <__ieee754_sqrt+0x160>)
 800c1e2:	43ae      	bics	r6, r5
 800c1e4:	ee10 0a10 	vmov	r0, s0
 800c1e8:	ee10 3a10 	vmov	r3, s0
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	d110      	bne.n	800c214 <__ieee754_sqrt+0x3c>
 800c1f2:	ee10 2a10 	vmov	r2, s0
 800c1f6:	462b      	mov	r3, r5
 800c1f8:	f7f4 f9fe 	bl	80005f8 <__aeabi_dmul>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	4620      	mov	r0, r4
 800c202:	4629      	mov	r1, r5
 800c204:	f7f4 f842 	bl	800028c <__adddf3>
 800c208:	4604      	mov	r4, r0
 800c20a:	460d      	mov	r5, r1
 800c20c:	ec45 4b10 	vmov	d0, r4, r5
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	2d00      	cmp	r5, #0
 800c216:	dc10      	bgt.n	800c23a <__ieee754_sqrt+0x62>
 800c218:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c21c:	4330      	orrs	r0, r6
 800c21e:	d0f5      	beq.n	800c20c <__ieee754_sqrt+0x34>
 800c220:	b15d      	cbz	r5, 800c23a <__ieee754_sqrt+0x62>
 800c222:	ee10 2a10 	vmov	r2, s0
 800c226:	462b      	mov	r3, r5
 800c228:	ee10 0a10 	vmov	r0, s0
 800c22c:	f7f4 f82c 	bl	8000288 <__aeabi_dsub>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	f7f4 fb0a 	bl	800084c <__aeabi_ddiv>
 800c238:	e7e6      	b.n	800c208 <__ieee754_sqrt+0x30>
 800c23a:	1512      	asrs	r2, r2, #20
 800c23c:	d074      	beq.n	800c328 <__ieee754_sqrt+0x150>
 800c23e:	07d4      	lsls	r4, r2, #31
 800c240:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c244:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c24c:	bf5e      	ittt	pl
 800c24e:	0fda      	lsrpl	r2, r3, #31
 800c250:	005b      	lslpl	r3, r3, #1
 800c252:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c256:	2400      	movs	r4, #0
 800c258:	0fda      	lsrs	r2, r3, #31
 800c25a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c25e:	107f      	asrs	r7, r7, #1
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	2516      	movs	r5, #22
 800c264:	4620      	mov	r0, r4
 800c266:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c26a:	1886      	adds	r6, r0, r2
 800c26c:	428e      	cmp	r6, r1
 800c26e:	bfde      	ittt	le
 800c270:	1b89      	suble	r1, r1, r6
 800c272:	18b0      	addle	r0, r6, r2
 800c274:	18a4      	addle	r4, r4, r2
 800c276:	0049      	lsls	r1, r1, #1
 800c278:	3d01      	subs	r5, #1
 800c27a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c27e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c282:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c286:	d1f0      	bne.n	800c26a <__ieee754_sqrt+0x92>
 800c288:	462a      	mov	r2, r5
 800c28a:	f04f 0e20 	mov.w	lr, #32
 800c28e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c292:	4281      	cmp	r1, r0
 800c294:	eb06 0c05 	add.w	ip, r6, r5
 800c298:	dc02      	bgt.n	800c2a0 <__ieee754_sqrt+0xc8>
 800c29a:	d113      	bne.n	800c2c4 <__ieee754_sqrt+0xec>
 800c29c:	459c      	cmp	ip, r3
 800c29e:	d811      	bhi.n	800c2c4 <__ieee754_sqrt+0xec>
 800c2a0:	f1bc 0f00 	cmp.w	ip, #0
 800c2a4:	eb0c 0506 	add.w	r5, ip, r6
 800c2a8:	da43      	bge.n	800c332 <__ieee754_sqrt+0x15a>
 800c2aa:	2d00      	cmp	r5, #0
 800c2ac:	db41      	blt.n	800c332 <__ieee754_sqrt+0x15a>
 800c2ae:	f100 0801 	add.w	r8, r0, #1
 800c2b2:	1a09      	subs	r1, r1, r0
 800c2b4:	459c      	cmp	ip, r3
 800c2b6:	bf88      	it	hi
 800c2b8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800c2bc:	eba3 030c 	sub.w	r3, r3, ip
 800c2c0:	4432      	add	r2, r6
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c2c8:	f1be 0e01 	subs.w	lr, lr, #1
 800c2cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c2d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c2d8:	d1db      	bne.n	800c292 <__ieee754_sqrt+0xba>
 800c2da:	430b      	orrs	r3, r1
 800c2dc:	d006      	beq.n	800c2ec <__ieee754_sqrt+0x114>
 800c2de:	1c50      	adds	r0, r2, #1
 800c2e0:	bf13      	iteet	ne
 800c2e2:	3201      	addne	r2, #1
 800c2e4:	3401      	addeq	r4, #1
 800c2e6:	4672      	moveq	r2, lr
 800c2e8:	f022 0201 	bicne.w	r2, r2, #1
 800c2ec:	1063      	asrs	r3, r4, #1
 800c2ee:	0852      	lsrs	r2, r2, #1
 800c2f0:	07e1      	lsls	r1, r4, #31
 800c2f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c2f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c2fa:	bf48      	it	mi
 800c2fc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c300:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c304:	4614      	mov	r4, r2
 800c306:	e781      	b.n	800c20c <__ieee754_sqrt+0x34>
 800c308:	0ad9      	lsrs	r1, r3, #11
 800c30a:	3815      	subs	r0, #21
 800c30c:	055b      	lsls	r3, r3, #21
 800c30e:	2900      	cmp	r1, #0
 800c310:	d0fa      	beq.n	800c308 <__ieee754_sqrt+0x130>
 800c312:	02cd      	lsls	r5, r1, #11
 800c314:	d50a      	bpl.n	800c32c <__ieee754_sqrt+0x154>
 800c316:	f1c2 0420 	rsb	r4, r2, #32
 800c31a:	fa23 f404 	lsr.w	r4, r3, r4
 800c31e:	1e55      	subs	r5, r2, #1
 800c320:	4093      	lsls	r3, r2
 800c322:	4321      	orrs	r1, r4
 800c324:	1b42      	subs	r2, r0, r5
 800c326:	e78a      	b.n	800c23e <__ieee754_sqrt+0x66>
 800c328:	4610      	mov	r0, r2
 800c32a:	e7f0      	b.n	800c30e <__ieee754_sqrt+0x136>
 800c32c:	0049      	lsls	r1, r1, #1
 800c32e:	3201      	adds	r2, #1
 800c330:	e7ef      	b.n	800c312 <__ieee754_sqrt+0x13a>
 800c332:	4680      	mov	r8, r0
 800c334:	e7bd      	b.n	800c2b2 <__ieee754_sqrt+0xda>
 800c336:	bf00      	nop
 800c338:	7ff00000 	.word	0x7ff00000

0800c33c <__ieee754_powf>:
 800c33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c340:	ee10 4a90 	vmov	r4, s1
 800c344:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800c348:	ed2d 8b02 	vpush	{d8}
 800c34c:	ee10 6a10 	vmov	r6, s0
 800c350:	eeb0 8a40 	vmov.f32	s16, s0
 800c354:	eef0 8a60 	vmov.f32	s17, s1
 800c358:	d10c      	bne.n	800c374 <__ieee754_powf+0x38>
 800c35a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800c35e:	0076      	lsls	r6, r6, #1
 800c360:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800c364:	f240 8296 	bls.w	800c894 <__ieee754_powf+0x558>
 800c368:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c36c:	ecbd 8b02 	vpop	{d8}
 800c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c374:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c378:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c37c:	dcf4      	bgt.n	800c368 <__ieee754_powf+0x2c>
 800c37e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c382:	dd08      	ble.n	800c396 <__ieee754_powf+0x5a>
 800c384:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800c388:	d1ee      	bne.n	800c368 <__ieee754_powf+0x2c>
 800c38a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c38e:	0064      	lsls	r4, r4, #1
 800c390:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c394:	e7e6      	b.n	800c364 <__ieee754_powf+0x28>
 800c396:	2e00      	cmp	r6, #0
 800c398:	da20      	bge.n	800c3dc <__ieee754_powf+0xa0>
 800c39a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c39e:	da2d      	bge.n	800c3fc <__ieee754_powf+0xc0>
 800c3a0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c3a4:	f2c0 827f 	blt.w	800c8a6 <__ieee754_powf+0x56a>
 800c3a8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c3ac:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c3b0:	fa48 f703 	asr.w	r7, r8, r3
 800c3b4:	fa07 f303 	lsl.w	r3, r7, r3
 800c3b8:	4543      	cmp	r3, r8
 800c3ba:	f040 8274 	bne.w	800c8a6 <__ieee754_powf+0x56a>
 800c3be:	f007 0701 	and.w	r7, r7, #1
 800c3c2:	f1c7 0702 	rsb	r7, r7, #2
 800c3c6:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c3ca:	d11f      	bne.n	800c40c <__ieee754_powf+0xd0>
 800c3cc:	2c00      	cmp	r4, #0
 800c3ce:	f280 8267 	bge.w	800c8a0 <__ieee754_powf+0x564>
 800c3d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c3d6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c3da:	e7c7      	b.n	800c36c <__ieee754_powf+0x30>
 800c3dc:	2700      	movs	r7, #0
 800c3de:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c3e2:	d1f0      	bne.n	800c3c6 <__ieee754_powf+0x8a>
 800c3e4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800c3e8:	f000 8254 	beq.w	800c894 <__ieee754_powf+0x558>
 800c3ec:	dd08      	ble.n	800c400 <__ieee754_powf+0xc4>
 800c3ee:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800c6f8 <__ieee754_powf+0x3bc>
 800c3f2:	2c00      	cmp	r4, #0
 800c3f4:	bfa8      	it	ge
 800c3f6:	eeb0 0a68 	vmovge.f32	s0, s17
 800c3fa:	e7b7      	b.n	800c36c <__ieee754_powf+0x30>
 800c3fc:	2702      	movs	r7, #2
 800c3fe:	e7ee      	b.n	800c3de <__ieee754_powf+0xa2>
 800c400:	2c00      	cmp	r4, #0
 800c402:	f280 824a 	bge.w	800c89a <__ieee754_powf+0x55e>
 800c406:	eeb1 0a68 	vneg.f32	s0, s17
 800c40a:	e7af      	b.n	800c36c <__ieee754_powf+0x30>
 800c40c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c410:	d102      	bne.n	800c418 <__ieee754_powf+0xdc>
 800c412:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c416:	e7a9      	b.n	800c36c <__ieee754_powf+0x30>
 800c418:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c41c:	eeb0 0a48 	vmov.f32	s0, s16
 800c420:	d107      	bne.n	800c432 <__ieee754_powf+0xf6>
 800c422:	2e00      	cmp	r6, #0
 800c424:	db05      	blt.n	800c432 <__ieee754_powf+0xf6>
 800c426:	ecbd 8b02 	vpop	{d8}
 800c42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c42e:	f000 ba53 	b.w	800c8d8 <__ieee754_sqrtf>
 800c432:	f001 f89f 	bl	800d574 <fabsf>
 800c436:	b125      	cbz	r5, 800c442 <__ieee754_powf+0x106>
 800c438:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800c43c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c440:	d116      	bne.n	800c470 <__ieee754_powf+0x134>
 800c442:	2c00      	cmp	r4, #0
 800c444:	bfbc      	itt	lt
 800c446:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c44a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c44e:	2e00      	cmp	r6, #0
 800c450:	da8c      	bge.n	800c36c <__ieee754_powf+0x30>
 800c452:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800c456:	ea55 0307 	orrs.w	r3, r5, r7
 800c45a:	d104      	bne.n	800c466 <__ieee754_powf+0x12a>
 800c45c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c460:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c464:	e782      	b.n	800c36c <__ieee754_powf+0x30>
 800c466:	2f01      	cmp	r7, #1
 800c468:	d180      	bne.n	800c36c <__ieee754_powf+0x30>
 800c46a:	eeb1 0a40 	vneg.f32	s0, s0
 800c46e:	e77d      	b.n	800c36c <__ieee754_powf+0x30>
 800c470:	0ff0      	lsrs	r0, r6, #31
 800c472:	3801      	subs	r0, #1
 800c474:	ea57 0300 	orrs.w	r3, r7, r0
 800c478:	d104      	bne.n	800c484 <__ieee754_powf+0x148>
 800c47a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c47e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c482:	e773      	b.n	800c36c <__ieee754_powf+0x30>
 800c484:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800c488:	dd74      	ble.n	800c574 <__ieee754_powf+0x238>
 800c48a:	4b9c      	ldr	r3, [pc, #624]	; (800c6fc <__ieee754_powf+0x3c0>)
 800c48c:	429d      	cmp	r5, r3
 800c48e:	dc08      	bgt.n	800c4a2 <__ieee754_powf+0x166>
 800c490:	2c00      	cmp	r4, #0
 800c492:	da0b      	bge.n	800c4ac <__ieee754_powf+0x170>
 800c494:	2000      	movs	r0, #0
 800c496:	ecbd 8b02 	vpop	{d8}
 800c49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c49e:	f000 bf41 	b.w	800d324 <__math_oflowf>
 800c4a2:	4b97      	ldr	r3, [pc, #604]	; (800c700 <__ieee754_powf+0x3c4>)
 800c4a4:	429d      	cmp	r5, r3
 800c4a6:	dd08      	ble.n	800c4ba <__ieee754_powf+0x17e>
 800c4a8:	2c00      	cmp	r4, #0
 800c4aa:	dcf3      	bgt.n	800c494 <__ieee754_powf+0x158>
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	ecbd 8b02 	vpop	{d8}
 800c4b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b6:	f000 bf2f 	b.w	800d318 <__math_uflowf>
 800c4ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c4be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c4c2:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c704 <__ieee754_powf+0x3c8>
 800c4c6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c4ca:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c4ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c4d2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c4d6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4de:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c708 <__ieee754_powf+0x3cc>
 800c4e2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800c4e6:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c70c <__ieee754_powf+0x3d0>
 800c4ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c4ee:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c710 <__ieee754_powf+0x3d4>
 800c4f2:	eef0 6a67 	vmov.f32	s13, s15
 800c4f6:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c4fa:	ee16 3a90 	vmov	r3, s13
 800c4fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c502:	f023 030f 	bic.w	r3, r3, #15
 800c506:	ee00 3a90 	vmov	s1, r3
 800c50a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800c50e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c512:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800c516:	f024 040f 	bic.w	r4, r4, #15
 800c51a:	ee07 4a10 	vmov	s14, r4
 800c51e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c522:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c52e:	3f01      	subs	r7, #1
 800c530:	ea57 0200 	orrs.w	r2, r7, r0
 800c534:	ee07 4a10 	vmov	s14, r4
 800c538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c53c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c540:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c544:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c548:	ee17 4a10 	vmov	r4, s14
 800c54c:	bf08      	it	eq
 800c54e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c552:	2c00      	cmp	r4, #0
 800c554:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c558:	f340 817e 	ble.w	800c858 <__ieee754_powf+0x51c>
 800c55c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c560:	f340 80f8 	ble.w	800c754 <__ieee754_powf+0x418>
 800c564:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c56c:	bf4c      	ite	mi
 800c56e:	2001      	movmi	r0, #1
 800c570:	2000      	movpl	r0, #0
 800c572:	e790      	b.n	800c496 <__ieee754_powf+0x15a>
 800c574:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800c578:	bf01      	itttt	eq
 800c57a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c714 <__ieee754_powf+0x3d8>
 800c57e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c582:	f06f 0217 	mvneq.w	r2, #23
 800c586:	ee17 5a90 	vmoveq	r5, s15
 800c58a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c58e:	bf18      	it	ne
 800c590:	2200      	movne	r2, #0
 800c592:	3b7f      	subs	r3, #127	; 0x7f
 800c594:	4413      	add	r3, r2
 800c596:	4a60      	ldr	r2, [pc, #384]	; (800c718 <__ieee754_powf+0x3dc>)
 800c598:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800c59c:	4295      	cmp	r5, r2
 800c59e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800c5a2:	dd06      	ble.n	800c5b2 <__ieee754_powf+0x276>
 800c5a4:	4a5d      	ldr	r2, [pc, #372]	; (800c71c <__ieee754_powf+0x3e0>)
 800c5a6:	4295      	cmp	r5, r2
 800c5a8:	f340 80a4 	ble.w	800c6f4 <__ieee754_powf+0x3b8>
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c5b2:	2500      	movs	r5, #0
 800c5b4:	4a5a      	ldr	r2, [pc, #360]	; (800c720 <__ieee754_powf+0x3e4>)
 800c5b6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c5ba:	ee07 1a90 	vmov	s15, r1
 800c5be:	ed92 7a00 	vldr	s14, [r2]
 800c5c2:	4a58      	ldr	r2, [pc, #352]	; (800c724 <__ieee754_powf+0x3e8>)
 800c5c4:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c5c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c5cc:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800c5d0:	1049      	asrs	r1, r1, #1
 800c5d2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c5d6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c5da:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800c5de:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800c5e2:	ee06 1a10 	vmov	s12, r1
 800c5e6:	ee65 4a26 	vmul.f32	s9, s10, s13
 800c5ea:	ee36 7a47 	vsub.f32	s14, s12, s14
 800c5ee:	ee14 6a90 	vmov	r6, s9
 800c5f2:	4016      	ands	r6, r2
 800c5f4:	ee05 6a90 	vmov	s11, r6
 800c5f8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800c5fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c600:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c728 <__ieee754_powf+0x3ec>
 800c604:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800c608:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c60c:	ee25 6a26 	vmul.f32	s12, s10, s13
 800c610:	eddf 6a46 	vldr	s13, [pc, #280]	; 800c72c <__ieee754_powf+0x3f0>
 800c614:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c618:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c730 <__ieee754_powf+0x3f4>
 800c61c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c620:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c704 <__ieee754_powf+0x3c8>
 800c624:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c628:	eddf 6a42 	vldr	s13, [pc, #264]	; 800c734 <__ieee754_powf+0x3f8>
 800c62c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c630:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c738 <__ieee754_powf+0x3fc>
 800c634:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c638:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800c63c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800c640:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c644:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c648:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800c64c:	eef0 7a45 	vmov.f32	s15, s10
 800c650:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800c654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c658:	ee17 1a90 	vmov	r1, s15
 800c65c:	4011      	ands	r1, r2
 800c65e:	ee07 1a90 	vmov	s15, r1
 800c662:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800c666:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800c66a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c66e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c672:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c676:	eeb0 6a47 	vmov.f32	s12, s14
 800c67a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800c67e:	ee16 1a10 	vmov	r1, s12
 800c682:	4011      	ands	r1, r2
 800c684:	ee06 1a90 	vmov	s13, r1
 800c688:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800c68c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c73c <__ieee754_powf+0x400>
 800c690:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800c740 <__ieee754_powf+0x404>
 800c694:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c698:	ee06 1a10 	vmov	s12, r1
 800c69c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6a0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c744 <__ieee754_powf+0x408>
 800c6a4:	4928      	ldr	r1, [pc, #160]	; (800c748 <__ieee754_powf+0x40c>)
 800c6a6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c6aa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c6ae:	edd1 7a00 	vldr	s15, [r1]
 800c6b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6b6:	ee07 3a90 	vmov	s15, r3
 800c6ba:	4b24      	ldr	r3, [pc, #144]	; (800c74c <__ieee754_powf+0x410>)
 800c6bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c6c0:	eef0 7a47 	vmov.f32	s15, s14
 800c6c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c6c8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c6cc:	edd5 0a00 	vldr	s1, [r5]
 800c6d0:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c6d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6d8:	ee17 3a90 	vmov	r3, s15
 800c6dc:	4013      	ands	r3, r2
 800c6de:	ee07 3a90 	vmov	s15, r3
 800c6e2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c6e6:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800c6ea:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c6ee:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c6f2:	e70e      	b.n	800c512 <__ieee754_powf+0x1d6>
 800c6f4:	2501      	movs	r5, #1
 800c6f6:	e75d      	b.n	800c5b4 <__ieee754_powf+0x278>
 800c6f8:	00000000 	.word	0x00000000
 800c6fc:	3f7ffff3 	.word	0x3f7ffff3
 800c700:	3f800007 	.word	0x3f800007
 800c704:	3eaaaaab 	.word	0x3eaaaaab
 800c708:	3fb8aa3b 	.word	0x3fb8aa3b
 800c70c:	36eca570 	.word	0x36eca570
 800c710:	3fb8aa00 	.word	0x3fb8aa00
 800c714:	4b800000 	.word	0x4b800000
 800c718:	001cc471 	.word	0x001cc471
 800c71c:	005db3d6 	.word	0x005db3d6
 800c720:	0800d8c0 	.word	0x0800d8c0
 800c724:	fffff000 	.word	0xfffff000
 800c728:	3e6c3255 	.word	0x3e6c3255
 800c72c:	3e53f142 	.word	0x3e53f142
 800c730:	3e8ba305 	.word	0x3e8ba305
 800c734:	3edb6db7 	.word	0x3edb6db7
 800c738:	3f19999a 	.word	0x3f19999a
 800c73c:	3f76384f 	.word	0x3f76384f
 800c740:	3f763800 	.word	0x3f763800
 800c744:	369dc3a0 	.word	0x369dc3a0
 800c748:	0800d8d0 	.word	0x0800d8d0
 800c74c:	0800d8c8 	.word	0x0800d8c8
 800c750:	3338aa3c 	.word	0x3338aa3c
 800c754:	f040 8095 	bne.w	800c882 <__ieee754_powf+0x546>
 800c758:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c750 <__ieee754_powf+0x414>
 800c75c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c760:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c764:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c76c:	f73f aefa 	bgt.w	800c564 <__ieee754_powf+0x228>
 800c770:	15db      	asrs	r3, r3, #23
 800c772:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c776:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c77a:	4103      	asrs	r3, r0
 800c77c:	4423      	add	r3, r4
 800c77e:	494b      	ldr	r1, [pc, #300]	; (800c8ac <__ieee754_powf+0x570>)
 800c780:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c784:	3a7f      	subs	r2, #127	; 0x7f
 800c786:	4111      	asrs	r1, r2
 800c788:	ea23 0101 	bic.w	r1, r3, r1
 800c78c:	ee07 1a10 	vmov	s14, r1
 800c790:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c794:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c798:	f1c2 0217 	rsb	r2, r2, #23
 800c79c:	4110      	asrs	r0, r2
 800c79e:	2c00      	cmp	r4, #0
 800c7a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7a4:	bfb8      	it	lt
 800c7a6:	4240      	neglt	r0, r0
 800c7a8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c7ac:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800c8b0 <__ieee754_powf+0x574>
 800c7b0:	eddf 6a40 	vldr	s13, [pc, #256]	; 800c8b4 <__ieee754_powf+0x578>
 800c7b4:	ee17 3a10 	vmov	r3, s14
 800c7b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c7bc:	f023 030f 	bic.w	r3, r3, #15
 800c7c0:	ee07 3a10 	vmov	s14, r3
 800c7c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7c8:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c7cc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c7d0:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c8b8 <__ieee754_powf+0x57c>
 800c7d4:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800c7d8:	eef0 7a40 	vmov.f32	s15, s0
 800c7dc:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c7e0:	eeb0 6a67 	vmov.f32	s12, s15
 800c7e4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c7e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c7ec:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c7f0:	eddf 6a32 	vldr	s13, [pc, #200]	; 800c8bc <__ieee754_powf+0x580>
 800c7f4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800c8c0 <__ieee754_powf+0x584>
 800c7f8:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c7fc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800c8c4 <__ieee754_powf+0x588>
 800c800:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c804:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c8c8 <__ieee754_powf+0x58c>
 800c808:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c80c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800c8cc <__ieee754_powf+0x590>
 800c810:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c814:	eef0 6a67 	vmov.f32	s13, s15
 800c818:	eee6 6a47 	vfms.f32	s13, s12, s14
 800c81c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c820:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c824:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800c828:	eea7 0a80 	vfma.f32	s0, s15, s0
 800c82c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c830:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c834:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c838:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c83c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c840:	ee10 3a10 	vmov	r3, s0
 800c844:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c84c:	da1f      	bge.n	800c88e <__ieee754_powf+0x552>
 800c84e:	f000 fea5 	bl	800d59c <scalbnf>
 800c852:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c856:	e589      	b.n	800c36c <__ieee754_powf+0x30>
 800c858:	4a1d      	ldr	r2, [pc, #116]	; (800c8d0 <__ieee754_powf+0x594>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	dd07      	ble.n	800c86e <__ieee754_powf+0x532>
 800c85e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c866:	bf4c      	ite	mi
 800c868:	2001      	movmi	r0, #1
 800c86a:	2000      	movpl	r0, #0
 800c86c:	e61f      	b.n	800c4ae <__ieee754_powf+0x172>
 800c86e:	d108      	bne.n	800c882 <__ieee754_powf+0x546>
 800c870:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c874:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87c:	f6ff af78 	blt.w	800c770 <__ieee754_powf+0x434>
 800c880:	e7ed      	b.n	800c85e <__ieee754_powf+0x522>
 800c882:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c886:	f73f af73 	bgt.w	800c770 <__ieee754_powf+0x434>
 800c88a:	2000      	movs	r0, #0
 800c88c:	e78c      	b.n	800c7a8 <__ieee754_powf+0x46c>
 800c88e:	ee00 3a10 	vmov	s0, r3
 800c892:	e7de      	b.n	800c852 <__ieee754_powf+0x516>
 800c894:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c898:	e568      	b.n	800c36c <__ieee754_powf+0x30>
 800c89a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c8d4 <__ieee754_powf+0x598>
 800c89e:	e565      	b.n	800c36c <__ieee754_powf+0x30>
 800c8a0:	eeb0 0a48 	vmov.f32	s0, s16
 800c8a4:	e562      	b.n	800c36c <__ieee754_powf+0x30>
 800c8a6:	2700      	movs	r7, #0
 800c8a8:	e58d      	b.n	800c3c6 <__ieee754_powf+0x8a>
 800c8aa:	bf00      	nop
 800c8ac:	007fffff 	.word	0x007fffff
 800c8b0:	35bfbe8c 	.word	0x35bfbe8c
 800c8b4:	3f317200 	.word	0x3f317200
 800c8b8:	3f317218 	.word	0x3f317218
 800c8bc:	b5ddea0e 	.word	0xb5ddea0e
 800c8c0:	3331bb4c 	.word	0x3331bb4c
 800c8c4:	388ab355 	.word	0x388ab355
 800c8c8:	bb360b61 	.word	0xbb360b61
 800c8cc:	3e2aaaab 	.word	0x3e2aaaab
 800c8d0:	43160000 	.word	0x43160000
 800c8d4:	00000000 	.word	0x00000000

0800c8d8 <__ieee754_sqrtf>:
 800c8d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c8dc:	4770      	bx	lr
	...

0800c8e0 <__kernel_cos>:
 800c8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	ec57 6b10 	vmov	r6, r7, d0
 800c8e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c8ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c8f0:	ed8d 1b00 	vstr	d1, [sp]
 800c8f4:	da07      	bge.n	800c906 <__kernel_cos+0x26>
 800c8f6:	ee10 0a10 	vmov	r0, s0
 800c8fa:	4639      	mov	r1, r7
 800c8fc:	f7f4 f92c 	bl	8000b58 <__aeabi_d2iz>
 800c900:	2800      	cmp	r0, #0
 800c902:	f000 8088 	beq.w	800ca16 <__kernel_cos+0x136>
 800c906:	4632      	mov	r2, r6
 800c908:	463b      	mov	r3, r7
 800c90a:	4630      	mov	r0, r6
 800c90c:	4639      	mov	r1, r7
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	4b51      	ldr	r3, [pc, #324]	; (800ca58 <__kernel_cos+0x178>)
 800c914:	2200      	movs	r2, #0
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	f7f3 fe6d 	bl	80005f8 <__aeabi_dmul>
 800c91e:	a340      	add	r3, pc, #256	; (adr r3, 800ca20 <__kernel_cos+0x140>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	4682      	mov	sl, r0
 800c926:	468b      	mov	fp, r1
 800c928:	4620      	mov	r0, r4
 800c92a:	4629      	mov	r1, r5
 800c92c:	f7f3 fe64 	bl	80005f8 <__aeabi_dmul>
 800c930:	a33d      	add	r3, pc, #244	; (adr r3, 800ca28 <__kernel_cos+0x148>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 fca9 	bl	800028c <__adddf3>
 800c93a:	4622      	mov	r2, r4
 800c93c:	462b      	mov	r3, r5
 800c93e:	f7f3 fe5b 	bl	80005f8 <__aeabi_dmul>
 800c942:	a33b      	add	r3, pc, #236	; (adr r3, 800ca30 <__kernel_cos+0x150>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fc9e 	bl	8000288 <__aeabi_dsub>
 800c94c:	4622      	mov	r2, r4
 800c94e:	462b      	mov	r3, r5
 800c950:	f7f3 fe52 	bl	80005f8 <__aeabi_dmul>
 800c954:	a338      	add	r3, pc, #224	; (adr r3, 800ca38 <__kernel_cos+0x158>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fc97 	bl	800028c <__adddf3>
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	f7f3 fe49 	bl	80005f8 <__aeabi_dmul>
 800c966:	a336      	add	r3, pc, #216	; (adr r3, 800ca40 <__kernel_cos+0x160>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc8c 	bl	8000288 <__aeabi_dsub>
 800c970:	4622      	mov	r2, r4
 800c972:	462b      	mov	r3, r5
 800c974:	f7f3 fe40 	bl	80005f8 <__aeabi_dmul>
 800c978:	a333      	add	r3, pc, #204	; (adr r3, 800ca48 <__kernel_cos+0x168>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc85 	bl	800028c <__adddf3>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fe37 	bl	80005f8 <__aeabi_dmul>
 800c98a:	4622      	mov	r2, r4
 800c98c:	462b      	mov	r3, r5
 800c98e:	f7f3 fe33 	bl	80005f8 <__aeabi_dmul>
 800c992:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c996:	4604      	mov	r4, r0
 800c998:	460d      	mov	r5, r1
 800c99a:	4630      	mov	r0, r6
 800c99c:	4639      	mov	r1, r7
 800c99e:	f7f3 fe2b 	bl	80005f8 <__aeabi_dmul>
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f7f3 fc6d 	bl	8000288 <__aeabi_dsub>
 800c9ae:	4b2b      	ldr	r3, [pc, #172]	; (800ca5c <__kernel_cos+0x17c>)
 800c9b0:	4598      	cmp	r8, r3
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	dc10      	bgt.n	800c9da <__kernel_cos+0xfa>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4650      	mov	r0, sl
 800c9be:	4659      	mov	r1, fp
 800c9c0:	f7f3 fc62 	bl	8000288 <__aeabi_dsub>
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4926      	ldr	r1, [pc, #152]	; (800ca60 <__kernel_cos+0x180>)
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	f7f3 fc5c 	bl	8000288 <__aeabi_dsub>
 800c9d0:	ec41 0b10 	vmov	d0, r0, r1
 800c9d4:	b003      	add	sp, #12
 800c9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9da:	4b22      	ldr	r3, [pc, #136]	; (800ca64 <__kernel_cos+0x184>)
 800c9dc:	4920      	ldr	r1, [pc, #128]	; (800ca60 <__kernel_cos+0x180>)
 800c9de:	4598      	cmp	r8, r3
 800c9e0:	bfcc      	ite	gt
 800c9e2:	4d21      	ldrgt	r5, [pc, #132]	; (800ca68 <__kernel_cos+0x188>)
 800c9e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c9e8:	2400      	movs	r4, #0
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	f7f3 fc4a 	bl	8000288 <__aeabi_dsub>
 800c9f4:	4622      	mov	r2, r4
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4689      	mov	r9, r1
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	4650      	mov	r0, sl
 800c9fe:	4659      	mov	r1, fp
 800ca00:	f7f3 fc42 	bl	8000288 <__aeabi_dsub>
 800ca04:	4632      	mov	r2, r6
 800ca06:	463b      	mov	r3, r7
 800ca08:	f7f3 fc3e 	bl	8000288 <__aeabi_dsub>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4640      	mov	r0, r8
 800ca12:	4649      	mov	r1, r9
 800ca14:	e7da      	b.n	800c9cc <__kernel_cos+0xec>
 800ca16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ca50 <__kernel_cos+0x170>
 800ca1a:	e7db      	b.n	800c9d4 <__kernel_cos+0xf4>
 800ca1c:	f3af 8000 	nop.w
 800ca20:	be8838d4 	.word	0xbe8838d4
 800ca24:	bda8fae9 	.word	0xbda8fae9
 800ca28:	bdb4b1c4 	.word	0xbdb4b1c4
 800ca2c:	3e21ee9e 	.word	0x3e21ee9e
 800ca30:	809c52ad 	.word	0x809c52ad
 800ca34:	3e927e4f 	.word	0x3e927e4f
 800ca38:	19cb1590 	.word	0x19cb1590
 800ca3c:	3efa01a0 	.word	0x3efa01a0
 800ca40:	16c15177 	.word	0x16c15177
 800ca44:	3f56c16c 	.word	0x3f56c16c
 800ca48:	5555554c 	.word	0x5555554c
 800ca4c:	3fa55555 	.word	0x3fa55555
 800ca50:	00000000 	.word	0x00000000
 800ca54:	3ff00000 	.word	0x3ff00000
 800ca58:	3fe00000 	.word	0x3fe00000
 800ca5c:	3fd33332 	.word	0x3fd33332
 800ca60:	3ff00000 	.word	0x3ff00000
 800ca64:	3fe90000 	.word	0x3fe90000
 800ca68:	3fd20000 	.word	0x3fd20000
 800ca6c:	00000000 	.word	0x00000000

0800ca70 <__kernel_rem_pio2>:
 800ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca74:	ed2d 8b02 	vpush	{d8}
 800ca78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ca7c:	f112 0f14 	cmn.w	r2, #20
 800ca80:	9308      	str	r3, [sp, #32]
 800ca82:	9101      	str	r1, [sp, #4]
 800ca84:	4bc4      	ldr	r3, [pc, #784]	; (800cd98 <__kernel_rem_pio2+0x328>)
 800ca86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ca88:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca8e:	9302      	str	r3, [sp, #8]
 800ca90:	9b08      	ldr	r3, [sp, #32]
 800ca92:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ca96:	bfa8      	it	ge
 800ca98:	1ed4      	subge	r4, r2, #3
 800ca9a:	9306      	str	r3, [sp, #24]
 800ca9c:	bfb2      	itee	lt
 800ca9e:	2400      	movlt	r4, #0
 800caa0:	2318      	movge	r3, #24
 800caa2:	fb94 f4f3 	sdivge	r4, r4, r3
 800caa6:	f06f 0317 	mvn.w	r3, #23
 800caaa:	fb04 3303 	mla	r3, r4, r3, r3
 800caae:	eb03 0a02 	add.w	sl, r3, r2
 800cab2:	9b02      	ldr	r3, [sp, #8]
 800cab4:	9a06      	ldr	r2, [sp, #24]
 800cab6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800cd88 <__kernel_rem_pio2+0x318>
 800caba:	eb03 0802 	add.w	r8, r3, r2
 800cabe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cac0:	1aa7      	subs	r7, r4, r2
 800cac2:	ae22      	add	r6, sp, #136	; 0x88
 800cac4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cac8:	2500      	movs	r5, #0
 800caca:	4545      	cmp	r5, r8
 800cacc:	dd13      	ble.n	800caf6 <__kernel_rem_pio2+0x86>
 800cace:	9b08      	ldr	r3, [sp, #32]
 800cad0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800cd88 <__kernel_rem_pio2+0x318>
 800cad4:	aa22      	add	r2, sp, #136	; 0x88
 800cad6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cada:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800cade:	f04f 0800 	mov.w	r8, #0
 800cae2:	9b02      	ldr	r3, [sp, #8]
 800cae4:	4598      	cmp	r8, r3
 800cae6:	dc2f      	bgt.n	800cb48 <__kernel_rem_pio2+0xd8>
 800cae8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800caec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800caf0:	462f      	mov	r7, r5
 800caf2:	2600      	movs	r6, #0
 800caf4:	e01b      	b.n	800cb2e <__kernel_rem_pio2+0xbe>
 800caf6:	42ef      	cmn	r7, r5
 800caf8:	d407      	bmi.n	800cb0a <__kernel_rem_pio2+0x9a>
 800cafa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cafe:	f7f3 fd11 	bl	8000524 <__aeabi_i2d>
 800cb02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cb06:	3501      	adds	r5, #1
 800cb08:	e7df      	b.n	800caca <__kernel_rem_pio2+0x5a>
 800cb0a:	ec51 0b18 	vmov	r0, r1, d8
 800cb0e:	e7f8      	b.n	800cb02 <__kernel_rem_pio2+0x92>
 800cb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cb18:	f7f3 fd6e 	bl	80005f8 <__aeabi_dmul>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb24:	f7f3 fbb2 	bl	800028c <__adddf3>
 800cb28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb2c:	3601      	adds	r6, #1
 800cb2e:	9b06      	ldr	r3, [sp, #24]
 800cb30:	429e      	cmp	r6, r3
 800cb32:	f1a7 0708 	sub.w	r7, r7, #8
 800cb36:	ddeb      	ble.n	800cb10 <__kernel_rem_pio2+0xa0>
 800cb38:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cb3c:	f108 0801 	add.w	r8, r8, #1
 800cb40:	ecab 7b02 	vstmia	fp!, {d7}
 800cb44:	3508      	adds	r5, #8
 800cb46:	e7cc      	b.n	800cae2 <__kernel_rem_pio2+0x72>
 800cb48:	9b02      	ldr	r3, [sp, #8]
 800cb4a:	aa0e      	add	r2, sp, #56	; 0x38
 800cb4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb50:	930d      	str	r3, [sp, #52]	; 0x34
 800cb52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cb54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb58:	9c02      	ldr	r4, [sp, #8]
 800cb5a:	930c      	str	r3, [sp, #48]	; 0x30
 800cb5c:	00e3      	lsls	r3, r4, #3
 800cb5e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb60:	ab9a      	add	r3, sp, #616	; 0x268
 800cb62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cb6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800cb6e:	ab72      	add	r3, sp, #456	; 0x1c8
 800cb70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cb74:	46c3      	mov	fp, r8
 800cb76:	46a1      	mov	r9, r4
 800cb78:	f1b9 0f00 	cmp.w	r9, #0
 800cb7c:	f1a5 0508 	sub.w	r5, r5, #8
 800cb80:	dc77      	bgt.n	800cc72 <__kernel_rem_pio2+0x202>
 800cb82:	ec47 6b10 	vmov	d0, r6, r7
 800cb86:	4650      	mov	r0, sl
 800cb88:	f000 fc6e 	bl	800d468 <scalbn>
 800cb8c:	ec57 6b10 	vmov	r6, r7, d0
 800cb90:	2200      	movs	r2, #0
 800cb92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cb96:	ee10 0a10 	vmov	r0, s0
 800cb9a:	4639      	mov	r1, r7
 800cb9c:	f7f3 fd2c 	bl	80005f8 <__aeabi_dmul>
 800cba0:	ec41 0b10 	vmov	d0, r0, r1
 800cba4:	f000 fbd8 	bl	800d358 <floor>
 800cba8:	4b7c      	ldr	r3, [pc, #496]	; (800cd9c <__kernel_rem_pio2+0x32c>)
 800cbaa:	ec51 0b10 	vmov	r0, r1, d0
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f7f3 fd22 	bl	80005f8 <__aeabi_dmul>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4630      	mov	r0, r6
 800cbba:	4639      	mov	r1, r7
 800cbbc:	f7f3 fb64 	bl	8000288 <__aeabi_dsub>
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	f7f3 ffc8 	bl	8000b58 <__aeabi_d2iz>
 800cbc8:	9004      	str	r0, [sp, #16]
 800cbca:	f7f3 fcab 	bl	8000524 <__aeabi_i2d>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	f7f3 fb57 	bl	8000288 <__aeabi_dsub>
 800cbda:	f1ba 0f00 	cmp.w	sl, #0
 800cbde:	4606      	mov	r6, r0
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	dd6d      	ble.n	800ccc0 <__kernel_rem_pio2+0x250>
 800cbe4:	1e62      	subs	r2, r4, #1
 800cbe6:	ab0e      	add	r3, sp, #56	; 0x38
 800cbe8:	9d04      	ldr	r5, [sp, #16]
 800cbea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cbee:	f1ca 0118 	rsb	r1, sl, #24
 800cbf2:	fa40 f301 	asr.w	r3, r0, r1
 800cbf6:	441d      	add	r5, r3
 800cbf8:	408b      	lsls	r3, r1
 800cbfa:	1ac0      	subs	r0, r0, r3
 800cbfc:	ab0e      	add	r3, sp, #56	; 0x38
 800cbfe:	9504      	str	r5, [sp, #16]
 800cc00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cc04:	f1ca 0317 	rsb	r3, sl, #23
 800cc08:	fa40 fb03 	asr.w	fp, r0, r3
 800cc0c:	f1bb 0f00 	cmp.w	fp, #0
 800cc10:	dd65      	ble.n	800ccde <__kernel_rem_pio2+0x26e>
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	2200      	movs	r2, #0
 800cc16:	3301      	adds	r3, #1
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	4615      	mov	r5, r2
 800cc1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cc20:	4294      	cmp	r4, r2
 800cc22:	f300 809c 	bgt.w	800cd5e <__kernel_rem_pio2+0x2ee>
 800cc26:	f1ba 0f00 	cmp.w	sl, #0
 800cc2a:	dd07      	ble.n	800cc3c <__kernel_rem_pio2+0x1cc>
 800cc2c:	f1ba 0f01 	cmp.w	sl, #1
 800cc30:	f000 80c0 	beq.w	800cdb4 <__kernel_rem_pio2+0x344>
 800cc34:	f1ba 0f02 	cmp.w	sl, #2
 800cc38:	f000 80c6 	beq.w	800cdc8 <__kernel_rem_pio2+0x358>
 800cc3c:	f1bb 0f02 	cmp.w	fp, #2
 800cc40:	d14d      	bne.n	800ccde <__kernel_rem_pio2+0x26e>
 800cc42:	4632      	mov	r2, r6
 800cc44:	463b      	mov	r3, r7
 800cc46:	4956      	ldr	r1, [pc, #344]	; (800cda0 <__kernel_rem_pio2+0x330>)
 800cc48:	2000      	movs	r0, #0
 800cc4a:	f7f3 fb1d 	bl	8000288 <__aeabi_dsub>
 800cc4e:	4606      	mov	r6, r0
 800cc50:	460f      	mov	r7, r1
 800cc52:	2d00      	cmp	r5, #0
 800cc54:	d043      	beq.n	800ccde <__kernel_rem_pio2+0x26e>
 800cc56:	4650      	mov	r0, sl
 800cc58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cd90 <__kernel_rem_pio2+0x320>
 800cc5c:	f000 fc04 	bl	800d468 <scalbn>
 800cc60:	4630      	mov	r0, r6
 800cc62:	4639      	mov	r1, r7
 800cc64:	ec53 2b10 	vmov	r2, r3, d0
 800cc68:	f7f3 fb0e 	bl	8000288 <__aeabi_dsub>
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	460f      	mov	r7, r1
 800cc70:	e035      	b.n	800ccde <__kernel_rem_pio2+0x26e>
 800cc72:	4b4c      	ldr	r3, [pc, #304]	; (800cda4 <__kernel_rem_pio2+0x334>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	f7f3 fcbd 	bl	80005f8 <__aeabi_dmul>
 800cc7e:	f7f3 ff6b 	bl	8000b58 <__aeabi_d2iz>
 800cc82:	f7f3 fc4f 	bl	8000524 <__aeabi_i2d>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	ec43 2b18 	vmov	d8, r2, r3
 800cc8e:	4b46      	ldr	r3, [pc, #280]	; (800cda8 <__kernel_rem_pio2+0x338>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	f7f3 fcb1 	bl	80005f8 <__aeabi_dmul>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	f7f3 faf3 	bl	8000288 <__aeabi_dsub>
 800cca2:	f7f3 ff59 	bl	8000b58 <__aeabi_d2iz>
 800cca6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccaa:	f84b 0b04 	str.w	r0, [fp], #4
 800ccae:	ec51 0b18 	vmov	r0, r1, d8
 800ccb2:	f7f3 faeb 	bl	800028c <__adddf3>
 800ccb6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	e75b      	b.n	800cb78 <__kernel_rem_pio2+0x108>
 800ccc0:	d106      	bne.n	800ccd0 <__kernel_rem_pio2+0x260>
 800ccc2:	1e63      	subs	r3, r4, #1
 800ccc4:	aa0e      	add	r2, sp, #56	; 0x38
 800ccc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ccca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ccce:	e79d      	b.n	800cc0c <__kernel_rem_pio2+0x19c>
 800ccd0:	4b36      	ldr	r3, [pc, #216]	; (800cdac <__kernel_rem_pio2+0x33c>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f7f3 ff16 	bl	8000b04 <__aeabi_dcmpge>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d13d      	bne.n	800cd58 <__kernel_rem_pio2+0x2e8>
 800ccdc:	4683      	mov	fp, r0
 800ccde:	2200      	movs	r2, #0
 800cce0:	2300      	movs	r3, #0
 800cce2:	4630      	mov	r0, r6
 800cce4:	4639      	mov	r1, r7
 800cce6:	f7f3 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	f000 80c0 	beq.w	800ce70 <__kernel_rem_pio2+0x400>
 800ccf0:	1e65      	subs	r5, r4, #1
 800ccf2:	462b      	mov	r3, r5
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	9902      	ldr	r1, [sp, #8]
 800ccf8:	428b      	cmp	r3, r1
 800ccfa:	da6c      	bge.n	800cdd6 <__kernel_rem_pio2+0x366>
 800ccfc:	2a00      	cmp	r2, #0
 800ccfe:	f000 8089 	beq.w	800ce14 <__kernel_rem_pio2+0x3a4>
 800cd02:	ab0e      	add	r3, sp, #56	; 0x38
 800cd04:	f1aa 0a18 	sub.w	sl, sl, #24
 800cd08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f000 80ad 	beq.w	800ce6c <__kernel_rem_pio2+0x3fc>
 800cd12:	4650      	mov	r0, sl
 800cd14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cd90 <__kernel_rem_pio2+0x320>
 800cd18:	f000 fba6 	bl	800d468 <scalbn>
 800cd1c:	ab9a      	add	r3, sp, #616	; 0x268
 800cd1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cd22:	ec57 6b10 	vmov	r6, r7, d0
 800cd26:	00ec      	lsls	r4, r5, #3
 800cd28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800cd2c:	46aa      	mov	sl, r5
 800cd2e:	f1ba 0f00 	cmp.w	sl, #0
 800cd32:	f280 80d6 	bge.w	800cee2 <__kernel_rem_pio2+0x472>
 800cd36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800cd88 <__kernel_rem_pio2+0x318>
 800cd3a:	462e      	mov	r6, r5
 800cd3c:	2e00      	cmp	r6, #0
 800cd3e:	f2c0 8104 	blt.w	800cf4a <__kernel_rem_pio2+0x4da>
 800cd42:	ab72      	add	r3, sp, #456	; 0x1c8
 800cd44:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cd48:	f8df a064 	ldr.w	sl, [pc, #100]	; 800cdb0 <__kernel_rem_pio2+0x340>
 800cd4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800cd50:	f04f 0800 	mov.w	r8, #0
 800cd54:	1baf      	subs	r7, r5, r6
 800cd56:	e0ea      	b.n	800cf2e <__kernel_rem_pio2+0x4be>
 800cd58:	f04f 0b02 	mov.w	fp, #2
 800cd5c:	e759      	b.n	800cc12 <__kernel_rem_pio2+0x1a2>
 800cd5e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd62:	b955      	cbnz	r5, 800cd7a <__kernel_rem_pio2+0x30a>
 800cd64:	b123      	cbz	r3, 800cd70 <__kernel_rem_pio2+0x300>
 800cd66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cd6a:	f8c8 3000 	str.w	r3, [r8]
 800cd6e:	2301      	movs	r3, #1
 800cd70:	3201      	adds	r2, #1
 800cd72:	f108 0804 	add.w	r8, r8, #4
 800cd76:	461d      	mov	r5, r3
 800cd78:	e752      	b.n	800cc20 <__kernel_rem_pio2+0x1b0>
 800cd7a:	1acb      	subs	r3, r1, r3
 800cd7c:	f8c8 3000 	str.w	r3, [r8]
 800cd80:	462b      	mov	r3, r5
 800cd82:	e7f5      	b.n	800cd70 <__kernel_rem_pio2+0x300>
 800cd84:	f3af 8000 	nop.w
	...
 800cd94:	3ff00000 	.word	0x3ff00000
 800cd98:	0800d918 	.word	0x0800d918
 800cd9c:	40200000 	.word	0x40200000
 800cda0:	3ff00000 	.word	0x3ff00000
 800cda4:	3e700000 	.word	0x3e700000
 800cda8:	41700000 	.word	0x41700000
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	0800d8d8 	.word	0x0800d8d8
 800cdb4:	1e62      	subs	r2, r4, #1
 800cdb6:	ab0e      	add	r3, sp, #56	; 0x38
 800cdb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cdc0:	a90e      	add	r1, sp, #56	; 0x38
 800cdc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cdc6:	e739      	b.n	800cc3c <__kernel_rem_pio2+0x1cc>
 800cdc8:	1e62      	subs	r2, r4, #1
 800cdca:	ab0e      	add	r3, sp, #56	; 0x38
 800cdcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cdd4:	e7f4      	b.n	800cdc0 <__kernel_rem_pio2+0x350>
 800cdd6:	a90e      	add	r1, sp, #56	; 0x38
 800cdd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	430a      	orrs	r2, r1
 800cde0:	e789      	b.n	800ccf6 <__kernel_rem_pio2+0x286>
 800cde2:	3301      	adds	r3, #1
 800cde4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cde8:	2900      	cmp	r1, #0
 800cdea:	d0fa      	beq.n	800cde2 <__kernel_rem_pio2+0x372>
 800cdec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cdf2:	446a      	add	r2, sp
 800cdf4:	3a98      	subs	r2, #152	; 0x98
 800cdf6:	920a      	str	r2, [sp, #40]	; 0x28
 800cdf8:	9a08      	ldr	r2, [sp, #32]
 800cdfa:	18e3      	adds	r3, r4, r3
 800cdfc:	18a5      	adds	r5, r4, r2
 800cdfe:	aa22      	add	r2, sp, #136	; 0x88
 800ce00:	f104 0801 	add.w	r8, r4, #1
 800ce04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ce08:	9304      	str	r3, [sp, #16]
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	4543      	cmp	r3, r8
 800ce0e:	da04      	bge.n	800ce1a <__kernel_rem_pio2+0x3aa>
 800ce10:	461c      	mov	r4, r3
 800ce12:	e6a3      	b.n	800cb5c <__kernel_rem_pio2+0xec>
 800ce14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce16:	2301      	movs	r3, #1
 800ce18:	e7e4      	b.n	800cde4 <__kernel_rem_pio2+0x374>
 800ce1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ce20:	f7f3 fb80 	bl	8000524 <__aeabi_i2d>
 800ce24:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ce28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce2a:	46ab      	mov	fp, r5
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	f04f 0900 	mov.w	r9, #0
 800ce32:	2600      	movs	r6, #0
 800ce34:	2700      	movs	r7, #0
 800ce36:	9b06      	ldr	r3, [sp, #24]
 800ce38:	4599      	cmp	r9, r3
 800ce3a:	dd06      	ble.n	800ce4a <__kernel_rem_pio2+0x3da>
 800ce3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ce42:	f108 0801 	add.w	r8, r8, #1
 800ce46:	930a      	str	r3, [sp, #40]	; 0x28
 800ce48:	e7df      	b.n	800ce0a <__kernel_rem_pio2+0x39a>
 800ce4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ce4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ce52:	f7f3 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	f7f3 fa15 	bl	800028c <__adddf3>
 800ce62:	f109 0901 	add.w	r9, r9, #1
 800ce66:	4606      	mov	r6, r0
 800ce68:	460f      	mov	r7, r1
 800ce6a:	e7e4      	b.n	800ce36 <__kernel_rem_pio2+0x3c6>
 800ce6c:	3d01      	subs	r5, #1
 800ce6e:	e748      	b.n	800cd02 <__kernel_rem_pio2+0x292>
 800ce70:	ec47 6b10 	vmov	d0, r6, r7
 800ce74:	f1ca 0000 	rsb	r0, sl, #0
 800ce78:	f000 faf6 	bl	800d468 <scalbn>
 800ce7c:	ec57 6b10 	vmov	r6, r7, d0
 800ce80:	4ba0      	ldr	r3, [pc, #640]	; (800d104 <__kernel_rem_pio2+0x694>)
 800ce82:	ee10 0a10 	vmov	r0, s0
 800ce86:	2200      	movs	r2, #0
 800ce88:	4639      	mov	r1, r7
 800ce8a:	f7f3 fe3b 	bl	8000b04 <__aeabi_dcmpge>
 800ce8e:	b1f8      	cbz	r0, 800ced0 <__kernel_rem_pio2+0x460>
 800ce90:	4b9d      	ldr	r3, [pc, #628]	; (800d108 <__kernel_rem_pio2+0x698>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	4630      	mov	r0, r6
 800ce96:	4639      	mov	r1, r7
 800ce98:	f7f3 fbae 	bl	80005f8 <__aeabi_dmul>
 800ce9c:	f7f3 fe5c 	bl	8000b58 <__aeabi_d2iz>
 800cea0:	4680      	mov	r8, r0
 800cea2:	f7f3 fb3f 	bl	8000524 <__aeabi_i2d>
 800cea6:	4b97      	ldr	r3, [pc, #604]	; (800d104 <__kernel_rem_pio2+0x694>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f7f3 fba5 	bl	80005f8 <__aeabi_dmul>
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f7f3 f9e7 	bl	8000288 <__aeabi_dsub>
 800ceba:	f7f3 fe4d 	bl	8000b58 <__aeabi_d2iz>
 800cebe:	1c65      	adds	r5, r4, #1
 800cec0:	ab0e      	add	r3, sp, #56	; 0x38
 800cec2:	f10a 0a18 	add.w	sl, sl, #24
 800cec6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ceca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cece:	e720      	b.n	800cd12 <__kernel_rem_pio2+0x2a2>
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 fe40 	bl	8000b58 <__aeabi_d2iz>
 800ced8:	ab0e      	add	r3, sp, #56	; 0x38
 800ceda:	4625      	mov	r5, r4
 800cedc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cee0:	e717      	b.n	800cd12 <__kernel_rem_pio2+0x2a2>
 800cee2:	ab0e      	add	r3, sp, #56	; 0x38
 800cee4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cee8:	f7f3 fb1c 	bl	8000524 <__aeabi_i2d>
 800ceec:	4632      	mov	r2, r6
 800ceee:	463b      	mov	r3, r7
 800cef0:	f7f3 fb82 	bl	80005f8 <__aeabi_dmul>
 800cef4:	4b84      	ldr	r3, [pc, #528]	; (800d108 <__kernel_rem_pio2+0x698>)
 800cef6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cefa:	2200      	movs	r2, #0
 800cefc:	4630      	mov	r0, r6
 800cefe:	4639      	mov	r1, r7
 800cf00:	f7f3 fb7a 	bl	80005f8 <__aeabi_dmul>
 800cf04:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cf08:	4606      	mov	r6, r0
 800cf0a:	460f      	mov	r7, r1
 800cf0c:	e70f      	b.n	800cd2e <__kernel_rem_pio2+0x2be>
 800cf0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cf12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800cf16:	f7f3 fb6f 	bl	80005f8 <__aeabi_dmul>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf22:	f7f3 f9b3 	bl	800028c <__adddf3>
 800cf26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf2a:	f108 0801 	add.w	r8, r8, #1
 800cf2e:	9b02      	ldr	r3, [sp, #8]
 800cf30:	4598      	cmp	r8, r3
 800cf32:	dc01      	bgt.n	800cf38 <__kernel_rem_pio2+0x4c8>
 800cf34:	45b8      	cmp	r8, r7
 800cf36:	ddea      	ble.n	800cf0e <__kernel_rem_pio2+0x49e>
 800cf38:	ed9d 7b06 	vldr	d7, [sp, #24]
 800cf3c:	ab4a      	add	r3, sp, #296	; 0x128
 800cf3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cf42:	ed87 7b00 	vstr	d7, [r7]
 800cf46:	3e01      	subs	r6, #1
 800cf48:	e6f8      	b.n	800cd3c <__kernel_rem_pio2+0x2cc>
 800cf4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	dc0b      	bgt.n	800cf68 <__kernel_rem_pio2+0x4f8>
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	dc35      	bgt.n	800cfc0 <__kernel_rem_pio2+0x550>
 800cf54:	d059      	beq.n	800d00a <__kernel_rem_pio2+0x59a>
 800cf56:	9b04      	ldr	r3, [sp, #16]
 800cf58:	f003 0007 	and.w	r0, r3, #7
 800cf5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cf60:	ecbd 8b02 	vpop	{d8}
 800cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d1f3      	bne.n	800cf56 <__kernel_rem_pio2+0x4e6>
 800cf6e:	ab4a      	add	r3, sp, #296	; 0x128
 800cf70:	4423      	add	r3, r4
 800cf72:	9306      	str	r3, [sp, #24]
 800cf74:	461c      	mov	r4, r3
 800cf76:	469a      	mov	sl, r3
 800cf78:	9502      	str	r5, [sp, #8]
 800cf7a:	9b02      	ldr	r3, [sp, #8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f1aa 0a08 	sub.w	sl, sl, #8
 800cf82:	dc6b      	bgt.n	800d05c <__kernel_rem_pio2+0x5ec>
 800cf84:	46aa      	mov	sl, r5
 800cf86:	f1ba 0f01 	cmp.w	sl, #1
 800cf8a:	f1a4 0408 	sub.w	r4, r4, #8
 800cf8e:	f300 8085 	bgt.w	800d09c <__kernel_rem_pio2+0x62c>
 800cf92:	9c06      	ldr	r4, [sp, #24]
 800cf94:	2000      	movs	r0, #0
 800cf96:	3408      	adds	r4, #8
 800cf98:	2100      	movs	r1, #0
 800cf9a:	2d01      	cmp	r5, #1
 800cf9c:	f300 809d 	bgt.w	800d0da <__kernel_rem_pio2+0x66a>
 800cfa0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cfa4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800cfa8:	f1bb 0f00 	cmp.w	fp, #0
 800cfac:	f040 809b 	bne.w	800d0e6 <__kernel_rem_pio2+0x676>
 800cfb0:	9b01      	ldr	r3, [sp, #4]
 800cfb2:	e9c3 5600 	strd	r5, r6, [r3]
 800cfb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cfba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cfbe:	e7ca      	b.n	800cf56 <__kernel_rem_pio2+0x4e6>
 800cfc0:	3408      	adds	r4, #8
 800cfc2:	ab4a      	add	r3, sp, #296	; 0x128
 800cfc4:	441c      	add	r4, r3
 800cfc6:	462e      	mov	r6, r5
 800cfc8:	2000      	movs	r0, #0
 800cfca:	2100      	movs	r1, #0
 800cfcc:	2e00      	cmp	r6, #0
 800cfce:	da36      	bge.n	800d03e <__kernel_rem_pio2+0x5ce>
 800cfd0:	f1bb 0f00 	cmp.w	fp, #0
 800cfd4:	d039      	beq.n	800d04a <__kernel_rem_pio2+0x5da>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfdc:	9c01      	ldr	r4, [sp, #4]
 800cfde:	e9c4 2300 	strd	r2, r3, [r4]
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cfea:	f7f3 f94d 	bl	8000288 <__aeabi_dsub>
 800cfee:	ae4c      	add	r6, sp, #304	; 0x130
 800cff0:	2401      	movs	r4, #1
 800cff2:	42a5      	cmp	r5, r4
 800cff4:	da2c      	bge.n	800d050 <__kernel_rem_pio2+0x5e0>
 800cff6:	f1bb 0f00 	cmp.w	fp, #0
 800cffa:	d002      	beq.n	800d002 <__kernel_rem_pio2+0x592>
 800cffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d000:	4619      	mov	r1, r3
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d008:	e7a5      	b.n	800cf56 <__kernel_rem_pio2+0x4e6>
 800d00a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d00e:	eb0d 0403 	add.w	r4, sp, r3
 800d012:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d016:	2000      	movs	r0, #0
 800d018:	2100      	movs	r1, #0
 800d01a:	2d00      	cmp	r5, #0
 800d01c:	da09      	bge.n	800d032 <__kernel_rem_pio2+0x5c2>
 800d01e:	f1bb 0f00 	cmp.w	fp, #0
 800d022:	d002      	beq.n	800d02a <__kernel_rem_pio2+0x5ba>
 800d024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d028:	4619      	mov	r1, r3
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	e9c3 0100 	strd	r0, r1, [r3]
 800d030:	e791      	b.n	800cf56 <__kernel_rem_pio2+0x4e6>
 800d032:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d036:	f7f3 f929 	bl	800028c <__adddf3>
 800d03a:	3d01      	subs	r5, #1
 800d03c:	e7ed      	b.n	800d01a <__kernel_rem_pio2+0x5aa>
 800d03e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d042:	f7f3 f923 	bl	800028c <__adddf3>
 800d046:	3e01      	subs	r6, #1
 800d048:	e7c0      	b.n	800cfcc <__kernel_rem_pio2+0x55c>
 800d04a:	4602      	mov	r2, r0
 800d04c:	460b      	mov	r3, r1
 800d04e:	e7c5      	b.n	800cfdc <__kernel_rem_pio2+0x56c>
 800d050:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d054:	f7f3 f91a 	bl	800028c <__adddf3>
 800d058:	3401      	adds	r4, #1
 800d05a:	e7ca      	b.n	800cff2 <__kernel_rem_pio2+0x582>
 800d05c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d060:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d064:	9b02      	ldr	r3, [sp, #8]
 800d066:	3b01      	subs	r3, #1
 800d068:	9302      	str	r3, [sp, #8]
 800d06a:	4632      	mov	r2, r6
 800d06c:	463b      	mov	r3, r7
 800d06e:	4640      	mov	r0, r8
 800d070:	4649      	mov	r1, r9
 800d072:	f7f3 f90b 	bl	800028c <__adddf3>
 800d076:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	4640      	mov	r0, r8
 800d080:	4649      	mov	r1, r9
 800d082:	f7f3 f901 	bl	8000288 <__aeabi_dsub>
 800d086:	4632      	mov	r2, r6
 800d088:	463b      	mov	r3, r7
 800d08a:	f7f3 f8ff 	bl	800028c <__adddf3>
 800d08e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d092:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d096:	ed8a 7b00 	vstr	d7, [sl]
 800d09a:	e76e      	b.n	800cf7a <__kernel_rem_pio2+0x50a>
 800d09c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d0a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	4632      	mov	r2, r6
 800d0a8:	463b      	mov	r3, r7
 800d0aa:	4649      	mov	r1, r9
 800d0ac:	f7f3 f8ee 	bl	800028c <__adddf3>
 800d0b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	f7f3 f8e4 	bl	8000288 <__aeabi_dsub>
 800d0c0:	4632      	mov	r2, r6
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	f7f3 f8e2 	bl	800028c <__adddf3>
 800d0c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d0d0:	ed84 7b00 	vstr	d7, [r4]
 800d0d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d0d8:	e755      	b.n	800cf86 <__kernel_rem_pio2+0x516>
 800d0da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d0de:	f7f3 f8d5 	bl	800028c <__adddf3>
 800d0e2:	3d01      	subs	r5, #1
 800d0e4:	e759      	b.n	800cf9a <__kernel_rem_pio2+0x52a>
 800d0e6:	9b01      	ldr	r3, [sp, #4]
 800d0e8:	9a01      	ldr	r2, [sp, #4]
 800d0ea:	601d      	str	r5, [r3, #0]
 800d0ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d0f0:	605c      	str	r4, [r3, #4]
 800d0f2:	609f      	str	r7, [r3, #8]
 800d0f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d0f8:	60d3      	str	r3, [r2, #12]
 800d0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0fe:	6110      	str	r0, [r2, #16]
 800d100:	6153      	str	r3, [r2, #20]
 800d102:	e728      	b.n	800cf56 <__kernel_rem_pio2+0x4e6>
 800d104:	41700000 	.word	0x41700000
 800d108:	3e700000 	.word	0x3e700000
 800d10c:	00000000 	.word	0x00000000

0800d110 <__kernel_sin>:
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	ed2d 8b04 	vpush	{d8-d9}
 800d118:	eeb0 8a41 	vmov.f32	s16, s2
 800d11c:	eef0 8a61 	vmov.f32	s17, s3
 800d120:	ec55 4b10 	vmov	r4, r5, d0
 800d124:	b083      	sub	sp, #12
 800d126:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d12a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d12e:	9001      	str	r0, [sp, #4]
 800d130:	da06      	bge.n	800d140 <__kernel_sin+0x30>
 800d132:	ee10 0a10 	vmov	r0, s0
 800d136:	4629      	mov	r1, r5
 800d138:	f7f3 fd0e 	bl	8000b58 <__aeabi_d2iz>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d051      	beq.n	800d1e4 <__kernel_sin+0xd4>
 800d140:	4622      	mov	r2, r4
 800d142:	462b      	mov	r3, r5
 800d144:	4620      	mov	r0, r4
 800d146:	4629      	mov	r1, r5
 800d148:	f7f3 fa56 	bl	80005f8 <__aeabi_dmul>
 800d14c:	4682      	mov	sl, r0
 800d14e:	468b      	mov	fp, r1
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4620      	mov	r0, r4
 800d156:	4629      	mov	r1, r5
 800d158:	f7f3 fa4e 	bl	80005f8 <__aeabi_dmul>
 800d15c:	a341      	add	r3, pc, #260	; (adr r3, 800d264 <__kernel_sin+0x154>)
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	4680      	mov	r8, r0
 800d164:	4689      	mov	r9, r1
 800d166:	4650      	mov	r0, sl
 800d168:	4659      	mov	r1, fp
 800d16a:	f7f3 fa45 	bl	80005f8 <__aeabi_dmul>
 800d16e:	a33f      	add	r3, pc, #252	; (adr r3, 800d26c <__kernel_sin+0x15c>)
 800d170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d174:	f7f3 f888 	bl	8000288 <__aeabi_dsub>
 800d178:	4652      	mov	r2, sl
 800d17a:	465b      	mov	r3, fp
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	a33c      	add	r3, pc, #240	; (adr r3, 800d274 <__kernel_sin+0x164>)
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	f7f3 f881 	bl	800028c <__adddf3>
 800d18a:	4652      	mov	r2, sl
 800d18c:	465b      	mov	r3, fp
 800d18e:	f7f3 fa33 	bl	80005f8 <__aeabi_dmul>
 800d192:	a33a      	add	r3, pc, #232	; (adr r3, 800d27c <__kernel_sin+0x16c>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f7f3 f876 	bl	8000288 <__aeabi_dsub>
 800d19c:	4652      	mov	r2, sl
 800d19e:	465b      	mov	r3, fp
 800d1a0:	f7f3 fa2a 	bl	80005f8 <__aeabi_dmul>
 800d1a4:	a337      	add	r3, pc, #220	; (adr r3, 800d284 <__kernel_sin+0x174>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f7f3 f86f 	bl	800028c <__adddf3>
 800d1ae:	9b01      	ldr	r3, [sp, #4]
 800d1b0:	4606      	mov	r6, r0
 800d1b2:	460f      	mov	r7, r1
 800d1b4:	b9eb      	cbnz	r3, 800d1f2 <__kernel_sin+0xe2>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4650      	mov	r0, sl
 800d1bc:	4659      	mov	r1, fp
 800d1be:	f7f3 fa1b 	bl	80005f8 <__aeabi_dmul>
 800d1c2:	a325      	add	r3, pc, #148	; (adr r3, 800d258 <__kernel_sin+0x148>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f7f3 f85e 	bl	8000288 <__aeabi_dsub>
 800d1cc:	4642      	mov	r2, r8
 800d1ce:	464b      	mov	r3, r9
 800d1d0:	f7f3 fa12 	bl	80005f8 <__aeabi_dmul>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	4620      	mov	r0, r4
 800d1da:	4629      	mov	r1, r5
 800d1dc:	f7f3 f856 	bl	800028c <__adddf3>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	460d      	mov	r5, r1
 800d1e4:	ec45 4b10 	vmov	d0, r4, r5
 800d1e8:	b003      	add	sp, #12
 800d1ea:	ecbd 8b04 	vpop	{d8-d9}
 800d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f2:	4b1b      	ldr	r3, [pc, #108]	; (800d260 <__kernel_sin+0x150>)
 800d1f4:	ec51 0b18 	vmov	r0, r1, d8
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f7f3 f9fd 	bl	80005f8 <__aeabi_dmul>
 800d1fe:	4632      	mov	r2, r6
 800d200:	ec41 0b19 	vmov	d9, r0, r1
 800d204:	463b      	mov	r3, r7
 800d206:	4640      	mov	r0, r8
 800d208:	4649      	mov	r1, r9
 800d20a:	f7f3 f9f5 	bl	80005f8 <__aeabi_dmul>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	ec51 0b19 	vmov	r0, r1, d9
 800d216:	f7f3 f837 	bl	8000288 <__aeabi_dsub>
 800d21a:	4652      	mov	r2, sl
 800d21c:	465b      	mov	r3, fp
 800d21e:	f7f3 f9eb 	bl	80005f8 <__aeabi_dmul>
 800d222:	ec53 2b18 	vmov	r2, r3, d8
 800d226:	f7f3 f82f 	bl	8000288 <__aeabi_dsub>
 800d22a:	a30b      	add	r3, pc, #44	; (adr r3, 800d258 <__kernel_sin+0x148>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	4606      	mov	r6, r0
 800d232:	460f      	mov	r7, r1
 800d234:	4640      	mov	r0, r8
 800d236:	4649      	mov	r1, r9
 800d238:	f7f3 f9de 	bl	80005f8 <__aeabi_dmul>
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 f822 	bl	800028c <__adddf3>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	4620      	mov	r0, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7f3 f81a 	bl	8000288 <__aeabi_dsub>
 800d254:	e7c4      	b.n	800d1e0 <__kernel_sin+0xd0>
 800d256:	bf00      	nop
 800d258:	55555549 	.word	0x55555549
 800d25c:	3fc55555 	.word	0x3fc55555
 800d260:	3fe00000 	.word	0x3fe00000
 800d264:	5acfd57c 	.word	0x5acfd57c
 800d268:	3de5d93a 	.word	0x3de5d93a
 800d26c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d270:	3e5ae5e6 	.word	0x3e5ae5e6
 800d274:	57b1fe7d 	.word	0x57b1fe7d
 800d278:	3ec71de3 	.word	0x3ec71de3
 800d27c:	19c161d5 	.word	0x19c161d5
 800d280:	3f2a01a0 	.word	0x3f2a01a0
 800d284:	1110f8a6 	.word	0x1110f8a6
 800d288:	3f811111 	.word	0x3f811111

0800d28c <with_errno>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	4604      	mov	r4, r0
 800d290:	460d      	mov	r5, r1
 800d292:	4616      	mov	r6, r2
 800d294:	f7fd f830 	bl	800a2f8 <__errno>
 800d298:	4629      	mov	r1, r5
 800d29a:	6006      	str	r6, [r0, #0]
 800d29c:	4620      	mov	r0, r4
 800d29e:	bd70      	pop	{r4, r5, r6, pc}

0800d2a0 <xflow>:
 800d2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2a2:	4614      	mov	r4, r2
 800d2a4:	461d      	mov	r5, r3
 800d2a6:	b108      	cbz	r0, 800d2ac <xflow+0xc>
 800d2a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d2ac:	e9cd 2300 	strd	r2, r3, [sp]
 800d2b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	f7f3 f99e 	bl	80005f8 <__aeabi_dmul>
 800d2bc:	2222      	movs	r2, #34	; 0x22
 800d2be:	b003      	add	sp, #12
 800d2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2c4:	f7ff bfe2 	b.w	800d28c <with_errno>

0800d2c8 <__math_uflow>:
 800d2c8:	b508      	push	{r3, lr}
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2d0:	f7ff ffe6 	bl	800d2a0 <xflow>
 800d2d4:	ec41 0b10 	vmov	d0, r0, r1
 800d2d8:	bd08      	pop	{r3, pc}

0800d2da <__math_oflow>:
 800d2da:	b508      	push	{r3, lr}
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d2e2:	f7ff ffdd 	bl	800d2a0 <xflow>
 800d2e6:	ec41 0b10 	vmov	d0, r0, r1
 800d2ea:	bd08      	pop	{r3, pc}

0800d2ec <with_errnof>:
 800d2ec:	b513      	push	{r0, r1, r4, lr}
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d2f4:	f7fd f800 	bl	800a2f8 <__errno>
 800d2f8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d2fc:	6004      	str	r4, [r0, #0]
 800d2fe:	b002      	add	sp, #8
 800d300:	bd10      	pop	{r4, pc}

0800d302 <xflowf>:
 800d302:	b130      	cbz	r0, 800d312 <xflowf+0x10>
 800d304:	eef1 7a40 	vneg.f32	s15, s0
 800d308:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d30c:	2022      	movs	r0, #34	; 0x22
 800d30e:	f7ff bfed 	b.w	800d2ec <with_errnof>
 800d312:	eef0 7a40 	vmov.f32	s15, s0
 800d316:	e7f7      	b.n	800d308 <xflowf+0x6>

0800d318 <__math_uflowf>:
 800d318:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d320 <__math_uflowf+0x8>
 800d31c:	f7ff bff1 	b.w	800d302 <xflowf>
 800d320:	10000000 	.word	0x10000000

0800d324 <__math_oflowf>:
 800d324:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d32c <__math_oflowf+0x8>
 800d328:	f7ff bfeb 	b.w	800d302 <xflowf>
 800d32c:	70000000 	.word	0x70000000

0800d330 <fabs>:
 800d330:	ec51 0b10 	vmov	r0, r1, d0
 800d334:	ee10 2a10 	vmov	r2, s0
 800d338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d33c:	ec43 2b10 	vmov	d0, r2, r3
 800d340:	4770      	bx	lr

0800d342 <finite>:
 800d342:	b082      	sub	sp, #8
 800d344:	ed8d 0b00 	vstr	d0, [sp]
 800d348:	9801      	ldr	r0, [sp, #4]
 800d34a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d34e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d352:	0fc0      	lsrs	r0, r0, #31
 800d354:	b002      	add	sp, #8
 800d356:	4770      	bx	lr

0800d358 <floor>:
 800d358:	ec51 0b10 	vmov	r0, r1, d0
 800d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d360:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d364:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d368:	2e13      	cmp	r6, #19
 800d36a:	ee10 5a10 	vmov	r5, s0
 800d36e:	ee10 8a10 	vmov	r8, s0
 800d372:	460c      	mov	r4, r1
 800d374:	dc32      	bgt.n	800d3dc <floor+0x84>
 800d376:	2e00      	cmp	r6, #0
 800d378:	da14      	bge.n	800d3a4 <floor+0x4c>
 800d37a:	a333      	add	r3, pc, #204	; (adr r3, 800d448 <floor+0xf0>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f2 ff84 	bl	800028c <__adddf3>
 800d384:	2200      	movs	r2, #0
 800d386:	2300      	movs	r3, #0
 800d388:	f7f3 fbc6 	bl	8000b18 <__aeabi_dcmpgt>
 800d38c:	b138      	cbz	r0, 800d39e <floor+0x46>
 800d38e:	2c00      	cmp	r4, #0
 800d390:	da57      	bge.n	800d442 <floor+0xea>
 800d392:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d396:	431d      	orrs	r5, r3
 800d398:	d001      	beq.n	800d39e <floor+0x46>
 800d39a:	4c2d      	ldr	r4, [pc, #180]	; (800d450 <floor+0xf8>)
 800d39c:	2500      	movs	r5, #0
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	e025      	b.n	800d3f0 <floor+0x98>
 800d3a4:	4f2b      	ldr	r7, [pc, #172]	; (800d454 <floor+0xfc>)
 800d3a6:	4137      	asrs	r7, r6
 800d3a8:	ea01 0307 	and.w	r3, r1, r7
 800d3ac:	4303      	orrs	r3, r0
 800d3ae:	d01f      	beq.n	800d3f0 <floor+0x98>
 800d3b0:	a325      	add	r3, pc, #148	; (adr r3, 800d448 <floor+0xf0>)
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	f7f2 ff69 	bl	800028c <__adddf3>
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f7f3 fbab 	bl	8000b18 <__aeabi_dcmpgt>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d0eb      	beq.n	800d39e <floor+0x46>
 800d3c6:	2c00      	cmp	r4, #0
 800d3c8:	bfbe      	ittt	lt
 800d3ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d3ce:	fa43 f606 	asrlt.w	r6, r3, r6
 800d3d2:	19a4      	addlt	r4, r4, r6
 800d3d4:	ea24 0407 	bic.w	r4, r4, r7
 800d3d8:	2500      	movs	r5, #0
 800d3da:	e7e0      	b.n	800d39e <floor+0x46>
 800d3dc:	2e33      	cmp	r6, #51	; 0x33
 800d3de:	dd0b      	ble.n	800d3f8 <floor+0xa0>
 800d3e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d3e4:	d104      	bne.n	800d3f0 <floor+0x98>
 800d3e6:	ee10 2a10 	vmov	r2, s0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	f7f2 ff4e 	bl	800028c <__adddf3>
 800d3f0:	ec41 0b10 	vmov	d0, r0, r1
 800d3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d400:	fa23 f707 	lsr.w	r7, r3, r7
 800d404:	4207      	tst	r7, r0
 800d406:	d0f3      	beq.n	800d3f0 <floor+0x98>
 800d408:	a30f      	add	r3, pc, #60	; (adr r3, 800d448 <floor+0xf0>)
 800d40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40e:	f7f2 ff3d 	bl	800028c <__adddf3>
 800d412:	2200      	movs	r2, #0
 800d414:	2300      	movs	r3, #0
 800d416:	f7f3 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d0bf      	beq.n	800d39e <floor+0x46>
 800d41e:	2c00      	cmp	r4, #0
 800d420:	da02      	bge.n	800d428 <floor+0xd0>
 800d422:	2e14      	cmp	r6, #20
 800d424:	d103      	bne.n	800d42e <floor+0xd6>
 800d426:	3401      	adds	r4, #1
 800d428:	ea25 0507 	bic.w	r5, r5, r7
 800d42c:	e7b7      	b.n	800d39e <floor+0x46>
 800d42e:	2301      	movs	r3, #1
 800d430:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d434:	fa03 f606 	lsl.w	r6, r3, r6
 800d438:	4435      	add	r5, r6
 800d43a:	4545      	cmp	r5, r8
 800d43c:	bf38      	it	cc
 800d43e:	18e4      	addcc	r4, r4, r3
 800d440:	e7f2      	b.n	800d428 <floor+0xd0>
 800d442:	2500      	movs	r5, #0
 800d444:	462c      	mov	r4, r5
 800d446:	e7aa      	b.n	800d39e <floor+0x46>
 800d448:	8800759c 	.word	0x8800759c
 800d44c:	7e37e43c 	.word	0x7e37e43c
 800d450:	bff00000 	.word	0xbff00000
 800d454:	000fffff 	.word	0x000fffff

0800d458 <nan>:
 800d458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d460 <nan+0x8>
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	00000000 	.word	0x00000000
 800d464:	7ff80000 	.word	0x7ff80000

0800d468 <scalbn>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	ec55 4b10 	vmov	r4, r5, d0
 800d46e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d472:	4606      	mov	r6, r0
 800d474:	462b      	mov	r3, r5
 800d476:	b99a      	cbnz	r2, 800d4a0 <scalbn+0x38>
 800d478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d47c:	4323      	orrs	r3, r4
 800d47e:	d036      	beq.n	800d4ee <scalbn+0x86>
 800d480:	4b39      	ldr	r3, [pc, #228]	; (800d568 <scalbn+0x100>)
 800d482:	4629      	mov	r1, r5
 800d484:	ee10 0a10 	vmov	r0, s0
 800d488:	2200      	movs	r2, #0
 800d48a:	f7f3 f8b5 	bl	80005f8 <__aeabi_dmul>
 800d48e:	4b37      	ldr	r3, [pc, #220]	; (800d56c <scalbn+0x104>)
 800d490:	429e      	cmp	r6, r3
 800d492:	4604      	mov	r4, r0
 800d494:	460d      	mov	r5, r1
 800d496:	da10      	bge.n	800d4ba <scalbn+0x52>
 800d498:	a32b      	add	r3, pc, #172	; (adr r3, 800d548 <scalbn+0xe0>)
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	e03a      	b.n	800d516 <scalbn+0xae>
 800d4a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d4a4:	428a      	cmp	r2, r1
 800d4a6:	d10c      	bne.n	800d4c2 <scalbn+0x5a>
 800d4a8:	ee10 2a10 	vmov	r2, s0
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	f7f2 feec 	bl	800028c <__adddf3>
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	e019      	b.n	800d4ee <scalbn+0x86>
 800d4ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d4be:	460b      	mov	r3, r1
 800d4c0:	3a36      	subs	r2, #54	; 0x36
 800d4c2:	4432      	add	r2, r6
 800d4c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d4c8:	428a      	cmp	r2, r1
 800d4ca:	dd08      	ble.n	800d4de <scalbn+0x76>
 800d4cc:	2d00      	cmp	r5, #0
 800d4ce:	a120      	add	r1, pc, #128	; (adr r1, 800d550 <scalbn+0xe8>)
 800d4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d4:	da1c      	bge.n	800d510 <scalbn+0xa8>
 800d4d6:	a120      	add	r1, pc, #128	; (adr r1, 800d558 <scalbn+0xf0>)
 800d4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4dc:	e018      	b.n	800d510 <scalbn+0xa8>
 800d4de:	2a00      	cmp	r2, #0
 800d4e0:	dd08      	ble.n	800d4f4 <scalbn+0x8c>
 800d4e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4ee:	ec45 4b10 	vmov	d0, r4, r5
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
 800d4f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d4f8:	da19      	bge.n	800d52e <scalbn+0xc6>
 800d4fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d4fe:	429e      	cmp	r6, r3
 800d500:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d504:	dd0a      	ble.n	800d51c <scalbn+0xb4>
 800d506:	a112      	add	r1, pc, #72	; (adr r1, 800d550 <scalbn+0xe8>)
 800d508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e2      	bne.n	800d4d6 <scalbn+0x6e>
 800d510:	a30f      	add	r3, pc, #60	; (adr r3, 800d550 <scalbn+0xe8>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f7f3 f86f 	bl	80005f8 <__aeabi_dmul>
 800d51a:	e7cb      	b.n	800d4b4 <scalbn+0x4c>
 800d51c:	a10a      	add	r1, pc, #40	; (adr r1, 800d548 <scalbn+0xe0>)
 800d51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0b8      	beq.n	800d498 <scalbn+0x30>
 800d526:	a10e      	add	r1, pc, #56	; (adr r1, 800d560 <scalbn+0xf8>)
 800d528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52c:	e7b4      	b.n	800d498 <scalbn+0x30>
 800d52e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d532:	3236      	adds	r2, #54	; 0x36
 800d534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d53c:	4620      	mov	r0, r4
 800d53e:	4b0c      	ldr	r3, [pc, #48]	; (800d570 <scalbn+0x108>)
 800d540:	2200      	movs	r2, #0
 800d542:	e7e8      	b.n	800d516 <scalbn+0xae>
 800d544:	f3af 8000 	nop.w
 800d548:	c2f8f359 	.word	0xc2f8f359
 800d54c:	01a56e1f 	.word	0x01a56e1f
 800d550:	8800759c 	.word	0x8800759c
 800d554:	7e37e43c 	.word	0x7e37e43c
 800d558:	8800759c 	.word	0x8800759c
 800d55c:	fe37e43c 	.word	0xfe37e43c
 800d560:	c2f8f359 	.word	0xc2f8f359
 800d564:	81a56e1f 	.word	0x81a56e1f
 800d568:	43500000 	.word	0x43500000
 800d56c:	ffff3cb0 	.word	0xffff3cb0
 800d570:	3c900000 	.word	0x3c900000

0800d574 <fabsf>:
 800d574:	ee10 3a10 	vmov	r3, s0
 800d578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d57c:	ee00 3a10 	vmov	s0, r3
 800d580:	4770      	bx	lr

0800d582 <finitef>:
 800d582:	b082      	sub	sp, #8
 800d584:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d588:	9801      	ldr	r0, [sp, #4]
 800d58a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d58e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d592:	bfac      	ite	ge
 800d594:	2000      	movge	r0, #0
 800d596:	2001      	movlt	r0, #1
 800d598:	b002      	add	sp, #8
 800d59a:	4770      	bx	lr

0800d59c <scalbnf>:
 800d59c:	ee10 3a10 	vmov	r3, s0
 800d5a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d5a4:	d025      	beq.n	800d5f2 <scalbnf+0x56>
 800d5a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d5aa:	d302      	bcc.n	800d5b2 <scalbnf+0x16>
 800d5ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d5b0:	4770      	bx	lr
 800d5b2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d5b6:	d122      	bne.n	800d5fe <scalbnf+0x62>
 800d5b8:	4b2a      	ldr	r3, [pc, #168]	; (800d664 <scalbnf+0xc8>)
 800d5ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d668 <scalbnf+0xcc>
 800d5be:	4298      	cmp	r0, r3
 800d5c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d5c4:	db16      	blt.n	800d5f4 <scalbnf+0x58>
 800d5c6:	ee10 3a10 	vmov	r3, s0
 800d5ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d5ce:	3a19      	subs	r2, #25
 800d5d0:	4402      	add	r2, r0
 800d5d2:	2afe      	cmp	r2, #254	; 0xfe
 800d5d4:	dd15      	ble.n	800d602 <scalbnf+0x66>
 800d5d6:	ee10 3a10 	vmov	r3, s0
 800d5da:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d66c <scalbnf+0xd0>
 800d5de:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d670 <scalbnf+0xd4>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	eeb0 7a67 	vmov.f32	s14, s15
 800d5e8:	bfb8      	it	lt
 800d5ea:	eef0 7a66 	vmovlt.f32	s15, s13
 800d5ee:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d5f2:	4770      	bx	lr
 800d5f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d674 <scalbnf+0xd8>
 800d5f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d5fc:	4770      	bx	lr
 800d5fe:	0dd2      	lsrs	r2, r2, #23
 800d600:	e7e6      	b.n	800d5d0 <scalbnf+0x34>
 800d602:	2a00      	cmp	r2, #0
 800d604:	dd06      	ble.n	800d614 <scalbnf+0x78>
 800d606:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d60a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d60e:	ee00 3a10 	vmov	s0, r3
 800d612:	4770      	bx	lr
 800d614:	f112 0f16 	cmn.w	r2, #22
 800d618:	da1a      	bge.n	800d650 <scalbnf+0xb4>
 800d61a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d61e:	4298      	cmp	r0, r3
 800d620:	ee10 3a10 	vmov	r3, s0
 800d624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d628:	dd0a      	ble.n	800d640 <scalbnf+0xa4>
 800d62a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d66c <scalbnf+0xd0>
 800d62e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d670 <scalbnf+0xd4>
 800d632:	eef0 7a40 	vmov.f32	s15, s0
 800d636:	2b00      	cmp	r3, #0
 800d638:	bf18      	it	ne
 800d63a:	eeb0 0a47 	vmovne.f32	s0, s14
 800d63e:	e7db      	b.n	800d5f8 <scalbnf+0x5c>
 800d640:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d674 <scalbnf+0xd8>
 800d644:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d678 <scalbnf+0xdc>
 800d648:	eef0 7a40 	vmov.f32	s15, s0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	e7f3      	b.n	800d638 <scalbnf+0x9c>
 800d650:	3219      	adds	r2, #25
 800d652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d656:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d65a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d67c <scalbnf+0xe0>
 800d65e:	ee07 3a10 	vmov	s14, r3
 800d662:	e7c4      	b.n	800d5ee <scalbnf+0x52>
 800d664:	ffff3cb0 	.word	0xffff3cb0
 800d668:	4c000000 	.word	0x4c000000
 800d66c:	7149f2ca 	.word	0x7149f2ca
 800d670:	f149f2ca 	.word	0xf149f2ca
 800d674:	0da24260 	.word	0x0da24260
 800d678:	8da24260 	.word	0x8da24260
 800d67c:	33000000 	.word	0x33000000

0800d680 <_init>:
 800d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d682:	bf00      	nop
 800d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d686:	bc08      	pop	{r3}
 800d688:	469e      	mov	lr, r3
 800d68a:	4770      	bx	lr

0800d68c <_fini>:
 800d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68e:	bf00      	nop
 800d690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d692:	bc08      	pop	{r3}
 800d694:	469e      	mov	lr, r3
 800d696:	4770      	bx	lr
