
drone-stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e4  080072e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080072e4  080072e4  000172e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072ec  080072ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000004a0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000514  20000514  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fff  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024a4  00000000  00000000  000340a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  00037708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022633  00000000  00000000  000387f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158c0  00000000  00000000  0005ae2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d04ff  00000000  00000000  000706eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140bea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005174  00000000  00000000  00140c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007260 	.word	0x08007260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007260 	.word	0x08007260

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <MPU6050_Init>:
#include <math.h>
#include "mpu6050.h"

uint8_t MPU6050_Init(MPU6050_t *mpu6050, I2C_HandleTypeDef *I2Cx,
    uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af04      	add	r7, sp, #16
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	71bb      	strb	r3, [r7, #6]
  mpu6050->I2Cx = I2Cx;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	601a      	str	r2, [r3, #0]

	// Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS) {
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d81a      	bhi.n	8000e18 <MPU6050_Init+0x58>
 8000de2:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <MPU6050_Init+0x28>)
 8000de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000e01 	.word	0x08000e01
 8000df0:	08000e09 	.word	0x08000e09
 8000df4:	08000e11 	.word	0x08000e11
    case 0: //250dps
      mpu6050->MPU6050_Gyro_LSB = 131.0;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4a6e      	ldr	r2, [pc, #440]	; (8000fb4 <MPU6050_Init+0x1f4>)
 8000dfc:	61da      	str	r2, [r3, #28]
      break;
 8000dfe:	e00f      	b.n	8000e20 <MPU6050_Init+0x60>
    case 1: //500dps
      mpu6050->MPU6050_Gyro_LSB = 65.5;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4a6d      	ldr	r2, [pc, #436]	; (8000fb8 <MPU6050_Init+0x1f8>)
 8000e04:	61da      	str	r2, [r3, #28]
      break;
 8000e06:	e00b      	b.n	8000e20 <MPU6050_Init+0x60>
    case 2: //1000dps
      mpu6050->MPU6050_Gyro_LSB = 32.8;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4a6c      	ldr	r2, [pc, #432]	; (8000fbc <MPU6050_Init+0x1fc>)
 8000e0c:	61da      	str	r2, [r3, #28]
      break;
 8000e0e:	e007      	b.n	8000e20 <MPU6050_Init+0x60>
    case 3: //2000dps
      mpu6050->MPU6050_Gyro_LSB = 16.4;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4a6b      	ldr	r2, [pc, #428]	; (8000fc0 <MPU6050_Init+0x200>)
 8000e14:	61da      	str	r2, [r3, #28]
      break;
 8000e16:	e003      	b.n	8000e20 <MPU6050_Init+0x60>
    default:
      mpu6050->MPU6050_Gyro_LSB = 32.8;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4a68      	ldr	r2, [pc, #416]	; (8000fbc <MPU6050_Init+0x1fc>)
 8000e1c:	61da      	str	r2, [r3, #28]
      break;
 8000e1e:	bf00      	nop
	}

	switch(Acc_FS) {
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d81e      	bhi.n	8000e64 <MPU6050_Init+0xa4>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <MPU6050_Init+0x6c>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000e3d 	.word	0x08000e3d
 8000e30:	08000e47 	.word	0x08000e47
 8000e34:	08000e51 	.word	0x08000e51
 8000e38:	08000e5b 	.word	0x08000e5b
	case 0: //2g
	  mpu6050->MPU6050_Acc_LSB = 16384.0;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000e42:	621a      	str	r2, [r3, #32]
		break;
 8000e44:	e013      	b.n	8000e6e <MPU6050_Init+0xae>
	case 1: //4g
	  mpu6050->MPU6050_Acc_LSB = 8192.0;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000e4c:	621a      	str	r2, [r3, #32]
		break;
 8000e4e:	e00e      	b.n	8000e6e <MPU6050_Init+0xae>
	case 2: //8g
	  mpu6050->MPU6050_Acc_LSB = 4096.0;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000e56:	621a      	str	r2, [r3, #32]
		break;
 8000e58:	e009      	b.n	8000e6e <MPU6050_Init+0xae>
	case 3: //16g
	  mpu6050->MPU6050_Acc_LSB = 2048.0;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000e60:	621a      	str	r2, [r3, #32]
		break;
 8000e62:	e004      	b.n	8000e6e <MPU6050_Init+0xae>
	default:
	  mpu6050->MPU6050_Acc_LSB = 4096.0;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000e6a:	621a      	str	r2, [r3, #32]
		break;
 8000e6c:	bf00      	nop
	}

	// Read Who am I
	if (HAL_I2C_Mem_Read(mpu6050->I2Cx, MPU6050_ADDR,
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3318      	adds	r3, #24
 8000e76:	2264      	movs	r2, #100	; 0x64
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	9201      	str	r2, [sp, #4]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	2275      	movs	r2, #117	; 0x75
 8000e84:	21d0      	movs	r1, #208	; 0xd0
 8000e86:	f002 fa5f 	bl	8003348 <HAL_I2C_Mem_Read>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MPU6050_Init+0xd4>
	    WHO_AM_I_REG, 1, &mpu6050->rx, 1, 100) != HAL_OK) return 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e08a      	b.n	8000faa <MPU6050_Init+0x1ea>
	mpu6050->tx = 0; // Will return this value if code ends here
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2200      	movs	r2, #0
 8000e98:	765a      	strb	r2, [r3, #25]

	// 0x68 will be returned if sensor accessed correctly
	if (mpu6050->rx != 0x68)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	7e1b      	ldrb	r3, [r3, #24]
 8000e9e:	2b68      	cmp	r3, #104	; 0x68
 8000ea0:	d001      	beq.n	8000ea6 <MPU6050_Init+0xe6>
	  return 2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e081      	b.n	8000faa <MPU6050_Init+0x1ea>

	mpu6050->tx = 0;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	765a      	strb	r2, [r3, #25]
  if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3319      	adds	r3, #25
 8000eb4:	2264      	movs	r2, #100	; 0x64
 8000eb6:	9202      	str	r2, [sp, #8]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	9201      	str	r2, [sp, #4]
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	226b      	movs	r2, #107	; 0x6b
 8000ec2:	21d0      	movs	r1, #208	; 0xd0
 8000ec4:	f002 f946 	bl	8003154 <HAL_I2C_Mem_Write>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MPU6050_Init+0x112>
      PWR_MGMT_1_REG, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 3;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e06b      	b.n	8000faa <MPU6050_Init+0x1ea>
  HAL_Delay(10);
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f001 fc62 	bl	800279c <HAL_Delay>

  mpu6050->tx = 0x00; // Set No Sampling
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	765a      	strb	r2, [r3, #25]
  if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3319      	adds	r3, #25
 8000ee6:	2264      	movs	r2, #100	; 0x64
 8000ee8:	9202      	str	r2, [sp, #8]
 8000eea:	2201      	movs	r2, #1
 8000eec:	9201      	str	r2, [sp, #4]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	2219      	movs	r2, #25
 8000ef4:	21d0      	movs	r1, #208	; 0xd0
 8000ef6:	f002 f92d 	bl	8003154 <HAL_I2C_Mem_Write>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MPU6050_Init+0x144>
      SMPLRT_DIV_REG, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 4;
 8000f00:	2304      	movs	r3, #4
 8000f02:	e052      	b.n	8000faa <MPU6050_Init+0x1ea>
  HAL_Delay(10);
 8000f04:	200a      	movs	r0, #10
 8000f06:	f001 fc49 	bl	800279c <HAL_Delay>

  mpu6050->tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	7e3a      	ldrb	r2, [r7, #24]
 8000f0e:	765a      	strb	r2, [r3, #25]
  if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3319      	adds	r3, #25
 8000f18:	2264      	movs	r2, #100	; 0x64
 8000f1a:	9202      	str	r2, [sp, #8]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	9201      	str	r2, [sp, #4]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	221a      	movs	r2, #26
 8000f26:	21d0      	movs	r1, #208	; 0xd0
 8000f28:	f002 f914 	bl	8003154 <HAL_I2C_Mem_Write>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MPU6050_Init+0x176>
      CONFIG_REG, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 5;
 8000f32:	2305      	movs	r3, #5
 8000f34:	e039      	b.n	8000faa <MPU6050_Init+0x1ea>
  HAL_Delay(10);
 8000f36:	200a      	movs	r0, #10
 8000f38:	f001 fc30 	bl	800279c <HAL_Delay>

  mpu6050->tx = Gyro_FS << 3;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	765a      	strb	r2, [r3, #25]
  if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3319      	adds	r3, #25
 8000f4e:	2264      	movs	r2, #100	; 0x64
 8000f50:	9202      	str	r2, [sp, #8]
 8000f52:	2201      	movs	r2, #1
 8000f54:	9201      	str	r2, [sp, #4]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	221b      	movs	r2, #27
 8000f5c:	21d0      	movs	r1, #208	; 0xd0
 8000f5e:	f002 f8f9 	bl	8003154 <HAL_I2C_Mem_Write>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MPU6050_Init+0x1ac>
      GYRO_CONFIG_REG, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 6;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	e01e      	b.n	8000faa <MPU6050_Init+0x1ea>
  HAL_Delay(10);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f001 fc15 	bl	800279c <HAL_Delay>

  mpu6050->tx = Acc_FS << 3;
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	765a      	strb	r2, [r3, #25]
  if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3319      	adds	r3, #25
 8000f84:	2264      	movs	r2, #100	; 0x64
 8000f86:	9202      	str	r2, [sp, #8]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	221c      	movs	r2, #28
 8000f92:	21d0      	movs	r1, #208	; 0xd0
 8000f94:	f002 f8de 	bl	8003154 <HAL_I2C_Mem_Write>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MPU6050_Init+0x1e2>
      ACCEL_CONFIG_REG, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 7;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e003      	b.n	8000faa <MPU6050_Init+0x1ea>
  HAL_Delay(10);
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f001 fbfa 	bl	800279c <HAL_Delay>

	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	43030000 	.word	0x43030000
 8000fb8:	42830000 	.word	0x42830000
 8000fbc:	42033333 	.word	0x42033333
 8000fc0:	41833333 	.word	0x41833333

08000fc4 <MPU6050_Bypass>:

uint8_t MPU6050_Bypass(MPU6050_t *mpu6050) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	6078      	str	r0, [r7, #4]
  // Master Disable
  mpu6050->tx = 0b00000000;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3319      	adds	r3, #25
 8000fda:	2264      	movs	r2, #100	; 0x64
 8000fdc:	9202      	str	r2, [sp, #8]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	226a      	movs	r2, #106	; 0x6a
 8000fe8:	21d0      	movs	r1, #208	; 0xd0
 8000fea:	f002 f8b3 	bl	8003154 <HAL_I2C_Mem_Write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MPU6050_Bypass+0x34>
	    0x6A, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e01c      	b.n	8001032 <MPU6050_Bypass+0x6e>
	HAL_Delay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f001 fbcf 	bl	800279c <HAL_Delay>

	// Bypass Enable
	mpu6050->tx = 0b00000010;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2202      	movs	r2, #2
 8001002:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3319      	adds	r3, #25
 800100c:	2264      	movs	r2, #100	; 0x64
 800100e:	9202      	str	r2, [sp, #8]
 8001010:	2201      	movs	r2, #1
 8001012:	9201      	str	r2, [sp, #4]
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	2237      	movs	r2, #55	; 0x37
 800101a:	21d0      	movs	r1, #208	; 0xd0
 800101c:	f002 f89a 	bl	8003154 <HAL_I2C_Mem_Write>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MPU6050_Bypass+0x66>
	    0x37, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 2;
 8001026:	2302      	movs	r3, #2
 8001028:	e003      	b.n	8001032 <MPU6050_Bypass+0x6e>
	HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 fbb6 	bl	800279c <HAL_Delay>

	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <MPU6050_Master>:

uint8_t MPU6050_Master(MPU6050_t *mpu6050) {
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af04      	add	r7, sp, #16
 8001040:	6078      	str	r0, [r7, #4]
  // Disable Bypass
  mpu6050->tx = 0x00;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	765a      	strb	r2, [r3, #25]
  if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3319      	adds	r3, #25
 8001050:	2264      	movs	r2, #100	; 0x64
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	2201      	movs	r2, #1
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2237      	movs	r2, #55	; 0x37
 800105e:	21d0      	movs	r1, #208	; 0xd0
 8001060:	f002 f878 	bl	8003154 <HAL_I2C_Mem_Write>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MPU6050_Master+0x34>
	    0x37, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 1;
 800106a:	2301      	movs	r3, #1
 800106c:	e04e      	b.n	800110c <MPU6050_Master+0xd2>
	HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f001 fb94 	bl	800279c <HAL_Delay>

	// Master Enable
	mpu6050->tx = 0b00100010;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2222      	movs	r2, #34	; 0x22
 8001078:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3319      	adds	r3, #25
 8001082:	2264      	movs	r2, #100	; 0x64
 8001084:	9202      	str	r2, [sp, #8]
 8001086:	2201      	movs	r2, #1
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	226a      	movs	r2, #106	; 0x6a
 8001090:	21d0      	movs	r1, #208	; 0xd0
 8001092:	f002 f85f 	bl	8003154 <HAL_I2C_Mem_Write>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MPU6050_Master+0x66>
	    0x6A, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 2;
 800109c:	2302      	movs	r3, #2
 800109e:	e035      	b.n	800110c <MPU6050_Master+0xd2>
	HAL_Delay(10);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f001 fb7b 	bl	800279c <HAL_Delay>

	// Master Clock to 400kHz
	mpu6050->tx = 0b00001101;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	220d      	movs	r2, #13
 80010aa:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3319      	adds	r3, #25
 80010b4:	2264      	movs	r2, #100	; 0x64
 80010b6:	9202      	str	r2, [sp, #8]
 80010b8:	2201      	movs	r2, #1
 80010ba:	9201      	str	r2, [sp, #4]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	2224      	movs	r2, #36	; 0x24
 80010c2:	21d0      	movs	r1, #208	; 0xd0
 80010c4:	f002 f846 	bl	8003154 <HAL_I2C_Mem_Write>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MPU6050_Master+0x98>
	    0x24, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 3;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e01c      	b.n	800110c <MPU6050_Master+0xd2>
	HAL_Delay(10);
 80010d2:	200a      	movs	r0, #10
 80010d4:	f001 fb62 	bl	800279c <HAL_Delay>

	mpu6050->tx = 0x00;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3319      	adds	r3, #25
 80010e6:	2264      	movs	r2, #100	; 0x64
 80010e8:	9202      	str	r2, [sp, #8]
 80010ea:	2201      	movs	r2, #1
 80010ec:	9201      	str	r2, [sp, #4]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	226b      	movs	r2, #107	; 0x6b
 80010f4:	21d0      	movs	r1, #208	; 0xd0
 80010f6:	f002 f82d 	bl	8003154 <HAL_I2C_Mem_Write>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MPU6050_Master+0xca>
	    PWR_MGMT_1_REG, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 4;
 8001100:	2304      	movs	r3, #4
 8001102:	e003      	b.n	800110c <MPU6050_Master+0xd2>
	HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f001 fb49 	bl	800279c <HAL_Delay>

	return 0;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HMC5883L_Setup>:

uint8_t HMC5883L_Setup(MPU6050_t *mpu6050) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af04      	add	r7, sp, #16
 800111a:	6078      	str	r0, [r7, #4]
  // Fill Slave0 DO
  mpu6050->tx = 0b00011000;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2218      	movs	r2, #24
 8001120:	765a      	strb	r2, [r3, #25]
  if (HAL_I2C_Mem_Write(mpu6050->I2Cx, HMC5883L_ADDRESS << 1,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3319      	adds	r3, #25
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	9202      	str	r2, [sp, #8]
 800112e:	2201      	movs	r2, #1
 8001130:	9201      	str	r2, [sp, #4]
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	2200      	movs	r2, #0
 8001138:	213c      	movs	r1, #60	; 0x3c
 800113a:	f002 f80b 	bl	8003154 <HAL_I2C_Mem_Write>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HMC5883L_Setup+0x34>
      0x00, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 1;
 8001144:	2301      	movs	r3, #1
 8001146:	e035      	b.n	80011b4 <HMC5883L_Setup+0xa0>
	HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f001 fb27 	bl	800279c <HAL_Delay>

	// Fill Slave0 DO
	mpu6050->tx = 0b00100000;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2220      	movs	r2, #32
 8001152:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, HMC5883L_ADDRESS << 1,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3319      	adds	r3, #25
 800115c:	2264      	movs	r2, #100	; 0x64
 800115e:	9202      	str	r2, [sp, #8]
 8001160:	2201      	movs	r2, #1
 8001162:	9201      	str	r2, [sp, #4]
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	2201      	movs	r2, #1
 800116a:	213c      	movs	r1, #60	; 0x3c
 800116c:	f001 fff2 	bl	8003154 <HAL_I2C_Mem_Write>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HMC5883L_Setup+0x66>
	    0x01, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 2;
 8001176:	2302      	movs	r3, #2
 8001178:	e01c      	b.n	80011b4 <HMC5883L_Setup+0xa0>
	HAL_Delay(10);
 800117a:	200a      	movs	r0, #10
 800117c:	f001 fb0e 	bl	800279c <HAL_Delay>

	// Mode: Continuous
	mpu6050->tx = 0x00;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, HMC5883L_ADDRESS << 1,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3319      	adds	r3, #25
 800118e:	2264      	movs	r2, #100	; 0x64
 8001190:	9202      	str	r2, [sp, #8]
 8001192:	2201      	movs	r2, #1
 8001194:	9201      	str	r2, [sp, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2202      	movs	r2, #2
 800119c:	213c      	movs	r1, #60	; 0x3c
 800119e:	f001 ffd9 	bl	8003154 <HAL_I2C_Mem_Write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HMC5883L_Setup+0x98>
	    0x02, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 3;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e003      	b.n	80011b4 <HMC5883L_Setup+0xa0>
	HAL_Delay(10);
 80011ac:	200a      	movs	r0, #10
 80011ae:	f001 faf5 	bl	800279c <HAL_Delay>

	return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <MPU6050_Slave_Read>:

uint8_t MPU6050_Slave_Read(MPU6050_t *mpu6050) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	6078      	str	r0, [r7, #4]
  // Access Slave into read mode
	mpu6050->tx = HMC5883L_ADDRESS | 0x80;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	229e      	movs	r2, #158	; 0x9e
 80011c8:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3319      	adds	r3, #25
 80011d2:	2264      	movs	r2, #100	; 0x64
 80011d4:	9202      	str	r2, [sp, #8]
 80011d6:	2201      	movs	r2, #1
 80011d8:	9201      	str	r2, [sp, #4]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	2225      	movs	r2, #37	; 0x25
 80011e0:	21d0      	movs	r1, #208	; 0xd0
 80011e2:	f001 ffb7 	bl	8003154 <HAL_I2C_Mem_Write>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MPU6050_Slave_Read+0x34>
	    0x25, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 3;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e035      	b.n	800125c <MPU6050_Slave_Read+0xa0>
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f001 fad3 	bl	800279c <HAL_Delay>

	// Slave REG for reading to take place
	mpu6050->tx = 0x03;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3319      	adds	r3, #25
 8001204:	2264      	movs	r2, #100	; 0x64
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	2201      	movs	r2, #1
 800120a:	9201      	str	r2, [sp, #4]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2226      	movs	r2, #38	; 0x26
 8001212:	21d0      	movs	r1, #208	; 0xd0
 8001214:	f001 ff9e 	bl	8003154 <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MPU6050_Slave_Read+0x66>
	    0x26, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 3;
 800121e:	2303      	movs	r3, #3
 8001220:	e01c      	b.n	800125c <MPU6050_Slave_Read+0xa0>
	HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f001 faba 	bl	800279c <HAL_Delay>

	// Number of data bytes
	mpu6050->tx = 0x80 | 0x06;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2286      	movs	r2, #134	; 0x86
 800122c:	765a      	strb	r2, [r3, #25]
	if (HAL_I2C_Mem_Write(mpu6050->I2Cx, MPU6050_ADDR,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3319      	adds	r3, #25
 8001236:	2264      	movs	r2, #100	; 0x64
 8001238:	9202      	str	r2, [sp, #8]
 800123a:	2201      	movs	r2, #1
 800123c:	9201      	str	r2, [sp, #4]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	2227      	movs	r2, #39	; 0x27
 8001244:	21d0      	movs	r1, #208	; 0xd0
 8001246:	f001 ff85 	bl	8003154 <HAL_I2C_Mem_Write>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MPU6050_Slave_Read+0x98>
	    0x27, 1, &mpu6050->tx, 1, 100) != HAL_OK) return 3;
 8001250:	2303      	movs	r3, #3
 8001252:	e003      	b.n	800125c <MPU6050_Slave_Read+0xa0>
	HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f001 faa1 	bl	800279c <HAL_Delay>

	return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <MPU6050_Read_All>:
//  while (HAL_I2C_Master_Transmit(mpu6050->I2Cx, (uint16_t) MPU6050_ADDR, &reg, 1, 1) != HAL_OK);
//  while (HAL_I2C_Master_Receive(mpu6050->I2Cx, (uint16_t) MPU6050_ADDR, mpu6050->rx_buf, 20, 1) != HAL_OK);
//  return 0;
//}

uint8_t MPU6050_Read_All(MPU6050_t *mpu6050) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af04      	add	r7, sp, #16
 800126a:	6078      	str	r0, [r7, #4]
  if (HAL_I2C_Mem_Read(mpu6050->I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6818      	ldr	r0, [r3, #0]
      mpu6050->rx_buf, 20, 3) != HAL_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3304      	adds	r3, #4
  if (HAL_I2C_Mem_Read(mpu6050->I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1,
 8001274:	2203      	movs	r2, #3
 8001276:	9202      	str	r2, [sp, #8]
 8001278:	2214      	movs	r2, #20
 800127a:	9201      	str	r2, [sp, #4]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	223b      	movs	r2, #59	; 0x3b
 8001282:	21d0      	movs	r1, #208	; 0xd0
 8001284:	f002 f860 	bl	8003348 <HAL_I2C_Mem_Read>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MPU6050_Read_All+0x2e>
    return 1;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <MPU6050_Read_All+0x30>

  return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0000      	movs	r0, r0
	...

080012a0 <MPU6050_Parsing_NoOffset>:
	mpu6050->Ax = mpu6050->Accel_X_RAW / mpu6050->MPU6050_Acc_LSB;
	mpu6050->Ay = mpu6050->Accel_Y_RAW / mpu6050->MPU6050_Acc_LSB;
	mpu6050->Az = mpu6050->Accel_Z_RAW / mpu6050->MPU6050_Acc_LSB;
}

void MPU6050_Parsing_NoOffset(MPU6050_t *mpu6050) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint8_t *rx_buf = mpu6050->rx_buf;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3304      	adds	r3, #4
 80012ac:	60fb      	str	r3, [r7, #12]

	mpu6050->Accel_X_RAW = -(rx_buf[0] << 8 | rx_buf[1]);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	425b      	negs	r3, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu6050->Accel_Y_RAW = (rx_buf[2] << 8 | rx_buf[3]);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3302      	adds	r3, #2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3303      	adds	r3, #3
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu6050->Accel_Z_RAW = (rx_buf[4] << 8 | rx_buf[5]);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3304      	adds	r3, #4
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3305      	adds	r3, #5
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	851a      	strh	r2, [r3, #40]	; 0x28
	// Didn't Save Temp Value
	mpu6050->Gyro_X_RAW = (rx_buf[8] << 8 | rx_buf[9]);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3308      	adds	r3, #8
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3309      	adds	r3, #9
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	871a      	strh	r2, [r3, #56]	; 0x38
	mpu6050->Gyro_Y_RAW = -(rx_buf[10] << 8 | rx_buf[11]);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	330a      	adds	r3, #10
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	330b      	adds	r3, #11
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	b29b      	uxth	r3, r3
 8001334:	425b      	negs	r3, r3
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	875a      	strh	r2, [r3, #58]	; 0x3a
	mpu6050->Gyro_Z_RAW = -(rx_buf[12] << 8 | rx_buf[13]);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	330c      	adds	r3, #12
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	330d      	adds	r3, #13
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	b29b      	uxth	r3, r3
 8001356:	425b      	negs	r3, r3
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	879a      	strh	r2, [r3, #60]	; 0x3c

	mpu6050->Mag_X_RAW = (rx_buf[14] << 8 | rx_buf[15]);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	330e      	adds	r3, #14
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	330f      	adds	r3, #15
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	mpu6050->Mag_Z_RAW = -(rx_buf[16] << 8 | rx_buf[17]);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3310      	adds	r3, #16
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3311      	adds	r3, #17
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b21b      	sxth	r3, r3
 8001392:	b29b      	uxth	r3, r3
 8001394:	425b      	negs	r3, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	b21a      	sxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	mpu6050->Mag_Y_RAW = -(rx_buf[18] << 8 | rx_buf[19]);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3312      	adds	r3, #18
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3313      	adds	r3, #19
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	425b      	negs	r3, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b21a      	sxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	mpu6050->Gyro_X_RAW -= mpu6050->Gyro_X_Offset;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21a      	sxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	871a      	strh	r2, [r3, #56]	; 0x38
	mpu6050->Gyro_Y_RAW -= mpu6050->Gyro_Y_Offset;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	875a      	strh	r2, [r3, #58]	; 0x3a
	mpu6050->Gyro_Z_RAW -= mpu6050->Gyro_Z_Offset;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001406:	b29b      	uxth	r3, r3
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29b      	uxth	r3, r3
 800140c:	b21a      	sxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	879a      	strh	r2, [r3, #60]	; 0x3c

	mpu6050->Gx = mpu6050->Gyro_X_RAW / mpu6050->MPU6050_Gyro_LSB* D2R;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edd3 7a07 	vldr	s15, [r3, #28]
 8001426:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800142a:	ee16 0a90 	vmov	r0, s13
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	a33d      	add	r3, pc, #244	; (adr r3, 8001528 <MPU6050_Parsing_NoOffset+0x288>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f8de 	bl	80005f8 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff faea 	bl	8000a1c <__aeabi_d2f>
 8001448:	4602      	mov	r2, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
	mpu6050->Gy = mpu6050->Gyro_Y_RAW / mpu6050->MPU6050_Gyro_LSB* D2R;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001466:	ee16 0a90 	vmov	r0, s13
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	a32e      	add	r3, pc, #184	; (adr r3, 8001528 <MPU6050_Parsing_NoOffset+0x288>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f8c0 	bl	80005f8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff facc 	bl	8000a1c <__aeabi_d2f>
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	649a      	str	r2, [r3, #72]	; 0x48
	mpu6050->Gz = mpu6050->Gyro_Z_RAW / mpu6050->MPU6050_Gyro_LSB* D2R;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edd3 7a07 	vldr	s15, [r3, #28]
 800149e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014a2:	ee16 0a90 	vmov	r0, s13
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	a31f      	add	r3, pc, #124	; (adr r3, 8001528 <MPU6050_Parsing_NoOffset+0x288>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8a2 	bl	80005f8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff faae 	bl	8000a1c <__aeabi_d2f>
 80014c0:	4602      	mov	r2, r0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	64da      	str	r2, [r3, #76]	; 0x4c
	mpu6050->Ax = mpu6050->Accel_X_RAW / mpu6050->MPU6050_Acc_LSB;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80014da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu6050->Ay = mpu6050->Accel_Y_RAW / mpu6050->MPU6050_Acc_LSB;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80014f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu6050->Az = mpu6050->Accel_Z_RAW / mpu6050->MPU6050_Acc_LSB;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	ed93 7a08 	vldr	s14, [r3, #32]
 8001516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	a252dd11 	.word	0xa252dd11
 800152c:	3f91df46 	.word	0x3f91df46

08001530 <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	ed87 0a02 	vstr	s0, [r7, #8]
 800153c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001540:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	609a      	str	r2, [r3, #8]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e024      	b.n	80015c4 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d103      	bne.n	8001588 <flash+0x24>
 8001580:	2140      	movs	r1, #64	; 0x40
 8001582:	4816      	ldr	r0, [pc, #88]	; (80015dc <flash+0x78>)
 8001584:	f001 fc87 	bl	8002e96 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d103      	bne.n	8001596 <flash+0x32>
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	4812      	ldr	r0, [pc, #72]	; (80015dc <flash+0x78>)
 8001592:	f001 fc80 	bl	8002e96 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8001596:	2032      	movs	r0, #50	; 0x32
 8001598:	f001 f900 	bl	800279c <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d103      	bne.n	80015aa <flash+0x46>
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <flash+0x78>)
 80015a6:	f001 fc76 	bl	8002e96 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d103      	bne.n	80015b8 <flash+0x54>
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	480a      	ldr	r0, [pc, #40]	; (80015dc <flash+0x78>)
 80015b4:	f001 fc6f 	bl	8002e96 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 80015b8:	2032      	movs	r0, #50	; 0x32
 80015ba:	f001 f8ef 	bl	800279c <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbd6      	blt.n	800157a <flash+0x16>
  }

  HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f001 f8e5 	bl	800279c <HAL_Delay>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020000 	.word	0x40020000

080015e0 <console>:

// Monitor console
void console(const char *str) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7fe fdf1 	bl	80001d0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <console+0x24>)
 80015f8:	f004 fa2d 	bl	8005a56 <HAL_UART_Transmit_IT>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000025c 	.word	0x2000025c

08001608 <monitor>:

char g_console_msg[256] = {0};
void monitor(float x1, float x2, float x3,
    float x4, float x5, float x6, float x7, float x8, float x9) {
 8001608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160a:	b093      	sub	sp, #76	; 0x4c
 800160c:	af08      	add	r7, sp, #32
 800160e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001612:	edc7 0a08 	vstr	s1, [r7, #32]
 8001616:	ed87 1a07 	vstr	s2, [r7, #28]
 800161a:	edc7 1a06 	vstr	s3, [r7, #24]
 800161e:	ed87 2a05 	vstr	s4, [r7, #20]
 8001622:	edc7 2a04 	vstr	s5, [r7, #16]
 8001626:	ed87 3a03 	vstr	s6, [r7, #12]
 800162a:	edc7 3a02 	vstr	s7, [r7, #8]
 800162e:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 8001632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001636:	2100      	movs	r1, #0
 8001638:	4837      	ldr	r0, [pc, #220]	; (8001718 <monitor+0x110>)
 800163a:	f005 f99b 	bl	8006974 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 800163e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001642:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800171c <monitor+0x114>
 8001646:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800164a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 800164e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001652:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800171c <monitor+0x114>
 8001656:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800165a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 800165e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001662:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800171c <monitor+0x114>
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800166a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166e:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8001672:	edd7 7a06 	vldr	s15, [r7, #24]
 8001676:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800171c <monitor+0x114>
 800167a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800167e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001682:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 8001686:	edd7 7a05 	vldr	s15, [r7, #20]
 800168a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800171c <monitor+0x114>
 800168e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001696:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 800169a:	edd7 7a04 	vldr	s15, [r7, #16]
 800169e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800171c <monitor+0x114>
 80016a2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80016a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016aa:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80016ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800171c <monitor+0x114>
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80016ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016be:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80016c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800171c <monitor+0x114>
 80016ca:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80016ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d2:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800171c <monitor+0x114>
 80016de:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80016e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e6:	ee17 6a90 	vmov	r6, s15
 80016ea:	9606      	str	r6, [sp, #24]
 80016ec:	9505      	str	r5, [sp, #20]
 80016ee:	9404      	str	r4, [sp, #16]
 80016f0:	9003      	str	r0, [sp, #12]
 80016f2:	9102      	str	r1, [sp, #8]
 80016f4:	9201      	str	r2, [sp, #4]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	ee16 3a10 	vmov	r3, s12
 80016fc:	ee16 2a90 	vmov	r2, s13
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <monitor+0x118>)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <monitor+0x110>)
 8001704:	f005 f93e 	bl	8006984 <siprintf>
  console(g_console_msg);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <monitor+0x110>)
 800170a:	f7ff ff69 	bl	80015e0 <console>
}
 800170e:	bf00      	nop
 8001710:	372c      	adds	r7, #44	; 0x2c
 8001712:	46bd      	mov	sp, r7
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	bf00      	nop
 8001718:	200003f8 	.word	0x200003f8
 800171c:	47c35000 	.word	0x47c35000
 8001720:	08007278 	.word	0x08007278

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0a0      	sub	sp, #128	; 0x80
 8001728:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f000 ffc5 	bl	80026b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f925 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f000 fc11 	bl	8001f58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001736:	f000 f98b 	bl	8001a50 <MX_I2C1_Init>
  MX_TIM1_Init();
 800173a:	f000 f9ed 	bl	8001b18 <MX_TIM1_Init>
  MX_TIM2_Init();
 800173e:	f000 faaf 	bl	8001ca0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001742:	f000 fb43 	bl	8001dcc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001746:	f000 fb8f 	bl	8001e68 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800174a:	f000 fbdb 	bl	8001f04 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800174e:	f000 f9ad 	bl	8001aac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  flash(1, 2);
 8001752:	2102      	movs	r1, #2
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff ff05 	bl	8001564 <flash>

  // Initialise Kalman filters
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 1);
 800175a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800175e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001762:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001766:	4879      	ldr	r0, [pc, #484]	; (800194c <main+0x228>)
 8001768:	f7ff fee2 	bl	8001530 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 1);
 800176c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001770:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001774:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001778:	4875      	ldr	r0, [pc, #468]	; (8001950 <main+0x22c>)
 800177a:	f7ff fed9 	bl	8001530 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 1);
 800177e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001782:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001786:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800178a:	4872      	ldr	r0, [pc, #456]	; (8001954 <main+0x230>)
 800178c:	f7ff fed0 	bl	8001530 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 1);
 8001790:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001794:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001798:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800179c:	486e      	ldr	r0, [pc, #440]	; (8001958 <main+0x234>)
 800179e:	f7ff fec7 	bl	8001530 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 1);
 80017a2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80017a6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80017aa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80017ae:	486b      	ldr	r0, [pc, #428]	; (800195c <main+0x238>)
 80017b0:	f7ff febe 	bl	8001530 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 1);
 80017b4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80017b8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80017bc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80017c0:	4867      	ldr	r0, [pc, #412]	; (8001960 <main+0x23c>)
 80017c2:	f7ff feb5 	bl	8001530 <SimpleKalmanFilter_Init>

  // MPU6050 + HMC5883L
  MPU6050_t g_dev1;

  while (MPU6050_Init(&g_dev1, &hi2c1, 3, 3, 5) != 0)
 80017c6:	e003      	b.n	80017d0 <main+0xac>
    flash(1, 5);
 80017c8:	2105      	movs	r1, #5
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff feca 	bl	8001564 <flash>
  while (MPU6050_Init(&g_dev1, &hi2c1, 3, 3, 5) != 0)
 80017d0:	4638      	mov	r0, r7
 80017d2:	2305      	movs	r3, #5
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2303      	movs	r3, #3
 80017d8:	2203      	movs	r2, #3
 80017da:	4962      	ldr	r1, [pc, #392]	; (8001964 <main+0x240>)
 80017dc:	f7ff faf0 	bl	8000dc0 <MPU6050_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <main+0xa4>

  while (MPU6050_Bypass(&g_dev1) != 0)
 80017e6:	e003      	b.n	80017f0 <main+0xcc>
    flash(1, 10);
 80017e8:	210a      	movs	r1, #10
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff feba 	bl	8001564 <flash>
  while (MPU6050_Bypass(&g_dev1) != 0)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fbe6 	bl	8000fc4 <MPU6050_Bypass>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f4      	bne.n	80017e8 <main+0xc4>

  while (HMC5883L_Setup(&g_dev1) != 0)
 80017fe:	e003      	b.n	8001808 <main+0xe4>
    flash(1, 15);
 8001800:	210f      	movs	r1, #15
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff feae 	bl	8001564 <flash>
  while (HMC5883L_Setup(&g_dev1) != 0)
 8001808:	463b      	mov	r3, r7
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fc82 	bl	8001114 <HMC5883L_Setup>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f4      	bne.n	8001800 <main+0xdc>

  while (MPU6050_Master(&g_dev1) != 0)
 8001816:	e003      	b.n	8001820 <main+0xfc>
    flash(1, 20);
 8001818:	2114      	movs	r1, #20
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fea2 	bl	8001564 <flash>
  while (MPU6050_Master(&g_dev1) != 0)
 8001820:	463b      	mov	r3, r7
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fc09 	bl	800103a <MPU6050_Master>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f4      	bne.n	8001818 <main+0xf4>

  while (MPU6050_Slave_Read(&g_dev1) != 0)
 800182e:	e003      	b.n	8001838 <main+0x114>
    flash(1, 25);
 8001830:	2119      	movs	r1, #25
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff fe96 	bl	8001564 <flash>
  while (MPU6050_Slave_Read(&g_dev1) != 0)
 8001838:	463b      	mov	r3, r7
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fcbe 	bl	80011bc <MPU6050_Slave_Read>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f4      	bne.n	8001830 <main+0x10c>

  flash(1, 3);
 8001846:	2103      	movs	r1, #3
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff fe8b 	bl	8001564 <flash>

  // Initialise motor PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800184e:	2100      	movs	r1, #0
 8001850:	4845      	ldr	r0, [pc, #276]	; (8001968 <main+0x244>)
 8001852:	f003 f935 	bl	8004ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001856:	2104      	movs	r1, #4
 8001858:	4843      	ldr	r0, [pc, #268]	; (8001968 <main+0x244>)
 800185a:	f003 f931 	bl	8004ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800185e:	2108      	movs	r1, #8
 8001860:	4841      	ldr	r0, [pc, #260]	; (8001968 <main+0x244>)
 8001862:	f003 f92d 	bl	8004ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001866:	210c      	movs	r1, #12
 8001868:	483f      	ldr	r0, [pc, #252]	; (8001968 <main+0x244>)
 800186a:	f003 f929 	bl	8004ac0 <HAL_TIM_PWM_Start>
  flash(1, 3);
 800186e:	2103      	movs	r1, #3
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fe77 	bl	8001564 <flash>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 8001876:	483d      	ldr	r0, [pc, #244]	; (800196c <main+0x248>)
 8001878:	f003 f858 	bl	800492c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800187c:	483c      	ldr	r0, [pc, #240]	; (8001970 <main+0x24c>)
 800187e:	f003 f855 	bl	800492c <HAL_TIM_Base_Start_IT>
  flash(1, 3);
 8001882:	2103      	movs	r1, #3
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff fe6d 	bl	8001564 <flash>

  flash(1, 2);
 800188a:	2102      	movs	r1, #2
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff fe69 	bl	8001564 <flash>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_control, 5);
 8001892:	2205      	movs	r2, #5
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <main+0x250>)
 8001896:	4838      	ldr	r0, [pc, #224]	; (8001978 <main+0x254>)
 8001898:	f004 f922 	bl	8005ae0 <HAL_UART_Receive_IT>

    HAL_Delay(100);
 800189c:	2064      	movs	r0, #100	; 0x64
 800189e:	f000 ff7d 	bl	800279c <HAL_Delay>
    if (MPU6050_Read_All(&g_dev1) != 0) continue;
 80018a2:	463b      	mov	r3, r7
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fcdd 	bl	8001264 <MPU6050_Read_All>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d14a      	bne.n	8001946 <main+0x222>
    MPU6050_Parsing_NoOffset(&g_dev1);
 80018b0:	463b      	mov	r3, r7
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fcf4 	bl	80012a0 <MPU6050_Parsing_NoOffset>

    monitor(g_dev1.Accel_X_RAW, g_dev1.Accel_Y_RAW, g_dev1.Accel_Z_RAW,
 80018b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80018c8:	ee07 3a10 	vmov	s14, r3
 80018cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80018d4:	ee06 3a90 	vmov	s13, r3
 80018d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        g_dev1.Gyro_X_RAW, g_dev1.Gyro_Y_RAW, g_dev1.Gyro_Z_RAW,
 80018dc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
    monitor(g_dev1.Accel_X_RAW, g_dev1.Accel_Y_RAW, g_dev1.Accel_Z_RAW,
 80018e0:	ee06 3a10 	vmov	s12, r3
 80018e4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        g_dev1.Gyro_X_RAW, g_dev1.Gyro_Y_RAW, g_dev1.Gyro_Z_RAW,
 80018e8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
    monitor(g_dev1.Accel_X_RAW, g_dev1.Accel_Y_RAW, g_dev1.Accel_Z_RAW,
 80018ec:	ee05 3a90 	vmov	s11, r3
 80018f0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        g_dev1.Gyro_X_RAW, g_dev1.Gyro_Y_RAW, g_dev1.Gyro_Z_RAW,
 80018f4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
    monitor(g_dev1.Accel_X_RAW, g_dev1.Accel_Y_RAW, g_dev1.Accel_Z_RAW,
 80018f8:	ee05 3a10 	vmov	s10, r3
 80018fc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
        g_dev1.Mag_X_RAW, g_dev1.Mag_Y_RAW, g_dev1.Mag_Z_RAW);
 8001900:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
    monitor(g_dev1.Accel_X_RAW, g_dev1.Accel_Y_RAW, g_dev1.Accel_Z_RAW,
 8001904:	ee04 3a90 	vmov	s9, r3
 8001908:	eef8 4ae4 	vcvt.f32.s32	s9, s9
        g_dev1.Mag_X_RAW, g_dev1.Mag_Y_RAW, g_dev1.Mag_Z_RAW);
 800190c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
    monitor(g_dev1.Accel_X_RAW, g_dev1.Accel_Y_RAW, g_dev1.Accel_Z_RAW,
 8001910:	ee04 3a10 	vmov	s8, r3
 8001914:	eef8 3ac4 	vcvt.f32.s32	s7, s8
        g_dev1.Mag_X_RAW, g_dev1.Mag_Y_RAW, g_dev1.Mag_Z_RAW);
 8001918:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
    monitor(g_dev1.Accel_X_RAW, g_dev1.Accel_Y_RAW, g_dev1.Accel_Z_RAW,
 800191c:	ee04 3a10 	vmov	s8, r3
 8001920:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8001924:	eeb0 3a64 	vmov.f32	s6, s9
 8001928:	eef0 2a45 	vmov.f32	s5, s10
 800192c:	eeb0 2a65 	vmov.f32	s4, s11
 8001930:	eef0 1a46 	vmov.f32	s3, s12
 8001934:	eeb0 1a66 	vmov.f32	s2, s13
 8001938:	eef0 0a47 	vmov.f32	s1, s14
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	f7ff fe62 	bl	8001608 <monitor>
 8001944:	e7a5      	b.n	8001892 <main+0x16e>
    if (MPU6050_Read_All(&g_dev1) != 0) continue;
 8001946:	bf00      	nop
    HAL_UART_Receive_IT(&huart1, g_control, 5);
 8001948:	e7a3      	b.n	8001892 <main+0x16e>
 800194a:	bf00      	nop
 800194c:	200002a0 	.word	0x200002a0
 8001950:	200002b8 	.word	0x200002b8
 8001954:	200002d0 	.word	0x200002d0
 8001958:	200002e8 	.word	0x200002e8
 800195c:	20000300 	.word	0x20000300
 8001960:	20000318 	.word	0x20000318
 8001964:	20000090 	.word	0x20000090
 8001968:	2000013c 	.word	0x2000013c
 800196c:	200001cc 	.word	0x200001cc
 8001970:	20000214 	.word	0x20000214
 8001974:	200003f0 	.word	0x200003f0
 8001978:	2000025c 	.word	0x2000025c

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	; 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	; 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f004 fff2 	bl	8006974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <SystemClock_Config+0xcc>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <SystemClock_Config+0xcc>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <SystemClock_Config+0xcc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <SystemClock_Config+0xd0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <SystemClock_Config+0xd0>)
 80019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <SystemClock_Config+0xd0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d8:	2301      	movs	r3, #1
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e2:	2302      	movs	r3, #2
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019f0:	23a8      	movs	r3, #168	; 0xa8
 80019f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019f8:	2304      	movs	r3, #4
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fa23 	bl	8003e4c <HAL_RCC_OscConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a0c:	f000 fb10 	bl	8002030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a10:	230f      	movs	r3, #15
 8001a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fc84 	bl	800433c <HAL_RCC_ClockConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a3a:	f000 faf9 	bl	8002030 <Error_Handler>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3750      	adds	r7, #80	; 0x50
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <MX_I2C1_Init+0x54>)
 8001a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a5c:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <MX_I2C1_Init+0x58>)
 8001a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_I2C1_Init+0x50>)
 8001a8e:	f001 fa1d 	bl	8002ecc <HAL_I2C_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a98:	f000 faca 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000090 	.word	0x20000090
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	000186a0 	.word	0x000186a0

08001aac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <MX_SPI2_Init+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001abc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001adc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001af8:	220a      	movs	r2, #10
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_SPI2_Init+0x64>)
 8001afe:	f002 fe3d 	bl	800477c <HAL_SPI_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b08:	f000 fa92 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200000e4 	.word	0x200000e4
 8001b14:	40003800 	.word	0x40003800

08001b18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b096      	sub	sp, #88	; 0x58
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 ff0f 	bl	8006974 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <MX_TIM1_Init+0x184>)
 8001b5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001b5c:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b5e:	2214      	movs	r2, #20
 8001b60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b76:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b82:	4845      	ldr	r0, [pc, #276]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001b84:	f002 fe83 	bl	800488e <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b8e:	f000 fa4f 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	483e      	ldr	r0, [pc, #248]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001ba0:	f003 fa20 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001baa:	f000 fa41 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bae:	483a      	ldr	r0, [pc, #232]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001bb0:	f002 ff2c 	bl	8004a0c <HAL_TIM_PWM_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bba:	f000 fa39 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4832      	ldr	r0, [pc, #200]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001bce:	f003 fe13 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001bd8:	f000 fa2a 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bdc:	2360      	movs	r3, #96	; 0x60
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4825      	ldr	r0, [pc, #148]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001c02:	f003 f92d 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c0c:	f000 fa10 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	2204      	movs	r2, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	481f      	ldr	r0, [pc, #124]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001c1a:	f003 f921 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c24:	f000 fa04 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4819      	ldr	r0, [pc, #100]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001c32:	f003 f915 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c3c:	f000 f9f8 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	220c      	movs	r2, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4813      	ldr	r0, [pc, #76]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001c4a:	f003 f909 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c54:	f000 f9ec 	bl	8002030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4807      	ldr	r0, [pc, #28]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001c7c:	f003 fe38 	bl	80058f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001c86:	f000 f9d3 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <MX_TIM1_Init+0x180>)
 8001c8c:	f000 fb1e 	bl	80022cc <HAL_TIM_MspPostInit>

}
 8001c90:	bf00      	nop
 8001c92:	3758      	adds	r7, #88	; 0x58
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000013c 	.word	0x2000013c
 8001c9c:	40010000 	.word	0x40010000

08001ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001cda:	2214      	movs	r2, #20
 8001cdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cf8:	4833      	ldr	r0, [pc, #204]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001cfa:	f002 fdc8 	bl	800488e <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d04:	f000 f994 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	4619      	mov	r1, r3
 8001d14:	482c      	ldr	r0, [pc, #176]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001d16:	f003 f965 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d20:	f000 f986 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d24:	4828      	ldr	r0, [pc, #160]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001d26:	f002 fe71 	bl	8004a0c <HAL_TIM_PWM_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d30:	f000 f97e 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	4619      	mov	r1, r3
 8001d42:	4821      	ldr	r0, [pc, #132]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001d44:	f003 fd58 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d4e:	f000 f96f 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	2360      	movs	r3, #96	; 0x60
 8001d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001d6a:	f003 f879 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d74:	f000 f95c 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001d80:	f003 f86e 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d8a:	f000 f951 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2208      	movs	r2, #8
 8001d92:	4619      	mov	r1, r3
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001d96:	f003 f863 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001da0:	f000 f946 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	220c      	movs	r2, #12
 8001da8:	4619      	mov	r1, r3
 8001daa:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001dac:	f003 f858 	bl	8004e60 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001db6:	f000 f93b 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <MX_TIM2_Init+0x128>)
 8001dbc:	f000 fa86 	bl	80022cc <HAL_TIM_MspPostInit>

}
 8001dc0:	bf00      	nop
 8001dc2:	3738      	adds	r7, #56	; 0x38
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000184 	.word	0x20000184

08001dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <MX_TIM3_Init+0x98>)
 8001dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001df0:	2253      	movs	r2, #83	; 0x53
 8001df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e0e:	4814      	ldr	r0, [pc, #80]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001e10:	f002 fd3d 	bl	800488e <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e1a:	f000 f909 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001e2c:	f003 f8da 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e36:	f000 f8fb 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e42:	463b      	mov	r3, r7
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_TIM3_Init+0x94>)
 8001e48:	f003 fcd6 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001e52:	f000 f8ed 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200001cc 	.word	0x200001cc
 8001e64:	40000400 	.word	0x40000400

08001e68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_TIM4_Init+0x94>)
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <MX_TIM4_Init+0x98>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_TIM4_Init+0x94>)
 8001e8c:	2253      	movs	r2, #83	; 0x53
 8001e8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <MX_TIM4_Init+0x94>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_TIM4_Init+0x94>)
 8001e98:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_TIM4_Init+0x94>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_TIM4_Init+0x94>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <MX_TIM4_Init+0x94>)
 8001eac:	f002 fcef 	bl	800488e <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001eb6:	f000 f8bb 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480d      	ldr	r0, [pc, #52]	; (8001efc <MX_TIM4_Init+0x94>)
 8001ec8:	f003 f88c 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001ed2:	f000 f8ad 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ede:	463b      	mov	r3, r7
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	; (8001efc <MX_TIM4_Init+0x94>)
 8001ee4:	f003 fc88 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001eee:	f000 f89f 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000214 	.word	0x20000214
 8001f00:	40000800 	.word	0x40000800

08001f04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <MX_USART1_UART_Init+0x50>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f3c:	f003 fd3e 	bl	80059bc <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f46:	f000 f873 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000025c 	.word	0x2000025c
 8001f54:	40011000 	.word	0x40011000

08001f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a25      	ldr	r2, [pc, #148]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fcc:	f043 0310 	orr.w	r3, r3, #16
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_GPIO_Init+0xd0>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	21c0      	movs	r1, #192	; 0xc0
 8001ffe:	480b      	ldr	r0, [pc, #44]	; (800202c <MX_GPIO_Init+0xd4>)
 8002000:	f000 ff30 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002004:	23c0      	movs	r3, #192	; 0xc0
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_GPIO_Init+0xd4>)
 800201c:	f000 fd86 	bl	8002b2c <HAL_GPIO_Init>

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002038:	e7fe      	b.n	8002038 <Error_Handler+0x8>
	...

0800203c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_MspInit+0x4c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_MspInit+0x4c>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_MspInit+0x4c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x4c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x4c>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x4c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_I2C_MspInit+0x84>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12b      	bne.n	8002106 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ca:	23c0      	movs	r3, #192	; 0xc0
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ce:	2312      	movs	r3, #18
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020da:	2304      	movs	r3, #4
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <HAL_I2C_MspInit+0x8c>)
 80020e6:	f000 fd21 	bl	8002b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40005400 	.word	0x40005400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020400 	.word	0x40020400

0800211c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a28      	ldr	r2, [pc, #160]	; (80021dc <HAL_SPI_MspInit+0xc0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d14a      	bne.n	80021d4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_SPI_MspInit+0xc4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002192:	230c      	movs	r3, #12
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021a2:	2305      	movs	r3, #5
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	480d      	ldr	r0, [pc, #52]	; (80021e4 <HAL_SPI_MspInit+0xc8>)
 80021ae:	f000 fcbd 	bl	8002b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021c4:	2305      	movs	r3, #5
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <HAL_SPI_MspInit+0xcc>)
 80021d0:	f000 fcac 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40003800 	.word	0x40003800
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020400 	.word	0x40020400

080021ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_TIM_Base_MspInit+0xd0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10e      	bne.n	800221c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800221a:	e04a      	b.n	80022b2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
}
 8002242:	e036      	b.n	80022b2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_TIM_Base_MspInit+0xd8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	201d      	movs	r0, #29
 8002270:	f000 fb93 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002274:	201d      	movs	r0, #29
 8002276:	f000 fbac 	bl	80029d2 <HAL_NVIC_EnableIRQ>
}
 800227a:	e01a      	b.n	80022b2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_TIM_Base_MspInit+0xdc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d115      	bne.n	80022b2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_TIM_Base_MspInit+0xd4>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	201e      	movs	r0, #30
 80022a8:	f000 fb77 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022ac:	201e      	movs	r0, #30
 80022ae:	f000 fb90 	bl	80029d2 <HAL_NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800

080022cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a24      	ldr	r2, [pc, #144]	; (800237c <HAL_TIM_MspPostInit+0xb0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d11f      	bne.n	800232e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b23      	ldr	r3, [pc, #140]	; (8002380 <HAL_TIM_MspPostInit+0xb4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <HAL_TIM_MspPostInit+0xb4>)
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_TIM_MspPostInit+0xb4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800230a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800231c:	2301      	movs	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4817      	ldr	r0, [pc, #92]	; (8002384 <HAL_TIM_MspPostInit+0xb8>)
 8002328:	f000 fc00 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800232c:	e022      	b.n	8002374 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d11d      	bne.n	8002374 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_TIM_MspPostInit+0xb4>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_TIM_MspPostInit+0xb4>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6313      	str	r3, [r2, #48]	; 0x30
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_TIM_MspPostInit+0xb4>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002354:	230f      	movs	r3, #15
 8002356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002364:	2301      	movs	r3, #1
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <HAL_TIM_MspPostInit+0xbc>)
 8002370:	f000 fbdc 	bl	8002b2c <HAL_GPIO_Init>
}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010000 	.word	0x40010000
 8002380:	40023800 	.word	0x40023800
 8002384:	40021000 	.word	0x40021000
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_UART_MspInit+0x94>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d134      	bne.n	8002418 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_UART_MspInit+0x98>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_UART_MspInit+0x98>)
 80023b8:	f043 0310 	orr.w	r3, r3, #16
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_UART_MspInit+0x98>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_UART_MspInit+0x98>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <HAL_UART_MspInit+0x98>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_UART_MspInit+0x98>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f8:	2307      	movs	r3, #7
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <HAL_UART_MspInit+0x9c>)
 8002404:	f000 fb92 	bl	8002b2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	2025      	movs	r0, #37	; 0x25
 800240e:	f000 fac4 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002412:	2025      	movs	r0, #37	; 0x25
 8002414:	f000 fadd 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40011000 	.word	0x40011000
 8002424:	40023800 	.word	0x40023800
 8002428:	40020000 	.word	0x40020000

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <NMI_Handler+0x4>

08002432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <MemManage_Handler+0x4>

0800243e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <UsageFault_Handler+0x4>

0800244a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002478:	f000 f970 	bl	800275c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
//
//    ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
//  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <TIM3_IRQHandler+0x10>)
 8002486:	f002 fbe3 	bl	8004c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200001cc 	.word	0x200001cc

08002494 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <TIM4_IRQHandler+0x10>)
 800249a:	f002 fbd9 	bl	8004c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000214 	.word	0x20000214

080024a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <USART1_IRQHandler+0x10>)
 80024ae:	f003 fb47 	bl	8005b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000025c 	.word	0x2000025c

080024bc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	4803      	ldr	r0, [pc, #12]	; (80024d4 <HAL_UART_TxCpltCallback+0x18>)
 80024c8:	f000 fce5 	bl	8002e96 <HAL_GPIO_TogglePin>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <HAL_UART_RxCpltCallback+0xdc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	4833      	ldr	r0, [pc, #204]	; (80025b8 <HAL_UART_RxCpltCallback+0xe0>)
 80024ea:	f000 fcd4 	bl	8002e96 <HAL_GPIO_TogglePin>

  // Serialize control values
  uint8_t g_control_1st_idx = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  if (g_control[0] == 254) g_control_1st_idx = 1;
 80024f2:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2bfe      	cmp	r3, #254	; 0xfe
 80024f8:	d101      	bne.n	80024fe <HAL_UART_RxCpltCallback+0x26>
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	2bfe      	cmp	r3, #254	; 0xfe
 8002504:	d101      	bne.n	800250a <HAL_UART_RxCpltCallback+0x32>
 8002506:	2302      	movs	r3, #2
 8002508:	73fb      	strb	r3, [r7, #15]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 800250c:	789b      	ldrb	r3, [r3, #2]
 800250e:	2bfe      	cmp	r3, #254	; 0xfe
 8002510:	d101      	bne.n	8002516 <HAL_UART_RxCpltCallback+0x3e>
 8002512:	2303      	movs	r3, #3
 8002514:	73fb      	strb	r3, [r7, #15]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 8002518:	78db      	ldrb	r3, [r3, #3]
 800251a:	2bfe      	cmp	r3, #254	; 0xfe
 800251c:	d101      	bne.n	8002522 <HAL_UART_RxCpltCallback+0x4a>
 800251e:	2304      	movs	r3, #4
 8002520:	73fb      	strb	r3, [r7, #15]
  if (g_control[4] == 254) g_control_1st_idx = 0;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 8002524:	791b      	ldrb	r3, [r3, #4]
 8002526:	2bfe      	cmp	r3, #254	; 0xfe
 8002528:	d101      	bne.n	800252e <HAL_UART_RxCpltCallback+0x56>
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  g_thrust = g_control[g_control_1st_idx];
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 8002532:	5cd2      	ldrb	r2, [r2, r3]
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_UART_RxCpltCallback+0xe8>)
 8002536:	701a      	strb	r2, [r3, #0]
  g_pitch = g_control[(g_control_1st_idx+1)%5]-100;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_UART_RxCpltCallback+0xec>)
 800253e:	fb83 2301 	smull	r2, r3, r3, r1
 8002542:	105a      	asrs	r2, r3, #1
 8002544:	17cb      	asrs	r3, r1, #31
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	1aca      	subs	r2, r1, r3
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 8002552:	5c9b      	ldrb	r3, [r3, r2]
 8002554:	3b64      	subs	r3, #100	; 0x64
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b25a      	sxtb	r2, r3
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_UART_RxCpltCallback+0xf0>)
 800255c:	701a      	strb	r2, [r3, #0]
  g_roll = g_control[(g_control_1st_idx+2)%5]-100;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	1c99      	adds	r1, r3, #2
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_UART_RxCpltCallback+0xec>)
 8002564:	fb83 2301 	smull	r2, r3, r3, r1
 8002568:	105a      	asrs	r2, r3, #1
 800256a:	17cb      	asrs	r3, r1, #31
 800256c:	1ad2      	subs	r2, r2, r3
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	1aca      	subs	r2, r1, r3
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 8002578:	5c9b      	ldrb	r3, [r3, r2]
 800257a:	3b64      	subs	r3, #100	; 0x64
 800257c:	b2db      	uxtb	r3, r3
 800257e:	b25a      	sxtb	r2, r3
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_UART_RxCpltCallback+0xf4>)
 8002582:	701a      	strb	r2, [r3, #0]
  g_yaw = g_control[(g_control_1st_idx+3)%5]-100;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	1cd9      	adds	r1, r3, #3
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_UART_RxCpltCallback+0xec>)
 800258a:	fb83 2301 	smull	r2, r3, r3, r1
 800258e:	105a      	asrs	r2, r3, #1
 8002590:	17cb      	asrs	r3, r1, #31
 8002592:	1ad2      	subs	r2, r2, r3
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	1aca      	subs	r2, r1, r3
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_UART_RxCpltCallback+0xe4>)
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	3b64      	subs	r3, #100	; 0x64
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	b25a      	sxtb	r2, r3
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_UART_RxCpltCallback+0xf8>)
 80025a8:	701a      	strb	r2, [r3, #0]
//      g_P_roll, g_I_roll, g_D_roll,
//      0, 0, g_D_yaw);
//  monitor(g_sig1, g_sig2, MIN_SPEED,
//      g_sig3, g_sig4, MIN_SPEED,
//      0, 0, 0);
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000
 80025b8:	40020000 	.word	0x40020000
 80025bc:	200003f0 	.word	0x200003f0
 80025c0:	200004f8 	.word	0x200004f8
 80025c4:	66666667 	.word	0x66666667
 80025c8:	200004f9 	.word	0x200004f9
 80025cc:	200004fa 	.word	0x200004fa
 80025d0:	200004fb 	.word	0x200004fb

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f004 f98c 	bl	8006920 <__errno>
 8002608:	4603      	mov	r3, r0
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <_sbrk+0x64>)
 8002624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20020000 	.word	0x20020000
 8002634:	00000400 	.word	0x00000400
 8002638:	200004fc 	.word	0x200004fc
 800263c:	20000518 	.word	0x20000518

08002640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <SystemInit+0x20>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <SystemInit+0x20>)
 800264c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800269c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002668:	480d      	ldr	r0, [pc, #52]	; (80026a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800266a:	490e      	ldr	r1, [pc, #56]	; (80026a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800266c:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002680:	4c0b      	ldr	r4, [pc, #44]	; (80026b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800268e:	f7ff ffd7 	bl	8002640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f004 f94b 	bl	800692c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7ff f845 	bl	8001724 <main>
  bx  lr    
 800269a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800269c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80026a8:	080072f4 	.word	0x080072f4
  ldr r2, =_sbss
 80026ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80026b0:	20000514 	.word	0x20000514

080026b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC_IRQHandler>
	...

080026b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_Init+0x40>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_Init+0x40>)
 80026c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_Init+0x40>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_Init+0x40>)
 80026ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_Init+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_Init+0x40>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f000 f94f 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e6:	200f      	movs	r0, #15
 80026e8:	f000 f808 	bl	80026fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ec:	f7ff fca6 	bl	800203c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00

080026fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_InitTick+0x54>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_InitTick+0x58>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002712:	fbb3 f3f1 	udiv	r3, r3, r1
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f967 	bl	80029ee <HAL_SYSTICK_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e00e      	b.n	8002748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d80a      	bhi.n	8002746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002738:	f000 f92f 	bl	800299a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800273c:	4a06      	ldr	r2, [pc, #24]	; (8002758 <HAL_InitTick+0x5c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000004 	.word	0x20000004
 8002754:	2000000c 	.word	0x2000000c
 8002758:	20000008 	.word	0x20000008

0800275c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x20>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x24>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4413      	add	r3, r2
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_IncTick+0x24>)
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	2000000c 	.word	0x2000000c
 8002780:	20000500 	.word	0x20000500

08002784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return uwTick;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_GetTick+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000500 	.word	0x20000500

0800279c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff ffee 	bl	8002784 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b4:	d005      	beq.n	80027c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_Delay+0x44>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027c2:	bf00      	nop
 80027c4:	f7ff ffde 	bl	8002784 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8f7      	bhi.n	80027c4 <HAL_Delay+0x28>
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000000c 	.word	0x2000000c

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	; (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	; (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002950:	d301      	bcc.n	8002956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002952:	2301      	movs	r3, #1
 8002954:	e00f      	b.n	8002976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <SysTick_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295e:	210f      	movs	r1, #15
 8002960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002964:	f7ff ff8e 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <SysTick_Config+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <SysTick_Config+0x40>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff29 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff3e 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff8e 	bl	80028d8 <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5d 	bl	8002884 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff31 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffa2 	bl	8002940 <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff feb6 	bl	8002784 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d008      	beq.n	8002a38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e052      	b.n	8002ade <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0216 	bic.w	r2, r2, #22
 8002a46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <HAL_DMA_Abort+0x62>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0208 	bic.w	r2, r2, #8
 8002a76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a88:	e013      	b.n	8002ab2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8a:	f7ff fe7b 	bl	8002784 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d90c      	bls.n	8002ab2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e015      	b.n	8002ade <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e4      	bne.n	8002a8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	223f      	movs	r2, #63	; 0x3f
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d004      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e00c      	b.n	8002b1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2205      	movs	r2, #5
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e16b      	b.n	8002e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f040 815a 	bne.w	8002e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d005      	beq.n	8002b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d130      	bne.n	8002be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0201 	and.w	r2, r3, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d017      	beq.n	8002c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d123      	bne.n	8002c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b4 	beq.w	8002e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a5f      	ldr	r2, [pc, #380]	; (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cce:	4a5b      	ldr	r2, [pc, #364]	; (8002e3c <HAL_GPIO_Init+0x310>)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_GPIO_Init+0x314>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02b      	beq.n	8002d52 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_GPIO_Init+0x318>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d025      	beq.n	8002d4e <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_GPIO_Init+0x31c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01f      	beq.n	8002d4a <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_GPIO_Init+0x320>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x21a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <HAL_GPIO_Init+0x324>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x216>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	; (8002e54 <HAL_GPIO_Init+0x328>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x212>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4c      	ldr	r2, [pc, #304]	; (8002e58 <HAL_GPIO_Init+0x32c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <HAL_GPIO_Init+0x330>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x20a>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e00e      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d36:	2308      	movs	r3, #8
 8002d38:	e00c      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e00a      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e008      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d52:	2300      	movs	r3, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f002 0203 	and.w	r2, r2, #3
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d64:	4935      	ldr	r1, [pc, #212]	; (8002e3c <HAL_GPIO_Init+0x310>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	f67f ae90 	bls.w	8002b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021c00 	.word	0x40021c00
 8002e60:	40013c00 	.word	0x40013c00

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ea8:	887a      	ldrh	r2, [r7, #2]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	041a      	lsls	r2, r3, #16
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e12b      	b.n	8003136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff f8ca 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f30:	f001 fbfc 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8002f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a81      	ldr	r2, [pc, #516]	; (8003140 <HAL_I2C_Init+0x274>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d807      	bhi.n	8002f50 <HAL_I2C_Init+0x84>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a80      	ldr	r2, [pc, #512]	; (8003144 <HAL_I2C_Init+0x278>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e006      	b.n	8002f5e <HAL_I2C_Init+0x92>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a7d      	ldr	r2, [pc, #500]	; (8003148 <HAL_I2C_Init+0x27c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0e7      	b.n	8003136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a78      	ldr	r2, [pc, #480]	; (800314c <HAL_I2C_Init+0x280>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9b      	lsrs	r3, r3, #18
 8002f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a6a      	ldr	r2, [pc, #424]	; (8003140 <HAL_I2C_Init+0x274>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d802      	bhi.n	8002fa0 <HAL_I2C_Init+0xd4>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	e009      	b.n	8002fb4 <HAL_I2C_Init+0xe8>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	4a69      	ldr	r2, [pc, #420]	; (8003150 <HAL_I2C_Init+0x284>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	495c      	ldr	r1, [pc, #368]	; (8003140 <HAL_I2C_Init+0x274>)
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	d819      	bhi.n	8003008 <HAL_I2C_Init+0x13c>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e59      	subs	r1, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fe8:	400b      	ands	r3, r1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_I2C_Init+0x138>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e59      	subs	r1, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003002:	e051      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003004:	2304      	movs	r3, #4
 8003006:	e04f      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d111      	bne.n	8003034 <HAL_I2C_Init+0x168>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e012      	b.n	800305a <HAL_I2C_Init+0x18e>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	0099      	lsls	r1, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Init+0x196>
 800305e:	2301      	movs	r3, #1
 8003060:	e022      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10e      	bne.n	8003088 <HAL_I2C_Init+0x1bc>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e58      	subs	r0, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	440b      	add	r3, r1
 8003078:	fbb0 f3f3 	udiv	r3, r0, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003086:	e00f      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1e58      	subs	r0, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	0099      	lsls	r1, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	6809      	ldr	r1, [r1, #0]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6911      	ldr	r1, [r2, #16]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	000186a0 	.word	0x000186a0
 8003144:	001e847f 	.word	0x001e847f
 8003148:	003d08ff 	.word	0x003d08ff
 800314c:	431bde83 	.word	0x431bde83
 8003150:	10624dd3 	.word	0x10624dd3

08003154 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800316e:	f7ff fb09 	bl	8002784 <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b20      	cmp	r3, #32
 800317e:	f040 80d9 	bne.w	8003334 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2319      	movs	r3, #25
 8003188:	2201      	movs	r2, #1
 800318a:	496d      	ldr	r1, [pc, #436]	; (8003340 <HAL_I2C_Mem_Write+0x1ec>)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fc7f 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	e0cc      	b.n	8003336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Mem_Write+0x56>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0c5      	b.n	8003336 <HAL_I2C_Mem_Write+0x1e2>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d007      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2221      	movs	r2, #33	; 0x21
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a4d      	ldr	r2, [pc, #308]	; (8003344 <HAL_I2C_Mem_Write+0x1f0>)
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003212:	88f8      	ldrh	r0, [r7, #6]
 8003214:	893a      	ldrh	r2, [r7, #8]
 8003216:	8979      	ldrh	r1, [r7, #10]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4603      	mov	r3, r0
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fab6 	bl	8003794 <I2C_RequestMemoryWrite>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d052      	beq.n	80032d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e081      	b.n	8003336 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fd00 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2b04      	cmp	r3, #4
 8003248:	d107      	bne.n	800325a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06b      	b.n	8003336 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d11b      	bne.n	80032d4 <HAL_I2C_Mem_Write+0x180>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d017      	beq.n	80032d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1aa      	bne.n	8003232 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fcec 	bl	8003cbe <I2C_WaitOnBTFFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d107      	bne.n	8003304 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e016      	b.n	8003336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	00100002 	.word	0x00100002
 8003344:	ffff0000 	.word	0xffff0000

08003348 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	; 0x30
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	4608      	mov	r0, r1
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	4603      	mov	r3, r0
 8003358:	817b      	strh	r3, [r7, #10]
 800335a:	460b      	mov	r3, r1
 800335c:	813b      	strh	r3, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003362:	f7ff fa0f 	bl	8002784 <HAL_GetTick>
 8003366:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b20      	cmp	r3, #32
 8003372:	f040 8208 	bne.w	8003786 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2319      	movs	r3, #25
 800337c:	2201      	movs	r2, #1
 800337e:	497b      	ldr	r1, [pc, #492]	; (800356c <HAL_I2C_Mem_Read+0x224>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fb85 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
 800338e:	e1fb      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_I2C_Mem_Read+0x56>
 800339a:	2302      	movs	r3, #2
 800339c:	e1f4      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d007      	beq.n	80033c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2222      	movs	r2, #34	; 0x22
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a5b      	ldr	r2, [pc, #364]	; (8003570 <HAL_I2C_Mem_Read+0x228>)
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003406:	88f8      	ldrh	r0, [r7, #6]
 8003408:	893a      	ldrh	r2, [r7, #8]
 800340a:	8979      	ldrh	r1, [r7, #10]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	4603      	mov	r3, r0
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fa52 	bl	80038c0 <I2C_RequestMemoryRead>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1b0      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d113      	bne.n	8003456 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e184      	b.n	8003760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	2b01      	cmp	r3, #1
 800345c:	d11b      	bne.n	8003496 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e164      	b.n	8003760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	2b02      	cmp	r3, #2
 800349c:	d11b      	bne.n	80034d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	e144      	b.n	8003760 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034ec:	e138      	b.n	8003760 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	f200 80f1 	bhi.w	80036da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d123      	bne.n	8003548 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fc1b 	bl	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e139      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003546:	e10b      	b.n	8003760 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	2b02      	cmp	r3, #2
 800354e:	d14e      	bne.n	80035ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	2200      	movs	r2, #0
 8003558:	4906      	ldr	r1, [pc, #24]	; (8003574 <HAL_I2C_Mem_Read+0x22c>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fa98 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e10e      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
 800356a:	bf00      	nop
 800356c:	00100002 	.word	0x00100002
 8003570:	ffff0000 	.word	0xffff0000
 8003574:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ec:	e0b8      	b.n	8003760 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	2200      	movs	r2, #0
 80035f6:	4966      	ldr	r1, [pc, #408]	; (8003790 <HAL_I2C_Mem_Read+0x448>)
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fa49 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0bf      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	2200      	movs	r2, #0
 8003652:	494f      	ldr	r1, [pc, #316]	; (8003790 <HAL_I2C_Mem_Read+0x448>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fa1b 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e091      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036d8:	e042      	b.n	8003760 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fb2e 	bl	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e04c      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d118      	bne.n	8003760 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f aec2 	bne.w	80034ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003786:	2302      	movs	r3, #2
  }
}
 8003788:	4618      	mov	r0, r3
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	00010004 	.word	0x00010004

08003794 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	460b      	mov	r3, r1
 80037a8:	813b      	strh	r3, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f960 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e4:	d103      	bne.n	80037ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e05f      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037f2:	897b      	ldrh	r3, [r7, #10]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003800:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	492d      	ldr	r1, [pc, #180]	; (80038bc <I2C_RequestMemoryWrite+0x128>)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f998 	bl	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e04c      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	6a39      	ldr	r1, [r7, #32]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fa02 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b04      	cmp	r3, #4
 8003844:	d107      	bne.n	8003856 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e02b      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003860:	893b      	ldrh	r3, [r7, #8]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	e021      	b.n	80038b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b29b      	uxth	r3, r3
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f9dc 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b04      	cmp	r3, #4
 8003890:	d107      	bne.n	80038a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e005      	b.n	80038b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038a6:	893b      	ldrh	r3, [r7, #8]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	00010002 	.word	0x00010002

080038c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	817b      	strh	r3, [r7, #10]
 80038d2:	460b      	mov	r3, r1
 80038d4:	813b      	strh	r3, [r7, #8]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2200      	movs	r2, #0
 8003902:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f8c2 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003920:	d103      	bne.n	800392a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0aa      	b.n	8003a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800392e:	897b      	ldrh	r3, [r7, #10]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800393c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	4952      	ldr	r1, [pc, #328]	; (8003a8c <I2C_RequestMemoryRead+0x1cc>)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f8fa 	bl	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e097      	b.n	8003a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	6a39      	ldr	r1, [r7, #32]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f964 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b04      	cmp	r3, #4
 8003980:	d107      	bne.n	8003992 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e076      	b.n	8003a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800399c:	893b      	ldrh	r3, [r7, #8]
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	e021      	b.n	80039ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039a8:	893b      	ldrh	r3, [r7, #8]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f93e 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e050      	b.n	8003a84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039e2:	893b      	ldrh	r3, [r7, #8]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	6a39      	ldr	r1, [r7, #32]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f923 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e035      	b.n	8003a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f82b 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00d      	beq.n	8003a5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4e:	d103      	bne.n	8003a58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e013      	b.n	8003a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a5c:	897b      	ldrh	r3, [r7, #10]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	6a3a      	ldr	r2, [r7, #32]
 8003a70:	4906      	ldr	r1, [pc, #24]	; (8003a8c <I2C_RequestMemoryRead+0x1cc>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f863 	bl	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	00010002 	.word	0x00010002

08003a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa0:	e025      	b.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa8:	d021      	beq.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fe fe6b 	bl	8002784 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e023      	b.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10d      	bne.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4013      	ands	r3, r2
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	e00c      	b.n	8003b2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d0b6      	beq.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b4c:	e051      	b.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5c:	d123      	bne.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e046      	b.n	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bac:	d021      	beq.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fde9 	bl	8002784 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d116      	bne.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e020      	b.n	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10c      	bne.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e00b      	b.n	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d18d      	bne.n	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c48:	e02d      	b.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f8ce 	bl	8003dec <I2C_IsAcknowledgeFailed>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e02d      	b.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c60:	d021      	beq.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fe fd8f 	bl	8002784 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d116      	bne.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0220 	orr.w	r2, r3, #32
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e007      	b.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d1ca      	bne.n	8003c4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cca:	e02d      	b.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f88d 	bl	8003dec <I2C_IsAcknowledgeFailed>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e02d      	b.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce2:	d021      	beq.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe fd4e 	bl	8002784 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e007      	b.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d1ca      	bne.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d4c:	e042      	b.n	8003dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d119      	bne.n	8003d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0210 	mvn.w	r2, #16
 8003d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e029      	b.n	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d90:	f7fe fcf8 	bl	8002784 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d116      	bne.n	8003dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e007      	b.n	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d1b5      	bne.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e02:	d11b      	bne.n	8003e3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f043 0204 	orr.w	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e267      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d075      	beq.n	8003f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6a:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d00c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e76:	4b85      	ldr	r3, [pc, #532]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d112      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e82:	4b82      	ldr	r3, [pc, #520]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	4b7e      	ldr	r3, [pc, #504]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d05b      	beq.n	8003f54 <HAL_RCC_OscConfig+0x108>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d157      	bne.n	8003f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e242      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x74>
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a75      	ldr	r2, [pc, #468]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e01d      	b.n	8003efc <HAL_RCC_OscConfig+0xb0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x98>
 8003eca:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6f      	ldr	r2, [pc, #444]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6c      	ldr	r2, [pc, #432]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0xb0>
 8003ee4:	4b69      	ldr	r3, [pc, #420]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a68      	ldr	r2, [pc, #416]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b66      	ldr	r3, [pc, #408]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a65      	ldr	r2, [pc, #404]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fc3e 	bl	8002784 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fe fc3a 	bl	8002784 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e207      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0xc0>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fc2a 	bl	8002784 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fe fc26 	bl	8002784 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	; 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1f3      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0xe8>
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d063      	beq.n	800402a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6e:	4b47      	ldr	r3, [pc, #284]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d11c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7a:	4b44      	ldr	r3, [pc, #272]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d116      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_RCC_OscConfig+0x152>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e1c7      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9e:	4b3b      	ldr	r3, [pc, #236]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4937      	ldr	r1, [pc, #220]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb2:	e03a      	b.n	800402a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d020      	beq.n	8003ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fbc:	4b34      	ldr	r3, [pc, #208]	; (8004090 <HAL_RCC_OscConfig+0x244>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fe fbdf 	bl	8002784 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fca:	f7fe fbdb 	bl	8002784 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e1a8      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe8:	4b28      	ldr	r3, [pc, #160]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4925      	ldr	r1, [pc, #148]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]
 8003ffc:	e015      	b.n	800402a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_RCC_OscConfig+0x244>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe fbbe 	bl	8002784 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400c:	f7fe fbba 	bl	8002784 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e187      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d036      	beq.n	80040a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <HAL_RCC_OscConfig+0x248>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fe fb9e 	bl	8002784 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800404c:	f7fe fb9a 	bl	8002784 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e167      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x240>)
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x200>
 800406a:	e01b      	b.n	80040a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_RCC_OscConfig+0x248>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004072:	f7fe fb87 	bl	8002784 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004078:	e00e      	b.n	8004098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407a:	f7fe fb83 	bl	8002784 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d907      	bls.n	8004098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e150      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
 800408c:	40023800 	.word	0x40023800
 8004090:	42470000 	.word	0x42470000
 8004094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	4b88      	ldr	r3, [pc, #544]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800409a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ea      	bne.n	800407a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8097 	beq.w	80041e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b6:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	4b7d      	ldr	r3, [pc, #500]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a7c      	ldr	r2, [pc, #496]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b7a      	ldr	r3, [pc, #488]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e2:	4b77      	ldr	r3, [pc, #476]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ee:	4b74      	ldr	r3, [pc, #464]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a73      	ldr	r2, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fe fb43 	bl	8002784 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fe fb3f 	bl	8002784 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e10c      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_OscConfig+0x474>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x2ea>
 8004128:	4b64      	ldr	r3, [pc, #400]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	4a63      	ldr	r2, [pc, #396]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	; 0x70
 8004134:	e01c      	b.n	8004170 <HAL_RCC_OscConfig+0x324>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b05      	cmp	r3, #5
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x30c>
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	4a5e      	ldr	r2, [pc, #376]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	6713      	str	r3, [r2, #112]	; 0x70
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	4a5b      	ldr	r2, [pc, #364]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6713      	str	r3, [r2, #112]	; 0x70
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0x324>
 8004158:	4b58      	ldr	r3, [pc, #352]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	4a57      	ldr	r2, [pc, #348]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6713      	str	r3, [r2, #112]	; 0x70
 8004164:	4b55      	ldr	r3, [pc, #340]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a54      	ldr	r2, [pc, #336]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 800416a:	f023 0304 	bic.w	r3, r3, #4
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe fb04 	bl	8002784 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fe fb00 	bl	8002784 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0cb      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	4b49      	ldr	r3, [pc, #292]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0ee      	beq.n	8004180 <HAL_RCC_OscConfig+0x334>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a4:	f7fe faee 	bl	8002784 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fe faea 	bl	8002784 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0b5      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c2:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ee      	bne.n	80041ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d4:	4b39      	ldr	r3, [pc, #228]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	4a38      	ldr	r2, [pc, #224]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80a1 	beq.w	800432c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d05c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d141      	bne.n	8004282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fe:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fe fabe 	bl	8002784 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420c:	f7fe faba 	bl	8002784 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e087      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	3b01      	subs	r3, #1
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	491b      	ldr	r1, [pc, #108]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fe fa93 	bl	8002784 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004262:	f7fe fa8f 	bl	8002784 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e05c      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x416>
 8004280:	e054      	b.n	800432c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_RCC_OscConfig+0x478>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe fa7c 	bl	8002784 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe fa78 	bl	8002784 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e045      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCC_OscConfig+0x470>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x444>
 80042ae:	e03d      	b.n	800432c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e038      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x4ec>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d028      	beq.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d121      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d11a      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004300:	4293      	cmp	r3, r2
 8004302:	d111      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	3b01      	subs	r3, #1
 8004312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cc      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d90c      	bls.n	8004378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0b8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	494d      	ldr	r1, [pc, #308]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d044      	beq.n	800445c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d119      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e067      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4934      	ldr	r1, [pc, #208]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442c:	f7fe f9aa 	bl	8002784 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fe f9a6 	bl	8002784 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e04f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d20c      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4916      	ldr	r1, [pc, #88]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	490e      	ldr	r1, [pc, #56]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c2:	f000 f821 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80044c6:	4602      	mov	r2, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	490a      	ldr	r1, [pc, #40]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	5ccb      	ldrb	r3, [r1, r3]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe f90a 	bl	80026fc <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00
 80044f8:	40023800 	.word	0x40023800
 80044fc:	08007298 	.word	0x08007298
 8004500:	20000004 	.word	0x20000004
 8004504:	20000008 	.word	0x20000008

08004508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b094      	sub	sp, #80	; 0x50
 800450e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	2300      	movs	r3, #0
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	2300      	movs	r3, #0
 800451a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004520:	4b79      	ldr	r3, [pc, #484]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b08      	cmp	r3, #8
 800452a:	d00d      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x40>
 800452c:	2b08      	cmp	r3, #8
 800452e:	f200 80e1 	bhi.w	80046f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x34>
 8004536:	2b04      	cmp	r3, #4
 8004538:	d003      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x3a>
 800453a:	e0db      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4b73      	ldr	r3, [pc, #460]	; (800470c <HAL_RCC_GetSysClockFreq+0x204>)
 800453e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004540:	e0db      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004542:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCC_GetSysClockFreq+0x208>)
 8004544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004546:	e0d8      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004548:	4b6f      	ldr	r3, [pc, #444]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004550:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004552:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d063      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	2200      	movs	r2, #0
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
 8004568:	63fa      	str	r2, [r7, #60]	; 0x3c
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	2300      	movs	r3, #0
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800457a:	4622      	mov	r2, r4
 800457c:	462b      	mov	r3, r5
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	0159      	lsls	r1, r3, #5
 8004588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800458c:	0150      	lsls	r0, r2, #5
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4621      	mov	r1, r4
 8004594:	1a51      	subs	r1, r2, r1
 8004596:	6139      	str	r1, [r7, #16]
 8004598:	4629      	mov	r1, r5
 800459a:	eb63 0301 	sbc.w	r3, r3, r1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045ac:	4659      	mov	r1, fp
 80045ae:	018b      	lsls	r3, r1, #6
 80045b0:	4651      	mov	r1, sl
 80045b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045b6:	4651      	mov	r1, sl
 80045b8:	018a      	lsls	r2, r1, #6
 80045ba:	4651      	mov	r1, sl
 80045bc:	ebb2 0801 	subs.w	r8, r2, r1
 80045c0:	4659      	mov	r1, fp
 80045c2:	eb63 0901 	sbc.w	r9, r3, r1
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045da:	4690      	mov	r8, r2
 80045dc:	4699      	mov	r9, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	eb18 0303 	adds.w	r3, r8, r3
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	462b      	mov	r3, r5
 80045e8:	eb49 0303 	adc.w	r3, r9, r3
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fa:	4629      	mov	r1, r5
 80045fc:	024b      	lsls	r3, r1, #9
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004604:	4621      	mov	r1, r4
 8004606:	024a      	lsls	r2, r1, #9
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460e:	2200      	movs	r2, #0
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004618:	f7fc fa50 	bl	8000abc <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004624:	e058      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004626:	4b38      	ldr	r3, [pc, #224]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	2200      	movs	r2, #0
 800462e:	4618      	mov	r0, r3
 8004630:	4611      	mov	r1, r2
 8004632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	f04f 0000 	mov.w	r0, #0
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	0159      	lsls	r1, r3, #5
 800464e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004652:	0150      	lsls	r0, r2, #5
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4641      	mov	r1, r8
 800465a:	ebb2 0a01 	subs.w	sl, r2, r1
 800465e:	4649      	mov	r1, r9
 8004660:	eb63 0b01 	sbc.w	fp, r3, r1
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004678:	ebb2 040a 	subs.w	r4, r2, sl
 800467c:	eb63 050b 	sbc.w	r5, r3, fp
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	00eb      	lsls	r3, r5, #3
 800468a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800468e:	00e2      	lsls	r2, r4, #3
 8004690:	4614      	mov	r4, r2
 8004692:	461d      	mov	r5, r3
 8004694:	4643      	mov	r3, r8
 8004696:	18e3      	adds	r3, r4, r3
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	464b      	mov	r3, r9
 800469c:	eb45 0303 	adc.w	r3, r5, r3
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ae:	4629      	mov	r1, r5
 80046b0:	028b      	lsls	r3, r1, #10
 80046b2:	4621      	mov	r1, r4
 80046b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046b8:	4621      	mov	r1, r4
 80046ba:	028a      	lsls	r2, r1, #10
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c2:	2200      	movs	r2, #0
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	61fa      	str	r2, [r7, #28]
 80046c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046cc:	f7fc f9f6 	bl	8000abc <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4613      	mov	r3, r2
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_GetSysClockFreq+0x200>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	3301      	adds	r3, #1
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046f2:	e002      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCC_GetSysClockFreq+0x204>)
 80046f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3750      	adds	r7, #80	; 0x50
 8004700:	46bd      	mov	sp, r7
 8004702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800
 800470c:	00f42400 	.word	0x00f42400
 8004710:	007a1200 	.word	0x007a1200

08004714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_RCC_GetHCLKFreq+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000004 	.word	0x20000004

0800472c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004730:	f7ff fff0 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0a9b      	lsrs	r3, r3, #10
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	080072a8 	.word	0x080072a8

08004754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004758:	f7ff ffdc 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	0b5b      	lsrs	r3, r3, #13
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4903      	ldr	r1, [pc, #12]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	080072a8 	.word	0x080072a8

0800477c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07b      	b.n	8004886 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d108      	bne.n	80047a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479e:	d009      	beq.n	80047b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	61da      	str	r2, [r3, #28]
 80047a6:	e005      	b.n	80047b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd fca4 	bl	800211c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	ea42 0103 	orr.w	r1, r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	f003 0104 	and.w	r1, r3, #4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0210 	and.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004874:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e041      	b.n	8004924 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fd fc99 	bl	80021ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 fc83 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d001      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04e      	b.n	80049e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d022      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d01d      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <HAL_TIM_Base_Start_IT+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <HAL_TIM_Base_Start_IT+0xd8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <HAL_TIM_Base_Start_IT+0xdc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d111      	bne.n	80049d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d010      	beq.n	80049e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	e007      	b.n	80049e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40001800 	.word	0x40001800

08004a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e041      	b.n	8004aa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f839 	bl	8004aaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fbc4 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_TIM_PWM_Start+0x24>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e022      	b.n	8004b2a <HAL_TIM_PWM_Start+0x6a>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d109      	bne.n	8004afe <HAL_TIM_PWM_Start+0x3e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	bf14      	ite	ne
 8004af6:	2301      	movne	r3, #1
 8004af8:	2300      	moveq	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	e015      	b.n	8004b2a <HAL_TIM_PWM_Start+0x6a>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d109      	bne.n	8004b18 <HAL_TIM_PWM_Start+0x58>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e008      	b.n	8004b2a <HAL_TIM_PWM_Start+0x6a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e07c      	b.n	8004c2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_PWM_Start+0x82>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b40:	e013      	b.n	8004b6a <HAL_TIM_PWM_Start+0xaa>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start+0x92>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b50:	e00b      	b.n	8004b6a <HAL_TIM_PWM_Start+0xaa>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start+0xa2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b60:	e003      	b.n	8004b6a <HAL_TIM_PWM_Start+0xaa>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	6839      	ldr	r1, [r7, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fe1a 	bl	80057ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <HAL_TIM_PWM_Start+0x174>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_TIM_PWM_Start+0xcc>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <HAL_TIM_PWM_Start+0x178>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_PWM_Start+0xd0>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <HAL_TIM_PWM_Start+0xd2>
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <HAL_TIM_PWM_Start+0x174>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x136>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x136>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <HAL_TIM_PWM_Start+0x17c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d018      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x136>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <HAL_TIM_PWM_Start+0x180>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x136>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <HAL_TIM_PWM_Start+0x184>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x136>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <HAL_TIM_PWM_Start+0x178>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x136>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_TIM_PWM_Start+0x188>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x136>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <HAL_TIM_PWM_Start+0x18c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d111      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b06      	cmp	r3, #6
 8004c06:	d010      	beq.n	8004c2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c18:	e007      	b.n	8004c2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40010400 	.word	0x40010400
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40001800 	.word	0x40001800

08004c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0202 	mvn.w	r2, #2
 8004c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa81 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa73 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fa84 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0204 	mvn.w	r2, #4
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa57 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa49 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fa5a 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0208 	mvn.w	r2, #8
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa2d 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa1f 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa30 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b10      	cmp	r3, #16
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0210 	mvn.w	r2, #16
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa03 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f9f5 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa06 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10e      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d107      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0201 	mvn.w	r2, #1
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9cf 	bl	8005172 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fdd4 	bl	80059a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d10e      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f9cb 	bl	80051c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d10e      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d107      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0220 	mvn.w	r2, #32
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fd9e 	bl	8005994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0ae      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	f200 809f 	bhi.w	8004fcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e8e:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004ec9 	.word	0x08004ec9
 8004e98:	08004fcd 	.word	0x08004fcd
 8004e9c:	08004fcd 	.word	0x08004fcd
 8004ea0:	08004fcd 	.word	0x08004fcd
 8004ea4:	08004f09 	.word	0x08004f09
 8004ea8:	08004fcd 	.word	0x08004fcd
 8004eac:	08004fcd 	.word	0x08004fcd
 8004eb0:	08004fcd 	.word	0x08004fcd
 8004eb4:	08004f4b 	.word	0x08004f4b
 8004eb8:	08004fcd 	.word	0x08004fcd
 8004ebc:	08004fcd 	.word	0x08004fcd
 8004ec0:	08004fcd 	.word	0x08004fcd
 8004ec4:	08004f8b 	.word	0x08004f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fa22 	bl	8005318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0208 	orr.w	r2, r2, #8
 8004ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0204 	bic.w	r2, r2, #4
 8004ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6999      	ldr	r1, [r3, #24]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	619a      	str	r2, [r3, #24]
      break;
 8004f06:	e064      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fa72 	bl	80053f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6999      	ldr	r1, [r3, #24]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	619a      	str	r2, [r3, #24]
      break;
 8004f48:	e043      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fac7 	bl	80054e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0208 	orr.w	r2, r2, #8
 8004f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0204 	bic.w	r2, r2, #4
 8004f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69d9      	ldr	r1, [r3, #28]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	61da      	str	r2, [r3, #28]
      break;
 8004f88:	e023      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fb1b 	bl	80055cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69d9      	ldr	r1, [r3, #28]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	021a      	lsls	r2, r3, #8
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	61da      	str	r2, [r3, #28]
      break;
 8004fca:	e002      	b.n	8004fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_ConfigClockSource+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e0b4      	b.n	800516a <HAL_TIM_ConfigClockSource+0x186>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800501e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005038:	d03e      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0xd4>
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503e:	f200 8087 	bhi.w	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	f000 8086 	beq.w	8005156 <HAL_TIM_ConfigClockSource+0x172>
 800504a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504e:	d87f      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b70      	cmp	r3, #112	; 0x70
 8005052:	d01a      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xa6>
 8005054:	2b70      	cmp	r3, #112	; 0x70
 8005056:	d87b      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b60      	cmp	r3, #96	; 0x60
 800505a:	d050      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x11a>
 800505c:	2b60      	cmp	r3, #96	; 0x60
 800505e:	d877      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b50      	cmp	r3, #80	; 0x50
 8005062:	d03c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0xfa>
 8005064:	2b50      	cmp	r3, #80	; 0x50
 8005066:	d873      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d058      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x13a>
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d86f      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b30      	cmp	r3, #48	; 0x30
 8005072:	d064      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b30      	cmp	r3, #48	; 0x30
 8005076:	d86b      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b20      	cmp	r3, #32
 800507a:	d060      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d867      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d05c      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005084:	2b10      	cmp	r3, #16
 8005086:	d05a      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	e062      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f000 fb67 	bl	800576c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	609a      	str	r2, [r3, #8]
      break;
 80050b6:	e04f      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6899      	ldr	r1, [r3, #8]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f000 fb50 	bl	800576c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050da:	609a      	str	r2, [r3, #8]
      break;
 80050dc:	e03c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 fac4 	bl	8005678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2150      	movs	r1, #80	; 0x50
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fb1d 	bl	8005736 <TIM_ITRx_SetConfig>
      break;
 80050fc:	e02c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	461a      	mov	r2, r3
 800510c:	f000 fae3 	bl	80056d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2160      	movs	r1, #96	; 0x60
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fb0d 	bl	8005736 <TIM_ITRx_SetConfig>
      break;
 800511c:	e01c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6859      	ldr	r1, [r3, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	461a      	mov	r2, r3
 800512c:	f000 faa4 	bl	8005678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2140      	movs	r1, #64	; 0x40
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fafd 	bl	8005736 <TIM_ITRx_SetConfig>
      break;
 800513c:	e00c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f000 faf4 	bl	8005736 <TIM_ITRx_SetConfig>
      break;
 800514e:	e003      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
      break;
 8005154:	e000      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a40      	ldr	r2, [pc, #256]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d00f      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3d      	ldr	r2, [pc, #244]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3c      	ldr	r2, [pc, #240]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	; (80052ec <TIM_Base_SetConfig+0x114>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d027      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d023      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2b      	ldr	r2, [pc, #172]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a29      	ldr	r2, [pc, #164]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d017      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <TIM_Base_SetConfig+0x128>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a27      	ldr	r2, [pc, #156]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM_Base_SetConfig+0x130>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a25      	ldr	r2, [pc, #148]	; (800530c <TIM_Base_SetConfig+0x134>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a24      	ldr	r2, [pc, #144]	; (8005310 <TIM_Base_SetConfig+0x138>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a23      	ldr	r2, [pc, #140]	; (8005314 <TIM_Base_SetConfig+0x13c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <TIM_Base_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40010400 	.word	0x40010400
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800
 800530c:	40001800 	.word	0x40001800
 8005310:	40001c00 	.word	0x40001c00
 8005314:	40002000 	.word	0x40002000

08005318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f023 0201 	bic.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 0302 	bic.w	r3, r3, #2
 8005360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a20      	ldr	r2, [pc, #128]	; (80053f0 <TIM_OC1_SetConfig+0xd8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_OC1_SetConfig+0x64>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <TIM_OC1_SetConfig+0xdc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d10c      	bne.n	8005396 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0308 	bic.w	r3, r3, #8
 8005382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <TIM_OC1_SetConfig+0xd8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <TIM_OC1_SetConfig+0x8e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <TIM_OC1_SetConfig+0xdc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d111      	bne.n	80053ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40010400 	.word	0x40010400

080053f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0210 	bic.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0320 	bic.w	r3, r3, #32
 8005442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a22      	ldr	r2, [pc, #136]	; (80054dc <TIM_OC2_SetConfig+0xe4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC2_SetConfig+0x68>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <TIM_OC2_SetConfig+0xe8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10d      	bne.n	800547c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a17      	ldr	r2, [pc, #92]	; (80054dc <TIM_OC2_SetConfig+0xe4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_OC2_SetConfig+0x94>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <TIM_OC2_SetConfig+0xe8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d113      	bne.n	80054b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800549a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40010400 	.word	0x40010400

080054e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800552c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <TIM_OC3_SetConfig+0xe0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC3_SetConfig+0x66>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <TIM_OC3_SetConfig+0xe4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10d      	bne.n	8005566 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC3_SetConfig+0xe0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_OC3_SetConfig+0x92>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC3_SetConfig+0xe4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d113      	bne.n	800559e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800557c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40010400 	.word	0x40010400

080055cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	031b      	lsls	r3, r3, #12
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a12      	ldr	r2, [pc, #72]	; (8005670 <TIM_OC4_SetConfig+0xa4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC4_SetConfig+0x68>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a11      	ldr	r2, [pc, #68]	; (8005674 <TIM_OC4_SetConfig+0xa8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d109      	bne.n	8005648 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40010400 	.word	0x40010400

08005678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f023 0201 	bic.w	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 030a 	bic.w	r3, r3, #10
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b087      	sub	sp, #28
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f023 0210 	bic.w	r2, r3, #16
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	031b      	lsls	r3, r3, #12
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005712:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	f043 0307 	orr.w	r3, r3, #7
 8005758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	609a      	str	r2, [r3, #8]
}
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	021a      	lsls	r2, r3, #8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	431a      	orrs	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4313      	orrs	r3, r2
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	609a      	str	r2, [r3, #8]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2201      	movs	r2, #1
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	401a      	ands	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	fa01 f303 	lsl.w	r3, r1, r3
 80057e4:	431a      	orrs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e05a      	b.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	d01d      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1d      	ldr	r2, [pc, #116]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a15      	ldr	r2, [pc, #84]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10c      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40010400 	.word	0x40010400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40001800 	.word	0x40001800

080058f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005908:	2302      	movs	r3, #2
 800590a:	e03d      	b.n	8005988 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e03f      	b.n	8005a4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fc fcd2 	bl	800238c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2224      	movs	r2, #36	; 0x24
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fd19 	bl	8006438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d130      	bne.n	8005ad2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_UART_Transmit_IT+0x26>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e029      	b.n	8005ad4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Transmit_IT+0x38>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e022      	b.n	8005ad4 <HAL_UART_Transmit_IT+0x7e>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2221      	movs	r2, #33	; 0x21
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005acc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d11d      	bne.n	8005b36 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_UART_Receive_IT+0x26>
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e016      	b.n	8005b38 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_UART_Receive_IT+0x38>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e00f      	b.n	8005b38 <HAL_UART_Receive_IT+0x58>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 faab 	bl	8006088 <UART_Start_Receive_IT>
 8005b32:	4603      	mov	r3, r0
 8005b34:	e000      	b.n	8005b38 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
  }
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b0ba      	sub	sp, #232	; 0xe8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10f      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x66>
 8005b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fb8f 	bl	80062c2 <UART_Receive_IT>
      return;
 8005ba4:	e256      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80de 	beq.w	8005d6c <HAL_UART_IRQHandler+0x22c>
 8005bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80d1 	beq.w	8005d6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_UART_IRQHandler+0xae>
 8005bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0201 	orr.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_UART_IRQHandler+0xd2>
 8005bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f043 0202 	orr.w	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_UART_IRQHandler+0xf6>
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0204 	orr.w	r2, r3, #4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d011      	beq.n	8005c66 <HAL_UART_IRQHandler+0x126>
 8005c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d105      	bne.n	8005c5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f043 0208 	orr.w	r2, r3, #8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 81ed 	beq.w	800604a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_UART_IRQHandler+0x14e>
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fb1a 	bl	80062c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <HAL_UART_IRQHandler+0x17a>
 8005cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d04f      	beq.n	8005d5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa22 	bl	8006104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d141      	bne.n	8005d52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3314      	adds	r3, #20
 8005cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1d9      	bne.n	8005cce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d013      	beq.n	8005d4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	4a7d      	ldr	r2, [pc, #500]	; (8005f1c <HAL_UART_IRQHandler+0x3dc>)
 8005d28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fc fed9 	bl	8002ae6 <HAL_DMA_Abort_IT>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d016      	beq.n	8005d68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e00e      	b.n	8005d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f986 	bl	800605c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e00a      	b.n	8005d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f982 	bl	800605c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	e006      	b.n	8005d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f97e 	bl	800605c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d66:	e170      	b.n	800604a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	bf00      	nop
    return;
 8005d6a:	e16e      	b.n	800604a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	f040 814a 	bne.w	800600a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8143 	beq.w	800600a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 813c 	beq.w	800600a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	f040 80b4 	bne.w	8005f20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8140 	beq.w	800604e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f080 8139 	bcs.w	800604e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	f000 8088 	beq.w	8005f02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1d9      	bne.n	8005df2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3314      	adds	r3, #20
 8005e44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e1      	bne.n	8005e3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e3      	bne.n	8005e7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed2:	f023 0310 	bic.w	r3, r3, #16
 8005ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ee4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e3      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fc fd82 	bl	8002a06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8ac 	bl	8006070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f18:	e099      	b.n	800604e <HAL_UART_IRQHandler+0x50e>
 8005f1a:	bf00      	nop
 8005f1c:	080061cb 	.word	0x080061cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 808b 	beq.w	8006052 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8086 	beq.w	8006052 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f6a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e3      	bne.n	8005f46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e3      	bne.n	8005f7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fe8:	61fa      	str	r2, [r7, #28]
 8005fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e3      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f834 	bl	8006070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006008:	e023      	b.n	8006052 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_UART_IRQHandler+0x4ea>
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f8e5 	bl	80061f2 <UART_Transmit_IT>
    return;
 8006028:	e014      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <HAL_UART_IRQHandler+0x514>
 8006036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f925 	bl	8006292 <UART_EndTransmit_IT>
    return;
 8006048:	e004      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
    return;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
      return;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
      return;
 8006052:	bf00      	nop
  }
}
 8006054:	37e8      	adds	r7, #232	; 0xe8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop

0800605c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2222      	movs	r2, #34	; 0x22
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0220 	orr.w	r2, r2, #32
 80060f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b095      	sub	sp, #84	; 0x54
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800612c:	643a      	str	r2, [r7, #64]	; 0x40
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3314      	adds	r3, #20
 8006146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d119      	bne.n	80061b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60bb      	str	r3, [r7, #8]
   return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	647b      	str	r3, [r7, #68]	; 0x44
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800619c:	61ba      	str	r2, [r7, #24]
 800619e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6979      	ldr	r1, [r7, #20]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	613b      	str	r3, [r7, #16]
   return(result);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061be:	bf00      	nop
 80061c0:	3754      	adds	r7, #84	; 0x54
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff ff39 	bl	800605c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b21      	cmp	r3, #33	; 0x21
 8006204:	d13e      	bne.n	8006284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	d114      	bne.n	800623a <UART_Transmit_IT+0x48>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d110      	bne.n	800623a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	1c9a      	adds	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	621a      	str	r2, [r3, #32]
 8006238:	e008      	b.n	800624c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6211      	str	r1, [r2, #32]
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29b      	uxth	r3, r3
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4619      	mov	r1, r3
 800625a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10f      	bne.n	8006280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800626e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800627e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	e000      	b.n	8006286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006284:	2302      	movs	r3, #2
  }
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc f902 	bl	80024bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b08c      	sub	sp, #48	; 0x30
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b22      	cmp	r3, #34	; 0x22
 80062d4:	f040 80ab 	bne.w	800642e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e0:	d117      	bne.n	8006312 <UART_Receive_IT+0x50>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d113      	bne.n	8006312 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	b29a      	uxth	r2, r3
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
 8006310:	e026      	b.n	8006360 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d007      	beq.n	8006336 <UART_Receive_IT+0x74>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <UART_Receive_IT+0x82>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e008      	b.n	8006356 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4619      	mov	r1, r3
 800636e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006370:	2b00      	cmp	r3, #0
 8006372:	d15a      	bne.n	800642a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0220 	bic.w	r2, r2, #32
 8006382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d135      	bne.n	8006420 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f023 0310 	bic.w	r3, r3, #16
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	330c      	adds	r3, #12
 80063d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063da:	623a      	str	r2, [r7, #32]
 80063dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	69f9      	ldr	r1, [r7, #28]
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d10a      	bne.n	8006412 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fe29 	bl	8006070 <HAL_UARTEx_RxEventCallback>
 800641e:	e002      	b.n	8006426 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7fc f859 	bl	80024d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	e002      	b.n	8006430 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3730      	adds	r7, #48	; 0x30
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800643c:	b0c0      	sub	sp, #256	; 0x100
 800643e:	af00      	add	r7, sp, #0
 8006440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006454:	68d9      	ldr	r1, [r3, #12]
 8006456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	ea40 0301 	orr.w	r3, r0, r1
 8006460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	431a      	orrs	r2, r3
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	431a      	orrs	r2, r3
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006490:	f021 010c 	bic.w	r1, r1, #12
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800649e:	430b      	orrs	r3, r1
 80064a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b2:	6999      	ldr	r1, [r3, #24]
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	ea40 0301 	orr.w	r3, r0, r1
 80064be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b8f      	ldr	r3, [pc, #572]	; (8006704 <UART_SetConfig+0x2cc>)
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d005      	beq.n	80064d8 <UART_SetConfig+0xa0>
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b8d      	ldr	r3, [pc, #564]	; (8006708 <UART_SetConfig+0x2d0>)
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d104      	bne.n	80064e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064d8:	f7fe f93c 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 80064dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064e0:	e003      	b.n	80064ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064e2:	f7fe f923 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 80064e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f4:	f040 810c 	bne.w	8006710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800650a:	4622      	mov	r2, r4
 800650c:	462b      	mov	r3, r5
 800650e:	1891      	adds	r1, r2, r2
 8006510:	65b9      	str	r1, [r7, #88]	; 0x58
 8006512:	415b      	adcs	r3, r3
 8006514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800651a:	4621      	mov	r1, r4
 800651c:	eb12 0801 	adds.w	r8, r2, r1
 8006520:	4629      	mov	r1, r5
 8006522:	eb43 0901 	adc.w	r9, r3, r1
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800653a:	4690      	mov	r8, r2
 800653c:	4699      	mov	r9, r3
 800653e:	4623      	mov	r3, r4
 8006540:	eb18 0303 	adds.w	r3, r8, r3
 8006544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006548:	462b      	mov	r3, r5
 800654a:	eb49 0303 	adc.w	r3, r9, r3
 800654e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800655e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006566:	460b      	mov	r3, r1
 8006568:	18db      	adds	r3, r3, r3
 800656a:	653b      	str	r3, [r7, #80]	; 0x50
 800656c:	4613      	mov	r3, r2
 800656e:	eb42 0303 	adc.w	r3, r2, r3
 8006572:	657b      	str	r3, [r7, #84]	; 0x54
 8006574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800657c:	f7fa fa9e 	bl	8000abc <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4b61      	ldr	r3, [pc, #388]	; (800670c <UART_SetConfig+0x2d4>)
 8006586:	fba3 2302 	umull	r2, r3, r3, r2
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	011c      	lsls	r4, r3, #4
 800658e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006592:	2200      	movs	r2, #0
 8006594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800659c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	1891      	adds	r1, r2, r2
 80065a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80065a8:	415b      	adcs	r3, r3
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065b0:	4641      	mov	r1, r8
 80065b2:	eb12 0a01 	adds.w	sl, r2, r1
 80065b6:	4649      	mov	r1, r9
 80065b8:	eb43 0b01 	adc.w	fp, r3, r1
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065d0:	4692      	mov	sl, r2
 80065d2:	469b      	mov	fp, r3
 80065d4:	4643      	mov	r3, r8
 80065d6:	eb1a 0303 	adds.w	r3, sl, r3
 80065da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065de:	464b      	mov	r3, r9
 80065e0:	eb4b 0303 	adc.w	r3, fp, r3
 80065e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065fc:	460b      	mov	r3, r1
 80065fe:	18db      	adds	r3, r3, r3
 8006600:	643b      	str	r3, [r7, #64]	; 0x40
 8006602:	4613      	mov	r3, r2
 8006604:	eb42 0303 	adc.w	r3, r2, r3
 8006608:	647b      	str	r3, [r7, #68]	; 0x44
 800660a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800660e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006612:	f7fa fa53 	bl	8000abc <__aeabi_uldivmod>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4611      	mov	r1, r2
 800661c:	4b3b      	ldr	r3, [pc, #236]	; (800670c <UART_SetConfig+0x2d4>)
 800661e:	fba3 2301 	umull	r2, r3, r3, r1
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	2264      	movs	r2, #100	; 0x64
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	1acb      	subs	r3, r1, r3
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006632:	4b36      	ldr	r3, [pc, #216]	; (800670c <UART_SetConfig+0x2d4>)
 8006634:	fba3 2302 	umull	r2, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006640:	441c      	add	r4, r3
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006646:	2200      	movs	r2, #0
 8006648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800664c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	1891      	adds	r1, r2, r2
 800665a:	63b9      	str	r1, [r7, #56]	; 0x38
 800665c:	415b      	adcs	r3, r3
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006664:	4641      	mov	r1, r8
 8006666:	1851      	adds	r1, r2, r1
 8006668:	6339      	str	r1, [r7, #48]	; 0x30
 800666a:	4649      	mov	r1, r9
 800666c:	414b      	adcs	r3, r1
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800667c:	4659      	mov	r1, fp
 800667e:	00cb      	lsls	r3, r1, #3
 8006680:	4651      	mov	r1, sl
 8006682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006686:	4651      	mov	r1, sl
 8006688:	00ca      	lsls	r2, r1, #3
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	4603      	mov	r3, r0
 8006690:	4642      	mov	r2, r8
 8006692:	189b      	adds	r3, r3, r2
 8006694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006698:	464b      	mov	r3, r9
 800669a:	460a      	mov	r2, r1
 800669c:	eb42 0303 	adc.w	r3, r2, r3
 80066a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066b8:	460b      	mov	r3, r1
 80066ba:	18db      	adds	r3, r3, r3
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066be:	4613      	mov	r3, r2
 80066c0:	eb42 0303 	adc.w	r3, r2, r3
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066ce:	f7fa f9f5 	bl	8000abc <__aeabi_uldivmod>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <UART_SetConfig+0x2d4>)
 80066d8:	fba3 1302 	umull	r1, r3, r3, r2
 80066dc:	095b      	lsrs	r3, r3, #5
 80066de:	2164      	movs	r1, #100	; 0x64
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	3332      	adds	r3, #50	; 0x32
 80066ea:	4a08      	ldr	r2, [pc, #32]	; (800670c <UART_SetConfig+0x2d4>)
 80066ec:	fba2 2303 	umull	r2, r3, r2, r3
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	f003 0207 	and.w	r2, r3, #7
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4422      	add	r2, r4
 80066fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006700:	e105      	b.n	800690e <UART_SetConfig+0x4d6>
 8006702:	bf00      	nop
 8006704:	40011000 	.word	0x40011000
 8006708:	40011400 	.word	0x40011400
 800670c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006714:	2200      	movs	r2, #0
 8006716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800671a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800671e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006722:	4642      	mov	r2, r8
 8006724:	464b      	mov	r3, r9
 8006726:	1891      	adds	r1, r2, r2
 8006728:	6239      	str	r1, [r7, #32]
 800672a:	415b      	adcs	r3, r3
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006732:	4641      	mov	r1, r8
 8006734:	1854      	adds	r4, r2, r1
 8006736:	4649      	mov	r1, r9
 8006738:	eb43 0501 	adc.w	r5, r3, r1
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	00eb      	lsls	r3, r5, #3
 8006746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800674a:	00e2      	lsls	r2, r4, #3
 800674c:	4614      	mov	r4, r2
 800674e:	461d      	mov	r5, r3
 8006750:	4643      	mov	r3, r8
 8006752:	18e3      	adds	r3, r4, r3
 8006754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006758:	464b      	mov	r3, r9
 800675a:	eb45 0303 	adc.w	r3, r5, r3
 800675e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800676e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800677e:	4629      	mov	r1, r5
 8006780:	008b      	lsls	r3, r1, #2
 8006782:	4621      	mov	r1, r4
 8006784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006788:	4621      	mov	r1, r4
 800678a:	008a      	lsls	r2, r1, #2
 800678c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006790:	f7fa f994 	bl	8000abc <__aeabi_uldivmod>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4b60      	ldr	r3, [pc, #384]	; (800691c <UART_SetConfig+0x4e4>)
 800679a:	fba3 2302 	umull	r2, r3, r3, r2
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	011c      	lsls	r4, r3, #4
 80067a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	1891      	adds	r1, r2, r2
 80067ba:	61b9      	str	r1, [r7, #24]
 80067bc:	415b      	adcs	r3, r3
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c4:	4641      	mov	r1, r8
 80067c6:	1851      	adds	r1, r2, r1
 80067c8:	6139      	str	r1, [r7, #16]
 80067ca:	4649      	mov	r1, r9
 80067cc:	414b      	adcs	r3, r1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067dc:	4659      	mov	r1, fp
 80067de:	00cb      	lsls	r3, r1, #3
 80067e0:	4651      	mov	r1, sl
 80067e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067e6:	4651      	mov	r1, sl
 80067e8:	00ca      	lsls	r2, r1, #3
 80067ea:	4610      	mov	r0, r2
 80067ec:	4619      	mov	r1, r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	4642      	mov	r2, r8
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067f8:	464b      	mov	r3, r9
 80067fa:	460a      	mov	r2, r1
 80067fc:	eb42 0303 	adc.w	r3, r2, r3
 8006800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	67bb      	str	r3, [r7, #120]	; 0x78
 800680e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006810:	f04f 0200 	mov.w	r2, #0
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800681c:	4649      	mov	r1, r9
 800681e:	008b      	lsls	r3, r1, #2
 8006820:	4641      	mov	r1, r8
 8006822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006826:	4641      	mov	r1, r8
 8006828:	008a      	lsls	r2, r1, #2
 800682a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800682e:	f7fa f945 	bl	8000abc <__aeabi_uldivmod>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4b39      	ldr	r3, [pc, #228]	; (800691c <UART_SetConfig+0x4e4>)
 8006838:	fba3 1302 	umull	r1, r3, r3, r2
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	2164      	movs	r1, #100	; 0x64
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	3332      	adds	r3, #50	; 0x32
 800684a:	4a34      	ldr	r2, [pc, #208]	; (800691c <UART_SetConfig+0x4e4>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006856:	441c      	add	r4, r3
 8006858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685c:	2200      	movs	r2, #0
 800685e:	673b      	str	r3, [r7, #112]	; 0x70
 8006860:	677a      	str	r2, [r7, #116]	; 0x74
 8006862:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006866:	4642      	mov	r2, r8
 8006868:	464b      	mov	r3, r9
 800686a:	1891      	adds	r1, r2, r2
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	415b      	adcs	r3, r3
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006876:	4641      	mov	r1, r8
 8006878:	1851      	adds	r1, r2, r1
 800687a:	6039      	str	r1, [r7, #0]
 800687c:	4649      	mov	r1, r9
 800687e:	414b      	adcs	r3, r1
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800688e:	4659      	mov	r1, fp
 8006890:	00cb      	lsls	r3, r1, #3
 8006892:	4651      	mov	r1, sl
 8006894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006898:	4651      	mov	r1, sl
 800689a:	00ca      	lsls	r2, r1, #3
 800689c:	4610      	mov	r0, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	4603      	mov	r3, r0
 80068a2:	4642      	mov	r2, r8
 80068a4:	189b      	adds	r3, r3, r2
 80068a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a8:	464b      	mov	r3, r9
 80068aa:	460a      	mov	r2, r1
 80068ac:	eb42 0303 	adc.w	r3, r2, r3
 80068b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	663b      	str	r3, [r7, #96]	; 0x60
 80068bc:	667a      	str	r2, [r7, #100]	; 0x64
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068ca:	4649      	mov	r1, r9
 80068cc:	008b      	lsls	r3, r1, #2
 80068ce:	4641      	mov	r1, r8
 80068d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d4:	4641      	mov	r1, r8
 80068d6:	008a      	lsls	r2, r1, #2
 80068d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068dc:	f7fa f8ee 	bl	8000abc <__aeabi_uldivmod>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4b0d      	ldr	r3, [pc, #52]	; (800691c <UART_SetConfig+0x4e4>)
 80068e6:	fba3 1302 	umull	r1, r3, r3, r2
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	2164      	movs	r1, #100	; 0x64
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	3332      	adds	r3, #50	; 0x32
 80068f8:	4a08      	ldr	r2, [pc, #32]	; (800691c <UART_SetConfig+0x4e4>)
 80068fa:	fba2 2303 	umull	r2, r3, r2, r3
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	f003 020f 	and.w	r2, r3, #15
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4422      	add	r2, r4
 800690c:	609a      	str	r2, [r3, #8]
}
 800690e:	bf00      	nop
 8006910:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006914:	46bd      	mov	sp, r7
 8006916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691a:	bf00      	nop
 800691c:	51eb851f 	.word	0x51eb851f

08006920 <__errno>:
 8006920:	4b01      	ldr	r3, [pc, #4]	; (8006928 <__errno+0x8>)
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000010 	.word	0x20000010

0800692c <__libc_init_array>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4d0d      	ldr	r5, [pc, #52]	; (8006964 <__libc_init_array+0x38>)
 8006930:	4c0d      	ldr	r4, [pc, #52]	; (8006968 <__libc_init_array+0x3c>)
 8006932:	1b64      	subs	r4, r4, r5
 8006934:	10a4      	asrs	r4, r4, #2
 8006936:	2600      	movs	r6, #0
 8006938:	42a6      	cmp	r6, r4
 800693a:	d109      	bne.n	8006950 <__libc_init_array+0x24>
 800693c:	4d0b      	ldr	r5, [pc, #44]	; (800696c <__libc_init_array+0x40>)
 800693e:	4c0c      	ldr	r4, [pc, #48]	; (8006970 <__libc_init_array+0x44>)
 8006940:	f000 fc8e 	bl	8007260 <_init>
 8006944:	1b64      	subs	r4, r4, r5
 8006946:	10a4      	asrs	r4, r4, #2
 8006948:	2600      	movs	r6, #0
 800694a:	42a6      	cmp	r6, r4
 800694c:	d105      	bne.n	800695a <__libc_init_array+0x2e>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	f855 3b04 	ldr.w	r3, [r5], #4
 8006954:	4798      	blx	r3
 8006956:	3601      	adds	r6, #1
 8006958:	e7ee      	b.n	8006938 <__libc_init_array+0xc>
 800695a:	f855 3b04 	ldr.w	r3, [r5], #4
 800695e:	4798      	blx	r3
 8006960:	3601      	adds	r6, #1
 8006962:	e7f2      	b.n	800694a <__libc_init_array+0x1e>
 8006964:	080072ec 	.word	0x080072ec
 8006968:	080072ec 	.word	0x080072ec
 800696c:	080072ec 	.word	0x080072ec
 8006970:	080072f0 	.word	0x080072f0

08006974 <memset>:
 8006974:	4402      	add	r2, r0
 8006976:	4603      	mov	r3, r0
 8006978:	4293      	cmp	r3, r2
 800697a:	d100      	bne.n	800697e <memset+0xa>
 800697c:	4770      	bx	lr
 800697e:	f803 1b01 	strb.w	r1, [r3], #1
 8006982:	e7f9      	b.n	8006978 <memset+0x4>

08006984 <siprintf>:
 8006984:	b40e      	push	{r1, r2, r3}
 8006986:	b500      	push	{lr}
 8006988:	b09c      	sub	sp, #112	; 0x70
 800698a:	ab1d      	add	r3, sp, #116	; 0x74
 800698c:	9002      	str	r0, [sp, #8]
 800698e:	9006      	str	r0, [sp, #24]
 8006990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006994:	4809      	ldr	r0, [pc, #36]	; (80069bc <siprintf+0x38>)
 8006996:	9107      	str	r1, [sp, #28]
 8006998:	9104      	str	r1, [sp, #16]
 800699a:	4909      	ldr	r1, [pc, #36]	; (80069c0 <siprintf+0x3c>)
 800699c:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a0:	9105      	str	r1, [sp, #20]
 80069a2:	6800      	ldr	r0, [r0, #0]
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	a902      	add	r1, sp, #8
 80069a8:	f000 f868 	bl	8006a7c <_svfiprintf_r>
 80069ac:	9b02      	ldr	r3, [sp, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	b01c      	add	sp, #112	; 0x70
 80069b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b8:	b003      	add	sp, #12
 80069ba:	4770      	bx	lr
 80069bc:	20000010 	.word	0x20000010
 80069c0:	ffff0208 	.word	0xffff0208

080069c4 <__ssputs_r>:
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	688e      	ldr	r6, [r1, #8]
 80069ca:	429e      	cmp	r6, r3
 80069cc:	4682      	mov	sl, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	4690      	mov	r8, r2
 80069d2:	461f      	mov	r7, r3
 80069d4:	d838      	bhi.n	8006a48 <__ssputs_r+0x84>
 80069d6:	898a      	ldrh	r2, [r1, #12]
 80069d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069dc:	d032      	beq.n	8006a44 <__ssputs_r+0x80>
 80069de:	6825      	ldr	r5, [r4, #0]
 80069e0:	6909      	ldr	r1, [r1, #16]
 80069e2:	eba5 0901 	sub.w	r9, r5, r1
 80069e6:	6965      	ldr	r5, [r4, #20]
 80069e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069f0:	3301      	adds	r3, #1
 80069f2:	444b      	add	r3, r9
 80069f4:	106d      	asrs	r5, r5, #1
 80069f6:	429d      	cmp	r5, r3
 80069f8:	bf38      	it	cc
 80069fa:	461d      	movcc	r5, r3
 80069fc:	0553      	lsls	r3, r2, #21
 80069fe:	d531      	bpl.n	8006a64 <__ssputs_r+0xa0>
 8006a00:	4629      	mov	r1, r5
 8006a02:	f000 fb63 	bl	80070cc <_malloc_r>
 8006a06:	4606      	mov	r6, r0
 8006a08:	b950      	cbnz	r0, 8006a20 <__ssputs_r+0x5c>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	f8ca 3000 	str.w	r3, [sl]
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	6921      	ldr	r1, [r4, #16]
 8006a22:	464a      	mov	r2, r9
 8006a24:	f000 fabe 	bl	8006fa4 <memcpy>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	6126      	str	r6, [r4, #16]
 8006a36:	6165      	str	r5, [r4, #20]
 8006a38:	444e      	add	r6, r9
 8006a3a:	eba5 0509 	sub.w	r5, r5, r9
 8006a3e:	6026      	str	r6, [r4, #0]
 8006a40:	60a5      	str	r5, [r4, #8]
 8006a42:	463e      	mov	r6, r7
 8006a44:	42be      	cmp	r6, r7
 8006a46:	d900      	bls.n	8006a4a <__ssputs_r+0x86>
 8006a48:	463e      	mov	r6, r7
 8006a4a:	6820      	ldr	r0, [r4, #0]
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4641      	mov	r1, r8
 8006a50:	f000 fab6 	bl	8006fc0 <memmove>
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	1b9b      	subs	r3, r3, r6
 8006a58:	60a3      	str	r3, [r4, #8]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	4433      	add	r3, r6
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	2000      	movs	r0, #0
 8006a62:	e7db      	b.n	8006a1c <__ssputs_r+0x58>
 8006a64:	462a      	mov	r2, r5
 8006a66:	f000 fba5 	bl	80071b4 <_realloc_r>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d1e1      	bne.n	8006a34 <__ssputs_r+0x70>
 8006a70:	6921      	ldr	r1, [r4, #16]
 8006a72:	4650      	mov	r0, sl
 8006a74:	f000 fabe 	bl	8006ff4 <_free_r>
 8006a78:	e7c7      	b.n	8006a0a <__ssputs_r+0x46>
	...

08006a7c <_svfiprintf_r>:
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	4698      	mov	r8, r3
 8006a82:	898b      	ldrh	r3, [r1, #12]
 8006a84:	061b      	lsls	r3, r3, #24
 8006a86:	b09d      	sub	sp, #116	; 0x74
 8006a88:	4607      	mov	r7, r0
 8006a8a:	460d      	mov	r5, r1
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	d50e      	bpl.n	8006aae <_svfiprintf_r+0x32>
 8006a90:	690b      	ldr	r3, [r1, #16]
 8006a92:	b963      	cbnz	r3, 8006aae <_svfiprintf_r+0x32>
 8006a94:	2140      	movs	r1, #64	; 0x40
 8006a96:	f000 fb19 	bl	80070cc <_malloc_r>
 8006a9a:	6028      	str	r0, [r5, #0]
 8006a9c:	6128      	str	r0, [r5, #16]
 8006a9e:	b920      	cbnz	r0, 8006aaa <_svfiprintf_r+0x2e>
 8006aa0:	230c      	movs	r3, #12
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa8:	e0d1      	b.n	8006c4e <_svfiprintf_r+0x1d2>
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	616b      	str	r3, [r5, #20]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab2:	2320      	movs	r3, #32
 8006ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006abc:	2330      	movs	r3, #48	; 0x30
 8006abe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c68 <_svfiprintf_r+0x1ec>
 8006ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ac6:	f04f 0901 	mov.w	r9, #1
 8006aca:	4623      	mov	r3, r4
 8006acc:	469a      	mov	sl, r3
 8006ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ad2:	b10a      	cbz	r2, 8006ad8 <_svfiprintf_r+0x5c>
 8006ad4:	2a25      	cmp	r2, #37	; 0x25
 8006ad6:	d1f9      	bne.n	8006acc <_svfiprintf_r+0x50>
 8006ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8006adc:	d00b      	beq.n	8006af6 <_svfiprintf_r+0x7a>
 8006ade:	465b      	mov	r3, fp
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f7ff ff6d 	bl	80069c4 <__ssputs_r>
 8006aea:	3001      	adds	r0, #1
 8006aec:	f000 80aa 	beq.w	8006c44 <_svfiprintf_r+0x1c8>
 8006af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af2:	445a      	add	r2, fp
 8006af4:	9209      	str	r2, [sp, #36]	; 0x24
 8006af6:	f89a 3000 	ldrb.w	r3, [sl]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80a2 	beq.w	8006c44 <_svfiprintf_r+0x1c8>
 8006b00:	2300      	movs	r3, #0
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b0a:	f10a 0a01 	add.w	sl, sl, #1
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	9307      	str	r3, [sp, #28]
 8006b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b16:	931a      	str	r3, [sp, #104]	; 0x68
 8006b18:	4654      	mov	r4, sl
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b20:	4851      	ldr	r0, [pc, #324]	; (8006c68 <_svfiprintf_r+0x1ec>)
 8006b22:	f7f9 fb5d 	bl	80001e0 <memchr>
 8006b26:	9a04      	ldr	r2, [sp, #16]
 8006b28:	b9d8      	cbnz	r0, 8006b62 <_svfiprintf_r+0xe6>
 8006b2a:	06d0      	lsls	r0, r2, #27
 8006b2c:	bf44      	itt	mi
 8006b2e:	2320      	movmi	r3, #32
 8006b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b34:	0711      	lsls	r1, r2, #28
 8006b36:	bf44      	itt	mi
 8006b38:	232b      	movmi	r3, #43	; 0x2b
 8006b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b42:	2b2a      	cmp	r3, #42	; 0x2a
 8006b44:	d015      	beq.n	8006b72 <_svfiprintf_r+0xf6>
 8006b46:	9a07      	ldr	r2, [sp, #28]
 8006b48:	4654      	mov	r4, sl
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	f04f 0c0a 	mov.w	ip, #10
 8006b50:	4621      	mov	r1, r4
 8006b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b56:	3b30      	subs	r3, #48	; 0x30
 8006b58:	2b09      	cmp	r3, #9
 8006b5a:	d94e      	bls.n	8006bfa <_svfiprintf_r+0x17e>
 8006b5c:	b1b0      	cbz	r0, 8006b8c <_svfiprintf_r+0x110>
 8006b5e:	9207      	str	r2, [sp, #28]
 8006b60:	e014      	b.n	8006b8c <_svfiprintf_r+0x110>
 8006b62:	eba0 0308 	sub.w	r3, r0, r8
 8006b66:	fa09 f303 	lsl.w	r3, r9, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	9304      	str	r3, [sp, #16]
 8006b6e:	46a2      	mov	sl, r4
 8006b70:	e7d2      	b.n	8006b18 <_svfiprintf_r+0x9c>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	1d19      	adds	r1, r3, #4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	9103      	str	r1, [sp, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bfbb      	ittet	lt
 8006b7e:	425b      	neglt	r3, r3
 8006b80:	f042 0202 	orrlt.w	r2, r2, #2
 8006b84:	9307      	strge	r3, [sp, #28]
 8006b86:	9307      	strlt	r3, [sp, #28]
 8006b88:	bfb8      	it	lt
 8006b8a:	9204      	strlt	r2, [sp, #16]
 8006b8c:	7823      	ldrb	r3, [r4, #0]
 8006b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b90:	d10c      	bne.n	8006bac <_svfiprintf_r+0x130>
 8006b92:	7863      	ldrb	r3, [r4, #1]
 8006b94:	2b2a      	cmp	r3, #42	; 0x2a
 8006b96:	d135      	bne.n	8006c04 <_svfiprintf_r+0x188>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	9203      	str	r2, [sp, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfb8      	it	lt
 8006ba4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ba8:	3402      	adds	r4, #2
 8006baa:	9305      	str	r3, [sp, #20]
 8006bac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c78 <_svfiprintf_r+0x1fc>
 8006bb0:	7821      	ldrb	r1, [r4, #0]
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	f7f9 fb13 	bl	80001e0 <memchr>
 8006bba:	b140      	cbz	r0, 8006bce <_svfiprintf_r+0x152>
 8006bbc:	2340      	movs	r3, #64	; 0x40
 8006bbe:	eba0 000a 	sub.w	r0, r0, sl
 8006bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006bc6:	9b04      	ldr	r3, [sp, #16]
 8006bc8:	4303      	orrs	r3, r0
 8006bca:	3401      	adds	r4, #1
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd2:	4826      	ldr	r0, [pc, #152]	; (8006c6c <_svfiprintf_r+0x1f0>)
 8006bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bd8:	2206      	movs	r2, #6
 8006bda:	f7f9 fb01 	bl	80001e0 <memchr>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d038      	beq.n	8006c54 <_svfiprintf_r+0x1d8>
 8006be2:	4b23      	ldr	r3, [pc, #140]	; (8006c70 <_svfiprintf_r+0x1f4>)
 8006be4:	bb1b      	cbnz	r3, 8006c2e <_svfiprintf_r+0x1b2>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	3307      	adds	r3, #7
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	3308      	adds	r3, #8
 8006bf0:	9303      	str	r3, [sp, #12]
 8006bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf4:	4433      	add	r3, r6
 8006bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf8:	e767      	b.n	8006aca <_svfiprintf_r+0x4e>
 8006bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bfe:	460c      	mov	r4, r1
 8006c00:	2001      	movs	r0, #1
 8006c02:	e7a5      	b.n	8006b50 <_svfiprintf_r+0xd4>
 8006c04:	2300      	movs	r3, #0
 8006c06:	3401      	adds	r4, #1
 8006c08:	9305      	str	r3, [sp, #20]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f04f 0c0a 	mov.w	ip, #10
 8006c10:	4620      	mov	r0, r4
 8006c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c16:	3a30      	subs	r2, #48	; 0x30
 8006c18:	2a09      	cmp	r2, #9
 8006c1a:	d903      	bls.n	8006c24 <_svfiprintf_r+0x1a8>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0c5      	beq.n	8006bac <_svfiprintf_r+0x130>
 8006c20:	9105      	str	r1, [sp, #20]
 8006c22:	e7c3      	b.n	8006bac <_svfiprintf_r+0x130>
 8006c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c28:	4604      	mov	r4, r0
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e7f0      	b.n	8006c10 <_svfiprintf_r+0x194>
 8006c2e:	ab03      	add	r3, sp, #12
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	462a      	mov	r2, r5
 8006c34:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <_svfiprintf_r+0x1f8>)
 8006c36:	a904      	add	r1, sp, #16
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f3af 8000 	nop.w
 8006c3e:	1c42      	adds	r2, r0, #1
 8006c40:	4606      	mov	r6, r0
 8006c42:	d1d6      	bne.n	8006bf2 <_svfiprintf_r+0x176>
 8006c44:	89ab      	ldrh	r3, [r5, #12]
 8006c46:	065b      	lsls	r3, r3, #25
 8006c48:	f53f af2c 	bmi.w	8006aa4 <_svfiprintf_r+0x28>
 8006c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c4e:	b01d      	add	sp, #116	; 0x74
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	ab03      	add	r3, sp, #12
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <_svfiprintf_r+0x1f8>)
 8006c5c:	a904      	add	r1, sp, #16
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f000 f87a 	bl	8006d58 <_printf_i>
 8006c64:	e7eb      	b.n	8006c3e <_svfiprintf_r+0x1c2>
 8006c66:	bf00      	nop
 8006c68:	080072b0 	.word	0x080072b0
 8006c6c:	080072ba 	.word	0x080072ba
 8006c70:	00000000 	.word	0x00000000
 8006c74:	080069c5 	.word	0x080069c5
 8006c78:	080072b6 	.word	0x080072b6

08006c7c <_printf_common>:
 8006c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c80:	4616      	mov	r6, r2
 8006c82:	4699      	mov	r9, r3
 8006c84:	688a      	ldr	r2, [r1, #8]
 8006c86:	690b      	ldr	r3, [r1, #16]
 8006c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	bfb8      	it	lt
 8006c90:	4613      	movlt	r3, r2
 8006c92:	6033      	str	r3, [r6, #0]
 8006c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c98:	4607      	mov	r7, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	b10a      	cbz	r2, 8006ca2 <_printf_common+0x26>
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	0699      	lsls	r1, r3, #26
 8006ca6:	bf42      	ittt	mi
 8006ca8:	6833      	ldrmi	r3, [r6, #0]
 8006caa:	3302      	addmi	r3, #2
 8006cac:	6033      	strmi	r3, [r6, #0]
 8006cae:	6825      	ldr	r5, [r4, #0]
 8006cb0:	f015 0506 	ands.w	r5, r5, #6
 8006cb4:	d106      	bne.n	8006cc4 <_printf_common+0x48>
 8006cb6:	f104 0a19 	add.w	sl, r4, #25
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	6832      	ldr	r2, [r6, #0]
 8006cbe:	1a9b      	subs	r3, r3, r2
 8006cc0:	42ab      	cmp	r3, r5
 8006cc2:	dc26      	bgt.n	8006d12 <_printf_common+0x96>
 8006cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cc8:	1e13      	subs	r3, r2, #0
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	bf18      	it	ne
 8006cce:	2301      	movne	r3, #1
 8006cd0:	0692      	lsls	r2, r2, #26
 8006cd2:	d42b      	bmi.n	8006d2c <_printf_common+0xb0>
 8006cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cd8:	4649      	mov	r1, r9
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c0      	blx	r8
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d01e      	beq.n	8006d20 <_printf_common+0xa4>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	68e5      	ldr	r5, [r4, #12]
 8006ce6:	6832      	ldr	r2, [r6, #0]
 8006ce8:	f003 0306 	and.w	r3, r3, #6
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	bf08      	it	eq
 8006cf0:	1aad      	subeq	r5, r5, r2
 8006cf2:	68a3      	ldr	r3, [r4, #8]
 8006cf4:	6922      	ldr	r2, [r4, #16]
 8006cf6:	bf0c      	ite	eq
 8006cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cfc:	2500      	movne	r5, #0
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	bfc4      	itt	gt
 8006d02:	1a9b      	subgt	r3, r3, r2
 8006d04:	18ed      	addgt	r5, r5, r3
 8006d06:	2600      	movs	r6, #0
 8006d08:	341a      	adds	r4, #26
 8006d0a:	42b5      	cmp	r5, r6
 8006d0c:	d11a      	bne.n	8006d44 <_printf_common+0xc8>
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e008      	b.n	8006d24 <_printf_common+0xa8>
 8006d12:	2301      	movs	r3, #1
 8006d14:	4652      	mov	r2, sl
 8006d16:	4649      	mov	r1, r9
 8006d18:	4638      	mov	r0, r7
 8006d1a:	47c0      	blx	r8
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d103      	bne.n	8006d28 <_printf_common+0xac>
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d28:	3501      	adds	r5, #1
 8006d2a:	e7c6      	b.n	8006cba <_printf_common+0x3e>
 8006d2c:	18e1      	adds	r1, r4, r3
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	2030      	movs	r0, #48	; 0x30
 8006d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d36:	4422      	add	r2, r4
 8006d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d40:	3302      	adds	r3, #2
 8006d42:	e7c7      	b.n	8006cd4 <_printf_common+0x58>
 8006d44:	2301      	movs	r3, #1
 8006d46:	4622      	mov	r2, r4
 8006d48:	4649      	mov	r1, r9
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	47c0      	blx	r8
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d0e6      	beq.n	8006d20 <_printf_common+0xa4>
 8006d52:	3601      	adds	r6, #1
 8006d54:	e7d9      	b.n	8006d0a <_printf_common+0x8e>
	...

08006d58 <_printf_i>:
 8006d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5c:	7e0f      	ldrb	r7, [r1, #24]
 8006d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d60:	2f78      	cmp	r7, #120	; 0x78
 8006d62:	4691      	mov	r9, r2
 8006d64:	4680      	mov	r8, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	469a      	mov	sl, r3
 8006d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d6e:	d807      	bhi.n	8006d80 <_printf_i+0x28>
 8006d70:	2f62      	cmp	r7, #98	; 0x62
 8006d72:	d80a      	bhi.n	8006d8a <_printf_i+0x32>
 8006d74:	2f00      	cmp	r7, #0
 8006d76:	f000 80d8 	beq.w	8006f2a <_printf_i+0x1d2>
 8006d7a:	2f58      	cmp	r7, #88	; 0x58
 8006d7c:	f000 80a3 	beq.w	8006ec6 <_printf_i+0x16e>
 8006d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d88:	e03a      	b.n	8006e00 <_printf_i+0xa8>
 8006d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d8e:	2b15      	cmp	r3, #21
 8006d90:	d8f6      	bhi.n	8006d80 <_printf_i+0x28>
 8006d92:	a101      	add	r1, pc, #4	; (adr r1, 8006d98 <_printf_i+0x40>)
 8006d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d98:	08006df1 	.word	0x08006df1
 8006d9c:	08006e05 	.word	0x08006e05
 8006da0:	08006d81 	.word	0x08006d81
 8006da4:	08006d81 	.word	0x08006d81
 8006da8:	08006d81 	.word	0x08006d81
 8006dac:	08006d81 	.word	0x08006d81
 8006db0:	08006e05 	.word	0x08006e05
 8006db4:	08006d81 	.word	0x08006d81
 8006db8:	08006d81 	.word	0x08006d81
 8006dbc:	08006d81 	.word	0x08006d81
 8006dc0:	08006d81 	.word	0x08006d81
 8006dc4:	08006f11 	.word	0x08006f11
 8006dc8:	08006e35 	.word	0x08006e35
 8006dcc:	08006ef3 	.word	0x08006ef3
 8006dd0:	08006d81 	.word	0x08006d81
 8006dd4:	08006d81 	.word	0x08006d81
 8006dd8:	08006f33 	.word	0x08006f33
 8006ddc:	08006d81 	.word	0x08006d81
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006d81 	.word	0x08006d81
 8006de8:	08006d81 	.word	0x08006d81
 8006dec:	08006efb 	.word	0x08006efb
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	1d1a      	adds	r2, r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	602a      	str	r2, [r5, #0]
 8006df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0a3      	b.n	8006f4c <_printf_i+0x1f4>
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	6829      	ldr	r1, [r5, #0]
 8006e08:	0606      	lsls	r6, r0, #24
 8006e0a:	f101 0304 	add.w	r3, r1, #4
 8006e0e:	d50a      	bpl.n	8006e26 <_printf_i+0xce>
 8006e10:	680e      	ldr	r6, [r1, #0]
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	da03      	bge.n	8006e20 <_printf_i+0xc8>
 8006e18:	232d      	movs	r3, #45	; 0x2d
 8006e1a:	4276      	negs	r6, r6
 8006e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e20:	485e      	ldr	r0, [pc, #376]	; (8006f9c <_printf_i+0x244>)
 8006e22:	230a      	movs	r3, #10
 8006e24:	e019      	b.n	8006e5a <_printf_i+0x102>
 8006e26:	680e      	ldr	r6, [r1, #0]
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e2e:	bf18      	it	ne
 8006e30:	b236      	sxthne	r6, r6
 8006e32:	e7ef      	b.n	8006e14 <_printf_i+0xbc>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	1d19      	adds	r1, r3, #4
 8006e3a:	6029      	str	r1, [r5, #0]
 8006e3c:	0601      	lsls	r1, r0, #24
 8006e3e:	d501      	bpl.n	8006e44 <_printf_i+0xec>
 8006e40:	681e      	ldr	r6, [r3, #0]
 8006e42:	e002      	b.n	8006e4a <_printf_i+0xf2>
 8006e44:	0646      	lsls	r6, r0, #25
 8006e46:	d5fb      	bpl.n	8006e40 <_printf_i+0xe8>
 8006e48:	881e      	ldrh	r6, [r3, #0]
 8006e4a:	4854      	ldr	r0, [pc, #336]	; (8006f9c <_printf_i+0x244>)
 8006e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e4e:	bf0c      	ite	eq
 8006e50:	2308      	moveq	r3, #8
 8006e52:	230a      	movne	r3, #10
 8006e54:	2100      	movs	r1, #0
 8006e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e5a:	6865      	ldr	r5, [r4, #4]
 8006e5c:	60a5      	str	r5, [r4, #8]
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	bfa2      	ittt	ge
 8006e62:	6821      	ldrge	r1, [r4, #0]
 8006e64:	f021 0104 	bicge.w	r1, r1, #4
 8006e68:	6021      	strge	r1, [r4, #0]
 8006e6a:	b90e      	cbnz	r6, 8006e70 <_printf_i+0x118>
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	d04d      	beq.n	8006f0c <_printf_i+0x1b4>
 8006e70:	4615      	mov	r5, r2
 8006e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e76:	fb03 6711 	mls	r7, r3, r1, r6
 8006e7a:	5dc7      	ldrb	r7, [r0, r7]
 8006e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e80:	4637      	mov	r7, r6
 8006e82:	42bb      	cmp	r3, r7
 8006e84:	460e      	mov	r6, r1
 8006e86:	d9f4      	bls.n	8006e72 <_printf_i+0x11a>
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d10b      	bne.n	8006ea4 <_printf_i+0x14c>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	07de      	lsls	r6, r3, #31
 8006e90:	d508      	bpl.n	8006ea4 <_printf_i+0x14c>
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	6861      	ldr	r1, [r4, #4]
 8006e96:	4299      	cmp	r1, r3
 8006e98:	bfde      	ittt	le
 8006e9a:	2330      	movle	r3, #48	; 0x30
 8006e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ea0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ea4:	1b52      	subs	r2, r2, r5
 8006ea6:	6122      	str	r2, [r4, #16]
 8006ea8:	f8cd a000 	str.w	sl, [sp]
 8006eac:	464b      	mov	r3, r9
 8006eae:	aa03      	add	r2, sp, #12
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	f7ff fee2 	bl	8006c7c <_printf_common>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d14c      	bne.n	8006f56 <_printf_i+0x1fe>
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ec0:	b004      	add	sp, #16
 8006ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec6:	4835      	ldr	r0, [pc, #212]	; (8006f9c <_printf_i+0x244>)
 8006ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ecc:	6829      	ldr	r1, [r5, #0]
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ed4:	6029      	str	r1, [r5, #0]
 8006ed6:	061d      	lsls	r5, r3, #24
 8006ed8:	d514      	bpl.n	8006f04 <_printf_i+0x1ac>
 8006eda:	07df      	lsls	r7, r3, #31
 8006edc:	bf44      	itt	mi
 8006ede:	f043 0320 	orrmi.w	r3, r3, #32
 8006ee2:	6023      	strmi	r3, [r4, #0]
 8006ee4:	b91e      	cbnz	r6, 8006eee <_printf_i+0x196>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	f023 0320 	bic.w	r3, r3, #32
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	2310      	movs	r3, #16
 8006ef0:	e7b0      	b.n	8006e54 <_printf_i+0xfc>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	f043 0320 	orr.w	r3, r3, #32
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	2378      	movs	r3, #120	; 0x78
 8006efc:	4828      	ldr	r0, [pc, #160]	; (8006fa0 <_printf_i+0x248>)
 8006efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f02:	e7e3      	b.n	8006ecc <_printf_i+0x174>
 8006f04:	0659      	lsls	r1, r3, #25
 8006f06:	bf48      	it	mi
 8006f08:	b2b6      	uxthmi	r6, r6
 8006f0a:	e7e6      	b.n	8006eda <_printf_i+0x182>
 8006f0c:	4615      	mov	r5, r2
 8006f0e:	e7bb      	b.n	8006e88 <_printf_i+0x130>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	6826      	ldr	r6, [r4, #0]
 8006f14:	6961      	ldr	r1, [r4, #20]
 8006f16:	1d18      	adds	r0, r3, #4
 8006f18:	6028      	str	r0, [r5, #0]
 8006f1a:	0635      	lsls	r5, r6, #24
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	d501      	bpl.n	8006f24 <_printf_i+0x1cc>
 8006f20:	6019      	str	r1, [r3, #0]
 8006f22:	e002      	b.n	8006f2a <_printf_i+0x1d2>
 8006f24:	0670      	lsls	r0, r6, #25
 8006f26:	d5fb      	bpl.n	8006f20 <_printf_i+0x1c8>
 8006f28:	8019      	strh	r1, [r3, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	4615      	mov	r5, r2
 8006f30:	e7ba      	b.n	8006ea8 <_printf_i+0x150>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	1d1a      	adds	r2, r3, #4
 8006f36:	602a      	str	r2, [r5, #0]
 8006f38:	681d      	ldr	r5, [r3, #0]
 8006f3a:	6862      	ldr	r2, [r4, #4]
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f7f9 f94e 	bl	80001e0 <memchr>
 8006f44:	b108      	cbz	r0, 8006f4a <_printf_i+0x1f2>
 8006f46:	1b40      	subs	r0, r0, r5
 8006f48:	6060      	str	r0, [r4, #4]
 8006f4a:	6863      	ldr	r3, [r4, #4]
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f54:	e7a8      	b.n	8006ea8 <_printf_i+0x150>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	462a      	mov	r2, r5
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	47d0      	blx	sl
 8006f60:	3001      	adds	r0, #1
 8006f62:	d0ab      	beq.n	8006ebc <_printf_i+0x164>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	079b      	lsls	r3, r3, #30
 8006f68:	d413      	bmi.n	8006f92 <_printf_i+0x23a>
 8006f6a:	68e0      	ldr	r0, [r4, #12]
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	4298      	cmp	r0, r3
 8006f70:	bfb8      	it	lt
 8006f72:	4618      	movlt	r0, r3
 8006f74:	e7a4      	b.n	8006ec0 <_printf_i+0x168>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4632      	mov	r2, r6
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	47d0      	blx	sl
 8006f80:	3001      	adds	r0, #1
 8006f82:	d09b      	beq.n	8006ebc <_printf_i+0x164>
 8006f84:	3501      	adds	r5, #1
 8006f86:	68e3      	ldr	r3, [r4, #12]
 8006f88:	9903      	ldr	r1, [sp, #12]
 8006f8a:	1a5b      	subs	r3, r3, r1
 8006f8c:	42ab      	cmp	r3, r5
 8006f8e:	dcf2      	bgt.n	8006f76 <_printf_i+0x21e>
 8006f90:	e7eb      	b.n	8006f6a <_printf_i+0x212>
 8006f92:	2500      	movs	r5, #0
 8006f94:	f104 0619 	add.w	r6, r4, #25
 8006f98:	e7f5      	b.n	8006f86 <_printf_i+0x22e>
 8006f9a:	bf00      	nop
 8006f9c:	080072c1 	.word	0x080072c1
 8006fa0:	080072d2 	.word	0x080072d2

08006fa4 <memcpy>:
 8006fa4:	440a      	add	r2, r1
 8006fa6:	4291      	cmp	r1, r2
 8006fa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fac:	d100      	bne.n	8006fb0 <memcpy+0xc>
 8006fae:	4770      	bx	lr
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	d1f9      	bne.n	8006fb2 <memcpy+0xe>
 8006fbe:	bd10      	pop	{r4, pc}

08006fc0 <memmove>:
 8006fc0:	4288      	cmp	r0, r1
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	eb01 0402 	add.w	r4, r1, r2
 8006fc8:	d902      	bls.n	8006fd0 <memmove+0x10>
 8006fca:	4284      	cmp	r4, r0
 8006fcc:	4623      	mov	r3, r4
 8006fce:	d807      	bhi.n	8006fe0 <memmove+0x20>
 8006fd0:	1e43      	subs	r3, r0, #1
 8006fd2:	42a1      	cmp	r1, r4
 8006fd4:	d008      	beq.n	8006fe8 <memmove+0x28>
 8006fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fde:	e7f8      	b.n	8006fd2 <memmove+0x12>
 8006fe0:	4402      	add	r2, r0
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	428a      	cmp	r2, r1
 8006fe6:	d100      	bne.n	8006fea <memmove+0x2a>
 8006fe8:	bd10      	pop	{r4, pc}
 8006fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ff2:	e7f7      	b.n	8006fe4 <memmove+0x24>

08006ff4 <_free_r>:
 8006ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ff6:	2900      	cmp	r1, #0
 8006ff8:	d044      	beq.n	8007084 <_free_r+0x90>
 8006ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ffe:	9001      	str	r0, [sp, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	f1a1 0404 	sub.w	r4, r1, #4
 8007006:	bfb8      	it	lt
 8007008:	18e4      	addlt	r4, r4, r3
 800700a:	f000 f913 	bl	8007234 <__malloc_lock>
 800700e:	4a1e      	ldr	r2, [pc, #120]	; (8007088 <_free_r+0x94>)
 8007010:	9801      	ldr	r0, [sp, #4]
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	b933      	cbnz	r3, 8007024 <_free_r+0x30>
 8007016:	6063      	str	r3, [r4, #4]
 8007018:	6014      	str	r4, [r2, #0]
 800701a:	b003      	add	sp, #12
 800701c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007020:	f000 b90e 	b.w	8007240 <__malloc_unlock>
 8007024:	42a3      	cmp	r3, r4
 8007026:	d908      	bls.n	800703a <_free_r+0x46>
 8007028:	6825      	ldr	r5, [r4, #0]
 800702a:	1961      	adds	r1, r4, r5
 800702c:	428b      	cmp	r3, r1
 800702e:	bf01      	itttt	eq
 8007030:	6819      	ldreq	r1, [r3, #0]
 8007032:	685b      	ldreq	r3, [r3, #4]
 8007034:	1949      	addeq	r1, r1, r5
 8007036:	6021      	streq	r1, [r4, #0]
 8007038:	e7ed      	b.n	8007016 <_free_r+0x22>
 800703a:	461a      	mov	r2, r3
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	b10b      	cbz	r3, 8007044 <_free_r+0x50>
 8007040:	42a3      	cmp	r3, r4
 8007042:	d9fa      	bls.n	800703a <_free_r+0x46>
 8007044:	6811      	ldr	r1, [r2, #0]
 8007046:	1855      	adds	r5, r2, r1
 8007048:	42a5      	cmp	r5, r4
 800704a:	d10b      	bne.n	8007064 <_free_r+0x70>
 800704c:	6824      	ldr	r4, [r4, #0]
 800704e:	4421      	add	r1, r4
 8007050:	1854      	adds	r4, r2, r1
 8007052:	42a3      	cmp	r3, r4
 8007054:	6011      	str	r1, [r2, #0]
 8007056:	d1e0      	bne.n	800701a <_free_r+0x26>
 8007058:	681c      	ldr	r4, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	6053      	str	r3, [r2, #4]
 800705e:	4421      	add	r1, r4
 8007060:	6011      	str	r1, [r2, #0]
 8007062:	e7da      	b.n	800701a <_free_r+0x26>
 8007064:	d902      	bls.n	800706c <_free_r+0x78>
 8007066:	230c      	movs	r3, #12
 8007068:	6003      	str	r3, [r0, #0]
 800706a:	e7d6      	b.n	800701a <_free_r+0x26>
 800706c:	6825      	ldr	r5, [r4, #0]
 800706e:	1961      	adds	r1, r4, r5
 8007070:	428b      	cmp	r3, r1
 8007072:	bf04      	itt	eq
 8007074:	6819      	ldreq	r1, [r3, #0]
 8007076:	685b      	ldreq	r3, [r3, #4]
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	bf04      	itt	eq
 800707c:	1949      	addeq	r1, r1, r5
 800707e:	6021      	streq	r1, [r4, #0]
 8007080:	6054      	str	r4, [r2, #4]
 8007082:	e7ca      	b.n	800701a <_free_r+0x26>
 8007084:	b003      	add	sp, #12
 8007086:	bd30      	pop	{r4, r5, pc}
 8007088:	20000504 	.word	0x20000504

0800708c <sbrk_aligned>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4e0e      	ldr	r6, [pc, #56]	; (80070c8 <sbrk_aligned+0x3c>)
 8007090:	460c      	mov	r4, r1
 8007092:	6831      	ldr	r1, [r6, #0]
 8007094:	4605      	mov	r5, r0
 8007096:	b911      	cbnz	r1, 800709e <sbrk_aligned+0x12>
 8007098:	f000 f8bc 	bl	8007214 <_sbrk_r>
 800709c:	6030      	str	r0, [r6, #0]
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f8b7 	bl	8007214 <_sbrk_r>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d00a      	beq.n	80070c0 <sbrk_aligned+0x34>
 80070aa:	1cc4      	adds	r4, r0, #3
 80070ac:	f024 0403 	bic.w	r4, r4, #3
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d007      	beq.n	80070c4 <sbrk_aligned+0x38>
 80070b4:	1a21      	subs	r1, r4, r0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f8ac 	bl	8007214 <_sbrk_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d101      	bne.n	80070c4 <sbrk_aligned+0x38>
 80070c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070c4:	4620      	mov	r0, r4
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	20000508 	.word	0x20000508

080070cc <_malloc_r>:
 80070cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	1ccd      	adds	r5, r1, #3
 80070d2:	f025 0503 	bic.w	r5, r5, #3
 80070d6:	3508      	adds	r5, #8
 80070d8:	2d0c      	cmp	r5, #12
 80070da:	bf38      	it	cc
 80070dc:	250c      	movcc	r5, #12
 80070de:	2d00      	cmp	r5, #0
 80070e0:	4607      	mov	r7, r0
 80070e2:	db01      	blt.n	80070e8 <_malloc_r+0x1c>
 80070e4:	42a9      	cmp	r1, r5
 80070e6:	d905      	bls.n	80070f4 <_malloc_r+0x28>
 80070e8:	230c      	movs	r3, #12
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	2600      	movs	r6, #0
 80070ee:	4630      	mov	r0, r6
 80070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f4:	4e2e      	ldr	r6, [pc, #184]	; (80071b0 <_malloc_r+0xe4>)
 80070f6:	f000 f89d 	bl	8007234 <__malloc_lock>
 80070fa:	6833      	ldr	r3, [r6, #0]
 80070fc:	461c      	mov	r4, r3
 80070fe:	bb34      	cbnz	r4, 800714e <_malloc_r+0x82>
 8007100:	4629      	mov	r1, r5
 8007102:	4638      	mov	r0, r7
 8007104:	f7ff ffc2 	bl	800708c <sbrk_aligned>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	4604      	mov	r4, r0
 800710c:	d14d      	bne.n	80071aa <_malloc_r+0xde>
 800710e:	6834      	ldr	r4, [r6, #0]
 8007110:	4626      	mov	r6, r4
 8007112:	2e00      	cmp	r6, #0
 8007114:	d140      	bne.n	8007198 <_malloc_r+0xcc>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	4631      	mov	r1, r6
 800711a:	4638      	mov	r0, r7
 800711c:	eb04 0803 	add.w	r8, r4, r3
 8007120:	f000 f878 	bl	8007214 <_sbrk_r>
 8007124:	4580      	cmp	r8, r0
 8007126:	d13a      	bne.n	800719e <_malloc_r+0xd2>
 8007128:	6821      	ldr	r1, [r4, #0]
 800712a:	3503      	adds	r5, #3
 800712c:	1a6d      	subs	r5, r5, r1
 800712e:	f025 0503 	bic.w	r5, r5, #3
 8007132:	3508      	adds	r5, #8
 8007134:	2d0c      	cmp	r5, #12
 8007136:	bf38      	it	cc
 8007138:	250c      	movcc	r5, #12
 800713a:	4629      	mov	r1, r5
 800713c:	4638      	mov	r0, r7
 800713e:	f7ff ffa5 	bl	800708c <sbrk_aligned>
 8007142:	3001      	adds	r0, #1
 8007144:	d02b      	beq.n	800719e <_malloc_r+0xd2>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	442b      	add	r3, r5
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	e00e      	b.n	800716c <_malloc_r+0xa0>
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	1b52      	subs	r2, r2, r5
 8007152:	d41e      	bmi.n	8007192 <_malloc_r+0xc6>
 8007154:	2a0b      	cmp	r2, #11
 8007156:	d916      	bls.n	8007186 <_malloc_r+0xba>
 8007158:	1961      	adds	r1, r4, r5
 800715a:	42a3      	cmp	r3, r4
 800715c:	6025      	str	r5, [r4, #0]
 800715e:	bf18      	it	ne
 8007160:	6059      	strne	r1, [r3, #4]
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	bf08      	it	eq
 8007166:	6031      	streq	r1, [r6, #0]
 8007168:	5162      	str	r2, [r4, r5]
 800716a:	604b      	str	r3, [r1, #4]
 800716c:	4638      	mov	r0, r7
 800716e:	f104 060b 	add.w	r6, r4, #11
 8007172:	f000 f865 	bl	8007240 <__malloc_unlock>
 8007176:	f026 0607 	bic.w	r6, r6, #7
 800717a:	1d23      	adds	r3, r4, #4
 800717c:	1af2      	subs	r2, r6, r3
 800717e:	d0b6      	beq.n	80070ee <_malloc_r+0x22>
 8007180:	1b9b      	subs	r3, r3, r6
 8007182:	50a3      	str	r3, [r4, r2]
 8007184:	e7b3      	b.n	80070ee <_malloc_r+0x22>
 8007186:	6862      	ldr	r2, [r4, #4]
 8007188:	42a3      	cmp	r3, r4
 800718a:	bf0c      	ite	eq
 800718c:	6032      	streq	r2, [r6, #0]
 800718e:	605a      	strne	r2, [r3, #4]
 8007190:	e7ec      	b.n	800716c <_malloc_r+0xa0>
 8007192:	4623      	mov	r3, r4
 8007194:	6864      	ldr	r4, [r4, #4]
 8007196:	e7b2      	b.n	80070fe <_malloc_r+0x32>
 8007198:	4634      	mov	r4, r6
 800719a:	6876      	ldr	r6, [r6, #4]
 800719c:	e7b9      	b.n	8007112 <_malloc_r+0x46>
 800719e:	230c      	movs	r3, #12
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	4638      	mov	r0, r7
 80071a4:	f000 f84c 	bl	8007240 <__malloc_unlock>
 80071a8:	e7a1      	b.n	80070ee <_malloc_r+0x22>
 80071aa:	6025      	str	r5, [r4, #0]
 80071ac:	e7de      	b.n	800716c <_malloc_r+0xa0>
 80071ae:	bf00      	nop
 80071b0:	20000504 	.word	0x20000504

080071b4 <_realloc_r>:
 80071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b8:	4680      	mov	r8, r0
 80071ba:	4614      	mov	r4, r2
 80071bc:	460e      	mov	r6, r1
 80071be:	b921      	cbnz	r1, 80071ca <_realloc_r+0x16>
 80071c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	4611      	mov	r1, r2
 80071c6:	f7ff bf81 	b.w	80070cc <_malloc_r>
 80071ca:	b92a      	cbnz	r2, 80071d8 <_realloc_r+0x24>
 80071cc:	f7ff ff12 	bl	8006ff4 <_free_r>
 80071d0:	4625      	mov	r5, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d8:	f000 f838 	bl	800724c <_malloc_usable_size_r>
 80071dc:	4284      	cmp	r4, r0
 80071de:	4607      	mov	r7, r0
 80071e0:	d802      	bhi.n	80071e8 <_realloc_r+0x34>
 80071e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071e6:	d812      	bhi.n	800720e <_realloc_r+0x5a>
 80071e8:	4621      	mov	r1, r4
 80071ea:	4640      	mov	r0, r8
 80071ec:	f7ff ff6e 	bl	80070cc <_malloc_r>
 80071f0:	4605      	mov	r5, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0ed      	beq.n	80071d2 <_realloc_r+0x1e>
 80071f6:	42bc      	cmp	r4, r7
 80071f8:	4622      	mov	r2, r4
 80071fa:	4631      	mov	r1, r6
 80071fc:	bf28      	it	cs
 80071fe:	463a      	movcs	r2, r7
 8007200:	f7ff fed0 	bl	8006fa4 <memcpy>
 8007204:	4631      	mov	r1, r6
 8007206:	4640      	mov	r0, r8
 8007208:	f7ff fef4 	bl	8006ff4 <_free_r>
 800720c:	e7e1      	b.n	80071d2 <_realloc_r+0x1e>
 800720e:	4635      	mov	r5, r6
 8007210:	e7df      	b.n	80071d2 <_realloc_r+0x1e>
	...

08007214 <_sbrk_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d06      	ldr	r5, [pc, #24]	; (8007230 <_sbrk_r+0x1c>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7fb f9d8 	bl	80025d4 <_sbrk>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_sbrk_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_sbrk_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	2000050c 	.word	0x2000050c

08007234 <__malloc_lock>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__malloc_lock+0x8>)
 8007236:	f000 b811 	b.w	800725c <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	20000510 	.word	0x20000510

08007240 <__malloc_unlock>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__malloc_unlock+0x8>)
 8007242:	f000 b80c 	b.w	800725e <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	20000510 	.word	0x20000510

0800724c <_malloc_usable_size_r>:
 800724c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007250:	1f18      	subs	r0, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfbc      	itt	lt
 8007256:	580b      	ldrlt	r3, [r1, r0]
 8007258:	18c0      	addlt	r0, r0, r3
 800725a:	4770      	bx	lr

0800725c <__retarget_lock_acquire_recursive>:
 800725c:	4770      	bx	lr

0800725e <__retarget_lock_release_recursive>:
 800725e:	4770      	bx	lr

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
