
drone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008dd8  08008dd8  00018dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb8  08008eb8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ec0  08008ec0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000628  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006b8  200006b8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016117  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae3  00000000  00000000  000361d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00038cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  0003a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230de  00000000  00000000  0003b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017542  00000000  00000000  0005e34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d15d2  00000000  00000000  00075890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146e62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005980  00000000  00000000  00146eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dbc 	.word	0x08008dbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008dbc 	.word	0x08008dbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b974 	b.w	8000ecc <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468e      	mov	lr, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14d      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	d969      	bls.n	8000ce4 <__udivmoddi4+0xe8>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b152      	cbz	r2, 8000c2c <__udivmoddi4+0x30>
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	f1c2 0120 	rsb	r1, r2, #32
 8000c1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c26:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2a:	4094      	lsls	r4, r2
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	0c21      	lsrs	r1, r4, #16
 8000c32:	fbbe f6f8 	udiv	r6, lr, r8
 8000c36:	fa1f f78c 	uxth.w	r7, ip
 8000c3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c42:	fb06 f107 	mul.w	r1, r6, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c52:	f080 811f 	bcs.w	8000e94 <__udivmoddi4+0x298>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 811c 	bls.w	8000e94 <__udivmoddi4+0x298>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 f707 	mul.w	r7, r0, r7
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x92>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c80:	f080 810a 	bcs.w	8000e98 <__udivmoddi4+0x29c>
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	f240 8107 	bls.w	8000e98 <__udivmoddi4+0x29c>
 8000c8a:	4464      	add	r4, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	1be4      	subs	r4, r4, r7
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa4>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xc2>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f000 80ef 	beq.w	8000e8e <__udivmoddi4+0x292>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f683 	clz	r6, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d14a      	bne.n	8000d5c <__udivmoddi4+0x160>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd4>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80f9 	bhi.w	8000ec2 <__udivmoddi4+0x2c6>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	469e      	mov	lr, r3
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa4>
 8000cde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xec>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 8092 	bne.w	8000e16 <__udivmoddi4+0x21a>
 8000cf2:	eba1 010c 	sub.w	r1, r1, ip
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	2601      	movs	r6, #1
 8000d00:	0c20      	lsrs	r0, r4, #16
 8000d02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d06:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0e:	fb0e f003 	mul.w	r0, lr, r3
 8000d12:	4288      	cmp	r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x12c>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x12a>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f200 80cb 	bhi.w	8000ebc <__udivmoddi4+0x2c0>
 8000d26:	4643      	mov	r3, r8
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d30:	fb07 1110 	mls	r1, r7, r0, r1
 8000d34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d38:	fb0e fe00 	mul.w	lr, lr, r0
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x156>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d48:	d202      	bcs.n	8000d50 <__udivmoddi4+0x154>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f200 80bb 	bhi.w	8000ec6 <__udivmoddi4+0x2ca>
 8000d50:	4608      	mov	r0, r1
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x9a>
 8000d5c:	f1c6 0720 	rsb	r7, r6, #32
 8000d60:	40b3      	lsls	r3, r6
 8000d62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d72:	431c      	orrs	r4, r3
 8000d74:	40f9      	lsrs	r1, r7
 8000d76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d82:	0c20      	lsrs	r0, r4, #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fb09 1118 	mls	r1, r9, r8, r1
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	fb08 f00e 	mul.w	r0, r8, lr
 8000d94:	4288      	cmp	r0, r1
 8000d96:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9a:	d90b      	bls.n	8000db4 <__udivmoddi4+0x1b8>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da4:	f080 8088 	bcs.w	8000eb8 <__udivmoddi4+0x2bc>
 8000da8:	4288      	cmp	r0, r1
 8000daa:	f240 8085 	bls.w	8000eb8 <__udivmoddi4+0x2bc>
 8000dae:	f1a8 0802 	sub.w	r8, r8, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x1e2>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dd4:	d26c      	bcs.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dd6:	458e      	cmp	lr, r1
 8000dd8:	d96a      	bls.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de2:	fba0 9402 	umull	r9, r4, r0, r2
 8000de6:	eba1 010e 	sub.w	r1, r1, lr
 8000dea:	42a1      	cmp	r1, r4
 8000dec:	46c8      	mov	r8, r9
 8000dee:	46a6      	mov	lr, r4
 8000df0:	d356      	bcc.n	8000ea0 <__udivmoddi4+0x2a4>
 8000df2:	d053      	beq.n	8000e9c <__udivmoddi4+0x2a0>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x212>
 8000df6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000e02:	fa22 f306 	lsr.w	r3, r2, r6
 8000e06:	40f1      	lsrs	r1, r6
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	f1c2 0320 	rsb	r3, r2, #32
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa21 f303 	lsr.w	r3, r1, r3
 8000e24:	4091      	lsls	r1, r2
 8000e26:	4301      	orrs	r1, r0
 8000e28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e34:	fb07 3610 	mls	r6, r7, r0, r3
 8000e38:	0c0b      	lsrs	r3, r1, #16
 8000e3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e42:	429e      	cmp	r6, r3
 8000e44:	fa04 f402 	lsl.w	r4, r4, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x260>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e52:	d22f      	bcs.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e54:	429e      	cmp	r6, r3
 8000e56:	d92d      	bls.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1b9b      	subs	r3, r3, r6
 8000e5e:	b289      	uxth	r1, r1
 8000e60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e64:	fb07 3316 	mls	r3, r7, r6, r3
 8000e68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x28a>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e7c:	d216      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d914      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e82:	3e02      	subs	r6, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e8c:	e738      	b.n	8000d00 <__udivmoddi4+0x104>
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e705      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e3      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6f8      	b.n	8000c8e <__udivmoddi4+0x92>
 8000e9c:	454b      	cmp	r3, r9
 8000e9e:	d2a9      	bcs.n	8000df4 <__udivmoddi4+0x1f8>
 8000ea0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7a3      	b.n	8000df4 <__udivmoddi4+0x1f8>
 8000eac:	4646      	mov	r6, r8
 8000eae:	e7ea      	b.n	8000e86 <__udivmoddi4+0x28a>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	e794      	b.n	8000dde <__udivmoddi4+0x1e2>
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	e7d1      	b.n	8000e5c <__udivmoddi4+0x260>
 8000eb8:	46d0      	mov	r8, sl
 8000eba:	e77b      	b.n	8000db4 <__udivmoddi4+0x1b8>
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e732      	b.n	8000d28 <__udivmoddi4+0x12c>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e709      	b.n	8000cda <__udivmoddi4+0xde>
 8000ec6:	4464      	add	r4, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e742      	b.n	8000d52 <__udivmoddi4+0x156>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <debug>:

#include "hmc5883.h"
extern I2C_HandleTypeDef hi2c1;
static uint8_t devAddr = HMC5883L_DEFAULT_ADDRESS;

static void debug(uint8_t led, uint8_t count) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e024      	b.n	8000f30 <debug+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d103      	bne.n	8000ef4 <debug+0x24>
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	4816      	ldr	r0, [pc, #88]	; (8000f48 <debug+0x78>)
 8000ef0:	f002 ffdf 	bl	8003eb2 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d103      	bne.n	8000f02 <debug+0x32>
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	4812      	ldr	r0, [pc, #72]	; (8000f48 <debug+0x78>)
 8000efe:	f002 ffd8 	bl	8003eb2 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000f02:	2064      	movs	r0, #100	; 0x64
 8000f04:	f002 fc58 	bl	80037b8 <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d103      	bne.n	8000f16 <debug+0x46>
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <debug+0x78>)
 8000f12:	f002 ffce 	bl	8003eb2 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d103      	bne.n	8000f24 <debug+0x54>
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	480a      	ldr	r0, [pc, #40]	; (8000f48 <debug+0x78>)
 8000f20:	f002 ffc7 	bl	8003eb2 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000f24:	2064      	movs	r0, #100	; 0x64
 8000f26:	f002 fc47 	bl	80037b8 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbd6      	blt.n	8000ee6 <debug+0x16>
  }

  HAL_Delay(200);
 8000f38:	20c8      	movs	r0, #200	; 0xc8
 8000f3a:	f002 fc3d 	bl	80037b8 <HAL_Delay>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000

08000f4c <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize(uint8_t Gain, uint8_t rate, uint8_t mode) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	460b      	mov	r3, r1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	717b      	strb	r3, [r7, #5]
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HMC5883L_initialize+0x8c>)
 8000f60:	223c      	movs	r2, #60	; 0x3c
 8000f62:	701a      	strb	r2, [r3, #0]
		uint8_t buffer[2];
		HAL_StatusTypeDef status;
		do {
		  status = HAL_I2C_IsDeviceReady(&hi2c1, devAddr, 3, 5);
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HMC5883L_initialize+0x8c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	481b      	ldr	r0, [pc, #108]	; (8000fdc <HMC5883L_initialize+0x90>)
 8000f70:	f003 fc22 	bl	80047b8 <HAL_I2C_IsDeviceReady>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
		  debug(1, status);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff ffa7 	bl	8000ed0 <debug>
		}
		while (status != HAL_OK);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1ed      	bne.n	8000f64 <HMC5883L_initialize+0x18>
    // write CONFIG_A register
		HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f002 fc15 	bl	80037b8 <HAL_Delay>
		buffer[0] = HMC5883L_RA_CONFIG_A;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	733b      	strb	r3, [r7, #12]
		buffer[1]	= rate;
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	737b      	strb	r3, [r7, #13]

		do {
		  status = HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 2, 10);
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HMC5883L_initialize+0x8c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b299      	uxth	r1, r3
 8000f9c:	f107 020c 	add.w	r2, r7, #12
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HMC5883L_initialize+0x90>)
 8000fa8:	f003 f8e2 	bl	8004170 <HAL_I2C_Master_Transmit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]
		  debug(1, status);
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ff8b 	bl	8000ed0 <debug>
		}
		while (status != HAL_OK);
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1ea      	bne.n	8000f96 <HMC5883L_initialize+0x4a>
    // write CONFIG_B register
    HMC5883L_setGain(Gain);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f80c 	bl	8000fe0 <HMC5883L_setGain>
		// write MODE register
    HMC5883L_setMode(mode);
 8000fc8:	797b      	ldrb	r3, [r7, #5]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f82c 	bl	8001028 <HMC5883L_setMode>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	200000b0 	.word	0x200000b0

08000fe0 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    //I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
		devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HMC5883L_setGain+0x40>)
 8000fec:	223c      	movs	r2, #60	; 0x3c
 8000fee:	701a      	strb	r2, [r3, #0]
		uint8_t buffer[2];
		buffer[0] = HMC5883L_RA_CONFIG_B;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	733b      	strb	r3, [r7, #12]
		buffer[1]	= gain;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 2, 10) != HAL_OK){}
 8000ff8:	bf00      	nop
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HMC5883L_setGain+0x40>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	f107 020c 	add.w	r2, r7, #12
 8001004:	230a      	movs	r3, #10
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <HMC5883L_setGain+0x44>)
 800100c:	f003 f8b0 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f1      	bne.n	8000ffa <HMC5883L_setGain+0x1a>
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	200000b0 	.word	0x200000b0

08001028 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    //I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
		devAddr = HMC5883L_DEFAULT_ADDRESS;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HMC5883L_setMode+0x44>)
 8001034:	223c      	movs	r2, #60	; 0x3c
 8001036:	701a      	strb	r2, [r3, #0]
		uint8_t buffer[2];
		buffer[0] = HMC5883L_RA_MODE;
 8001038:	2302      	movs	r3, #2
 800103a:	733b      	strb	r3, [r7, #12]
		buffer[1]	= newMode; // + 0x80;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 2, 10) != HAL_OK){}
 8001040:	bf00      	nop
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HMC5883L_setMode+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b299      	uxth	r1, r3
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	230a      	movs	r3, #10
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2302      	movs	r3, #2
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <HMC5883L_setMode+0x48>)
 8001054:	f003 f88c 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f1      	bne.n	8001042 <HMC5883L_setMode+0x1a>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <HMC5883L_setMode+0x4c>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	7013      	strb	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	200000b0 	.word	0x200000b0
 8001074:	200000ac 	.word	0x200000ac

08001078 <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
    //I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer);
    //if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HMC5883L_getHeading+0x90>)
 8001086:	223c      	movs	r2, #60	; 0x3c
 8001088:	701a      	strb	r2, [r3, #0]
		uint8_t buffer[6];
		buffer[0] = HMC5883L_RA_DATAX_H;
 800108a:	2303      	movs	r3, #3
 800108c:	743b      	strb	r3, [r7, #16]
		//buffer[1]	= 0x00;
		while(HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 1, 1) != HAL_OK){}
 800108e:	bf00      	nop
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HMC5883L_getHeading+0x90>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b299      	uxth	r1, r3
 8001096:	f107 0210 	add.w	r2, r7, #16
 800109a:	2301      	movs	r3, #1
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <HMC5883L_getHeading+0x94>)
 80010a2:	f003 f865 	bl	8004170 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f1      	bne.n	8001090 <HMC5883L_getHeading+0x18>
			//HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 1, 1);
		while(HAL_I2C_Master_Receive(&hi2c1, devAddr, (uint8_t*) buffer, 6, 1) != HAL_OK){}
 80010ac:	bf00      	nop
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HMC5883L_getHeading+0x90>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	f107 0210 	add.w	r2, r7, #16
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2306      	movs	r3, #6
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <HMC5883L_getHeading+0x94>)
 80010c0:	f003 f954 	bl	800436c <HAL_I2C_Master_Receive>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f1      	bne.n	80010ae <HMC5883L_getHeading+0x36>
			//HAL_I2C_Master_Receive(&hi2c1, devAddr, (uint8_t*) buffer, 6, 10);
		*x = (((int16_t)buffer[0]) << 8) | buffer[1];
 80010ca:	7c3b      	ldrb	r3, [r7, #16]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7c7b      	ldrb	r3, [r7, #17]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80010dc:	7d3b      	ldrb	r3, [r7, #20]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7d7b      	ldrb	r3, [r7, #21]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80010ee:	7cbb      	ldrb	r3, [r7, #18]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7cfb      	ldrb	r3, [r7, #19]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	801a      	strh	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	200000b0 	.word	0x200000b0

08001110 <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	ed87 0a02 	vstr	s0, [r7, #8]
 800111c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001120:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	609a      	str	r2, [r3, #8]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 8001142:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edd3 6a01 	vldr	s13, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	ed93 7a01 	vldr	s14, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	ed93 7a04 	vldr	s14, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edd3 6a05 	vldr	s13, [r3, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001182:	ed97 6a00 	vldr	s12, [r7]
 8001186:	ee76 7a67 	vsub.f32	s15, s12, s15
 800118a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edd3 7a05 	vldr	s15, [r3, #20]
 800119e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	ee17 0a90 	vmov	r0, s15
 80011b4:	f7ff f9c8 	bl	8000548 <__aeabi_f2d>
 80011b8:	4604      	mov	r4, r0
 80011ba:	460d      	mov	r5, r1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	ed93 7a04 	vldr	s14, [r3, #16]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80011c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011cc:	eef0 7ae7 	vabs.f32	s15, s15
 80011d0:	ee17 0a90 	vmov	r0, s15
 80011d4:	f7ff f9b8 	bl	8000548 <__aeabi_f2d>
 80011d8:	4680      	mov	r8, r0
 80011da:	4689      	mov	r9, r1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9b1 	bl	8000548 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4640      	mov	r0, r8
 80011ec:	4649      	mov	r1, r9
 80011ee:	f7ff fa03 	bl	80005f8 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f847 	bl	800028c <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fc91 	bl	8000b2c <__aeabi_d2f>
 800120a:	4602      	mov	r2, r0
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	ee07 3a90 	vmov	s15, r3
}
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800122c <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e024      	b.n	800128c <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d103      	bne.n	8001250 <flash+0x24>
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <flash+0x78>)
 800124c:	f002 fe31 	bl	8003eb2 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d103      	bne.n	800125e <flash+0x32>
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <flash+0x78>)
 800125a:	f002 fe2a 	bl	8003eb2 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800125e:	2064      	movs	r0, #100	; 0x64
 8001260:	f002 faaa 	bl	80037b8 <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d103      	bne.n	8001272 <flash+0x46>
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <flash+0x78>)
 800126e:	f002 fe20 	bl	8003eb2 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d103      	bne.n	8001280 <flash+0x54>
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	480a      	ldr	r0, [pc, #40]	; (80012a4 <flash+0x78>)
 800127c:	f002 fe19 	bl	8003eb2 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001280:	2064      	movs	r0, #100	; 0x64
 8001282:	f002 fa99 	bl	80037b8 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbd6      	blt.n	8001242 <flash+0x16>
  }

  HAL_Delay(200);
 8001294:	20c8      	movs	r0, #200	; 0xc8
 8001296:	f002 fa8f 	bl	80037b8 <HAL_Delay>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000

080012a8 <console>:

// Monitor console
void console(const char *str) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7fe ff8d 	bl	80001d0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <console+0x24>)
 80012c0:	f005 feff 	bl	80070c2 <HAL_UART_Transmit_IT>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200002d4 	.word	0x200002d4

080012d0 <send_data>:

void send_data(float x1, float x2, float x3,
    float x4, float x5, float x6, float x7, float x8, float x9) {
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	b093      	sub	sp, #76	; 0x4c
 80012d4:	af08      	add	r7, sp, #32
 80012d6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80012da:	edc7 0a08 	vstr	s1, [r7, #32]
 80012de:	ed87 1a07 	vstr	s2, [r7, #28]
 80012e2:	edc7 1a06 	vstr	s3, [r7, #24]
 80012e6:	ed87 2a05 	vstr	s4, [r7, #20]
 80012ea:	edc7 2a04 	vstr	s5, [r7, #16]
 80012ee:	ed87 3a03 	vstr	s6, [r7, #12]
 80012f2:	edc7 3a02 	vstr	s7, [r7, #8]
 80012f6:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 80012fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fe:	2100      	movs	r1, #0
 8001300:	4837      	ldr	r0, [pc, #220]	; (80013e0 <send_data+0x110>)
 8001302:	f006 fe6d 	bl	8007fe0 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 8001306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80013e4 <send_data+0x114>
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001312:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001316:	edd7 7a08 	vldr	s15, [r7, #32]
 800131a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80013e4 <send_data+0x114>
 800131e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001322:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013e4 <send_data+0x114>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 800133a:	edd7 7a06 	vldr	s15, [r7, #24]
 800133e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80013e4 <send_data+0x114>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134a:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800134e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001352:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80013e4 <send_data+0x114>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 8001362:	edd7 7a04 	vldr	s15, [r7, #16]
 8001366:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80013e4 <send_data+0x114>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 8001376:	edd7 7a03 	vldr	s15, [r7, #12]
 800137a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80013e4 <send_data+0x114>
 800137e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001386:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 800138a:	edd7 7a02 	vldr	s15, [r7, #8]
 800138e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013e4 <send_data+0x114>
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80013e4 <send_data+0x114>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80013aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ae:	ee17 6a90 	vmov	r6, s15
 80013b2:	9606      	str	r6, [sp, #24]
 80013b4:	9505      	str	r5, [sp, #20]
 80013b6:	9404      	str	r4, [sp, #16]
 80013b8:	9003      	str	r0, [sp, #12]
 80013ba:	9102      	str	r1, [sp, #8]
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	ee16 3a10 	vmov	r3, s12
 80013c4:	ee16 2a90 	vmov	r2, s13
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <send_data+0x118>)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <send_data+0x110>)
 80013cc:	f006 fe10 	bl	8007ff0 <siprintf>
  console(g_console_msg);
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <send_data+0x110>)
 80013d2:	f7ff ff69 	bl	80012a8 <console>
}
 80013d6:	bf00      	nop
 80013d8:	372c      	adds	r7, #44	; 0x2c
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000538 	.word	0x20000538
 80013e4:	47c35000 	.word	0x47c35000
 80013e8:	08008dd8 	.word	0x08008dd8

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f2:	f002 f96f 	bl	80036d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f8b9 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fa:	f000 fc5b 	bl	8001cb4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013fe:	f000 f9b9 	bl	8001774 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001402:	f000 f91d 	bl	8001640 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001406:	f000 fa79 	bl	80018fc <MX_TIM2_Init>
  MX_TIM3_Init();
 800140a:	f000 faf1 	bl	80019f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800140e:	f000 fb6b 	bl	8001ae8 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001412:	f000 f943 	bl	800169c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001416:	f000 f977 	bl	8001708 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800141a:	f000 fbf7 	bl	8001c0c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800141e:	f000 fc1f 	bl	8001c60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  flash(2, 3);
 8001422:	2103      	movs	r1, #3
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff ff01 	bl	800122c <flash>

  // Gyro, accel
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 1);
 800142a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800142e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001432:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001436:	483f      	ldr	r0, [pc, #252]	; (8001534 <main+0x148>)
 8001438:	f7ff fe6a 	bl	8001110 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 1);
 800143c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001440:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001444:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001448:	483b      	ldr	r0, [pc, #236]	; (8001538 <main+0x14c>)
 800144a:	f7ff fe61 	bl	8001110 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 1);
 800144e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001452:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001456:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800145a:	4838      	ldr	r0, [pc, #224]	; (800153c <main+0x150>)
 800145c:	f7ff fe58 	bl	8001110 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 1);
 8001460:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001464:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001468:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800146c:	4834      	ldr	r0, [pc, #208]	; (8001540 <main+0x154>)
 800146e:	f7ff fe4f 	bl	8001110 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 1);
 8001472:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001476:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800147a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800147e:	4831      	ldr	r0, [pc, #196]	; (8001544 <main+0x158>)
 8001480:	f7ff fe46 	bl	8001110 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 1);
 8001484:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001488:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800148c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001490:	482d      	ldr	r0, [pc, #180]	; (8001548 <main+0x15c>)
 8001492:	f7ff fe3d 	bl	8001110 <SimpleKalmanFilter_Init>

  // Initialize GY-86
  SD_MPU6050_Init(
 8001496:	2303      	movs	r3, #3
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2303      	movs	r3, #3
 800149c:	2200      	movs	r2, #0
 800149e:	492b      	ldr	r1, [pc, #172]	; (800154c <main+0x160>)
 80014a0:	482b      	ldr	r0, [pc, #172]	; (8001550 <main+0x164>)
 80014a2:	f000 fc86 	bl	8001db2 <SD_MPU6050_Init>
      &hi2c1,
      &g_dev1,
      SD_MPU6050_Device_0,
      SD_MPU6050_Accelerometer_16G,
      SD_MPU6050_Gyroscope_2000s);
  SD_MPU6050_SetDataRate(&hi2c1, &g_dev1, SD_MPU6050_DataRate_8KHz);
 80014a6:	2200      	movs	r2, #0
 80014a8:	4928      	ldr	r1, [pc, #160]	; (800154c <main+0x160>)
 80014aa:	4829      	ldr	r0, [pc, #164]	; (8001550 <main+0x164>)
 80014ac:	f000 fcf6 	bl	8001e9c <SD_MPU6050_SetDataRate>
  flash(1, 2);
 80014b0:	2102      	movs	r1, #2
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff feba 	bl	800122c <flash>

  begin(&g_dev2, MS5611_HIGH_RES); // MS5611 sensor init
 80014b8:	2106      	movs	r1, #6
 80014ba:	4826      	ldr	r0, [pc, #152]	; (8001554 <main+0x168>)
 80014bc:	f000 fed2 	bl	8002264 <begin>
  Set_config(&hi2c1, &g_dev1, MPU6050_DLPF_BW_260); // LPF mpu
 80014c0:	2200      	movs	r2, #0
 80014c2:	4922      	ldr	r1, [pc, #136]	; (800154c <main+0x160>)
 80014c4:	4822      	ldr	r0, [pc, #136]	; (8001550 <main+0x164>)
 80014c6:	f000 fea5 	bl	8002214 <Set_config>
  SetAuxbus(&hi2c1, &g_dev1); // Enable MPU6050 AUX bus to interface with HMC5883l
 80014ca:	4920      	ldr	r1, [pc, #128]	; (800154c <main+0x160>)
 80014cc:	4820      	ldr	r0, [pc, #128]	; (8001550 <main+0x164>)
 80014ce:	f000 fe6f 	bl	80021b0 <SetAuxbus>
  HMC5883L_initialize(HMC5883L_GAIN_1370, HMC5883L_RATE_75, HMC5883L_MODE_CONTINUOUS);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2118      	movs	r1, #24
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fd38 	bl	8000f4c <HMC5883L_initialize>
  flash(1, 2);
 80014dc:	2102      	movs	r1, #2
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fea4 	bl	800122c <flash>

  // Init PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	481c      	ldr	r0, [pc, #112]	; (8001558 <main+0x16c>)
 80014e8:	f004 fc00 	bl	8005cec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014ec:	2104      	movs	r1, #4
 80014ee:	481a      	ldr	r0, [pc, #104]	; (8001558 <main+0x16c>)
 80014f0:	f004 fbfc 	bl	8005cec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014f4:	2108      	movs	r1, #8
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <main+0x16c>)
 80014f8:	f004 fbf8 	bl	8005cec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014fc:	210c      	movs	r1, #12
 80014fe:	4816      	ldr	r0, [pc, #88]	; (8001558 <main+0x16c>)
 8001500:	f004 fbf4 	bl	8005cec <HAL_TIM_PWM_Start>
  flash(1, 2);
 8001504:	2102      	movs	r1, #2
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fe90 	bl	800122c <flash>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <main+0x170>)
 800150e:	f004 fb2d 	bl	8005b6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001512:	4813      	ldr	r0, [pc, #76]	; (8001560 <main+0x174>)
 8001514:	f004 fb2a 	bl	8005b6c <HAL_TIM_Base_Start_IT>
  flash(1, 2);
 8001518:	2102      	movs	r1, #2
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fe86 	bl	800122c <flash>

  flash(2, 3);
 8001520:	2103      	movs	r1, #3
 8001522:	2002      	movs	r0, #2
 8001524:	f7ff fe82 	bl	800122c <flash>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Receive data and callback HAL_UART_RxCpltCallback
    HAL_UART_Receive_IT(&huart1, g_control, 5);
 8001528:	2205      	movs	r2, #5
 800152a:	490e      	ldr	r1, [pc, #56]	; (8001564 <main+0x178>)
 800152c:	480e      	ldr	r0, [pc, #56]	; (8001568 <main+0x17c>)
 800152e:	f005 fe0d 	bl	800714c <HAL_UART_Receive_IT>
 8001532:	e7f9      	b.n	8001528 <main+0x13c>
 8001534:	2000035c 	.word	0x2000035c
 8001538:	20000374 	.word	0x20000374
 800153c:	2000038c 	.word	0x2000038c
 8001540:	200003a4 	.word	0x200003a4
 8001544:	200003bc 	.word	0x200003bc
 8001548:	200003d4 	.word	0x200003d4
 800154c:	200004ac 	.word	0x200004ac
 8001550:	200000b0 	.word	0x200000b0
 8001554:	200004c8 	.word	0x200004c8
 8001558:	200001b4 	.word	0x200001b4
 800155c:	20000244 	.word	0x20000244
 8001560:	2000028c 	.word	0x2000028c
 8001564:	20000530 	.word	0x20000530
 8001568:	200002d4 	.word	0x200002d4

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b094      	sub	sp, #80	; 0x50
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	2230      	movs	r2, #48	; 0x30
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f006 fd30 	bl	8007fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <SystemClock_Config+0xcc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <SystemClock_Config+0xcc>)
 800159a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <SystemClock_Config+0xcc>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <SystemClock_Config+0xd0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a21      	ldr	r2, [pc, #132]	; (800163c <SystemClock_Config+0xd0>)
 80015b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <SystemClock_Config+0xd0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015dc:	2304      	movs	r3, #4
 80015de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015e0:	23a8      	movs	r3, #168	; 0xa8
 80015e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015e8:	2304      	movs	r3, #4
 80015ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fd4b 	bl	800508c <HAL_RCC_OscConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015fc:	f000 fbd4 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001600:	230f      	movs	r3, #15
 8001602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	2302      	movs	r3, #2
 8001606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800160c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001612:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2105      	movs	r1, #5
 800161e:	4618      	mov	r0, r3
 8001620:	f003 ffac 	bl	800557c <HAL_RCC_ClockConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800162a:	f000 fbbd 	bl	8001da8 <Error_Handler>
  }
}
 800162e:	bf00      	nop
 8001630:	3750      	adds	r7, #80	; 0x50
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2C1_Init+0x50>)
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <MX_I2C1_Init+0x54>)
 8001648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_I2C1_Init+0x50>)
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <MX_I2C1_Init+0x58>)
 800164e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_I2C1_Init+0x50>)
 800165e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_I2C1_Init+0x50>)
 800167e:	f002 fc33 	bl	8003ee8 <HAL_I2C_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001688:	f000 fb8e 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200000b0 	.word	0x200000b0
 8001694:	40005400 	.word	0x40005400
 8001698:	000186a0 	.word	0x000186a0

0800169c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_SPI1_Init+0x64>)
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <MX_SPI1_Init+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_SPI1_Init+0x64>)
 80016a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI1_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_SPI1_Init+0x64>)
 80016c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI1_Init+0x64>)
 80016e8:	220a      	movs	r2, #10
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_SPI1_Init+0x64>)
 80016ee:	f004 f965 	bl	80059bc <HAL_SPI_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f8:	f000 fb56 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000104 	.word	0x20000104
 8001704:	40013000 	.word	0x40013000

08001708 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_SPI2_Init+0x64>)
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <MX_SPI2_Init+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_SPI2_Init+0x64>)
 8001714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001718:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_SPI2_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_SPI2_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_SPI2_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_SPI2_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_SPI2_Init+0x64>)
 8001734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001738:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_SPI2_Init+0x64>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_SPI2_Init+0x64>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_SPI2_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_SPI2_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_SPI2_Init+0x64>)
 8001754:	220a      	movs	r2, #10
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_SPI2_Init+0x64>)
 800175a:	f004 f92f 	bl	80059bc <HAL_SPI_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001764:	f000 fb20 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000015c 	.word	0x2000015c
 8001770:	40003800 	.word	0x40003800

08001774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b096      	sub	sp, #88	; 0x58
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2220      	movs	r2, #32
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 fc17 	bl	8007fe0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017b4:	4a50      	ldr	r2, [pc, #320]	; (80018f8 <MX_TIM1_Init+0x184>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80017b8:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017ba:	2214      	movs	r2, #20
 80017bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80017c4:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017de:	4845      	ldr	r0, [pc, #276]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017e0:	f004 f975 	bl	8005ace <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ea:	f000 fadd 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017f8:	4619      	mov	r1, r3
 80017fa:	483e      	ldr	r0, [pc, #248]	; (80018f4 <MX_TIM1_Init+0x180>)
 80017fc:	f004 fdfe 	bl	80063fc <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001806:	f000 facf 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800180a:	483a      	ldr	r0, [pc, #232]	; (80018f4 <MX_TIM1_Init+0x180>)
 800180c:	f004 fa1e 	bl	8005c4c <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001816:	f000 fac7 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001826:	4619      	mov	r1, r3
 8001828:	4832      	ldr	r0, [pc, #200]	; (80018f4 <MX_TIM1_Init+0x180>)
 800182a:	f005 fb1b 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001834:	f000 fab8 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	4825      	ldr	r0, [pc, #148]	; (80018f4 <MX_TIM1_Init+0x180>)
 800185e:	f004 fd0b 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001868:	f000 fa9e 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	2204      	movs	r2, #4
 8001872:	4619      	mov	r1, r3
 8001874:	481f      	ldr	r0, [pc, #124]	; (80018f4 <MX_TIM1_Init+0x180>)
 8001876:	f004 fcff 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001880:	f000 fa92 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	2208      	movs	r2, #8
 800188a:	4619      	mov	r1, r3
 800188c:	4819      	ldr	r0, [pc, #100]	; (80018f4 <MX_TIM1_Init+0x180>)
 800188e:	f004 fcf3 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001898:	f000 fa86 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	220c      	movs	r2, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4813      	ldr	r0, [pc, #76]	; (80018f4 <MX_TIM1_Init+0x180>)
 80018a6:	f004 fce7 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80018b0:	f000 fa7a 	bl	8001da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <MX_TIM1_Init+0x180>)
 80018d8:	f005 fb40 	bl	8006f5c <HAL_TIMEx_ConfigBreakDeadTime>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80018e2:	f000 fa61 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <MX_TIM1_Init+0x180>)
 80018e8:	f000 fff8 	bl	80028dc <HAL_TIM_MspPostInit>

}
 80018ec:	bf00      	nop
 80018ee:	3758      	adds	r7, #88	; 0x58
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200001b4 	.word	0x200001b4
 80018f8:	40010000 	.word	0x40010000

080018fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800191e:	4b33      	ldr	r3, [pc, #204]	; (80019ec <MX_TIM2_Init+0xf0>)
 8001920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <MX_TIM2_Init+0xf0>)
 8001928:	2214      	movs	r2, #20
 800192a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <MX_TIM2_Init+0xf0>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001932:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <MX_TIM2_Init+0xf0>)
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <MX_TIM2_Init+0xf0>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <MX_TIM2_Init+0xf0>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001946:	4829      	ldr	r0, [pc, #164]	; (80019ec <MX_TIM2_Init+0xf0>)
 8001948:	f004 f980 	bl	8005c4c <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001952:	f000 fa29 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4619      	mov	r1, r3
 8001964:	4821      	ldr	r0, [pc, #132]	; (80019ec <MX_TIM2_Init+0xf0>)
 8001966:	f005 fa7d 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001970:	f000 fa1a 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	2360      	movs	r3, #96	; 0x60
 8001976:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	4818      	ldr	r0, [pc, #96]	; (80019ec <MX_TIM2_Init+0xf0>)
 800198c:	f004 fc74 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001996:	f000 fa07 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2204      	movs	r2, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_TIM2_Init+0xf0>)
 80019a2:	f004 fc69 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019ac:	f000 f9fc 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2208      	movs	r2, #8
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_TIM2_Init+0xf0>)
 80019b8:	f004 fc5e 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80019c2:	f000 f9f1 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	220c      	movs	r2, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <MX_TIM2_Init+0xf0>)
 80019ce:	f004 fc53 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80019d8:	f000 f9e6 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <MX_TIM2_Init+0xf0>)
 80019de:	f000 ff7d 	bl	80028dc <HAL_TIM_MspPostInit>

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001fc 	.word	0x200001fc

080019f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a1c:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <MX_TIM3_Init+0xf4>)
 8001a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a22:	2253      	movs	r2, #83	; 0x53
 8001a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a40:	4827      	ldr	r0, [pc, #156]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a42:	f004 f844 	bl	8005ace <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001a4c:	f000 f9ac 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4820      	ldr	r0, [pc, #128]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a5e:	f004 fccd 	bl	80063fc <HAL_TIM_ConfigClockSource>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a68:	f000 f99e 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a6c:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a6e:	f004 fa05 	bl	8005e7c <HAL_TIM_IC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 f996 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001a8c:	f005 f9ea 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001a96:	f000 f987 	bl	8001da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2208      	movs	r2, #8
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001ab2:	f004 fb44 	bl	800613e <HAL_TIM_IC_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001abc:	f000 f974 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <MX_TIM3_Init+0xf0>)
 8001ac8:	f004 fb39 	bl	800613e <HAL_TIM_IC_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001ad2:	f000 f969 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000244 	.word	0x20000244
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b06:	463b      	mov	r3, r7
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b14:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <MX_TIM4_Init+0x120>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b1a:	2253      	movs	r2, #83	; 0x53
 8001b1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001b24:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b26:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b38:	4832      	ldr	r0, [pc, #200]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b3a:	f003 ffc8 	bl	8005ace <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001b44:	f000 f930 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0318 	add.w	r3, r7, #24
 8001b52:	4619      	mov	r1, r3
 8001b54:	482b      	ldr	r0, [pc, #172]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b56:	f004 fc51 	bl	80063fc <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b60:	f000 f922 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b64:	4827      	ldr	r0, [pc, #156]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b66:	f004 f989 	bl	8005e7c <HAL_TIM_IC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b70:	f000 f91a 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	4820      	ldr	r0, [pc, #128]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001b84:	f005 f96e 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001b8e:	f000 f90b 	bl	8001da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b96:	2301      	movs	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4816      	ldr	r0, [pc, #88]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001baa:	f004 fac8 	bl	800613e <HAL_TIM_IC_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001bb4:	f000 f8f8 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001bc0:	f004 fabd 	bl	800613e <HAL_TIM_IC_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001bca:	f000 f8ed 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001bd6:	f004 fab2 	bl	800613e <HAL_TIM_IC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8001be0:	f000 f8e2 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001be4:	463b      	mov	r3, r7
 8001be6:	220c      	movs	r2, #12
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM4_Init+0x11c>)
 8001bec:	f004 faa7 	bl	800613e <HAL_TIM_IC_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8001bf6:	f000 f8d7 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000028c 	.word	0x2000028c
 8001c08:	40000800 	.word	0x40000800

08001c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART1_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f005 f9f0 	bl	8007028 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 f8ab 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200002d4 	.word	0x200002d4
 8001c5c:	40011000 	.word	0x40011000

08001c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <MX_USART2_UART_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c98:	f005 f9c6 	bl	8007028 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca2:	f000 f881 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000318 	.word	0x20000318
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a2c      	ldr	r2, [pc, #176]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_GPIO_Init+0xec>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	21c0      	movs	r1, #192	; 0xc0
 8001d76:	480b      	ldr	r0, [pc, #44]	; (8001da4 <MX_GPIO_Init+0xf0>)
 8001d78:	f002 f882 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d7c:	23c0      	movs	r3, #192	; 0xc0
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d80:	2301      	movs	r3, #1
 8001d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4804      	ldr	r0, [pc, #16]	; (8001da4 <MX_GPIO_Init+0xf0>)
 8001d94:	f001 fed8 	bl	8003b48 <HAL_GPIO_Init>

}
 8001d98:	bf00      	nop
 8001d9a:	3730      	adds	r7, #48	; 0x30
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020000 	.word	0x40020000

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>

08001db2 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

/////////////////////////////////////////////
SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b08a      	sub	sp, #40	; 0x28
 8001db6:	af02      	add	r7, sp, #8
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001dc8:	2375      	movs	r3, #117	; 0x75
 8001dca:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001de2:	7efb      	ldrb	r3, [r7, #27]
 8001de4:	b299      	uxth	r1, r3
 8001de6:	2305      	movs	r3, #5
 8001de8:	2202      	movs	r2, #2
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f002 fce4 	bl	80047b8 <HAL_I2C_IsDeviceReady>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e04c      	b.n	8001e94 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001dfa:	7efb      	ldrb	r3, [r7, #27]
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	f107 021a 	add.w	r2, r7, #26
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	69f8      	ldr	r0, [r7, #28]
 8001e0c:	f002 f9b0 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e03c      	b.n	8001e94 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001e1a:	7efb      	ldrb	r3, [r7, #27]
 8001e1c:	b299      	uxth	r1, r3
 8001e1e:	f107 0219 	add.w	r2, r7, #25
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	69f8      	ldr	r0, [r7, #28]
 8001e2c:	f002 fa9e 	bl	800436c <HAL_I2C_Master_Receive>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e02c      	b.n	8001e94 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e02a      	b.n	8001e94 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001e3e:	bf00      	nop
 8001e40:	7e7b      	ldrb	r3, [r7, #25]
 8001e42:	2b68      	cmp	r3, #104	; 0x68
 8001e44:	d1f9      	bne.n	8001e3a <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001e46:	236b      	movs	r3, #107	; 0x6b
 8001e48:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001e4e:	7efb      	ldrb	r3, [r7, #27]
 8001e50:	b299      	uxth	r1, r3
 8001e52:	f107 0214 	add.w	r2, r7, #20
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	69f8      	ldr	r0, [r7, #28]
 8001e60:	f002 f986 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e012      	b.n	8001e94 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8001e6e:	2207      	movs	r2, #7
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f812 	bl	8001e9c <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f830 	bl	8001ee4 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8001e84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f899 	bl	8001fc4 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001eb4:	2319      	movs	r3, #25
 8001eb6:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001ebc:	bf00      	nop
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	b299      	uxth	r1, r3
 8001ec2:	f107 0210 	add.w	r2, r7, #16
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f002 f94e 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f1      	bne.n	8001ebe <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001efc:	231c      	movs	r3, #28
 8001efe:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001f00:	bf00      	nop
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	b299      	uxth	r1, r3
 8001f06:	f107 0211 	add.w	r2, r7, #17
 8001f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f002 f92c 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f1      	bne.n	8001f02 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001f1e:	bf00      	nop
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	b299      	uxth	r1, r3
 8001f24:	f107 0212 	add.w	r2, r7, #18
 8001f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	6978      	ldr	r0, [r7, #20]
 8001f32:	f002 fa1b 	bl	800436c <HAL_I2C_Master_Receive>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f1      	bne.n	8001f20 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001f3c:	7cbb      	ldrb	r3, [r7, #18]
 8001f3e:	b25b      	sxtb	r3, r3
 8001f40:	f023 0318 	bic.w	r3, r3, #24
 8001f44:	b25a      	sxtb	r2, r3
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001f54:	bf00      	nop
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	f107 0212 	add.w	r2, r7, #18
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f002 f902 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f1      	bne.n	8001f56 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d81f      	bhi.n	8001fb8 <SD_MPU6050_SetAccelerometer+0xd4>
 8001f78:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <SD_MPU6050_SetAccelerometer+0x9c>)
 8001f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7e:	bf00      	nop
 8001f80:	08001f91 	.word	0x08001f91
 8001f84:	08001f9b 	.word	0x08001f9b
 8001f88:	08001fa5 	.word	0x08001fa5
 8001f8c:	08001faf 	.word	0x08001faf
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001f96:	609a      	str	r2, [r3, #8]
			break;
 8001f98:	e00f      	b.n	8001fba <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001fa0:	609a      	str	r2, [r3, #8]
			break;
 8001fa2:	e00a      	b.n	8001fba <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001faa:	609a      	str	r2, [r3, #8]
			break;
 8001fac:	e005      	b.n	8001fba <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001fb4:	609a      	str	r2, [r3, #8]
			break;
 8001fb6:	e000      	b.n	8001fba <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8001fb8:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8001fdc:	231b      	movs	r3, #27
 8001fde:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001fe0:	bf00      	nop
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	b299      	uxth	r1, r3
 8001fe6:	f107 0211 	add.w	r2, r7, #17
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f002 f8bc 	bl	8004170 <HAL_I2C_Master_Transmit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f1      	bne.n	8001fe2 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001ffe:	bf00      	nop
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	b299      	uxth	r1, r3
 8002004:	f107 0212 	add.w	r2, r7, #18
 8002008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2301      	movs	r3, #1
 8002010:	6978      	ldr	r0, [r7, #20]
 8002012:	f002 f9ab 	bl	800436c <HAL_I2C_Master_Receive>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f1      	bne.n	8002000 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800201c:	7cbb      	ldrb	r3, [r7, #18]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	f023 0318 	bic.w	r3, r3, #24
 8002024:	b25a      	sxtb	r2, r3
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	b25b      	sxtb	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b25b      	sxtb	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002034:	bf00      	nop
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	b299      	uxth	r1, r3
 800203a:	f107 0212 	add.w	r2, r7, #18
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f002 f892 	bl	8004170 <HAL_I2C_Master_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f1      	bne.n	8002036 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d81b      	bhi.n	8002090 <SD_MPU6050_SetGyroscope+0xcc>
 8002058:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <SD_MPU6050_SetGyroscope+0x9c>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002071 	.word	0x08002071
 8002064:	08002079 	.word	0x08002079
 8002068:	08002081 	.word	0x08002081
 800206c:	08002089 	.word	0x08002089
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SD_MPU6050_SetGyroscope+0xd8>)
 8002074:	605a      	str	r2, [r3, #4]
				break;
 8002076:	e00c      	b.n	8002092 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <SD_MPU6050_SetGyroscope+0xdc>)
 800207c:	605a      	str	r2, [r3, #4]
				break;
 800207e:	e008      	b.n	8002092 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <SD_MPU6050_SetGyroscope+0xe0>)
 8002084:	605a      	str	r2, [r3, #4]
				break;
 8002086:	e004      	b.n	8002092 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <SD_MPU6050_SetGyroscope+0xe4>)
 800208c:	605a      	str	r2, [r3, #4]
				break;
 800208e:	e000      	b.n	8002092 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8002090:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	3bfa232d 	.word	0x3bfa232d
 80020a0:	3c7a232d 	.word	0x3c7a232d
 80020a4:	3cf9c190 	.word	0x3cf9c190
 80020a8:	3d79c190 	.word	0x3d79c190

080020ac <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80020b6:	233b      	movs	r3, #59	; 0x3b
 80020b8:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1) != HAL_OK);
 80020c6:	bf00      	nop
 80020c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020cc:	b299      	uxth	r1, r3
 80020ce:	f107 020f 	add.w	r2, r7, #15
 80020d2:	2301      	movs	r3, #1
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2301      	movs	r3, #1
 80020d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020da:	f002 f849 	bl	8004170 <HAL_I2C_Master_Transmit>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f1      	bne.n	80020c8 <SD_MPU6050_ReadAll+0x1c>
	//HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1);
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1) != HAL_OK);
 80020e4:	bf00      	nop
 80020e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ea:	b299      	uxth	r1, r3
 80020ec:	f107 0210 	add.w	r2, r7, #16
 80020f0:	2301      	movs	r3, #1
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	230e      	movs	r3, #14
 80020f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020f8:	f002 f938 	bl	800436c <HAL_I2C_Master_Receive>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f1      	bne.n	80020e6 <SD_MPU6050_ReadAll+0x3a>
	//HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1);
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8002102:	7c3b      	ldrb	r3, [r7, #16]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	b21a      	sxth	r2, r3
 8002108:	7c7b      	ldrb	r3, [r7, #17]
 800210a:	b21b      	sxth	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b21a      	sxth	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8002114:	7cbb      	ldrb	r3, [r7, #18]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b21a      	sxth	r2, r3
 800211a:	7cfb      	ldrb	r3, [r7, #19]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21a      	sxth	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8002126:	7d3b      	ldrb	r3, [r7, #20]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21a      	sxth	r2, r3
 800212c:	7d7b      	ldrb	r3, [r7, #21]
 800212e:	b21b      	sxth	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b21a      	sxth	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8002138:	7dbb      	ldrb	r3, [r7, #22]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b21a      	sxth	r2, r3
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	b21b      	sxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8002146:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002152:	eddf 6a15 	vldr	s13, [pc, #84]	; 80021a8 <SD_MPU6050_ReadAll+0xfc>
 8002156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80021ac <SD_MPU6050_ReadAll+0x100>
 800215e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8002168:	7e3b      	ldrb	r3, [r7, #24]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	7e7b      	ldrb	r3, [r7, #25]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21a      	sxth	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 800217a:	7ebb      	ldrb	r3, [r7, #26]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	7efb      	ldrb	r3, [r7, #27]
 8002182:	b21b      	sxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b21a      	sxth	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 800218c:	7f3b      	ldrb	r3, [r7, #28]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21a      	sxth	r2, r3
 8002192:	7f7b      	ldrb	r3, [r7, #29]
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21a      	sxth	r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	43aa0000 	.word	0x43aa0000
 80021ac:	42121eb8 	.word	0x42121eb8

080021b0 <SetAuxbus>:
	InterruptsStruct->Status = read;
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

void SetAuxbus(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
	uint8_t address = DataStruct->Address;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	72fb      	strb	r3, [r7, #11]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_USER_CTRL;
 80021c4:	236a      	movs	r3, #106	; 0x6a
 80021c6:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 80021c8:	2300      	movs	r3, #0
 80021ca:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f001 faf3 	bl	80037b8 <HAL_Delay>
	/*set I2C Bypass enable bit (I2C_BYPASS_EN,bit 2) in INT Pin / Bypass Enable Configuration register (INT_PIN_CFG,0x37) to 1*/
	d[0] = MPU6050_INT_PIN_CFG;
 80021d2:	2337      	movs	r3, #55	; 0x37
 80021d4:	723b      	strb	r3, [r7, #8]
	d[1] = 0x02;
 80021d6:	2302      	movs	r3, #2
 80021d8:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80021da:	bf00      	nop
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	b299      	uxth	r1, r3
 80021e0:	f107 0208 	add.w	r2, r7, #8
 80021e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2302      	movs	r3, #2
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f001 ffbf 	bl	8004170 <HAL_I2C_Master_Transmit>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f1      	bne.n	80021dc <SetAuxbus+0x2c>
	HAL_Delay(10);
 80021f8:	200a      	movs	r0, #10
 80021fa:	f001 fadd 	bl	80037b8 <HAL_Delay>
	/*Turn off sleep mode by reseting SLEEP bit (bit 6) of the power management register #1 (PWR_MGMT_1, 0x6B)*/
	d[0] = MPU6050_PWR_MGMT_1;
 80021fe:	236b      	movs	r3, #107	; 0x6b
 8002200:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 8002202:	2300      	movs	r3, #0
 8002204:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 8002206:	200a      	movs	r0, #10
 8002208:	f001 fad6 	bl	80037b8 <HAL_Delay>
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <Set_config>:
void Set_config(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t f_cut){
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_CONFIG;
 800222c:	231a      	movs	r3, #26
 800222e:	743b      	strb	r3, [r7, #16]
	d[1] = f_cut;
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	747b      	strb	r3, [r7, #17]
	HAL_Delay(10);
 8002234:	200a      	movs	r0, #10
 8002236:	f001 fabf 	bl	80037b8 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800223a:	bf00      	nop
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	b299      	uxth	r1, r3
 8002240:	f107 0210 	add.w	r2, r7, #16
 8002244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2302      	movs	r3, #2
 800224c:	6978      	ldr	r0, [r7, #20]
 800224e:	f001 ff8f 	bl	8004170 <HAL_I2C_Master_Transmit>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f1      	bne.n	800223c <Set_config+0x28>
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <begin>:
#include "ms5611.h"
#include "math.h"
extern I2C_HandleTypeDef hi2c1;
extern void delay(uint16_t z);

bool begin(MS5611 *dev, ms5611_osr_t osr){
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
    //Wire.begin();
		while(HAL_I2C_IsDeviceReady(&hi2c1, MS5611_ADDRESS, 3, 100) != HAL_OK);
 8002270:	bf00      	nop
 8002272:	2364      	movs	r3, #100	; 0x64
 8002274:	2203      	movs	r2, #3
 8002276:	21ee      	movs	r1, #238	; 0xee
 8002278:	480f      	ldr	r0, [pc, #60]	; (80022b8 <begin+0x54>)
 800227a:	f002 fa9d 	bl	80047b8 <HAL_I2C_IsDeviceReady>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f6      	bne.n	8002272 <begin+0xe>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8002284:	bf00      	nop
 8002286:	480c      	ldr	r0, [pc, #48]	; (80022b8 <begin+0x54>)
 8002288:	f002 fbc4 	bl	8004a14 <HAL_I2C_GetState>
 800228c:	4603      	mov	r3, r0
 800228e:	2b20      	cmp	r3, #32
 8002290:	d1f9      	bne.n	8002286 <begin+0x22>
		setOversampling(dev, osr);
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f810 	bl	80022bc <setOversampling>
		reset();
 800229c:	f000 f850 	bl	8002340 <reset>
		HAL_Delay(100);
 80022a0:	2064      	movs	r0, #100	; 0x64
 80022a2:	f001 fa89 	bl	80037b8 <HAL_Delay>
    readPROM(dev);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f860 	bl	800236c <readPROM>
    return true;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200000b0 	.word	0x200000b0

080022bc <setOversampling>:

// Set oversampling value
void setOversampling(MS5611 *dev, ms5611_osr_t osr){
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
	  dev->uosr = osr;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    switch (osr)
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d82d      	bhi.n	8002332 <setOversampling+0x76>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <setOversampling+0x20>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002301 	.word	0x08002301
 80022e0:	08002333 	.word	0x08002333
 80022e4:	0800230b 	.word	0x0800230b
 80022e8:	08002333 	.word	0x08002333
 80022ec:	08002315 	.word	0x08002315
 80022f0:	08002333 	.word	0x08002333
 80022f4:	0800231f 	.word	0x0800231f
 80022f8:	08002333 	.word	0x08002333
 80022fc:	08002329 	.word	0x08002329
    {
	case MS5611_ULTRA_LOW_POWER:
	    dev->ct = 1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002308:	e013      	b.n	8002332 <setOversampling+0x76>
	case MS5611_LOW_POWER:
	    dev->ct = 2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002312:	e00e      	b.n	8002332 <setOversampling+0x76>
	case MS5611_STANDARD:
	    dev->ct = 3;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2203      	movs	r2, #3
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 800231c:	e009      	b.n	8002332 <setOversampling+0x76>
	case MS5611_HIGH_RES:
	    dev->ct = 4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2204      	movs	r2, #4
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002326:	e004      	b.n	8002332 <setOversampling+0x76>
	case MS5611_ULTRA_HIGH_RES:
	    dev->ct = 5;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2205      	movs	r2, #5
 800232c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002330:	bf00      	nop
    }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop

08002340 <reset>:
ms5611_osr_t getOversampling(MS5611 dev)
{
    return (ms5611_osr_t) dev.uosr;
}

void reset(void){ 
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af02      	add	r7, sp, #8
		while(HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t*) MS5611_CMD_RESET, 1, 10) != HAL_OK);
 8002346:	bf00      	nop
 8002348:	230a      	movs	r3, #10
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2301      	movs	r3, #1
 800234e:	221e      	movs	r2, #30
 8002350:	21ee      	movs	r1, #238	; 0xee
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <reset+0x28>)
 8002354:	f001 ff0c 	bl	8004170 <HAL_I2C_Master_Transmit>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f4      	bne.n	8002348 <reset+0x8>
		}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200000b0 	.word	0x200000b0

0800236c <readPROM>:

void readPROM(MS5611 *dev){
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	; 0x30
 8002370:	af02      	add	r7, sp, #8
 8002372:	6078      	str	r0, [r7, #4]
    reset();
 8002374:	f7ff ffe4 	bl	8002340 <reset>
		HAL_Delay(3000);
 8002378:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800237c:	f001 fa1c 	bl	80037b8 <HAL_Delay>
		//read PROM
		uint8_t buf1[16];
		//uint16_t C[8];
		uint8_t CMD_PROM = 0xA0;
 8002380:	23a0      	movs	r3, #160	; 0xa0
 8002382:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	e023      	b.n	80023d2 <readPROM+0x66>
		while (HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t *) &CMD_PROM, 1, 100) != HAL_OK);
 800238a:	bf00      	nop
 800238c:	f107 020f 	add.w	r2, r7, #15
 8002390:	2364      	movs	r3, #100	; 0x64
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2301      	movs	r3, #1
 8002396:	21ee      	movs	r1, #238	; 0xee
 8002398:	4826      	ldr	r0, [pc, #152]	; (8002434 <readPROM+0xc8>)
 800239a:	f001 fee9 	bl	8004170 <HAL_I2C_Master_Transmit>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f3      	bne.n	800238c <readPROM+0x20>
		while (HAL_I2C_Master_Receive(&hi2c1, MS5611_ADDRESS_READ, &buf1[i*2], 2, 100) != HAL_OK);
 80023a4:	bf00      	nop
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	f107 0210 	add.w	r2, r7, #16
 80023ae:	441a      	add	r2, r3
 80023b0:	2364      	movs	r3, #100	; 0x64
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2302      	movs	r3, #2
 80023b6:	21ef      	movs	r1, #239	; 0xef
 80023b8:	481e      	ldr	r0, [pc, #120]	; (8002434 <readPROM+0xc8>)
 80023ba:	f001 ffd7 	bl	800436c <HAL_I2C_Master_Receive>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <readPROM+0x3a>
		CMD_PROM = CMD_PROM + 2;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	3302      	adds	r3, #2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3301      	adds	r3, #1
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	2b07      	cmp	r3, #7
 80023d6:	ddd8      	ble.n	800238a <readPROM+0x1e>
		}
		for (uint8_t i = 0; i < 6; i++) {
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023de:	e01c      	b.n	800241a <readPROM+0xae>
		dev->fc[i] = (int16_t) buf1[2*i+2] << 8 | (int16_t) buf1[2*i+3];
 80023e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e4:	3301      	adds	r3, #1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	3328      	adds	r3, #40	; 0x28
 80023ea:	443b      	add	r3, r7
 80023ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023f6:	0052      	lsls	r2, r2, #1
 80023f8:	3203      	adds	r2, #3
 80023fa:	3228      	adds	r2, #40	; 0x28
 80023fc:	443a      	add	r2, r7
 80023fe:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002402:	4313      	orrs	r3, r2
 8002404:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002408:	4619      	mov	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t i = 0; i < 6; i++) {
 8002410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002414:	3301      	adds	r3, #1
 8002416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800241a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800241e:	2b05      	cmp	r3, #5
 8002420:	d9de      	bls.n	80023e0 <readPROM+0x74>
		}
		crc4(dev->fc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f807 	bl	8002438 <crc4>
}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200000b0 	.word	0x200000b0

08002438 <crc4>:
// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg){
	return 0; 
}
//////////////////////////////////////////////////////
unsigned char crc4(unsigned int n_prom[]) {
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	int cnt; // simple counter
	unsigned int n_rem; // crc reminder
	unsigned int crc_read; // original value of the crc
	unsigned char n_bit;
	n_rem = 0x00;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
	crc_read=n_prom[7]; //save read CRC
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	60bb      	str	r3, [r7, #8]
	n_prom[7]=(0xFF00 & (n_prom[7])); //CRC byte is replaced by 0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	331c      	adds	r3, #28
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	331c      	adds	r3, #28
 8002454:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8002458:	601a      	str	r2, [r3, #0]
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e039      	b.n	80024d4 <crc4+0x9c>
		// choose LSB or MSB
		if (cnt%2==1) n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	bfb8      	it	lt
 800246a:	425b      	neglt	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10b      	bne.n	8002488 <crc4+0x50>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	105b      	asrs	r3, r3, #1
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4053      	eors	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e00b      	b.n	80024a0 <crc4+0x68>
		else n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	105b      	asrs	r3, r3, #1
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4053      	eors	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 80024a0:	2308      	movs	r3, #8
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e010      	b.n	80024c8 <crc4+0x90>
			if (n_rem & (0x8000)) {
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <crc4+0x84>
				n_rem = (n_rem << 1) ^ 0x3000; 
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e002      	b.n	80024c2 <crc4+0x8a>
			} else {
				n_rem = (n_rem << 1);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1eb      	bne.n	80024a6 <crc4+0x6e>
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	ddc2      	ble.n	8002460 <crc4+0x28>
			}
		}
	}
	n_rem= (0x000F & (n_rem >> 12)); // final 4-bit reminder is CRC code
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	0b1b      	lsrs	r3, r3, #12
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	613b      	str	r3, [r7, #16]
	n_prom[7]=crc_read; // restore the crc_read to its original place
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	331c      	adds	r3, #28
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	601a      	str	r2, [r3, #0]
	return (n_rem ^ 0x0);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	b2db      	uxtb	r3, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_MspInit+0x4c>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_MspInit+0x4c>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_I2C_MspInit+0x84>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d12b      	bne.n	80025c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800258a:	23c0      	movs	r3, #192	; 0xc0
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258e:	2312      	movs	r3, #18
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800259a:	2304      	movs	r3, #4
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <HAL_I2C_MspInit+0x8c>)
 80025a6:	f001 facf 	bl	8003b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 80025b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40005400 	.word	0x40005400
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020400 	.word	0x40020400

080025dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08e      	sub	sp, #56	; 0x38
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <HAL_SPI_MspInit+0x160>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d14a      	bne.n	8002694 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <HAL_SPI_MspInit+0x164>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a4e      	ldr	r2, [pc, #312]	; (8002740 <HAL_SPI_MspInit+0x164>)
 8002608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_SPI_MspInit+0x164>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_SPI_MspInit+0x164>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_SPI_MspInit+0x164>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b45      	ldr	r3, [pc, #276]	; (8002740 <HAL_SPI_MspInit+0x164>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_SPI_MspInit+0x164>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a40      	ldr	r2, [pc, #256]	; (8002740 <HAL_SPI_MspInit+0x164>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_SPI_MspInit+0x164>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002652:	2320      	movs	r3, #32
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002662:	2305      	movs	r3, #5
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	4619      	mov	r1, r3
 800266c:	4835      	ldr	r0, [pc, #212]	; (8002744 <HAL_SPI_MspInit+0x168>)
 800266e:	f001 fa6b 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002672:	2330      	movs	r3, #48	; 0x30
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002682:	2305      	movs	r3, #5
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268a:	4619      	mov	r1, r3
 800268c:	482e      	ldr	r0, [pc, #184]	; (8002748 <HAL_SPI_MspInit+0x16c>)
 800268e:	f001 fa5b 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002692:	e04f      	b.n	8002734 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2c      	ldr	r2, [pc, #176]	; (800274c <HAL_SPI_MspInit+0x170>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d14a      	bne.n	8002734 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a26      	ldr	r2, [pc, #152]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_SPI_MspInit+0x164>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026f2:	230c      	movs	r3, #12
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002702:	2305      	movs	r3, #5
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270a:	4619      	mov	r1, r3
 800270c:	4810      	ldr	r0, [pc, #64]	; (8002750 <HAL_SPI_MspInit+0x174>)
 800270e:	f001 fa1b 	bl	8003b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002724:	2305      	movs	r3, #5
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	; (8002748 <HAL_SPI_MspInit+0x16c>)
 8002730:	f001 fa0a 	bl	8003b48 <HAL_GPIO_Init>
}
 8002734:	bf00      	nop
 8002736:	3738      	adds	r7, #56	; 0x38
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40013000 	.word	0x40013000
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40003800 	.word	0x40003800
 8002750:	40020800 	.word	0x40020800

08002754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a44      	ldr	r2, [pc, #272]	; (8002884 <HAL_TIM_Base_MspInit+0x130>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a42      	ldr	r2, [pc, #264]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002792:	e073      	b.n	800287c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a3c      	ldr	r2, [pc, #240]	; (800288c <HAL_TIM_Base_MspInit+0x138>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d134      	bne.n	8002808 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a31      	ldr	r2, [pc, #196]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027d6:	2303      	movs	r3, #3
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027e6:	2302      	movs	r3, #2
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	4827      	ldr	r0, [pc, #156]	; (8002890 <HAL_TIM_Base_MspInit+0x13c>)
 80027f2:	f001 f9a9 	bl	8003b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	201d      	movs	r0, #29
 80027fc:	f001 f8db 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002800:	201d      	movs	r0, #29
 8002802:	f001 f8f4 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 8002806:	e039      	b.n	800287c <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_TIM_Base_MspInit+0x140>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d134      	bne.n	800287c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_TIM_Base_MspInit+0x134>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800284a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800285c:	2302      	movs	r3, #2
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	480c      	ldr	r0, [pc, #48]	; (8002898 <HAL_TIM_Base_MspInit+0x144>)
 8002868:	f001 f96e 	bl	8003b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2100      	movs	r1, #0
 8002870:	201e      	movs	r0, #30
 8002872:	f001 f8a0 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002876:	201e      	movs	r0, #30
 8002878:	f001 f8b9 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 800287c:	bf00      	nop
 800287e:	3730      	adds	r7, #48	; 0x30
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40010000 	.word	0x40010000
 8002888:	40023800 	.word	0x40023800
 800288c:	40000400 	.word	0x40000400
 8002890:	40020400 	.word	0x40020400
 8002894:	40000800 	.word	0x40000800
 8002898:	40020c00 	.word	0x40020c00

0800289c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d10d      	bne.n	80028ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800

080028dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_TIM_MspPostInit+0xf0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d11f      	bne.n	800293e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a32      	ldr	r2, [pc, #200]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800291a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800292c:	2301      	movs	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	4827      	ldr	r0, [pc, #156]	; (80029d4 <HAL_TIM_MspPostInit+0xf8>)
 8002938:	f001 f906 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800293c:	e042      	b.n	80029c4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d13d      	bne.n	80029c4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8002980:	f248 0306 	movw	r3, #32774	; 0x8006
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	480e      	ldr	r0, [pc, #56]	; (80029d8 <HAL_TIM_MspPostInit+0xfc>)
 800299e:	f001 f8d3 	bl	8003b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029b4:	2301      	movs	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	4807      	ldr	r0, [pc, #28]	; (80029dc <HAL_TIM_MspPostInit+0x100>)
 80029c0:	f001 f8c2 	bl	8003b48 <HAL_GPIO_Init>
}
 80029c4:	bf00      	nop
 80029c6:	3728      	adds	r7, #40	; 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020400 	.word	0x40020400

080029e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <HAL_UART_MspInit+0x134>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d135      	bne.n	8002a6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a0c:	f043 0310 	orr.w	r3, r3, #16
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	4619      	mov	r1, r3
 8002a56:	4831      	ldr	r0, [pc, #196]	; (8002b1c <HAL_UART_MspInit+0x13c>)
 8002a58:	f001 f876 	bl	8003b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2025      	movs	r0, #37	; 0x25
 8002a62:	f000 ffa8 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a66:	2025      	movs	r0, #37	; 0x25
 8002a68:	f000 ffc1 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a6c:	e04e      	b.n	8002b0c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <HAL_UART_MspInit+0x140>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d149      	bne.n	8002b0c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a86:	6413      	str	r3, [r2, #64]	; 0x40
 8002a88:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_UART_MspInit+0x138>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002acc:	2308      	movs	r3, #8
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002adc:	2307      	movs	r3, #7
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480d      	ldr	r0, [pc, #52]	; (8002b1c <HAL_UART_MspInit+0x13c>)
 8002ae8:	f001 f82e 	bl	8003b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002aec:	2320      	movs	r3, #32
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002afc:	2307      	movs	r3, #7
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4619      	mov	r1, r3
 8002b06:	4807      	ldr	r0, [pc, #28]	; (8002b24 <HAL_UART_MspInit+0x144>)
 8002b08:	f001 f81e 	bl	8003b48 <HAL_GPIO_Init>
}
 8002b0c:	bf00      	nop
 8002b0e:	3730      	adds	r7, #48	; 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40004400 	.word	0x40004400
 8002b24:	40020c00 	.word	0x40020c00

08002b28 <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b32:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b36:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	d501      	bpl.n	8002b50 <limit+0x28>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	e00b      	b.n	8002b68 <limit+0x40>
 8002b50:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	dd01      	ble.n	8002b66 <limit+0x3e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	e000      	b.n	8002b68 <limit+0x40>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	ee07 3a90 	vmov	s15, r3
}
 8002b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002b96:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <ctl_motors_speed+0x34>)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000

08002bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <NMI_Handler+0x4>

08002bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bbe:	e7fe      	b.n	8002bbe <HardFault_Handler+0x4>

08002bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <MemManage_Handler+0x4>

08002bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bca:	e7fe      	b.n	8002bca <BusFault_Handler+0x4>

08002bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <UsageFault_Handler+0x4>

08002bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c00:	f000 fdba 	bl	8003778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  int16_t mx = 0, my = 0, mz = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	2300      	movs	r3, #0
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	2300      	movs	r3, #0
 8002c18:	80fb      	strh	r3, [r7, #6]

  // Read MPU6050 values
  SD_MPU6050_ReadAll(&hi2c1, &g_dev1);
 8002c1a:	49c1      	ldr	r1, [pc, #772]	; (8002f20 <TIM3_IRQHandler+0x318>)
 8002c1c:	48c1      	ldr	r0, [pc, #772]	; (8002f24 <TIM3_IRQHandler+0x31c>)
 8002c1e:	f7ff fa45 	bl	80020ac <SD_MPU6050_ReadAll>
  HMC5883L_getHeading(&mx, &my, &mz);
 8002c22:	1dba      	adds	r2, r7, #6
 8002c24:	f107 0108 	add.w	r1, r7, #8
 8002c28:	f107 030a 	add.w	r3, r7, #10
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fa23 	bl	8001078 <HMC5883L_getHeading>

  // Norm [-1, 1]
  float gx = limit(-g_dev1.Gyroscope_X + g_gx_calibrated, -2000, 2000)/2000; // Velocity
 8002c32:	4bbb      	ldr	r3, [pc, #748]	; (8002f20 <TIM3_IRQHandler+0x318>)
 8002c34:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002c38:	425b      	negs	r3, r3
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c42:	4bb9      	ldr	r3, [pc, #740]	; (8002f28 <TIM3_IRQHandler+0x320>)
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4c:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002c50:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8002f30 <TIM3_IRQHandler+0x328>
 8002c54:	eeb0 0a67 	vmov.f32	s0, s15
 8002c58:	f7ff ff66 	bl	8002b28 <limit>
 8002c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8002c60:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float gy = limit(g_dev1.Gyroscope_Y + g_gy_calibrated, -2000, 2000)/2000;
 8002c6c:	4bac      	ldr	r3, [pc, #688]	; (8002f20 <TIM3_IRQHandler+0x318>)
 8002c6e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7a:	4bae      	ldr	r3, [pc, #696]	; (8002f34 <TIM3_IRQHandler+0x32c>)
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002c88:	eddf 0aa9 	vldr	s1, [pc, #676]	; 8002f30 <TIM3_IRQHandler+0x328>
 8002c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c90:	f7ff ff4a 	bl	8002b28 <limit>
 8002c94:	eeb0 7a40 	vmov.f32	s14, s0
 8002c98:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca0:	edc7 7a08 	vstr	s15, [r7, #32]
  float gz = limit(-g_dev1.Gyroscope_Z + g_gz_calibrated, -2000, 2000)/2000;
 8002ca4:	4b9e      	ldr	r3, [pc, #632]	; (8002f20 <TIM3_IRQHandler+0x318>)
 8002ca6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002caa:	425b      	negs	r3, r3
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb4:	4ba0      	ldr	r3, [pc, #640]	; (8002f38 <TIM3_IRQHandler+0x330>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbe:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002cc2:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8002f30 <TIM3_IRQHandler+0x328>
 8002cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cca:	f7ff ff2d 	bl	8002b28 <limit>
 8002cce:	eeb0 7a40 	vmov.f32	s14, s0
 8002cd2:	eddf 6a96 	vldr	s13, [pc, #600]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cda:	edc7 7a07 	vstr	s15, [r7, #28]
  float ax = limit(-g_dev1.Accelerometer_X + g_ax_calibrated, -2000, 2000)/2000; // Angle
 8002cde:	4b90      	ldr	r3, [pc, #576]	; (8002f20 <TIM3_IRQHandler+0x318>)
 8002ce0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cee:	4b93      	ldr	r3, [pc, #588]	; (8002f3c <TIM3_IRQHandler+0x334>)
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002cfc:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8002f30 <TIM3_IRQHandler+0x328>
 8002d00:	eeb0 0a67 	vmov.f32	s0, s15
 8002d04:	f7ff ff10 	bl	8002b28 <limit>
 8002d08:	eeb0 7a40 	vmov.f32	s14, s0
 8002d0c:	eddf 6a87 	vldr	s13, [pc, #540]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d14:	edc7 7a06 	vstr	s15, [r7, #24]
  float ay = limit(-g_dev1.Accelerometer_Y + g_ay_calibrated, -2000, 2000)/2000;
 8002d18:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <TIM3_IRQHandler+0x318>)
 8002d1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002d1e:	425b      	negs	r3, r3
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d28:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <TIM3_IRQHandler+0x338>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d32:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002d36:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8002f30 <TIM3_IRQHandler+0x328>
 8002d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3e:	f7ff fef3 	bl	8002b28 <limit>
 8002d42:	eeb0 7a40 	vmov.f32	s14, s0
 8002d46:	eddf 6a79 	vldr	s13, [pc, #484]	; 8002f2c <TIM3_IRQHandler+0x324>
 8002d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d4e:	edc7 7a05 	vstr	s15, [r7, #20]
  float az = limit(atan2(my, mx)*360/M_PI + g_az_calibrated, -45, 45)/45;
 8002d52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fbe4 	bl	8000524 <__aeabi_i2d>
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	460d      	mov	r5, r1
 8002d60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fbdd 	bl	8000524 <__aeabi_i2d>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	ec43 2b11 	vmov	d1, r2, r3
 8002d72:	ec45 4b10 	vmov	d0, r4, r5
 8002d76:	f005 fda9 	bl	80088cc <atan2>
 8002d7a:	ec51 0b10 	vmov	r0, r1, d0
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <TIM3_IRQHandler+0x33c>)
 8002d84:	f7fd fc38 	bl	80005f8 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	a361      	add	r3, pc, #388	; (adr r3, 8002f18 <TIM3_IRQHandler+0x310>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fd59 	bl	800084c <__aeabi_ddiv>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4614      	mov	r4, r2
 8002da0:	461d      	mov	r5, r3
 8002da2:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <TIM3_IRQHandler+0x340>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbce 	bl	8000548 <__aeabi_f2d>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4620      	mov	r0, r4
 8002db2:	4629      	mov	r1, r5
 8002db4:	f7fd fa6a 	bl	800028c <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f7fd feb4 	bl	8000b2c <__aeabi_d2f>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8002f4c <TIM3_IRQHandler+0x344>
 8002dca:	eddf 0a61 	vldr	s1, [pc, #388]	; 8002f50 <TIM3_IRQHandler+0x348>
 8002dce:	ee00 3a10 	vmov	s0, r3
 8002dd2:	f7ff fea9 	bl	8002b28 <limit>
 8002dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dda:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002f4c <TIM3_IRQHandler+0x344>
 8002dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002de2:	edc7 7a04 	vstr	s15, [r7, #16]

  // Remove noise
  g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[0], gx);
 8002de6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002dea:	485a      	ldr	r0, [pc, #360]	; (8002f54 <TIM3_IRQHandler+0x34c>)
 8002dec:	f7fe f9a9 	bl	8001142 <SimpleKalmanFilter_updateEstimate>
 8002df0:	eef0 7a40 	vmov.f32	s15, s0
 8002df4:	4b58      	ldr	r3, [pc, #352]	; (8002f58 <TIM3_IRQHandler+0x350>)
 8002df6:	edc3 7a00 	vstr	s15, [r3]
  g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[1], gy);
 8002dfa:	ed97 0a08 	vldr	s0, [r7, #32]
 8002dfe:	4857      	ldr	r0, [pc, #348]	; (8002f5c <TIM3_IRQHandler+0x354>)
 8002e00:	f7fe f99f 	bl	8001142 <SimpleKalmanFilter_updateEstimate>
 8002e04:	eef0 7a40 	vmov.f32	s15, s0
 8002e08:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <TIM3_IRQHandler+0x358>)
 8002e0a:	edc3 7a00 	vstr	s15, [r3]
  g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[2], gz);
 8002e0e:	ed97 0a07 	vldr	s0, [r7, #28]
 8002e12:	4854      	ldr	r0, [pc, #336]	; (8002f64 <TIM3_IRQHandler+0x35c>)
 8002e14:	f7fe f995 	bl	8001142 <SimpleKalmanFilter_updateEstimate>
 8002e18:	eef0 7a40 	vmov.f32	s15, s0
 8002e1c:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <TIM3_IRQHandler+0x360>)
 8002e1e:	edc3 7a00 	vstr	s15, [r3]
  g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[3], ax);
 8002e22:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e26:	4851      	ldr	r0, [pc, #324]	; (8002f6c <TIM3_IRQHandler+0x364>)
 8002e28:	f7fe f98b 	bl	8001142 <SimpleKalmanFilter_updateEstimate>
 8002e2c:	eef0 7a40 	vmov.f32	s15, s0
 8002e30:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <TIM3_IRQHandler+0x368>)
 8002e32:	edc3 7a00 	vstr	s15, [r3]
  g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[4], ay);
 8002e36:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e3a:	484e      	ldr	r0, [pc, #312]	; (8002f74 <TIM3_IRQHandler+0x36c>)
 8002e3c:	f7fe f981 	bl	8001142 <SimpleKalmanFilter_updateEstimate>
 8002e40:	eef0 7a40 	vmov.f32	s15, s0
 8002e44:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <TIM3_IRQHandler+0x370>)
 8002e46:	edc3 7a00 	vstr	s15, [r3]
  g_az = SimpleKalmanFilter_updateEstimate(&g_filters[5], az);
 8002e4a:	ed97 0a04 	vldr	s0, [r7, #16]
 8002e4e:	484b      	ldr	r0, [pc, #300]	; (8002f7c <TIM3_IRQHandler+0x374>)
 8002e50:	f7fe f977 	bl	8001142 <SimpleKalmanFilter_updateEstimate>
 8002e54:	eef0 7a40 	vmov.f32	s15, s0
 8002e58:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <TIM3_IRQHandler+0x378>)
 8002e5a:	edc3 7a00 	vstr	s15, [r3]

  // Control pitch, roll, yaw using offsets
  g_gx += g_gx_offset;
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <TIM3_IRQHandler+0x350>)
 8002e60:	ed93 7a00 	vldr	s14, [r3]
 8002e64:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <TIM3_IRQHandler+0x37c>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6e:	4b3a      	ldr	r3, [pc, #232]	; (8002f58 <TIM3_IRQHandler+0x350>)
 8002e70:	edc3 7a00 	vstr	s15, [r3]
  g_gy += g_gy_offset;
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <TIM3_IRQHandler+0x358>)
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <TIM3_IRQHandler+0x380>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <TIM3_IRQHandler+0x358>)
 8002e86:	edc3 7a00 	vstr	s15, [r3]
  g_gz += g_gz_offset;
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <TIM3_IRQHandler+0x360>)
 8002e8c:	ed93 7a00 	vldr	s14, [r3]
 8002e90:	4b3e      	ldr	r3, [pc, #248]	; (8002f8c <TIM3_IRQHandler+0x384>)
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <TIM3_IRQHandler+0x360>)
 8002e9c:	edc3 7a00 	vstr	s15, [r3]
  g_ax += g_ax_offset;
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <TIM3_IRQHandler+0x368>)
 8002ea2:	ed93 7a00 	vldr	s14, [r3]
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <TIM3_IRQHandler+0x388>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <TIM3_IRQHandler+0x368>)
 8002eb2:	edc3 7a00 	vstr	s15, [r3]
  g_ay += g_ay_offset;
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <TIM3_IRQHandler+0x370>)
 8002eb8:	ed93 7a00 	vldr	s14, [r3]
 8002ebc:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <TIM3_IRQHandler+0x38c>)
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <TIM3_IRQHandler+0x370>)
 8002ec8:	edc3 7a00 	vstr	s15, [r3]
  g_az += g_az_offset;
 8002ecc:	4b2c      	ldr	r3, [pc, #176]	; (8002f80 <TIM3_IRQHandler+0x378>)
 8002ece:	ed93 7a00 	vldr	s14, [r3]
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <TIM3_IRQHandler+0x390>)
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <TIM3_IRQHandler+0x378>)
 8002ede:	edc3 7a00 	vstr	s15, [r3]

  // Update PWM
  if (g_conn_lost_counter > 50 || g_conn_lost_counter < 0) {
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <TIM3_IRQHandler+0x394>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b32      	cmp	r3, #50	; 0x32
 8002ee8:	dc03      	bgt.n	8002ef2 <TIM3_IRQHandler+0x2ea>
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <TIM3_IRQHandler+0x394>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da5c      	bge.n	8002fac <TIM3_IRQHandler+0x3a4>
    g_I_pitch = 0;
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <TIM3_IRQHandler+0x398>)
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
    g_I_roll = 0;
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <TIM3_IRQHandler+0x39c>)
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    g_I_yaw = 0;
 8002f02:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <TIM3_IRQHandler+0x3a0>)
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	210a      	movs	r1, #10
 8002f10:	200a      	movs	r0, #10
 8002f12:	f7ff fe33 	bl	8002b7c <ctl_motors_speed>
 8002f16:	e277      	b.n	8003408 <TIM3_IRQHandler+0x800>
 8002f18:	54442d18 	.word	0x54442d18
 8002f1c:	400921fb 	.word	0x400921fb
 8002f20:	200004ac 	.word	0x200004ac
 8002f24:	200000b0 	.word	0x200000b0
 8002f28:	20000014 	.word	0x20000014
 8002f2c:	44fa0000 	.word	0x44fa0000
 8002f30:	c4fa0000 	.word	0xc4fa0000
 8002f34:	20000018 	.word	0x20000018
 8002f38:	2000001c 	.word	0x2000001c
 8002f3c:	20000008 	.word	0x20000008
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	40768000 	.word	0x40768000
 8002f48:	20000010 	.word	0x20000010
 8002f4c:	42340000 	.word	0x42340000
 8002f50:	c2340000 	.word	0xc2340000
 8002f54:	2000035c 	.word	0x2000035c
 8002f58:	20000638 	.word	0x20000638
 8002f5c:	20000374 	.word	0x20000374
 8002f60:	2000063c 	.word	0x2000063c
 8002f64:	2000038c 	.word	0x2000038c
 8002f68:	20000640 	.word	0x20000640
 8002f6c:	200003a4 	.word	0x200003a4
 8002f70:	20000644 	.word	0x20000644
 8002f74:	200003bc 	.word	0x200003bc
 8002f78:	20000648 	.word	0x20000648
 8002f7c:	200003d4 	.word	0x200003d4
 8002f80:	2000064c 	.word	0x2000064c
 8002f84:	2000065c 	.word	0x2000065c
 8002f88:	20000660 	.word	0x20000660
 8002f8c:	20000664 	.word	0x20000664
 8002f90:	20000650 	.word	0x20000650
 8002f94:	20000654 	.word	0x20000654
 8002f98:	20000658 	.word	0x20000658
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	2000066c 	.word	0x2000066c
 8002fa4:	20000678 	.word	0x20000678
 8002fa8:	20000684 	.word	0x20000684
  }
  else {
    int thrust = MIN_SPEED + g_thrust;
 8002fac:	4bce      	ldr	r3, [pc, #824]	; (80032e8 <TIM3_IRQHandler+0x6e0>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8002fb4:	60fb      	str	r3, [r7, #12]

    g_P_pitch = g_ax*P_PITCH_GAIN;
 8002fb6:	4bcd      	ldr	r3, [pc, #820]	; (80032ec <TIM3_IRQHandler+0x6e4>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc4:	4bca      	ldr	r3, [pc, #808]	; (80032f0 <TIM3_IRQHandler+0x6e8>)
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
    g_I_pitch += g_ax*I_PITCH_GAIN;
 8002fca:	4bca      	ldr	r3, [pc, #808]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd faba 	bl	8000548 <__aeabi_f2d>
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	460d      	mov	r5, r1
 8002fd8:	4bc4      	ldr	r3, [pc, #784]	; (80032ec <TIM3_IRQHandler+0x6e4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fab3 	bl	8000548 <__aeabi_f2d>
 8002fe2:	a3bf      	add	r3, pc, #764	; (adr r3, 80032e0 <TIM3_IRQHandler+0x6d8>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f7fd fb06 	bl	80005f8 <__aeabi_dmul>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f7fd f94a 	bl	800028c <__adddf3>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fd fd94 	bl	8000b2c <__aeabi_d2f>
 8003004:	4603      	mov	r3, r0
 8003006:	4abb      	ldr	r2, [pc, #748]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 8003008:	6013      	str	r3, [r2, #0]
    g_I_pitch = limit(g_I_pitch, MIN_INTEGRAL, MAX_INTEGRAL);
 800300a:	4bba      	ldr	r3, [pc, #744]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8003014:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8003018:	eeb0 0a67 	vmov.f32	s0, s15
 800301c:	f7ff fd84 	bl	8002b28 <limit>
 8003020:	eef0 7a40 	vmov.f32	s15, s0
 8003024:	4bb3      	ldr	r3, [pc, #716]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 8003026:	edc3 7a00 	vstr	s15, [r3]
    g_D_pitch = g_gy*D_PITCH_GAIN;
 800302a:	4bb3      	ldr	r3, [pc, #716]	; (80032f8 <TIM3_IRQHandler+0x6f0>)
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8003034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003038:	4bb0      	ldr	r3, [pc, #704]	; (80032fc <TIM3_IRQHandler+0x6f4>)
 800303a:	edc3 7a00 	vstr	s15, [r3]

    g_P_roll = g_ay*P_ROLL_GAIN;
 800303e:	4bb0      	ldr	r3, [pc, #704]	; (8003300 <TIM3_IRQHandler+0x6f8>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800304c:	4bad      	ldr	r3, [pc, #692]	; (8003304 <TIM3_IRQHandler+0x6fc>)
 800304e:	edc3 7a00 	vstr	s15, [r3]
    g_I_roll += g_ay*I_ROLL_GAIN;
 8003052:	4bad      	ldr	r3, [pc, #692]	; (8003308 <TIM3_IRQHandler+0x700>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa76 	bl	8000548 <__aeabi_f2d>
 800305c:	4604      	mov	r4, r0
 800305e:	460d      	mov	r5, r1
 8003060:	4ba7      	ldr	r3, [pc, #668]	; (8003300 <TIM3_IRQHandler+0x6f8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd fa6f 	bl	8000548 <__aeabi_f2d>
 800306a:	a39d      	add	r3, pc, #628	; (adr r3, 80032e0 <TIM3_IRQHandler+0x6d8>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f7fd fac2 	bl	80005f8 <__aeabi_dmul>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4620      	mov	r0, r4
 800307a:	4629      	mov	r1, r5
 800307c:	f7fd f906 	bl	800028c <__adddf3>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fd50 	bl	8000b2c <__aeabi_d2f>
 800308c:	4603      	mov	r3, r0
 800308e:	4a9e      	ldr	r2, [pc, #632]	; (8003308 <TIM3_IRQHandler+0x700>)
 8003090:	6013      	str	r3, [r2, #0]
    g_I_roll = limit(g_I_roll, MIN_INTEGRAL, MAX_INTEGRAL);
 8003092:	4b9d      	ldr	r3, [pc, #628]	; (8003308 <TIM3_IRQHandler+0x700>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800309c:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 80030a0:	eeb0 0a67 	vmov.f32	s0, s15
 80030a4:	f7ff fd40 	bl	8002b28 <limit>
 80030a8:	eef0 7a40 	vmov.f32	s15, s0
 80030ac:	4b96      	ldr	r3, [pc, #600]	; (8003308 <TIM3_IRQHandler+0x700>)
 80030ae:	edc3 7a00 	vstr	s15, [r3]
    g_D_roll = g_gx*D_ROLL_GAIN;
 80030b2:	4b96      	ldr	r3, [pc, #600]	; (800330c <TIM3_IRQHandler+0x704>)
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80030bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c0:	4b93      	ldr	r3, [pc, #588]	; (8003310 <TIM3_IRQHandler+0x708>)
 80030c2:	edc3 7a00 	vstr	s15, [r3]

    g_P_yaw = g_az*P_YAW_GAIN;
 80030c6:	4b93      	ldr	r3, [pc, #588]	; (8003314 <TIM3_IRQHandler+0x70c>)
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d4:	4b90      	ldr	r3, [pc, #576]	; (8003318 <TIM3_IRQHandler+0x710>)
 80030d6:	edc3 7a00 	vstr	s15, [r3]
    g_I_yaw += g_az*I_YAW_GAIN;
 80030da:	4b90      	ldr	r3, [pc, #576]	; (800331c <TIM3_IRQHandler+0x714>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fa32 	bl	8000548 <__aeabi_f2d>
 80030e4:	4604      	mov	r4, r0
 80030e6:	460d      	mov	r5, r1
 80030e8:	4b8a      	ldr	r3, [pc, #552]	; (8003314 <TIM3_IRQHandler+0x70c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa2b 	bl	8000548 <__aeabi_f2d>
 80030f2:	a37b      	add	r3, pc, #492	; (adr r3, 80032e0 <TIM3_IRQHandler+0x6d8>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fa7e 	bl	80005f8 <__aeabi_dmul>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4620      	mov	r0, r4
 8003102:	4629      	mov	r1, r5
 8003104:	f7fd f8c2 	bl	800028c <__adddf3>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f7fd fd0c 	bl	8000b2c <__aeabi_d2f>
 8003114:	4603      	mov	r3, r0
 8003116:	4a81      	ldr	r2, [pc, #516]	; (800331c <TIM3_IRQHandler+0x714>)
 8003118:	6013      	str	r3, [r2, #0]
    g_I_yaw = limit(g_I_yaw, MIN_INTEGRAL, MAX_INTEGRAL);
 800311a:	4b80      	ldr	r3, [pc, #512]	; (800331c <TIM3_IRQHandler+0x714>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8003124:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	f7ff fcfc 	bl	8002b28 <limit>
 8003130:	eef0 7a40 	vmov.f32	s15, s0
 8003134:	4b79      	ldr	r3, [pc, #484]	; (800331c <TIM3_IRQHandler+0x714>)
 8003136:	edc3 7a00 	vstr	s15, [r3]
    g_D_yaw = g_gz*D_YAW_GAIN;
 800313a:	4b79      	ldr	r3, [pc, #484]	; (8003320 <TIM3_IRQHandler+0x718>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003148:	4b76      	ldr	r3, [pc, #472]	; (8003324 <TIM3_IRQHandler+0x71c>)
 800314a:	edc3 7a00 	vstr	s15, [r3]

    g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003158:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <TIM3_IRQHandler+0x6e8>)
 800315a:	edd3 6a00 	vldr	s13, [r3]
 800315e:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003168:	4b64      	ldr	r3, [pc, #400]	; (80032fc <TIM3_IRQHandler+0x6f4>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <TIM3_IRQHandler+0x6fc>)
 8003178:	edd3 6a00 	vldr	s13, [r3]
 800317c:	4b62      	ldr	r3, [pc, #392]	; (8003308 <TIM3_IRQHandler+0x700>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003186:	4b62      	ldr	r3, [pc, #392]	; (8003310 <TIM3_IRQHandler+0x708>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003194:	4b60      	ldr	r3, [pc, #384]	; (8003318 <TIM3_IRQHandler+0x710>)
 8003196:	edd3 6a00 	vldr	s13, [r3]
 800319a:	4b60      	ldr	r3, [pc, #384]	; (800331c <TIM3_IRQHandler+0x714>)
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031a4:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <TIM3_IRQHandler+0x71c>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b2:	4b5d      	ldr	r3, [pc, #372]	; (8003328 <TIM3_IRQHandler+0x720>)
 80031b4:	edc3 7a00 	vstr	s15, [r3]
    g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c2:	4b4b      	ldr	r3, [pc, #300]	; (80032f0 <TIM3_IRQHandler+0x6e8>)
 80031c4:	edd3 6a00 	vldr	s13, [r3]
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <TIM3_IRQHandler+0x6f4>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e0:	4b48      	ldr	r3, [pc, #288]	; (8003304 <TIM3_IRQHandler+0x6fc>)
 80031e2:	edd3 6a00 	vldr	s13, [r3]
 80031e6:	4b48      	ldr	r3, [pc, #288]	; (8003308 <TIM3_IRQHandler+0x700>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031f0:	4b47      	ldr	r3, [pc, #284]	; (8003310 <TIM3_IRQHandler+0x708>)
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031fe:	4b46      	ldr	r3, [pc, #280]	; (8003318 <TIM3_IRQHandler+0x710>)
 8003200:	edd3 6a00 	vldr	s13, [r3]
 8003204:	4b45      	ldr	r3, [pc, #276]	; (800331c <TIM3_IRQHandler+0x714>)
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800320e:	4b45      	ldr	r3, [pc, #276]	; (8003324 <TIM3_IRQHandler+0x71c>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <TIM3_IRQHandler+0x724>)
 800321e:	edc3 7a00 	vstr	s15, [r3]
    g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <TIM3_IRQHandler+0x6e8>)
 800322e:	edd3 6a00 	vldr	s13, [r3]
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <TIM3_IRQHandler+0x6f4>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <TIM3_IRQHandler+0x6fc>)
 800324c:	edd3 6a00 	vldr	s13, [r3]
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <TIM3_IRQHandler+0x700>)
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <TIM3_IRQHandler+0x708>)
 800325c:	edd3 7a00 	vldr	s15, [r3]
 8003260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <TIM3_IRQHandler+0x710>)
 800326a:	edd3 6a00 	vldr	s13, [r3]
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <TIM3_IRQHandler+0x714>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003278:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <TIM3_IRQHandler+0x71c>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <TIM3_IRQHandler+0x728>)
 8003288:	edc3 7a00 	vstr	s15, [r3]
    g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <TIM3_IRQHandler+0x6e8>)
 8003298:	edd3 6a00 	vldr	s13, [r3]
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <TIM3_IRQHandler+0x6ec>)
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <TIM3_IRQHandler+0x6f4>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032b4:	4b13      	ldr	r3, [pc, #76]	; (8003304 <TIM3_IRQHandler+0x6fc>)
 80032b6:	edd3 6a00 	vldr	s13, [r3]
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <TIM3_IRQHandler+0x700>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <TIM3_IRQHandler+0x708>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <TIM3_IRQHandler+0x710>)
 80032d4:	edd3 6a00 	vldr	s13, [r3]
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <TIM3_IRQHandler+0x714>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	e029      	b.n	8003334 <TIM3_IRQHandler+0x72c>
 80032e0:	47ae147b 	.word	0x47ae147b
 80032e4:	3f847ae1 	.word	0x3f847ae1
 80032e8:	2000069c 	.word	0x2000069c
 80032ec:	20000644 	.word	0x20000644
 80032f0:	20000668 	.word	0x20000668
 80032f4:	2000066c 	.word	0x2000066c
 80032f8:	2000063c 	.word	0x2000063c
 80032fc:	20000670 	.word	0x20000670
 8003300:	20000648 	.word	0x20000648
 8003304:	20000674 	.word	0x20000674
 8003308:	20000678 	.word	0x20000678
 800330c:	20000638 	.word	0x20000638
 8003310:	2000067c 	.word	0x2000067c
 8003314:	2000064c 	.word	0x2000064c
 8003318:	20000680 	.word	0x20000680
 800331c:	20000684 	.word	0x20000684
 8003320:	20000640 	.word	0x20000640
 8003324:	20000688 	.word	0x20000688
 8003328:	2000068c 	.word	0x2000068c
 800332c:	20000690 	.word	0x20000690
 8003330:	20000694 	.word	0x20000694
 8003334:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003338:	4b37      	ldr	r3, [pc, #220]	; (8003418 <TIM3_IRQHandler+0x810>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003346:	4b35      	ldr	r3, [pc, #212]	; (800341c <TIM3_IRQHandler+0x814>)
 8003348:	edc3 7a00 	vstr	s15, [r3]

    g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <TIM3_IRQHandler+0x818>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8003424 <TIM3_IRQHandler+0x81c>
 8003356:	eddf 0a34 	vldr	s1, [pc, #208]	; 8003428 <TIM3_IRQHandler+0x820>
 800335a:	eeb0 0a67 	vmov.f32	s0, s15
 800335e:	f7ff fbe3 	bl	8002b28 <limit>
 8003362:	eef0 7a40 	vmov.f32	s15, s0
 8003366:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <TIM3_IRQHandler+0x818>)
 8003368:	edc3 7a00 	vstr	s15, [r3]
    g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 800336c:	4b2f      	ldr	r3, [pc, #188]	; (800342c <TIM3_IRQHandler+0x824>)
 800336e:	edd3 7a00 	vldr	s15, [r3]
 8003372:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8003424 <TIM3_IRQHandler+0x81c>
 8003376:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003428 <TIM3_IRQHandler+0x820>
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	f7ff fbd3 	bl	8002b28 <limit>
 8003382:	eef0 7a40 	vmov.f32	s15, s0
 8003386:	4b29      	ldr	r3, [pc, #164]	; (800342c <TIM3_IRQHandler+0x824>)
 8003388:	edc3 7a00 	vstr	s15, [r3]
    g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <TIM3_IRQHandler+0x828>)
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8003424 <TIM3_IRQHandler+0x81c>
 8003396:	eddf 0a24 	vldr	s1, [pc, #144]	; 8003428 <TIM3_IRQHandler+0x820>
 800339a:	eeb0 0a67 	vmov.f32	s0, s15
 800339e:	f7ff fbc3 	bl	8002b28 <limit>
 80033a2:	eef0 7a40 	vmov.f32	s15, s0
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <TIM3_IRQHandler+0x828>)
 80033a8:	edc3 7a00 	vstr	s15, [r3]
    g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <TIM3_IRQHandler+0x814>)
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8003424 <TIM3_IRQHandler+0x81c>
 80033b6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8003428 <TIM3_IRQHandler+0x820>
 80033ba:	eeb0 0a67 	vmov.f32	s0, s15
 80033be:	f7ff fbb3 	bl	8002b28 <limit>
 80033c2:	eef0 7a40 	vmov.f32	s15, s0
 80033c6:	4b15      	ldr	r3, [pc, #84]	; (800341c <TIM3_IRQHandler+0x814>)
 80033c8:	edc3 7a00 	vstr	s15, [r3]

    ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <TIM3_IRQHandler+0x818>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <TIM3_IRQHandler+0x824>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <TIM3_IRQHandler+0x828>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <TIM3_IRQHandler+0x814>)
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f4:	ee17 3a90 	vmov	r3, s15
 80033f8:	ee16 2a10 	vmov	r2, s12
 80033fc:	ee16 1a90 	vmov	r1, s13
 8003400:	ee17 0a10 	vmov	r0, s14
 8003404:	f7ff fbba 	bl	8002b7c <ctl_motors_speed>
  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003408:	480a      	ldr	r0, [pc, #40]	; (8003434 <TIM3_IRQHandler+0x82c>)
 800340a:	f002 fd90 	bl	8005f2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	3728      	adds	r7, #40	; 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bdb0      	pop	{r4, r5, r7, pc}
 8003416:	bf00      	nop
 8003418:	20000688 	.word	0x20000688
 800341c:	20000698 	.word	0x20000698
 8003420:	2000068c 	.word	0x2000068c
 8003424:	44410000 	.word	0x44410000
 8003428:	440f0000 	.word	0x440f0000
 800342c:	20000690 	.word	0x20000690
 8003430:	20000694 	.word	0x20000694
 8003434:	20000244 	.word	0x20000244

08003438 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  // Stop motor if lost signal from remote controller
  if (g_conn_lost_counter > 50) {
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <TIM4_IRQHandler+0x2c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b32      	cmp	r3, #50	; 0x32
 8003442:	dd05      	ble.n	8003450 <TIM4_IRQHandler+0x18>
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003444:	230a      	movs	r3, #10
 8003446:	220a      	movs	r2, #10
 8003448:	210a      	movs	r1, #10
 800344a:	200a      	movs	r0, #10
 800344c:	f7ff fb96 	bl	8002b7c <ctl_motors_speed>
  }

  g_conn_lost_counter += 1;
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <TIM4_IRQHandler+0x2c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	4a03      	ldr	r2, [pc, #12]	; (8003464 <TIM4_IRQHandler+0x2c>)
 8003458:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800345a:	4803      	ldr	r0, [pc, #12]	; (8003468 <TIM4_IRQHandler+0x30>)
 800345c:	f002 fd67 	bl	8005f2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000004 	.word	0x20000004
 8003468:	2000028c 	.word	0x2000028c

0800346c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <USART1_IRQHandler+0x10>)
 8003472:	f003 fe9b 	bl	80071ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200002d4 	.word	0x200002d4

08003480 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	4803      	ldr	r0, [pc, #12]	; (8003498 <HAL_UART_TxCpltCallback+0x18>)
 800348c:	f000 fd11 	bl	8003eb2 <HAL_GPIO_TogglePin>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40020000 	.word	0x40020000

0800349c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 80034a4:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_UART_RxCpltCallback+0x11c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	4843      	ldr	r0, [pc, #268]	; (80035bc <HAL_UART_RxCpltCallback+0x120>)
 80034ae:	f000 fd00 	bl	8003eb2 <HAL_GPIO_TogglePin>

  // Serialize control values
  uint8_t g_control_1st_idx = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  if (g_control[0] == 254) g_control_1st_idx = 1;
 80034b6:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2bfe      	cmp	r3, #254	; 0xfe
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_RxCpltCallback+0x26>
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	2bfe      	cmp	r3, #254	; 0xfe
 80034c8:	d101      	bne.n	80034ce <HAL_UART_RxCpltCallback+0x32>
 80034ca:	2302      	movs	r3, #2
 80034cc:	73fb      	strb	r3, [r7, #15]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 80034d0:	789b      	ldrb	r3, [r3, #2]
 80034d2:	2bfe      	cmp	r3, #254	; 0xfe
 80034d4:	d101      	bne.n	80034da <HAL_UART_RxCpltCallback+0x3e>
 80034d6:	2303      	movs	r3, #3
 80034d8:	73fb      	strb	r3, [r7, #15]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 80034dc:	78db      	ldrb	r3, [r3, #3]
 80034de:	2bfe      	cmp	r3, #254	; 0xfe
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_RxCpltCallback+0x4a>
 80034e2:	2304      	movs	r3, #4
 80034e4:	73fb      	strb	r3, [r7, #15]
  if (g_control[4] == 254) g_control_1st_idx = 0;
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 80034e8:	791b      	ldrb	r3, [r3, #4]
 80034ea:	2bfe      	cmp	r3, #254	; 0xfe
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_RxCpltCallback+0x56>
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  g_thrust = g_control[g_control_1st_idx];
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	4a32      	ldr	r2, [pc, #200]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 80034f6:	5cd2      	ldrb	r2, [r2, r3]
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_UART_RxCpltCallback+0x128>)
 80034fa:	701a      	strb	r2, [r3, #0]
  g_pitch = g_control[(g_control_1st_idx+1)%5]-100;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	1c59      	adds	r1, r3, #1
 8003500:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_UART_RxCpltCallback+0x12c>)
 8003502:	fb83 2301 	smull	r2, r3, r3, r1
 8003506:	105a      	asrs	r2, r3, #1
 8003508:	17cb      	asrs	r3, r1, #31
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	1aca      	subs	r2, r1, r3
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 8003516:	5c9b      	ldrb	r3, [r3, r2]
 8003518:	3b64      	subs	r3, #100	; 0x64
 800351a:	b2db      	uxtb	r3, r3
 800351c:	b25a      	sxtb	r2, r3
 800351e:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_UART_RxCpltCallback+0x130>)
 8003520:	701a      	strb	r2, [r3, #0]
  g_roll = g_control[(g_control_1st_idx+2)%5]-100;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	1c99      	adds	r1, r3, #2
 8003526:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_UART_RxCpltCallback+0x12c>)
 8003528:	fb83 2301 	smull	r2, r3, r3, r1
 800352c:	105a      	asrs	r2, r3, #1
 800352e:	17cb      	asrs	r3, r1, #31
 8003530:	1ad2      	subs	r2, r2, r3
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	1aca      	subs	r2, r1, r3
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 800353c:	5c9b      	ldrb	r3, [r3, r2]
 800353e:	3b64      	subs	r3, #100	; 0x64
 8003540:	b2db      	uxtb	r3, r3
 8003542:	b25a      	sxtb	r2, r3
 8003544:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_UART_RxCpltCallback+0x134>)
 8003546:	701a      	strb	r2, [r3, #0]
  g_yaw = g_control[(g_control_1st_idx+3)%5]-100;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	1cd9      	adds	r1, r3, #3
 800354c:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <HAL_UART_RxCpltCallback+0x12c>)
 800354e:	fb83 2301 	smull	r2, r3, r3, r1
 8003552:	105a      	asrs	r2, r3, #1
 8003554:	17cb      	asrs	r3, r1, #31
 8003556:	1ad2      	subs	r2, r2, r3
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	1aca      	subs	r2, r1, r3
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_UART_RxCpltCallback+0x124>)
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	3b64      	subs	r3, #100	; 0x64
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b25a      	sxtb	r2, r3
 800356a:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <HAL_UART_RxCpltCallback+0x138>)
 800356c:	701a      	strb	r2, [r3, #0]
//      g_pitch, g_roll, 0,
//      0, 0, 0);
//  send_data(g_P_pitch, g_I_pitch, g_D_pitch,
//      g_P_roll, g_I_roll, g_D_roll,
//      g_P_yaw, g_I_yaw, g_D_yaw);
  send_data(g_sig1, g_sig2, MIN_SPEED,
 800356e:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_UART_RxCpltCallback+0x13c>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_UART_RxCpltCallback+0x140>)
 8003576:	ed93 7a00 	vldr	s14, [r3]
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_UART_RxCpltCallback+0x144>)
 800357c:	edd3 6a00 	vldr	s13, [r3]
 8003580:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_UART_RxCpltCallback+0x148>)
 8003582:	ed93 6a00 	vldr	s12, [r3]
 8003586:	ed9f 4a18 	vldr	s8, [pc, #96]	; 80035e8 <HAL_UART_RxCpltCallback+0x14c>
 800358a:	eddf 3a17 	vldr	s7, [pc, #92]	; 80035e8 <HAL_UART_RxCpltCallback+0x14c>
 800358e:	ed9f 3a16 	vldr	s6, [pc, #88]	; 80035e8 <HAL_UART_RxCpltCallback+0x14c>
 8003592:	eddf 2a16 	vldr	s5, [pc, #88]	; 80035ec <HAL_UART_RxCpltCallback+0x150>
 8003596:	eeb0 2a46 	vmov.f32	s4, s12
 800359a:	eef0 1a66 	vmov.f32	s3, s13
 800359e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80035ec <HAL_UART_RxCpltCallback+0x150>
 80035a2:	eef0 0a47 	vmov.f32	s1, s14
 80035a6:	eeb0 0a67 	vmov.f32	s0, s15
 80035aa:	f7fd fe91 	bl	80012d0 <send_data>
      g_sig3, g_sig4, MIN_SPEED,
      0, 0, 0);

}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000004 	.word	0x20000004
 80035bc:	40020000 	.word	0x40020000
 80035c0:	20000530 	.word	0x20000530
 80035c4:	2000069c 	.word	0x2000069c
 80035c8:	66666667 	.word	0x66666667
 80035cc:	2000069d 	.word	0x2000069d
 80035d0:	2000069e 	.word	0x2000069e
 80035d4:	2000069f 	.word	0x2000069f
 80035d8:	2000068c 	.word	0x2000068c
 80035dc:	20000690 	.word	0x20000690
 80035e0:	20000694 	.word	0x20000694
 80035e4:	20000698 	.word	0x20000698
 80035e8:	00000000 	.word	0x00000000
 80035ec:	440f0000 	.word	0x440f0000

080035f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <_sbrk+0x5c>)
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <_sbrk+0x60>)
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <_sbrk+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <_sbrk+0x64>)
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <_sbrk+0x68>)
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d207      	bcs.n	8003630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003620:	f004 fcb4 	bl	8007f8c <__errno>
 8003624:	4603      	mov	r3, r0
 8003626:	220c      	movs	r2, #12
 8003628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800362e:	e009      	b.n	8003644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <_sbrk+0x64>)
 8003640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20020000 	.word	0x20020000
 8003650:	00000400 	.word	0x00000400
 8003654:	200006a0 	.word	0x200006a0
 8003658:	200006b8 	.word	0x200006b8

0800365c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <SystemInit+0x20>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <SystemInit+0x20>)
 8003668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800366c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003684:	480d      	ldr	r0, [pc, #52]	; (80036bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003686:	490e      	ldr	r1, [pc, #56]	; (80036c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800369c:	4c0b      	ldr	r4, [pc, #44]	; (80036cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036aa:	f7ff ffd7 	bl	800365c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ae:	f004 fc73 	bl	8007f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b2:	f7fd fe9b 	bl	80013ec <main>
  bx  lr    
 80036b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80036c4:	08008ec8 	.word	0x08008ec8
  ldr r2, =_sbss
 80036c8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80036cc:	200006b8 	.word	0x200006b8

080036d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <ADC_IRQHandler>
	...

080036d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <HAL_Init+0x40>)
 80036de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_Init+0x40>)
 80036ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_Init+0x40>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f000 f94f 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003702:	200f      	movs	r0, #15
 8003704:	f000 f808 	bl	8003718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003708:	f7fe fef8 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00

08003718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_InitTick+0x54>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_InitTick+0x58>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800372e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f967 	bl	8003a0a <HAL_SYSTICK_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e00e      	b.n	8003764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d80a      	bhi.n	8003762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800374c:	2200      	movs	r2, #0
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003754:	f000 f92f 	bl	80039b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003758:	4a06      	ldr	r2, [pc, #24]	; (8003774 <HAL_InitTick+0x5c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000020 	.word	0x20000020
 8003770:	20000028 	.word	0x20000028
 8003774:	20000024 	.word	0x20000024

08003778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_IncTick+0x20>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_IncTick+0x24>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4413      	add	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_IncTick+0x24>)
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000028 	.word	0x20000028
 800379c:	200006a4 	.word	0x200006a4

080037a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return uwTick;
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_GetTick+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	200006a4 	.word	0x200006a4

080037b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7ff ffee 	bl	80037a0 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d0:	d005      	beq.n	80037de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_Delay+0x44>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037de:	bf00      	nop
 80037e0:	f7ff ffde 	bl	80037a0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d8f7      	bhi.n	80037e0 <HAL_Delay+0x28>
  {
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000028 	.word	0x20000028

08003800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <__NVIC_SetPriorityGrouping+0x44>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800381c:	4013      	ands	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800382c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003832:	4a04      	ldr	r2, [pc, #16]	; (8003844 <__NVIC_SetPriorityGrouping+0x44>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60d3      	str	r3, [r2, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <__NVIC_GetPriorityGrouping+0x18>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	f003 0307 	and.w	r3, r3, #7
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	2b00      	cmp	r3, #0
 8003874:	db0b      	blt.n	800388e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	f003 021f 	and.w	r2, r3, #31
 800387c:	4907      	ldr	r1, [pc, #28]	; (800389c <__NVIC_EnableIRQ+0x38>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2001      	movs	r0, #1
 8003886:	fa00 f202 	lsl.w	r2, r0, r2
 800388a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000e100 	.word	0xe000e100

080038a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	db0a      	blt.n	80038ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	490c      	ldr	r1, [pc, #48]	; (80038ec <__NVIC_SetPriority+0x4c>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	440b      	add	r3, r1
 80038c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c8:	e00a      	b.n	80038e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4908      	ldr	r1, [pc, #32]	; (80038f0 <__NVIC_SetPriority+0x50>)
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	3b04      	subs	r3, #4
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	440b      	add	r3, r1
 80038de:	761a      	strb	r2, [r3, #24]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000e100 	.word	0xe000e100
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f1c3 0307 	rsb	r3, r3, #7
 800390e:	2b04      	cmp	r3, #4
 8003910:	bf28      	it	cs
 8003912:	2304      	movcs	r3, #4
 8003914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3304      	adds	r3, #4
 800391a:	2b06      	cmp	r3, #6
 800391c:	d902      	bls.n	8003924 <NVIC_EncodePriority+0x30>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3b03      	subs	r3, #3
 8003922:	e000      	b.n	8003926 <NVIC_EncodePriority+0x32>
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	401a      	ands	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800393c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43d9      	mvns	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	4313      	orrs	r3, r2
         );
}
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800396c:	d301      	bcc.n	8003972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800396e:	2301      	movs	r3, #1
 8003970:	e00f      	b.n	8003992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <SysTick_Config+0x40>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397a:	210f      	movs	r1, #15
 800397c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003980:	f7ff ff8e 	bl	80038a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <SysTick_Config+0x40>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <SysTick_Config+0x40>)
 800398c:	2207      	movs	r2, #7
 800398e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	e000e010 	.word	0xe000e010

080039a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff29 	bl	8003800 <__NVIC_SetPriorityGrouping>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4603      	mov	r3, r0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c8:	f7ff ff3e 	bl	8003848 <__NVIC_GetPriorityGrouping>
 80039cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff ff8e 	bl	80038f4 <NVIC_EncodePriority>
 80039d8:	4602      	mov	r2, r0
 80039da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5d 	bl	80038a0 <__NVIC_SetPriority>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff31 	bl	8003864 <__NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ffa2 	bl	800395c <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7ff feb6 	bl	80037a0 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d008      	beq.n	8003a54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e052      	b.n	8003afa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0216 	bic.w	r2, r2, #22
 8003a62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <HAL_DMA_Abort+0x62>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0208 	bic.w	r2, r2, #8
 8003a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa4:	e013      	b.n	8003ace <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aa6:	f7ff fe7b 	bl	80037a0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d90c      	bls.n	8003ace <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2203      	movs	r2, #3
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e015      	b.n	8003afa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e4      	bne.n	8003aa6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	223f      	movs	r2, #63	; 0x3f
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e00c      	b.n	8003b3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2205      	movs	r2, #5
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e16b      	b.n	8003e3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f040 815a 	bne.w	8003e36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d005      	beq.n	8003b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d130      	bne.n	8003bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0201 	and.w	r2, r3, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d017      	beq.n	8003c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d123      	bne.n	8003c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80b4 	beq.w	8003e36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b60      	ldr	r3, [pc, #384]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a5f      	ldr	r2, [pc, #380]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <HAL_GPIO_Init+0x310>)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a52      	ldr	r2, [pc, #328]	; (8003e5c <HAL_GPIO_Init+0x314>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d02b      	beq.n	8003d6e <HAL_GPIO_Init+0x226>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a51      	ldr	r2, [pc, #324]	; (8003e60 <HAL_GPIO_Init+0x318>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d025      	beq.n	8003d6a <HAL_GPIO_Init+0x222>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a50      	ldr	r2, [pc, #320]	; (8003e64 <HAL_GPIO_Init+0x31c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01f      	beq.n	8003d66 <HAL_GPIO_Init+0x21e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4f      	ldr	r2, [pc, #316]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d019      	beq.n	8003d62 <HAL_GPIO_Init+0x21a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4e      	ldr	r2, [pc, #312]	; (8003e6c <HAL_GPIO_Init+0x324>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_GPIO_Init+0x216>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4d      	ldr	r2, [pc, #308]	; (8003e70 <HAL_GPIO_Init+0x328>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00d      	beq.n	8003d5a <HAL_GPIO_Init+0x212>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4c      	ldr	r2, [pc, #304]	; (8003e74 <HAL_GPIO_Init+0x32c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <HAL_GPIO_Init+0x20e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_GPIO_Init+0x20a>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00e      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d52:	2308      	movs	r3, #8
 8003d54:	e00c      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d56:	2306      	movs	r3, #6
 8003d58:	e00a      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d80:	4935      	ldr	r1, [pc, #212]	; (8003e58 <HAL_GPIO_Init+0x310>)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db2:	4a32      	ldr	r2, [pc, #200]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db8:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e30:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f67f ae90 	bls.w	8003b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40021400 	.word	0x40021400
 8003e74:	40021800 	.word	0x40021800
 8003e78:	40021c00 	.word	0x40021c00
 8003e7c:	40013c00 	.word	0x40013c00

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e9c:	e003      	b.n	8003ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	041a      	lsls	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	619a      	str	r2, [r3, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ec4:	887a      	ldrh	r2, [r7, #2]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	041a      	lsls	r2, r3, #16
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43d9      	mvns	r1, r3
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	619a      	str	r2, [r3, #24]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e12b      	b.n	8004152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe fb1c 	bl	800254c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2224      	movs	r2, #36	; 0x24
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f001 fd0e 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8003f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a81      	ldr	r2, [pc, #516]	; (800415c <HAL_I2C_Init+0x274>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d807      	bhi.n	8003f6c <HAL_I2C_Init+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a80      	ldr	r2, [pc, #512]	; (8004160 <HAL_I2C_Init+0x278>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e006      	b.n	8003f7a <HAL_I2C_Init+0x92>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a7d      	ldr	r2, [pc, #500]	; (8004164 <HAL_I2C_Init+0x27c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	bf94      	ite	ls
 8003f74:	2301      	movls	r3, #1
 8003f76:	2300      	movhi	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0e7      	b.n	8004152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a78      	ldr	r2, [pc, #480]	; (8004168 <HAL_I2C_Init+0x280>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0c9b      	lsrs	r3, r3, #18
 8003f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a6a      	ldr	r2, [pc, #424]	; (800415c <HAL_I2C_Init+0x274>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d802      	bhi.n	8003fbc <HAL_I2C_Init+0xd4>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	e009      	b.n	8003fd0 <HAL_I2C_Init+0xe8>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_I2C_Init+0x284>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	3301      	adds	r3, #1
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	495c      	ldr	r1, [pc, #368]	; (800415c <HAL_I2C_Init+0x274>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d819      	bhi.n	8004024 <HAL_I2C_Init+0x13c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e59      	subs	r1, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffe:	1c59      	adds	r1, r3, #1
 8004000:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004004:	400b      	ands	r3, r1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_I2C_Init+0x138>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e59      	subs	r1, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fbb1 f3f3 	udiv	r3, r1, r3
 8004018:	3301      	adds	r3, #1
 800401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401e:	e051      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004020:	2304      	movs	r3, #4
 8004022:	e04f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d111      	bne.n	8004050 <HAL_I2C_Init+0x168>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1e58      	subs	r0, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e012      	b.n	8004076 <HAL_I2C_Init+0x18e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1e58      	subs	r0, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	0099      	lsls	r1, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	fbb0 f3f3 	udiv	r3, r0, r3
 8004066:	3301      	adds	r3, #1
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x196>
 800407a:	2301      	movs	r3, #1
 800407c:	e022      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_I2C_Init+0x1bc>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1e58      	subs	r0, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	440b      	add	r3, r1
 8004094:	fbb0 f3f3 	udiv	r3, r0, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	e00f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1e58      	subs	r0, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	0099      	lsls	r1, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	6809      	ldr	r1, [r1, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6911      	ldr	r1, [r2, #16]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68d2      	ldr	r2, [r2, #12]
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	000186a0 	.word	0x000186a0
 8004160:	001e847f 	.word	0x001e847f
 8004164:	003d08ff 	.word	0x003d08ff
 8004168:	431bde83 	.word	0x431bde83
 800416c:	10624dd3 	.word	0x10624dd3

08004170 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	461a      	mov	r2, r3
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
 8004180:	4613      	mov	r3, r2
 8004182:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004184:	f7ff fb0c 	bl	80037a0 <HAL_GetTick>
 8004188:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	f040 80e0 	bne.w	8004358 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2319      	movs	r3, #25
 800419e:	2201      	movs	r2, #1
 80041a0:	4970      	ldr	r1, [pc, #448]	; (8004364 <HAL_I2C_Master_Transmit+0x1f4>)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fd94 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0d3      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_Master_Transmit+0x50>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0cc      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d007      	beq.n	80041e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2221      	movs	r2, #33	; 0x21
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2210      	movs	r2, #16
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	893a      	ldrh	r2, [r7, #8]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a50      	ldr	r2, [pc, #320]	; (8004368 <HAL_I2C_Master_Transmit+0x1f8>)
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004228:	8979      	ldrh	r1, [r7, #10]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fbfe 	bl	8004a30 <I2C_MasterRequestWrite>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e08d      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004254:	e066      	b.n	8004324 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6a39      	ldr	r1, [r7, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fe0e 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b04      	cmp	r3, #4
 800426c:	d107      	bne.n	800427e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06b      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d11b      	bne.n	80042f8 <HAL_I2C_Master_Transmit+0x188>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	6a39      	ldr	r1, [r7, #32]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fdfe 	bl	8004efe <I2C_WaitOnBTFFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b04      	cmp	r3, #4
 800430e:	d107      	bne.n	8004320 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e01a      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d194      	bne.n	8004256 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
  }
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	00100002 	.word	0x00100002
 8004368:	ffff0000 	.word	0xffff0000

0800436c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	461a      	mov	r2, r3
 8004378:	460b      	mov	r3, r1
 800437a:	817b      	strh	r3, [r7, #10]
 800437c:	4613      	mov	r3, r2
 800437e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004380:	f7ff fa0e 	bl	80037a0 <HAL_GetTick>
 8004384:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b20      	cmp	r3, #32
 8004390:	f040 820b 	bne.w	80047aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2319      	movs	r3, #25
 800439a:	2201      	movs	r2, #1
 800439c:	497c      	ldr	r1, [pc, #496]	; (8004590 <HAL_I2C_Master_Receive+0x224>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fc96 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e1fe      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2C_Master_Receive+0x50>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e1f7      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d007      	beq.n	80043e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2222      	movs	r2, #34	; 0x22
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2210      	movs	r2, #16
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	893a      	ldrh	r2, [r7, #8]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a5c      	ldr	r2, [pc, #368]	; (8004594 <HAL_I2C_Master_Receive+0x228>)
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fb82 	bl	8004b34 <I2C_MasterRequestRead>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e1b8      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	623b      	str	r3, [r7, #32]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e18c      	b.n	8004784 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	2b01      	cmp	r3, #1
 8004470:	d11b      	bne.n	80044aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e16c      	b.n	8004784 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d11b      	bne.n	80044ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d2:	2300      	movs	r3, #0
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	e14c      	b.n	8004784 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004510:	e138      	b.n	8004784 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	2b03      	cmp	r3, #3
 8004518:	f200 80f1 	bhi.w	80046fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b01      	cmp	r3, #1
 8004522:	d123      	bne.n	800456c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fd29 	bl	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e139      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a
 800456a:	e10b      	b.n	8004784 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	2b02      	cmp	r3, #2
 8004572:	d14e      	bne.n	8004612 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2200      	movs	r2, #0
 800457c:	4906      	ldr	r1, [pc, #24]	; (8004598 <HAL_I2C_Master_Receive+0x22c>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fba6 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e10e      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
 800458e:	bf00      	nop
 8004590:	00100002 	.word	0x00100002
 8004594:	ffff0000 	.word	0xffff0000
 8004598:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004610:	e0b8      	b.n	8004784 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	2200      	movs	r2, #0
 800461a:	4966      	ldr	r1, [pc, #408]	; (80047b4 <HAL_I2C_Master_Receive+0x448>)
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fb57 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0bf      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	494f      	ldr	r1, [pc, #316]	; (80047b4 <HAL_I2C_Master_Receive+0x448>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fb29 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e091      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046fc:	e042      	b.n	8004784 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fc3c 	bl	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e04c      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b04      	cmp	r3, #4
 8004750:	d118      	bne.n	8004784 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	f47f aec2 	bne.w	8004512 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3728      	adds	r7, #40	; 0x28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	00010004 	.word	0x00010004

080047b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	460b      	mov	r3, r1
 80047c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80047c8:	f7fe ffea 	bl	80037a0 <HAL_GetTick>
 80047cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b20      	cmp	r3, #32
 80047dc:	f040 8111 	bne.w	8004a02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2319      	movs	r3, #25
 80047e6:	2201      	movs	r2, #1
 80047e8:	4988      	ldr	r1, [pc, #544]	; (8004a0c <HAL_I2C_IsDeviceReady+0x254>)
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa70 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	e104      	b.n	8004a04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_I2C_IsDeviceReady+0x50>
 8004804:	2302      	movs	r3, #2
 8004806:	e0fd      	b.n	8004a04 <HAL_I2C_IsDeviceReady+0x24c>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d007      	beq.n	800482e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2224      	movs	r2, #36	; 0x24
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a70      	ldr	r2, [pc, #448]	; (8004a10 <HAL_I2C_IsDeviceReady+0x258>)
 8004850:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004860:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fa2e 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	d103      	bne.n	8004892 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0b6      	b.n	8004a04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004896:	897b      	ldrh	r3, [r7, #10]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fe ff7b 	bl	80037a0 <HAL_GetTick>
 80048aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048da:	e025      	b.n	8004928 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048dc:	f7fe ff60 	bl	80037a0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d302      	bcc.n	80048f2 <HAL_I2C_IsDeviceReady+0x13a>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	22a0      	movs	r2, #160	; 0xa0
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2ba0      	cmp	r3, #160	; 0xa0
 8004932:	d005      	beq.n	8004940 <HAL_I2C_IsDeviceReady+0x188>
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <HAL_I2C_IsDeviceReady+0x188>
 800493a:	7dbb      	ldrb	r3, [r7, #22]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0cd      	beq.n	80048dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d129      	bne.n	80049aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004964:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2319      	movs	r3, #25
 8004982:	2201      	movs	r2, #1
 8004984:	4921      	ldr	r1, [pc, #132]	; (8004a0c <HAL_I2C_IsDeviceReady+0x254>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f9a2 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e036      	b.n	8004a04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e02c      	b.n	8004a04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2319      	movs	r3, #25
 80049ca:	2201      	movs	r2, #1
 80049cc:	490f      	ldr	r1, [pc, #60]	; (8004a0c <HAL_I2C_IsDeviceReady+0x254>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f97e 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e012      	b.n	8004a04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	3301      	adds	r3, #1
 80049e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	f4ff af32 	bcc.w	8004852 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	00100002 	.word	0x00100002
 8004a10:	ffff0000 	.word	0xffff0000

08004a14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a22:	b2db      	uxtb	r3, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d006      	beq.n	8004a5a <I2C_MasterRequestWrite+0x2a>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d003      	beq.n	8004a5a <I2C_MasterRequestWrite+0x2a>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a58:	d108      	bne.n	8004a6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e00b      	b.n	8004a84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d107      	bne.n	8004a84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f91d 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aaa:	d103      	bne.n	8004ab4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e035      	b.n	8004b24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac0:	d108      	bne.n	8004ad4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ac2:	897b      	ldrh	r3, [r7, #10]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ad0:	611a      	str	r2, [r3, #16]
 8004ad2:	e01b      	b.n	8004b0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ad4:	897b      	ldrh	r3, [r7, #10]
 8004ad6:	11db      	asrs	r3, r3, #7
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0306 	and.w	r3, r3, #6
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f063 030f 	orn	r3, r3, #15
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	490e      	ldr	r1, [pc, #56]	; (8004b2c <I2C_MasterRequestWrite+0xfc>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f943 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e010      	b.n	8004b24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4907      	ldr	r1, [pc, #28]	; (8004b30 <I2C_MasterRequestWrite+0x100>)
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f933 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	00010008 	.word	0x00010008
 8004b30:	00010002 	.word	0x00010002

08004b34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d006      	beq.n	8004b6e <I2C_MasterRequestRead+0x3a>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d003      	beq.n	8004b6e <I2C_MasterRequestRead+0x3a>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b6c:	d108      	bne.n	8004b80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e00b      	b.n	8004b98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b11      	cmp	r3, #17
 8004b86:	d107      	bne.n	8004b98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f893 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbe:	d103      	bne.n	8004bc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e079      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd4:	d108      	bne.n	8004be8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	e05f      	b.n	8004ca8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	11db      	asrs	r3, r3, #7
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0306 	and.w	r3, r3, #6
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f063 030f 	orn	r3, r3, #15
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4930      	ldr	r1, [pc, #192]	; (8004cc8 <I2C_MasterRequestRead+0x194>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8b9 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e054      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4929      	ldr	r1, [pc, #164]	; (8004ccc <I2C_MasterRequestRead+0x198>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f8a9 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e044      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f831 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c82:	d103      	bne.n	8004c8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e017      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c90:	897b      	ldrh	r3, [r7, #10]
 8004c92:	11db      	asrs	r3, r3, #7
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f063 030e 	orn	r3, r3, #14
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4907      	ldr	r1, [pc, #28]	; (8004ccc <I2C_MasterRequestRead+0x198>)
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f865 	bl	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	00010008 	.word	0x00010008
 8004ccc:	00010002 	.word	0x00010002

08004cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce0:	e025      	b.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce8:	d021      	beq.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fe fd59 	bl	80037a0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d116      	bne.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e023      	b.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10d      	bne.n	8004d54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	e00c      	b.n	8004d6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d0b6      	beq.n	8004ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d8c:	e051      	b.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d123      	bne.n	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004db6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0204 	orr.w	r2, r3, #4
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e046      	b.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dec:	d021      	beq.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fe fcd7 	bl	80037a0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d116      	bne.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e020      	b.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d10c      	bne.n	8004e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	e00b      	b.n	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	43da      	mvns	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4013      	ands	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d18d      	bne.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e88:	e02d      	b.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f8ce 	bl	800502c <I2C_IsAcknowledgeFailed>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e02d      	b.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea0:	d021      	beq.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fe fc7d 	bl	80037a0 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d116      	bne.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e007      	b.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b80      	cmp	r3, #128	; 0x80
 8004ef2:	d1ca      	bne.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f0a:	e02d      	b.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f88d 	bl	800502c <I2C_IsAcknowledgeFailed>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e02d      	b.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f22:	d021      	beq.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fe fc3c 	bl	80037a0 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d116      	bne.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e007      	b.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d1ca      	bne.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f8c:	e042      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d119      	bne.n	8004fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0210 	mvn.w	r2, #16
 8004fa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e029      	b.n	8005024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd0:	f7fe fbe6 	bl	80037a0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e007      	b.n	8005024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d1b5      	bne.n	8004f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005042:	d11b      	bne.n	800507c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800504c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f043 0204 	orr.w	r2, r3, #4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e267      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d075      	beq.n	8005196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050aa:	4b88      	ldr	r3, [pc, #544]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d00c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b6:	4b85      	ldr	r3, [pc, #532]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d112      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c2:	4b82      	ldr	r3, [pc, #520]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ce:	d10b      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	4b7e      	ldr	r3, [pc, #504]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05b      	beq.n	8005194 <HAL_RCC_OscConfig+0x108>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d157      	bne.n	8005194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e242      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d106      	bne.n	8005100 <HAL_RCC_OscConfig+0x74>
 80050f2:	4b76      	ldr	r3, [pc, #472]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a75      	ldr	r2, [pc, #468]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e01d      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x98>
 800510a:	4b70      	ldr	r3, [pc, #448]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6f      	ldr	r2, [pc, #444]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b6d      	ldr	r3, [pc, #436]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6c      	ldr	r2, [pc, #432]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e00b      	b.n	800513c <HAL_RCC_OscConfig+0xb0>
 8005124:	4b69      	ldr	r3, [pc, #420]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a68      	ldr	r2, [pc, #416]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b66      	ldr	r3, [pc, #408]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a65      	ldr	r2, [pc, #404]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fe fb2c 	bl	80037a0 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800514c:	f7fe fb28 	bl	80037a0 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	; 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e207      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	4b5b      	ldr	r3, [pc, #364]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0xc0>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fe fb18 	bl	80037a0 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005174:	f7fe fb14 	bl	80037a0 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1f3      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	4b51      	ldr	r3, [pc, #324]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0xe8>
 8005192:	e000      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d063      	beq.n	800526a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a2:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ae:	4b47      	ldr	r3, [pc, #284]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d11c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ba:	4b44      	ldr	r3, [pc, #272]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c6:	4b41      	ldr	r3, [pc, #260]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e1c7      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b3b      	ldr	r3, [pc, #236]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4937      	ldr	r1, [pc, #220]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	e03a      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fc:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <HAL_RCC_OscConfig+0x244>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fe facd 	bl	80037a0 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800520a:	f7fe fac9 	bl	80037a0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e1a8      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	4b2b      	ldr	r3, [pc, #172]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4925      	ldr	r1, [pc, #148]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	e015      	b.n	800526a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523e:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <HAL_RCC_OscConfig+0x244>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fe faac 	bl	80037a0 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524c:	f7fe faa8 	bl	80037a0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e187      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d036      	beq.n	80052e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <HAL_RCC_OscConfig+0x248>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fe fa8c 	bl	80037a0 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528c:	f7fe fa88 	bl	80037a0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e167      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCC_OscConfig+0x240>)
 80052a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x200>
 80052aa:	e01b      	b.n	80052e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_OscConfig+0x248>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fe fa75 	bl	80037a0 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	e00e      	b.n	80052d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fe fa71 	bl	80037a0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d907      	bls.n	80052d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e150      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
 80052cc:	40023800 	.word	0x40023800
 80052d0:	42470000 	.word	0x42470000
 80052d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d8:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 80052da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1ea      	bne.n	80052ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8097 	beq.w	8005420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f2:	2300      	movs	r3, #0
 80052f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4b81      	ldr	r3, [pc, #516]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	4b7d      	ldr	r3, [pc, #500]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	4a7c      	ldr	r2, [pc, #496]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005310:	6413      	str	r3, [r2, #64]	; 0x40
 8005312:	4b7a      	ldr	r3, [pc, #488]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005322:	4b77      	ldr	r3, [pc, #476]	; (8005500 <HAL_RCC_OscConfig+0x474>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	2b00      	cmp	r3, #0
 800532c:	d118      	bne.n	8005360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532e:	4b74      	ldr	r3, [pc, #464]	; (8005500 <HAL_RCC_OscConfig+0x474>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a73      	ldr	r2, [pc, #460]	; (8005500 <HAL_RCC_OscConfig+0x474>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533a:	f7fe fa31 	bl	80037a0 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005342:	f7fe fa2d 	bl	80037a0 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e10c      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005354:	4b6a      	ldr	r3, [pc, #424]	; (8005500 <HAL_RCC_OscConfig+0x474>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d106      	bne.n	8005376 <HAL_RCC_OscConfig+0x2ea>
 8005368:	4b64      	ldr	r3, [pc, #400]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	4a63      	ldr	r2, [pc, #396]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
 8005374:	e01c      	b.n	80053b0 <HAL_RCC_OscConfig+0x324>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b05      	cmp	r3, #5
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x30c>
 800537e:	4b5f      	ldr	r3, [pc, #380]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	4a5e      	ldr	r2, [pc, #376]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005384:	f043 0304 	orr.w	r3, r3, #4
 8005388:	6713      	str	r3, [r2, #112]	; 0x70
 800538a:	4b5c      	ldr	r3, [pc, #368]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a5b      	ldr	r2, [pc, #364]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6713      	str	r3, [r2, #112]	; 0x70
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0x324>
 8005398:	4b58      	ldr	r3, [pc, #352]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	4a57      	ldr	r2, [pc, #348]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	6713      	str	r3, [r2, #112]	; 0x70
 80053a4:	4b55      	ldr	r3, [pc, #340]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a8:	4a54      	ldr	r2, [pc, #336]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 80053aa:	f023 0304 	bic.w	r3, r3, #4
 80053ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d015      	beq.n	80053e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fe f9f2 	bl	80037a0 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c0:	f7fe f9ee 	bl	80037a0 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0cb      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d6:	4b49      	ldr	r3, [pc, #292]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ee      	beq.n	80053c0 <HAL_RCC_OscConfig+0x334>
 80053e2:	e014      	b.n	800540e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e4:	f7fe f9dc 	bl	80037a0 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fe f9d8 	bl	80037a0 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0b5      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005402:	4b3e      	ldr	r3, [pc, #248]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1ee      	bne.n	80053ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005414:	4b39      	ldr	r3, [pc, #228]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	4a38      	ldr	r2, [pc, #224]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80a1 	beq.w	800556c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800542a:	4b34      	ldr	r3, [pc, #208]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b08      	cmp	r3, #8
 8005434:	d05c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d141      	bne.n	80054c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <HAL_RCC_OscConfig+0x478>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fe f9ac 	bl	80037a0 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544c:	f7fe f9a8 	bl	80037a0 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e087      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	4b27      	ldr	r3, [pc, #156]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	3b01      	subs	r3, #1
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	491b      	ldr	r1, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCC_OscConfig+0x478>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fe f981 	bl	80037a0 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a2:	f7fe f97d 	bl	80037a0 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e05c      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b4:	4b11      	ldr	r3, [pc, #68]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x416>
 80054c0:	e054      	b.n	800556c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_RCC_OscConfig+0x478>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fe f96a 	bl	80037a0 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fe f966 	bl	80037a0 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e045      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_RCC_OscConfig+0x470>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x444>
 80054ee:	e03d      	b.n	800556c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e038      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
 80054fc:	40023800 	.word	0x40023800
 8005500:	40007000 	.word	0x40007000
 8005504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_RCC_OscConfig+0x4ec>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d028      	beq.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d121      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d11a      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800553e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005540:	4293      	cmp	r3, r2
 8005542:	d111      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	3b01      	subs	r3, #1
 8005552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005554:	429a      	cmp	r2, r3
 8005556:	d107      	bne.n	8005568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800

0800557c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0cc      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005590:	4b68      	ldr	r3, [pc, #416]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d90c      	bls.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b65      	ldr	r3, [pc, #404]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b63      	ldr	r3, [pc, #396]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0b8      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d020      	beq.n	8005606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d0:	4b59      	ldr	r3, [pc, #356]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a58      	ldr	r2, [pc, #352]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e8:	4b53      	ldr	r3, [pc, #332]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4a52      	ldr	r2, [pc, #328]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f4:	4b50      	ldr	r3, [pc, #320]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	494d      	ldr	r1, [pc, #308]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d044      	beq.n	800569c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d107      	bne.n	800562a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	4b47      	ldr	r3, [pc, #284]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d119      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e07f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d003      	beq.n	800563a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e06f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564a:	4b3b      	ldr	r3, [pc, #236]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e067      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4934      	ldr	r1, [pc, #208]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800566c:	f7fe f898 	bl	80037a0 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	e00a      	b.n	800568a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7fe f894 	bl	80037a0 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e04f      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 020c 	and.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d1eb      	bne.n	8005674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d20c      	bcs.n	80056c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b22      	ldr	r3, [pc, #136]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b20      	ldr	r3, [pc, #128]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e032      	b.n	800572a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4916      	ldr	r1, [pc, #88]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	490e      	ldr	r1, [pc, #56]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005702:	f000 f821 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 8005706:	4602      	mov	r2, r0
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	490a      	ldr	r1, [pc, #40]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 8005714:	5ccb      	ldrb	r3, [r1, r3]
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800571c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7fd fff8 	bl	8003718 <HAL_InitTick>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40023c00 	.word	0x40023c00
 8005738:	40023800 	.word	0x40023800
 800573c:	08008df8 	.word	0x08008df8
 8005740:	20000020 	.word	0x20000020
 8005744:	20000024 	.word	0x20000024

08005748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800574c:	b094      	sub	sp, #80	; 0x50
 800574e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	647b      	str	r3, [r7, #68]	; 0x44
 8005754:	2300      	movs	r3, #0
 8005756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005758:	2300      	movs	r3, #0
 800575a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005760:	4b79      	ldr	r3, [pc, #484]	; (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
 8005768:	2b08      	cmp	r3, #8
 800576a:	d00d      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0x40>
 800576c:	2b08      	cmp	r3, #8
 800576e:	f200 80e1 	bhi.w	8005934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x34>
 8005776:	2b04      	cmp	r3, #4
 8005778:	d003      	beq.n	8005782 <HAL_RCC_GetSysClockFreq+0x3a>
 800577a:	e0db      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800577c:	4b73      	ldr	r3, [pc, #460]	; (800594c <HAL_RCC_GetSysClockFreq+0x204>)
 800577e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005780:	e0db      	b.n	800593a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005782:	4b73      	ldr	r3, [pc, #460]	; (8005950 <HAL_RCC_GetSysClockFreq+0x208>)
 8005784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005786:	e0d8      	b.n	800593a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005788:	4b6f      	ldr	r3, [pc, #444]	; (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005790:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005792:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d063      	beq.n	8005866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579e:	4b6a      	ldr	r3, [pc, #424]	; (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	2200      	movs	r2, #0
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
 80057b2:	2300      	movs	r3, #0
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
 80057b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057ba:	4622      	mov	r2, r4
 80057bc:	462b      	mov	r3, r5
 80057be:	f04f 0000 	mov.w	r0, #0
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	0159      	lsls	r1, r3, #5
 80057c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057cc:	0150      	lsls	r0, r2, #5
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4621      	mov	r1, r4
 80057d4:	1a51      	subs	r1, r2, r1
 80057d6:	6139      	str	r1, [r7, #16]
 80057d8:	4629      	mov	r1, r5
 80057da:	eb63 0301 	sbc.w	r3, r3, r1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057ec:	4659      	mov	r1, fp
 80057ee:	018b      	lsls	r3, r1, #6
 80057f0:	4651      	mov	r1, sl
 80057f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057f6:	4651      	mov	r1, sl
 80057f8:	018a      	lsls	r2, r1, #6
 80057fa:	4651      	mov	r1, sl
 80057fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005800:	4659      	mov	r1, fp
 8005802:	eb63 0901 	sbc.w	r9, r3, r1
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800581a:	4690      	mov	r8, r2
 800581c:	4699      	mov	r9, r3
 800581e:	4623      	mov	r3, r4
 8005820:	eb18 0303 	adds.w	r3, r8, r3
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	462b      	mov	r3, r5
 8005828:	eb49 0303 	adc.w	r3, r9, r3
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800583a:	4629      	mov	r1, r5
 800583c:	024b      	lsls	r3, r1, #9
 800583e:	4621      	mov	r1, r4
 8005840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005844:	4621      	mov	r1, r4
 8005846:	024a      	lsls	r2, r1, #9
 8005848:	4610      	mov	r0, r2
 800584a:	4619      	mov	r1, r3
 800584c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584e:	2200      	movs	r2, #0
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
 8005852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005858:	f7fb f9b8 	bl	8000bcc <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4613      	mov	r3, r2
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005864:	e058      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005866:	4b38      	ldr	r3, [pc, #224]	; (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	2200      	movs	r2, #0
 800586e:	4618      	mov	r0, r3
 8005870:	4611      	mov	r1, r2
 8005872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005876:	623b      	str	r3, [r7, #32]
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	f04f 0000 	mov.w	r0, #0
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	0159      	lsls	r1, r3, #5
 800588e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005892:	0150      	lsls	r0, r2, #5
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4641      	mov	r1, r8
 800589a:	ebb2 0a01 	subs.w	sl, r2, r1
 800589e:	4649      	mov	r1, r9
 80058a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058b8:	ebb2 040a 	subs.w	r4, r2, sl
 80058bc:	eb63 050b 	sbc.w	r5, r3, fp
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	00eb      	lsls	r3, r5, #3
 80058ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ce:	00e2      	lsls	r2, r4, #3
 80058d0:	4614      	mov	r4, r2
 80058d2:	461d      	mov	r5, r3
 80058d4:	4643      	mov	r3, r8
 80058d6:	18e3      	adds	r3, r4, r3
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	464b      	mov	r3, r9
 80058dc:	eb45 0303 	adc.w	r3, r5, r3
 80058e0:	607b      	str	r3, [r7, #4]
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ee:	4629      	mov	r1, r5
 80058f0:	028b      	lsls	r3, r1, #10
 80058f2:	4621      	mov	r1, r4
 80058f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058f8:	4621      	mov	r1, r4
 80058fa:	028a      	lsls	r2, r1, #10
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005902:	2200      	movs	r2, #0
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	61fa      	str	r2, [r7, #28]
 8005908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800590c:	f7fb f95e 	bl	8000bcc <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4613      	mov	r3, r2
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCC_GetSysClockFreq+0x200>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	3301      	adds	r3, #1
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800592a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005932:	e002      	b.n	800593a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_RCC_GetSysClockFreq+0x204>)
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800593a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800593c:	4618      	mov	r0, r3
 800593e:	3750      	adds	r7, #80	; 0x50
 8005940:	46bd      	mov	sp, r7
 8005942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800
 800594c:	00f42400 	.word	0x00f42400
 8005950:	007a1200 	.word	0x007a1200

08005954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <HAL_RCC_GetHCLKFreq+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000020 	.word	0x20000020

0800596c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005970:	f7ff fff0 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0a9b      	lsrs	r3, r3, #10
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4903      	ldr	r1, [pc, #12]	; (8005990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40023800 	.word	0x40023800
 8005990:	08008e08 	.word	0x08008e08

08005994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005998:	f7ff ffdc 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 800599c:	4602      	mov	r2, r0
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0b5b      	lsrs	r3, r3, #13
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	4903      	ldr	r1, [pc, #12]	; (80059b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059aa:	5ccb      	ldrb	r3, [r1, r3]
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40023800 	.word	0x40023800
 80059b8:	08008e08 	.word	0x08008e08

080059bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e07b      	b.n	8005ac6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059de:	d009      	beq.n	80059f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	61da      	str	r2, [r3, #28]
 80059e6:	e005      	b.n	80059f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc fde4 	bl	80025dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	ea42 0103 	orr.w	r1, r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	f003 0104 	and.w	r1, r3, #4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f003 0210 	and.w	r2, r3, #16
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e041      	b.n	8005b64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fc fe2d 	bl	8002754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f000 fd6f 	bl	80065f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d001      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e04e      	b.n	8005c22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a23      	ldr	r2, [pc, #140]	; (8005c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x80>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d01d      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x80>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x80>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x80>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x80>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x80>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x80>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d111      	bne.n	8005c10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d010      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0e:	e007      	b.n	8005c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800
 8005c3c:	40000c00 	.word	0x40000c00
 8005c40:	40010400 	.word	0x40010400
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40001800 	.word	0x40001800

08005c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e041      	b.n	8005ce2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fc fe12 	bl	800289c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f000 fcb0 	bl	80065f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_TIM_PWM_Start+0x24>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	bf14      	ite	ne
 8005d08:	2301      	movne	r3, #1
 8005d0a:	2300      	moveq	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e022      	b.n	8005d56 <HAL_TIM_PWM_Start+0x6a>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d109      	bne.n	8005d2a <HAL_TIM_PWM_Start+0x3e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e015      	b.n	8005d56 <HAL_TIM_PWM_Start+0x6a>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d109      	bne.n	8005d44 <HAL_TIM_PWM_Start+0x58>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e008      	b.n	8005d56 <HAL_TIM_PWM_Start+0x6a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e07c      	b.n	8005e58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_PWM_Start+0x82>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6c:	e013      	b.n	8005d96 <HAL_TIM_PWM_Start+0xaa>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_PWM_Start+0x92>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7c:	e00b      	b.n	8005d96 <HAL_TIM_PWM_Start+0xaa>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_PWM_Start+0xa2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d8c:	e003      	b.n	8005d96 <HAL_TIM_PWM_Start+0xaa>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f83a 	bl	8006e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a2d      	ldr	r2, [pc, #180]	; (8005e60 <HAL_TIM_PWM_Start+0x174>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_TIM_PWM_Start+0xcc>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <HAL_TIM_PWM_Start+0x178>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_PWM_Start+0xd0>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <HAL_TIM_PWM_Start+0xd2>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <HAL_TIM_PWM_Start+0x174>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d022      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x136>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de4:	d01d      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x136>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_TIM_PWM_Start+0x17c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d018      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x136>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <HAL_TIM_PWM_Start+0x180>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x136>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_TIM_PWM_Start+0x184>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00e      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x136>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <HAL_TIM_PWM_Start+0x178>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d009      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x136>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a18      	ldr	r2, [pc, #96]	; (8005e74 <HAL_TIM_PWM_Start+0x188>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d004      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x136>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <HAL_TIM_PWM_Start+0x18c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d111      	bne.n	8005e46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b06      	cmp	r3, #6
 8005e32:	d010      	beq.n	8005e56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	e007      	b.n	8005e56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40001800 	.word	0x40001800

08005e7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e041      	b.n	8005f12 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f839 	bl	8005f1a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 fb98 	bl	80065f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d122      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d11b      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f06f 0202 	mvn.w	r2, #2
 8005f5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fb1e 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 8005f76:	e005      	b.n	8005f84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fb10 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fb21 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d122      	bne.n	8005fde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d11b      	bne.n	8005fde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f06f 0204 	mvn.w	r2, #4
 8005fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 faf4 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 8005fca:	e005      	b.n	8005fd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fae6 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 faf7 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d122      	bne.n	8006032 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d11b      	bne.n	8006032 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0208 	mvn.w	r2, #8
 8006002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2204      	movs	r2, #4
 8006008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 faca 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 800601e:	e005      	b.n	800602c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fabc 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 facd 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b10      	cmp	r3, #16
 800603e:	d122      	bne.n	8006086 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b10      	cmp	r3, #16
 800604c:	d11b      	bne.n	8006086 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f06f 0210 	mvn.w	r2, #16
 8006056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2208      	movs	r2, #8
 800605c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 faa0 	bl	80065b2 <HAL_TIM_IC_CaptureCallback>
 8006072:	e005      	b.n	8006080 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa92 	bl	800659e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 faa3 	bl	80065c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10e      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d107      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0201 	mvn.w	r2, #1
 80060aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa6c 	bl	800658a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d10e      	bne.n	80060de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d107      	bne.n	80060de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 ff9b 	bl	8007014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d10e      	bne.n	800610a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d107      	bne.n	800610a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa68 	bl	80065da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b20      	cmp	r3, #32
 8006116:	d10e      	bne.n	8006136 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b20      	cmp	r3, #32
 8006124:	d107      	bne.n	8006136 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 0220 	mvn.w	r2, #32
 800612e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 ff65 	bl	8007000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b086      	sub	sp, #24
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006158:	2302      	movs	r3, #2
 800615a:	e088      	b.n	800626e <HAL_TIM_IC_ConfigChannel+0x130>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11b      	bne.n	80061a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6819      	ldr	r1, [r3, #0]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f000 fc89 	bl	8006a90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 020c 	bic.w	r2, r2, #12
 800618c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6999      	ldr	r1, [r3, #24]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	619a      	str	r2, [r3, #24]
 80061a0:	e060      	b.n	8006264 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d11c      	bne.n	80061e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f000 fd0d 	bl	8006bd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6999      	ldr	r1, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	619a      	str	r2, [r3, #24]
 80061e0:	e040      	b.n	8006264 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d11b      	bne.n	8006220 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f000 fd5a 	bl	8006cb0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69da      	ldr	r2, [r3, #28]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 020c 	bic.w	r2, r2, #12
 800620a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69d9      	ldr	r1, [r3, #28]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	61da      	str	r2, [r3, #28]
 800621e:	e021      	b.n	8006264 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b0c      	cmp	r3, #12
 8006224:	d11c      	bne.n	8006260 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6819      	ldr	r1, [r3, #0]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f000 fd77 	bl	8006d28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006248:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69d9      	ldr	r1, [r3, #28]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	021a      	lsls	r2, r3, #8
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	61da      	str	r2, [r3, #28]
 800625e:	e001      	b.n	8006264 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006292:	2302      	movs	r3, #2
 8006294:	e0ae      	b.n	80063f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	f200 809f 	bhi.w	80063e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	080063e5 	.word	0x080063e5
 80062b4:	080063e5 	.word	0x080063e5
 80062b8:	080063e5 	.word	0x080063e5
 80062bc:	08006321 	.word	0x08006321
 80062c0:	080063e5 	.word	0x080063e5
 80062c4:	080063e5 	.word	0x080063e5
 80062c8:	080063e5 	.word	0x080063e5
 80062cc:	08006363 	.word	0x08006363
 80062d0:	080063e5 	.word	0x080063e5
 80062d4:	080063e5 	.word	0x080063e5
 80062d8:	080063e5 	.word	0x080063e5
 80062dc:	080063a3 	.word	0x080063a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fa22 	bl	8006730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0208 	orr.w	r2, r2, #8
 80062fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0204 	bic.w	r2, r2, #4
 800630a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6999      	ldr	r1, [r3, #24]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	619a      	str	r2, [r3, #24]
      break;
 800631e:	e064      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fa72 	bl	8006810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800633a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6999      	ldr	r1, [r3, #24]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	021a      	lsls	r2, r3, #8
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	619a      	str	r2, [r3, #24]
      break;
 8006360:	e043      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fac7 	bl	80068fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0208 	orr.w	r2, r2, #8
 800637c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0204 	bic.w	r2, r2, #4
 800638c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69d9      	ldr	r1, [r3, #28]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	61da      	str	r2, [r3, #28]
      break;
 80063a0:	e023      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fb1b 	bl	80069e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69d9      	ldr	r1, [r3, #28]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	021a      	lsls	r2, r3, #8
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	61da      	str	r2, [r3, #28]
      break;
 80063e2:	e002      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_TIM_ConfigClockSource+0x1c>
 8006414:	2302      	movs	r3, #2
 8006416:	e0b4      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x186>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800643e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006450:	d03e      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	f200 8087 	bhi.w	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645e:	f000 8086 	beq.w	800656e <HAL_TIM_ConfigClockSource+0x172>
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006466:	d87f      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006468:	2b70      	cmp	r3, #112	; 0x70
 800646a:	d01a      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0xa6>
 800646c:	2b70      	cmp	r3, #112	; 0x70
 800646e:	d87b      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006470:	2b60      	cmp	r3, #96	; 0x60
 8006472:	d050      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x11a>
 8006474:	2b60      	cmp	r3, #96	; 0x60
 8006476:	d877      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006478:	2b50      	cmp	r3, #80	; 0x50
 800647a:	d03c      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0xfa>
 800647c:	2b50      	cmp	r3, #80	; 0x50
 800647e:	d873      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d058      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x13a>
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d86f      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006488:	2b30      	cmp	r3, #48	; 0x30
 800648a:	d064      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 800648c:	2b30      	cmp	r3, #48	; 0x30
 800648e:	d86b      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b20      	cmp	r3, #32
 8006492:	d060      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 8006494:	2b20      	cmp	r3, #32
 8006496:	d867      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d05c      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 800649c:	2b10      	cmp	r3, #16
 800649e:	d05a      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 80064a0:	e062      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6899      	ldr	r1, [r3, #8]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f000 fc91 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	609a      	str	r2, [r3, #8]
      break;
 80064ce:	e04f      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6899      	ldr	r1, [r3, #8]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f000 fc7a 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f2:	609a      	str	r2, [r3, #8]
      break;
 80064f4:	e03c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6859      	ldr	r1, [r3, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	461a      	mov	r2, r3
 8006504:	f000 fb38 	bl	8006b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2150      	movs	r1, #80	; 0x50
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fc47 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006514:	e02c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6859      	ldr	r1, [r3, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	461a      	mov	r2, r3
 8006524:	f000 fb94 	bl	8006c50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2160      	movs	r1, #96	; 0x60
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fc37 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006534:	e01c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6859      	ldr	r1, [r3, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	461a      	mov	r2, r3
 8006544:	f000 fb18 	bl	8006b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2140      	movs	r1, #64	; 0x40
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fc27 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006554:	e00c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f000 fc1e 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006566:	e003      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	e000      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800656e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a40      	ldr	r2, [pc, #256]	; (8006704 <TIM_Base_SetConfig+0x114>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d013      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660e:	d00f      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a3d      	ldr	r2, [pc, #244]	; (8006708 <TIM_Base_SetConfig+0x118>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00b      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a3c      	ldr	r2, [pc, #240]	; (800670c <TIM_Base_SetConfig+0x11c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d007      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a3b      	ldr	r2, [pc, #236]	; (8006710 <TIM_Base_SetConfig+0x120>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d003      	beq.n	8006630 <TIM_Base_SetConfig+0x40>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a3a      	ldr	r2, [pc, #232]	; (8006714 <TIM_Base_SetConfig+0x124>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d108      	bne.n	8006642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2f      	ldr	r2, [pc, #188]	; (8006704 <TIM_Base_SetConfig+0x114>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d02b      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006650:	d027      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a2c      	ldr	r2, [pc, #176]	; (8006708 <TIM_Base_SetConfig+0x118>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d023      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2b      	ldr	r2, [pc, #172]	; (800670c <TIM_Base_SetConfig+0x11c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01f      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <TIM_Base_SetConfig+0x120>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01b      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a29      	ldr	r2, [pc, #164]	; (8006714 <TIM_Base_SetConfig+0x124>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d017      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a28      	ldr	r2, [pc, #160]	; (8006718 <TIM_Base_SetConfig+0x128>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a27      	ldr	r2, [pc, #156]	; (800671c <TIM_Base_SetConfig+0x12c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00f      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a26      	ldr	r2, [pc, #152]	; (8006720 <TIM_Base_SetConfig+0x130>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00b      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a25      	ldr	r2, [pc, #148]	; (8006724 <TIM_Base_SetConfig+0x134>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d007      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a24      	ldr	r2, [pc, #144]	; (8006728 <TIM_Base_SetConfig+0x138>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a23      	ldr	r2, [pc, #140]	; (800672c <TIM_Base_SetConfig+0x13c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d108      	bne.n	80066b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a0a      	ldr	r2, [pc, #40]	; (8006704 <TIM_Base_SetConfig+0x114>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0xf8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a0c      	ldr	r2, [pc, #48]	; (8006714 <TIM_Base_SetConfig+0x124>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d103      	bne.n	80066f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40010000 	.word	0x40010000
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40000c00 	.word	0x40000c00
 8006714:	40010400 	.word	0x40010400
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800
 8006724:	40001800 	.word	0x40001800
 8006728:	40001c00 	.word	0x40001c00
 800672c:	40002000 	.word	0x40002000

08006730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f023 0201 	bic.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f023 0302 	bic.w	r3, r3, #2
 8006778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a20      	ldr	r2, [pc, #128]	; (8006808 <TIM_OC1_SetConfig+0xd8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_OC1_SetConfig+0x64>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a1f      	ldr	r2, [pc, #124]	; (800680c <TIM_OC1_SetConfig+0xdc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d10c      	bne.n	80067ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0308 	bic.w	r3, r3, #8
 800679a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 0304 	bic.w	r3, r3, #4
 80067ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a15      	ldr	r2, [pc, #84]	; (8006808 <TIM_OC1_SetConfig+0xd8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC1_SetConfig+0x8e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <TIM_OC1_SetConfig+0xdc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d111      	bne.n	80067e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40010000 	.word	0x40010000
 800680c:	40010400 	.word	0x40010400

08006810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0210 	bic.w	r2, r3, #16
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0320 	bic.w	r3, r3, #32
 800685a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a22      	ldr	r2, [pc, #136]	; (80068f4 <TIM_OC2_SetConfig+0xe4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC2_SetConfig+0x68>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a21      	ldr	r2, [pc, #132]	; (80068f8 <TIM_OC2_SetConfig+0xe8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d10d      	bne.n	8006894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006892:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <TIM_OC2_SetConfig+0xe4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_OC2_SetConfig+0x94>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <TIM_OC2_SetConfig+0xe8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d113      	bne.n	80068cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40010400 	.word	0x40010400

080068fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a21      	ldr	r2, [pc, #132]	; (80069dc <TIM_OC3_SetConfig+0xe0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_OC3_SetConfig+0x66>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <TIM_OC3_SetConfig+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10d      	bne.n	800697e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800697c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a16      	ldr	r2, [pc, #88]	; (80069dc <TIM_OC3_SetConfig+0xe0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_OC3_SetConfig+0x92>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <TIM_OC3_SetConfig+0xe4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d113      	bne.n	80069b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800699c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40010400 	.word	0x40010400

080069e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a12      	ldr	r2, [pc, #72]	; (8006a88 <TIM_OC4_SetConfig+0xa4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC4_SetConfig+0x68>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a11      	ldr	r2, [pc, #68]	; (8006a8c <TIM_OC4_SetConfig+0xa8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d109      	bne.n	8006a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40010400 	.word	0x40010400

08006a90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a28      	ldr	r2, [pc, #160]	; (8006b5c <TIM_TI1_SetConfig+0xcc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01b      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d017      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a25      	ldr	r2, [pc, #148]	; (8006b60 <TIM_TI1_SetConfig+0xd0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a24      	ldr	r2, [pc, #144]	; (8006b64 <TIM_TI1_SetConfig+0xd4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4a23      	ldr	r2, [pc, #140]	; (8006b68 <TIM_TI1_SetConfig+0xd8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00b      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a22      	ldr	r2, [pc, #136]	; (8006b6c <TIM_TI1_SetConfig+0xdc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a21      	ldr	r2, [pc, #132]	; (8006b70 <TIM_TI1_SetConfig+0xe0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4a20      	ldr	r2, [pc, #128]	; (8006b74 <TIM_TI1_SetConfig+0xe4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d101      	bne.n	8006afa <TIM_TI1_SetConfig+0x6a>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <TIM_TI1_SetConfig+0x6c>
 8006afa:	2300      	movs	r3, #0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	e003      	b.n	8006b1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f023 030a 	bic.w	r3, r3, #10
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 030a 	and.w	r3, r3, #10
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40001800 	.word	0x40001800

08006b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 030a 	bic.w	r3, r3, #10
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	f023 0210 	bic.w	r2, r3, #16
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	031b      	lsls	r3, r3, #12
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	621a      	str	r2, [r3, #32]
}
 8006c44:	bf00      	nop
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f023 0210 	bic.w	r2, r3, #16
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	031b      	lsls	r3, r3, #12
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 0303 	bic.w	r3, r3, #3
 8006cdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	031b      	lsls	r3, r3, #12
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	031b      	lsls	r3, r3, #12
 8006d80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f043 0307 	orr.w	r3, r3, #7
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
	...

08006e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e05a      	b.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d022      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec8:	d01d      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d10c      	bne.n	8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40001800 	.word	0x40001800

08006f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e03d      	b.n	8006ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e03f      	b.n	80070ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fb fcc6 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800706a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fd19 	bl	8007aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	4613      	mov	r3, r2
 80070ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d130      	bne.n	800713e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_UART_Transmit_IT+0x26>
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e029      	b.n	8007140 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Transmit_IT+0x38>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e022      	b.n	8007140 <HAL_UART_Transmit_IT+0x7e>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	88fa      	ldrh	r2, [r7, #6]
 8007112:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007138:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	e000      	b.n	8007140 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800713e:	2302      	movs	r3, #2
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b20      	cmp	r3, #32
 8007164:	d11d      	bne.n	80071a2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_UART_Receive_IT+0x26>
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e016      	b.n	80071a4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_UART_Receive_IT+0x38>
 8007180:	2302      	movs	r3, #2
 8007182:	e00f      	b.n	80071a4 <HAL_UART_Receive_IT+0x58>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	461a      	mov	r2, r3
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 faab 	bl	80076f4 <UART_Start_Receive_IT>
 800719e:	4603      	mov	r3, r0
 80071a0:	e000      	b.n	80071a4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b0ba      	sub	sp, #232	; 0xe8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10f      	bne.n	8007212 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <HAL_UART_IRQHandler+0x66>
 80071fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fb8f 	bl	800792e <UART_Receive_IT>
      return;
 8007210:	e256      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80de 	beq.w	80073d8 <HAL_UART_IRQHandler+0x22c>
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80d1 	beq.w	80073d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <HAL_UART_IRQHandler+0xae>
 8007242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <HAL_UART_IRQHandler+0xd2>
 8007266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f043 0202 	orr.w	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_UART_IRQHandler+0xf6>
 800728a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f043 0204 	orr.w	r2, r3, #4
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d011      	beq.n	80072d2 <HAL_UART_IRQHandler+0x126>
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f043 0208 	orr.w	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 81ed 	beq.w	80076b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <HAL_UART_IRQHandler+0x14e>
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb1a 	bl	800792e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <HAL_UART_IRQHandler+0x17a>
 800731e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d04f      	beq.n	80073c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa22 	bl	8007770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	d141      	bne.n	80073be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3314      	adds	r3, #20
 8007340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007366:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800736a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800737e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1d9      	bne.n	800733a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	2b00      	cmp	r3, #0
 800738c:	d013      	beq.n	80073b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	4a7d      	ldr	r2, [pc, #500]	; (8007588 <HAL_UART_IRQHandler+0x3dc>)
 8007394:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc fbb1 	bl	8003b02 <HAL_DMA_Abort_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	e00e      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f986 	bl	80076c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073bc:	e00a      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f982 	bl	80076c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e006      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f97e 	bl	80076c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073d2:	e170      	b.n	80076b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	bf00      	nop
    return;
 80073d6:	e16e      	b.n	80076b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	2b01      	cmp	r3, #1
 80073de:	f040 814a 	bne.w	8007676 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8143 	beq.w	8007676 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 813c 	beq.w	8007676 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	f040 80b4 	bne.w	800758c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8140 	beq.w	80076ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800743e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007442:	429a      	cmp	r2, r3
 8007444:	f080 8139 	bcs.w	80076ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800744e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745a:	f000 8088 	beq.w	800756e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800747c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800748a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800748e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d9      	bne.n	800745e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e1      	bne.n	80074aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3314      	adds	r3, #20
 80074ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3314      	adds	r3, #20
 8007506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800750a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800750c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e3      	bne.n	80074e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800753c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753e:	f023 0310 	bic.w	r3, r3, #16
 8007542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007550:	65ba      	str	r2, [r7, #88]	; 0x58
 8007552:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800755e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e3      	bne.n	800752c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	4618      	mov	r0, r3
 800756a:	f7fc fa5a 	bl	8003a22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007576:	b29b      	uxth	r3, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	b29b      	uxth	r3, r3
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8ac 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007584:	e099      	b.n	80076ba <HAL_UART_IRQHandler+0x50e>
 8007586:	bf00      	nop
 8007588:	08007837 	.word	0x08007837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007594:	b29b      	uxth	r3, r3
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 808b 	beq.w	80076be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8086 	beq.w	80076be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075d6:	647a      	str	r2, [r7, #68]	; 0x44
 80075d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e3      	bne.n	80075b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3314      	adds	r3, #20
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	623b      	str	r3, [r7, #32]
   return(result);
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	f023 0301 	bic.w	r3, r3, #1
 8007600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3314      	adds	r3, #20
 800760a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800760e:	633a      	str	r2, [r7, #48]	; 0x30
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e3      	bne.n	80075ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	330c      	adds	r3, #12
 8007636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0310 	bic.w	r3, r3, #16
 8007646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007654:	61fa      	str	r2, [r7, #28]
 8007656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	69b9      	ldr	r1, [r7, #24]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	617b      	str	r3, [r7, #20]
   return(result);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e3      	bne.n	8007630 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f834 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007674:	e023      	b.n	80076be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <HAL_UART_IRQHandler+0x4ea>
 8007682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f8e5 	bl	800785e <UART_Transmit_IT>
    return;
 8007694:	e014      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <HAL_UART_IRQHandler+0x514>
 80076a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f925 	bl	80078fe <UART_EndTransmit_IT>
    return;
 80076b4:	e004      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
    return;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
      return;
 80076be:	bf00      	nop
  }
}
 80076c0:	37e8      	adds	r7, #232	; 0xe8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop

080076c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	88fa      	ldrh	r2, [r7, #6]
 800770c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	88fa      	ldrh	r2, [r7, #6]
 8007712:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2222      	movs	r2, #34	; 0x22
 800771e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007740:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0220 	orr.w	r2, r2, #32
 8007760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b095      	sub	sp, #84	; 0x54
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	330c      	adds	r3, #12
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	330c      	adds	r3, #12
 8007796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007798:	643a      	str	r2, [r7, #64]	; 0x40
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800779e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e5      	bne.n	8007778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3314      	adds	r3, #20
 80077b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d119      	bne.n	800781c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f023 0310 	bic.w	r3, r3, #16
 80077fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007808:	61ba      	str	r2, [r7, #24]
 800780a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	6979      	ldr	r1, [r7, #20]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	613b      	str	r3, [r7, #16]
   return(result);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e5      	bne.n	80077e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
}
 800782a:	bf00      	nop
 800782c:	3754      	adds	r7, #84	; 0x54
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff ff39 	bl	80076c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b21      	cmp	r3, #33	; 0x21
 8007870:	d13e      	bne.n	80078f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787a:	d114      	bne.n	80078a6 <UART_Transmit_IT+0x48>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d110      	bne.n	80078a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	1c9a      	adds	r2, r3, #2
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	621a      	str	r2, [r3, #32]
 80078a4:	e008      	b.n	80078b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	1c59      	adds	r1, r3, #1
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6211      	str	r1, [r2, #32]
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4619      	mov	r1, r3
 80078c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e000      	b.n	80078f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fb fdae 	bl	8003480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b08c      	sub	sp, #48	; 0x30
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b22      	cmp	r3, #34	; 0x22
 8007940:	f040 80ab 	bne.w	8007a9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d117      	bne.n	800797e <UART_Receive_IT+0x50>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d113      	bne.n	800797e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	b29a      	uxth	r2, r3
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	; 0x28
 800797c:	e026      	b.n	80079cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007990:	d007      	beq.n	80079a2 <UART_Receive_IT+0x74>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <UART_Receive_IT+0x82>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e008      	b.n	80079c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4619      	mov	r1, r3
 80079da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d15a      	bne.n	8007a96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0220 	bic.w	r2, r2, #32
 80079ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695a      	ldr	r2, [r3, #20]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d135      	bne.n	8007a8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	613b      	str	r3, [r7, #16]
   return(result);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f023 0310 	bic.w	r3, r3, #16
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a46:	623a      	str	r2, [r7, #32]
 8007a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	69f9      	ldr	r1, [r7, #28]
 8007a4c:	6a3a      	ldr	r2, [r7, #32]
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d10a      	bne.n	8007a7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff fe29 	bl	80076dc <HAL_UARTEx_RxEventCallback>
 8007a8a:	e002      	b.n	8007a92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fb fd05 	bl	800349c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e002      	b.n	8007a9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e000      	b.n	8007a9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a9a:	2302      	movs	r3, #2
  }
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3730      	adds	r7, #48	; 0x30
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa8:	b0c0      	sub	sp, #256	; 0x100
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac0:	68d9      	ldr	r1, [r3, #12]
 8007ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	ea40 0301 	orr.w	r3, r0, r1
 8007acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007afc:	f021 010c 	bic.w	r1, r1, #12
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1e:	6999      	ldr	r1, [r3, #24]
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	ea40 0301 	orr.w	r3, r0, r1
 8007b2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b8f      	ldr	r3, [pc, #572]	; (8007d70 <UART_SetConfig+0x2cc>)
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d005      	beq.n	8007b44 <UART_SetConfig+0xa0>
 8007b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4b8d      	ldr	r3, [pc, #564]	; (8007d74 <UART_SetConfig+0x2d0>)
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d104      	bne.n	8007b4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b44:	f7fd ff26 	bl	8005994 <HAL_RCC_GetPCLK2Freq>
 8007b48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b4c:	e003      	b.n	8007b56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b4e:	f7fd ff0d 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8007b52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b60:	f040 810c 	bne.w	8007d7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	1891      	adds	r1, r2, r2
 8007b7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b7e:	415b      	adcs	r3, r3
 8007b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b86:	4621      	mov	r1, r4
 8007b88:	eb12 0801 	adds.w	r8, r2, r1
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	eb43 0901 	adc.w	r9, r3, r1
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ba6:	4690      	mov	r8, r2
 8007ba8:	4699      	mov	r9, r3
 8007baa:	4623      	mov	r3, r4
 8007bac:	eb18 0303 	adds.w	r3, r8, r3
 8007bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	eb49 0303 	adc.w	r3, r9, r3
 8007bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	18db      	adds	r3, r3, r3
 8007bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8007bd8:	4613      	mov	r3, r2
 8007bda:	eb42 0303 	adc.w	r3, r2, r3
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
 8007be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007be4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007be8:	f7f8 fff0 	bl	8000bcc <__aeabi_uldivmod>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4b61      	ldr	r3, [pc, #388]	; (8007d78 <UART_SetConfig+0x2d4>)
 8007bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bf6:	095b      	lsrs	r3, r3, #5
 8007bf8:	011c      	lsls	r4, r3, #4
 8007bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c0c:	4642      	mov	r2, r8
 8007c0e:	464b      	mov	r3, r9
 8007c10:	1891      	adds	r1, r2, r2
 8007c12:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c14:	415b      	adcs	r3, r3
 8007c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	eb12 0a01 	adds.w	sl, r2, r1
 8007c22:	4649      	mov	r1, r9
 8007c24:	eb43 0b01 	adc.w	fp, r3, r1
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c3c:	4692      	mov	sl, r2
 8007c3e:	469b      	mov	fp, r3
 8007c40:	4643      	mov	r3, r8
 8007c42:	eb1a 0303 	adds.w	r3, sl, r3
 8007c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	18db      	adds	r3, r3, r3
 8007c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6e:	4613      	mov	r3, r2
 8007c70:	eb42 0303 	adc.w	r3, r2, r3
 8007c74:	647b      	str	r3, [r7, #68]	; 0x44
 8007c76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c7e:	f7f8 ffa5 	bl	8000bcc <__aeabi_uldivmod>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	4b3b      	ldr	r3, [pc, #236]	; (8007d78 <UART_SetConfig+0x2d4>)
 8007c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	2264      	movs	r2, #100	; 0x64
 8007c92:	fb02 f303 	mul.w	r3, r2, r3
 8007c96:	1acb      	subs	r3, r1, r3
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c9e:	4b36      	ldr	r3, [pc, #216]	; (8007d78 <UART_SetConfig+0x2d4>)
 8007ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cac:	441c      	add	r4, r3
 8007cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007cbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	1891      	adds	r1, r2, r2
 8007cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cc8:	415b      	adcs	r3, r3
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ccc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	1851      	adds	r1, r2, r1
 8007cd4:	6339      	str	r1, [r7, #48]	; 0x30
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	414b      	adcs	r3, r1
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ce8:	4659      	mov	r1, fp
 8007cea:	00cb      	lsls	r3, r1, #3
 8007cec:	4651      	mov	r1, sl
 8007cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cf2:	4651      	mov	r1, sl
 8007cf4:	00ca      	lsls	r2, r1, #3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d04:	464b      	mov	r3, r9
 8007d06:	460a      	mov	r2, r1
 8007d08:	eb42 0303 	adc.w	r3, r2, r3
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d24:	460b      	mov	r3, r1
 8007d26:	18db      	adds	r3, r3, r3
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	eb42 0303 	adc.w	r3, r2, r3
 8007d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d3a:	f7f8 ff47 	bl	8000bcc <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <UART_SetConfig+0x2d4>)
 8007d44:	fba3 1302 	umull	r1, r3, r3, r2
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	2164      	movs	r1, #100	; 0x64
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	3332      	adds	r3, #50	; 0x32
 8007d56:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <UART_SetConfig+0x2d4>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	f003 0207 	and.w	r2, r3, #7
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4422      	add	r2, r4
 8007d6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d6c:	e105      	b.n	8007f7a <UART_SetConfig+0x4d6>
 8007d6e:	bf00      	nop
 8007d70:	40011000 	.word	0x40011000
 8007d74:	40011400 	.word	0x40011400
 8007d78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d8e:	4642      	mov	r2, r8
 8007d90:	464b      	mov	r3, r9
 8007d92:	1891      	adds	r1, r2, r2
 8007d94:	6239      	str	r1, [r7, #32]
 8007d96:	415b      	adcs	r3, r3
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
 8007d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d9e:	4641      	mov	r1, r8
 8007da0:	1854      	adds	r4, r2, r1
 8007da2:	4649      	mov	r1, r9
 8007da4:	eb43 0501 	adc.w	r5, r3, r1
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	00eb      	lsls	r3, r5, #3
 8007db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007db6:	00e2      	lsls	r2, r4, #3
 8007db8:	4614      	mov	r4, r2
 8007dba:	461d      	mov	r5, r3
 8007dbc:	4643      	mov	r3, r8
 8007dbe:	18e3      	adds	r3, r4, r3
 8007dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	eb45 0303 	adc.w	r3, r5, r3
 8007dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007dea:	4629      	mov	r1, r5
 8007dec:	008b      	lsls	r3, r1, #2
 8007dee:	4621      	mov	r1, r4
 8007df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007df4:	4621      	mov	r1, r4
 8007df6:	008a      	lsls	r2, r1, #2
 8007df8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007dfc:	f7f8 fee6 	bl	8000bcc <__aeabi_uldivmod>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4b60      	ldr	r3, [pc, #384]	; (8007f88 <UART_SetConfig+0x4e4>)
 8007e06:	fba3 2302 	umull	r2, r3, r3, r2
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	011c      	lsls	r4, r3, #4
 8007e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e20:	4642      	mov	r2, r8
 8007e22:	464b      	mov	r3, r9
 8007e24:	1891      	adds	r1, r2, r2
 8007e26:	61b9      	str	r1, [r7, #24]
 8007e28:	415b      	adcs	r3, r3
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e30:	4641      	mov	r1, r8
 8007e32:	1851      	adds	r1, r2, r1
 8007e34:	6139      	str	r1, [r7, #16]
 8007e36:	4649      	mov	r1, r9
 8007e38:	414b      	adcs	r3, r1
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e48:	4659      	mov	r1, fp
 8007e4a:	00cb      	lsls	r3, r1, #3
 8007e4c:	4651      	mov	r1, sl
 8007e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e52:	4651      	mov	r1, sl
 8007e54:	00ca      	lsls	r2, r1, #3
 8007e56:	4610      	mov	r0, r2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e64:	464b      	mov	r3, r9
 8007e66:	460a      	mov	r2, r1
 8007e68:	eb42 0303 	adc.w	r3, r2, r3
 8007e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e88:	4649      	mov	r1, r9
 8007e8a:	008b      	lsls	r3, r1, #2
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e92:	4641      	mov	r1, r8
 8007e94:	008a      	lsls	r2, r1, #2
 8007e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e9a:	f7f8 fe97 	bl	8000bcc <__aeabi_uldivmod>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4b39      	ldr	r3, [pc, #228]	; (8007f88 <UART_SetConfig+0x4e4>)
 8007ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	2164      	movs	r1, #100	; 0x64
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	3332      	adds	r3, #50	; 0x32
 8007eb6:	4a34      	ldr	r2, [pc, #208]	; (8007f88 <UART_SetConfig+0x4e4>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ec2:	441c      	add	r4, r3
 8007ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec8:	2200      	movs	r2, #0
 8007eca:	673b      	str	r3, [r7, #112]	; 0x70
 8007ecc:	677a      	str	r2, [r7, #116]	; 0x74
 8007ece:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ed2:	4642      	mov	r2, r8
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	1891      	adds	r1, r2, r2
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	415b      	adcs	r3, r3
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	1851      	adds	r1, r2, r1
 8007ee6:	6039      	str	r1, [r7, #0]
 8007ee8:	4649      	mov	r1, r9
 8007eea:	414b      	adcs	r3, r1
 8007eec:	607b      	str	r3, [r7, #4]
 8007eee:	f04f 0200 	mov.w	r2, #0
 8007ef2:	f04f 0300 	mov.w	r3, #0
 8007ef6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007efa:	4659      	mov	r1, fp
 8007efc:	00cb      	lsls	r3, r1, #3
 8007efe:	4651      	mov	r1, sl
 8007f00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f04:	4651      	mov	r1, sl
 8007f06:	00ca      	lsls	r2, r1, #3
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	4642      	mov	r2, r8
 8007f10:	189b      	adds	r3, r3, r2
 8007f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f14:	464b      	mov	r3, r9
 8007f16:	460a      	mov	r2, r1
 8007f18:	eb42 0303 	adc.w	r3, r2, r3
 8007f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	663b      	str	r3, [r7, #96]	; 0x60
 8007f28:	667a      	str	r2, [r7, #100]	; 0x64
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f36:	4649      	mov	r1, r9
 8007f38:	008b      	lsls	r3, r1, #2
 8007f3a:	4641      	mov	r1, r8
 8007f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f40:	4641      	mov	r1, r8
 8007f42:	008a      	lsls	r2, r1, #2
 8007f44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f48:	f7f8 fe40 	bl	8000bcc <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <UART_SetConfig+0x4e4>)
 8007f52:	fba3 1302 	umull	r1, r3, r3, r2
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	2164      	movs	r1, #100	; 0x64
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	3332      	adds	r3, #50	; 0x32
 8007f64:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <UART_SetConfig+0x4e4>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	f003 020f 	and.w	r2, r3, #15
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4422      	add	r2, r4
 8007f78:	609a      	str	r2, [r3, #8]
}
 8007f7a:	bf00      	nop
 8007f7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f80:	46bd      	mov	sp, r7
 8007f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f86:	bf00      	nop
 8007f88:	51eb851f 	.word	0x51eb851f

08007f8c <__errno>:
 8007f8c:	4b01      	ldr	r3, [pc, #4]	; (8007f94 <__errno+0x8>)
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	2000002c 	.word	0x2000002c

08007f98 <__libc_init_array>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	4d0d      	ldr	r5, [pc, #52]	; (8007fd0 <__libc_init_array+0x38>)
 8007f9c:	4c0d      	ldr	r4, [pc, #52]	; (8007fd4 <__libc_init_array+0x3c>)
 8007f9e:	1b64      	subs	r4, r4, r5
 8007fa0:	10a4      	asrs	r4, r4, #2
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	42a6      	cmp	r6, r4
 8007fa6:	d109      	bne.n	8007fbc <__libc_init_array+0x24>
 8007fa8:	4d0b      	ldr	r5, [pc, #44]	; (8007fd8 <__libc_init_array+0x40>)
 8007faa:	4c0c      	ldr	r4, [pc, #48]	; (8007fdc <__libc_init_array+0x44>)
 8007fac:	f000 ff06 	bl	8008dbc <_init>
 8007fb0:	1b64      	subs	r4, r4, r5
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	2600      	movs	r6, #0
 8007fb6:	42a6      	cmp	r6, r4
 8007fb8:	d105      	bne.n	8007fc6 <__libc_init_array+0x2e>
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc0:	4798      	blx	r3
 8007fc2:	3601      	adds	r6, #1
 8007fc4:	e7ee      	b.n	8007fa4 <__libc_init_array+0xc>
 8007fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fca:	4798      	blx	r3
 8007fcc:	3601      	adds	r6, #1
 8007fce:	e7f2      	b.n	8007fb6 <__libc_init_array+0x1e>
 8007fd0:	08008ec0 	.word	0x08008ec0
 8007fd4:	08008ec0 	.word	0x08008ec0
 8007fd8:	08008ec0 	.word	0x08008ec0
 8007fdc:	08008ec4 	.word	0x08008ec4

08007fe0 <memset>:
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d100      	bne.n	8007fea <memset+0xa>
 8007fe8:	4770      	bx	lr
 8007fea:	f803 1b01 	strb.w	r1, [r3], #1
 8007fee:	e7f9      	b.n	8007fe4 <memset+0x4>

08007ff0 <siprintf>:
 8007ff0:	b40e      	push	{r1, r2, r3}
 8007ff2:	b500      	push	{lr}
 8007ff4:	b09c      	sub	sp, #112	; 0x70
 8007ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ff8:	9002      	str	r0, [sp, #8]
 8007ffa:	9006      	str	r0, [sp, #24]
 8007ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008000:	4809      	ldr	r0, [pc, #36]	; (8008028 <siprintf+0x38>)
 8008002:	9107      	str	r1, [sp, #28]
 8008004:	9104      	str	r1, [sp, #16]
 8008006:	4909      	ldr	r1, [pc, #36]	; (800802c <siprintf+0x3c>)
 8008008:	f853 2b04 	ldr.w	r2, [r3], #4
 800800c:	9105      	str	r1, [sp, #20]
 800800e:	6800      	ldr	r0, [r0, #0]
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	a902      	add	r1, sp, #8
 8008014:	f000 f868 	bl	80080e8 <_svfiprintf_r>
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	2200      	movs	r2, #0
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	b01c      	add	sp, #112	; 0x70
 8008020:	f85d eb04 	ldr.w	lr, [sp], #4
 8008024:	b003      	add	sp, #12
 8008026:	4770      	bx	lr
 8008028:	2000002c 	.word	0x2000002c
 800802c:	ffff0208 	.word	0xffff0208

08008030 <__ssputs_r>:
 8008030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008034:	688e      	ldr	r6, [r1, #8]
 8008036:	429e      	cmp	r6, r3
 8008038:	4682      	mov	sl, r0
 800803a:	460c      	mov	r4, r1
 800803c:	4690      	mov	r8, r2
 800803e:	461f      	mov	r7, r3
 8008040:	d838      	bhi.n	80080b4 <__ssputs_r+0x84>
 8008042:	898a      	ldrh	r2, [r1, #12]
 8008044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008048:	d032      	beq.n	80080b0 <__ssputs_r+0x80>
 800804a:	6825      	ldr	r5, [r4, #0]
 800804c:	6909      	ldr	r1, [r1, #16]
 800804e:	eba5 0901 	sub.w	r9, r5, r1
 8008052:	6965      	ldr	r5, [r4, #20]
 8008054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800805c:	3301      	adds	r3, #1
 800805e:	444b      	add	r3, r9
 8008060:	106d      	asrs	r5, r5, #1
 8008062:	429d      	cmp	r5, r3
 8008064:	bf38      	it	cc
 8008066:	461d      	movcc	r5, r3
 8008068:	0553      	lsls	r3, r2, #21
 800806a:	d531      	bpl.n	80080d0 <__ssputs_r+0xa0>
 800806c:	4629      	mov	r1, r5
 800806e:	f000 fb63 	bl	8008738 <_malloc_r>
 8008072:	4606      	mov	r6, r0
 8008074:	b950      	cbnz	r0, 800808c <__ssputs_r+0x5c>
 8008076:	230c      	movs	r3, #12
 8008078:	f8ca 3000 	str.w	r3, [sl]
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808c:	6921      	ldr	r1, [r4, #16]
 800808e:	464a      	mov	r2, r9
 8008090:	f000 fabe 	bl	8008610 <memcpy>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800809a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	6126      	str	r6, [r4, #16]
 80080a2:	6165      	str	r5, [r4, #20]
 80080a4:	444e      	add	r6, r9
 80080a6:	eba5 0509 	sub.w	r5, r5, r9
 80080aa:	6026      	str	r6, [r4, #0]
 80080ac:	60a5      	str	r5, [r4, #8]
 80080ae:	463e      	mov	r6, r7
 80080b0:	42be      	cmp	r6, r7
 80080b2:	d900      	bls.n	80080b6 <__ssputs_r+0x86>
 80080b4:	463e      	mov	r6, r7
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	4632      	mov	r2, r6
 80080ba:	4641      	mov	r1, r8
 80080bc:	f000 fab6 	bl	800862c <memmove>
 80080c0:	68a3      	ldr	r3, [r4, #8]
 80080c2:	1b9b      	subs	r3, r3, r6
 80080c4:	60a3      	str	r3, [r4, #8]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	4433      	add	r3, r6
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	2000      	movs	r0, #0
 80080ce:	e7db      	b.n	8008088 <__ssputs_r+0x58>
 80080d0:	462a      	mov	r2, r5
 80080d2:	f000 fba5 	bl	8008820 <_realloc_r>
 80080d6:	4606      	mov	r6, r0
 80080d8:	2800      	cmp	r0, #0
 80080da:	d1e1      	bne.n	80080a0 <__ssputs_r+0x70>
 80080dc:	6921      	ldr	r1, [r4, #16]
 80080de:	4650      	mov	r0, sl
 80080e0:	f000 fabe 	bl	8008660 <_free_r>
 80080e4:	e7c7      	b.n	8008076 <__ssputs_r+0x46>
	...

080080e8 <_svfiprintf_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	4698      	mov	r8, r3
 80080ee:	898b      	ldrh	r3, [r1, #12]
 80080f0:	061b      	lsls	r3, r3, #24
 80080f2:	b09d      	sub	sp, #116	; 0x74
 80080f4:	4607      	mov	r7, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	d50e      	bpl.n	800811a <_svfiprintf_r+0x32>
 80080fc:	690b      	ldr	r3, [r1, #16]
 80080fe:	b963      	cbnz	r3, 800811a <_svfiprintf_r+0x32>
 8008100:	2140      	movs	r1, #64	; 0x40
 8008102:	f000 fb19 	bl	8008738 <_malloc_r>
 8008106:	6028      	str	r0, [r5, #0]
 8008108:	6128      	str	r0, [r5, #16]
 800810a:	b920      	cbnz	r0, 8008116 <_svfiprintf_r+0x2e>
 800810c:	230c      	movs	r3, #12
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008114:	e0d1      	b.n	80082ba <_svfiprintf_r+0x1d2>
 8008116:	2340      	movs	r3, #64	; 0x40
 8008118:	616b      	str	r3, [r5, #20]
 800811a:	2300      	movs	r3, #0
 800811c:	9309      	str	r3, [sp, #36]	; 0x24
 800811e:	2320      	movs	r3, #32
 8008120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008124:	f8cd 800c 	str.w	r8, [sp, #12]
 8008128:	2330      	movs	r3, #48	; 0x30
 800812a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082d4 <_svfiprintf_r+0x1ec>
 800812e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008132:	f04f 0901 	mov.w	r9, #1
 8008136:	4623      	mov	r3, r4
 8008138:	469a      	mov	sl, r3
 800813a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800813e:	b10a      	cbz	r2, 8008144 <_svfiprintf_r+0x5c>
 8008140:	2a25      	cmp	r2, #37	; 0x25
 8008142:	d1f9      	bne.n	8008138 <_svfiprintf_r+0x50>
 8008144:	ebba 0b04 	subs.w	fp, sl, r4
 8008148:	d00b      	beq.n	8008162 <_svfiprintf_r+0x7a>
 800814a:	465b      	mov	r3, fp
 800814c:	4622      	mov	r2, r4
 800814e:	4629      	mov	r1, r5
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ff6d 	bl	8008030 <__ssputs_r>
 8008156:	3001      	adds	r0, #1
 8008158:	f000 80aa 	beq.w	80082b0 <_svfiprintf_r+0x1c8>
 800815c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800815e:	445a      	add	r2, fp
 8008160:	9209      	str	r2, [sp, #36]	; 0x24
 8008162:	f89a 3000 	ldrb.w	r3, [sl]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 80a2 	beq.w	80082b0 <_svfiprintf_r+0x1c8>
 800816c:	2300      	movs	r3, #0
 800816e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008176:	f10a 0a01 	add.w	sl, sl, #1
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	9307      	str	r3, [sp, #28]
 800817e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008182:	931a      	str	r3, [sp, #104]	; 0x68
 8008184:	4654      	mov	r4, sl
 8008186:	2205      	movs	r2, #5
 8008188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818c:	4851      	ldr	r0, [pc, #324]	; (80082d4 <_svfiprintf_r+0x1ec>)
 800818e:	f7f8 f827 	bl	80001e0 <memchr>
 8008192:	9a04      	ldr	r2, [sp, #16]
 8008194:	b9d8      	cbnz	r0, 80081ce <_svfiprintf_r+0xe6>
 8008196:	06d0      	lsls	r0, r2, #27
 8008198:	bf44      	itt	mi
 800819a:	2320      	movmi	r3, #32
 800819c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a0:	0711      	lsls	r1, r2, #28
 80081a2:	bf44      	itt	mi
 80081a4:	232b      	movmi	r3, #43	; 0x2b
 80081a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081aa:	f89a 3000 	ldrb.w	r3, [sl]
 80081ae:	2b2a      	cmp	r3, #42	; 0x2a
 80081b0:	d015      	beq.n	80081de <_svfiprintf_r+0xf6>
 80081b2:	9a07      	ldr	r2, [sp, #28]
 80081b4:	4654      	mov	r4, sl
 80081b6:	2000      	movs	r0, #0
 80081b8:	f04f 0c0a 	mov.w	ip, #10
 80081bc:	4621      	mov	r1, r4
 80081be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c2:	3b30      	subs	r3, #48	; 0x30
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	d94e      	bls.n	8008266 <_svfiprintf_r+0x17e>
 80081c8:	b1b0      	cbz	r0, 80081f8 <_svfiprintf_r+0x110>
 80081ca:	9207      	str	r2, [sp, #28]
 80081cc:	e014      	b.n	80081f8 <_svfiprintf_r+0x110>
 80081ce:	eba0 0308 	sub.w	r3, r0, r8
 80081d2:	fa09 f303 	lsl.w	r3, r9, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	46a2      	mov	sl, r4
 80081dc:	e7d2      	b.n	8008184 <_svfiprintf_r+0x9c>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	1d19      	adds	r1, r3, #4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	9103      	str	r1, [sp, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bfbb      	ittet	lt
 80081ea:	425b      	neglt	r3, r3
 80081ec:	f042 0202 	orrlt.w	r2, r2, #2
 80081f0:	9307      	strge	r3, [sp, #28]
 80081f2:	9307      	strlt	r3, [sp, #28]
 80081f4:	bfb8      	it	lt
 80081f6:	9204      	strlt	r2, [sp, #16]
 80081f8:	7823      	ldrb	r3, [r4, #0]
 80081fa:	2b2e      	cmp	r3, #46	; 0x2e
 80081fc:	d10c      	bne.n	8008218 <_svfiprintf_r+0x130>
 80081fe:	7863      	ldrb	r3, [r4, #1]
 8008200:	2b2a      	cmp	r3, #42	; 0x2a
 8008202:	d135      	bne.n	8008270 <_svfiprintf_r+0x188>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	1d1a      	adds	r2, r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	9203      	str	r2, [sp, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfb8      	it	lt
 8008210:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008214:	3402      	adds	r4, #2
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082e4 <_svfiprintf_r+0x1fc>
 800821c:	7821      	ldrb	r1, [r4, #0]
 800821e:	2203      	movs	r2, #3
 8008220:	4650      	mov	r0, sl
 8008222:	f7f7 ffdd 	bl	80001e0 <memchr>
 8008226:	b140      	cbz	r0, 800823a <_svfiprintf_r+0x152>
 8008228:	2340      	movs	r3, #64	; 0x40
 800822a:	eba0 000a 	sub.w	r0, r0, sl
 800822e:	fa03 f000 	lsl.w	r0, r3, r0
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	4303      	orrs	r3, r0
 8008236:	3401      	adds	r4, #1
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800823e:	4826      	ldr	r0, [pc, #152]	; (80082d8 <_svfiprintf_r+0x1f0>)
 8008240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008244:	2206      	movs	r2, #6
 8008246:	f7f7 ffcb 	bl	80001e0 <memchr>
 800824a:	2800      	cmp	r0, #0
 800824c:	d038      	beq.n	80082c0 <_svfiprintf_r+0x1d8>
 800824e:	4b23      	ldr	r3, [pc, #140]	; (80082dc <_svfiprintf_r+0x1f4>)
 8008250:	bb1b      	cbnz	r3, 800829a <_svfiprintf_r+0x1b2>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	3307      	adds	r3, #7
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	3308      	adds	r3, #8
 800825c:	9303      	str	r3, [sp, #12]
 800825e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008260:	4433      	add	r3, r6
 8008262:	9309      	str	r3, [sp, #36]	; 0x24
 8008264:	e767      	b.n	8008136 <_svfiprintf_r+0x4e>
 8008266:	fb0c 3202 	mla	r2, ip, r2, r3
 800826a:	460c      	mov	r4, r1
 800826c:	2001      	movs	r0, #1
 800826e:	e7a5      	b.n	80081bc <_svfiprintf_r+0xd4>
 8008270:	2300      	movs	r3, #0
 8008272:	3401      	adds	r4, #1
 8008274:	9305      	str	r3, [sp, #20]
 8008276:	4619      	mov	r1, r3
 8008278:	f04f 0c0a 	mov.w	ip, #10
 800827c:	4620      	mov	r0, r4
 800827e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008282:	3a30      	subs	r2, #48	; 0x30
 8008284:	2a09      	cmp	r2, #9
 8008286:	d903      	bls.n	8008290 <_svfiprintf_r+0x1a8>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0c5      	beq.n	8008218 <_svfiprintf_r+0x130>
 800828c:	9105      	str	r1, [sp, #20]
 800828e:	e7c3      	b.n	8008218 <_svfiprintf_r+0x130>
 8008290:	fb0c 2101 	mla	r1, ip, r1, r2
 8008294:	4604      	mov	r4, r0
 8008296:	2301      	movs	r3, #1
 8008298:	e7f0      	b.n	800827c <_svfiprintf_r+0x194>
 800829a:	ab03      	add	r3, sp, #12
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	462a      	mov	r2, r5
 80082a0:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <_svfiprintf_r+0x1f8>)
 80082a2:	a904      	add	r1, sp, #16
 80082a4:	4638      	mov	r0, r7
 80082a6:	f3af 8000 	nop.w
 80082aa:	1c42      	adds	r2, r0, #1
 80082ac:	4606      	mov	r6, r0
 80082ae:	d1d6      	bne.n	800825e <_svfiprintf_r+0x176>
 80082b0:	89ab      	ldrh	r3, [r5, #12]
 80082b2:	065b      	lsls	r3, r3, #25
 80082b4:	f53f af2c 	bmi.w	8008110 <_svfiprintf_r+0x28>
 80082b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ba:	b01d      	add	sp, #116	; 0x74
 80082bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <_svfiprintf_r+0x1f8>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	4638      	mov	r0, r7
 80082cc:	f000 f87a 	bl	80083c4 <_printf_i>
 80082d0:	e7eb      	b.n	80082aa <_svfiprintf_r+0x1c2>
 80082d2:	bf00      	nop
 80082d4:	08008e10 	.word	0x08008e10
 80082d8:	08008e1a 	.word	0x08008e1a
 80082dc:	00000000 	.word	0x00000000
 80082e0:	08008031 	.word	0x08008031
 80082e4:	08008e16 	.word	0x08008e16

080082e8 <_printf_common>:
 80082e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ec:	4616      	mov	r6, r2
 80082ee:	4699      	mov	r9, r3
 80082f0:	688a      	ldr	r2, [r1, #8]
 80082f2:	690b      	ldr	r3, [r1, #16]
 80082f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082f8:	4293      	cmp	r3, r2
 80082fa:	bfb8      	it	lt
 80082fc:	4613      	movlt	r3, r2
 80082fe:	6033      	str	r3, [r6, #0]
 8008300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008304:	4607      	mov	r7, r0
 8008306:	460c      	mov	r4, r1
 8008308:	b10a      	cbz	r2, 800830e <_printf_common+0x26>
 800830a:	3301      	adds	r3, #1
 800830c:	6033      	str	r3, [r6, #0]
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	0699      	lsls	r1, r3, #26
 8008312:	bf42      	ittt	mi
 8008314:	6833      	ldrmi	r3, [r6, #0]
 8008316:	3302      	addmi	r3, #2
 8008318:	6033      	strmi	r3, [r6, #0]
 800831a:	6825      	ldr	r5, [r4, #0]
 800831c:	f015 0506 	ands.w	r5, r5, #6
 8008320:	d106      	bne.n	8008330 <_printf_common+0x48>
 8008322:	f104 0a19 	add.w	sl, r4, #25
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	6832      	ldr	r2, [r6, #0]
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	42ab      	cmp	r3, r5
 800832e:	dc26      	bgt.n	800837e <_printf_common+0x96>
 8008330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008334:	1e13      	subs	r3, r2, #0
 8008336:	6822      	ldr	r2, [r4, #0]
 8008338:	bf18      	it	ne
 800833a:	2301      	movne	r3, #1
 800833c:	0692      	lsls	r2, r2, #26
 800833e:	d42b      	bmi.n	8008398 <_printf_common+0xb0>
 8008340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008344:	4649      	mov	r1, r9
 8008346:	4638      	mov	r0, r7
 8008348:	47c0      	blx	r8
 800834a:	3001      	adds	r0, #1
 800834c:	d01e      	beq.n	800838c <_printf_common+0xa4>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	68e5      	ldr	r5, [r4, #12]
 8008352:	6832      	ldr	r2, [r6, #0]
 8008354:	f003 0306 	and.w	r3, r3, #6
 8008358:	2b04      	cmp	r3, #4
 800835a:	bf08      	it	eq
 800835c:	1aad      	subeq	r5, r5, r2
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	6922      	ldr	r2, [r4, #16]
 8008362:	bf0c      	ite	eq
 8008364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008368:	2500      	movne	r5, #0
 800836a:	4293      	cmp	r3, r2
 800836c:	bfc4      	itt	gt
 800836e:	1a9b      	subgt	r3, r3, r2
 8008370:	18ed      	addgt	r5, r5, r3
 8008372:	2600      	movs	r6, #0
 8008374:	341a      	adds	r4, #26
 8008376:	42b5      	cmp	r5, r6
 8008378:	d11a      	bne.n	80083b0 <_printf_common+0xc8>
 800837a:	2000      	movs	r0, #0
 800837c:	e008      	b.n	8008390 <_printf_common+0xa8>
 800837e:	2301      	movs	r3, #1
 8008380:	4652      	mov	r2, sl
 8008382:	4649      	mov	r1, r9
 8008384:	4638      	mov	r0, r7
 8008386:	47c0      	blx	r8
 8008388:	3001      	adds	r0, #1
 800838a:	d103      	bne.n	8008394 <_printf_common+0xac>
 800838c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008394:	3501      	adds	r5, #1
 8008396:	e7c6      	b.n	8008326 <_printf_common+0x3e>
 8008398:	18e1      	adds	r1, r4, r3
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	2030      	movs	r0, #48	; 0x30
 800839e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083a2:	4422      	add	r2, r4
 80083a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083ac:	3302      	adds	r3, #2
 80083ae:	e7c7      	b.n	8008340 <_printf_common+0x58>
 80083b0:	2301      	movs	r3, #1
 80083b2:	4622      	mov	r2, r4
 80083b4:	4649      	mov	r1, r9
 80083b6:	4638      	mov	r0, r7
 80083b8:	47c0      	blx	r8
 80083ba:	3001      	adds	r0, #1
 80083bc:	d0e6      	beq.n	800838c <_printf_common+0xa4>
 80083be:	3601      	adds	r6, #1
 80083c0:	e7d9      	b.n	8008376 <_printf_common+0x8e>
	...

080083c4 <_printf_i>:
 80083c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083c8:	7e0f      	ldrb	r7, [r1, #24]
 80083ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083cc:	2f78      	cmp	r7, #120	; 0x78
 80083ce:	4691      	mov	r9, r2
 80083d0:	4680      	mov	r8, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	469a      	mov	sl, r3
 80083d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083da:	d807      	bhi.n	80083ec <_printf_i+0x28>
 80083dc:	2f62      	cmp	r7, #98	; 0x62
 80083de:	d80a      	bhi.n	80083f6 <_printf_i+0x32>
 80083e0:	2f00      	cmp	r7, #0
 80083e2:	f000 80d8 	beq.w	8008596 <_printf_i+0x1d2>
 80083e6:	2f58      	cmp	r7, #88	; 0x58
 80083e8:	f000 80a3 	beq.w	8008532 <_printf_i+0x16e>
 80083ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083f4:	e03a      	b.n	800846c <_printf_i+0xa8>
 80083f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083fa:	2b15      	cmp	r3, #21
 80083fc:	d8f6      	bhi.n	80083ec <_printf_i+0x28>
 80083fe:	a101      	add	r1, pc, #4	; (adr r1, 8008404 <_printf_i+0x40>)
 8008400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008404:	0800845d 	.word	0x0800845d
 8008408:	08008471 	.word	0x08008471
 800840c:	080083ed 	.word	0x080083ed
 8008410:	080083ed 	.word	0x080083ed
 8008414:	080083ed 	.word	0x080083ed
 8008418:	080083ed 	.word	0x080083ed
 800841c:	08008471 	.word	0x08008471
 8008420:	080083ed 	.word	0x080083ed
 8008424:	080083ed 	.word	0x080083ed
 8008428:	080083ed 	.word	0x080083ed
 800842c:	080083ed 	.word	0x080083ed
 8008430:	0800857d 	.word	0x0800857d
 8008434:	080084a1 	.word	0x080084a1
 8008438:	0800855f 	.word	0x0800855f
 800843c:	080083ed 	.word	0x080083ed
 8008440:	080083ed 	.word	0x080083ed
 8008444:	0800859f 	.word	0x0800859f
 8008448:	080083ed 	.word	0x080083ed
 800844c:	080084a1 	.word	0x080084a1
 8008450:	080083ed 	.word	0x080083ed
 8008454:	080083ed 	.word	0x080083ed
 8008458:	08008567 	.word	0x08008567
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	1d1a      	adds	r2, r3, #4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	602a      	str	r2, [r5, #0]
 8008464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800846c:	2301      	movs	r3, #1
 800846e:	e0a3      	b.n	80085b8 <_printf_i+0x1f4>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	6829      	ldr	r1, [r5, #0]
 8008474:	0606      	lsls	r6, r0, #24
 8008476:	f101 0304 	add.w	r3, r1, #4
 800847a:	d50a      	bpl.n	8008492 <_printf_i+0xce>
 800847c:	680e      	ldr	r6, [r1, #0]
 800847e:	602b      	str	r3, [r5, #0]
 8008480:	2e00      	cmp	r6, #0
 8008482:	da03      	bge.n	800848c <_printf_i+0xc8>
 8008484:	232d      	movs	r3, #45	; 0x2d
 8008486:	4276      	negs	r6, r6
 8008488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848c:	485e      	ldr	r0, [pc, #376]	; (8008608 <_printf_i+0x244>)
 800848e:	230a      	movs	r3, #10
 8008490:	e019      	b.n	80084c6 <_printf_i+0x102>
 8008492:	680e      	ldr	r6, [r1, #0]
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800849a:	bf18      	it	ne
 800849c:	b236      	sxthne	r6, r6
 800849e:	e7ef      	b.n	8008480 <_printf_i+0xbc>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	6820      	ldr	r0, [r4, #0]
 80084a4:	1d19      	adds	r1, r3, #4
 80084a6:	6029      	str	r1, [r5, #0]
 80084a8:	0601      	lsls	r1, r0, #24
 80084aa:	d501      	bpl.n	80084b0 <_printf_i+0xec>
 80084ac:	681e      	ldr	r6, [r3, #0]
 80084ae:	e002      	b.n	80084b6 <_printf_i+0xf2>
 80084b0:	0646      	lsls	r6, r0, #25
 80084b2:	d5fb      	bpl.n	80084ac <_printf_i+0xe8>
 80084b4:	881e      	ldrh	r6, [r3, #0]
 80084b6:	4854      	ldr	r0, [pc, #336]	; (8008608 <_printf_i+0x244>)
 80084b8:	2f6f      	cmp	r7, #111	; 0x6f
 80084ba:	bf0c      	ite	eq
 80084bc:	2308      	moveq	r3, #8
 80084be:	230a      	movne	r3, #10
 80084c0:	2100      	movs	r1, #0
 80084c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084c6:	6865      	ldr	r5, [r4, #4]
 80084c8:	60a5      	str	r5, [r4, #8]
 80084ca:	2d00      	cmp	r5, #0
 80084cc:	bfa2      	ittt	ge
 80084ce:	6821      	ldrge	r1, [r4, #0]
 80084d0:	f021 0104 	bicge.w	r1, r1, #4
 80084d4:	6021      	strge	r1, [r4, #0]
 80084d6:	b90e      	cbnz	r6, 80084dc <_printf_i+0x118>
 80084d8:	2d00      	cmp	r5, #0
 80084da:	d04d      	beq.n	8008578 <_printf_i+0x1b4>
 80084dc:	4615      	mov	r5, r2
 80084de:	fbb6 f1f3 	udiv	r1, r6, r3
 80084e2:	fb03 6711 	mls	r7, r3, r1, r6
 80084e6:	5dc7      	ldrb	r7, [r0, r7]
 80084e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084ec:	4637      	mov	r7, r6
 80084ee:	42bb      	cmp	r3, r7
 80084f0:	460e      	mov	r6, r1
 80084f2:	d9f4      	bls.n	80084de <_printf_i+0x11a>
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d10b      	bne.n	8008510 <_printf_i+0x14c>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	07de      	lsls	r6, r3, #31
 80084fc:	d508      	bpl.n	8008510 <_printf_i+0x14c>
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	6861      	ldr	r1, [r4, #4]
 8008502:	4299      	cmp	r1, r3
 8008504:	bfde      	ittt	le
 8008506:	2330      	movle	r3, #48	; 0x30
 8008508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800850c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008510:	1b52      	subs	r2, r2, r5
 8008512:	6122      	str	r2, [r4, #16]
 8008514:	f8cd a000 	str.w	sl, [sp]
 8008518:	464b      	mov	r3, r9
 800851a:	aa03      	add	r2, sp, #12
 800851c:	4621      	mov	r1, r4
 800851e:	4640      	mov	r0, r8
 8008520:	f7ff fee2 	bl	80082e8 <_printf_common>
 8008524:	3001      	adds	r0, #1
 8008526:	d14c      	bne.n	80085c2 <_printf_i+0x1fe>
 8008528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800852c:	b004      	add	sp, #16
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	4835      	ldr	r0, [pc, #212]	; (8008608 <_printf_i+0x244>)
 8008534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008538:	6829      	ldr	r1, [r5, #0]
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008540:	6029      	str	r1, [r5, #0]
 8008542:	061d      	lsls	r5, r3, #24
 8008544:	d514      	bpl.n	8008570 <_printf_i+0x1ac>
 8008546:	07df      	lsls	r7, r3, #31
 8008548:	bf44      	itt	mi
 800854a:	f043 0320 	orrmi.w	r3, r3, #32
 800854e:	6023      	strmi	r3, [r4, #0]
 8008550:	b91e      	cbnz	r6, 800855a <_printf_i+0x196>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	f023 0320 	bic.w	r3, r3, #32
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	2310      	movs	r3, #16
 800855c:	e7b0      	b.n	80084c0 <_printf_i+0xfc>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	f043 0320 	orr.w	r3, r3, #32
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	2378      	movs	r3, #120	; 0x78
 8008568:	4828      	ldr	r0, [pc, #160]	; (800860c <_printf_i+0x248>)
 800856a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800856e:	e7e3      	b.n	8008538 <_printf_i+0x174>
 8008570:	0659      	lsls	r1, r3, #25
 8008572:	bf48      	it	mi
 8008574:	b2b6      	uxthmi	r6, r6
 8008576:	e7e6      	b.n	8008546 <_printf_i+0x182>
 8008578:	4615      	mov	r5, r2
 800857a:	e7bb      	b.n	80084f4 <_printf_i+0x130>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	6826      	ldr	r6, [r4, #0]
 8008580:	6961      	ldr	r1, [r4, #20]
 8008582:	1d18      	adds	r0, r3, #4
 8008584:	6028      	str	r0, [r5, #0]
 8008586:	0635      	lsls	r5, r6, #24
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	d501      	bpl.n	8008590 <_printf_i+0x1cc>
 800858c:	6019      	str	r1, [r3, #0]
 800858e:	e002      	b.n	8008596 <_printf_i+0x1d2>
 8008590:	0670      	lsls	r0, r6, #25
 8008592:	d5fb      	bpl.n	800858c <_printf_i+0x1c8>
 8008594:	8019      	strh	r1, [r3, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	4615      	mov	r5, r2
 800859c:	e7ba      	b.n	8008514 <_printf_i+0x150>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	1d1a      	adds	r2, r3, #4
 80085a2:	602a      	str	r2, [r5, #0]
 80085a4:	681d      	ldr	r5, [r3, #0]
 80085a6:	6862      	ldr	r2, [r4, #4]
 80085a8:	2100      	movs	r1, #0
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7f7 fe18 	bl	80001e0 <memchr>
 80085b0:	b108      	cbz	r0, 80085b6 <_printf_i+0x1f2>
 80085b2:	1b40      	subs	r0, r0, r5
 80085b4:	6060      	str	r0, [r4, #4]
 80085b6:	6863      	ldr	r3, [r4, #4]
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	2300      	movs	r3, #0
 80085bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c0:	e7a8      	b.n	8008514 <_printf_i+0x150>
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	462a      	mov	r2, r5
 80085c6:	4649      	mov	r1, r9
 80085c8:	4640      	mov	r0, r8
 80085ca:	47d0      	blx	sl
 80085cc:	3001      	adds	r0, #1
 80085ce:	d0ab      	beq.n	8008528 <_printf_i+0x164>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	079b      	lsls	r3, r3, #30
 80085d4:	d413      	bmi.n	80085fe <_printf_i+0x23a>
 80085d6:	68e0      	ldr	r0, [r4, #12]
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	4298      	cmp	r0, r3
 80085dc:	bfb8      	it	lt
 80085de:	4618      	movlt	r0, r3
 80085e0:	e7a4      	b.n	800852c <_printf_i+0x168>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4632      	mov	r2, r6
 80085e6:	4649      	mov	r1, r9
 80085e8:	4640      	mov	r0, r8
 80085ea:	47d0      	blx	sl
 80085ec:	3001      	adds	r0, #1
 80085ee:	d09b      	beq.n	8008528 <_printf_i+0x164>
 80085f0:	3501      	adds	r5, #1
 80085f2:	68e3      	ldr	r3, [r4, #12]
 80085f4:	9903      	ldr	r1, [sp, #12]
 80085f6:	1a5b      	subs	r3, r3, r1
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	dcf2      	bgt.n	80085e2 <_printf_i+0x21e>
 80085fc:	e7eb      	b.n	80085d6 <_printf_i+0x212>
 80085fe:	2500      	movs	r5, #0
 8008600:	f104 0619 	add.w	r6, r4, #25
 8008604:	e7f5      	b.n	80085f2 <_printf_i+0x22e>
 8008606:	bf00      	nop
 8008608:	08008e21 	.word	0x08008e21
 800860c:	08008e32 	.word	0x08008e32

08008610 <memcpy>:
 8008610:	440a      	add	r2, r1
 8008612:	4291      	cmp	r1, r2
 8008614:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008618:	d100      	bne.n	800861c <memcpy+0xc>
 800861a:	4770      	bx	lr
 800861c:	b510      	push	{r4, lr}
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008626:	4291      	cmp	r1, r2
 8008628:	d1f9      	bne.n	800861e <memcpy+0xe>
 800862a:	bd10      	pop	{r4, pc}

0800862c <memmove>:
 800862c:	4288      	cmp	r0, r1
 800862e:	b510      	push	{r4, lr}
 8008630:	eb01 0402 	add.w	r4, r1, r2
 8008634:	d902      	bls.n	800863c <memmove+0x10>
 8008636:	4284      	cmp	r4, r0
 8008638:	4623      	mov	r3, r4
 800863a:	d807      	bhi.n	800864c <memmove+0x20>
 800863c:	1e43      	subs	r3, r0, #1
 800863e:	42a1      	cmp	r1, r4
 8008640:	d008      	beq.n	8008654 <memmove+0x28>
 8008642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800864a:	e7f8      	b.n	800863e <memmove+0x12>
 800864c:	4402      	add	r2, r0
 800864e:	4601      	mov	r1, r0
 8008650:	428a      	cmp	r2, r1
 8008652:	d100      	bne.n	8008656 <memmove+0x2a>
 8008654:	bd10      	pop	{r4, pc}
 8008656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800865a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800865e:	e7f7      	b.n	8008650 <memmove+0x24>

08008660 <_free_r>:
 8008660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008662:	2900      	cmp	r1, #0
 8008664:	d044      	beq.n	80086f0 <_free_r+0x90>
 8008666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800866a:	9001      	str	r0, [sp, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f1a1 0404 	sub.w	r4, r1, #4
 8008672:	bfb8      	it	lt
 8008674:	18e4      	addlt	r4, r4, r3
 8008676:	f000 f913 	bl	80088a0 <__malloc_lock>
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <_free_r+0x94>)
 800867c:	9801      	ldr	r0, [sp, #4]
 800867e:	6813      	ldr	r3, [r2, #0]
 8008680:	b933      	cbnz	r3, 8008690 <_free_r+0x30>
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	6014      	str	r4, [r2, #0]
 8008686:	b003      	add	sp, #12
 8008688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800868c:	f000 b90e 	b.w	80088ac <__malloc_unlock>
 8008690:	42a3      	cmp	r3, r4
 8008692:	d908      	bls.n	80086a6 <_free_r+0x46>
 8008694:	6825      	ldr	r5, [r4, #0]
 8008696:	1961      	adds	r1, r4, r5
 8008698:	428b      	cmp	r3, r1
 800869a:	bf01      	itttt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	1949      	addeq	r1, r1, r5
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	e7ed      	b.n	8008682 <_free_r+0x22>
 80086a6:	461a      	mov	r2, r3
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b10b      	cbz	r3, 80086b0 <_free_r+0x50>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d9fa      	bls.n	80086a6 <_free_r+0x46>
 80086b0:	6811      	ldr	r1, [r2, #0]
 80086b2:	1855      	adds	r5, r2, r1
 80086b4:	42a5      	cmp	r5, r4
 80086b6:	d10b      	bne.n	80086d0 <_free_r+0x70>
 80086b8:	6824      	ldr	r4, [r4, #0]
 80086ba:	4421      	add	r1, r4
 80086bc:	1854      	adds	r4, r2, r1
 80086be:	42a3      	cmp	r3, r4
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	d1e0      	bne.n	8008686 <_free_r+0x26>
 80086c4:	681c      	ldr	r4, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	6053      	str	r3, [r2, #4]
 80086ca:	4421      	add	r1, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	e7da      	b.n	8008686 <_free_r+0x26>
 80086d0:	d902      	bls.n	80086d8 <_free_r+0x78>
 80086d2:	230c      	movs	r3, #12
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	e7d6      	b.n	8008686 <_free_r+0x26>
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	1961      	adds	r1, r4, r5
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf04      	itt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	bf04      	itt	eq
 80086e8:	1949      	addeq	r1, r1, r5
 80086ea:	6021      	streq	r1, [r4, #0]
 80086ec:	6054      	str	r4, [r2, #4]
 80086ee:	e7ca      	b.n	8008686 <_free_r+0x26>
 80086f0:	b003      	add	sp, #12
 80086f2:	bd30      	pop	{r4, r5, pc}
 80086f4:	200006a8 	.word	0x200006a8

080086f8 <sbrk_aligned>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	4e0e      	ldr	r6, [pc, #56]	; (8008734 <sbrk_aligned+0x3c>)
 80086fc:	460c      	mov	r4, r1
 80086fe:	6831      	ldr	r1, [r6, #0]
 8008700:	4605      	mov	r5, r0
 8008702:	b911      	cbnz	r1, 800870a <sbrk_aligned+0x12>
 8008704:	f000 f8bc 	bl	8008880 <_sbrk_r>
 8008708:	6030      	str	r0, [r6, #0]
 800870a:	4621      	mov	r1, r4
 800870c:	4628      	mov	r0, r5
 800870e:	f000 f8b7 	bl	8008880 <_sbrk_r>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	d00a      	beq.n	800872c <sbrk_aligned+0x34>
 8008716:	1cc4      	adds	r4, r0, #3
 8008718:	f024 0403 	bic.w	r4, r4, #3
 800871c:	42a0      	cmp	r0, r4
 800871e:	d007      	beq.n	8008730 <sbrk_aligned+0x38>
 8008720:	1a21      	subs	r1, r4, r0
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f8ac 	bl	8008880 <_sbrk_r>
 8008728:	3001      	adds	r0, #1
 800872a:	d101      	bne.n	8008730 <sbrk_aligned+0x38>
 800872c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008730:	4620      	mov	r0, r4
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	200006ac 	.word	0x200006ac

08008738 <_malloc_r>:
 8008738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	1ccd      	adds	r5, r1, #3
 800873e:	f025 0503 	bic.w	r5, r5, #3
 8008742:	3508      	adds	r5, #8
 8008744:	2d0c      	cmp	r5, #12
 8008746:	bf38      	it	cc
 8008748:	250c      	movcc	r5, #12
 800874a:	2d00      	cmp	r5, #0
 800874c:	4607      	mov	r7, r0
 800874e:	db01      	blt.n	8008754 <_malloc_r+0x1c>
 8008750:	42a9      	cmp	r1, r5
 8008752:	d905      	bls.n	8008760 <_malloc_r+0x28>
 8008754:	230c      	movs	r3, #12
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	2600      	movs	r6, #0
 800875a:	4630      	mov	r0, r6
 800875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008760:	4e2e      	ldr	r6, [pc, #184]	; (800881c <_malloc_r+0xe4>)
 8008762:	f000 f89d 	bl	80088a0 <__malloc_lock>
 8008766:	6833      	ldr	r3, [r6, #0]
 8008768:	461c      	mov	r4, r3
 800876a:	bb34      	cbnz	r4, 80087ba <_malloc_r+0x82>
 800876c:	4629      	mov	r1, r5
 800876e:	4638      	mov	r0, r7
 8008770:	f7ff ffc2 	bl	80086f8 <sbrk_aligned>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	4604      	mov	r4, r0
 8008778:	d14d      	bne.n	8008816 <_malloc_r+0xde>
 800877a:	6834      	ldr	r4, [r6, #0]
 800877c:	4626      	mov	r6, r4
 800877e:	2e00      	cmp	r6, #0
 8008780:	d140      	bne.n	8008804 <_malloc_r+0xcc>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	4631      	mov	r1, r6
 8008786:	4638      	mov	r0, r7
 8008788:	eb04 0803 	add.w	r8, r4, r3
 800878c:	f000 f878 	bl	8008880 <_sbrk_r>
 8008790:	4580      	cmp	r8, r0
 8008792:	d13a      	bne.n	800880a <_malloc_r+0xd2>
 8008794:	6821      	ldr	r1, [r4, #0]
 8008796:	3503      	adds	r5, #3
 8008798:	1a6d      	subs	r5, r5, r1
 800879a:	f025 0503 	bic.w	r5, r5, #3
 800879e:	3508      	adds	r5, #8
 80087a0:	2d0c      	cmp	r5, #12
 80087a2:	bf38      	it	cc
 80087a4:	250c      	movcc	r5, #12
 80087a6:	4629      	mov	r1, r5
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff ffa5 	bl	80086f8 <sbrk_aligned>
 80087ae:	3001      	adds	r0, #1
 80087b0:	d02b      	beq.n	800880a <_malloc_r+0xd2>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	442b      	add	r3, r5
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	e00e      	b.n	80087d8 <_malloc_r+0xa0>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	1b52      	subs	r2, r2, r5
 80087be:	d41e      	bmi.n	80087fe <_malloc_r+0xc6>
 80087c0:	2a0b      	cmp	r2, #11
 80087c2:	d916      	bls.n	80087f2 <_malloc_r+0xba>
 80087c4:	1961      	adds	r1, r4, r5
 80087c6:	42a3      	cmp	r3, r4
 80087c8:	6025      	str	r5, [r4, #0]
 80087ca:	bf18      	it	ne
 80087cc:	6059      	strne	r1, [r3, #4]
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	bf08      	it	eq
 80087d2:	6031      	streq	r1, [r6, #0]
 80087d4:	5162      	str	r2, [r4, r5]
 80087d6:	604b      	str	r3, [r1, #4]
 80087d8:	4638      	mov	r0, r7
 80087da:	f104 060b 	add.w	r6, r4, #11
 80087de:	f000 f865 	bl	80088ac <__malloc_unlock>
 80087e2:	f026 0607 	bic.w	r6, r6, #7
 80087e6:	1d23      	adds	r3, r4, #4
 80087e8:	1af2      	subs	r2, r6, r3
 80087ea:	d0b6      	beq.n	800875a <_malloc_r+0x22>
 80087ec:	1b9b      	subs	r3, r3, r6
 80087ee:	50a3      	str	r3, [r4, r2]
 80087f0:	e7b3      	b.n	800875a <_malloc_r+0x22>
 80087f2:	6862      	ldr	r2, [r4, #4]
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	bf0c      	ite	eq
 80087f8:	6032      	streq	r2, [r6, #0]
 80087fa:	605a      	strne	r2, [r3, #4]
 80087fc:	e7ec      	b.n	80087d8 <_malloc_r+0xa0>
 80087fe:	4623      	mov	r3, r4
 8008800:	6864      	ldr	r4, [r4, #4]
 8008802:	e7b2      	b.n	800876a <_malloc_r+0x32>
 8008804:	4634      	mov	r4, r6
 8008806:	6876      	ldr	r6, [r6, #4]
 8008808:	e7b9      	b.n	800877e <_malloc_r+0x46>
 800880a:	230c      	movs	r3, #12
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	4638      	mov	r0, r7
 8008810:	f000 f84c 	bl	80088ac <__malloc_unlock>
 8008814:	e7a1      	b.n	800875a <_malloc_r+0x22>
 8008816:	6025      	str	r5, [r4, #0]
 8008818:	e7de      	b.n	80087d8 <_malloc_r+0xa0>
 800881a:	bf00      	nop
 800881c:	200006a8 	.word	0x200006a8

08008820 <_realloc_r>:
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	4680      	mov	r8, r0
 8008826:	4614      	mov	r4, r2
 8008828:	460e      	mov	r6, r1
 800882a:	b921      	cbnz	r1, 8008836 <_realloc_r+0x16>
 800882c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4611      	mov	r1, r2
 8008832:	f7ff bf81 	b.w	8008738 <_malloc_r>
 8008836:	b92a      	cbnz	r2, 8008844 <_realloc_r+0x24>
 8008838:	f7ff ff12 	bl	8008660 <_free_r>
 800883c:	4625      	mov	r5, r4
 800883e:	4628      	mov	r0, r5
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	f000 f838 	bl	80088b8 <_malloc_usable_size_r>
 8008848:	4284      	cmp	r4, r0
 800884a:	4607      	mov	r7, r0
 800884c:	d802      	bhi.n	8008854 <_realloc_r+0x34>
 800884e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008852:	d812      	bhi.n	800887a <_realloc_r+0x5a>
 8008854:	4621      	mov	r1, r4
 8008856:	4640      	mov	r0, r8
 8008858:	f7ff ff6e 	bl	8008738 <_malloc_r>
 800885c:	4605      	mov	r5, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d0ed      	beq.n	800883e <_realloc_r+0x1e>
 8008862:	42bc      	cmp	r4, r7
 8008864:	4622      	mov	r2, r4
 8008866:	4631      	mov	r1, r6
 8008868:	bf28      	it	cs
 800886a:	463a      	movcs	r2, r7
 800886c:	f7ff fed0 	bl	8008610 <memcpy>
 8008870:	4631      	mov	r1, r6
 8008872:	4640      	mov	r0, r8
 8008874:	f7ff fef4 	bl	8008660 <_free_r>
 8008878:	e7e1      	b.n	800883e <_realloc_r+0x1e>
 800887a:	4635      	mov	r5, r6
 800887c:	e7df      	b.n	800883e <_realloc_r+0x1e>
	...

08008880 <_sbrk_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4d06      	ldr	r5, [pc, #24]	; (800889c <_sbrk_r+0x1c>)
 8008884:	2300      	movs	r3, #0
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	602b      	str	r3, [r5, #0]
 800888c:	f7fa feb0 	bl	80035f0 <_sbrk>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_sbrk_r+0x1a>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_sbrk_r+0x1a>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	200006b0 	.word	0x200006b0

080088a0 <__malloc_lock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__malloc_lock+0x8>)
 80088a2:	f000 b811 	b.w	80088c8 <__retarget_lock_acquire_recursive>
 80088a6:	bf00      	nop
 80088a8:	200006b4 	.word	0x200006b4

080088ac <__malloc_unlock>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__malloc_unlock+0x8>)
 80088ae:	f000 b80c 	b.w	80088ca <__retarget_lock_release_recursive>
 80088b2:	bf00      	nop
 80088b4:	200006b4 	.word	0x200006b4

080088b8 <_malloc_usable_size_r>:
 80088b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088bc:	1f18      	subs	r0, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfbc      	itt	lt
 80088c2:	580b      	ldrlt	r3, [r1, r0]
 80088c4:	18c0      	addlt	r0, r0, r3
 80088c6:	4770      	bx	lr

080088c8 <__retarget_lock_acquire_recursive>:
 80088c8:	4770      	bx	lr

080088ca <__retarget_lock_release_recursive>:
 80088ca:	4770      	bx	lr

080088cc <atan2>:
 80088cc:	f000 b800 	b.w	80088d0 <__ieee754_atan2>

080088d0 <__ieee754_atan2>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	ec57 6b11 	vmov	r6, r7, d1
 80088d8:	4273      	negs	r3, r6
 80088da:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008a60 <__ieee754_atan2+0x190>
 80088de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80088e2:	4333      	orrs	r3, r6
 80088e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80088e8:	4573      	cmp	r3, lr
 80088ea:	ec51 0b10 	vmov	r0, r1, d0
 80088ee:	ee11 8a10 	vmov	r8, s2
 80088f2:	d80a      	bhi.n	800890a <__ieee754_atan2+0x3a>
 80088f4:	4244      	negs	r4, r0
 80088f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088fa:	4304      	orrs	r4, r0
 80088fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008900:	4574      	cmp	r4, lr
 8008902:	ee10 9a10 	vmov	r9, s0
 8008906:	468c      	mov	ip, r1
 8008908:	d907      	bls.n	800891a <__ieee754_atan2+0x4a>
 800890a:	4632      	mov	r2, r6
 800890c:	463b      	mov	r3, r7
 800890e:	f7f7 fcbd 	bl	800028c <__adddf3>
 8008912:	ec41 0b10 	vmov	d0, r0, r1
 8008916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800891a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800891e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008922:	4334      	orrs	r4, r6
 8008924:	d103      	bne.n	800892e <__ieee754_atan2+0x5e>
 8008926:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800892a:	f000 b89d 	b.w	8008a68 <atan>
 800892e:	17bc      	asrs	r4, r7, #30
 8008930:	f004 0402 	and.w	r4, r4, #2
 8008934:	ea53 0909 	orrs.w	r9, r3, r9
 8008938:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800893c:	d107      	bne.n	800894e <__ieee754_atan2+0x7e>
 800893e:	2c02      	cmp	r4, #2
 8008940:	d060      	beq.n	8008a04 <__ieee754_atan2+0x134>
 8008942:	2c03      	cmp	r4, #3
 8008944:	d1e5      	bne.n	8008912 <__ieee754_atan2+0x42>
 8008946:	a142      	add	r1, pc, #264	; (adr r1, 8008a50 <__ieee754_atan2+0x180>)
 8008948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800894c:	e7e1      	b.n	8008912 <__ieee754_atan2+0x42>
 800894e:	ea52 0808 	orrs.w	r8, r2, r8
 8008952:	d106      	bne.n	8008962 <__ieee754_atan2+0x92>
 8008954:	f1bc 0f00 	cmp.w	ip, #0
 8008958:	da5f      	bge.n	8008a1a <__ieee754_atan2+0x14a>
 800895a:	a13f      	add	r1, pc, #252	; (adr r1, 8008a58 <__ieee754_atan2+0x188>)
 800895c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008960:	e7d7      	b.n	8008912 <__ieee754_atan2+0x42>
 8008962:	4572      	cmp	r2, lr
 8008964:	d10f      	bne.n	8008986 <__ieee754_atan2+0xb6>
 8008966:	4293      	cmp	r3, r2
 8008968:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800896c:	d107      	bne.n	800897e <__ieee754_atan2+0xae>
 800896e:	2c02      	cmp	r4, #2
 8008970:	d84c      	bhi.n	8008a0c <__ieee754_atan2+0x13c>
 8008972:	4b35      	ldr	r3, [pc, #212]	; (8008a48 <__ieee754_atan2+0x178>)
 8008974:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008978:	e9d4 0100 	ldrd	r0, r1, [r4]
 800897c:	e7c9      	b.n	8008912 <__ieee754_atan2+0x42>
 800897e:	2c02      	cmp	r4, #2
 8008980:	d848      	bhi.n	8008a14 <__ieee754_atan2+0x144>
 8008982:	4b32      	ldr	r3, [pc, #200]	; (8008a4c <__ieee754_atan2+0x17c>)
 8008984:	e7f6      	b.n	8008974 <__ieee754_atan2+0xa4>
 8008986:	4573      	cmp	r3, lr
 8008988:	d0e4      	beq.n	8008954 <__ieee754_atan2+0x84>
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008990:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008994:	da1e      	bge.n	80089d4 <__ieee754_atan2+0x104>
 8008996:	2f00      	cmp	r7, #0
 8008998:	da01      	bge.n	800899e <__ieee754_atan2+0xce>
 800899a:	323c      	adds	r2, #60	; 0x3c
 800899c:	db1e      	blt.n	80089dc <__ieee754_atan2+0x10c>
 800899e:	4632      	mov	r2, r6
 80089a0:	463b      	mov	r3, r7
 80089a2:	f7f7 ff53 	bl	800084c <__aeabi_ddiv>
 80089a6:	ec41 0b10 	vmov	d0, r0, r1
 80089aa:	f000 f9fd 	bl	8008da8 <fabs>
 80089ae:	f000 f85b 	bl	8008a68 <atan>
 80089b2:	ec51 0b10 	vmov	r0, r1, d0
 80089b6:	2c01      	cmp	r4, #1
 80089b8:	d013      	beq.n	80089e2 <__ieee754_atan2+0x112>
 80089ba:	2c02      	cmp	r4, #2
 80089bc:	d015      	beq.n	80089ea <__ieee754_atan2+0x11a>
 80089be:	2c00      	cmp	r4, #0
 80089c0:	d0a7      	beq.n	8008912 <__ieee754_atan2+0x42>
 80089c2:	a319      	add	r3, pc, #100	; (adr r3, 8008a28 <__ieee754_atan2+0x158>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fc5e 	bl	8000288 <__aeabi_dsub>
 80089cc:	a318      	add	r3, pc, #96	; (adr r3, 8008a30 <__ieee754_atan2+0x160>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	e014      	b.n	80089fe <__ieee754_atan2+0x12e>
 80089d4:	a118      	add	r1, pc, #96	; (adr r1, 8008a38 <__ieee754_atan2+0x168>)
 80089d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089da:	e7ec      	b.n	80089b6 <__ieee754_atan2+0xe6>
 80089dc:	2000      	movs	r0, #0
 80089de:	2100      	movs	r1, #0
 80089e0:	e7e9      	b.n	80089b6 <__ieee754_atan2+0xe6>
 80089e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089e6:	4619      	mov	r1, r3
 80089e8:	e793      	b.n	8008912 <__ieee754_atan2+0x42>
 80089ea:	a30f      	add	r3, pc, #60	; (adr r3, 8008a28 <__ieee754_atan2+0x158>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f7f7 fc4a 	bl	8000288 <__aeabi_dsub>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	a10d      	add	r1, pc, #52	; (adr r1, 8008a30 <__ieee754_atan2+0x160>)
 80089fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089fe:	f7f7 fc43 	bl	8000288 <__aeabi_dsub>
 8008a02:	e786      	b.n	8008912 <__ieee754_atan2+0x42>
 8008a04:	a10a      	add	r1, pc, #40	; (adr r1, 8008a30 <__ieee754_atan2+0x160>)
 8008a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0a:	e782      	b.n	8008912 <__ieee754_atan2+0x42>
 8008a0c:	a10c      	add	r1, pc, #48	; (adr r1, 8008a40 <__ieee754_atan2+0x170>)
 8008a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a12:	e77e      	b.n	8008912 <__ieee754_atan2+0x42>
 8008a14:	2000      	movs	r0, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	e77b      	b.n	8008912 <__ieee754_atan2+0x42>
 8008a1a:	a107      	add	r1, pc, #28	; (adr r1, 8008a38 <__ieee754_atan2+0x168>)
 8008a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a20:	e777      	b.n	8008912 <__ieee754_atan2+0x42>
 8008a22:	bf00      	nop
 8008a24:	f3af 8000 	nop.w
 8008a28:	33145c07 	.word	0x33145c07
 8008a2c:	3ca1a626 	.word	0x3ca1a626
 8008a30:	54442d18 	.word	0x54442d18
 8008a34:	400921fb 	.word	0x400921fb
 8008a38:	54442d18 	.word	0x54442d18
 8008a3c:	3ff921fb 	.word	0x3ff921fb
 8008a40:	54442d18 	.word	0x54442d18
 8008a44:	3fe921fb 	.word	0x3fe921fb
 8008a48:	08008e48 	.word	0x08008e48
 8008a4c:	08008e60 	.word	0x08008e60
 8008a50:	54442d18 	.word	0x54442d18
 8008a54:	c00921fb 	.word	0xc00921fb
 8008a58:	54442d18 	.word	0x54442d18
 8008a5c:	bff921fb 	.word	0xbff921fb
 8008a60:	7ff00000 	.word	0x7ff00000
 8008a64:	00000000 	.word	0x00000000

08008a68 <atan>:
 8008a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	ec55 4b10 	vmov	r4, r5, d0
 8008a70:	4bc3      	ldr	r3, [pc, #780]	; (8008d80 <atan+0x318>)
 8008a72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a76:	429e      	cmp	r6, r3
 8008a78:	46ab      	mov	fp, r5
 8008a7a:	dd18      	ble.n	8008aae <atan+0x46>
 8008a7c:	4bc1      	ldr	r3, [pc, #772]	; (8008d84 <atan+0x31c>)
 8008a7e:	429e      	cmp	r6, r3
 8008a80:	dc01      	bgt.n	8008a86 <atan+0x1e>
 8008a82:	d109      	bne.n	8008a98 <atan+0x30>
 8008a84:	b144      	cbz	r4, 8008a98 <atan+0x30>
 8008a86:	4622      	mov	r2, r4
 8008a88:	462b      	mov	r3, r5
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f7f7 fbfd 	bl	800028c <__adddf3>
 8008a92:	4604      	mov	r4, r0
 8008a94:	460d      	mov	r5, r1
 8008a96:	e006      	b.n	8008aa6 <atan+0x3e>
 8008a98:	f1bb 0f00 	cmp.w	fp, #0
 8008a9c:	f300 8131 	bgt.w	8008d02 <atan+0x29a>
 8008aa0:	a59b      	add	r5, pc, #620	; (adr r5, 8008d10 <atan+0x2a8>)
 8008aa2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008aa6:	ec45 4b10 	vmov	d0, r4, r5
 8008aaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aae:	4bb6      	ldr	r3, [pc, #728]	; (8008d88 <atan+0x320>)
 8008ab0:	429e      	cmp	r6, r3
 8008ab2:	dc14      	bgt.n	8008ade <atan+0x76>
 8008ab4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008ab8:	429e      	cmp	r6, r3
 8008aba:	dc0d      	bgt.n	8008ad8 <atan+0x70>
 8008abc:	a396      	add	r3, pc, #600	; (adr r3, 8008d18 <atan+0x2b0>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	ee10 0a10 	vmov	r0, s0
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f7 fbe0 	bl	800028c <__adddf3>
 8008acc:	4baf      	ldr	r3, [pc, #700]	; (8008d8c <atan+0x324>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f7f8 f822 	bl	8000b18 <__aeabi_dcmpgt>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <atan+0x3e>
 8008ad8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008adc:	e02b      	b.n	8008b36 <atan+0xce>
 8008ade:	f000 f963 	bl	8008da8 <fabs>
 8008ae2:	4bab      	ldr	r3, [pc, #684]	; (8008d90 <atan+0x328>)
 8008ae4:	429e      	cmp	r6, r3
 8008ae6:	ec55 4b10 	vmov	r4, r5, d0
 8008aea:	f300 80bf 	bgt.w	8008c6c <atan+0x204>
 8008aee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008af2:	429e      	cmp	r6, r3
 8008af4:	f300 80a0 	bgt.w	8008c38 <atan+0x1d0>
 8008af8:	ee10 2a10 	vmov	r2, s0
 8008afc:	ee10 0a10 	vmov	r0, s0
 8008b00:	462b      	mov	r3, r5
 8008b02:	4629      	mov	r1, r5
 8008b04:	f7f7 fbc2 	bl	800028c <__adddf3>
 8008b08:	4ba0      	ldr	r3, [pc, #640]	; (8008d8c <atan+0x324>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f7f7 fbbc 	bl	8000288 <__aeabi_dsub>
 8008b10:	2200      	movs	r2, #0
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7f7 fbb5 	bl	800028c <__adddf3>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4630      	mov	r0, r6
 8008b28:	4639      	mov	r1, r7
 8008b2a:	f7f7 fe8f 	bl	800084c <__aeabi_ddiv>
 8008b2e:	f04f 0a00 	mov.w	sl, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	460d      	mov	r5, r1
 8008b36:	4622      	mov	r2, r4
 8008b38:	462b      	mov	r3, r5
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4680      	mov	r8, r0
 8008b48:	4689      	mov	r9, r1
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	a374      	add	r3, pc, #464	; (adr r3, 8008d20 <atan+0x2b8>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	4606      	mov	r6, r0
 8008b56:	460f      	mov	r7, r1
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	a372      	add	r3, pc, #456	; (adr r3, 8008d28 <atan+0x2c0>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7f7 fb93 	bl	800028c <__adddf3>
 8008b66:	4632      	mov	r2, r6
 8008b68:	463b      	mov	r3, r7
 8008b6a:	f7f7 fd45 	bl	80005f8 <__aeabi_dmul>
 8008b6e:	a370      	add	r3, pc, #448	; (adr r3, 8008d30 <atan+0x2c8>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 fb8a 	bl	800028c <__adddf3>
 8008b78:	4632      	mov	r2, r6
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	f7f7 fd3c 	bl	80005f8 <__aeabi_dmul>
 8008b80:	a36d      	add	r3, pc, #436	; (adr r3, 8008d38 <atan+0x2d0>)
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f7f7 fb81 	bl	800028c <__adddf3>
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	f7f7 fd33 	bl	80005f8 <__aeabi_dmul>
 8008b92:	a36b      	add	r3, pc, #428	; (adr r3, 8008d40 <atan+0x2d8>)
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f7f7 fb78 	bl	800028c <__adddf3>
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	f7f7 fd2a 	bl	80005f8 <__aeabi_dmul>
 8008ba4:	a368      	add	r3, pc, #416	; (adr r3, 8008d48 <atan+0x2e0>)
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f7f7 fb6f 	bl	800028c <__adddf3>
 8008bae:	4642      	mov	r2, r8
 8008bb0:	464b      	mov	r3, r9
 8008bb2:	f7f7 fd21 	bl	80005f8 <__aeabi_dmul>
 8008bb6:	a366      	add	r3, pc, #408	; (adr r3, 8008d50 <atan+0x2e8>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	4689      	mov	r9, r1
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	a363      	add	r3, pc, #396	; (adr r3, 8008d58 <atan+0x2f0>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb5b 	bl	8000288 <__aeabi_dsub>
 8008bd2:	4632      	mov	r2, r6
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	a361      	add	r3, pc, #388	; (adr r3, 8008d60 <atan+0x2f8>)
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	f7f7 fb52 	bl	8000288 <__aeabi_dsub>
 8008be4:	4632      	mov	r2, r6
 8008be6:	463b      	mov	r3, r7
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	a35e      	add	r3, pc, #376	; (adr r3, 8008d68 <atan+0x300>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fb49 	bl	8000288 <__aeabi_dsub>
 8008bf6:	4632      	mov	r2, r6
 8008bf8:	463b      	mov	r3, r7
 8008bfa:	f7f7 fcfd 	bl	80005f8 <__aeabi_dmul>
 8008bfe:	a35c      	add	r3, pc, #368	; (adr r3, 8008d70 <atan+0x308>)
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 fb40 	bl	8000288 <__aeabi_dsub>
 8008c08:	4632      	mov	r2, r6
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	f7f7 fcf4 	bl	80005f8 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f7f7 fb38 	bl	800028c <__adddf3>
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	462b      	mov	r3, r5
 8008c20:	f7f7 fcea 	bl	80005f8 <__aeabi_dmul>
 8008c24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	d14b      	bne.n	8008cc6 <atan+0x25e>
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fb29 	bl	8000288 <__aeabi_dsub>
 8008c36:	e72c      	b.n	8008a92 <atan+0x2a>
 8008c38:	ee10 0a10 	vmov	r0, s0
 8008c3c:	4b53      	ldr	r3, [pc, #332]	; (8008d8c <atan+0x324>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4629      	mov	r1, r5
 8008c42:	f7f7 fb21 	bl	8000288 <__aeabi_dsub>
 8008c46:	4b51      	ldr	r3, [pc, #324]	; (8008d8c <atan+0x324>)
 8008c48:	4606      	mov	r6, r0
 8008c4a:	460f      	mov	r7, r1
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4620      	mov	r0, r4
 8008c50:	4629      	mov	r1, r5
 8008c52:	f7f7 fb1b 	bl	800028c <__adddf3>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 fdf5 	bl	800084c <__aeabi_ddiv>
 8008c62:	f04f 0a01 	mov.w	sl, #1
 8008c66:	4604      	mov	r4, r0
 8008c68:	460d      	mov	r5, r1
 8008c6a:	e764      	b.n	8008b36 <atan+0xce>
 8008c6c:	4b49      	ldr	r3, [pc, #292]	; (8008d94 <atan+0x32c>)
 8008c6e:	429e      	cmp	r6, r3
 8008c70:	da1d      	bge.n	8008cae <atan+0x246>
 8008c72:	ee10 0a10 	vmov	r0, s0
 8008c76:	4b48      	ldr	r3, [pc, #288]	; (8008d98 <atan+0x330>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f7f7 fb04 	bl	8000288 <__aeabi_dsub>
 8008c80:	4b45      	ldr	r3, [pc, #276]	; (8008d98 <atan+0x330>)
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	2200      	movs	r2, #0
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	f7f7 fcb4 	bl	80005f8 <__aeabi_dmul>
 8008c90:	4b3e      	ldr	r3, [pc, #248]	; (8008d8c <atan+0x324>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	f7f7 fafa 	bl	800028c <__adddf3>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 fdd4 	bl	800084c <__aeabi_ddiv>
 8008ca4:	f04f 0a02 	mov.w	sl, #2
 8008ca8:	4604      	mov	r4, r0
 8008caa:	460d      	mov	r5, r1
 8008cac:	e743      	b.n	8008b36 <atan+0xce>
 8008cae:	462b      	mov	r3, r5
 8008cb0:	ee10 2a10 	vmov	r2, s0
 8008cb4:	4939      	ldr	r1, [pc, #228]	; (8008d9c <atan+0x334>)
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f7f7 fdc8 	bl	800084c <__aeabi_ddiv>
 8008cbc:	f04f 0a03 	mov.w	sl, #3
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	e737      	b.n	8008b36 <atan+0xce>
 8008cc6:	4b36      	ldr	r3, [pc, #216]	; (8008da0 <atan+0x338>)
 8008cc8:	4e36      	ldr	r6, [pc, #216]	; (8008da4 <atan+0x33c>)
 8008cca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008cce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008cd2:	e9da 2300 	ldrd	r2, r3, [sl]
 8008cd6:	f7f7 fad7 	bl	8000288 <__aeabi_dsub>
 8008cda:	4622      	mov	r2, r4
 8008cdc:	462b      	mov	r3, r5
 8008cde:	f7f7 fad3 	bl	8000288 <__aeabi_dsub>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008cea:	f7f7 facd 	bl	8000288 <__aeabi_dsub>
 8008cee:	f1bb 0f00 	cmp.w	fp, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	460d      	mov	r5, r1
 8008cf6:	f6bf aed6 	bge.w	8008aa6 <atan+0x3e>
 8008cfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cfe:	461d      	mov	r5, r3
 8008d00:	e6d1      	b.n	8008aa6 <atan+0x3e>
 8008d02:	a51d      	add	r5, pc, #116	; (adr r5, 8008d78 <atan+0x310>)
 8008d04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d08:	e6cd      	b.n	8008aa6 <atan+0x3e>
 8008d0a:	bf00      	nop
 8008d0c:	f3af 8000 	nop.w
 8008d10:	54442d18 	.word	0x54442d18
 8008d14:	bff921fb 	.word	0xbff921fb
 8008d18:	8800759c 	.word	0x8800759c
 8008d1c:	7e37e43c 	.word	0x7e37e43c
 8008d20:	e322da11 	.word	0xe322da11
 8008d24:	3f90ad3a 	.word	0x3f90ad3a
 8008d28:	24760deb 	.word	0x24760deb
 8008d2c:	3fa97b4b 	.word	0x3fa97b4b
 8008d30:	a0d03d51 	.word	0xa0d03d51
 8008d34:	3fb10d66 	.word	0x3fb10d66
 8008d38:	c54c206e 	.word	0xc54c206e
 8008d3c:	3fb745cd 	.word	0x3fb745cd
 8008d40:	920083ff 	.word	0x920083ff
 8008d44:	3fc24924 	.word	0x3fc24924
 8008d48:	5555550d 	.word	0x5555550d
 8008d4c:	3fd55555 	.word	0x3fd55555
 8008d50:	2c6a6c2f 	.word	0x2c6a6c2f
 8008d54:	bfa2b444 	.word	0xbfa2b444
 8008d58:	52defd9a 	.word	0x52defd9a
 8008d5c:	3fadde2d 	.word	0x3fadde2d
 8008d60:	af749a6d 	.word	0xaf749a6d
 8008d64:	3fb3b0f2 	.word	0x3fb3b0f2
 8008d68:	fe231671 	.word	0xfe231671
 8008d6c:	3fbc71c6 	.word	0x3fbc71c6
 8008d70:	9998ebc4 	.word	0x9998ebc4
 8008d74:	3fc99999 	.word	0x3fc99999
 8008d78:	54442d18 	.word	0x54442d18
 8008d7c:	3ff921fb 	.word	0x3ff921fb
 8008d80:	440fffff 	.word	0x440fffff
 8008d84:	7ff00000 	.word	0x7ff00000
 8008d88:	3fdbffff 	.word	0x3fdbffff
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	3ff2ffff 	.word	0x3ff2ffff
 8008d94:	40038000 	.word	0x40038000
 8008d98:	3ff80000 	.word	0x3ff80000
 8008d9c:	bff00000 	.word	0xbff00000
 8008da0:	08008e98 	.word	0x08008e98
 8008da4:	08008e78 	.word	0x08008e78

08008da8 <fabs>:
 8008da8:	ec51 0b10 	vmov	r0, r1, d0
 8008dac:	ee10 2a10 	vmov	r2, s0
 8008db0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008db4:	ec43 2b10 	vmov	d0, r2, r3
 8008db8:	4770      	bx	lr
	...

08008dbc <_init>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr

08008dc8 <_fini>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr
