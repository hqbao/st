
drone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800bfc8  0800bfc8  0001bfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b0  0800c2b0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2b0  0800c2b0  0001c2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2b8  0800c2b8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c2c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000700  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000790  20000790  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164e5  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b47  00000000  00000000  000365a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  000390e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002311a  00000000  00000000  0003b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017896  00000000  00000000  0005e7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d16fb  00000000  00000000  00076078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147773  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f6c  00000000  00000000  001477c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfac 	.word	0x0800bfac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800bfac 	.word	0x0800bfac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize(uint8_t Gain, uint8_t rate, uint8_t mode) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	460b      	mov	r3, r1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	717b      	strb	r3, [r7, #5]
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f60:	223c      	movs	r2, #60	; 0x3c
 8000f62:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  HAL_StatusTypeDef status;
  do {
    status = HAL_I2C_IsDeviceReady( & hi2c1, devAddr, 3, 5);
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <HMC5883L_initialize+0x7c>)
 8000f70:	f004 fa6a 	bl	8005448 <HAL_I2C_IsDeviceReady>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f2      	bne.n	8000f64 <HMC5883L_initialize+0x18>
  // write CONFIG_A register
  HAL_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f003 fa4a 	bl	8004418 <HAL_Delay>
  buffer[0] = HMC5883L_RA_CONFIG_A;
 8000f84:	2300      	movs	r3, #0
 8000f86:	733b      	strb	r3, [r7, #12]
  buffer[1] = rate;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	737b      	strb	r3, [r7, #13]

  do {
    status = HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10);
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	f107 020c 	add.w	r2, r7, #12
 8000f96:	230a      	movs	r3, #10
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <HMC5883L_initialize+0x7c>)
 8000f9e:	f003 ff2f 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ef      	bne.n	8000f8c <HMC5883L_initialize+0x40>
  // write CONFIG_B register
  HMC5883L_setGain(Gain);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f80c 	bl	8000fcc <HMC5883L_setGain>
  // write MODE register
  HMC5883L_setMode(mode);
 8000fb4:	797b      	ldrb	r3, [r7, #5]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f82c 	bl	8001014 <HMC5883L_setMode>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200000b0 	.word	0x200000b0

08000fcc <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 4-0 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HMC5883L_setGain+0x40>)
 8000fd8:	223c      	movs	r2, #60	; 0x3c
 8000fda:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_CONFIG_B;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	733b      	strb	r3, [r7, #12]
  buffer[1] = gain;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 8000fe4:	bf00      	nop
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HMC5883L_setGain+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b299      	uxth	r1, r3
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <HMC5883L_setGain+0x44>)
 8000ff8:	f003 ff02 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f1      	bne.n	8000fe6 <HMC5883L_setGain+0x1a>
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	200000b0 	.word	0x200000b0

08001014 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 7-2 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HMC5883L_setMode+0x44>)
 8001020:	223c      	movs	r2, #60	; 0x3c
 8001022:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_MODE;
 8001024:	2302      	movs	r3, #2
 8001026:	733b      	strb	r3, [r7, #12]
  buffer[1] = newMode; // + 0x80;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 800102c:	bf00      	nop
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HMC5883L_setMode+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b299      	uxth	r1, r3
 8001034:	f107 020c 	add.w	r2, r7, #12
 8001038:	230a      	movs	r3, #10
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2302      	movs	r3, #2
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <HMC5883L_setMode+0x48>)
 8001040:	f003 fede 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f1      	bne.n	800102e <HMC5883L_setMode+0x1a>
  mode = newMode; // track to tell if we have to clear bit 7 after a read
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <HMC5883L_setMode+0x4c>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	7013      	strb	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	200000b0 	.word	0x200000b0
 8001060:	200000ac 	.word	0x200000ac

08001064 <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t * x, int16_t * y, int16_t * z) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  //I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer);
  //if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HMC5883L_getHeading+0x90>)
 8001072:	223c      	movs	r2, #60	; 0x3c
 8001074:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[6];
  buffer[0] = HMC5883L_RA_DATAX_H;
 8001076:	2303      	movs	r3, #3
 8001078:	743b      	strb	r3, [r7, #16]
  //buffer[1]	= 0x00;
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 1, 1) != HAL_OK) {}
 800107a:	bf00      	nop
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HMC5883L_getHeading+0x90>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b299      	uxth	r1, r3
 8001082:	f107 0210 	add.w	r2, r7, #16
 8001086:	2301      	movs	r3, #1
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <HMC5883L_getHeading+0x94>)
 800108e:	f003 feb7 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f1      	bne.n	800107c <HMC5883L_getHeading+0x18>
  //HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 1, 1);
  while (HAL_I2C_Master_Receive( & hi2c1, devAddr, (uint8_t * ) buffer, 6, 1) != HAL_OK) {}
 8001098:	bf00      	nop
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HMC5883L_getHeading+0x90>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b299      	uxth	r1, r3
 80010a0:	f107 0210 	add.w	r2, r7, #16
 80010a4:	2301      	movs	r3, #1
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2306      	movs	r3, #6
 80010aa:	4813      	ldr	r0, [pc, #76]	; (80010f8 <HMC5883L_getHeading+0x94>)
 80010ac:	f003 ffa6 	bl	8004ffc <HAL_I2C_Master_Receive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f1      	bne.n	800109a <HMC5883L_getHeading+0x36>
  //HAL_I2C_Master_Receive(&hi2c1, devAddr, (uint8_t*) buffer, 6, 10);
  *x = (((int16_t) buffer[0]) << 8) | buffer[1];
 80010b6:	7c3b      	ldrb	r3, [r7, #16]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7c7b      	ldrb	r3, [r7, #17]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	801a      	strh	r2, [r3, #0]
  *y = (((int16_t) buffer[4]) << 8) | buffer[5];
 80010c8:	7d3b      	ldrb	r3, [r7, #20]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7d7b      	ldrb	r3, [r7, #21]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	801a      	strh	r2, [r3, #0]
  *z = (((int16_t) buffer[2]) << 8) | buffer[3];
 80010da:	7cbb      	ldrb	r3, [r7, #18]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	801a      	strh	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	200000b0 	.word	0x200000b0

080010fc <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	ed87 0a02 	vstr	s0, [r7, #8]
 8001108:	edc7 0a01 	vstr	s1, [r7, #4]
 800110c:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	609a      	str	r2, [r3, #8]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 800112e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	ed93 7a01 	vldr	s14, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 6a05 	vldr	s13, [r3, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a04 	vldr	s15, [r3, #16]
 800116e:	ed97 6a00 	vldr	s12, [r7]
 8001172:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edd3 7a05 	vldr	s15, [r3, #20]
 800118a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800118e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edd3 7a01 	vldr	s15, [r3, #4]
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	ee17 0a90 	vmov	r0, s15
 80011a0:	f7ff f9d2 	bl	8000548 <__aeabi_f2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	eef0 7ae7 	vabs.f32	s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9c2 	bl	8000548 <__aeabi_f2d>
 80011c4:	4680      	mov	r8, r0
 80011c6:	4689      	mov	r9, r1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff fa0d 	bl	80005f8 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7ff f851 	bl	800028c <__adddf3>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fcd9 	bl	8000ba8 <__aeabi_d2f>
 80011f6:	4602      	mov	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001218 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e024      	b.n	8001278 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d103      	bne.n	800123c <flash+0x24>
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	4816      	ldr	r0, [pc, #88]	; (8001290 <flash+0x78>)
 8001238:	f003 fc83 	bl	8004b42 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d103      	bne.n	800124a <flash+0x32>
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <flash+0x78>)
 8001246:	f003 fc7c 	bl	8004b42 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800124a:	2064      	movs	r0, #100	; 0x64
 800124c:	f003 f8e4 	bl	8004418 <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d103      	bne.n	800125e <flash+0x46>
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <flash+0x78>)
 800125a:	f003 fc72 	bl	8004b42 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d103      	bne.n	800126c <flash+0x54>
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <flash+0x78>)
 8001268:	f003 fc6b 	bl	8004b42 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800126c:	2064      	movs	r0, #100	; 0x64
 800126e:	f003 f8d3 	bl	8004418 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbd6      	blt.n	800122e <flash+0x16>
  }

  HAL_Delay(200);
 8001280:	20c8      	movs	r0, #200	; 0xc8
 8001282:	f003 f8c9 	bl	8004418 <HAL_Delay>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020000 	.word	0x40020000

08001294 <console>:

// Monitor console
void console(const char *str) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7fe ff97 	bl	80001d0 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <console+0x24>)
 80012ac:	f006 feb3 	bl	8008016 <HAL_UART_Transmit_IT>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002d4 	.word	0x200002d4

080012bc <send_data>:

void send_data(float x1, float x2, float x3,
    float x4, float x5, float x6, float x7, float x8, float x9) {
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	b093      	sub	sp, #76	; 0x4c
 80012c0:	af08      	add	r7, sp, #32
 80012c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80012c6:	edc7 0a08 	vstr	s1, [r7, #32]
 80012ca:	ed87 1a07 	vstr	s2, [r7, #28]
 80012ce:	edc7 1a06 	vstr	s3, [r7, #24]
 80012d2:	ed87 2a05 	vstr	s4, [r7, #20]
 80012d6:	edc7 2a04 	vstr	s5, [r7, #16]
 80012da:	ed87 3a03 	vstr	s6, [r7, #12]
 80012de:	edc7 3a02 	vstr	s7, [r7, #8]
 80012e2:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	2100      	movs	r1, #0
 80012ec:	4837      	ldr	r0, [pc, #220]	; (80013cc <send_data+0x110>)
 80012ee:	f007 fe21 	bl	8008f34 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 80012f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012f6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80013d0 <send_data+0x114>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012fe:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001302:	edd7 7a08 	vldr	s15, [r7, #32]
 8001306:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80013d0 <send_data+0x114>
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800130e:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001312:	edd7 7a07 	vldr	s15, [r7, #28]
 8001316:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013d0 <send_data+0x114>
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800131e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001322:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8001326:	edd7 7a06 	vldr	s15, [r7, #24]
 800132a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80013d0 <send_data+0x114>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800133a:	edd7 7a05 	vldr	s15, [r7, #20]
 800133e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80013d0 <send_data+0x114>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134a:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 800134e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001352:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80013d0 <send_data+0x114>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 8001362:	edd7 7a03 	vldr	s15, [r7, #12]
 8001366:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80013d0 <send_data+0x114>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 8001376:	edd7 7a02 	vldr	s15, [r7, #8]
 800137a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013d0 <send_data+0x114>
 800137e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001386:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 800138a:	edd7 7a01 	vldr	s15, [r7, #4]
 800138e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80013d0 <send_data+0x114>
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 6a90 	vmov	r6, s15
 800139e:	9606      	str	r6, [sp, #24]
 80013a0:	9505      	str	r5, [sp, #20]
 80013a2:	9404      	str	r4, [sp, #16]
 80013a4:	9003      	str	r0, [sp, #12]
 80013a6:	9102      	str	r1, [sp, #8]
 80013a8:	9201      	str	r2, [sp, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	ee16 3a10 	vmov	r3, s12
 80013b0:	ee16 2a90 	vmov	r2, s13
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <send_data+0x118>)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <send_data+0x110>)
 80013b8:	f007 fdc4 	bl	8008f44 <siprintf>
  console(g_console_msg);
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <send_data+0x110>)
 80013be:	f7ff ff69 	bl	8001294 <console>
}
 80013c2:	bf00      	nop
 80013c4:	372c      	adds	r7, #44	; 0x2c
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000568 	.word	0x20000568
 80013d0:	47c35000 	.word	0x47c35000
 80013d4:	0800bfc8 	.word	0x0800bfc8

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f002 ffa9 	bl	8004334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8f1 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 fc93 	bl	8001d10 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013ea:	f000 f9f1 	bl	80017d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013ee:	f000 f955 	bl	800169c <MX_I2C1_Init>
  MX_TIM2_Init();
 80013f2:	f000 fab1 	bl	8001958 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013f6:	f000 fb29 	bl	8001a4c <MX_TIM3_Init>
  MX_TIM4_Init();
 80013fa:	f000 fba3 	bl	8001b44 <MX_TIM4_Init>
  MX_SPI1_Init();
 80013fe:	f000 f97b 	bl	80016f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001402:	f000 f9af 	bl	8001764 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001406:	f000 fc2f 	bl	8001c68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800140a:	f000 fc57 	bl	8001cbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Turn off all lights
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	4859      	ldr	r0, [pc, #356]	; (8001578 <main+0x1a0>)
 8001414:	f003 fb7c 	bl	8004b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	4856      	ldr	r0, [pc, #344]	; (8001578 <main+0x1a0>)
 800141e:	f003 fb77 	bl	8004b10 <HAL_GPIO_WritePin>

  // Gyro, accel
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 0.5); // Accel x
 8001422:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001426:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800142a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800142e:	4853      	ldr	r0, [pc, #332]	; (800157c <main+0x1a4>)
 8001430:	f7ff fe64 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 0.5); // Accel y
 8001434:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001438:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800143c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001440:	484f      	ldr	r0, [pc, #316]	; (8001580 <main+0x1a8>)
 8001442:	f7ff fe5b 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 0.5); // Accel z
 8001446:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800144a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800144e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001452:	484c      	ldr	r0, [pc, #304]	; (8001584 <main+0x1ac>)
 8001454:	f7ff fe52 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 0.5); // Gyro x
 8001458:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800145c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001460:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001464:	4848      	ldr	r0, [pc, #288]	; (8001588 <main+0x1b0>)
 8001466:	f7ff fe49 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 0.5); // Gyro y
 800146a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800146e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001472:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001476:	4845      	ldr	r0, [pc, #276]	; (800158c <main+0x1b4>)
 8001478:	f7ff fe40 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 0.5); // Gyro z
 800147c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001480:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001484:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001488:	4841      	ldr	r0, [pc, #260]	; (8001590 <main+0x1b8>)
 800148a:	f7ff fe37 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[6], 2, 2, 0.01); // Thrust
 800148e:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8001594 <main+0x1bc>
 8001492:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001496:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800149a:	483f      	ldr	r0, [pc, #252]	; (8001598 <main+0x1c0>)
 800149c:	f7ff fe2e 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[7], 2, 2, 0.01); // Yaw
 80014a0:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8001594 <main+0x1bc>
 80014a4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014a8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014ac:	483b      	ldr	r0, [pc, #236]	; (800159c <main+0x1c4>)
 80014ae:	f7ff fe25 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[8], 2, 2, 0.01); // Pitch
 80014b2:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8001594 <main+0x1bc>
 80014b6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014ba:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014be:	4838      	ldr	r0, [pc, #224]	; (80015a0 <main+0x1c8>)
 80014c0:	f7ff fe1c 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[9], 2, 2, 0.01); // Roll
 80014c4:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8001594 <main+0x1bc>
 80014c8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014cc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014d0:	4834      	ldr	r0, [pc, #208]	; (80015a4 <main+0x1cc>)
 80014d2:	f7ff fe13 	bl	80010fc <SimpleKalmanFilter_Init>

  // Initialize GY-86
  SD_MPU6050_Init(
 80014d6:	2303      	movs	r3, #3
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2303      	movs	r3, #3
 80014dc:	2200      	movs	r2, #0
 80014de:	4932      	ldr	r1, [pc, #200]	; (80015a8 <main+0x1d0>)
 80014e0:	4832      	ldr	r0, [pc, #200]	; (80015ac <main+0x1d4>)
 80014e2:	f000 fc94 	bl	8001e0e <SD_MPU6050_Init>
      &hi2c1,
      &g_dev1,
      SD_MPU6050_Device_0,
      SD_MPU6050_Accelerometer_16G,
      SD_MPU6050_Gyroscope_2000s);
  SD_MPU6050_SetDataRate(&hi2c1, &g_dev1, SD_MPU6050_DataRate_8KHz);
 80014e6:	2200      	movs	r2, #0
 80014e8:	492f      	ldr	r1, [pc, #188]	; (80015a8 <main+0x1d0>)
 80014ea:	4830      	ldr	r0, [pc, #192]	; (80015ac <main+0x1d4>)
 80014ec:	f000 fd04 	bl	8001ef8 <SD_MPU6050_SetDataRate>
  flash(1, 5);
 80014f0:	2105      	movs	r1, #5
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff fe90 	bl	8001218 <flash>

  begin(&g_dev2, MS5611_HIGH_RES); // MS5611 sensor init
 80014f8:	2106      	movs	r1, #6
 80014fa:	482d      	ldr	r0, [pc, #180]	; (80015b0 <main+0x1d8>)
 80014fc:	f000 fee0 	bl	80022c0 <begin>
  Set_config(&hi2c1, &g_dev1, MPU6050_DLPF_BW_260); // LPF mpu
 8001500:	2200      	movs	r2, #0
 8001502:	4929      	ldr	r1, [pc, #164]	; (80015a8 <main+0x1d0>)
 8001504:	4829      	ldr	r0, [pc, #164]	; (80015ac <main+0x1d4>)
 8001506:	f000 feb3 	bl	8002270 <Set_config>
  SetAuxbus(&hi2c1, &g_dev1); // Enable MPU6050 AUX bus to interface with HMC5883l
 800150a:	4927      	ldr	r1, [pc, #156]	; (80015a8 <main+0x1d0>)
 800150c:	4827      	ldr	r0, [pc, #156]	; (80015ac <main+0x1d4>)
 800150e:	f000 fe7d 	bl	800220c <SetAuxbus>
  HMC5883L_initialize(HMC5883L_GAIN_1370, HMC5883L_RATE_75, HMC5883L_MODE_CONTINUOUS);
 8001512:	2200      	movs	r2, #0
 8001514:	2118      	movs	r1, #24
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff fd18 	bl	8000f4c <HMC5883L_initialize>
  flash(1, 5);
 800151c:	2105      	movs	r1, #5
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fe7a 	bl	8001218 <flash>

  // Remote control
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001524:	2100      	movs	r1, #0
 8001526:	4823      	ldr	r0, [pc, #140]	; (80015b4 <main+0x1dc>)
 8001528:	f005 fb4a 	bl	8006bc0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 800152c:	2104      	movs	r1, #4
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <main+0x1dc>)
 8001530:	f005 fb46 	bl	8006bc0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8001534:	2108      	movs	r1, #8
 8001536:	481f      	ldr	r0, [pc, #124]	; (80015b4 <main+0x1dc>)
 8001538:	f005 fb42 	bl	8006bc0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 800153c:	210c      	movs	r1, #12
 800153e:	481d      	ldr	r0, [pc, #116]	; (80015b4 <main+0x1dc>)
 8001540:	f005 fb3e 	bl	8006bc0 <HAL_TIM_IC_Start_IT>

  // Init PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001544:	2100      	movs	r1, #0
 8001546:	481c      	ldr	r0, [pc, #112]	; (80015b8 <main+0x1e0>)
 8001548:	f005 fa18 	bl	800697c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800154c:	2104      	movs	r1, #4
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <main+0x1e0>)
 8001550:	f005 fa14 	bl	800697c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001554:	2108      	movs	r1, #8
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <main+0x1e0>)
 8001558:	f005 fa10 	bl	800697c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800155c:	210c      	movs	r1, #12
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <main+0x1e0>)
 8001560:	f005 fa0c 	bl	800697c <HAL_TIM_PWM_Start>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 8001564:	4815      	ldr	r0, [pc, #84]	; (80015bc <main+0x1e4>)
 8001566:	f005 f949 	bl	80067fc <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Receive data and callback HAL_UART_RxCpltCallback
    HAL_UART_Receive_IT(&huart1, g_control, 5);
 800156a:	2205      	movs	r2, #5
 800156c:	4914      	ldr	r1, [pc, #80]	; (80015c0 <main+0x1e8>)
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <main+0x1ec>)
 8001570:	f006 fd96 	bl	80080a0 <HAL_UART_Receive_IT>
 8001574:	e7f9      	b.n	800156a <main+0x192>
 8001576:	bf00      	nop
 8001578:	40020000 	.word	0x40020000
 800157c:	2000035c 	.word	0x2000035c
 8001580:	20000374 	.word	0x20000374
 8001584:	2000038c 	.word	0x2000038c
 8001588:	200003a4 	.word	0x200003a4
 800158c:	200003bc 	.word	0x200003bc
 8001590:	200003d4 	.word	0x200003d4
 8001594:	3c23d70a 	.word	0x3c23d70a
 8001598:	200003ec 	.word	0x200003ec
 800159c:	20000404 	.word	0x20000404
 80015a0:	2000041c 	.word	0x2000041c
 80015a4:	20000434 	.word	0x20000434
 80015a8:	200004dc 	.word	0x200004dc
 80015ac:	200000b0 	.word	0x200000b0
 80015b0:	200004f8 	.word	0x200004f8
 80015b4:	2000028c 	.word	0x2000028c
 80015b8:	200001b4 	.word	0x200001b4
 80015bc:	20000244 	.word	0x20000244
 80015c0:	20000560 	.word	0x20000560
 80015c4:	200002d4 	.word	0x200002d4

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2230      	movs	r2, #48	; 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fcac 	bl	8008f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <SystemClock_Config+0xcc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <SystemClock_Config+0xcc>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <SystemClock_Config+0xcc>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <SystemClock_Config+0xd0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <SystemClock_Config+0xd0>)
 8001612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <SystemClock_Config+0xd0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800163c:	23a8      	movs	r3, #168	; 0xa8
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	2302      	movs	r3, #2
 8001642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001644:	2304      	movs	r3, #4
 8001646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fb65 	bl	8005d1c <HAL_RCC_OscConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001658:	f000 fbd4 	bl	8001e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	230f      	movs	r3, #15
 800165e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001660:	2302      	movs	r3, #2
 8001662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001668:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800166c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800166e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2105      	movs	r1, #5
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fdc6 	bl	800620c <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001686:	f000 fbbd 	bl	8001e04 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	; 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_I2C1_Init+0x50>)
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <MX_I2C1_Init+0x54>)
 80016a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_I2C1_Init+0x50>)
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <MX_I2C1_Init+0x58>)
 80016aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_I2C1_Init+0x50>)
 80016ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_I2C1_Init+0x50>)
 80016da:	f003 fa4d 	bl	8004b78 <HAL_I2C_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f000 fb8e 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000b0 	.word	0x200000b0
 80016f0:	40005400 	.word	0x40005400
 80016f4:	000186a0 	.word	0x000186a0

080016f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI1_Init+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <MX_SPI1_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI1_Init+0x64>)
 8001704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI1_Init+0x64>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI1_Init+0x64>)
 8001744:	220a      	movs	r2, #10
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_SPI1_Init+0x64>)
 800174a:	f004 ff7f 	bl	800664c <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 fb56 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000104 	.word	0x20000104
 8001760:	40013000 	.word	0x40013000

08001764 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_SPI2_Init+0x64>)
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <MX_SPI2_Init+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001774:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_SPI2_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_SPI2_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001794:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_SPI2_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017b0:	220a      	movs	r2, #10
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017b6:	f004 ff49 	bl	800664c <HAL_SPI_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017c0:	f000 fb20 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000015c 	.word	0x2000015c
 80017cc:	40003800 	.word	0x40003800

080017d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2220      	movs	r2, #32
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f007 fb93 	bl	8008f34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <MX_TIM1_Init+0x180>)
 8001810:	4a50      	ldr	r2, [pc, #320]	; (8001954 <MX_TIM1_Init+0x184>)
 8001812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <MX_TIM1_Init+0x180>)
 8001816:	2215      	movs	r2, #21
 8001818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <MX_TIM1_Init+0x180>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <MX_TIM1_Init+0x180>)
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b49      	ldr	r3, [pc, #292]	; (8001950 <MX_TIM1_Init+0x180>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <MX_TIM1_Init+0x180>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b46      	ldr	r3, [pc, #280]	; (8001950 <MX_TIM1_Init+0x180>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183a:	4845      	ldr	r0, [pc, #276]	; (8001950 <MX_TIM1_Init+0x180>)
 800183c:	f004 ff8f 	bl	800675e <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001846:	f000 fadd 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001854:	4619      	mov	r1, r3
 8001856:	483e      	ldr	r0, [pc, #248]	; (8001950 <MX_TIM1_Init+0x180>)
 8001858:	f005 fd40 	bl	80072dc <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001862:	f000 facf 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001866:	483a      	ldr	r0, [pc, #232]	; (8001950 <MX_TIM1_Init+0x180>)
 8001868:	f005 f838 	bl	80068dc <HAL_TIM_PWM_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001872:	f000 fac7 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800187e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001882:	4619      	mov	r1, r3
 8001884:	4832      	ldr	r0, [pc, #200]	; (8001950 <MX_TIM1_Init+0x180>)
 8001886:	f006 fa97 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001890:	f000 fab8 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001894:	2360      	movs	r3, #96	; 0x60
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4825      	ldr	r0, [pc, #148]	; (8001950 <MX_TIM1_Init+0x180>)
 80018ba:	f005 fc4d 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018c4:	f000 fa9e 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	2204      	movs	r2, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	481f      	ldr	r0, [pc, #124]	; (8001950 <MX_TIM1_Init+0x180>)
 80018d2:	f005 fc41 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80018dc:	f000 fa92 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2208      	movs	r2, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4819      	ldr	r0, [pc, #100]	; (8001950 <MX_TIM1_Init+0x180>)
 80018ea:	f005 fc35 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018f4:	f000 fa86 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	220c      	movs	r2, #12
 80018fe:	4619      	mov	r1, r3
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_TIM1_Init+0x180>)
 8001902:	f005 fc29 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800190c:	f000 fa7a 	bl	8001e04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM1_Init+0x180>)
 8001934:	f006 fabc 	bl	8007eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800193e:	f000 fa61 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM1_Init+0x180>)
 8001944:	f000 fff8 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001948:	bf00      	nop
 800194a:	3758      	adds	r7, #88	; 0x58
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001b4 	.word	0x200001b4
 8001954:	40010000 	.word	0x40010000

08001958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <MX_TIM2_Init+0xf0>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001984:	2215      	movs	r2, #21
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <MX_TIM2_Init+0xf0>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_TIM2_Init+0xf0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a2:	4829      	ldr	r0, [pc, #164]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019a4:	f004 ff9a 	bl	80068dc <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019ae:	f000 fa29 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4619      	mov	r1, r3
 80019c0:	4821      	ldr	r0, [pc, #132]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019c2:	f006 f9f9 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019cc:	f000 fa1a 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d0:	2360      	movs	r3, #96	; 0x60
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019e8:	f005 fbb6 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019f2:	f000 fa07 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2204      	movs	r2, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019fe:	f005 fbab 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a08:	f000 f9fc 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2208      	movs	r2, #8
 8001a10:	4619      	mov	r1, r3
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001a14:	f005 fba0 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a1e:	f000 f9f1 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	220c      	movs	r2, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001a2a:	f005 fb95 	bl	8007158 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001a34:	f000 f9e6 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001a3a:	f000 ff7d 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001fc 	.word	0x200001fc

08001a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0318 	add.w	r3, r7, #24
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a78:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <MX_TIM3_Init+0xf4>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a7e:	2254      	movs	r2, #84	; 0x54
 8001a80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a9c:	4827      	ldr	r0, [pc, #156]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a9e:	f004 fe5e 	bl	800675e <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001aa8:	f000 f9ac 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4820      	ldr	r0, [pc, #128]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001aba:	f005 fc0f 	bl	80072dc <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ac4:	f000 f99e 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ac8:	481c      	ldr	r0, [pc, #112]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001aca:	f005 f81f 	bl	8006b0c <HAL_TIM_IC_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ad4:	f000 f996 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4815      	ldr	r0, [pc, #84]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001ae8:	f006 f966 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001af2:	f000 f987 	bl	8001e04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001afa:	2301      	movs	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001b0e:	f005 fa87 	bl	8007020 <HAL_TIM_IC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001b18:	f000 f974 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001b24:	f005 fa7c 	bl	8007020 <HAL_TIM_IC_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001b2e:	f000 f969 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000244 	.word	0x20000244
 8001b40:	40000400 	.word	0x40000400

08001b44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b62:	463b      	mov	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b70:	4a3c      	ldr	r2, [pc, #240]	; (8001c64 <MX_TIM4_Init+0x120>)
 8001b72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 8001b74:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b76:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001b7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4200;
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b84:	f241 0268 	movw	r2, #4200	; 0x1068
 8001b88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b96:	4832      	ldr	r0, [pc, #200]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b98:	f004 fde1 	bl	800675e <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001ba2:	f000 f92f 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482b      	ldr	r0, [pc, #172]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001bb4:	f005 fb92 	bl	80072dc <HAL_TIM_ConfigClockSource>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bbe:	f000 f921 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bc2:	4827      	ldr	r0, [pc, #156]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001bc4:	f004 ffa2 	bl	8006b0c <HAL_TIM_IC_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001bce:	f000 f919 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	481f      	ldr	r0, [pc, #124]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001be2:	f006 f8e9 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001bec:	f000 f90a 	bl	8001e04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	4816      	ldr	r0, [pc, #88]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c08:	f005 fa0a 	bl	8007020 <HAL_TIM_IC_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001c12:	f000 f8f7 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c16:	463b      	mov	r3, r7
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4810      	ldr	r0, [pc, #64]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c1e:	f005 f9ff 	bl	8007020 <HAL_TIM_IC_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001c28:	f000 f8ec 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	2208      	movs	r2, #8
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c34:	f005 f9f4 	bl	8007020 <HAL_TIM_IC_ConfigChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001c3e:	f000 f8e1 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	220c      	movs	r2, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c4a:	f005 f9e9 	bl	8007020 <HAL_TIM_IC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001c54:	f000 f8d6 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000028c 	.word	0x2000028c
 8001c64:	40000800 	.word	0x40000800

08001c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <MX_USART1_UART_Init+0x50>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001ca0:	f006 f96c 	bl	8007f7c <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001caa:	f000 f8ab 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002d4 	.word	0x200002d4
 8001cb8:	40011000 	.word	0x40011000

08001cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_USART2_UART_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f006 f942 	bl	8007f7c <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfe:	f000 f881 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000318 	.word	0x20000318
 8001d0c:	40004400 	.word	0x40004400

08001d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	21c0      	movs	r1, #192	; 0xc0
 8001dd2:	480b      	ldr	r0, [pc, #44]	; (8001e00 <MX_GPIO_Init+0xf0>)
 8001dd4:	f002 fe9c 	bl	8004b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd8:	23c0      	movs	r3, #192	; 0xc0
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_GPIO_Init+0xf0>)
 8001df0:	f002 fcda 	bl	80047a8 <HAL_GPIO_Init>

}
 8001df4:	bf00      	nop
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <Error_Handler+0x8>

08001e0e <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

/////////////////////////////////////////////
SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	; 0x28
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001e24:	2375      	movs	r3, #117	; 0x75
 8001e26:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001e3e:	7efb      	ldrb	r3, [r7, #27]
 8001e40:	b299      	uxth	r1, r3
 8001e42:	2305      	movs	r3, #5
 8001e44:	2202      	movs	r2, #2
 8001e46:	69f8      	ldr	r0, [r7, #28]
 8001e48:	f003 fafe 	bl	8005448 <HAL_I2C_IsDeviceReady>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e04c      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001e56:	7efb      	ldrb	r3, [r7, #27]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	f107 021a 	add.w	r2, r7, #26
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	69f8      	ldr	r0, [r7, #28]
 8001e68:	f002 ffca 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e03c      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001e76:	7efb      	ldrb	r3, [r7, #27]
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	f107 0219 	add.w	r2, r7, #25
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	69f8      	ldr	r0, [r7, #28]
 8001e88:	f003 f8b8 	bl	8004ffc <HAL_I2C_Master_Receive>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e02c      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e02a      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001e9a:	bf00      	nop
 8001e9c:	7e7b      	ldrb	r3, [r7, #25]
 8001e9e:	2b68      	cmp	r3, #104	; 0x68
 8001ea0:	d1f9      	bne.n	8001e96 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001ea2:	236b      	movs	r3, #107	; 0x6b
 8001ea4:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001eaa:	7efb      	ldrb	r3, [r7, #27]
 8001eac:	b299      	uxth	r1, r3
 8001eae:	f107 0214 	add.w	r2, r7, #20
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	69f8      	ldr	r0, [r7, #28]
 8001ebc:	f002 ffa0 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e012      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8001eca:	2207      	movs	r2, #7
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f812 	bl	8001ef8 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f830 	bl	8001f40 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8001ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f899 	bl	8002020 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001f10:	2319      	movs	r3, #25
 8001f12:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001f18:	bf00      	nop
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	f107 0210 	add.w	r2, r7, #16
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2302      	movs	r3, #2
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f002 ff68 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f1      	bne.n	8001f1a <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001f58:	231c      	movs	r3, #28
 8001f5a:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001f5c:	bf00      	nop
 8001f5e:	7cfb      	ldrb	r3, [r7, #19]
 8001f60:	b299      	uxth	r1, r3
 8001f62:	f107 0211 	add.w	r2, r7, #17
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f002 ff46 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f1      	bne.n	8001f5e <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001f7a:	bf00      	nop
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	f107 0212 	add.w	r2, r7, #18
 8001f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f003 f835 	bl	8004ffc <HAL_I2C_Master_Receive>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f1      	bne.n	8001f7c <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001f98:	7cbb      	ldrb	r3, [r7, #18]
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	f023 0318 	bic.w	r3, r3, #24
 8001fa0:	b25a      	sxtb	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001fb0:	bf00      	nop
 8001fb2:	7cfb      	ldrb	r3, [r7, #19]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 0212 	add.w	r2, r7, #18
 8001fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f002 ff1c 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f1      	bne.n	8001fb2 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d81f      	bhi.n	8002014 <SD_MPU6050_SetAccelerometer+0xd4>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <SD_MPU6050_SetAccelerometer+0x9c>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff7 	.word	0x08001ff7
 8001fe4:	08002001 	.word	0x08002001
 8001fe8:	0800200b 	.word	0x0800200b
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001ff2:	609a      	str	r2, [r3, #8]
			break;
 8001ff4:	e00f      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001ffc:	609a      	str	r2, [r3, #8]
			break;
 8001ffe:	e00a      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002006:	609a      	str	r2, [r3, #8]
			break;
 8002008:	e005      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002010:	609a      	str	r2, [r3, #8]
			break;
 8002012:	e000      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8002014:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	4613      	mov	r3, r2
 800202c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8002038:	231b      	movs	r3, #27
 800203a:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800203c:	bf00      	nop
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	b299      	uxth	r1, r3
 8002042:	f107 0211 	add.w	r2, r7, #17
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f002 fed6 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f1      	bne.n	800203e <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800205a:	bf00      	nop
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	b299      	uxth	r1, r3
 8002060:	f107 0212 	add.w	r2, r7, #18
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	6978      	ldr	r0, [r7, #20]
 800206e:	f002 ffc5 	bl	8004ffc <HAL_I2C_Master_Receive>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f1      	bne.n	800205c <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8002078:	7cbb      	ldrb	r3, [r7, #18]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	f023 0318 	bic.w	r3, r3, #24
 8002080:	b25a      	sxtb	r2, r3
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	b25b      	sxtb	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b25b      	sxtb	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002090:	bf00      	nop
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	b299      	uxth	r1, r3
 8002096:	f107 0212 	add.w	r2, r7, #18
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2301      	movs	r3, #1
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f002 feac 	bl	8004e00 <HAL_I2C_Master_Transmit>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f1      	bne.n	8002092 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d81b      	bhi.n	80020ec <SD_MPU6050_SetGyroscope+0xcc>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <SD_MPU6050_SetGyroscope+0x9c>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020d5 	.word	0x080020d5
 80020c4:	080020dd 	.word	0x080020dd
 80020c8:	080020e5 	.word	0x080020e5
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SD_MPU6050_SetGyroscope+0xd8>)
 80020d0:	605a      	str	r2, [r3, #4]
				break;
 80020d2:	e00c      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <SD_MPU6050_SetGyroscope+0xdc>)
 80020d8:	605a      	str	r2, [r3, #4]
				break;
 80020da:	e008      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <SD_MPU6050_SetGyroscope+0xe0>)
 80020e0:	605a      	str	r2, [r3, #4]
				break;
 80020e2:	e004      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <SD_MPU6050_SetGyroscope+0xe4>)
 80020e8:	605a      	str	r2, [r3, #4]
				break;
 80020ea:	e000      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 80020ec:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	3bfa232d 	.word	0x3bfa232d
 80020fc:	3c7a232d 	.word	0x3c7a232d
 8002100:	3cf9c190 	.word	0x3cf9c190
 8002104:	3d79c190 	.word	0x3d79c190

08002108 <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af02      	add	r7, sp, #8
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8002112:	233b      	movs	r3, #59	; 0x3b
 8002114:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1) != HAL_OK);
 8002122:	bf00      	nop
 8002124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002128:	b299      	uxth	r1, r3
 800212a:	f107 020f 	add.w	r2, r7, #15
 800212e:	2301      	movs	r3, #1
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002136:	f002 fe63 	bl	8004e00 <HAL_I2C_Master_Transmit>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f1      	bne.n	8002124 <SD_MPU6050_ReadAll+0x1c>
	//HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1);
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1) != HAL_OK);
 8002140:	bf00      	nop
 8002142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002146:	b299      	uxth	r1, r3
 8002148:	f107 0210 	add.w	r2, r7, #16
 800214c:	2301      	movs	r3, #1
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	230e      	movs	r3, #14
 8002152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002154:	f002 ff52 	bl	8004ffc <HAL_I2C_Master_Receive>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f1      	bne.n	8002142 <SD_MPU6050_ReadAll+0x3a>
	//HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1);
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800215e:	7c3b      	ldrb	r3, [r7, #16]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	7c7b      	ldrb	r3, [r7, #17]
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21a      	sxth	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8002170:	7cbb      	ldrb	r3, [r7, #18]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21a      	sxth	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8002182:	7d3b      	ldrb	r3, [r7, #20]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	7d7b      	ldrb	r3, [r7, #21]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21a      	sxth	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8002194:	7dbb      	ldrb	r3, [r7, #22]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80021a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ae:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002204 <SD_MPU6050_ReadAll+0xfc>
 80021b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002208 <SD_MPU6050_ReadAll+0x100>
 80021ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 80021c4:	7e3b      	ldrb	r3, [r7, #24]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	7e7b      	ldrb	r3, [r7, #25]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 80021d6:	7ebb      	ldrb	r3, [r7, #26]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	b21a      	sxth	r2, r3
 80021dc:	7efb      	ldrb	r3, [r7, #27]
 80021de:	b21b      	sxth	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 80021e8:	7f3b      	ldrb	r3, [r7, #28]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	7f7b      	ldrb	r3, [r7, #29]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	43aa0000 	.word	0x43aa0000
 8002208:	42121eb8 	.word	0x42121eb8

0800220c <SetAuxbus>:
	InterruptsStruct->Status = read;
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

void SetAuxbus(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct){
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]
	uint8_t address = DataStruct->Address;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	72fb      	strb	r3, [r7, #11]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_USER_CTRL;
 8002220:	236a      	movs	r3, #106	; 0x6a
 8002222:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 8002224:	2300      	movs	r3, #0
 8002226:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 8002228:	200a      	movs	r0, #10
 800222a:	f002 f8f5 	bl	8004418 <HAL_Delay>
	/*set I2C Bypass enable bit (I2C_BYPASS_EN,bit 2) in INT Pin / Bypass Enable Configuration register (INT_PIN_CFG,0x37) to 1*/
	d[0] = MPU6050_INT_PIN_CFG;
 800222e:	2337      	movs	r3, #55	; 0x37
 8002230:	723b      	strb	r3, [r7, #8]
	d[1] = 0x02;
 8002232:	2302      	movs	r3, #2
 8002234:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8002236:	bf00      	nop
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	b299      	uxth	r1, r3
 800223c:	f107 0208 	add.w	r2, r7, #8
 8002240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2302      	movs	r3, #2
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f002 fdd9 	bl	8004e00 <HAL_I2C_Master_Transmit>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f1      	bne.n	8002238 <SetAuxbus+0x2c>
	HAL_Delay(10);
 8002254:	200a      	movs	r0, #10
 8002256:	f002 f8df 	bl	8004418 <HAL_Delay>
	/*Turn off sleep mode by reseting SLEEP bit (bit 6) of the power management register #1 (PWR_MGMT_1, 0x6B)*/
	d[0] = MPU6050_PWR_MGMT_1;
 800225a:	236b      	movs	r3, #107	; 0x6b
 800225c:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 800225e:	2300      	movs	r3, #0
 8002260:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 8002262:	200a      	movs	r0, #10
 8002264:	f002 f8d8 	bl	8004418 <HAL_Delay>
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <Set_config>:
void Set_config(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t f_cut){
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_CONFIG;
 8002288:	231a      	movs	r3, #26
 800228a:	743b      	strb	r3, [r7, #16]
	d[1] = f_cut;
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	747b      	strb	r3, [r7, #17]
	HAL_Delay(10);
 8002290:	200a      	movs	r0, #10
 8002292:	f002 f8c1 	bl	8004418 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8002296:	bf00      	nop
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	b299      	uxth	r1, r3
 800229c:	f107 0210 	add.w	r2, r7, #16
 80022a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2302      	movs	r3, #2
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f002 fda9 	bl	8004e00 <HAL_I2C_Master_Transmit>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f1      	bne.n	8002298 <Set_config+0x28>
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <begin>:
#include "ms5611.h"
#include "math.h"
extern I2C_HandleTypeDef hi2c1;
extern void delay(uint16_t z);

bool begin(MS5611 *dev, ms5611_osr_t osr){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
    //Wire.begin();
		while(HAL_I2C_IsDeviceReady(&hi2c1, MS5611_ADDRESS, 3, 100) != HAL_OK);
 80022cc:	bf00      	nop
 80022ce:	2364      	movs	r3, #100	; 0x64
 80022d0:	2203      	movs	r2, #3
 80022d2:	21ee      	movs	r1, #238	; 0xee
 80022d4:	480f      	ldr	r0, [pc, #60]	; (8002314 <begin+0x54>)
 80022d6:	f003 f8b7 	bl	8005448 <HAL_I2C_IsDeviceReady>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f6      	bne.n	80022ce <begin+0xe>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80022e0:	bf00      	nop
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <begin+0x54>)
 80022e4:	f003 f9de 	bl	80056a4 <HAL_I2C_GetState>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d1f9      	bne.n	80022e2 <begin+0x22>
		setOversampling(dev, osr);
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f810 	bl	8002318 <setOversampling>
		reset();
 80022f8:	f000 f850 	bl	800239c <reset>
		HAL_Delay(100);
 80022fc:	2064      	movs	r0, #100	; 0x64
 80022fe:	f002 f88b 	bl	8004418 <HAL_Delay>
    readPROM(dev);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f860 	bl	80023c8 <readPROM>
    return true;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200000b0 	.word	0x200000b0

08002318 <setOversampling>:

// Set oversampling value
void setOversampling(MS5611 *dev, ms5611_osr_t osr){
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
	  dev->uosr = osr;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    switch (osr)
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d82d      	bhi.n	800238e <setOversampling+0x76>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <setOversampling+0x20>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	0800235d 	.word	0x0800235d
 800233c:	0800238f 	.word	0x0800238f
 8002340:	08002367 	.word	0x08002367
 8002344:	0800238f 	.word	0x0800238f
 8002348:	08002371 	.word	0x08002371
 800234c:	0800238f 	.word	0x0800238f
 8002350:	0800237b 	.word	0x0800237b
 8002354:	0800238f 	.word	0x0800238f
 8002358:	08002385 	.word	0x08002385
    {
	case MS5611_ULTRA_LOW_POWER:
	    dev->ct = 1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002364:	e013      	b.n	800238e <setOversampling+0x76>
	case MS5611_LOW_POWER:
	    dev->ct = 2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 800236e:	e00e      	b.n	800238e <setOversampling+0x76>
	case MS5611_STANDARD:
	    dev->ct = 3;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002378:	e009      	b.n	800238e <setOversampling+0x76>
	case MS5611_HIGH_RES:
	    dev->ct = 4;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2204      	movs	r2, #4
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002382:	e004      	b.n	800238e <setOversampling+0x76>
	case MS5611_ULTRA_HIGH_RES:
	    dev->ct = 5;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2205      	movs	r2, #5
 8002388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 800238c:	bf00      	nop
    }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <reset>:
ms5611_osr_t getOversampling(MS5611 dev)
{
    return (ms5611_osr_t) dev.uosr;
}

void reset(void){ 
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af02      	add	r7, sp, #8
		while(HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t*) MS5611_CMD_RESET, 1, 10) != HAL_OK);
 80023a2:	bf00      	nop
 80023a4:	230a      	movs	r3, #10
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	221e      	movs	r2, #30
 80023ac:	21ee      	movs	r1, #238	; 0xee
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <reset+0x28>)
 80023b0:	f002 fd26 	bl	8004e00 <HAL_I2C_Master_Transmit>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f4      	bne.n	80023a4 <reset+0x8>
		}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200000b0 	.word	0x200000b0

080023c8 <readPROM>:

void readPROM(MS5611 *dev){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	6078      	str	r0, [r7, #4]
    reset();
 80023d0:	f7ff ffe4 	bl	800239c <reset>
		HAL_Delay(3000);
 80023d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023d8:	f002 f81e 	bl	8004418 <HAL_Delay>
		//read PROM
		uint8_t buf1[16];
		//uint16_t C[8];
		uint8_t CMD_PROM = 0xA0;
 80023dc:	23a0      	movs	r3, #160	; 0xa0
 80023de:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	e023      	b.n	800242e <readPROM+0x66>
		while (HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t *) &CMD_PROM, 1, 100) != HAL_OK);
 80023e6:	bf00      	nop
 80023e8:	f107 020f 	add.w	r2, r7, #15
 80023ec:	2364      	movs	r3, #100	; 0x64
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	21ee      	movs	r1, #238	; 0xee
 80023f4:	4826      	ldr	r0, [pc, #152]	; (8002490 <readPROM+0xc8>)
 80023f6:	f002 fd03 	bl	8004e00 <HAL_I2C_Master_Transmit>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f3      	bne.n	80023e8 <readPROM+0x20>
		while (HAL_I2C_Master_Receive(&hi2c1, MS5611_ADDRESS_READ, &buf1[i*2], 2, 100) != HAL_OK);
 8002400:	bf00      	nop
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	f107 0210 	add.w	r2, r7, #16
 800240a:	441a      	add	r2, r3
 800240c:	2364      	movs	r3, #100	; 0x64
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2302      	movs	r3, #2
 8002412:	21ef      	movs	r1, #239	; 0xef
 8002414:	481e      	ldr	r0, [pc, #120]	; (8002490 <readPROM+0xc8>)
 8002416:	f002 fdf1 	bl	8004ffc <HAL_I2C_Master_Receive>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <readPROM+0x3a>
		CMD_PROM = CMD_PROM + 2;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3302      	adds	r3, #2
 8002424:	b2db      	uxtb	r3, r3
 8002426:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	3301      	adds	r3, #1
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	2b07      	cmp	r3, #7
 8002432:	ddd8      	ble.n	80023e6 <readPROM+0x1e>
		}
		for (uint8_t i = 0; i < 6; i++) {
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800243a:	e01c      	b.n	8002476 <readPROM+0xae>
		dev->fc[i] = (int16_t) buf1[2*i+2] << 8 | (int16_t) buf1[2*i+3];
 800243c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002440:	3301      	adds	r3, #1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	3328      	adds	r3, #40	; 0x28
 8002446:	443b      	add	r3, r7
 8002448:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002452:	0052      	lsls	r2, r2, #1
 8002454:	3203      	adds	r2, #3
 8002456:	3228      	adds	r2, #40	; 0x28
 8002458:	443a      	add	r2, r7
 800245a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800245e:	4313      	orrs	r3, r2
 8002460:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002464:	4619      	mov	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t i = 0; i < 6; i++) {
 800246c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002470:	3301      	adds	r3, #1
 8002472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800247a:	2b05      	cmp	r3, #5
 800247c:	d9de      	bls.n	800243c <readPROM+0x74>
		}
		crc4(dev->fc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f807 	bl	8002494 <crc4>
}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200000b0 	.word	0x200000b0

08002494 <crc4>:
// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg){
	return 0; 
}
//////////////////////////////////////////////////////
unsigned char crc4(unsigned int n_prom[]) {
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	int cnt; // simple counter
	unsigned int n_rem; // crc reminder
	unsigned int crc_read; // original value of the crc
	unsigned char n_bit;
	n_rem = 0x00;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
	crc_read=n_prom[7]; //save read CRC
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	60bb      	str	r3, [r7, #8]
	n_prom[7]=(0xFF00 & (n_prom[7])); //CRC byte is replaced by 0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	331c      	adds	r3, #28
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	331c      	adds	r3, #28
 80024b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80024b4:	601a      	str	r2, [r3, #0]
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e039      	b.n	8002530 <crc4+0x9c>
		// choose LSB or MSB
		if (cnt%2==1) n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	bfb8      	it	lt
 80024c6:	425b      	neglt	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10b      	bne.n	80024e4 <crc4+0x50>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	105b      	asrs	r3, r3, #1
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4053      	eors	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e00b      	b.n	80024fc <crc4+0x68>
		else n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	105b      	asrs	r3, r3, #1
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4053      	eors	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 80024fc:	2308      	movs	r3, #8
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e010      	b.n	8002524 <crc4+0x90>
			if (n_rem & (0x8000)) {
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <crc4+0x84>
				n_rem = (n_rem << 1) ^ 0x3000; 
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e002      	b.n	800251e <crc4+0x8a>
			} else {
				n_rem = (n_rem << 1);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	3b01      	subs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1eb      	bne.n	8002502 <crc4+0x6e>
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	ddc2      	ble.n	80024bc <crc4+0x28>
			}
		}
	}
	n_rem= (0x000F & (n_rem >> 12)); // final 4-bit reminder is CRC code
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	0b1b      	lsrs	r3, r3, #12
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	613b      	str	r3, [r7, #16]
	n_prom[7]=crc_read; // restore the crc_read to its original place
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	331c      	adds	r3, #28
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	601a      	str	r2, [r3, #0]
	return (n_rem ^ 0x0);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	b2db      	uxtb	r3, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_MspInit+0x4c>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_MspInit+0x4c>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_I2C_MspInit+0x84>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d12b      	bne.n	8002622 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_I2C_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_I2C_MspInit+0x88>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_I2C_MspInit+0x88>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ea:	2312      	movs	r3, #18
 80025ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025f6:	2304      	movs	r3, #4
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <HAL_I2C_MspInit+0x8c>)
 8002602:	f002 f8d1 	bl	80047a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_I2C_MspInit+0x88>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_I2C_MspInit+0x88>)
 8002610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_I2C_MspInit+0x88>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40005400 	.word	0x40005400
 8002630:	40023800 	.word	0x40023800
 8002634:	40020400 	.word	0x40020400

08002638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08e      	sub	sp, #56	; 0x38
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_SPI_MspInit+0x160>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d14a      	bne.n	80026f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a4e      	ldr	r2, [pc, #312]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_SPI_MspInit+0x164>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <HAL_SPI_MspInit+0x164>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a47      	ldr	r2, [pc, #284]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b45      	ldr	r3, [pc, #276]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a40      	ldr	r2, [pc, #256]	; (800279c <HAL_SPI_MspInit+0x164>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b3e      	ldr	r3, [pc, #248]	; (800279c <HAL_SPI_MspInit+0x164>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026ae:	2320      	movs	r3, #32
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026be:	2305      	movs	r3, #5
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4835      	ldr	r0, [pc, #212]	; (80027a0 <HAL_SPI_MspInit+0x168>)
 80026ca:	f002 f86d 	bl	80047a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026ce:	2330      	movs	r3, #48	; 0x30
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026de:	2305      	movs	r3, #5
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	4619      	mov	r1, r3
 80026e8:	482e      	ldr	r0, [pc, #184]	; (80027a4 <HAL_SPI_MspInit+0x16c>)
 80026ea:	f002 f85d 	bl	80047a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026ee:	e04f      	b.n	8002790 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <HAL_SPI_MspInit+0x170>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d14a      	bne.n	8002790 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_SPI_MspInit+0x164>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_SPI_MspInit+0x164>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_SPI_MspInit+0x164>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800274e:	230c      	movs	r3, #12
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800275e:	2305      	movs	r3, #5
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	4619      	mov	r1, r3
 8002768:	4810      	ldr	r0, [pc, #64]	; (80027ac <HAL_SPI_MspInit+0x174>)
 800276a:	f002 f81d 	bl	80047a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800276e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002780:	2305      	movs	r3, #5
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <HAL_SPI_MspInit+0x16c>)
 800278c:	f002 f80c 	bl	80047a8 <HAL_GPIO_Init>
}
 8002790:	bf00      	nop
 8002792:	3738      	adds	r7, #56	; 0x38
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40013000 	.word	0x40013000
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40003800 	.word	0x40003800
 80027ac:	40020800 	.word	0x40020800

080027b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a44      	ldr	r2, [pc, #272]	; (80028e0 <HAL_TIM_Base_MspInit+0x130>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a42      	ldr	r2, [pc, #264]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027ee:	e073      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3c      	ldr	r2, [pc, #240]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d134      	bne.n	8002864 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002832:	2303      	movs	r3, #3
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002842:	2302      	movs	r3, #2
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4827      	ldr	r0, [pc, #156]	; (80028ec <HAL_TIM_Base_MspInit+0x13c>)
 800284e:	f001 ffab 	bl	80047a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	201d      	movs	r0, #29
 8002858:	f001 fedd 	bl	8004616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800285c:	201d      	movs	r0, #29
 800285e:	f001 fef6 	bl	800464e <HAL_NVIC_EnableIRQ>
}
 8002862:	e039      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d134      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028b8:	2302      	movs	r3, #2
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <HAL_TIM_Base_MspInit+0x144>)
 80028c4:	f001 ff70 	bl	80047a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	201e      	movs	r0, #30
 80028ce:	f001 fea2 	bl	8004616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028d2:	201e      	movs	r0, #30
 80028d4:	f001 febb 	bl	800464e <HAL_NVIC_EnableIRQ>
}
 80028d8:	bf00      	nop
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40020c00 	.word	0x40020c00

080028f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d10d      	bne.n	8002926 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <HAL_TIM_MspPostInit+0xf0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d11f      	bne.n	800299a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002976:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800297a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002988:	2301      	movs	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4827      	ldr	r0, [pc, #156]	; (8002a30 <HAL_TIM_MspPostInit+0xf8>)
 8002994:	f001 ff08 	bl	80047a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002998:	e042      	b.n	8002a20 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d13d      	bne.n	8002a20 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6313      	str	r3, [r2, #48]	; 0x30
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029ca:	f043 0302 	orr.w	r3, r3, #2
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80029dc:	f248 0306 	movw	r3, #32774	; 0x8006
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ee:	2301      	movs	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	480e      	ldr	r0, [pc, #56]	; (8002a34 <HAL_TIM_MspPostInit+0xfc>)
 80029fa:	f001 fed5 	bl	80047a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a10:	2301      	movs	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4807      	ldr	r0, [pc, #28]	; (8002a38 <HAL_TIM_MspPostInit+0x100>)
 8002a1c:	f001 fec4 	bl	80047a8 <HAL_GPIO_Init>
}
 8002a20:	bf00      	nop
 8002a22:	3728      	adds	r7, #40	; 0x28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	; 0x30
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <HAL_UART_MspInit+0x134>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d135      	bne.n	8002aca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a68:	f043 0310 	orr.w	r3, r3, #16
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a3c      	ldr	r2, [pc, #240]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4831      	ldr	r0, [pc, #196]	; (8002b78 <HAL_UART_MspInit+0x13c>)
 8002ab4:	f001 fe78 	bl	80047a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	2025      	movs	r0, #37	; 0x25
 8002abe:	f001 fdaa 	bl	8004616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ac2:	2025      	movs	r0, #37	; 0x25
 8002ac4:	f001 fdc3 	bl	800464e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ac8:	e04e      	b.n	8002b68 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_UART_MspInit+0x140>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d149      	bne.n	8002b68 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b38:	2307      	movs	r3, #7
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <HAL_UART_MspInit+0x13c>)
 8002b44:	f001 fe30 	bl	80047a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4619      	mov	r1, r3
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <HAL_UART_MspInit+0x144>)
 8002b64:	f001 fe20 	bl	80047a8 <HAL_GPIO_Init>
}
 8002b68:	bf00      	nop
 8002b6a:	3730      	adds	r7, #48	; 0x30
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40020c00 	.word	0x40020c00

08002b84 <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b92:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002b96:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	d501      	bpl.n	8002bac <limit+0x28>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	e00b      	b.n	8002bc4 <limit+0x40>
 8002bac:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	dd01      	ble.n	8002bc2 <limit+0x3e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	e000      	b.n	8002bc4 <limit+0x40>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	ee07 3a90 	vmov	s15, r3
}
 8002bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <ctl_motors_speed+0x34>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <ctl_motors_speed+0x34>)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002bf2:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <ctl_motors_speed+0x34>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <ctl_motors_speed+0x34>)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000

08002c10 <calibrated>:

uint8_t calibrated() {
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <calc_angles>:

/**
 * Calculate real angles from gyro and accelerometer's values
 */
void calc_angles() {
 8002c20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c24:	af00      	add	r7, sp, #0
  // Angle calculation using integration
  gyro_angle[X] += (g_gx / (FREQ * SSF_GYRO));
 8002c26:	4bd0      	ldr	r3, [pc, #832]	; (8002f68 <calc_angles+0x348>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fc8c 	bl	8000548 <__aeabi_f2d>
 8002c30:	4604      	mov	r4, r0
 8002c32:	460d      	mov	r5, r1
 8002c34:	4bcd      	ldr	r3, [pc, #820]	; (8002f6c <calc_angles+0x34c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fc85 	bl	8000548 <__aeabi_f2d>
 8002c3e:	a3be      	add	r3, pc, #760	; (adr r3, 8002f38 <calc_angles+0x318>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fe02 	bl	800084c <__aeabi_ddiv>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fb1c 	bl	800028c <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fd ffa4 	bl	8000ba8 <__aeabi_d2f>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4ac1      	ldr	r2, [pc, #772]	; (8002f68 <calc_angles+0x348>)
 8002c64:	6013      	str	r3, [r2, #0]
  gyro_angle[Y] += (-g_gy / (FREQ * SSF_GYRO)); // Change sign to match the accelerometer's one
 8002c66:	4bc0      	ldr	r3, [pc, #768]	; (8002f68 <calc_angles+0x348>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	4604      	mov	r4, r0
 8002c72:	460d      	mov	r5, r1
 8002c74:	4bbe      	ldr	r3, [pc, #760]	; (8002f70 <calc_angles+0x350>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	eef1 7a67 	vneg.f32	s15, s15
 8002c7e:	ee17 3a90 	vmov	r3, s15
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc60 	bl	8000548 <__aeabi_f2d>
 8002c88:	a3ab      	add	r3, pc, #684	; (adr r3, 8002f38 <calc_angles+0x318>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f7fd fddd 	bl	800084c <__aeabi_ddiv>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4620      	mov	r0, r4
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f7fd faf7 	bl	800028c <__adddf3>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7fd ff7f 	bl	8000ba8 <__aeabi_d2f>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4aae      	ldr	r2, [pc, #696]	; (8002f68 <calc_angles+0x348>)
 8002cae:	6053      	str	r3, [r2, #4]

  // Transfer roll to pitch if IMU has yawed
  gyro_angle[Y] += gyro_angle[X] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002cb0:	4bad      	ldr	r3, [pc, #692]	; (8002f68 <calc_angles+0x348>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc47 	bl	8000548 <__aeabi_f2d>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	460d      	mov	r5, r1
 8002cbe:	4baa      	ldr	r3, [pc, #680]	; (8002f68 <calc_angles+0x348>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc40 	bl	8000548 <__aeabi_f2d>
 8002cc8:	4680      	mov	r8, r0
 8002cca:	4689      	mov	r9, r1
 8002ccc:	4ba9      	ldr	r3, [pc, #676]	; (8002f74 <calc_angles+0x354>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc39 	bl	8000548 <__aeabi_f2d>
 8002cd6:	a39a      	add	r3, pc, #616	; (adr r3, 8002f40 <calc_angles+0x320>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fc8c 	bl	80005f8 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	ec43 2b17 	vmov	d7, r2, r3
 8002ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cec:	eef0 0a67 	vmov.f32	s1, s15
 8002cf0:	f006 fd96 	bl	8009820 <sin>
 8002cf4:	ec53 2b10 	vmov	r2, r3, d0
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7fd fc7c 	bl	80005f8 <__aeabi_dmul>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	f7fd fac0 	bl	800028c <__adddf3>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7fd ff48 	bl	8000ba8 <__aeabi_d2f>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a93      	ldr	r2, [pc, #588]	; (8002f68 <calc_angles+0x348>)
 8002d1c:	6053      	str	r3, [r2, #4]
  gyro_angle[X] -= gyro_angle[Y] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002d1e:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <calc_angles+0x348>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fc10 	bl	8000548 <__aeabi_f2d>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	460d      	mov	r5, r1
 8002d2c:	4b8e      	ldr	r3, [pc, #568]	; (8002f68 <calc_angles+0x348>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc09 	bl	8000548 <__aeabi_f2d>
 8002d36:	4680      	mov	r8, r0
 8002d38:	4689      	mov	r9, r1
 8002d3a:	4b8e      	ldr	r3, [pc, #568]	; (8002f74 <calc_angles+0x354>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fc02 	bl	8000548 <__aeabi_f2d>
 8002d44:	a37e      	add	r3, pc, #504	; (adr r3, 8002f40 <calc_angles+0x320>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f7fd fc55 	bl	80005f8 <__aeabi_dmul>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	ec43 2b17 	vmov	d7, r2, r3
 8002d56:	eeb0 0a47 	vmov.f32	s0, s14
 8002d5a:	eef0 0a67 	vmov.f32	s1, s15
 8002d5e:	f006 fd5f 	bl	8009820 <sin>
 8002d62:	ec53 2b10 	vmov	r2, r3, d0
 8002d66:	4640      	mov	r0, r8
 8002d68:	4649      	mov	r1, r9
 8002d6a:	f7fd fc45 	bl	80005f8 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	f7fd fa87 	bl	8000288 <__aeabi_dsub>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd ff11 	bl	8000ba8 <__aeabi_d2f>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4a77      	ldr	r2, [pc, #476]	; (8002f68 <calc_angles+0x348>)
 8002d8a:	6013      	str	r3, [r2, #0]

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  acc_total_vector = sqrt(pow(g_ax, 2) + pow(g_ay, 2) + pow(g_az, 2));
 8002d8c:	4b7a      	ldr	r3, [pc, #488]	; (8002f78 <calc_angles+0x358>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fbd9 	bl	8000548 <__aeabi_f2d>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002f48 <calc_angles+0x328>
 8002d9e:	ec43 2b10 	vmov	d0, r2, r3
 8002da2:	f006 fdcb 	bl	800993c <pow>
 8002da6:	ec55 4b10 	vmov	r4, r5, d0
 8002daa:	4b74      	ldr	r3, [pc, #464]	; (8002f7c <calc_angles+0x35c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbca 	bl	8000548 <__aeabi_f2d>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8002f48 <calc_angles+0x328>
 8002dbc:	ec43 2b10 	vmov	d0, r2, r3
 8002dc0:	f006 fdbc 	bl	800993c <pow>
 8002dc4:	ec53 2b10 	vmov	r2, r3, d0
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fa5e 	bl	800028c <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	4b69      	ldr	r3, [pc, #420]	; (8002f80 <calc_angles+0x360>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbb3 	bl	8000548 <__aeabi_f2d>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8002f48 <calc_angles+0x328>
 8002dea:	ec43 2b10 	vmov	d0, r2, r3
 8002dee:	f006 fda5 	bl	800993c <pow>
 8002df2:	ec53 2b10 	vmov	r2, r3, d0
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7fd fa47 	bl	800028c <__adddf3>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	ec43 2b17 	vmov	d7, r2, r3
 8002e06:	eeb0 0a47 	vmov.f32	s0, s14
 8002e0a:	eef0 0a67 	vmov.f32	s1, s15
 8002e0e:	f006 fe05 	bl	8009a1c <sqrt>
 8002e12:	ec53 2b10 	vmov	r2, r3, d0
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd fe9d 	bl	8000b58 <__aeabi_d2iz>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <calc_angles+0x364>)
 8002e22:	6013      	str	r3, [r2, #0]

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(g_ax) < acc_total_vector) {
 8002e24:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <calc_angles+0x358>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2e:	ee17 3a90 	vmov	r3, s15
 8002e32:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e36:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e3a:	4b52      	ldr	r3, [pc, #328]	; (8002f84 <calc_angles+0x364>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	da24      	bge.n	8002e8c <calc_angles+0x26c>
    g_ax = asin((float)g_ay / acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8002e42:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <calc_angles+0x35c>)
 8002e44:	ed93 7a00 	vldr	s14, [r3]
 8002e48:	4b4e      	ldr	r3, [pc, #312]	; (8002f84 <calc_angles+0x364>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e58:	ee16 0a90 	vmov	r0, s13
 8002e5c:	f7fd fb74 	bl	8000548 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	ec43 2b10 	vmov	d0, r2, r3
 8002e68:	f006 fd32 	bl	80098d0 <asin>
 8002e6c:	ec51 0b10 	vmov	r0, r1, d0
 8002e70:	a337      	add	r3, pc, #220	; (adr r3, 8002f50 <calc_angles+0x330>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fbbf 	bl	80005f8 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fe91 	bl	8000ba8 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <calc_angles+0x358>)
 8002e8a:	6013      	str	r3, [r2, #0]
  }

  if (abs(g_ay) < acc_total_vector) {
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <calc_angles+0x35c>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e96:	ee17 3a90 	vmov	r3, s15
 8002e9a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e9e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <calc_angles+0x364>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	da24      	bge.n	8002ef4 <calc_angles+0x2d4>
    g_ay = asin((float)g_ax / acc_total_vector) * (180 / M_PI);
 8002eaa:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <calc_angles+0x358>)
 8002eac:	ed93 7a00 	vldr	s14, [r3]
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <calc_angles+0x364>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ebc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ec0:	ee16 0a90 	vmov	r0, s13
 8002ec4:	f7fd fb40 	bl	8000548 <__aeabi_f2d>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	ec43 2b10 	vmov	d0, r2, r3
 8002ed0:	f006 fcfe 	bl	80098d0 <asin>
 8002ed4:	ec51 0b10 	vmov	r0, r1, d0
 8002ed8:	a31d      	add	r3, pc, #116	; (adr r3, 8002f50 <calc_angles+0x330>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f7fd fb8b 	bl	80005f8 <__aeabi_dmul>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fe5d 	bl	8000ba8 <__aeabi_d2f>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <calc_angles+0x35c>)
 8002ef2:	6013      	str	r3, [r2, #0]
  }

  if (initialized) {
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <calc_angles+0x368>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d07d      	beq.n	8002ff8 <calc_angles+0x3d8>
    // Correct the drift of the gyro with the accelerometer
    gyro_angle[X] = gyro_angle[X] * 0.9996 + acc_angle[X] * 0.0004;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <calc_angles+0x348>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fb21 	bl	8000548 <__aeabi_f2d>
 8002f06:	a314      	add	r3, pc, #80	; (adr r3, 8002f58 <calc_angles+0x338>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f7fd fb74 	bl	80005f8 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	461d      	mov	r5, r3
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <calc_angles+0x36c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb13 	bl	8000548 <__aeabi_f2d>
 8002f22:	a30f      	add	r3, pc, #60	; (adr r3, 8002f60 <calc_angles+0x340>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd fb66 	bl	80005f8 <__aeabi_dmul>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4620      	mov	r0, r4
 8002f32:	e02d      	b.n	8002f90 <calc_angles+0x370>
 8002f34:	f3af 8000 	nop.w
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	40c99600 	.word	0x40c99600
 8002f40:	fb7aa1c6 	.word	0xfb7aa1c6
 8002f44:	3eb65a3c 	.word	0x3eb65a3c
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	40000000 	.word	0x40000000
 8002f50:	1a63c1f8 	.word	0x1a63c1f8
 8002f54:	404ca5dc 	.word	0x404ca5dc
 8002f58:	23a29c78 	.word	0x23a29c78
 8002f5c:	3feffcb9 	.word	0x3feffcb9
 8002f60:	eb1c432d 	.word	0xeb1c432d
 8002f64:	3f3a36e2 	.word	0x3f3a36e2
 8002f68:	20000680 	.word	0x20000680
 8002f6c:	20000674 	.word	0x20000674
 8002f70:	20000678 	.word	0x20000678
 8002f74:	2000067c 	.word	0x2000067c
 8002f78:	20000668 	.word	0x20000668
 8002f7c:	2000066c 	.word	0x2000066c
 8002f80:	20000670 	.word	0x20000670
 8002f84:	200006a4 	.word	0x200006a4
 8002f88:	200006a8 	.word	0x200006a8
 8002f8c:	2000068c 	.word	0x2000068c
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7fd f97b 	bl	800028c <__adddf3>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f7fd fe03 	bl	8000ba8 <__aeabi_d2f>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a68      	ldr	r2, [pc, #416]	; (8003148 <calc_angles+0x528>)
 8002fa6:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = gyro_angle[Y] * 0.9996 + acc_angle[Y] * 0.0004;
 8002fa8:	4b67      	ldr	r3, [pc, #412]	; (8003148 <calc_angles+0x528>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd facb 	bl	8000548 <__aeabi_f2d>
 8002fb2:	a35b      	add	r3, pc, #364	; (adr r3, 8003120 <calc_angles+0x500>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f7fd fb1e 	bl	80005f8 <__aeabi_dmul>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	461d      	mov	r5, r3
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <calc_angles+0x52c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fabd 	bl	8000548 <__aeabi_f2d>
 8002fce:	a356      	add	r3, pc, #344	; (adr r3, 8003128 <calc_angles+0x508>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f7fd fb10 	bl	80005f8 <__aeabi_dmul>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4620      	mov	r0, r4
 8002fde:	4629      	mov	r1, r5
 8002fe0:	f7fd f954 	bl	800028c <__adddf3>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fddc 	bl	8000ba8 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4a55      	ldr	r2, [pc, #340]	; (8003148 <calc_angles+0x528>)
 8002ff4:	6053      	str	r3, [r2, #4]
 8002ff6:	e00a      	b.n	800300e <calc_angles+0x3ee>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    gyro_angle[X] = acc_angle[X];
 8002ff8:	4b54      	ldr	r3, [pc, #336]	; (800314c <calc_angles+0x52c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <calc_angles+0x528>)
 8002ffe:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = acc_angle[Y];
 8003000:	4b52      	ldr	r3, [pc, #328]	; (800314c <calc_angles+0x52c>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <calc_angles+0x528>)
 8003006:	6053      	str	r3, [r2, #4]

    initialized = 1;
 8003008:	4b51      	ldr	r3, [pc, #324]	; (8003150 <calc_angles+0x530>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
  }

  // To dampen the pitch and roll angles a complementary filter is used
  measures[ROLL]  = measures[ROLL]  * 0.9 + gyro_angle[X] * 0.1;
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <calc_angles+0x534>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fa98 	bl	8000548 <__aeabi_f2d>
 8003018:	a345      	add	r3, pc, #276	; (adr r3, 8003130 <calc_angles+0x510>)
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	f7fd faeb 	bl	80005f8 <__aeabi_dmul>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4614      	mov	r4, r2
 8003028:	461d      	mov	r5, r3
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <calc_angles+0x528>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fa8a 	bl	8000548 <__aeabi_f2d>
 8003034:	a340      	add	r3, pc, #256	; (adr r3, 8003138 <calc_angles+0x518>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f7fd fadd 	bl	80005f8 <__aeabi_dmul>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4620      	mov	r0, r4
 8003044:	4629      	mov	r1, r5
 8003046:	f7fd f921 	bl	800028c <__adddf3>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fda9 	bl	8000ba8 <__aeabi_d2f>
 8003056:	4603      	mov	r3, r0
 8003058:	4a3e      	ldr	r2, [pc, #248]	; (8003154 <calc_angles+0x534>)
 800305a:	6093      	str	r3, [r2, #8]
  measures[PITCH] = measures[PITCH] * 0.9 + gyro_angle[Y] * 0.1;
 800305c:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <calc_angles+0x534>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fa71 	bl	8000548 <__aeabi_f2d>
 8003066:	a332      	add	r3, pc, #200	; (adr r3, 8003130 <calc_angles+0x510>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f7fd fac4 	bl	80005f8 <__aeabi_dmul>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	4b33      	ldr	r3, [pc, #204]	; (8003148 <calc_angles+0x528>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa63 	bl	8000548 <__aeabi_f2d>
 8003082:	a32d      	add	r3, pc, #180	; (adr r3, 8003138 <calc_angles+0x518>)
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f7fd fab6 	bl	80005f8 <__aeabi_dmul>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4620      	mov	r0, r4
 8003092:	4629      	mov	r1, r5
 8003094:	f7fd f8fa 	bl	800028c <__adddf3>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fd82 	bl	8000ba8 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <calc_angles+0x534>)
 80030a8:	6053      	str	r3, [r2, #4]
  measures[YAW] = -g_gz / SSF_GYRO; // Store the angular motion for this axis
 80030aa:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <calc_angles+0x538>)
 80030ac:	edd3 7a00 	vldr	s15, [r3]
 80030b0:	eeb1 7a67 	vneg.f32	s14, s15
 80030b4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800315c <calc_angles+0x53c>
 80030b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <calc_angles+0x534>)
 80030be:	edc3 7a00 	vstr	s15, [r3]

  // Norm [-1, 1]
  g_angle_x = -measures[PITCH];
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <calc_angles+0x534>)
 80030c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c8:	eef1 7a67 	vneg.f32	s15, s15
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <calc_angles+0x540>)
 80030ce:	edc3 7a00 	vstr	s15, [r3]
  g_angle_y = measures[ROLL];
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <calc_angles+0x534>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a23      	ldr	r2, [pc, #140]	; (8003164 <calc_angles+0x544>)
 80030d8:	6013      	str	r3, [r2, #0]
  g_angle_z += measures[YAW]*0.001;
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <calc_angles+0x548>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fa32 	bl	8000548 <__aeabi_f2d>
 80030e4:	4604      	mov	r4, r0
 80030e6:	460d      	mov	r5, r1
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <calc_angles+0x534>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa2b 	bl	8000548 <__aeabi_f2d>
 80030f2:	a313      	add	r3, pc, #76	; (adr r3, 8003140 <calc_angles+0x520>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f7fd fa7e 	bl	80005f8 <__aeabi_dmul>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4620      	mov	r0, r4
 8003102:	4629      	mov	r1, r5
 8003104:	f7fd f8c2 	bl	800028c <__adddf3>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f7fd fd4a 	bl	8000ba8 <__aeabi_d2f>
 8003114:	4603      	mov	r3, r0
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <calc_angles+0x548>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003120:	23a29c78 	.word	0x23a29c78
 8003124:	3feffcb9 	.word	0x3feffcb9
 8003128:	eb1c432d 	.word	0xeb1c432d
 800312c:	3f3a36e2 	.word	0x3f3a36e2
 8003130:	cccccccd 	.word	0xcccccccd
 8003134:	3feccccc 	.word	0x3feccccc
 8003138:	9999999a 	.word	0x9999999a
 800313c:	3fb99999 	.word	0x3fb99999
 8003140:	d2f1a9fc 	.word	0xd2f1a9fc
 8003144:	3f50624d 	.word	0x3f50624d
 8003148:	20000680 	.word	0x20000680
 800314c:	2000068c 	.word	0x2000068c
 8003150:	200006a8 	.word	0x200006a8
 8003154:	20000698 	.word	0x20000698
 8003158:	2000067c 	.word	0x2000067c
 800315c:	42830000 	.word	0x42830000
 8003160:	200006ac 	.word	0x200006ac
 8003164:	200006b0 	.word	0x200006b0
 8003168:	200006b4 	.word	0x200006b4

0800316c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <NMI_Handler+0x4>

08003172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <HardFault_Handler+0x4>

08003178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <MemManage_Handler+0x4>

0800317e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003182:	e7fe      	b.n	8003182 <BusFault_Handler+0x4>

08003184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003188:	e7fe      	b.n	8003188 <UsageFault_Handler+0x4>

0800318a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031b8:	f001 f90e 	bl	80043d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}

080031c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b090      	sub	sp, #64	; 0x40
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  // Read MPU6050 values
  SD_MPU6050_ReadAll(&hi2c1, &g_dev1);
 80031c6:	4958      	ldr	r1, [pc, #352]	; (8003328 <TIM3_IRQHandler+0x168>)
 80031c8:	4858      	ldr	r0, [pc, #352]	; (800332c <TIM3_IRQHandler+0x16c>)
 80031ca:	f7fe ff9d 	bl	8002108 <SD_MPU6050_ReadAll>
  HMC5883L_getHeading(&g_mx, &g_my, &g_mz);
 80031ce:	4a58      	ldr	r2, [pc, #352]	; (8003330 <TIM3_IRQHandler+0x170>)
 80031d0:	4958      	ldr	r1, [pc, #352]	; (8003334 <TIM3_IRQHandler+0x174>)
 80031d2:	4859      	ldr	r0, [pc, #356]	; (8003338 <TIM3_IRQHandler+0x178>)
 80031d4:	f7fd ff46 	bl	8001064 <HMC5883L_getHeading>

  if (!calibrated()) {
 80031d8:	f7ff fd1a 	bl	8002c10 <calibrated>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 80ce 	bne.w	8003380 <TIM3_IRQHandler+0x1c0>
    float ax = g_dev1.Accelerometer_X + g_ax_offset;
 80031e4:	4b50      	ldr	r3, [pc, #320]	; (8003328 <TIM3_IRQHandler+0x168>)
 80031e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f2:	4b52      	ldr	r3, [pc, #328]	; (800333c <TIM3_IRQHandler+0x17c>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float ay = g_dev1.Accelerometer_Y + g_ay_offset;
 8003200:	4b49      	ldr	r3, [pc, #292]	; (8003328 <TIM3_IRQHandler+0x168>)
 8003202:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800320e:	4b4c      	ldr	r3, [pc, #304]	; (8003340 <TIM3_IRQHandler+0x180>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	edc7 7a08 	vstr	s15, [r7, #32]
    float az = atan2(g_my, g_mx);
 800321c:	4b45      	ldr	r3, [pc, #276]	; (8003334 <TIM3_IRQHandler+0x174>)
 800321e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd f97e 	bl	8000524 <__aeabi_i2d>
 8003228:	4604      	mov	r4, r0
 800322a:	460d      	mov	r5, r1
 800322c:	4b42      	ldr	r3, [pc, #264]	; (8003338 <TIM3_IRQHandler+0x178>)
 800322e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f976 	bl	8000524 <__aeabi_i2d>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	ec43 2b11 	vmov	d1, r2, r3
 8003240:	ec45 4b10 	vmov	d0, r4, r5
 8003244:	f006 fb78 	bl	8009938 <atan2>
 8003248:	ec53 2b10 	vmov	r2, r3, d0
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f7fd fcaa 	bl	8000ba8 <__aeabi_d2f>
 8003254:	4603      	mov	r3, r0
 8003256:	61fb      	str	r3, [r7, #28]
    float gx = g_dev1.Gyroscope_X + g_gx_offset;
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <TIM3_IRQHandler+0x168>)
 800325a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <TIM3_IRQHandler+0x184>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003270:	edc7 7a06 	vstr	s15, [r7, #24]
    float gy = g_dev1.Gyroscope_Y + g_gy_offset;
 8003274:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <TIM3_IRQHandler+0x168>)
 8003276:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <TIM3_IRQHandler+0x188>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328c:	edc7 7a05 	vstr	s15, [r7, #20]
    float gz = g_dev1.Gyroscope_Z + g_gz_offset;
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <TIM3_IRQHandler+0x168>)
 8003292:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800329e:	4b2b      	ldr	r3, [pc, #172]	; (800334c <TIM3_IRQHandler+0x18c>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a8:	edc7 7a04 	vstr	s15, [r7, #16]

    g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], ax);
 80032ac:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80032b0:	4827      	ldr	r0, [pc, #156]	; (8003350 <TIM3_IRQHandler+0x190>)
 80032b2:	f7fd ff3c 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80032b6:	eef0 7a40 	vmov.f32	s15, s0
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <TIM3_IRQHandler+0x194>)
 80032bc:	edc3 7a00 	vstr	s15, [r3]
    g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], ay);
 80032c0:	ed97 0a08 	vldr	s0, [r7, #32]
 80032c4:	4824      	ldr	r0, [pc, #144]	; (8003358 <TIM3_IRQHandler+0x198>)
 80032c6:	f7fd ff32 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80032ca:	eef0 7a40 	vmov.f32	s15, s0
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <TIM3_IRQHandler+0x19c>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
    g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], az);
 80032d4:	ed97 0a07 	vldr	s0, [r7, #28]
 80032d8:	4821      	ldr	r0, [pc, #132]	; (8003360 <TIM3_IRQHandler+0x1a0>)
 80032da:	f7fd ff28 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80032de:	eef0 7a40 	vmov.f32	s15, s0
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <TIM3_IRQHandler+0x1a4>)
 80032e4:	edc3 7a00 	vstr	s15, [r3]
    g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], gx);
 80032e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80032ec:	481e      	ldr	r0, [pc, #120]	; (8003368 <TIM3_IRQHandler+0x1a8>)
 80032ee:	f7fd ff1e 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80032f2:	eef0 7a40 	vmov.f32	s15, s0
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <TIM3_IRQHandler+0x1ac>)
 80032f8:	edc3 7a00 	vstr	s15, [r3]
    g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], gy);
 80032fc:	ed97 0a05 	vldr	s0, [r7, #20]
 8003300:	481b      	ldr	r0, [pc, #108]	; (8003370 <TIM3_IRQHandler+0x1b0>)
 8003302:	f7fd ff14 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8003306:	eef0 7a40 	vmov.f32	s15, s0
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <TIM3_IRQHandler+0x1b4>)
 800330c:	edc3 7a00 	vstr	s15, [r3]
    g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], gz);
 8003310:	ed97 0a04 	vldr	s0, [r7, #16]
 8003314:	4818      	ldr	r0, [pc, #96]	; (8003378 <TIM3_IRQHandler+0x1b8>)
 8003316:	f7fd ff0a 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 800331a:	eef0 7a40 	vmov.f32	s15, s0
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <TIM3_IRQHandler+0x1bc>)
 8003320:	edc3 7a00 	vstr	s15, [r3]
 8003324:	e0cc      	b.n	80034c0 <TIM3_IRQHandler+0x300>
 8003326:	bf00      	nop
 8003328:	200004dc 	.word	0x200004dc
 800332c:	200000b0 	.word	0x200000b0
 8003330:	200006c8 	.word	0x200006c8
 8003334:	200006c6 	.word	0x200006c6
 8003338:	200006c4 	.word	0x200006c4
 800333c:	20000008 	.word	0x20000008
 8003340:	2000000c 	.word	0x2000000c
 8003344:	20000010 	.word	0x20000010
 8003348:	20000014 	.word	0x20000014
 800334c:	20000018 	.word	0x20000018
 8003350:	2000035c 	.word	0x2000035c
 8003354:	20000668 	.word	0x20000668
 8003358:	20000374 	.word	0x20000374
 800335c:	2000066c 	.word	0x2000066c
 8003360:	2000038c 	.word	0x2000038c
 8003364:	20000670 	.word	0x20000670
 8003368:	200003a4 	.word	0x200003a4
 800336c:	20000674 	.word	0x20000674
 8003370:	200003bc 	.word	0x200003bc
 8003374:	20000678 	.word	0x20000678
 8003378:	200003d4 	.word	0x200003d4
 800337c:	2000067c 	.word	0x2000067c
  }
  else {
    float ax = g_dev1.Accelerometer_X + g_ax_offset;
 8003380:	4bd5      	ldr	r3, [pc, #852]	; (80036d8 <TIM3_IRQHandler+0x518>)
 8003382:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800338e:	4bd3      	ldr	r3, [pc, #844]	; (80036dc <TIM3_IRQHandler+0x51c>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003398:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float ay = g_dev1.Accelerometer_Y + g_ay_offset;
 800339c:	4bce      	ldr	r3, [pc, #824]	; (80036d8 <TIM3_IRQHandler+0x518>)
 800339e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033aa:	4bcd      	ldr	r3, [pc, #820]	; (80036e0 <TIM3_IRQHandler+0x520>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float az = atan2(g_my, g_mx);
 80033b8:	4bca      	ldr	r3, [pc, #808]	; (80036e4 <TIM3_IRQHandler+0x524>)
 80033ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f8b0 	bl	8000524 <__aeabi_i2d>
 80033c4:	4604      	mov	r4, r0
 80033c6:	460d      	mov	r5, r1
 80033c8:	4bc7      	ldr	r3, [pc, #796]	; (80036e8 <TIM3_IRQHandler+0x528>)
 80033ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd f8a8 	bl	8000524 <__aeabi_i2d>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	ec43 2b11 	vmov	d1, r2, r3
 80033dc:	ec45 4b10 	vmov	d0, r4, r5
 80033e0:	f006 faaa 	bl	8009938 <atan2>
 80033e4:	ec53 2b10 	vmov	r2, r3, d0
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fbdc 	bl	8000ba8 <__aeabi_d2f>
 80033f0:	4603      	mov	r3, r0
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
    float gx = g_dev1.Gyroscope_X + g_gx_offset;
 80033f4:	4bb8      	ldr	r3, [pc, #736]	; (80036d8 <TIM3_IRQHandler+0x518>)
 80033f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003402:	4bba      	ldr	r3, [pc, #744]	; (80036ec <TIM3_IRQHandler+0x52c>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float gy = g_dev1.Gyroscope_Y + g_gy_offset;
 8003410:	4bb1      	ldr	r3, [pc, #708]	; (80036d8 <TIM3_IRQHandler+0x518>)
 8003412:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800341e:	4bb4      	ldr	r3, [pc, #720]	; (80036f0 <TIM3_IRQHandler+0x530>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float gz = g_dev1.Gyroscope_Z + g_gz_offset;
 800342c:	4baa      	ldr	r3, [pc, #680]	; (80036d8 <TIM3_IRQHandler+0x518>)
 800342e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800343a:	4bae      	ldr	r3, [pc, #696]	; (80036f4 <TIM3_IRQHandler+0x534>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003444:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // Remove noise
    g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], ax);
 8003448:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800344c:	48aa      	ldr	r0, [pc, #680]	; (80036f8 <TIM3_IRQHandler+0x538>)
 800344e:	f7fd fe6e 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8003452:	eef0 7a40 	vmov.f32	s15, s0
 8003456:	4ba9      	ldr	r3, [pc, #676]	; (80036fc <TIM3_IRQHandler+0x53c>)
 8003458:	edc3 7a00 	vstr	s15, [r3]
    g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], ay);
 800345c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8003460:	48a7      	ldr	r0, [pc, #668]	; (8003700 <TIM3_IRQHandler+0x540>)
 8003462:	f7fd fe64 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8003466:	eef0 7a40 	vmov.f32	s15, s0
 800346a:	4ba6      	ldr	r3, [pc, #664]	; (8003704 <TIM3_IRQHandler+0x544>)
 800346c:	edc3 7a00 	vstr	s15, [r3]
    g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], az);
 8003470:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003474:	48a4      	ldr	r0, [pc, #656]	; (8003708 <TIM3_IRQHandler+0x548>)
 8003476:	f7fd fe5a 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 800347a:	eef0 7a40 	vmov.f32	s15, s0
 800347e:	4ba3      	ldr	r3, [pc, #652]	; (800370c <TIM3_IRQHandler+0x54c>)
 8003480:	edc3 7a00 	vstr	s15, [r3]
    g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], gx);
 8003484:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003488:	48a1      	ldr	r0, [pc, #644]	; (8003710 <TIM3_IRQHandler+0x550>)
 800348a:	f7fd fe50 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 800348e:	eef0 7a40 	vmov.f32	s15, s0
 8003492:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <TIM3_IRQHandler+0x554>)
 8003494:	edc3 7a00 	vstr	s15, [r3]
    g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], gy);
 8003498:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800349c:	489e      	ldr	r0, [pc, #632]	; (8003718 <TIM3_IRQHandler+0x558>)
 800349e:	f7fd fe46 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80034a2:	eef0 7a40 	vmov.f32	s15, s0
 80034a6:	4b9d      	ldr	r3, [pc, #628]	; (800371c <TIM3_IRQHandler+0x55c>)
 80034a8:	edc3 7a00 	vstr	s15, [r3]
    g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], gz);
 80034ac:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80034b0:	489b      	ldr	r0, [pc, #620]	; (8003720 <TIM3_IRQHandler+0x560>)
 80034b2:	f7fd fe3c 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80034b6:	eef0 7a40 	vmov.f32	s15, s0
 80034ba:	4b9a      	ldr	r3, [pc, #616]	; (8003724 <TIM3_IRQHandler+0x564>)
 80034bc:	edc3 7a00 	vstr	s15, [r3]
  }

  calc_angles();
 80034c0:	f7ff fbae 	bl	8002c20 <calc_angles>

  g_angle_x = limit(g_angle_x, -90, 90) / 90;
 80034c4:	4b98      	ldr	r3, [pc, #608]	; (8003728 <TIM3_IRQHandler+0x568>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	ed9f 1a98 	vldr	s2, [pc, #608]	; 800372c <TIM3_IRQHandler+0x56c>
 80034ce:	eddf 0a98 	vldr	s1, [pc, #608]	; 8003730 <TIM3_IRQHandler+0x570>
 80034d2:	eeb0 0a67 	vmov.f32	s0, s15
 80034d6:	f7ff fb55 	bl	8002b84 <limit>
 80034da:	eeb0 7a40 	vmov.f32	s14, s0
 80034de:	eddf 6a93 	vldr	s13, [pc, #588]	; 800372c <TIM3_IRQHandler+0x56c>
 80034e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e6:	4b90      	ldr	r3, [pc, #576]	; (8003728 <TIM3_IRQHandler+0x568>)
 80034e8:	edc3 7a00 	vstr	s15, [r3]
  g_angle_y = limit(g_angle_y, -90, 90) / 90;
 80034ec:	4b91      	ldr	r3, [pc, #580]	; (8003734 <TIM3_IRQHandler+0x574>)
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800372c <TIM3_IRQHandler+0x56c>
 80034f6:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8003730 <TIM3_IRQHandler+0x570>
 80034fa:	eeb0 0a67 	vmov.f32	s0, s15
 80034fe:	f7ff fb41 	bl	8002b84 <limit>
 8003502:	eeb0 7a40 	vmov.f32	s14, s0
 8003506:	eddf 6a89 	vldr	s13, [pc, #548]	; 800372c <TIM3_IRQHandler+0x56c>
 800350a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800350e:	4b89      	ldr	r3, [pc, #548]	; (8003734 <TIM3_IRQHandler+0x574>)
 8003510:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_x = limit(g_gx, -2000, 2000) / 2000;
 8003514:	4b7f      	ldr	r3, [pc, #508]	; (8003714 <TIM3_IRQHandler+0x554>)
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8003738 <TIM3_IRQHandler+0x578>
 800351e:	eddf 0a87 	vldr	s1, [pc, #540]	; 800373c <TIM3_IRQHandler+0x57c>
 8003522:	eeb0 0a67 	vmov.f32	s0, s15
 8003526:	f7ff fb2d 	bl	8002b84 <limit>
 800352a:	eeb0 7a40 	vmov.f32	s14, s0
 800352e:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003738 <TIM3_IRQHandler+0x578>
 8003532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003536:	4b82      	ldr	r3, [pc, #520]	; (8003740 <TIM3_IRQHandler+0x580>)
 8003538:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_y = limit(g_gy, -2000, 2000) / 2000;
 800353c:	4b77      	ldr	r3, [pc, #476]	; (800371c <TIM3_IRQHandler+0x55c>)
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8003738 <TIM3_IRQHandler+0x578>
 8003546:	eddf 0a7d 	vldr	s1, [pc, #500]	; 800373c <TIM3_IRQHandler+0x57c>
 800354a:	eeb0 0a67 	vmov.f32	s0, s15
 800354e:	f7ff fb19 	bl	8002b84 <limit>
 8003552:	eeb0 7a40 	vmov.f32	s14, s0
 8003556:	eddf 6a78 	vldr	s13, [pc, #480]	; 8003738 <TIM3_IRQHandler+0x578>
 800355a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800355e:	4b79      	ldr	r3, [pc, #484]	; (8003744 <TIM3_IRQHandler+0x584>)
 8003560:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_z = limit(g_gz, -2000, 2000) / 2000;
 8003564:	4b6f      	ldr	r3, [pc, #444]	; (8003724 <TIM3_IRQHandler+0x564>)
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8003738 <TIM3_IRQHandler+0x578>
 800356e:	eddf 0a73 	vldr	s1, [pc, #460]	; 800373c <TIM3_IRQHandler+0x57c>
 8003572:	eeb0 0a67 	vmov.f32	s0, s15
 8003576:	f7ff fb05 	bl	8002b84 <limit>
 800357a:	eeb0 7a40 	vmov.f32	s14, s0
 800357e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003738 <TIM3_IRQHandler+0x578>
 8003582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003586:	4b70      	ldr	r3, [pc, #448]	; (8003748 <TIM3_IRQHandler+0x588>)
 8003588:	edc3 7a00 	vstr	s15, [r3]

  // Control pitch, roll, yaw using offsets
  float angle_x = g_angle_x - 0.02*g_pitch;
 800358c:	4b66      	ldr	r3, [pc, #408]	; (8003728 <TIM3_IRQHandler+0x568>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ffd9 	bl	8000548 <__aeabi_f2d>
 8003596:	4604      	mov	r4, r0
 8003598:	460d      	mov	r5, r1
 800359a:	4b6c      	ldr	r3, [pc, #432]	; (800374c <TIM3_IRQHandler+0x58c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ffd2 	bl	8000548 <__aeabi_f2d>
 80035a4:	a34a      	add	r3, pc, #296	; (adr r3, 80036d0 <TIM3_IRQHandler+0x510>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f7fd f825 	bl	80005f8 <__aeabi_dmul>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f7fc fe67 	bl	8000288 <__aeabi_dsub>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	f7fd faf1 	bl	8000ba8 <__aeabi_d2f>
 80035c6:	4603      	mov	r3, r0
 80035c8:	60fb      	str	r3, [r7, #12]
  float angle_y = g_angle_y + 0.02*g_roll;
 80035ca:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <TIM3_IRQHandler+0x574>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffba 	bl	8000548 <__aeabi_f2d>
 80035d4:	4604      	mov	r4, r0
 80035d6:	460d      	mov	r5, r1
 80035d8:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <TIM3_IRQHandler+0x590>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffb3 	bl	8000548 <__aeabi_f2d>
 80035e2:	a33b      	add	r3, pc, #236	; (adr r3, 80036d0 <TIM3_IRQHandler+0x510>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fd f806 	bl	80005f8 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4620      	mov	r0, r4
 80035f2:	4629      	mov	r1, r5
 80035f4:	f7fc fe4a 	bl	800028c <__adddf3>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f7fd fad2 	bl	8000ba8 <__aeabi_d2f>
 8003604:	4603      	mov	r3, r0
 8003606:	60bb      	str	r3, [r7, #8]
  float angle_z = limit(g_angle_z, -90, 90) / 90 - 0.02*g_yaw;
 8003608:	4b52      	ldr	r3, [pc, #328]	; (8003754 <TIM3_IRQHandler+0x594>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	ed9f 1a47 	vldr	s2, [pc, #284]	; 800372c <TIM3_IRQHandler+0x56c>
 8003612:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003730 <TIM3_IRQHandler+0x570>
 8003616:	eeb0 0a67 	vmov.f32	s0, s15
 800361a:	f7ff fab3 	bl	8002b84 <limit>
 800361e:	eef0 7a40 	vmov.f32	s15, s0
 8003622:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800372c <TIM3_IRQHandler+0x56c>
 8003626:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800362a:	ee16 0a90 	vmov	r0, s13
 800362e:	f7fc ff8b 	bl	8000548 <__aeabi_f2d>
 8003632:	4604      	mov	r4, r0
 8003634:	460d      	mov	r5, r1
 8003636:	4b48      	ldr	r3, [pc, #288]	; (8003758 <TIM3_IRQHandler+0x598>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc ff84 	bl	8000548 <__aeabi_f2d>
 8003640:	a323      	add	r3, pc, #140	; (adr r3, 80036d0 <TIM3_IRQHandler+0x510>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f7fc ffd7 	bl	80005f8 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4620      	mov	r0, r4
 8003650:	4629      	mov	r1, r5
 8003652:	f7fc fe19 	bl	8000288 <__aeabi_dsub>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f7fd faa3 	bl	8000ba8 <__aeabi_d2f>
 8003662:	4603      	mov	r3, r0
 8003664:	607b      	str	r3, [r7, #4]

  if (g_thrust <= -99 && g_yaw <= -99
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <TIM3_IRQHandler+0x59c>)
 8003668:	edd3 7a00 	vldr	s15, [r3]
 800366c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003760 <TIM3_IRQHandler+0x5a0>
 8003670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	d820      	bhi.n	80036bc <TIM3_IRQHandler+0x4fc>
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <TIM3_IRQHandler+0x598>)
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003760 <TIM3_IRQHandler+0x5a0>
 8003684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368c:	d816      	bhi.n	80036bc <TIM3_IRQHandler+0x4fc>
      && g_pitch <= -99 && g_roll >= 98) {
 800368e:	4b2f      	ldr	r3, [pc, #188]	; (800374c <TIM3_IRQHandler+0x58c>)
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003760 <TIM3_IRQHandler+0x5a0>
 8003698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a0:	d80c      	bhi.n	80036bc <TIM3_IRQHandler+0x4fc>
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <TIM3_IRQHandler+0x590>)
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003764 <TIM3_IRQHandler+0x5a4>
 80036ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	db02      	blt.n	80036bc <TIM3_IRQHandler+0x4fc>
    fly_mode = ready;
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <TIM3_IRQHandler+0x5a8>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
  }

  g_conn_lost_counter += 1;
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <TIM3_IRQHandler+0x5ac>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	4a2a      	ldr	r2, [pc, #168]	; (800376c <TIM3_IRQHandler+0x5ac>)
 80036c4:	6013      	str	r3, [r2, #0]
  if (g_conn_lost_counter > MAX_LOST_CONN_COUNTER || g_conn_lost_counter < 0) {
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <TIM3_IRQHandler+0x5ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b32      	cmp	r3, #50	; 0x32
 80036cc:	e050      	b.n	8003770 <TIM3_IRQHandler+0x5b0>
 80036ce:	bf00      	nop
 80036d0:	47ae147b 	.word	0x47ae147b
 80036d4:	3f947ae1 	.word	0x3f947ae1
 80036d8:	200004dc 	.word	0x200004dc
 80036dc:	20000008 	.word	0x20000008
 80036e0:	2000000c 	.word	0x2000000c
 80036e4:	200006c6 	.word	0x200006c6
 80036e8:	200006c4 	.word	0x200006c4
 80036ec:	20000010 	.word	0x20000010
 80036f0:	20000014 	.word	0x20000014
 80036f4:	20000018 	.word	0x20000018
 80036f8:	2000035c 	.word	0x2000035c
 80036fc:	20000668 	.word	0x20000668
 8003700:	20000374 	.word	0x20000374
 8003704:	2000066c 	.word	0x2000066c
 8003708:	2000038c 	.word	0x2000038c
 800370c:	20000670 	.word	0x20000670
 8003710:	200003a4 	.word	0x200003a4
 8003714:	20000674 	.word	0x20000674
 8003718:	200003bc 	.word	0x200003bc
 800371c:	20000678 	.word	0x20000678
 8003720:	200003d4 	.word	0x200003d4
 8003724:	2000067c 	.word	0x2000067c
 8003728:	200006ac 	.word	0x200006ac
 800372c:	42b40000 	.word	0x42b40000
 8003730:	c2b40000 	.word	0xc2b40000
 8003734:	200006b0 	.word	0x200006b0
 8003738:	44fa0000 	.word	0x44fa0000
 800373c:	c4fa0000 	.word	0xc4fa0000
 8003740:	200006b8 	.word	0x200006b8
 8003744:	200006bc 	.word	0x200006bc
 8003748:	200006c0 	.word	0x200006c0
 800374c:	20000744 	.word	0x20000744
 8003750:	20000748 	.word	0x20000748
 8003754:	200006b4 	.word	0x200006b4
 8003758:	2000074c 	.word	0x2000074c
 800375c:	20000740 	.word	0x20000740
 8003760:	c2c60000 	.word	0xc2c60000
 8003764:	42c40000 	.word	0x42c40000
 8003768:	200006ca 	.word	0x200006ca
 800376c:	20000004 	.word	0x20000004
 8003770:	dc03      	bgt.n	800377a <TIM3_IRQHandler+0x5ba>
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <TIM3_IRQHandler+0x768>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	da14      	bge.n	80037a4 <TIM3_IRQHandler+0x5e4>
    g_I_pitch = 0;
 800377a:	4b6c      	ldr	r3, [pc, #432]	; (800392c <TIM3_IRQHandler+0x76c>)
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    g_I_roll = 0;
 8003782:	4b6b      	ldr	r3, [pc, #428]	; (8003930 <TIM3_IRQHandler+0x770>)
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
    g_I_yaw = 0;
 800378a:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <TIM3_IRQHandler+0x774>)
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003792:	230f      	movs	r3, #15
 8003794:	220f      	movs	r2, #15
 8003796:	210f      	movs	r1, #15
 8003798:	200f      	movs	r0, #15
 800379a:	f7ff fa1d 	bl	8002bd8 <ctl_motors_speed>
    fly_mode = init;
 800379e:	4b66      	ldr	r3, [pc, #408]	; (8003938 <TIM3_IRQHandler+0x778>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 80037a4:	4b64      	ldr	r3, [pc, #400]	; (8003938 <TIM3_IRQHandler+0x778>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	f200 8317 	bhi.w	8003ddc <TIM3_IRQHandler+0xc1c>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <TIM3_IRQHandler+0x5f4>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037d1 	.word	0x080037d1
 80037b8:	080037f7 	.word	0x080037f7
 80037bc:	0800383d 	.word	0x0800383d
 80037c0:	08003853 	.word	0x08003853
 80037c4:	08003869 	.word	0x08003869
 80037c8:	0800387f 	.word	0x0800387f
 80037cc:	08003959 	.word	0x08003959
    case init:
      g_I_pitch = 0;
 80037d0:	4b56      	ldr	r3, [pc, #344]	; (800392c <TIM3_IRQHandler+0x76c>)
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
      g_I_roll = 0;
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <TIM3_IRQHandler+0x770>)
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
      g_I_yaw = 0;
 80037e0:	4b54      	ldr	r3, [pc, #336]	; (8003934 <TIM3_IRQHandler+0x774>)
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80037e8:	230f      	movs	r3, #15
 80037ea:	220f      	movs	r2, #15
 80037ec:	210f      	movs	r1, #15
 80037ee:	200f      	movs	r0, #15
 80037f0:	f7ff f9f2 	bl	8002bd8 <ctl_motors_speed>
      break;
 80037f4:	e2f2      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
    case ready:
      g_I_pitch = 0;
 80037f6:	4b4d      	ldr	r3, [pc, #308]	; (800392c <TIM3_IRQHandler+0x76c>)
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
      g_I_roll = 0;
 80037fe:	4b4c      	ldr	r3, [pc, #304]	; (8003930 <TIM3_IRQHandler+0x770>)
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
      g_I_yaw = 0;
 8003806:	4b4b      	ldr	r3, [pc, #300]	; (8003934 <TIM3_IRQHandler+0x774>)
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800380e:	f240 2323 	movw	r3, #547	; 0x223
 8003812:	f240 2223 	movw	r2, #547	; 0x223
 8003816:	f240 2123 	movw	r1, #547	; 0x223
 800381a:	f240 2023 	movw	r0, #547	; 0x223
 800381e:	f7ff f9db 	bl	8002bd8 <ctl_motors_speed>
      if (g_thrust > 0) {
 8003822:	4b46      	ldr	r3, [pc, #280]	; (800393c <TIM3_IRQHandler+0x77c>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	dc00      	bgt.n	8003834 <TIM3_IRQHandler+0x674>
        fly_mode = testing_2;
      }

      break;
 8003832:	e2d3      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
        fly_mode = testing_2;
 8003834:	4b40      	ldr	r3, [pc, #256]	; (8003938 <TIM3_IRQHandler+0x778>)
 8003836:	2206      	movs	r2, #6
 8003838:	701a      	strb	r2, [r3, #0]
      break;
 800383a:	e2cf      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
    case holding:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800383c:	f240 2323 	movw	r3, #547	; 0x223
 8003840:	f240 2223 	movw	r2, #547	; 0x223
 8003844:	f240 2123 	movw	r1, #547	; 0x223
 8003848:	f240 2023 	movw	r0, #547	; 0x223
 800384c:	f7ff f9c4 	bl	8002bd8 <ctl_motors_speed>
      break;
 8003850:	e2c4      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
    case moving:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003852:	f240 2323 	movw	r3, #547	; 0x223
 8003856:	f240 2223 	movw	r2, #547	; 0x223
 800385a:	f240 2123 	movw	r1, #547	; 0x223
 800385e:	f240 2023 	movw	r0, #547	; 0x223
 8003862:	f7ff f9b9 	bl	8002bd8 <ctl_motors_speed>
      break;
 8003866:	e2b9      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
    case landing:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003868:	f240 2323 	movw	r3, #547	; 0x223
 800386c:	f240 2223 	movw	r2, #547	; 0x223
 8003870:	f240 2123 	movw	r1, #547	; 0x223
 8003874:	f240 2023 	movw	r0, #547	; 0x223
 8003878:	f7ff f9ae 	bl	8002bd8 <ctl_motors_speed>
      break;
 800387c:	e2ae      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
    case testing_1:
      g_sig1 = MIN_SPEED + g_thrust;
 800387e:	4b2f      	ldr	r3, [pc, #188]	; (800393c <TIM3_IRQHandler+0x77c>)
 8003880:	edd3 7a00 	vldr	s15, [r3]
 8003884:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003940 <TIM3_IRQHandler+0x780>
 8003888:	ee77 7a87 	vadd.f32	s15, s15, s14
 800388c:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <TIM3_IRQHandler+0x784>)
 800388e:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <TIM3_IRQHandler+0x77c>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003940 <TIM3_IRQHandler+0x780>
 800389c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <TIM3_IRQHandler+0x788>)
 80038a2:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 80038a6:	4b25      	ldr	r3, [pc, #148]	; (800393c <TIM3_IRQHandler+0x77c>)
 80038a8:	edd3 7a00 	vldr	s15, [r3]
 80038ac:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003940 <TIM3_IRQHandler+0x780>
 80038b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <TIM3_IRQHandler+0x78c>)
 80038b6:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <TIM3_IRQHandler+0x77c>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003940 <TIM3_IRQHandler+0x780>
 80038c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <TIM3_IRQHandler+0x790>)
 80038ca:	edc3 7a00 	vstr	s15, [r3]
      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <TIM3_IRQHandler+0x784>)
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <TIM3_IRQHandler+0x788>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <TIM3_IRQHandler+0x78c>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 80038ec:	4b18      	ldr	r3, [pc, #96]	; (8003950 <TIM3_IRQHandler+0x790>)
 80038ee:	edd3 7a00 	vldr	s15, [r3]
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 3a90 	vmov	r3, s15
 80038fa:	ee16 2a10 	vmov	r2, s12
 80038fe:	ee16 1a90 	vmov	r1, s13
 8003902:	ee17 0a10 	vmov	r0, s14
 8003906:	f7ff f967 	bl	8002bd8 <ctl_motors_speed>

      if (g_thrust <= -99) {
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <TIM3_IRQHandler+0x77c>)
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003954 <TIM3_IRQHandler+0x794>
 8003914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	d900      	bls.n	8003920 <TIM3_IRQHandler+0x760>
        fly_mode = init;
      }

      break;
 800391e:	e25d      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
        fly_mode = init;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <TIM3_IRQHandler+0x778>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
      break;
 8003926:	e259      	b.n	8003ddc <TIM3_IRQHandler+0xc1c>
 8003928:	20000004 	.word	0x20000004
 800392c:	200006d0 	.word	0x200006d0
 8003930:	200006dc 	.word	0x200006dc
 8003934:	200006e8 	.word	0x200006e8
 8003938:	200006ca 	.word	0x200006ca
 800393c:	20000740 	.word	0x20000740
 8003940:	4408c000 	.word	0x4408c000
 8003944:	200006f0 	.word	0x200006f0
 8003948:	200006f4 	.word	0x200006f4
 800394c:	200006f8 	.word	0x200006f8
 8003950:	200006fc 	.word	0x200006fc
 8003954:	c2c60000 	.word	0xc2c60000
    case testing_2:
      g_P_pitch = angle_x*P_PITCH_GAIN;
 8003958:	edd7 7a03 	vldr	s15, [r7, #12]
 800395c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003964:	4bd2      	ldr	r3, [pc, #840]	; (8003cb0 <TIM3_IRQHandler+0xaf0>)
 8003966:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch += angle_x*I_PITCH_GAIN;
 800396a:	4bd2      	ldr	r3, [pc, #840]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fdea 	bl	8000548 <__aeabi_f2d>
 8003974:	4604      	mov	r4, r0
 8003976:	460d      	mov	r5, r1
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7fc fde5 	bl	8000548 <__aeabi_f2d>
 800397e:	a3c8      	add	r3, pc, #800	; (adr r3, 8003ca0 <TIM3_IRQHandler+0xae0>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f7fc fe38 	bl	80005f8 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4620      	mov	r0, r4
 800398e:	4629      	mov	r1, r5
 8003990:	f7fc fc7c 	bl	800028c <__adddf3>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	f7fd f904 	bl	8000ba8 <__aeabi_d2f>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4ac4      	ldr	r2, [pc, #784]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 80039a4:	6013      	str	r3, [r2, #0]
      g_I_pitch = limit(g_I_pitch, MIN_INTEGRAL, MAX_INTEGRAL);
 80039a6:	4bc3      	ldr	r3, [pc, #780]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8003cb8 <TIM3_IRQHandler+0xaf8>
 80039b0:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8003cbc <TIM3_IRQHandler+0xafc>
 80039b4:	eeb0 0a67 	vmov.f32	s0, s15
 80039b8:	f7ff f8e4 	bl	8002b84 <limit>
 80039bc:	eef0 7a40 	vmov.f32	s15, s0
 80039c0:	4bbc      	ldr	r3, [pc, #752]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 80039c2:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = g_gyro_y*D_PITCH_GAIN;
 80039c6:	4bbe      	ldr	r3, [pc, #760]	; (8003cc0 <TIM3_IRQHandler+0xb00>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d4:	4bbb      	ldr	r3, [pc, #748]	; (8003cc4 <TIM3_IRQHandler+0xb04>)
 80039d6:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = angle_y*P_ROLL_GAIN;
 80039da:	edd7 7a02 	vldr	s15, [r7, #8]
 80039de:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039e6:	4bb8      	ldr	r3, [pc, #736]	; (8003cc8 <TIM3_IRQHandler+0xb08>)
 80039e8:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll += angle_y*I_ROLL_GAIN;
 80039ec:	4bb7      	ldr	r3, [pc, #732]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fda9 	bl	8000548 <__aeabi_f2d>
 80039f6:	4604      	mov	r4, r0
 80039f8:	460d      	mov	r5, r1
 80039fa:	68b8      	ldr	r0, [r7, #8]
 80039fc:	f7fc fda4 	bl	8000548 <__aeabi_f2d>
 8003a00:	a3a7      	add	r3, pc, #668	; (adr r3, 8003ca0 <TIM3_IRQHandler+0xae0>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fdf7 	bl	80005f8 <__aeabi_dmul>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7fc fc3b 	bl	800028c <__adddf3>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7fd f8c3 	bl	8000ba8 <__aeabi_d2f>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4aa9      	ldr	r2, [pc, #676]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 8003a26:	6013      	str	r3, [r2, #0]
      g_I_roll = limit(g_I_roll, MIN_INTEGRAL, MAX_INTEGRAL);
 8003a28:	4ba8      	ldr	r3, [pc, #672]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8003cb8 <TIM3_IRQHandler+0xaf8>
 8003a32:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8003cbc <TIM3_IRQHandler+0xafc>
 8003a36:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3a:	f7ff f8a3 	bl	8002b84 <limit>
 8003a3e:	eef0 7a40 	vmov.f32	s15, s0
 8003a42:	4ba2      	ldr	r3, [pc, #648]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 8003a44:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = g_gyro_x*D_ROLL_GAIN;
 8003a48:	4ba1      	ldr	r3, [pc, #644]	; (8003cd0 <TIM3_IRQHandler+0xb10>)
 8003a4a:	edd3 7a00 	vldr	s15, [r3]
 8003a4e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a56:	4b9f      	ldr	r3, [pc, #636]	; (8003cd4 <TIM3_IRQHandler+0xb14>)
 8003a58:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = angle_z*P_YAW_GAIN;
 8003a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a68:	4b9b      	ldr	r3, [pc, #620]	; (8003cd8 <TIM3_IRQHandler+0xb18>)
 8003a6a:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw += angle_z*I_YAW_GAIN;
 8003a6e:	4b9b      	ldr	r3, [pc, #620]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fd68 	bl	8000548 <__aeabi_f2d>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fc fd63 	bl	8000548 <__aeabi_f2d>
 8003a82:	a389      	add	r3, pc, #548	; (adr r3, 8003ca8 <TIM3_IRQHandler+0xae8>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f7fc fdb6 	bl	80005f8 <__aeabi_dmul>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4620      	mov	r0, r4
 8003a92:	4629      	mov	r1, r5
 8003a94:	f7fc fbfa 	bl	800028c <__adddf3>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fd f882 	bl	8000ba8 <__aeabi_d2f>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a8d      	ldr	r2, [pc, #564]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003aa8:	6013      	str	r3, [r2, #0]
      g_I_yaw = limit(g_I_yaw, MIN_INTEGRAL, MAX_INTEGRAL);
 8003aaa:	4b8c      	ldr	r3, [pc, #560]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8003cb8 <TIM3_IRQHandler+0xaf8>
 8003ab4:	eddf 0a81 	vldr	s1, [pc, #516]	; 8003cbc <TIM3_IRQHandler+0xafc>
 8003ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8003abc:	f7ff f862 	bl	8002b84 <limit>
 8003ac0:	eef0 7a40 	vmov.f32	s15, s0
 8003ac4:	4b85      	ldr	r3, [pc, #532]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003ac6:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = g_gyro_z*D_YAW_GAIN;
 8003aca:	4b85      	ldr	r3, [pc, #532]	; (8003ce0 <TIM3_IRQHandler+0xb20>)
 8003acc:	edd3 7a00 	vldr	s15, [r3]
 8003ad0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad8:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <TIM3_IRQHandler+0xb24>)
 8003ada:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + 2*g_thrust;
 8003ade:	4b82      	ldr	r3, [pc, #520]	; (8003ce8 <TIM3_IRQHandler+0xb28>)
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ae8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003cec <TIM3_IRQHandler+0xb2c>
 8003aec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003af4:	ee17 3a90 	vmov	r3, s15
 8003af8:	603b      	str	r3, [r7, #0]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b04:	4b6a      	ldr	r3, [pc, #424]	; (8003cb0 <TIM3_IRQHandler+0xaf0>)
 8003b06:	edd3 6a00 	vldr	s13, [r3]
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 8003b0c:	edd3 7a00 	vldr	s15, [r3]
 8003b10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b14:	4b6b      	ldr	r3, [pc, #428]	; (8003cc4 <TIM3_IRQHandler+0xb04>)
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b22:	4b69      	ldr	r3, [pc, #420]	; (8003cc8 <TIM3_IRQHandler+0xb08>)
 8003b24:	edd3 6a00 	vldr	s13, [r3]
 8003b28:	4b68      	ldr	r3, [pc, #416]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b32:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <TIM3_IRQHandler+0xb14>)
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b40:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <TIM3_IRQHandler+0xb18>)
 8003b42:	edd3 6a00 	vldr	s13, [r3]
 8003b46:	4b65      	ldr	r3, [pc, #404]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b50:	4b64      	ldr	r3, [pc, #400]	; (8003ce4 <TIM3_IRQHandler+0xb24>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b5e:	4b64      	ldr	r3, [pc, #400]	; (8003cf0 <TIM3_IRQHandler+0xb30>)
 8003b60:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b6e:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <TIM3_IRQHandler+0xaf0>)
 8003b70:	edd3 6a00 	vldr	s13, [r3]
 8003b74:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b7e:	4b51      	ldr	r3, [pc, #324]	; (8003cc4 <TIM3_IRQHandler+0xb04>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b8c:	4b4e      	ldr	r3, [pc, #312]	; (8003cc8 <TIM3_IRQHandler+0xb08>)
 8003b8e:	edd3 6a00 	vldr	s13, [r3]
 8003b92:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <TIM3_IRQHandler+0xb14>)
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003baa:	4b4b      	ldr	r3, [pc, #300]	; (8003cd8 <TIM3_IRQHandler+0xb18>)
 8003bac:	edd3 6a00 	vldr	s13, [r3]
 8003bb0:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bba:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <TIM3_IRQHandler+0xb24>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc8:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <TIM3_IRQHandler+0xb34>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <TIM3_IRQHandler+0xaf0>)
 8003bda:	edd3 6a00 	vldr	s13, [r3]
 8003bde:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003be8:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <TIM3_IRQHandler+0xb04>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bf6:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <TIM3_IRQHandler+0xb08>)
 8003bf8:	edd3 6a00 	vldr	s13, [r3]
 8003bfc:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <TIM3_IRQHandler+0xb14>)
 8003c08:	edd3 7a00 	vldr	s15, [r3]
 8003c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c14:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <TIM3_IRQHandler+0xb18>)
 8003c16:	edd3 6a00 	vldr	s13, [r3]
 8003c1a:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c24:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <TIM3_IRQHandler+0xb24>)
 8003c26:	edd3 7a00 	vldr	s15, [r3]
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <TIM3_IRQHandler+0xb38>)
 8003c34:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <TIM3_IRQHandler+0xaf0>)
 8003c44:	edd3 6a00 	vldr	s13, [r3]
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <TIM3_IRQHandler+0xaf4>)
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c52:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <TIM3_IRQHandler+0xb04>)
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <TIM3_IRQHandler+0xb08>)
 8003c62:	edd3 6a00 	vldr	s13, [r3]
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <TIM3_IRQHandler+0xb0c>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c70:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <TIM3_IRQHandler+0xb14>)
 8003c72:	edd3 7a00 	vldr	s15, [r3]
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <TIM3_IRQHandler+0xb18>)
 8003c80:	edd3 6a00 	vldr	s13, [r3]
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <TIM3_IRQHandler+0xb1c>)
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <TIM3_IRQHandler+0xb24>)
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9c:	e02e      	b.n	8003cfc <TIM3_IRQHandler+0xb3c>
 8003c9e:	bf00      	nop
 8003ca0:	47ae147b 	.word	0x47ae147b
 8003ca4:	3f947ae1 	.word	0x3f947ae1
 8003ca8:	47ae147b 	.word	0x47ae147b
 8003cac:	3f847ae1 	.word	0x3f847ae1
 8003cb0:	200006cc 	.word	0x200006cc
 8003cb4:	200006d0 	.word	0x200006d0
 8003cb8:	42700000 	.word	0x42700000
 8003cbc:	c2700000 	.word	0xc2700000
 8003cc0:	200006bc 	.word	0x200006bc
 8003cc4:	200006d4 	.word	0x200006d4
 8003cc8:	200006d8 	.word	0x200006d8
 8003ccc:	200006dc 	.word	0x200006dc
 8003cd0:	200006b8 	.word	0x200006b8
 8003cd4:	200006e0 	.word	0x200006e0
 8003cd8:	200006e4 	.word	0x200006e4
 8003cdc:	200006e8 	.word	0x200006e8
 8003ce0:	200006c0 	.word	0x200006c0
 8003ce4:	200006ec 	.word	0x200006ec
 8003ce8:	20000740 	.word	0x20000740
 8003cec:	4408c000 	.word	0x4408c000
 8003cf0:	200006f0 	.word	0x200006f0
 8003cf4:	200006f4 	.word	0x200006f4
 8003cf8:	200006f8 	.word	0x200006f8
 8003cfc:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <TIM3_IRQHandler+0xc54>)
 8003cfe:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003d02:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <TIM3_IRQHandler+0xc58>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8003e1c <TIM3_IRQHandler+0xc5c>
 8003d0c:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003e20 <TIM3_IRQHandler+0xc60>
 8003d10:	eeb0 0a67 	vmov.f32	s0, s15
 8003d14:	f7fe ff36 	bl	8002b84 <limit>
 8003d18:	eef0 7a40 	vmov.f32	s15, s0
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	; (8003e18 <TIM3_IRQHandler+0xc58>)
 8003d1e:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 8003d22:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <TIM3_IRQHandler+0xc64>)
 8003d24:	edd3 7a00 	vldr	s15, [r3]
 8003d28:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8003e1c <TIM3_IRQHandler+0xc5c>
 8003d2c:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8003e20 <TIM3_IRQHandler+0xc60>
 8003d30:	eeb0 0a67 	vmov.f32	s0, s15
 8003d34:	f7fe ff26 	bl	8002b84 <limit>
 8003d38:	eef0 7a40 	vmov.f32	s15, s0
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <TIM3_IRQHandler+0xc64>)
 8003d3e:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <TIM3_IRQHandler+0xc68>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8003e1c <TIM3_IRQHandler+0xc5c>
 8003d4c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8003e20 <TIM3_IRQHandler+0xc60>
 8003d50:	eeb0 0a67 	vmov.f32	s0, s15
 8003d54:	f7fe ff16 	bl	8002b84 <limit>
 8003d58:	eef0 7a40 	vmov.f32	s15, s0
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <TIM3_IRQHandler+0xc68>)
 8003d5e:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 8003d62:	4b2c      	ldr	r3, [pc, #176]	; (8003e14 <TIM3_IRQHandler+0xc54>)
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8003e1c <TIM3_IRQHandler+0xc5c>
 8003d6c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003e20 <TIM3_IRQHandler+0xc60>
 8003d70:	eeb0 0a67 	vmov.f32	s0, s15
 8003d74:	f7fe ff06 	bl	8002b84 <limit>
 8003d78:	eef0 7a40 	vmov.f32	s15, s0
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <TIM3_IRQHandler+0xc54>)
 8003d7e:	edc3 7a00 	vstr	s15, [r3]

      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <TIM3_IRQHandler+0xc58>)
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <TIM3_IRQHandler+0xc64>)
 8003d8e:	edd3 7a00 	vldr	s15, [r3]
 8003d92:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <TIM3_IRQHandler+0xc68>)
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <TIM3_IRQHandler+0xc54>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003daa:	ee17 3a90 	vmov	r3, s15
 8003dae:	ee16 2a10 	vmov	r2, s12
 8003db2:	ee16 1a90 	vmov	r1, s13
 8003db6:	ee17 0a10 	vmov	r0, s14
 8003dba:	f7fe ff0d 	bl	8002bd8 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <TIM3_IRQHandler+0xc6c>)
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003e30 <TIM3_IRQHandler+0xc70>
 8003dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d900      	bls.n	8003dd4 <TIM3_IRQHandler+0xc14>
        fly_mode = init;
      }

      break;
 8003dd2:	e002      	b.n	8003dda <TIM3_IRQHandler+0xc1a>
        fly_mode = init;
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <TIM3_IRQHandler+0xc74>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
      break;
 8003dda:	bf00      	nop
  }

#if MONITOR == 1
  monitor[0] = angle_x;
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <TIM3_IRQHandler+0xc78>)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6013      	str	r3, [r2, #0]
  monitor[1] = angle_y;
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <TIM3_IRQHandler+0xc78>)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6053      	str	r3, [r2, #4]
  monitor[2] = angle_z;
 8003de8:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <TIM3_IRQHandler+0xc78>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6093      	str	r3, [r2, #8]
  monitor[3] = g_gyro_x;
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <TIM3_IRQHandler+0xc7c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <TIM3_IRQHandler+0xc78>)
 8003df4:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_gyro_y;
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <TIM3_IRQHandler+0xc80>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <TIM3_IRQHandler+0xc78>)
 8003dfc:	6113      	str	r3, [r2, #16]
  monitor[5] = g_gyro_z;
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <TIM3_IRQHandler+0xc84>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <TIM3_IRQHandler+0xc78>)
 8003e04:	6153      	str	r3, [r2, #20]
  monitor[4] = g_sig4;
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e06:	4810      	ldr	r0, [pc, #64]	; (8003e48 <TIM3_IRQHandler+0xc88>)
 8003e08:	f003 f802 	bl	8006e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	3740      	adds	r7, #64	; 0x40
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bdb0      	pop	{r4, r5, r7, pc}
 8003e14:	200006fc 	.word	0x200006fc
 8003e18:	200006f0 	.word	0x200006f0
 8003e1c:	4453c000 	.word	0x4453c000
 8003e20:	4408c000 	.word	0x4408c000
 8003e24:	200006f4 	.word	0x200006f4
 8003e28:	200006f8 	.word	0x200006f8
 8003e2c:	20000740 	.word	0x20000740
 8003e30:	c2c60000 	.word	0xc2c60000
 8003e34:	200006ca 	.word	0x200006ca
 8003e38:	20000754 	.word	0x20000754
 8003e3c:	200006b8 	.word	0x200006b8
 8003e40:	200006bc 	.word	0x200006bc
 8003e44:	200006c0 	.word	0x200006c0
 8003e48:	20000244 	.word	0x20000244

08003e4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <TIM4_IRQHandler+0x10>)
 8003e52:	f002 ffdd 	bl	8006e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	2000028c 	.word	0x2000028c

08003e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <USART1_IRQHandler+0x10>)
 8003e66:	f004 f94b 	bl	8008100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200002d4 	.word	0x200002d4

08003e74 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	4803      	ldr	r0, [pc, #12]	; (8003e8c <HAL_UART_TxCpltCallback+0x18>)
 8003e80:	f000 fe5f 	bl	8004b42 <HAL_GPIO_TogglePin>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40020000 	.word	0x40020000

08003e90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8003e98:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <HAL_UART_RxCpltCallback+0x130>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]

  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	4848      	ldr	r0, [pc, #288]	; (8003fc4 <HAL_UART_RxCpltCallback+0x134>)
 8003ea2:	f000 fe4e 	bl	8004b42 <HAL_GPIO_TogglePin>

  // Serialize control values
  uint8_t g_control_1st_idx = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2bfe      	cmp	r3, #254	; 0xfe
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_RxCpltCallback+0x26>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8003eb6:	4b44      	ldr	r3, [pc, #272]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003eb8:	785b      	ldrb	r3, [r3, #1]
 8003eba:	2bfe      	cmp	r3, #254	; 0xfe
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_RxCpltCallback+0x32>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	73fb      	strb	r3, [r7, #15]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8003ec2:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003ec4:	789b      	ldrb	r3, [r3, #2]
 8003ec6:	2bfe      	cmp	r3, #254	; 0xfe
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_RxCpltCallback+0x3e>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	73fb      	strb	r3, [r7, #15]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8003ece:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003ed0:	78db      	ldrb	r3, [r3, #3]
 8003ed2:	2bfe      	cmp	r3, #254	; 0xfe
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_RxCpltCallback+0x4a>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	73fb      	strb	r3, [r7, #15]
  if (g_control[4] == 254) g_control_1st_idx = 0;
 8003eda:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003edc:	791b      	ldrb	r3, [r3, #4]
 8003ede:	2bfe      	cmp	r3, #254	; 0xfe
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_RxCpltCallback+0x56>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	73fb      	strb	r3, [r7, #15]
  g_uart_thrust = g_control[g_control_1st_idx];
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	4a37      	ldr	r2, [pc, #220]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003eea:	5cd2      	ldrb	r2, [r2, r3]
 8003eec:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_UART_RxCpltCallback+0x13c>)
 8003eee:	701a      	strb	r2, [r3, #0]
  g_uart_pitch = g_control[(g_control_1st_idx+1)%5]-100;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	1c59      	adds	r1, r3, #1
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_UART_RxCpltCallback+0x140>)
 8003ef6:	fb83 2301 	smull	r2, r3, r3, r1
 8003efa:	105a      	asrs	r2, r3, #1
 8003efc:	17cb      	asrs	r3, r1, #31
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	1aca      	subs	r2, r1, r3
 8003f08:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	3b64      	subs	r3, #100	; 0x64
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	b25a      	sxtb	r2, r3
 8003f12:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <HAL_UART_RxCpltCallback+0x144>)
 8003f14:	701a      	strb	r2, [r3, #0]
  g_uart_roll = g_control[(g_control_1st_idx+2)%5]-100;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	1c99      	adds	r1, r3, #2
 8003f1a:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_UART_RxCpltCallback+0x140>)
 8003f1c:	fb83 2301 	smull	r2, r3, r3, r1
 8003f20:	105a      	asrs	r2, r3, #1
 8003f22:	17cb      	asrs	r3, r1, #31
 8003f24:	1ad2      	subs	r2, r2, r3
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	1aca      	subs	r2, r1, r3
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003f30:	5c9b      	ldrb	r3, [r3, r2]
 8003f32:	3b64      	subs	r3, #100	; 0x64
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	b25a      	sxtb	r2, r3
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_UART_RxCpltCallback+0x148>)
 8003f3a:	701a      	strb	r2, [r3, #0]
  g_uart_yaw = g_control[(g_control_1st_idx+3)%5]-100;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	1cd9      	adds	r1, r3, #3
 8003f40:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_UART_RxCpltCallback+0x140>)
 8003f42:	fb83 2301 	smull	r2, r3, r3, r1
 8003f46:	105a      	asrs	r2, r3, #1
 8003f48:	17cb      	asrs	r3, r1, #31
 8003f4a:	1ad2      	subs	r2, r2, r3
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	1aca      	subs	r2, r1, r3
 8003f54:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_UART_RxCpltCallback+0x138>)
 8003f56:	5c9b      	ldrb	r3, [r3, r2]
 8003f58:	3b64      	subs	r3, #100	; 0x64
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	b25a      	sxtb	r2, r3
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_UART_RxCpltCallback+0x14c>)
 8003f60:	701a      	strb	r2, [r3, #0]

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003f62:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f70:	edd3 6a02 	vldr	s13, [r3, #8]
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f76:	ed93 6a03 	vldr	s12, [r3, #12]
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f7c:	edd3 5a04 	vldr	s11, [r3, #16]
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f82:	ed93 5a05 	vldr	s10, [r3, #20]
 8003f86:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f88:	edd3 4a06 	vldr	s9, [r3, #24]
 8003f8c:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f8e:	edd3 3a07 	vldr	s7, [r3, #28]
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <HAL_UART_RxCpltCallback+0x150>)
 8003f94:	ed93 4a08 	vldr	s8, [r3, #32]
 8003f98:	eeb0 3a64 	vmov.f32	s6, s9
 8003f9c:	eef0 2a45 	vmov.f32	s5, s10
 8003fa0:	eeb0 2a65 	vmov.f32	s4, s11
 8003fa4:	eef0 1a46 	vmov.f32	s3, s12
 8003fa8:	eeb0 1a66 	vmov.f32	s2, s13
 8003fac:	eef0 0a47 	vmov.f32	s1, s14
 8003fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb4:	f7fd f982 	bl	80012bc <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000004 	.word	0x20000004
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	20000560 	.word	0x20000560
 8003fcc:	20000750 	.word	0x20000750
 8003fd0:	66666667 	.word	0x66666667
 8003fd4:	20000751 	.word	0x20000751
 8003fd8:	20000752 	.word	0x20000752
 8003fdc:	20000753 	.word	0x20000753
 8003fe0:	20000754 	.word	0x20000754

08003fe4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	7f1b      	ldrb	r3, [r3, #28]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d12f      	bne.n	8004054 <HAL_TIM_IC_CaptureCallback+0x70>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff8:	488a      	ldr	r0, [pc, #552]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003ffa:	f000 fd71 	bl	8004ae0 <HAL_GPIO_ReadPin>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b01      	cmp	r3, #1
 8004002:	d107      	bne.n	8004014 <HAL_TIM_IC_CaptureCallback+0x30>
      pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8004004:	2100      	movs	r1, #0
 8004006:	4888      	ldr	r0, [pc, #544]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004008:	f003 fa30 	bl	800746c <HAL_TIM_ReadCapturedValue>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	4b86      	ldr	r3, [pc, #536]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004012:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8004014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004018:	4882      	ldr	r0, [pc, #520]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 800401a:	f000 fd61 	bl	8004ae0 <HAL_GPIO_ReadPin>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d117      	bne.n	8004054 <HAL_TIM_IC_CaptureCallback+0x70>
      pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8004024:	2100      	movs	r1, #0
 8004026:	4880      	ldr	r0, [pc, #512]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004028:	f003 fa20 	bl	800746c <HAL_TIM_ReadCapturedValue>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4b7e      	ldr	r3, [pc, #504]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004032:	605a      	str	r2, [r3, #4]
      int value = pwm_in[1] - pwm_in[0];
 8004034:	4b7d      	ldr	r3, [pc, #500]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	4b7c      	ldr	r3, [pc, #496]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	617b      	str	r3, [r7, #20]
      if (value >= 200 && value < 400) {
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2bc7      	cmp	r3, #199	; 0xc7
 8004044:	dd06      	ble.n	8004054 <HAL_TIM_IC_CaptureCallback+0x70>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800404c:	da02      	bge.n	8004054 <HAL_TIM_IC_CaptureCallback+0x70>
        pwm_in[2] = value;
 800404e:	4a77      	ldr	r2, [pc, #476]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	6093      	str	r3, [r2, #8]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	7f1b      	ldrb	r3, [r3, #28]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d12f      	bne.n	80040bc <HAL_TIM_IC_CaptureCallback+0xd8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 800405c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004060:	4870      	ldr	r0, [pc, #448]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004062:	f000 fd3d 	bl	8004ae0 <HAL_GPIO_ReadPin>
 8004066:	4603      	mov	r3, r0
 8004068:	2b01      	cmp	r3, #1
 800406a:	d107      	bne.n	800407c <HAL_TIM_IC_CaptureCallback+0x98>
      pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800406c:	2104      	movs	r1, #4
 800406e:	486e      	ldr	r0, [pc, #440]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004070:	f003 f9fc 	bl	800746c <HAL_TIM_ReadCapturedValue>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	4b6c      	ldr	r3, [pc, #432]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800407a:	60da      	str	r2, [r3, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800407c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004080:	4868      	ldr	r0, [pc, #416]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004082:	f000 fd2d 	bl	8004ae0 <HAL_GPIO_ReadPin>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d117      	bne.n	80040bc <HAL_TIM_IC_CaptureCallback+0xd8>
      pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800408c:	2104      	movs	r1, #4
 800408e:	4866      	ldr	r0, [pc, #408]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004090:	f003 f9ec 	bl	800746c <HAL_TIM_ReadCapturedValue>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	4b64      	ldr	r3, [pc, #400]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800409a:	611a      	str	r2, [r3, #16]
      int value = pwm_in[4] - pwm_in[3];
 800409c:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	613b      	str	r3, [r7, #16]
      if (value >= 200 && value < 400) {
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2bc7      	cmp	r3, #199	; 0xc7
 80040ac:	dd06      	ble.n	80040bc <HAL_TIM_IC_CaptureCallback+0xd8>
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80040b4:	da02      	bge.n	80040bc <HAL_TIM_IC_CaptureCallback+0xd8>
        pwm_in[5] = value;
 80040b6:	4a5d      	ldr	r2, [pc, #372]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6153      	str	r3, [r2, #20]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7f1b      	ldrb	r3, [r3, #28]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d12f      	bne.n	8004124 <HAL_TIM_IC_CaptureCallback+0x140>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 80040c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040c8:	4856      	ldr	r0, [pc, #344]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 80040ca:	f000 fd09 	bl	8004ae0 <HAL_GPIO_ReadPin>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IC_CaptureCallback+0x100>
      pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80040d4:	2108      	movs	r1, #8
 80040d6:	4854      	ldr	r0, [pc, #336]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 80040d8:	f003 f9c8 	bl	800746c <HAL_TIM_ReadCapturedValue>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	4b52      	ldr	r3, [pc, #328]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 80040e2:	619a      	str	r2, [r3, #24]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 80040e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040e8:	484e      	ldr	r0, [pc, #312]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 80040ea:	f000 fcf9 	bl	8004ae0 <HAL_GPIO_ReadPin>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d117      	bne.n	8004124 <HAL_TIM_IC_CaptureCallback+0x140>
      pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80040f4:	2108      	movs	r1, #8
 80040f6:	484c      	ldr	r0, [pc, #304]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 80040f8:	f003 f9b8 	bl	800746c <HAL_TIM_ReadCapturedValue>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004102:	61da      	str	r2, [r3, #28]
      int value = pwm_in[7] - pwm_in[6];
 8004104:	4b49      	ldr	r3, [pc, #292]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	4b48      	ldr	r3, [pc, #288]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	60fb      	str	r3, [r7, #12]
      if (value >= 200 && value < 400) {
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2bc7      	cmp	r3, #199	; 0xc7
 8004114:	dd06      	ble.n	8004124 <HAL_TIM_IC_CaptureCallback+0x140>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800411c:	da02      	bge.n	8004124 <HAL_TIM_IC_CaptureCallback+0x140>
        pwm_in[8] = value;
 800411e:	4a43      	ldr	r2, [pc, #268]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6213      	str	r3, [r2, #32]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7f1b      	ldrb	r3, [r3, #28]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d12f      	bne.n	800418c <HAL_TIM_IC_CaptureCallback+0x1a8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 800412c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004130:	483c      	ldr	r0, [pc, #240]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004132:	f000 fcd5 	bl	8004ae0 <HAL_GPIO_ReadPin>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d107      	bne.n	800414c <HAL_TIM_IC_CaptureCallback+0x168>
      pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 800413c:	210c      	movs	r1, #12
 800413e:	483a      	ldr	r0, [pc, #232]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004140:	f003 f994 	bl	800746c <HAL_TIM_ReadCapturedValue>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	4b38      	ldr	r3, [pc, #224]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800414a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 800414c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004150:	4834      	ldr	r0, [pc, #208]	; (8004224 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004152:	f000 fcc5 	bl	8004ae0 <HAL_GPIO_ReadPin>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d117      	bne.n	800418c <HAL_TIM_IC_CaptureCallback+0x1a8>
      pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 800415c:	210c      	movs	r1, #12
 800415e:	4832      	ldr	r0, [pc, #200]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004160:	f003 f984 	bl	800746c <HAL_TIM_ReadCapturedValue>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
      int value = pwm_in[10] - pwm_in[9];
 800416c:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800416e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004170:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	60bb      	str	r3, [r7, #8]
      if (value >= 200 && value < 400) {
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2bc7      	cmp	r3, #199	; 0xc7
 800417c:	dd06      	ble.n	800418c <HAL_TIM_IC_CaptureCallback+0x1a8>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004184:	da02      	bge.n	800418c <HAL_TIM_IC_CaptureCallback+0x1a8>
        pwm_in[11] = value;
 8004186:	4a29      	ldr	r2, [pc, #164]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
    }
  }

  g_thrust = SimpleKalmanFilter_updateEstimate(&g_filters[6], pwm_in[5] - 300);
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419c:	eeb0 0a67 	vmov.f32	s0, s15
 80041a0:	4823      	ldr	r0, [pc, #140]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80041a2:	f7fc ffc4 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80041a6:	eef0 7a40 	vmov.f32	s15, s0
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <HAL_TIM_IC_CaptureCallback+0x250>)
 80041ac:	edc3 7a00 	vstr	s15, [r3]
  g_yaw = SimpleKalmanFilter_updateEstimate(&g_filters[7], pwm_in[2] - 300);
 80041b0:	4b1e      	ldr	r3, [pc, #120]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c0:	eeb0 0a67 	vmov.f32	s0, s15
 80041c4:	481c      	ldr	r0, [pc, #112]	; (8004238 <HAL_TIM_IC_CaptureCallback+0x254>)
 80041c6:	f7fc ffb2 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80041ca:	eef0 7a40 	vmov.f32	s15, s0
 80041ce:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_TIM_IC_CaptureCallback+0x258>)
 80041d0:	edc3 7a00 	vstr	s15, [r3]
  g_pitch = SimpleKalmanFilter_updateEstimate(&g_filters[8], pwm_in[8] - 300);
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e4:	eeb0 0a67 	vmov.f32	s0, s15
 80041e8:	4815      	ldr	r0, [pc, #84]	; (8004240 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80041ea:	f7fc ffa0 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80041ee:	eef0 7a40 	vmov.f32	s15, s0
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80041f4:	edc3 7a00 	vstr	s15, [r3]
  g_roll = SimpleKalmanFilter_updateEstimate(&g_filters[9], pwm_in[11] - 300);
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_TIM_IC_CaptureCallback+0x248>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	480e      	ldr	r0, [pc, #56]	; (8004248 <HAL_TIM_IC_CaptureCallback+0x264>)
 800420e:	f7fc ff8e 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8004212:	eef0 7a40 	vmov.f32	s15, s0
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_TIM_IC_CaptureCallback+0x268>)
 8004218:	edc3 7a00 	vstr	s15, [r3]
  monitor[2] = 0;
  monitor[3] = g_pitch;
  monitor[4] = g_roll;
  monitor[5] = 0;
#endif
}
 800421c:	bf00      	nop
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40020c00 	.word	0x40020c00
 8004228:	2000028c 	.word	0x2000028c
 800422c:	20000700 	.word	0x20000700
 8004230:	200003ec 	.word	0x200003ec
 8004234:	20000740 	.word	0x20000740
 8004238:	20000404 	.word	0x20000404
 800423c:	2000074c 	.word	0x2000074c
 8004240:	2000041c 	.word	0x2000041c
 8004244:	20000744 	.word	0x20000744
 8004248:	20000434 	.word	0x20000434
 800424c:	20000748 	.word	0x20000748

08004250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <_sbrk+0x5c>)
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <_sbrk+0x60>)
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <_sbrk+0x64>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <_sbrk+0x64>)
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <_sbrk+0x68>)
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <_sbrk+0x64>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d207      	bcs.n	8004290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004280:	f004 fe2e 	bl	8008ee0 <__errno>
 8004284:	4603      	mov	r3, r0
 8004286:	220c      	movs	r2, #12
 8004288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800428a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800428e:	e009      	b.n	80042a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <_sbrk+0x64>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <_sbrk+0x64>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <_sbrk+0x64>)
 80042a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20020000 	.word	0x20020000
 80042b0:	00000400 	.word	0x00000400
 80042b4:	20000778 	.word	0x20000778
 80042b8:	20000790 	.word	0x20000790

080042bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <SystemInit+0x20>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <SystemInit+0x20>)
 80042c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042e4:	480d      	ldr	r0, [pc, #52]	; (800431c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042e6:	490e      	ldr	r1, [pc, #56]	; (8004320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042ec:	e002      	b.n	80042f4 <LoopCopyDataInit>

080042ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042f2:	3304      	adds	r3, #4

080042f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f8:	d3f9      	bcc.n	80042ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042fa:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042fc:	4c0b      	ldr	r4, [pc, #44]	; (800432c <LoopFillZerobss+0x26>)
  movs r3, #0
 80042fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004300:	e001      	b.n	8004306 <LoopFillZerobss>

08004302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004304:	3204      	adds	r2, #4

08004306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004308:	d3fb      	bcc.n	8004302 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800430a:	f7ff ffd7 	bl	80042bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800430e:	f004 fded 	bl	8008eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004312:	f7fd f861 	bl	80013d8 <main>
  bx  lr    
 8004316:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800431c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004320:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8004324:	0800c2c0 	.word	0x0800c2c0
  ldr r2, =_sbss
 8004328:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800432c:	20000790 	.word	0x20000790

08004330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004330:	e7fe      	b.n	8004330 <ADC_IRQHandler>
	...

08004334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <HAL_Init+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <HAL_Init+0x40>)
 800433e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_Init+0x40>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <HAL_Init+0x40>)
 800434a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_Init+0x40>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a07      	ldr	r2, [pc, #28]	; (8004374 <HAL_Init+0x40>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 f94f 	bl	8004600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004362:	200f      	movs	r0, #15
 8004364:	f000 f808 	bl	8004378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004368:	f7fe f8f6 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023c00 	.word	0x40023c00

08004378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_InitTick+0x54>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <HAL_InitTick+0x58>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f967 	bl	800466a <HAL_SYSTICK_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00e      	b.n	80043c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	d80a      	bhi.n	80043c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ac:	2200      	movs	r2, #0
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043b4:	f000 f92f 	bl	8004616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b8:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <HAL_InitTick+0x5c>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	2000001c 	.word	0x2000001c
 80043d0:	20000024 	.word	0x20000024
 80043d4:	20000020 	.word	0x20000020

080043d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_IncTick+0x20>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_IncTick+0x24>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <HAL_IncTick+0x24>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000024 	.word	0x20000024
 80043fc:	2000077c 	.word	0x2000077c

08004400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return uwTick;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_GetTick+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000077c 	.word	0x2000077c

08004418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004420:	f7ff ffee 	bl	8004400 <HAL_GetTick>
 8004424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004430:	d005      	beq.n	800443e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <HAL_Delay+0x44>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800443e:	bf00      	nop
 8004440:	f7ff ffde 	bl	8004400 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	429a      	cmp	r2, r3
 800444e:	d8f7      	bhi.n	8004440 <HAL_Delay+0x28>
  {
  }
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000024 	.word	0x20000024

08004460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800447c:	4013      	ands	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800448c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004492:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	60d3      	str	r3, [r2, #12]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <__NVIC_GetPriorityGrouping+0x18>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	f003 0307 	and.w	r3, r3, #7
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	db0b      	blt.n	80044ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	f003 021f 	and.w	r2, r3, #31
 80044dc:	4907      	ldr	r1, [pc, #28]	; (80044fc <__NVIC_EnableIRQ+0x38>)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	2001      	movs	r0, #1
 80044e6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	e000e100 	.word	0xe000e100

08004500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	6039      	str	r1, [r7, #0]
 800450a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004510:	2b00      	cmp	r3, #0
 8004512:	db0a      	blt.n	800452a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	490c      	ldr	r1, [pc, #48]	; (800454c <__NVIC_SetPriority+0x4c>)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	0112      	lsls	r2, r2, #4
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	440b      	add	r3, r1
 8004524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004528:	e00a      	b.n	8004540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4908      	ldr	r1, [pc, #32]	; (8004550 <__NVIC_SetPriority+0x50>)
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	3b04      	subs	r3, #4
 8004538:	0112      	lsls	r2, r2, #4
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	440b      	add	r3, r1
 800453e:	761a      	strb	r2, [r3, #24]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000e100 	.word	0xe000e100
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f1c3 0307 	rsb	r3, r3, #7
 800456e:	2b04      	cmp	r3, #4
 8004570:	bf28      	it	cs
 8004572:	2304      	movcs	r3, #4
 8004574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3304      	adds	r3, #4
 800457a:	2b06      	cmp	r3, #6
 800457c:	d902      	bls.n	8004584 <NVIC_EncodePriority+0x30>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3b03      	subs	r3, #3
 8004582:	e000      	b.n	8004586 <NVIC_EncodePriority+0x32>
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43da      	mvns	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	401a      	ands	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800459c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	43d9      	mvns	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	4313      	orrs	r3, r2
         );
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3724      	adds	r7, #36	; 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045cc:	d301      	bcc.n	80045d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ce:	2301      	movs	r3, #1
 80045d0:	e00f      	b.n	80045f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <SysTick_Config+0x40>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045da:	210f      	movs	r1, #15
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e0:	f7ff ff8e 	bl	8004500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <SysTick_Config+0x40>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <SysTick_Config+0x40>)
 80045ec:	2207      	movs	r2, #7
 80045ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	e000e010 	.word	0xe000e010

08004600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff29 	bl	8004460 <__NVIC_SetPriorityGrouping>
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004628:	f7ff ff3e 	bl	80044a8 <__NVIC_GetPriorityGrouping>
 800462c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7ff ff8e 	bl	8004554 <NVIC_EncodePriority>
 8004638:	4602      	mov	r2, r0
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff5d 	bl	8004500 <__NVIC_SetPriority>
}
 8004646:	bf00      	nop
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff ff31 	bl	80044c4 <__NVIC_EnableIRQ>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ffa2 	bl	80045bc <SysTick_Config>
 8004678:	4603      	mov	r3, r0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004690:	f7ff feb6 	bl	8004400 <HAL_GetTick>
 8004694:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d008      	beq.n	80046b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e052      	b.n	800475a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0216 	bic.w	r2, r2, #22
 80046c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <HAL_DMA_Abort+0x62>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0208 	bic.w	r2, r2, #8
 80046f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004704:	e013      	b.n	800472e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004706:	f7ff fe7b 	bl	8004400 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b05      	cmp	r3, #5
 8004712:	d90c      	bls.n	800472e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2203      	movs	r2, #3
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e015      	b.n	800475a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e4      	bne.n	8004706 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	223f      	movs	r2, #63	; 0x3f
 8004742:	409a      	lsls	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d004      	beq.n	8004780 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e00c      	b.n	800479a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2205      	movs	r2, #5
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e16b      	b.n	8004a9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c4:	2201      	movs	r2, #1
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4013      	ands	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	429a      	cmp	r2, r3
 80047de:	f040 815a 	bne.w	8004a96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d005      	beq.n	80047fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d130      	bne.n	800485c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	2203      	movs	r2, #3
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004830:	2201      	movs	r2, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 0201 	and.w	r2, r3, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b03      	cmp	r3, #3
 8004866:	d017      	beq.n	8004898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	2203      	movs	r2, #3
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d123      	bne.n	80048ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	08da      	lsrs	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3208      	adds	r2, #8
 80048ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	220f      	movs	r2, #15
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	08da      	lsrs	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3208      	adds	r2, #8
 80048e6:	69b9      	ldr	r1, [r7, #24]
 80048e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0203 	and.w	r2, r3, #3
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80b4 	beq.w	8004a96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	4b60      	ldr	r3, [pc, #384]	; (8004ab4 <HAL_GPIO_Init+0x30c>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	4a5f      	ldr	r2, [pc, #380]	; (8004ab4 <HAL_GPIO_Init+0x30c>)
 8004938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800493c:	6453      	str	r3, [r2, #68]	; 0x44
 800493e:	4b5d      	ldr	r3, [pc, #372]	; (8004ab4 <HAL_GPIO_Init+0x30c>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800494a:	4a5b      	ldr	r2, [pc, #364]	; (8004ab8 <HAL_GPIO_Init+0x310>)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	3302      	adds	r3, #2
 8004952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	220f      	movs	r2, #15
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_GPIO_Init+0x314>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02b      	beq.n	80049ce <HAL_GPIO_Init+0x226>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a51      	ldr	r2, [pc, #324]	; (8004ac0 <HAL_GPIO_Init+0x318>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d025      	beq.n	80049ca <HAL_GPIO_Init+0x222>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a50      	ldr	r2, [pc, #320]	; (8004ac4 <HAL_GPIO_Init+0x31c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <HAL_GPIO_Init+0x21e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a4f      	ldr	r2, [pc, #316]	; (8004ac8 <HAL_GPIO_Init+0x320>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d019      	beq.n	80049c2 <HAL_GPIO_Init+0x21a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4e      	ldr	r2, [pc, #312]	; (8004acc <HAL_GPIO_Init+0x324>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_GPIO_Init+0x216>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4d      	ldr	r2, [pc, #308]	; (8004ad0 <HAL_GPIO_Init+0x328>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00d      	beq.n	80049ba <HAL_GPIO_Init+0x212>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4c      	ldr	r2, [pc, #304]	; (8004ad4 <HAL_GPIO_Init+0x32c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <HAL_GPIO_Init+0x20e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <HAL_GPIO_Init+0x330>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_GPIO_Init+0x20a>
 80049ae:	2307      	movs	r3, #7
 80049b0:	e00e      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049b2:	2308      	movs	r3, #8
 80049b4:	e00c      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049b6:	2306      	movs	r3, #6
 80049b8:	e00a      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049ba:	2305      	movs	r3, #5
 80049bc:	e008      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049be:	2304      	movs	r3, #4
 80049c0:	e006      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049c2:	2303      	movs	r3, #3
 80049c4:	e004      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e002      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <HAL_GPIO_Init+0x228>
 80049ce:	2300      	movs	r3, #0
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	f002 0203 	and.w	r2, r2, #3
 80049d6:	0092      	lsls	r2, r2, #2
 80049d8:	4093      	lsls	r3, r2
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049e0:	4935      	ldr	r1, [pc, #212]	; (8004ab8 <HAL_GPIO_Init+0x310>)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	3302      	adds	r3, #2
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ee:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <HAL_GPIO_Init+0x334>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a12:	4a32      	ldr	r2, [pc, #200]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a18:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a3c:	4a27      	ldr	r2, [pc, #156]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a66:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a90:	4a12      	ldr	r2, [pc, #72]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b0f      	cmp	r3, #15
 8004aa0:	f67f ae90 	bls.w	80047c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40013800 	.word	0x40013800
 8004abc:	40020000 	.word	0x40020000
 8004ac0:	40020400 	.word	0x40020400
 8004ac4:	40020800 	.word	0x40020800
 8004ac8:	40020c00 	.word	0x40020c00
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40021400 	.word	0x40021400
 8004ad4:	40021800 	.word	0x40021800
 8004ad8:	40021c00 	.word	0x40021c00
 8004adc:	40013c00 	.word	0x40013c00

08004ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	e001      	b.n	8004b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	807b      	strh	r3, [r7, #2]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b20:	787b      	ldrb	r3, [r7, #1]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b26:	887a      	ldrh	r2, [r7, #2]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b2c:	e003      	b.n	8004b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	041a      	lsls	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b54:	887a      	ldrh	r2, [r7, #2]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	041a      	lsls	r2, r3, #16
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	43d9      	mvns	r1, r3
 8004b60:	887b      	ldrh	r3, [r7, #2]
 8004b62:	400b      	ands	r3, r1
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	619a      	str	r2, [r3, #24]
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e12b      	b.n	8004de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fd fd02 	bl	80025a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2224      	movs	r2, #36	; 0x24
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f001 fd0e 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 8004be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4a81      	ldr	r2, [pc, #516]	; (8004dec <HAL_I2C_Init+0x274>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d807      	bhi.n	8004bfc <HAL_I2C_Init+0x84>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a80      	ldr	r2, [pc, #512]	; (8004df0 <HAL_I2C_Init+0x278>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	bf94      	ite	ls
 8004bf4:	2301      	movls	r3, #1
 8004bf6:	2300      	movhi	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	e006      	b.n	8004c0a <HAL_I2C_Init+0x92>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a7d      	ldr	r2, [pc, #500]	; (8004df4 <HAL_I2C_Init+0x27c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	bf94      	ite	ls
 8004c04:	2301      	movls	r3, #1
 8004c06:	2300      	movhi	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0e7      	b.n	8004de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a78      	ldr	r2, [pc, #480]	; (8004df8 <HAL_I2C_Init+0x280>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0c9b      	lsrs	r3, r3, #18
 8004c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a6a      	ldr	r2, [pc, #424]	; (8004dec <HAL_I2C_Init+0x274>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d802      	bhi.n	8004c4c <HAL_I2C_Init+0xd4>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	e009      	b.n	8004c60 <HAL_I2C_Init+0xe8>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	4a69      	ldr	r2, [pc, #420]	; (8004dfc <HAL_I2C_Init+0x284>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	3301      	adds	r3, #1
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	495c      	ldr	r1, [pc, #368]	; (8004dec <HAL_I2C_Init+0x274>)
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	d819      	bhi.n	8004cb4 <HAL_I2C_Init+0x13c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e59      	subs	r1, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c94:	400b      	ands	r3, r1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_I2C_Init+0x138>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1e59      	subs	r1, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cae:	e051      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e04f      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d111      	bne.n	8004ce0 <HAL_I2C_Init+0x168>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1e58      	subs	r0, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	440b      	add	r3, r1
 8004cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e012      	b.n	8004d06 <HAL_I2C_Init+0x18e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e58      	subs	r0, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	0099      	lsls	r1, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Init+0x196>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e022      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10e      	bne.n	8004d34 <HAL_I2C_Init+0x1bc>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1e58      	subs	r0, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	440b      	add	r3, r1
 8004d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	e00f      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1e58      	subs	r0, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	0099      	lsls	r1, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	6809      	ldr	r1, [r1, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6911      	ldr	r1, [r2, #16]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	000186a0 	.word	0x000186a0
 8004df0:	001e847f 	.word	0x001e847f
 8004df4:	003d08ff 	.word	0x003d08ff
 8004df8:	431bde83 	.word	0x431bde83
 8004dfc:	10624dd3 	.word	0x10624dd3

08004e00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	817b      	strh	r3, [r7, #10]
 8004e10:	4613      	mov	r3, r2
 8004e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7ff faf4 	bl	8004400 <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	f040 80e0 	bne.w	8004fe8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2319      	movs	r3, #25
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4970      	ldr	r1, [pc, #448]	; (8004ff4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fd94 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e0d3      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_I2C_Master_Transmit+0x50>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e0cc      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d007      	beq.n	8004e76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2221      	movs	r2, #33	; 0x21
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2210      	movs	r2, #16
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	893a      	ldrh	r2, [r7, #8]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a50      	ldr	r2, [pc, #320]	; (8004ff8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004eb8:	8979      	ldrh	r1, [r7, #10]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6a3a      	ldr	r2, [r7, #32]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fbfe 	bl	80056c0 <I2C_MasterRequestWrite>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e08d      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ee4:	e066      	b.n	8004fb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	6a39      	ldr	r1, [r7, #32]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fe0e 	bl	8005b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d107      	bne.n	8004f0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e06b      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d11b      	bne.n	8004f88 <HAL_I2C_Master_Transmit+0x188>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	6a39      	ldr	r1, [r7, #32]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fdfe 	bl	8005b8e <I2C_WaitOnBTFFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d107      	bne.n	8004fb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e01a      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d194      	bne.n	8004ee6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	00100002 	.word	0x00100002
 8004ff8:	ffff0000 	.word	0xffff0000

08004ffc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	; 0x30
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	461a      	mov	r2, r3
 8005008:	460b      	mov	r3, r1
 800500a:	817b      	strh	r3, [r7, #10]
 800500c:	4613      	mov	r3, r2
 800500e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005010:	f7ff f9f6 	bl	8004400 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b20      	cmp	r3, #32
 8005020:	f040 820b 	bne.w	800543a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2319      	movs	r3, #25
 800502a:	2201      	movs	r2, #1
 800502c:	497c      	ldr	r1, [pc, #496]	; (8005220 <HAL_I2C_Master_Receive+0x224>)
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fc96 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800503a:	2302      	movs	r3, #2
 800503c:	e1fe      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_I2C_Master_Receive+0x50>
 8005048:	2302      	movs	r3, #2
 800504a:	e1f7      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d007      	beq.n	8005072 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2222      	movs	r2, #34	; 0x22
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2210      	movs	r2, #16
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	893a      	ldrh	r2, [r7, #8]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a5c      	ldr	r2, [pc, #368]	; (8005224 <HAL_I2C_Master_Receive+0x228>)
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050b4:	8979      	ldrh	r1, [r7, #10]
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fb82 	bl	80057c4 <I2C_MasterRequestRead>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e1b8      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d113      	bne.n	80050fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e18c      	b.n	8005414 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d11b      	bne.n	800513a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e16c      	b.n	8005414 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513e:	2b02      	cmp	r3, #2
 8005140:	d11b      	bne.n	800517a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005150:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005162:	2300      	movs	r3, #0
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	e14c      	b.n	8005414 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051a0:	e138      	b.n	8005414 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	f200 80f1 	bhi.w	800538e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d123      	bne.n	80051fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fd29 	bl	8005c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e139      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051fa:	e10b      	b.n	8005414 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	2b02      	cmp	r3, #2
 8005202:	d14e      	bne.n	80052a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	2200      	movs	r2, #0
 800520c:	4906      	ldr	r1, [pc, #24]	; (8005228 <HAL_I2C_Master_Receive+0x22c>)
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fba6 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e10e      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
 800521e:	bf00      	nop
 8005220:	00100002 	.word	0x00100002
 8005224:	ffff0000 	.word	0xffff0000
 8005228:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052a0:	e0b8      	b.n	8005414 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	2200      	movs	r2, #0
 80052aa:	4966      	ldr	r1, [pc, #408]	; (8005444 <HAL_I2C_Master_Receive+0x448>)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fb57 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0bf      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	2200      	movs	r2, #0
 8005306:	494f      	ldr	r1, [pc, #316]	; (8005444 <HAL_I2C_Master_Receive+0x448>)
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fb29 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e091      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800538c:	e042      	b.n	8005414 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fc3c 	bl	8005c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e04c      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d118      	bne.n	8005414 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f aec2 	bne.w	80051a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e000      	b.n	800543c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	3728      	adds	r7, #40	; 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	00010004 	.word	0x00010004

08005448 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08a      	sub	sp, #40	; 0x28
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005458:	f7fe ffd2 	bl	8004400 <HAL_GetTick>
 800545c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	f040 8111 	bne.w	8005692 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2319      	movs	r3, #25
 8005476:	2201      	movs	r2, #1
 8005478:	4988      	ldr	r1, [pc, #544]	; (800569c <HAL_I2C_IsDeviceReady+0x254>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa70 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
 8005488:	e104      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2C_IsDeviceReady+0x50>
 8005494:	2302      	movs	r3, #2
 8005496:	e0fd      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d007      	beq.n	80054be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2224      	movs	r2, #36	; 0x24
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a70      	ldr	r2, [pc, #448]	; (80056a0 <HAL_I2C_IsDeviceReady+0x258>)
 80054e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fa2e 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005518:	d103      	bne.n	8005522 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e0b6      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005534:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005536:	f7fe ff63 	bl	8004400 <HAL_GetTick>
 800553a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800556a:	e025      	b.n	80055b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800556c:	f7fe ff48 	bl	8004400 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <HAL_I2C_IsDeviceReady+0x13a>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	22a0      	movs	r2, #160	; 0xa0
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2ba0      	cmp	r3, #160	; 0xa0
 80055c2:	d005      	beq.n	80055d0 <HAL_I2C_IsDeviceReady+0x188>
 80055c4:	7dfb      	ldrb	r3, [r7, #23]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <HAL_I2C_IsDeviceReady+0x188>
 80055ca:	7dbb      	ldrb	r3, [r7, #22]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0cd      	beq.n	800556c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d129      	bne.n	800563a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2319      	movs	r3, #25
 8005612:	2201      	movs	r2, #1
 8005614:	4921      	ldr	r1, [pc, #132]	; (800569c <HAL_I2C_IsDeviceReady+0x254>)
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f9a2 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e036      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e02c      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005648:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005652:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2319      	movs	r3, #25
 800565a:	2201      	movs	r2, #1
 800565c:	490f      	ldr	r1, [pc, #60]	; (800569c <HAL_I2C_IsDeviceReady+0x254>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f97e 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e012      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	3301      	adds	r3, #1
 8005672:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	f4ff af32 	bcc.w	80054e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	00100002 	.word	0x00100002
 80056a0:	ffff0000 	.word	0xffff0000

080056a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	b2db      	uxtb	r3, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	460b      	mov	r3, r1
 80056ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d006      	beq.n	80056ea <I2C_MasterRequestWrite+0x2a>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d003      	beq.n	80056ea <I2C_MasterRequestWrite+0x2a>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056e8:	d108      	bne.n	80056fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e00b      	b.n	8005714 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	2b12      	cmp	r3, #18
 8005702:	d107      	bne.n	8005714 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005712:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f91d 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573a:	d103      	bne.n	8005744 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e035      	b.n	80057b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005750:	d108      	bne.n	8005764 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005752:	897b      	ldrh	r3, [r7, #10]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005760:	611a      	str	r2, [r3, #16]
 8005762:	e01b      	b.n	800579c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005764:	897b      	ldrh	r3, [r7, #10]
 8005766:	11db      	asrs	r3, r3, #7
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f063 030f 	orn	r3, r3, #15
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	490e      	ldr	r1, [pc, #56]	; (80057bc <I2C_MasterRequestWrite+0xfc>)
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f943 	bl	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e010      	b.n	80057b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005792:	897b      	ldrh	r3, [r7, #10]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4907      	ldr	r1, [pc, #28]	; (80057c0 <I2C_MasterRequestWrite+0x100>)
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f933 	bl	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	00010008 	.word	0x00010008
 80057c0:	00010002 	.word	0x00010002

080057c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	460b      	mov	r3, r1
 80057d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d006      	beq.n	80057fe <I2C_MasterRequestRead+0x3a>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d003      	beq.n	80057fe <I2C_MasterRequestRead+0x3a>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057fc:	d108      	bne.n	8005810 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e00b      	b.n	8005828 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	2b11      	cmp	r3, #17
 8005816:	d107      	bne.n	8005828 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005826:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f893 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00d      	beq.n	800585c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584e:	d103      	bne.n	8005858 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e079      	b.n	8005950 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005864:	d108      	bne.n	8005878 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005866:	897b      	ldrh	r3, [r7, #10]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	b2da      	uxtb	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	611a      	str	r2, [r3, #16]
 8005876:	e05f      	b.n	8005938 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005878:	897b      	ldrh	r3, [r7, #10]
 800587a:	11db      	asrs	r3, r3, #7
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0306 	and.w	r3, r3, #6
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f063 030f 	orn	r3, r3, #15
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4930      	ldr	r1, [pc, #192]	; (8005958 <I2C_MasterRequestRead+0x194>)
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f8b9 	bl	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e054      	b.n	8005950 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058a6:	897b      	ldrh	r3, [r7, #10]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4929      	ldr	r1, [pc, #164]	; (800595c <I2C_MasterRequestRead+0x198>)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f8a9 	bl	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e044      	b.n	8005950 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c6:	2300      	movs	r3, #0
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f831 	bl	8005960 <I2C_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	d103      	bne.n	800591c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e017      	b.n	8005950 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005920:	897b      	ldrh	r3, [r7, #10]
 8005922:	11db      	asrs	r3, r3, #7
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f003 0306 	and.w	r3, r3, #6
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f063 030e 	orn	r3, r3, #14
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4907      	ldr	r1, [pc, #28]	; (800595c <I2C_MasterRequestRead+0x198>)
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f865 	bl	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	00010008 	.word	0x00010008
 800595c:	00010002 	.word	0x00010002

08005960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	4613      	mov	r3, r2
 800596e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005970:	e025      	b.n	80059be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005978:	d021      	beq.n	80059be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fe fd41 	bl	8004400 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d116      	bne.n	80059be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e023      	b.n	8005a06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10d      	bne.n	80059e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	43da      	mvns	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4013      	ands	r3, r2
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bf0c      	ite	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	2300      	movne	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	e00c      	b.n	80059fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	43da      	mvns	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d0b6      	beq.n	8005972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a1c:	e051      	b.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2c:	d123      	bne.n	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e046      	b.n	8005b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7c:	d021      	beq.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7e:	f7fe fcbf 	bl	8004400 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d116      	bne.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e020      	b.n	8005b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10c      	bne.n	8005ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e00b      	b.n	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	43da      	mvns	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d18d      	bne.n	8005a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b18:	e02d      	b.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f8ce 	bl	8005cbc <I2C_IsAcknowledgeFailed>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e02d      	b.n	8005b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b30:	d021      	beq.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b32:	f7fe fc65 	bl	8004400 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d302      	bcc.n	8005b48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d116      	bne.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f043 0220 	orr.w	r2, r3, #32
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e007      	b.n	8005b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d1ca      	bne.n	8005b1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b9a:	e02d      	b.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f88d 	bl	8005cbc <I2C_IsAcknowledgeFailed>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e02d      	b.n	8005c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb2:	d021      	beq.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb4:	f7fe fc24 	bl	8004400 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d302      	bcc.n	8005bca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d116      	bne.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e007      	b.n	8005c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d1ca      	bne.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c1c:	e042      	b.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d119      	bne.n	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0210 	mvn.w	r2, #16
 8005c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e029      	b.n	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7fe fbce 	bl	8004400 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d116      	bne.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e007      	b.n	8005cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d1b5      	bne.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd2:	d11b      	bne.n	8005d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f043 0204 	orr.w	r2, r3, #4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e267      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d075      	beq.n	8005e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3a:	4b88      	ldr	r3, [pc, #544]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d00c      	beq.n	8005d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d46:	4b85      	ldr	r3, [pc, #532]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d112      	bne.n	8005d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d52:	4b82      	ldr	r3, [pc, #520]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d5e:	d10b      	bne.n	8005d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d60:	4b7e      	ldr	r3, [pc, #504]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05b      	beq.n	8005e24 <HAL_RCC_OscConfig+0x108>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d157      	bne.n	8005e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e242      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d106      	bne.n	8005d90 <HAL_RCC_OscConfig+0x74>
 8005d82:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a75      	ldr	r2, [pc, #468]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e01d      	b.n	8005dcc <HAL_RCC_OscConfig+0xb0>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x98>
 8005d9a:	4b70      	ldr	r3, [pc, #448]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a6f      	ldr	r2, [pc, #444]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4b6d      	ldr	r3, [pc, #436]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a6c      	ldr	r2, [pc, #432]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0xb0>
 8005db4:	4b69      	ldr	r3, [pc, #420]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a68      	ldr	r2, [pc, #416]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4b66      	ldr	r3, [pc, #408]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a65      	ldr	r2, [pc, #404]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d013      	beq.n	8005dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fe fb14 	bl	8004400 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ddc:	f7fe fb10 	bl	8004400 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	; 0x64
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e207      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	4b5b      	ldr	r3, [pc, #364]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0xc0>
 8005dfa:	e014      	b.n	8005e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fe fb00 	bl	8004400 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e04:	f7fe fafc 	bl	8004400 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	; 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e1f3      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e16:	4b51      	ldr	r3, [pc, #324]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0xe8>
 8005e22:	e000      	b.n	8005e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d063      	beq.n	8005efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e32:	4b4a      	ldr	r3, [pc, #296]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 030c 	and.w	r3, r3, #12
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d11c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e4a:	4b44      	ldr	r3, [pc, #272]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d116      	bne.n	8005e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e56:	4b41      	ldr	r3, [pc, #260]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_RCC_OscConfig+0x152>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e1c7      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6e:	4b3b      	ldr	r3, [pc, #236]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4937      	ldr	r1, [pc, #220]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e82:	e03a      	b.n	8005efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d020      	beq.n	8005ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e8c:	4b34      	ldr	r3, [pc, #208]	; (8005f60 <HAL_RCC_OscConfig+0x244>)
 8005e8e:	2201      	movs	r2, #1
 8005e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e92:	f7fe fab5 	bl	8004400 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9a:	f7fe fab1 	bl	8004400 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e1a8      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eac:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f0      	beq.n	8005e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb8:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4925      	ldr	r1, [pc, #148]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]
 8005ecc:	e015      	b.n	8005efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ece:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <HAL_RCC_OscConfig+0x244>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed4:	f7fe fa94 	bl	8004400 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005edc:	f7fe fa90 	bl	8004400 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e187      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eee:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d036      	beq.n	8005f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_RCC_OscConfig+0x248>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fe fa74 	bl	8004400 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f1c:	f7fe fa70 	bl	8004400 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e167      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <HAL_RCC_OscConfig+0x240>)
 8005f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0x200>
 8005f3a:	e01b      	b.n	8005f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_OscConfig+0x248>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f42:	f7fe fa5d 	bl	8004400 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f48:	e00e      	b.n	8005f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f4a:	f7fe fa59 	bl	8004400 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d907      	bls.n	8005f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e150      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	42470000 	.word	0x42470000
 8005f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f68:	4b88      	ldr	r3, [pc, #544]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1ea      	bne.n	8005f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8097 	beq.w	80060b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f86:	4b81      	ldr	r3, [pc, #516]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10f      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	4b7d      	ldr	r3, [pc, #500]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	4a7c      	ldr	r2, [pc, #496]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa2:	4b7a      	ldr	r3, [pc, #488]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005faa:	60bb      	str	r3, [r7, #8]
 8005fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb2:	4b77      	ldr	r3, [pc, #476]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d118      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fbe:	4b74      	ldr	r3, [pc, #464]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a73      	ldr	r2, [pc, #460]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fca:	f7fe fa19 	bl	8004400 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd2:	f7fe fa15 	bl	8004400 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e10c      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe4:	4b6a      	ldr	r3, [pc, #424]	; (8006190 <HAL_RCC_OscConfig+0x474>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d106      	bne.n	8006006 <HAL_RCC_OscConfig+0x2ea>
 8005ff8:	4b64      	ldr	r3, [pc, #400]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a63      	ldr	r2, [pc, #396]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	e01c      	b.n	8006040 <HAL_RCC_OscConfig+0x324>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d10c      	bne.n	8006028 <HAL_RCC_OscConfig+0x30c>
 800600e:	4b5f      	ldr	r3, [pc, #380]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	4a5e      	ldr	r2, [pc, #376]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	6713      	str	r3, [r2, #112]	; 0x70
 800601a:	4b5c      	ldr	r3, [pc, #368]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	4a5b      	ldr	r2, [pc, #364]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	6713      	str	r3, [r2, #112]	; 0x70
 8006026:	e00b      	b.n	8006040 <HAL_RCC_OscConfig+0x324>
 8006028:	4b58      	ldr	r3, [pc, #352]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	4a57      	ldr	r2, [pc, #348]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	6713      	str	r3, [r2, #112]	; 0x70
 8006034:	4b55      	ldr	r3, [pc, #340]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <HAL_RCC_OscConfig+0x470>)
 800603a:	f023 0304 	bic.w	r3, r3, #4
 800603e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d015      	beq.n	8006074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006048:	f7fe f9da 	bl	8004400 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604e:	e00a      	b.n	8006066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006050:	f7fe f9d6 	bl	8004400 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	; 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e0cb      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0ee      	beq.n	8006050 <HAL_RCC_OscConfig+0x334>
 8006072:	e014      	b.n	800609e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006074:	f7fe f9c4 	bl	8004400 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607a:	e00a      	b.n	8006092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800607c:	f7fe f9c0 	bl	8004400 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f241 3288 	movw	r2, #5000	; 0x1388
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e0b5      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006092:	4b3e      	ldr	r3, [pc, #248]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1ee      	bne.n	800607c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d105      	bne.n	80060b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a4:	4b39      	ldr	r3, [pc, #228]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	4a38      	ldr	r2, [pc, #224]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a1 	beq.w	80061fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ba:	4b34      	ldr	r3, [pc, #208]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d05c      	beq.n	8006180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d141      	bne.n	8006152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <HAL_RCC_OscConfig+0x478>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fe f994 	bl	8004400 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fe f990 	bl	8004400 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e087      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	4b27      	ldr	r3, [pc, #156]	; (800618c <HAL_RCC_OscConfig+0x470>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	3b01      	subs	r3, #1
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	061b      	lsls	r3, r3, #24
 800611e:	491b      	ldr	r1, [pc, #108]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006120:	4313      	orrs	r3, r2
 8006122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <HAL_RCC_OscConfig+0x478>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612a:	f7fe f969 	bl	8004400 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006132:	f7fe f965 	bl	8004400 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e05c      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006144:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCC_OscConfig+0x416>
 8006150:	e054      	b.n	80061fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006152:	4b10      	ldr	r3, [pc, #64]	; (8006194 <HAL_RCC_OscConfig+0x478>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006158:	f7fe f952 	bl	8004400 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006160:	f7fe f94e 	bl	8004400 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e045      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_RCC_OscConfig+0x470>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x444>
 800617e:	e03d      	b.n	80061fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d107      	bne.n	8006198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e038      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
 800618c:	40023800 	.word	0x40023800
 8006190:	40007000 	.word	0x40007000
 8006194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <HAL_RCC_OscConfig+0x4ec>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d028      	beq.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d121      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d11a      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d111      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	3b01      	subs	r3, #1
 80061e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d107      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40023800 	.word	0x40023800

0800620c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0cc      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006220:	4b68      	ldr	r3, [pc, #416]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d90c      	bls.n	8006248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b65      	ldr	r3, [pc, #404]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006236:	4b63      	ldr	r3, [pc, #396]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0b8      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d020      	beq.n	8006296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006260:	4b59      	ldr	r3, [pc, #356]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4a58      	ldr	r2, [pc, #352]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800626a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006278:	4b53      	ldr	r3, [pc, #332]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a52      	ldr	r2, [pc, #328]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006284:	4b50      	ldr	r3, [pc, #320]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	494d      	ldr	r1, [pc, #308]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d044      	beq.n	800632c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062aa:	4b47      	ldr	r3, [pc, #284]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d119      	bne.n	80062ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e07f      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d003      	beq.n	80062ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d107      	bne.n	80062da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ca:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e06f      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062da:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e067      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ea:	4b37      	ldr	r3, [pc, #220]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f023 0203 	bic.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4934      	ldr	r1, [pc, #208]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062fc:	f7fe f880 	bl	8004400 <HAL_GetTick>
 8006300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006302:	e00a      	b.n	800631a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006304:	f7fe f87c 	bl	8004400 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e04f      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 020c 	and.w	r2, r3, #12
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	429a      	cmp	r2, r3
 800632a:	d1eb      	bne.n	8006304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d20c      	bcs.n	8006354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b22      	ldr	r3, [pc, #136]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006342:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e032      	b.n	80063ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006360:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4916      	ldr	r1, [pc, #88]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	4313      	orrs	r3, r2
 8006370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d009      	beq.n	8006392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	490e      	ldr	r1, [pc, #56]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006392:	f000 f821 	bl	80063d8 <HAL_RCC_GetSysClockFreq>
 8006396:	4602      	mov	r2, r0
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	490a      	ldr	r1, [pc, #40]	; (80063cc <HAL_RCC_ClockConfig+0x1c0>)
 80063a4:	5ccb      	ldrb	r3, [r1, r3]
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <HAL_RCC_ClockConfig+0x1c4>)
 80063ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063ae:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <HAL_RCC_ClockConfig+0x1c8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fd ffe0 	bl	8004378 <HAL_InitTick>

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40023c00 	.word	0x40023c00
 80063c8:	40023800 	.word	0x40023800
 80063cc:	0800bfe8 	.word	0x0800bfe8
 80063d0:	2000001c 	.word	0x2000001c
 80063d4:	20000020 	.word	0x20000020

080063d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063dc:	b094      	sub	sp, #80	; 0x50
 80063de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	647b      	str	r3, [r7, #68]	; 0x44
 80063e4:	2300      	movs	r3, #0
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e8:	2300      	movs	r3, #0
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f0:	4b79      	ldr	r3, [pc, #484]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 030c 	and.w	r3, r3, #12
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d00d      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x40>
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	f200 80e1 	bhi.w	80065c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0x34>
 8006406:	2b04      	cmp	r3, #4
 8006408:	d003      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0x3a>
 800640a:	e0db      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800640c:	4b73      	ldr	r3, [pc, #460]	; (80065dc <HAL_RCC_GetSysClockFreq+0x204>)
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006410:	e0db      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006412:	4b73      	ldr	r3, [pc, #460]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006416:	e0d8      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006418:	4b6f      	ldr	r3, [pc, #444]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006422:	4b6d      	ldr	r3, [pc, #436]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d063      	beq.n	80064f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642e:	4b6a      	ldr	r3, [pc, #424]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	099b      	lsrs	r3, r3, #6
 8006434:	2200      	movs	r2, #0
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
 8006438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
 8006442:	2300      	movs	r3, #0
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800644a:	4622      	mov	r2, r4
 800644c:	462b      	mov	r3, r5
 800644e:	f04f 0000 	mov.w	r0, #0
 8006452:	f04f 0100 	mov.w	r1, #0
 8006456:	0159      	lsls	r1, r3, #5
 8006458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800645c:	0150      	lsls	r0, r2, #5
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4621      	mov	r1, r4
 8006464:	1a51      	subs	r1, r2, r1
 8006466:	6139      	str	r1, [r7, #16]
 8006468:	4629      	mov	r1, r5
 800646a:	eb63 0301 	sbc.w	r3, r3, r1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800647c:	4659      	mov	r1, fp
 800647e:	018b      	lsls	r3, r1, #6
 8006480:	4651      	mov	r1, sl
 8006482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006486:	4651      	mov	r1, sl
 8006488:	018a      	lsls	r2, r1, #6
 800648a:	4651      	mov	r1, sl
 800648c:	ebb2 0801 	subs.w	r8, r2, r1
 8006490:	4659      	mov	r1, fp
 8006492:	eb63 0901 	sbc.w	r9, r3, r1
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064aa:	4690      	mov	r8, r2
 80064ac:	4699      	mov	r9, r3
 80064ae:	4623      	mov	r3, r4
 80064b0:	eb18 0303 	adds.w	r3, r8, r3
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	462b      	mov	r3, r5
 80064b8:	eb49 0303 	adc.w	r3, r9, r3
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ca:	4629      	mov	r1, r5
 80064cc:	024b      	lsls	r3, r1, #9
 80064ce:	4621      	mov	r1, r4
 80064d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064d4:	4621      	mov	r1, r4
 80064d6:	024a      	lsls	r2, r1, #9
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064de:	2200      	movs	r2, #0
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064e8:	f7fa fbae 	bl	8000c48 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4613      	mov	r3, r2
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f4:	e058      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f6:	4b38      	ldr	r3, [pc, #224]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	099b      	lsrs	r3, r3, #6
 80064fc:	2200      	movs	r2, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	4611      	mov	r1, r2
 8006502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006506:	623b      	str	r3, [r7, #32]
 8006508:	2300      	movs	r3, #0
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
 800650c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006510:	4642      	mov	r2, r8
 8006512:	464b      	mov	r3, r9
 8006514:	f04f 0000 	mov.w	r0, #0
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	0159      	lsls	r1, r3, #5
 800651e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006522:	0150      	lsls	r0, r2, #5
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4641      	mov	r1, r8
 800652a:	ebb2 0a01 	subs.w	sl, r2, r1
 800652e:	4649      	mov	r1, r9
 8006530:	eb63 0b01 	sbc.w	fp, r3, r1
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006548:	ebb2 040a 	subs.w	r4, r2, sl
 800654c:	eb63 050b 	sbc.w	r5, r3, fp
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	00eb      	lsls	r3, r5, #3
 800655a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800655e:	00e2      	lsls	r2, r4, #3
 8006560:	4614      	mov	r4, r2
 8006562:	461d      	mov	r5, r3
 8006564:	4643      	mov	r3, r8
 8006566:	18e3      	adds	r3, r4, r3
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	464b      	mov	r3, r9
 800656c:	eb45 0303 	adc.w	r3, r5, r3
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800657e:	4629      	mov	r1, r5
 8006580:	028b      	lsls	r3, r1, #10
 8006582:	4621      	mov	r1, r4
 8006584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006588:	4621      	mov	r1, r4
 800658a:	028a      	lsls	r2, r1, #10
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006592:	2200      	movs	r2, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	61fa      	str	r2, [r7, #28]
 8006598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800659c:	f7fa fb54 	bl	8000c48 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4613      	mov	r3, r2
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	0c1b      	lsrs	r3, r3, #16
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	3301      	adds	r3, #1
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c2:	e002      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetSysClockFreq+0x204>)
 80065c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3750      	adds	r7, #80	; 0x50
 80065d0:	46bd      	mov	sp, r7
 80065d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800
 80065dc:	00f42400 	.word	0x00f42400
 80065e0:	007a1200 	.word	0x007a1200

080065e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ea:	681b      	ldr	r3, [r3, #0]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	2000001c 	.word	0x2000001c

080065fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006600:	f7ff fff0 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8006604:	4602      	mov	r2, r0
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	0a9b      	lsrs	r3, r3, #10
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	4903      	ldr	r1, [pc, #12]	; (8006620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006612:	5ccb      	ldrb	r3, [r1, r3]
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	0800bff8 	.word	0x0800bff8

08006624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006628:	f7ff ffdc 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 800662c:	4602      	mov	r2, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0b5b      	lsrs	r3, r3, #13
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4903      	ldr	r1, [pc, #12]	; (8006648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800663a:	5ccb      	ldrb	r3, [r1, r3]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	0800bff8 	.word	0x0800bff8

0800664c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e07b      	b.n	8006756 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800666e:	d009      	beq.n	8006684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
 8006676:	e005      	b.n	8006684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fb ffca 	bl	8002638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	ea42 0103 	orr.w	r1, r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	f003 0104 	and.w	r1, r3, #4
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	f003 0210 	and.w	r2, r3, #16
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e041      	b.n	80067f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fc f813 	bl	80027b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f000 fed1 	bl	8007544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d001      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e04e      	b.n	80068b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a23      	ldr	r2, [pc, #140]	; (80068c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d022      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x80>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683e:	d01d      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x80>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d018      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x80>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1e      	ldr	r2, [pc, #120]	; (80068c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d013      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x80>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <HAL_TIM_Base_Start_IT+0xd0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00e      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x80>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1b      	ldr	r2, [pc, #108]	; (80068d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x80>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x80>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d111      	bne.n	80068a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b06      	cmp	r3, #6
 800688c:	d010      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689e:	e007      	b.n	80068b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	40010400 	.word	0x40010400
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40001800 	.word	0x40001800

080068dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e041      	b.n	8006972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fb fff8 	bl	80028f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f000 fe12 	bl	8007544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <HAL_TIM_PWM_Start+0x24>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	e022      	b.n	80069e6 <HAL_TIM_PWM_Start+0x6a>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d109      	bne.n	80069ba <HAL_TIM_PWM_Start+0x3e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	bf14      	ite	ne
 80069b2:	2301      	movne	r3, #1
 80069b4:	2300      	moveq	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	e015      	b.n	80069e6 <HAL_TIM_PWM_Start+0x6a>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d109      	bne.n	80069d4 <HAL_TIM_PWM_Start+0x58>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	e008      	b.n	80069e6 <HAL_TIM_PWM_Start+0x6a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	bf14      	ite	ne
 80069e0:	2301      	movne	r3, #1
 80069e2:	2300      	moveq	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e07c      	b.n	8006ae8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_PWM_Start+0x82>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069fc:	e013      	b.n	8006a26 <HAL_TIM_PWM_Start+0xaa>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_PWM_Start+0x92>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a0c:	e00b      	b.n	8006a26 <HAL_TIM_PWM_Start+0xaa>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_PWM_Start+0xa2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a1c:	e003      	b.n	8006a26 <HAL_TIM_PWM_Start+0xaa>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f99c 	bl	8007d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2d      	ldr	r2, [pc, #180]	; (8006af0 <HAL_TIM_PWM_Start+0x174>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_PWM_Start+0xcc>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2c      	ldr	r2, [pc, #176]	; (8006af4 <HAL_TIM_PWM_Start+0x178>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d101      	bne.n	8006a4c <HAL_TIM_PWM_Start+0xd0>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_TIM_PWM_Start+0xd2>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <HAL_TIM_PWM_Start+0x174>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d022      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x136>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a74:	d01d      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x136>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <HAL_TIM_PWM_Start+0x17c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d018      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x136>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <HAL_TIM_PWM_Start+0x180>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x136>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <HAL_TIM_PWM_Start+0x184>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00e      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x136>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <HAL_TIM_PWM_Start+0x178>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x136>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <HAL_TIM_PWM_Start+0x188>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x136>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <HAL_TIM_PWM_Start+0x18c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d111      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	d010      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad4:	e007      	b.n	8006ae6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0201 	orr.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40001800 	.word	0x40001800

08006b0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e041      	b.n	8006ba2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f839 	bl	8006baa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f000 fcfa 	bl	8007544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
	...

08006bc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_IC_Start_IT+0x1e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	e013      	b.n	8006c06 <HAL_TIM_IC_Start_IT+0x46>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_IC_Start_IT+0x2e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	e00b      	b.n	8006c06 <HAL_TIM_IC_Start_IT+0x46>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_IC_Start_IT+0x3e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	e003      	b.n	8006c06 <HAL_TIM_IC_Start_IT+0x46>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <HAL_TIM_IC_Start_IT+0x58>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	e013      	b.n	8006c40 <HAL_TIM_IC_Start_IT+0x80>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d104      	bne.n	8006c28 <HAL_TIM_IC_Start_IT+0x68>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	e00b      	b.n	8006c40 <HAL_TIM_IC_Start_IT+0x80>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d104      	bne.n	8006c38 <HAL_TIM_IC_Start_IT+0x78>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	e003      	b.n	8006c40 <HAL_TIM_IC_Start_IT+0x80>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d102      	bne.n	8006c4e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c48:	7b7b      	ldrb	r3, [r7, #13]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e0cc      	b.n	8006dec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_IC_Start_IT+0xa2>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c60:	e013      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0xca>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_IC_Start_IT+0xb2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c70:	e00b      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0xca>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_IC_Start_IT+0xc2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	e003      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0xca>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_IC_Start_IT+0xda>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c98:	e013      	b.n	8006cc2 <HAL_TIM_IC_Start_IT+0x102>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_IC_Start_IT+0xea>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca8:	e00b      	b.n	8006cc2 <HAL_TIM_IC_Start_IT+0x102>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_IC_Start_IT+0xfa>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb8:	e003      	b.n	8006cc2 <HAL_TIM_IC_Start_IT+0x102>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d841      	bhi.n	8006d4c <HAL_TIM_IC_Start_IT+0x18c>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <HAL_TIM_IC_Start_IT+0x110>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d4d 	.word	0x08006d4d
 8006cd8:	08006d4d 	.word	0x08006d4d
 8006cdc:	08006d4d 	.word	0x08006d4d
 8006ce0:	08006d17 	.word	0x08006d17
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006d4d 	.word	0x08006d4d
 8006cec:	08006d4d 	.word	0x08006d4d
 8006cf0:	08006d29 	.word	0x08006d29
 8006cf4:	08006d4d 	.word	0x08006d4d
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006d4d 	.word	0x08006d4d
 8006d00:	08006d3b 	.word	0x08006d3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0202 	orr.w	r2, r2, #2
 8006d12:	60da      	str	r2, [r3, #12]
      break;
 8006d14:	e01d      	b.n	8006d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0204 	orr.w	r2, r2, #4
 8006d24:	60da      	str	r2, [r3, #12]
      break;
 8006d26:	e014      	b.n	8006d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0208 	orr.w	r2, r2, #8
 8006d36:	60da      	str	r2, [r3, #12]
      break;
 8006d38:	e00b      	b.n	8006d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0210 	orr.w	r2, r2, #16
 8006d48:	60da      	str	r2, [r3, #12]
      break;
 8006d4a:	e002      	b.n	8006d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d50:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d148      	bne.n	8006dea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 f803 	bl	8007d6c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a22      	ldr	r2, [pc, #136]	; (8006df4 <HAL_TIM_IC_Start_IT+0x234>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d022      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d78:	d01d      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <HAL_TIM_IC_Start_IT+0x238>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d018      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <HAL_TIM_IC_Start_IT+0x23c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <HAL_TIM_IC_Start_IT+0x240>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00e      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <HAL_TIM_IC_Start_IT+0x244>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d009      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <HAL_TIM_IC_Start_IT+0x248>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a16      	ldr	r2, [pc, #88]	; (8006e0c <HAL_TIM_IC_Start_IT+0x24c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d111      	bne.n	8006dda <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b06      	cmp	r3, #6
 8006dc6:	d010      	beq.n	8006dea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd8:	e007      	b.n	8006dea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0201 	orr.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40000400 	.word	0x40000400
 8006dfc:	40000800 	.word	0x40000800
 8006e00:	40000c00 	.word	0x40000c00
 8006e04:	40010400 	.word	0x40010400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40001800 	.word	0x40001800

08006e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d122      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0202 	mvn.w	r2, #2
 8006e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fd f8c6 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fb54 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fb5b 	bl	800751c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0204 	mvn.w	r2, #4
 8006e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fd f89c 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fb2a 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fb31 	bl	800751c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d122      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d11b      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0208 	mvn.w	r2, #8
 8006ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fd f872 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8006f00:	e005      	b.n	8006f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fb00 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fb07 	bl	800751c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d122      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d11b      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0210 	mvn.w	r2, #16
 8006f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fd f848 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8006f54:	e005      	b.n	8006f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fad6 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fadd 	bl	800751c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10e      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0201 	mvn.w	r2, #1
 8006f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fab0 	bl	80074f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9e:	2b80      	cmp	r3, #128	; 0x80
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fac:	2b80      	cmp	r3, #128	; 0x80
 8006fae:	d107      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 ffd4 	bl	8007f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	d10e      	bne.n	8006fec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b40      	cmp	r3, #64	; 0x40
 8006fda:	d107      	bne.n	8006fec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 faa2 	bl	8007530 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d10e      	bne.n	8007018 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b20      	cmp	r3, #32
 8007006:	d107      	bne.n	8007018 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0220 	mvn.w	r2, #32
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 ff9e 	bl	8007f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_TIM_IC_ConfigChannel+0x1e>
 800703a:	2302      	movs	r3, #2
 800703c:	e088      	b.n	8007150 <HAL_TIM_IC_ConfigChannel+0x130>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11b      	bne.n	8007084 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f000 fcc2 	bl	80079e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 020c 	bic.w	r2, r2, #12
 800706e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6999      	ldr	r1, [r3, #24]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	619a      	str	r2, [r3, #24]
 8007082:	e060      	b.n	8007146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b04      	cmp	r3, #4
 8007088:	d11c      	bne.n	80070c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6819      	ldr	r1, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f000 fd46 	bl	8007b2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6999      	ldr	r1, [r3, #24]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	021a      	lsls	r2, r3, #8
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	619a      	str	r2, [r3, #24]
 80070c2:	e040      	b.n	8007146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d11b      	bne.n	8007102 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f000 fd93 	bl	8007c04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 020c 	bic.w	r2, r2, #12
 80070ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69d9      	ldr	r1, [r3, #28]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	61da      	str	r2, [r3, #28]
 8007100:	e021      	b.n	8007146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d11c      	bne.n	8007142 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f000 fdb0 	bl	8007c7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69da      	ldr	r2, [r3, #28]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800712a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69d9      	ldr	r1, [r3, #28]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	021a      	lsls	r2, r3, #8
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	61da      	str	r2, [r3, #28]
 8007140:	e001      	b.n	8007146 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800714e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007172:	2302      	movs	r3, #2
 8007174:	e0ae      	b.n	80072d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b0c      	cmp	r3, #12
 8007182:	f200 809f 	bhi.w	80072c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071c1 	.word	0x080071c1
 8007190:	080072c5 	.word	0x080072c5
 8007194:	080072c5 	.word	0x080072c5
 8007198:	080072c5 	.word	0x080072c5
 800719c:	08007201 	.word	0x08007201
 80071a0:	080072c5 	.word	0x080072c5
 80071a4:	080072c5 	.word	0x080072c5
 80071a8:	080072c5 	.word	0x080072c5
 80071ac:	08007243 	.word	0x08007243
 80071b0:	080072c5 	.word	0x080072c5
 80071b4:	080072c5 	.word	0x080072c5
 80071b8:	080072c5 	.word	0x080072c5
 80071bc:	08007283 	.word	0x08007283
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fa5c 	bl	8007684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0208 	orr.w	r2, r2, #8
 80071da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0204 	bic.w	r2, r2, #4
 80071ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6999      	ldr	r1, [r3, #24]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	619a      	str	r2, [r3, #24]
      break;
 80071fe:	e064      	b.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	4618      	mov	r0, r3
 8007208:	f000 faac 	bl	8007764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800721a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800722a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6999      	ldr	r1, [r3, #24]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	021a      	lsls	r2, r3, #8
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	619a      	str	r2, [r3, #24]
      break;
 8007240:	e043      	b.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fb01 	bl	8007850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0208 	orr.w	r2, r2, #8
 800725c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69da      	ldr	r2, [r3, #28]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0204 	bic.w	r2, r2, #4
 800726c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69d9      	ldr	r1, [r3, #28]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	61da      	str	r2, [r3, #28]
      break;
 8007280:	e023      	b.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fb55 	bl	8007938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800729c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69d9      	ldr	r1, [r3, #28]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	021a      	lsls	r2, r3, #8
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	61da      	str	r2, [r3, #28]
      break;
 80072c2:	e002      	b.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
      break;
 80072c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_TIM_ConfigClockSource+0x1c>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e0b4      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x186>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800731e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007330:	d03e      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0xd4>
 8007332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007336:	f200 8087 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733e:	f000 8086 	beq.w	800744e <HAL_TIM_ConfigClockSource+0x172>
 8007342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007346:	d87f      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 8007348:	2b70      	cmp	r3, #112	; 0x70
 800734a:	d01a      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0xa6>
 800734c:	2b70      	cmp	r3, #112	; 0x70
 800734e:	d87b      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 8007350:	2b60      	cmp	r3, #96	; 0x60
 8007352:	d050      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x11a>
 8007354:	2b60      	cmp	r3, #96	; 0x60
 8007356:	d877      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 8007358:	2b50      	cmp	r3, #80	; 0x50
 800735a:	d03c      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0xfa>
 800735c:	2b50      	cmp	r3, #80	; 0x50
 800735e:	d873      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d058      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x13a>
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d86f      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 8007368:	2b30      	cmp	r3, #48	; 0x30
 800736a:	d064      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x15a>
 800736c:	2b30      	cmp	r3, #48	; 0x30
 800736e:	d86b      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 8007370:	2b20      	cmp	r3, #32
 8007372:	d060      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x15a>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d867      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05c      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x15a>
 800737c:	2b10      	cmp	r3, #16
 800737e:	d05a      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x15a>
 8007380:	e062      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6899      	ldr	r1, [r3, #8]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f000 fccb 	bl	8007d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	609a      	str	r2, [r3, #8]
      break;
 80073ae:	e04f      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	6899      	ldr	r1, [r3, #8]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f000 fcb4 	bl	8007d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073d2:	609a      	str	r2, [r3, #8]
      break;
 80073d4:	e03c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	461a      	mov	r2, r3
 80073e4:	f000 fb72 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2150      	movs	r1, #80	; 0x50
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fc81 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 80073f4:	e02c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6859      	ldr	r1, [r3, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	461a      	mov	r2, r3
 8007404:	f000 fbce 	bl	8007ba4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2160      	movs	r1, #96	; 0x60
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fc71 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007414:	e01c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6859      	ldr	r1, [r3, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	461a      	mov	r2, r3
 8007424:	f000 fb52 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2140      	movs	r1, #64	; 0x40
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fc61 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007434:	e00c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f000 fc58 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007446:	e003      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
      break;
 800744c:	e000      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800744e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b0c      	cmp	r3, #12
 800747e:	d831      	bhi.n	80074e4 <HAL_TIM_ReadCapturedValue+0x78>
 8007480:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074bd 	.word	0x080074bd
 800748c:	080074e5 	.word	0x080074e5
 8007490:	080074e5 	.word	0x080074e5
 8007494:	080074e5 	.word	0x080074e5
 8007498:	080074c7 	.word	0x080074c7
 800749c:	080074e5 	.word	0x080074e5
 80074a0:	080074e5 	.word	0x080074e5
 80074a4:	080074e5 	.word	0x080074e5
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074e5 	.word	0x080074e5
 80074b0:	080074e5 	.word	0x080074e5
 80074b4:	080074e5 	.word	0x080074e5
 80074b8:	080074db 	.word	0x080074db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c2:	60fb      	str	r3, [r7, #12]

      break;
 80074c4:	e00f      	b.n	80074e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	60fb      	str	r3, [r7, #12]

      break;
 80074ce:	e00a      	b.n	80074e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	60fb      	str	r3, [r7, #12]

      break;
 80074d8:	e005      	b.n	80074e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	60fb      	str	r3, [r7, #12]

      break;
 80074e2:	e000      	b.n	80074e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80074e4:	bf00      	nop
  }

  return tmpreg;
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a40      	ldr	r2, [pc, #256]	; (8007658 <TIM_Base_SetConfig+0x114>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d00f      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3d      	ldr	r2, [pc, #244]	; (800765c <TIM_Base_SetConfig+0x118>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00b      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a3c      	ldr	r2, [pc, #240]	; (8007660 <TIM_Base_SetConfig+0x11c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a3b      	ldr	r2, [pc, #236]	; (8007664 <TIM_Base_SetConfig+0x120>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3a      	ldr	r2, [pc, #232]	; (8007668 <TIM_Base_SetConfig+0x124>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d108      	bne.n	8007596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2f      	ldr	r2, [pc, #188]	; (8007658 <TIM_Base_SetConfig+0x114>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a4:	d027      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a2c      	ldr	r2, [pc, #176]	; (800765c <TIM_Base_SetConfig+0x118>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d023      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2b      	ldr	r2, [pc, #172]	; (8007660 <TIM_Base_SetConfig+0x11c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01f      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <TIM_Base_SetConfig+0x120>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a29      	ldr	r2, [pc, #164]	; (8007668 <TIM_Base_SetConfig+0x124>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d017      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a28      	ldr	r2, [pc, #160]	; (800766c <TIM_Base_SetConfig+0x128>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <TIM_Base_SetConfig+0x12c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a26      	ldr	r2, [pc, #152]	; (8007674 <TIM_Base_SetConfig+0x130>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a25      	ldr	r2, [pc, #148]	; (8007678 <TIM_Base_SetConfig+0x134>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a24      	ldr	r2, [pc, #144]	; (800767c <TIM_Base_SetConfig+0x138>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a23      	ldr	r2, [pc, #140]	; (8007680 <TIM_Base_SetConfig+0x13c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d108      	bne.n	8007608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <TIM_Base_SetConfig+0x114>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d003      	beq.n	800763c <TIM_Base_SetConfig+0xf8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <TIM_Base_SetConfig+0x124>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d103      	bne.n	8007644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	615a      	str	r2, [r3, #20]
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40010000 	.word	0x40010000
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40010400 	.word	0x40010400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800
 8007678:	40001800 	.word	0x40001800
 800767c:	40001c00 	.word	0x40001c00
 8007680:	40002000 	.word	0x40002000

08007684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 0302 	bic.w	r3, r3, #2
 80076cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a20      	ldr	r2, [pc, #128]	; (800775c <TIM_OC1_SetConfig+0xd8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC1_SetConfig+0x64>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <TIM_OC1_SetConfig+0xdc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10c      	bne.n	8007702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0308 	bic.w	r3, r3, #8
 80076ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 0304 	bic.w	r3, r3, #4
 8007700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a15      	ldr	r2, [pc, #84]	; (800775c <TIM_OC1_SetConfig+0xd8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d003      	beq.n	8007712 <TIM_OC1_SetConfig+0x8e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a14      	ldr	r2, [pc, #80]	; (8007760 <TIM_OC1_SetConfig+0xdc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d111      	bne.n	8007736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	bf00      	nop
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	40010000 	.word	0x40010000
 8007760:	40010400 	.word	0x40010400

08007764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0210 	bic.w	r2, r3, #16
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0320 	bic.w	r3, r3, #32
 80077ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a22      	ldr	r2, [pc, #136]	; (8007848 <TIM_OC2_SetConfig+0xe4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC2_SetConfig+0x68>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a21      	ldr	r2, [pc, #132]	; (800784c <TIM_OC2_SetConfig+0xe8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10d      	bne.n	80077e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a17      	ldr	r2, [pc, #92]	; (8007848 <TIM_OC2_SetConfig+0xe4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC2_SetConfig+0x94>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <TIM_OC2_SetConfig+0xe8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d113      	bne.n	8007820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	40010400 	.word	0x40010400

08007850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a21      	ldr	r2, [pc, #132]	; (8007930 <TIM_OC3_SetConfig+0xe0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC3_SetConfig+0x66>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a20      	ldr	r2, [pc, #128]	; (8007934 <TIM_OC3_SetConfig+0xe4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10d      	bne.n	80078d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a16      	ldr	r2, [pc, #88]	; (8007930 <TIM_OC3_SetConfig+0xe0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_OC3_SetConfig+0x92>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a15      	ldr	r2, [pc, #84]	; (8007934 <TIM_OC3_SetConfig+0xe4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d113      	bne.n	800790a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	621a      	str	r2, [r3, #32]
}
 8007924:	bf00      	nop
 8007926:	371c      	adds	r7, #28
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	40010000 	.word	0x40010000
 8007934:	40010400 	.word	0x40010400

08007938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a12      	ldr	r2, [pc, #72]	; (80079dc <TIM_OC4_SetConfig+0xa4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC4_SetConfig+0x68>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a11      	ldr	r2, [pc, #68]	; (80079e0 <TIM_OC4_SetConfig+0xa8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	019b      	lsls	r3, r3, #6
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40010400 	.word	0x40010400

080079e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	f023 0201 	bic.w	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4a28      	ldr	r2, [pc, #160]	; (8007ab0 <TIM_TI1_SetConfig+0xcc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01b      	beq.n	8007a4a <TIM_TI1_SetConfig+0x66>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a18:	d017      	beq.n	8007a4a <TIM_TI1_SetConfig+0x66>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4a25      	ldr	r2, [pc, #148]	; (8007ab4 <TIM_TI1_SetConfig+0xd0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d013      	beq.n	8007a4a <TIM_TI1_SetConfig+0x66>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4a24      	ldr	r2, [pc, #144]	; (8007ab8 <TIM_TI1_SetConfig+0xd4>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00f      	beq.n	8007a4a <TIM_TI1_SetConfig+0x66>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4a23      	ldr	r2, [pc, #140]	; (8007abc <TIM_TI1_SetConfig+0xd8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_TI1_SetConfig+0x66>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a22      	ldr	r2, [pc, #136]	; (8007ac0 <TIM_TI1_SetConfig+0xdc>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <TIM_TI1_SetConfig+0x66>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4a21      	ldr	r2, [pc, #132]	; (8007ac4 <TIM_TI1_SetConfig+0xe0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_TI1_SetConfig+0x66>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4a20      	ldr	r2, [pc, #128]	; (8007ac8 <TIM_TI1_SetConfig+0xe4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d101      	bne.n	8007a4e <TIM_TI1_SetConfig+0x6a>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <TIM_TI1_SetConfig+0x6c>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0303 	bic.w	r3, r3, #3
 8007a5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e003      	b.n	8007a6e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f023 030a 	bic.w	r3, r3, #10
 8007a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 030a 	and.w	r3, r3, #10
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40010400 	.word	0x40010400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40001800 	.word	0x40001800

08007acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 030a 	bic.w	r3, r3, #10
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	f023 0210 	bic.w	r2, r3, #16
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	031b      	lsls	r3, r3, #12
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	621a      	str	r2, [r3, #32]
}
 8007b98:	bf00      	nop
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f023 0210 	bic.w	r2, r3, #16
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	031b      	lsls	r3, r3, #12
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f023 0303 	bic.w	r3, r3, #3
 8007c30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007c54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	621a      	str	r2, [r3, #32]
}
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	031b      	lsls	r3, r3, #12
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007cce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	031b      	lsls	r3, r3, #12
 8007cd4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	621a      	str	r2, [r3, #32]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f043 0307 	orr.w	r3, r3, #7
 8007d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	609a      	str	r2, [r3, #8]
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	021a      	lsls	r2, r3, #8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	609a      	str	r2, [r3, #8]
}
 8007d60:	bf00      	nop
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	2201      	movs	r2, #1
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a1a      	ldr	r2, [r3, #32]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a1a      	ldr	r2, [r3, #32]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f003 031f 	and.w	r3, r3, #31
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	fa01 f303 	lsl.w	r3, r1, r3
 8007da4:	431a      	orrs	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
	...

08007db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e05a      	b.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a21      	ldr	r2, [pc, #132]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d022      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1c:	d01d      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1d      	ldr	r2, [pc, #116]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d018      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1b      	ldr	r2, [pc, #108]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d013      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1a      	ldr	r2, [pc, #104]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00e      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d009      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a17      	ldr	r2, [pc, #92]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d004      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d10c      	bne.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40000400 	.word	0x40000400
 8007e9c:	40000800 	.word	0x40000800
 8007ea0:	40000c00 	.word	0x40000c00
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40001800 	.word	0x40001800

08007eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e03d      	b.n	8007f48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e03f      	b.n	800800e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fa fd4a 	bl	8002a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fd19 	bl	80089f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008016:	b480      	push	{r7}
 8008018:	b085      	sub	sp, #20
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	4613      	mov	r3, r2
 8008022:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b20      	cmp	r3, #32
 800802e:	d130      	bne.n	8008092 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_UART_Transmit_IT+0x26>
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e029      	b.n	8008094 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_UART_Transmit_IT+0x38>
 800804a:	2302      	movs	r3, #2
 800804c:	e022      	b.n	8008094 <HAL_UART_Transmit_IT+0x7e>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	88fa      	ldrh	r2, [r7, #6]
 8008060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	88fa      	ldrh	r2, [r7, #6]
 8008066:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2221      	movs	r2, #33	; 0x21
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800808c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e000      	b.n	8008094 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008092:	2302      	movs	r3, #2
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d11d      	bne.n	80080f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_UART_Receive_IT+0x26>
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e016      	b.n	80080f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_UART_Receive_IT+0x38>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e00f      	b.n	80080f8 <HAL_UART_Receive_IT+0x58>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	461a      	mov	r2, r3
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 faab 	bl	8008648 <UART_Start_Receive_IT>
 80080f2:	4603      	mov	r3, r0
 80080f4:	e000      	b.n	80080f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80080f6:	2302      	movs	r3, #2
  }
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b0ba      	sub	sp, #232	; 0xe8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008126:	2300      	movs	r3, #0
 8008128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800812c:	2300      	movs	r3, #0
 800812e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008136:	f003 030f 	and.w	r3, r3, #15
 800813a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800813e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10f      	bne.n	8008166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <HAL_UART_IRQHandler+0x66>
 8008152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb8f 	bl	8008882 <UART_Receive_IT>
      return;
 8008164:	e256      	b.n	8008614 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 80de 	beq.w	800832c <HAL_UART_IRQHandler+0x22c>
 8008170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800817c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008180:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80d1 	beq.w	800832c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800818a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00b      	beq.n	80081ae <HAL_UART_IRQHandler+0xae>
 8008196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800819a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	f043 0201 	orr.w	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <HAL_UART_IRQHandler+0xd2>
 80081ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d005      	beq.n	80081d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f043 0202 	orr.w	r2, r3, #2
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <HAL_UART_IRQHandler+0xf6>
 80081de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	f043 0204 	orr.w	r2, r3, #4
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d011      	beq.n	8008226 <HAL_UART_IRQHandler+0x126>
 8008202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800820e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0208 	orr.w	r2, r3, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 81ed 	beq.w	800860a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d008      	beq.n	800824e <HAL_UART_IRQHandler+0x14e>
 800823c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fb1a 	bl	8008882 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008258:	2b40      	cmp	r3, #64	; 0x40
 800825a:	bf0c      	ite	eq
 800825c:	2301      	moveq	r3, #1
 800825e:	2300      	movne	r3, #0
 8008260:	b2db      	uxtb	r3, r3
 8008262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b00      	cmp	r3, #0
 8008270:	d103      	bne.n	800827a <HAL_UART_IRQHandler+0x17a>
 8008272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008276:	2b00      	cmp	r3, #0
 8008278:	d04f      	beq.n	800831a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa22 	bl	80086c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d141      	bne.n	8008312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3314      	adds	r3, #20
 8008294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3314      	adds	r3, #20
 80082b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1d9      	bne.n	800828e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d013      	beq.n	800830a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	4a7d      	ldr	r2, [pc, #500]	; (80084dc <HAL_UART_IRQHandler+0x3dc>)
 80082e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fc fa37 	bl	8004762 <HAL_DMA_Abort_IT>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d016      	beq.n	8008328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008308:	e00e      	b.n	8008328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f986 	bl	800861c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008310:	e00a      	b.n	8008328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f982 	bl	800861c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008318:	e006      	b.n	8008328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f97e 	bl	800861c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008326:	e170      	b.n	800860a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008328:	bf00      	nop
    return;
 800832a:	e16e      	b.n	800860a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	2b01      	cmp	r3, #1
 8008332:	f040 814a 	bne.w	80085ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8143 	beq.w	80085ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 813c 	beq.w	80085ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60bb      	str	r3, [r7, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	60bb      	str	r3, [r7, #8]
 8008366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	f040 80b4 	bne.w	80084e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8140 	beq.w	800860e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008396:	429a      	cmp	r2, r3
 8008398:	f080 8139 	bcs.w	800860e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ae:	f000 8088 	beq.w	80084c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	330c      	adds	r3, #12
 80083b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1d9      	bne.n	80083b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3314      	adds	r3, #20
 8008404:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800840e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008410:	f023 0301 	bic.w	r3, r3, #1
 8008414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3314      	adds	r3, #20
 800841e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008422:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008426:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800842a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e1      	bne.n	80083fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3314      	adds	r3, #20
 8008440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800844a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800844c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3314      	adds	r3, #20
 800845a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800845e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008460:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008464:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800846c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e3      	bne.n	800843a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008492:	f023 0310 	bic.w	r3, r3, #16
 8008496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	330c      	adds	r3, #12
 80084a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80084a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ac:	e841 2300 	strex	r3, r2, [r1]
 80084b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e3      	bne.n	8008480 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fc f8e0 	bl	8004682 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f8ac 	bl	8008630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084d8:	e099      	b.n	800860e <HAL_UART_IRQHandler+0x50e>
 80084da:	bf00      	nop
 80084dc:	0800878b 	.word	0x0800878b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 808b 	beq.w	8008612 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80084fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 8086 	beq.w	8008612 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	330c      	adds	r3, #12
 800850c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800851c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800852a:	647a      	str	r2, [r7, #68]	; 0x44
 800852c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e3      	bne.n	8008506 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3314      	adds	r3, #20
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	623b      	str	r3, [r7, #32]
   return(result);
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	f023 0301 	bic.w	r3, r3, #1
 8008554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3314      	adds	r3, #20
 800855e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008562:	633a      	str	r2, [r7, #48]	; 0x30
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e3      	bne.n	800853e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	330c      	adds	r3, #12
 800858a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	60fb      	str	r3, [r7, #12]
   return(result);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0310 	bic.w	r3, r3, #16
 800859a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	330c      	adds	r3, #12
 80085a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085a8:	61fa      	str	r2, [r7, #28]
 80085aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	69b9      	ldr	r1, [r7, #24]
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	617b      	str	r3, [r7, #20]
   return(result);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e3      	bne.n	8008584 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f834 	bl	8008630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085c8:	e023      	b.n	8008612 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <HAL_UART_IRQHandler+0x4ea>
 80085d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f8e5 	bl	80087b2 <UART_Transmit_IT>
    return;
 80085e8:	e014      	b.n	8008614 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <HAL_UART_IRQHandler+0x514>
 80085f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d008      	beq.n	8008614 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f925 	bl	8008852 <UART_EndTransmit_IT>
    return;
 8008608:	e004      	b.n	8008614 <HAL_UART_IRQHandler+0x514>
    return;
 800860a:	bf00      	nop
 800860c:	e002      	b.n	8008614 <HAL_UART_IRQHandler+0x514>
      return;
 800860e:	bf00      	nop
 8008610:	e000      	b.n	8008614 <HAL_UART_IRQHandler+0x514>
      return;
 8008612:	bf00      	nop
  }
}
 8008614:	37e8      	adds	r7, #232	; 0xe8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop

0800861c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	88fa      	ldrh	r2, [r7, #6]
 8008660:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2222      	movs	r2, #34	; 0x22
 8008672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008694:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695a      	ldr	r2, [r3, #20]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0201 	orr.w	r2, r2, #1
 80086a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0220 	orr.w	r2, r2, #32
 80086b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b095      	sub	sp, #84	; 0x54
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	330c      	adds	r3, #12
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	330c      	adds	r3, #12
 80086ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ec:	643a      	str	r2, [r7, #64]	; 0x40
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3314      	adds	r3, #20
 8008706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	f023 0301 	bic.w	r3, r3, #1
 8008716:	64bb      	str	r3, [r7, #72]	; 0x48
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3314      	adds	r3, #20
 800871e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008738:	2b01      	cmp	r3, #1
 800873a:	d119      	bne.n	8008770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	330c      	adds	r3, #12
 8008742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	60bb      	str	r3, [r7, #8]
   return(result);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f023 0310 	bic.w	r3, r3, #16
 8008752:	647b      	str	r3, [r7, #68]	; 0x44
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	330c      	adds	r3, #12
 800875a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800875c:	61ba      	str	r2, [r7, #24]
 800875e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	6979      	ldr	r1, [r7, #20]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	613b      	str	r3, [r7, #16]
   return(result);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e5      	bne.n	800873c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800877e:	bf00      	nop
 8008780:	3754      	adds	r7, #84	; 0x54
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff ff39 	bl	800861c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b21      	cmp	r3, #33	; 0x21
 80087c4:	d13e      	bne.n	8008844 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ce:	d114      	bne.n	80087fa <UART_Transmit_IT+0x48>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d110      	bne.n	80087fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	1c9a      	adds	r2, r3, #2
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	621a      	str	r2, [r3, #32]
 80087f8:	e008      	b.n	800880c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	1c59      	adds	r1, r3, #1
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	6211      	str	r1, [r2, #32]
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29b      	uxth	r3, r3
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4619      	mov	r1, r3
 800881a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10f      	bne.n	8008840 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800882e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800883e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	e000      	b.n	8008846 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008844:	2302      	movs	r3, #2
  }
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008868:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fb fafe 	bl	8003e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b08c      	sub	sp, #48	; 0x30
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b22      	cmp	r3, #34	; 0x22
 8008894:	f040 80ab 	bne.w	80089ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a0:	d117      	bne.n	80088d2 <UART_Receive_IT+0x50>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d113      	bne.n	80088d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ca:	1c9a      	adds	r2, r3, #2
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	629a      	str	r2, [r3, #40]	; 0x28
 80088d0:	e026      	b.n	8008920 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e4:	d007      	beq.n	80088f6 <UART_Receive_IT+0x74>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <UART_Receive_IT+0x82>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	e008      	b.n	8008916 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008910:	b2da      	uxtb	r2, r3
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29b      	uxth	r3, r3
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4619      	mov	r1, r3
 800892e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008930:	2b00      	cmp	r3, #0
 8008932:	d15a      	bne.n	80089ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0220 	bic.w	r2, r2, #32
 8008942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695a      	ldr	r2, [r3, #20]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0201 	bic.w	r2, r2, #1
 8008962:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008970:	2b01      	cmp	r3, #1
 8008972:	d135      	bne.n	80089e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	330c      	adds	r3, #12
 8008980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	613b      	str	r3, [r7, #16]
   return(result);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f023 0310 	bic.w	r3, r3, #16
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	330c      	adds	r3, #12
 8008998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899a:	623a      	str	r2, [r7, #32]
 800899c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	69f9      	ldr	r1, [r7, #28]
 80089a0:	6a3a      	ldr	r2, [r7, #32]
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e5      	bne.n	800897a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b10      	cmp	r3, #16
 80089ba:	d10a      	bne.n	80089d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff fe29 	bl	8008630 <HAL_UARTEx_RxEventCallback>
 80089de:	e002      	b.n	80089e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7fb fa55 	bl	8003e90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e002      	b.n	80089f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	e000      	b.n	80089f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089ee:	2302      	movs	r3, #2
  }
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3730      	adds	r7, #48	; 0x30
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089fc:	b0c0      	sub	sp, #256	; 0x100
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a14:	68d9      	ldr	r1, [r3, #12]
 8008a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	ea40 0301 	orr.w	r3, r0, r1
 8008a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a50:	f021 010c 	bic.w	r1, r1, #12
 8008a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a5e:	430b      	orrs	r3, r1
 8008a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a72:	6999      	ldr	r1, [r3, #24]
 8008a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	ea40 0301 	orr.w	r3, r0, r1
 8008a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b8f      	ldr	r3, [pc, #572]	; (8008cc4 <UART_SetConfig+0x2cc>)
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d005      	beq.n	8008a98 <UART_SetConfig+0xa0>
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b8d      	ldr	r3, [pc, #564]	; (8008cc8 <UART_SetConfig+0x2d0>)
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d104      	bne.n	8008aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a98:	f7fd fdc4 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 8008a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008aa0:	e003      	b.n	8008aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008aa2:	f7fd fdab 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 8008aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab4:	f040 810c 	bne.w	8008cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008aca:	4622      	mov	r2, r4
 8008acc:	462b      	mov	r3, r5
 8008ace:	1891      	adds	r1, r2, r2
 8008ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ad2:	415b      	adcs	r3, r3
 8008ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ada:	4621      	mov	r1, r4
 8008adc:	eb12 0801 	adds.w	r8, r2, r1
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	eb43 0901 	adc.w	r9, r3, r1
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008afa:	4690      	mov	r8, r2
 8008afc:	4699      	mov	r9, r3
 8008afe:	4623      	mov	r3, r4
 8008b00:	eb18 0303 	adds.w	r3, r8, r3
 8008b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b08:	462b      	mov	r3, r5
 8008b0a:	eb49 0303 	adc.w	r3, r9, r3
 8008b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b26:	460b      	mov	r3, r1
 8008b28:	18db      	adds	r3, r3, r3
 8008b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	eb42 0303 	adc.w	r3, r2, r3
 8008b32:	657b      	str	r3, [r7, #84]	; 0x54
 8008b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b3c:	f7f8 f884 	bl	8000c48 <__aeabi_uldivmod>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4b61      	ldr	r3, [pc, #388]	; (8008ccc <UART_SetConfig+0x2d4>)
 8008b46:	fba3 2302 	umull	r2, r3, r3, r2
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	011c      	lsls	r4, r3, #4
 8008b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	1891      	adds	r1, r2, r2
 8008b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b68:	415b      	adcs	r3, r3
 8008b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b70:	4641      	mov	r1, r8
 8008b72:	eb12 0a01 	adds.w	sl, r2, r1
 8008b76:	4649      	mov	r1, r9
 8008b78:	eb43 0b01 	adc.w	fp, r3, r1
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b90:	4692      	mov	sl, r2
 8008b92:	469b      	mov	fp, r3
 8008b94:	4643      	mov	r3, r8
 8008b96:	eb1a 0303 	adds.w	r3, sl, r3
 8008b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8008ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	18db      	adds	r3, r3, r3
 8008bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	eb42 0303 	adc.w	r3, r2, r3
 8008bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008bd2:	f7f8 f839 	bl	8000c48 <__aeabi_uldivmod>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4b3b      	ldr	r3, [pc, #236]	; (8008ccc <UART_SetConfig+0x2d4>)
 8008bde:	fba3 2301 	umull	r2, r3, r3, r1
 8008be2:	095b      	lsrs	r3, r3, #5
 8008be4:	2264      	movs	r2, #100	; 0x64
 8008be6:	fb02 f303 	mul.w	r3, r2, r3
 8008bea:	1acb      	subs	r3, r1, r3
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008bf2:	4b36      	ldr	r3, [pc, #216]	; (8008ccc <UART_SetConfig+0x2d4>)
 8008bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c00:	441c      	add	r4, r3
 8008c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c14:	4642      	mov	r2, r8
 8008c16:	464b      	mov	r3, r9
 8008c18:	1891      	adds	r1, r2, r2
 8008c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c1c:	415b      	adcs	r3, r3
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c24:	4641      	mov	r1, r8
 8008c26:	1851      	adds	r1, r2, r1
 8008c28:	6339      	str	r1, [r7, #48]	; 0x30
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	414b      	adcs	r3, r1
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	00cb      	lsls	r3, r1, #3
 8008c40:	4651      	mov	r1, sl
 8008c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c46:	4651      	mov	r1, sl
 8008c48:	00ca      	lsls	r2, r1, #3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4642      	mov	r2, r8
 8008c52:	189b      	adds	r3, r3, r2
 8008c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c58:	464b      	mov	r3, r9
 8008c5a:	460a      	mov	r2, r1
 8008c5c:	eb42 0303 	adc.w	r3, r2, r3
 8008c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c78:	460b      	mov	r3, r1
 8008c7a:	18db      	adds	r3, r3, r3
 8008c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c7e:	4613      	mov	r3, r2
 8008c80:	eb42 0303 	adc.w	r3, r2, r3
 8008c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c8e:	f7f7 ffdb 	bl	8000c48 <__aeabi_uldivmod>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <UART_SetConfig+0x2d4>)
 8008c98:	fba3 1302 	umull	r1, r3, r3, r2
 8008c9c:	095b      	lsrs	r3, r3, #5
 8008c9e:	2164      	movs	r1, #100	; 0x64
 8008ca0:	fb01 f303 	mul.w	r3, r1, r3
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	3332      	adds	r3, #50	; 0x32
 8008caa:	4a08      	ldr	r2, [pc, #32]	; (8008ccc <UART_SetConfig+0x2d4>)
 8008cac:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb0:	095b      	lsrs	r3, r3, #5
 8008cb2:	f003 0207 	and.w	r2, r3, #7
 8008cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4422      	add	r2, r4
 8008cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cc0:	e105      	b.n	8008ece <UART_SetConfig+0x4d6>
 8008cc2:	bf00      	nop
 8008cc4:	40011000 	.word	0x40011000
 8008cc8:	40011400 	.word	0x40011400
 8008ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	1891      	adds	r1, r2, r2
 8008ce8:	6239      	str	r1, [r7, #32]
 8008cea:	415b      	adcs	r3, r3
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
 8008cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cf2:	4641      	mov	r1, r8
 8008cf4:	1854      	adds	r4, r2, r1
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	eb43 0501 	adc.w	r5, r3, r1
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	00eb      	lsls	r3, r5, #3
 8008d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d0a:	00e2      	lsls	r2, r4, #3
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	461d      	mov	r5, r3
 8008d10:	4643      	mov	r3, r8
 8008d12:	18e3      	adds	r3, r4, r3
 8008d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d18:	464b      	mov	r3, r9
 8008d1a:	eb45 0303 	adc.w	r3, r5, r3
 8008d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d32:	f04f 0200 	mov.w	r2, #0
 8008d36:	f04f 0300 	mov.w	r3, #0
 8008d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d3e:	4629      	mov	r1, r5
 8008d40:	008b      	lsls	r3, r1, #2
 8008d42:	4621      	mov	r1, r4
 8008d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d48:	4621      	mov	r1, r4
 8008d4a:	008a      	lsls	r2, r1, #2
 8008d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d50:	f7f7 ff7a 	bl	8000c48 <__aeabi_uldivmod>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4b60      	ldr	r3, [pc, #384]	; (8008edc <UART_SetConfig+0x4e4>)
 8008d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d5e:	095b      	lsrs	r3, r3, #5
 8008d60:	011c      	lsls	r4, r3, #4
 8008d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d74:	4642      	mov	r2, r8
 8008d76:	464b      	mov	r3, r9
 8008d78:	1891      	adds	r1, r2, r2
 8008d7a:	61b9      	str	r1, [r7, #24]
 8008d7c:	415b      	adcs	r3, r3
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d84:	4641      	mov	r1, r8
 8008d86:	1851      	adds	r1, r2, r1
 8008d88:	6139      	str	r1, [r7, #16]
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	414b      	adcs	r3, r1
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	00cb      	lsls	r3, r1, #3
 8008da0:	4651      	mov	r1, sl
 8008da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008da6:	4651      	mov	r1, sl
 8008da8:	00ca      	lsls	r2, r1, #3
 8008daa:	4610      	mov	r0, r2
 8008dac:	4619      	mov	r1, r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	4642      	mov	r2, r8
 8008db2:	189b      	adds	r3, r3, r2
 8008db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008db8:	464b      	mov	r3, r9
 8008dba:	460a      	mov	r2, r1
 8008dbc:	eb42 0303 	adc.w	r3, r2, r3
 8008dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ddc:	4649      	mov	r1, r9
 8008dde:	008b      	lsls	r3, r1, #2
 8008de0:	4641      	mov	r1, r8
 8008de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008de6:	4641      	mov	r1, r8
 8008de8:	008a      	lsls	r2, r1, #2
 8008dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008dee:	f7f7 ff2b 	bl	8000c48 <__aeabi_uldivmod>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4b39      	ldr	r3, [pc, #228]	; (8008edc <UART_SetConfig+0x4e4>)
 8008df8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dfc:	095b      	lsrs	r3, r3, #5
 8008dfe:	2164      	movs	r1, #100	; 0x64
 8008e00:	fb01 f303 	mul.w	r3, r1, r3
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	3332      	adds	r3, #50	; 0x32
 8008e0a:	4a34      	ldr	r2, [pc, #208]	; (8008edc <UART_SetConfig+0x4e4>)
 8008e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e16:	441c      	add	r4, r3
 8008e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e20:	677a      	str	r2, [r7, #116]	; 0x74
 8008e22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e26:	4642      	mov	r2, r8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	1891      	adds	r1, r2, r2
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	415b      	adcs	r3, r3
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e36:	4641      	mov	r1, r8
 8008e38:	1851      	adds	r1, r2, r1
 8008e3a:	6039      	str	r1, [r7, #0]
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	414b      	adcs	r3, r1
 8008e40:	607b      	str	r3, [r7, #4]
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e4e:	4659      	mov	r1, fp
 8008e50:	00cb      	lsls	r3, r1, #3
 8008e52:	4651      	mov	r1, sl
 8008e54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e58:	4651      	mov	r1, sl
 8008e5a:	00ca      	lsls	r2, r1, #3
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4603      	mov	r3, r0
 8008e62:	4642      	mov	r2, r8
 8008e64:	189b      	adds	r3, r3, r2
 8008e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e68:	464b      	mov	r3, r9
 8008e6a:	460a      	mov	r2, r1
 8008e6c:	eb42 0303 	adc.w	r3, r2, r3
 8008e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e7c:	667a      	str	r2, [r7, #100]	; 0x64
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	008b      	lsls	r3, r1, #2
 8008e8e:	4641      	mov	r1, r8
 8008e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e94:	4641      	mov	r1, r8
 8008e96:	008a      	lsls	r2, r1, #2
 8008e98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e9c:	f7f7 fed4 	bl	8000c48 <__aeabi_uldivmod>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <UART_SetConfig+0x4e4>)
 8008ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8008eaa:	095b      	lsrs	r3, r3, #5
 8008eac:	2164      	movs	r1, #100	; 0x64
 8008eae:	fb01 f303 	mul.w	r3, r1, r3
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	3332      	adds	r3, #50	; 0x32
 8008eb8:	4a08      	ldr	r2, [pc, #32]	; (8008edc <UART_SetConfig+0x4e4>)
 8008eba:	fba2 2303 	umull	r2, r3, r2, r3
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	f003 020f 	and.w	r2, r3, #15
 8008ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4422      	add	r2, r4
 8008ecc:	609a      	str	r2, [r3, #8]
}
 8008ece:	bf00      	nop
 8008ed0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eda:	bf00      	nop
 8008edc:	51eb851f 	.word	0x51eb851f

08008ee0 <__errno>:
 8008ee0:	4b01      	ldr	r3, [pc, #4]	; (8008ee8 <__errno+0x8>)
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000028 	.word	0x20000028

08008eec <__libc_init_array>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	4d0d      	ldr	r5, [pc, #52]	; (8008f24 <__libc_init_array+0x38>)
 8008ef0:	4c0d      	ldr	r4, [pc, #52]	; (8008f28 <__libc_init_array+0x3c>)
 8008ef2:	1b64      	subs	r4, r4, r5
 8008ef4:	10a4      	asrs	r4, r4, #2
 8008ef6:	2600      	movs	r6, #0
 8008ef8:	42a6      	cmp	r6, r4
 8008efa:	d109      	bne.n	8008f10 <__libc_init_array+0x24>
 8008efc:	4d0b      	ldr	r5, [pc, #44]	; (8008f2c <__libc_init_array+0x40>)
 8008efe:	4c0c      	ldr	r4, [pc, #48]	; (8008f30 <__libc_init_array+0x44>)
 8008f00:	f003 f854 	bl	800bfac <_init>
 8008f04:	1b64      	subs	r4, r4, r5
 8008f06:	10a4      	asrs	r4, r4, #2
 8008f08:	2600      	movs	r6, #0
 8008f0a:	42a6      	cmp	r6, r4
 8008f0c:	d105      	bne.n	8008f1a <__libc_init_array+0x2e>
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f14:	4798      	blx	r3
 8008f16:	3601      	adds	r6, #1
 8008f18:	e7ee      	b.n	8008ef8 <__libc_init_array+0xc>
 8008f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1e:	4798      	blx	r3
 8008f20:	3601      	adds	r6, #1
 8008f22:	e7f2      	b.n	8008f0a <__libc_init_array+0x1e>
 8008f24:	0800c2b8 	.word	0x0800c2b8
 8008f28:	0800c2b8 	.word	0x0800c2b8
 8008f2c:	0800c2b8 	.word	0x0800c2b8
 8008f30:	0800c2bc 	.word	0x0800c2bc

08008f34 <memset>:
 8008f34:	4402      	add	r2, r0
 8008f36:	4603      	mov	r3, r0
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d100      	bne.n	8008f3e <memset+0xa>
 8008f3c:	4770      	bx	lr
 8008f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f42:	e7f9      	b.n	8008f38 <memset+0x4>

08008f44 <siprintf>:
 8008f44:	b40e      	push	{r1, r2, r3}
 8008f46:	b500      	push	{lr}
 8008f48:	b09c      	sub	sp, #112	; 0x70
 8008f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	9006      	str	r0, [sp, #24]
 8008f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f54:	4809      	ldr	r0, [pc, #36]	; (8008f7c <siprintf+0x38>)
 8008f56:	9107      	str	r1, [sp, #28]
 8008f58:	9104      	str	r1, [sp, #16]
 8008f5a:	4909      	ldr	r1, [pc, #36]	; (8008f80 <siprintf+0x3c>)
 8008f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f60:	9105      	str	r1, [sp, #20]
 8008f62:	6800      	ldr	r0, [r0, #0]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	a902      	add	r1, sp, #8
 8008f68:	f000 f868 	bl	800903c <_svfiprintf_r>
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	b01c      	add	sp, #112	; 0x70
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b003      	add	sp, #12
 8008f7a:	4770      	bx	lr
 8008f7c:	20000028 	.word	0x20000028
 8008f80:	ffff0208 	.word	0xffff0208

08008f84 <__ssputs_r>:
 8008f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	688e      	ldr	r6, [r1, #8]
 8008f8a:	429e      	cmp	r6, r3
 8008f8c:	4682      	mov	sl, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4690      	mov	r8, r2
 8008f92:	461f      	mov	r7, r3
 8008f94:	d838      	bhi.n	8009008 <__ssputs_r+0x84>
 8008f96:	898a      	ldrh	r2, [r1, #12]
 8008f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f9c:	d032      	beq.n	8009004 <__ssputs_r+0x80>
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	6909      	ldr	r1, [r1, #16]
 8008fa2:	eba5 0901 	sub.w	r9, r5, r1
 8008fa6:	6965      	ldr	r5, [r4, #20]
 8008fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	444b      	add	r3, r9
 8008fb4:	106d      	asrs	r5, r5, #1
 8008fb6:	429d      	cmp	r5, r3
 8008fb8:	bf38      	it	cc
 8008fba:	461d      	movcc	r5, r3
 8008fbc:	0553      	lsls	r3, r2, #21
 8008fbe:	d531      	bpl.n	8009024 <__ssputs_r+0xa0>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f000 fb63 	bl	800968c <_malloc_r>
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	b950      	cbnz	r0, 8008fe0 <__ssputs_r+0x5c>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	f8ca 3000 	str.w	r3, [sl]
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	6921      	ldr	r1, [r4, #16]
 8008fe2:	464a      	mov	r2, r9
 8008fe4:	f000 fabe 	bl	8009564 <memcpy>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	6126      	str	r6, [r4, #16]
 8008ff6:	6165      	str	r5, [r4, #20]
 8008ff8:	444e      	add	r6, r9
 8008ffa:	eba5 0509 	sub.w	r5, r5, r9
 8008ffe:	6026      	str	r6, [r4, #0]
 8009000:	60a5      	str	r5, [r4, #8]
 8009002:	463e      	mov	r6, r7
 8009004:	42be      	cmp	r6, r7
 8009006:	d900      	bls.n	800900a <__ssputs_r+0x86>
 8009008:	463e      	mov	r6, r7
 800900a:	6820      	ldr	r0, [r4, #0]
 800900c:	4632      	mov	r2, r6
 800900e:	4641      	mov	r1, r8
 8009010:	f000 fab6 	bl	8009580 <memmove>
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	1b9b      	subs	r3, r3, r6
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	4433      	add	r3, r6
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	2000      	movs	r0, #0
 8009022:	e7db      	b.n	8008fdc <__ssputs_r+0x58>
 8009024:	462a      	mov	r2, r5
 8009026:	f000 fba5 	bl	8009774 <_realloc_r>
 800902a:	4606      	mov	r6, r0
 800902c:	2800      	cmp	r0, #0
 800902e:	d1e1      	bne.n	8008ff4 <__ssputs_r+0x70>
 8009030:	6921      	ldr	r1, [r4, #16]
 8009032:	4650      	mov	r0, sl
 8009034:	f000 fabe 	bl	80095b4 <_free_r>
 8009038:	e7c7      	b.n	8008fca <__ssputs_r+0x46>
	...

0800903c <_svfiprintf_r>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	4698      	mov	r8, r3
 8009042:	898b      	ldrh	r3, [r1, #12]
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	b09d      	sub	sp, #116	; 0x74
 8009048:	4607      	mov	r7, r0
 800904a:	460d      	mov	r5, r1
 800904c:	4614      	mov	r4, r2
 800904e:	d50e      	bpl.n	800906e <_svfiprintf_r+0x32>
 8009050:	690b      	ldr	r3, [r1, #16]
 8009052:	b963      	cbnz	r3, 800906e <_svfiprintf_r+0x32>
 8009054:	2140      	movs	r1, #64	; 0x40
 8009056:	f000 fb19 	bl	800968c <_malloc_r>
 800905a:	6028      	str	r0, [r5, #0]
 800905c:	6128      	str	r0, [r5, #16]
 800905e:	b920      	cbnz	r0, 800906a <_svfiprintf_r+0x2e>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009068:	e0d1      	b.n	800920e <_svfiprintf_r+0x1d2>
 800906a:	2340      	movs	r3, #64	; 0x40
 800906c:	616b      	str	r3, [r5, #20]
 800906e:	2300      	movs	r3, #0
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	2320      	movs	r3, #32
 8009074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009078:	f8cd 800c 	str.w	r8, [sp, #12]
 800907c:	2330      	movs	r3, #48	; 0x30
 800907e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009228 <_svfiprintf_r+0x1ec>
 8009082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009086:	f04f 0901 	mov.w	r9, #1
 800908a:	4623      	mov	r3, r4
 800908c:	469a      	mov	sl, r3
 800908e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009092:	b10a      	cbz	r2, 8009098 <_svfiprintf_r+0x5c>
 8009094:	2a25      	cmp	r2, #37	; 0x25
 8009096:	d1f9      	bne.n	800908c <_svfiprintf_r+0x50>
 8009098:	ebba 0b04 	subs.w	fp, sl, r4
 800909c:	d00b      	beq.n	80090b6 <_svfiprintf_r+0x7a>
 800909e:	465b      	mov	r3, fp
 80090a0:	4622      	mov	r2, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	4638      	mov	r0, r7
 80090a6:	f7ff ff6d 	bl	8008f84 <__ssputs_r>
 80090aa:	3001      	adds	r0, #1
 80090ac:	f000 80aa 	beq.w	8009204 <_svfiprintf_r+0x1c8>
 80090b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b2:	445a      	add	r2, fp
 80090b4:	9209      	str	r2, [sp, #36]	; 0x24
 80090b6:	f89a 3000 	ldrb.w	r3, [sl]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 80a2 	beq.w	8009204 <_svfiprintf_r+0x1c8>
 80090c0:	2300      	movs	r3, #0
 80090c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ca:	f10a 0a01 	add.w	sl, sl, #1
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	9307      	str	r3, [sp, #28]
 80090d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d6:	931a      	str	r3, [sp, #104]	; 0x68
 80090d8:	4654      	mov	r4, sl
 80090da:	2205      	movs	r2, #5
 80090dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e0:	4851      	ldr	r0, [pc, #324]	; (8009228 <_svfiprintf_r+0x1ec>)
 80090e2:	f7f7 f87d 	bl	80001e0 <memchr>
 80090e6:	9a04      	ldr	r2, [sp, #16]
 80090e8:	b9d8      	cbnz	r0, 8009122 <_svfiprintf_r+0xe6>
 80090ea:	06d0      	lsls	r0, r2, #27
 80090ec:	bf44      	itt	mi
 80090ee:	2320      	movmi	r3, #32
 80090f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f4:	0711      	lsls	r1, r2, #28
 80090f6:	bf44      	itt	mi
 80090f8:	232b      	movmi	r3, #43	; 0x2b
 80090fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009102:	2b2a      	cmp	r3, #42	; 0x2a
 8009104:	d015      	beq.n	8009132 <_svfiprintf_r+0xf6>
 8009106:	9a07      	ldr	r2, [sp, #28]
 8009108:	4654      	mov	r4, sl
 800910a:	2000      	movs	r0, #0
 800910c:	f04f 0c0a 	mov.w	ip, #10
 8009110:	4621      	mov	r1, r4
 8009112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009116:	3b30      	subs	r3, #48	; 0x30
 8009118:	2b09      	cmp	r3, #9
 800911a:	d94e      	bls.n	80091ba <_svfiprintf_r+0x17e>
 800911c:	b1b0      	cbz	r0, 800914c <_svfiprintf_r+0x110>
 800911e:	9207      	str	r2, [sp, #28]
 8009120:	e014      	b.n	800914c <_svfiprintf_r+0x110>
 8009122:	eba0 0308 	sub.w	r3, r0, r8
 8009126:	fa09 f303 	lsl.w	r3, r9, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	46a2      	mov	sl, r4
 8009130:	e7d2      	b.n	80090d8 <_svfiprintf_r+0x9c>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	1d19      	adds	r1, r3, #4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	9103      	str	r1, [sp, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfbb      	ittet	lt
 800913e:	425b      	neglt	r3, r3
 8009140:	f042 0202 	orrlt.w	r2, r2, #2
 8009144:	9307      	strge	r3, [sp, #28]
 8009146:	9307      	strlt	r3, [sp, #28]
 8009148:	bfb8      	it	lt
 800914a:	9204      	strlt	r2, [sp, #16]
 800914c:	7823      	ldrb	r3, [r4, #0]
 800914e:	2b2e      	cmp	r3, #46	; 0x2e
 8009150:	d10c      	bne.n	800916c <_svfiprintf_r+0x130>
 8009152:	7863      	ldrb	r3, [r4, #1]
 8009154:	2b2a      	cmp	r3, #42	; 0x2a
 8009156:	d135      	bne.n	80091c4 <_svfiprintf_r+0x188>
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	9203      	str	r2, [sp, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfb8      	it	lt
 8009164:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009168:	3402      	adds	r4, #2
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009238 <_svfiprintf_r+0x1fc>
 8009170:	7821      	ldrb	r1, [r4, #0]
 8009172:	2203      	movs	r2, #3
 8009174:	4650      	mov	r0, sl
 8009176:	f7f7 f833 	bl	80001e0 <memchr>
 800917a:	b140      	cbz	r0, 800918e <_svfiprintf_r+0x152>
 800917c:	2340      	movs	r3, #64	; 0x40
 800917e:	eba0 000a 	sub.w	r0, r0, sl
 8009182:	fa03 f000 	lsl.w	r0, r3, r0
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	4303      	orrs	r3, r0
 800918a:	3401      	adds	r4, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	4826      	ldr	r0, [pc, #152]	; (800922c <_svfiprintf_r+0x1f0>)
 8009194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009198:	2206      	movs	r2, #6
 800919a:	f7f7 f821 	bl	80001e0 <memchr>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d038      	beq.n	8009214 <_svfiprintf_r+0x1d8>
 80091a2:	4b23      	ldr	r3, [pc, #140]	; (8009230 <_svfiprintf_r+0x1f4>)
 80091a4:	bb1b      	cbnz	r3, 80091ee <_svfiprintf_r+0x1b2>
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	3307      	adds	r3, #7
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	3308      	adds	r3, #8
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b4:	4433      	add	r3, r6
 80091b6:	9309      	str	r3, [sp, #36]	; 0x24
 80091b8:	e767      	b.n	800908a <_svfiprintf_r+0x4e>
 80091ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80091be:	460c      	mov	r4, r1
 80091c0:	2001      	movs	r0, #1
 80091c2:	e7a5      	b.n	8009110 <_svfiprintf_r+0xd4>
 80091c4:	2300      	movs	r3, #0
 80091c6:	3401      	adds	r4, #1
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	4619      	mov	r1, r3
 80091cc:	f04f 0c0a 	mov.w	ip, #10
 80091d0:	4620      	mov	r0, r4
 80091d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d6:	3a30      	subs	r2, #48	; 0x30
 80091d8:	2a09      	cmp	r2, #9
 80091da:	d903      	bls.n	80091e4 <_svfiprintf_r+0x1a8>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0c5      	beq.n	800916c <_svfiprintf_r+0x130>
 80091e0:	9105      	str	r1, [sp, #20]
 80091e2:	e7c3      	b.n	800916c <_svfiprintf_r+0x130>
 80091e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e8:	4604      	mov	r4, r0
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7f0      	b.n	80091d0 <_svfiprintf_r+0x194>
 80091ee:	ab03      	add	r3, sp, #12
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	462a      	mov	r2, r5
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <_svfiprintf_r+0x1f8>)
 80091f6:	a904      	add	r1, sp, #16
 80091f8:	4638      	mov	r0, r7
 80091fa:	f3af 8000 	nop.w
 80091fe:	1c42      	adds	r2, r0, #1
 8009200:	4606      	mov	r6, r0
 8009202:	d1d6      	bne.n	80091b2 <_svfiprintf_r+0x176>
 8009204:	89ab      	ldrh	r3, [r5, #12]
 8009206:	065b      	lsls	r3, r3, #25
 8009208:	f53f af2c 	bmi.w	8009064 <_svfiprintf_r+0x28>
 800920c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800920e:	b01d      	add	sp, #116	; 0x74
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	462a      	mov	r2, r5
 800921a:	4b06      	ldr	r3, [pc, #24]	; (8009234 <_svfiprintf_r+0x1f8>)
 800921c:	a904      	add	r1, sp, #16
 800921e:	4638      	mov	r0, r7
 8009220:	f000 f87a 	bl	8009318 <_printf_i>
 8009224:	e7eb      	b.n	80091fe <_svfiprintf_r+0x1c2>
 8009226:	bf00      	nop
 8009228:	0800c000 	.word	0x0800c000
 800922c:	0800c00a 	.word	0x0800c00a
 8009230:	00000000 	.word	0x00000000
 8009234:	08008f85 	.word	0x08008f85
 8009238:	0800c006 	.word	0x0800c006

0800923c <_printf_common>:
 800923c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	4616      	mov	r6, r2
 8009242:	4699      	mov	r9, r3
 8009244:	688a      	ldr	r2, [r1, #8]
 8009246:	690b      	ldr	r3, [r1, #16]
 8009248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800924c:	4293      	cmp	r3, r2
 800924e:	bfb8      	it	lt
 8009250:	4613      	movlt	r3, r2
 8009252:	6033      	str	r3, [r6, #0]
 8009254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009258:	4607      	mov	r7, r0
 800925a:	460c      	mov	r4, r1
 800925c:	b10a      	cbz	r2, 8009262 <_printf_common+0x26>
 800925e:	3301      	adds	r3, #1
 8009260:	6033      	str	r3, [r6, #0]
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	0699      	lsls	r1, r3, #26
 8009266:	bf42      	ittt	mi
 8009268:	6833      	ldrmi	r3, [r6, #0]
 800926a:	3302      	addmi	r3, #2
 800926c:	6033      	strmi	r3, [r6, #0]
 800926e:	6825      	ldr	r5, [r4, #0]
 8009270:	f015 0506 	ands.w	r5, r5, #6
 8009274:	d106      	bne.n	8009284 <_printf_common+0x48>
 8009276:	f104 0a19 	add.w	sl, r4, #25
 800927a:	68e3      	ldr	r3, [r4, #12]
 800927c:	6832      	ldr	r2, [r6, #0]
 800927e:	1a9b      	subs	r3, r3, r2
 8009280:	42ab      	cmp	r3, r5
 8009282:	dc26      	bgt.n	80092d2 <_printf_common+0x96>
 8009284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009288:	1e13      	subs	r3, r2, #0
 800928a:	6822      	ldr	r2, [r4, #0]
 800928c:	bf18      	it	ne
 800928e:	2301      	movne	r3, #1
 8009290:	0692      	lsls	r2, r2, #26
 8009292:	d42b      	bmi.n	80092ec <_printf_common+0xb0>
 8009294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009298:	4649      	mov	r1, r9
 800929a:	4638      	mov	r0, r7
 800929c:	47c0      	blx	r8
 800929e:	3001      	adds	r0, #1
 80092a0:	d01e      	beq.n	80092e0 <_printf_common+0xa4>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	68e5      	ldr	r5, [r4, #12]
 80092a6:	6832      	ldr	r2, [r6, #0]
 80092a8:	f003 0306 	and.w	r3, r3, #6
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	bf08      	it	eq
 80092b0:	1aad      	subeq	r5, r5, r2
 80092b2:	68a3      	ldr	r3, [r4, #8]
 80092b4:	6922      	ldr	r2, [r4, #16]
 80092b6:	bf0c      	ite	eq
 80092b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092bc:	2500      	movne	r5, #0
 80092be:	4293      	cmp	r3, r2
 80092c0:	bfc4      	itt	gt
 80092c2:	1a9b      	subgt	r3, r3, r2
 80092c4:	18ed      	addgt	r5, r5, r3
 80092c6:	2600      	movs	r6, #0
 80092c8:	341a      	adds	r4, #26
 80092ca:	42b5      	cmp	r5, r6
 80092cc:	d11a      	bne.n	8009304 <_printf_common+0xc8>
 80092ce:	2000      	movs	r0, #0
 80092d0:	e008      	b.n	80092e4 <_printf_common+0xa8>
 80092d2:	2301      	movs	r3, #1
 80092d4:	4652      	mov	r2, sl
 80092d6:	4649      	mov	r1, r9
 80092d8:	4638      	mov	r0, r7
 80092da:	47c0      	blx	r8
 80092dc:	3001      	adds	r0, #1
 80092de:	d103      	bne.n	80092e8 <_printf_common+0xac>
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e8:	3501      	adds	r5, #1
 80092ea:	e7c6      	b.n	800927a <_printf_common+0x3e>
 80092ec:	18e1      	adds	r1, r4, r3
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	2030      	movs	r0, #48	; 0x30
 80092f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092f6:	4422      	add	r2, r4
 80092f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009300:	3302      	adds	r3, #2
 8009302:	e7c7      	b.n	8009294 <_printf_common+0x58>
 8009304:	2301      	movs	r3, #1
 8009306:	4622      	mov	r2, r4
 8009308:	4649      	mov	r1, r9
 800930a:	4638      	mov	r0, r7
 800930c:	47c0      	blx	r8
 800930e:	3001      	adds	r0, #1
 8009310:	d0e6      	beq.n	80092e0 <_printf_common+0xa4>
 8009312:	3601      	adds	r6, #1
 8009314:	e7d9      	b.n	80092ca <_printf_common+0x8e>
	...

08009318 <_printf_i>:
 8009318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	7e0f      	ldrb	r7, [r1, #24]
 800931e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009320:	2f78      	cmp	r7, #120	; 0x78
 8009322:	4691      	mov	r9, r2
 8009324:	4680      	mov	r8, r0
 8009326:	460c      	mov	r4, r1
 8009328:	469a      	mov	sl, r3
 800932a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800932e:	d807      	bhi.n	8009340 <_printf_i+0x28>
 8009330:	2f62      	cmp	r7, #98	; 0x62
 8009332:	d80a      	bhi.n	800934a <_printf_i+0x32>
 8009334:	2f00      	cmp	r7, #0
 8009336:	f000 80d8 	beq.w	80094ea <_printf_i+0x1d2>
 800933a:	2f58      	cmp	r7, #88	; 0x58
 800933c:	f000 80a3 	beq.w	8009486 <_printf_i+0x16e>
 8009340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009348:	e03a      	b.n	80093c0 <_printf_i+0xa8>
 800934a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800934e:	2b15      	cmp	r3, #21
 8009350:	d8f6      	bhi.n	8009340 <_printf_i+0x28>
 8009352:	a101      	add	r1, pc, #4	; (adr r1, 8009358 <_printf_i+0x40>)
 8009354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009358:	080093b1 	.word	0x080093b1
 800935c:	080093c5 	.word	0x080093c5
 8009360:	08009341 	.word	0x08009341
 8009364:	08009341 	.word	0x08009341
 8009368:	08009341 	.word	0x08009341
 800936c:	08009341 	.word	0x08009341
 8009370:	080093c5 	.word	0x080093c5
 8009374:	08009341 	.word	0x08009341
 8009378:	08009341 	.word	0x08009341
 800937c:	08009341 	.word	0x08009341
 8009380:	08009341 	.word	0x08009341
 8009384:	080094d1 	.word	0x080094d1
 8009388:	080093f5 	.word	0x080093f5
 800938c:	080094b3 	.word	0x080094b3
 8009390:	08009341 	.word	0x08009341
 8009394:	08009341 	.word	0x08009341
 8009398:	080094f3 	.word	0x080094f3
 800939c:	08009341 	.word	0x08009341
 80093a0:	080093f5 	.word	0x080093f5
 80093a4:	08009341 	.word	0x08009341
 80093a8:	08009341 	.word	0x08009341
 80093ac:	080094bb 	.word	0x080094bb
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	1d1a      	adds	r2, r3, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	602a      	str	r2, [r5, #0]
 80093b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093c0:	2301      	movs	r3, #1
 80093c2:	e0a3      	b.n	800950c <_printf_i+0x1f4>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	6829      	ldr	r1, [r5, #0]
 80093c8:	0606      	lsls	r6, r0, #24
 80093ca:	f101 0304 	add.w	r3, r1, #4
 80093ce:	d50a      	bpl.n	80093e6 <_printf_i+0xce>
 80093d0:	680e      	ldr	r6, [r1, #0]
 80093d2:	602b      	str	r3, [r5, #0]
 80093d4:	2e00      	cmp	r6, #0
 80093d6:	da03      	bge.n	80093e0 <_printf_i+0xc8>
 80093d8:	232d      	movs	r3, #45	; 0x2d
 80093da:	4276      	negs	r6, r6
 80093dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e0:	485e      	ldr	r0, [pc, #376]	; (800955c <_printf_i+0x244>)
 80093e2:	230a      	movs	r3, #10
 80093e4:	e019      	b.n	800941a <_printf_i+0x102>
 80093e6:	680e      	ldr	r6, [r1, #0]
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093ee:	bf18      	it	ne
 80093f0:	b236      	sxthne	r6, r6
 80093f2:	e7ef      	b.n	80093d4 <_printf_i+0xbc>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	1d19      	adds	r1, r3, #4
 80093fa:	6029      	str	r1, [r5, #0]
 80093fc:	0601      	lsls	r1, r0, #24
 80093fe:	d501      	bpl.n	8009404 <_printf_i+0xec>
 8009400:	681e      	ldr	r6, [r3, #0]
 8009402:	e002      	b.n	800940a <_printf_i+0xf2>
 8009404:	0646      	lsls	r6, r0, #25
 8009406:	d5fb      	bpl.n	8009400 <_printf_i+0xe8>
 8009408:	881e      	ldrh	r6, [r3, #0]
 800940a:	4854      	ldr	r0, [pc, #336]	; (800955c <_printf_i+0x244>)
 800940c:	2f6f      	cmp	r7, #111	; 0x6f
 800940e:	bf0c      	ite	eq
 8009410:	2308      	moveq	r3, #8
 8009412:	230a      	movne	r3, #10
 8009414:	2100      	movs	r1, #0
 8009416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800941a:	6865      	ldr	r5, [r4, #4]
 800941c:	60a5      	str	r5, [r4, #8]
 800941e:	2d00      	cmp	r5, #0
 8009420:	bfa2      	ittt	ge
 8009422:	6821      	ldrge	r1, [r4, #0]
 8009424:	f021 0104 	bicge.w	r1, r1, #4
 8009428:	6021      	strge	r1, [r4, #0]
 800942a:	b90e      	cbnz	r6, 8009430 <_printf_i+0x118>
 800942c:	2d00      	cmp	r5, #0
 800942e:	d04d      	beq.n	80094cc <_printf_i+0x1b4>
 8009430:	4615      	mov	r5, r2
 8009432:	fbb6 f1f3 	udiv	r1, r6, r3
 8009436:	fb03 6711 	mls	r7, r3, r1, r6
 800943a:	5dc7      	ldrb	r7, [r0, r7]
 800943c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009440:	4637      	mov	r7, r6
 8009442:	42bb      	cmp	r3, r7
 8009444:	460e      	mov	r6, r1
 8009446:	d9f4      	bls.n	8009432 <_printf_i+0x11a>
 8009448:	2b08      	cmp	r3, #8
 800944a:	d10b      	bne.n	8009464 <_printf_i+0x14c>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	07de      	lsls	r6, r3, #31
 8009450:	d508      	bpl.n	8009464 <_printf_i+0x14c>
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	6861      	ldr	r1, [r4, #4]
 8009456:	4299      	cmp	r1, r3
 8009458:	bfde      	ittt	le
 800945a:	2330      	movle	r3, #48	; 0x30
 800945c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009460:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009464:	1b52      	subs	r2, r2, r5
 8009466:	6122      	str	r2, [r4, #16]
 8009468:	f8cd a000 	str.w	sl, [sp]
 800946c:	464b      	mov	r3, r9
 800946e:	aa03      	add	r2, sp, #12
 8009470:	4621      	mov	r1, r4
 8009472:	4640      	mov	r0, r8
 8009474:	f7ff fee2 	bl	800923c <_printf_common>
 8009478:	3001      	adds	r0, #1
 800947a:	d14c      	bne.n	8009516 <_printf_i+0x1fe>
 800947c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009480:	b004      	add	sp, #16
 8009482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009486:	4835      	ldr	r0, [pc, #212]	; (800955c <_printf_i+0x244>)
 8009488:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800948c:	6829      	ldr	r1, [r5, #0]
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	f851 6b04 	ldr.w	r6, [r1], #4
 8009494:	6029      	str	r1, [r5, #0]
 8009496:	061d      	lsls	r5, r3, #24
 8009498:	d514      	bpl.n	80094c4 <_printf_i+0x1ac>
 800949a:	07df      	lsls	r7, r3, #31
 800949c:	bf44      	itt	mi
 800949e:	f043 0320 	orrmi.w	r3, r3, #32
 80094a2:	6023      	strmi	r3, [r4, #0]
 80094a4:	b91e      	cbnz	r6, 80094ae <_printf_i+0x196>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	f023 0320 	bic.w	r3, r3, #32
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	2310      	movs	r3, #16
 80094b0:	e7b0      	b.n	8009414 <_printf_i+0xfc>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	f043 0320 	orr.w	r3, r3, #32
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	2378      	movs	r3, #120	; 0x78
 80094bc:	4828      	ldr	r0, [pc, #160]	; (8009560 <_printf_i+0x248>)
 80094be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094c2:	e7e3      	b.n	800948c <_printf_i+0x174>
 80094c4:	0659      	lsls	r1, r3, #25
 80094c6:	bf48      	it	mi
 80094c8:	b2b6      	uxthmi	r6, r6
 80094ca:	e7e6      	b.n	800949a <_printf_i+0x182>
 80094cc:	4615      	mov	r5, r2
 80094ce:	e7bb      	b.n	8009448 <_printf_i+0x130>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	6826      	ldr	r6, [r4, #0]
 80094d4:	6961      	ldr	r1, [r4, #20]
 80094d6:	1d18      	adds	r0, r3, #4
 80094d8:	6028      	str	r0, [r5, #0]
 80094da:	0635      	lsls	r5, r6, #24
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	d501      	bpl.n	80094e4 <_printf_i+0x1cc>
 80094e0:	6019      	str	r1, [r3, #0]
 80094e2:	e002      	b.n	80094ea <_printf_i+0x1d2>
 80094e4:	0670      	lsls	r0, r6, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_printf_i+0x1c8>
 80094e8:	8019      	strh	r1, [r3, #0]
 80094ea:	2300      	movs	r3, #0
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	4615      	mov	r5, r2
 80094f0:	e7ba      	b.n	8009468 <_printf_i+0x150>
 80094f2:	682b      	ldr	r3, [r5, #0]
 80094f4:	1d1a      	adds	r2, r3, #4
 80094f6:	602a      	str	r2, [r5, #0]
 80094f8:	681d      	ldr	r5, [r3, #0]
 80094fa:	6862      	ldr	r2, [r4, #4]
 80094fc:	2100      	movs	r1, #0
 80094fe:	4628      	mov	r0, r5
 8009500:	f7f6 fe6e 	bl	80001e0 <memchr>
 8009504:	b108      	cbz	r0, 800950a <_printf_i+0x1f2>
 8009506:	1b40      	subs	r0, r0, r5
 8009508:	6060      	str	r0, [r4, #4]
 800950a:	6863      	ldr	r3, [r4, #4]
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	2300      	movs	r3, #0
 8009510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009514:	e7a8      	b.n	8009468 <_printf_i+0x150>
 8009516:	6923      	ldr	r3, [r4, #16]
 8009518:	462a      	mov	r2, r5
 800951a:	4649      	mov	r1, r9
 800951c:	4640      	mov	r0, r8
 800951e:	47d0      	blx	sl
 8009520:	3001      	adds	r0, #1
 8009522:	d0ab      	beq.n	800947c <_printf_i+0x164>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	079b      	lsls	r3, r3, #30
 8009528:	d413      	bmi.n	8009552 <_printf_i+0x23a>
 800952a:	68e0      	ldr	r0, [r4, #12]
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	4298      	cmp	r0, r3
 8009530:	bfb8      	it	lt
 8009532:	4618      	movlt	r0, r3
 8009534:	e7a4      	b.n	8009480 <_printf_i+0x168>
 8009536:	2301      	movs	r3, #1
 8009538:	4632      	mov	r2, r6
 800953a:	4649      	mov	r1, r9
 800953c:	4640      	mov	r0, r8
 800953e:	47d0      	blx	sl
 8009540:	3001      	adds	r0, #1
 8009542:	d09b      	beq.n	800947c <_printf_i+0x164>
 8009544:	3501      	adds	r5, #1
 8009546:	68e3      	ldr	r3, [r4, #12]
 8009548:	9903      	ldr	r1, [sp, #12]
 800954a:	1a5b      	subs	r3, r3, r1
 800954c:	42ab      	cmp	r3, r5
 800954e:	dcf2      	bgt.n	8009536 <_printf_i+0x21e>
 8009550:	e7eb      	b.n	800952a <_printf_i+0x212>
 8009552:	2500      	movs	r5, #0
 8009554:	f104 0619 	add.w	r6, r4, #25
 8009558:	e7f5      	b.n	8009546 <_printf_i+0x22e>
 800955a:	bf00      	nop
 800955c:	0800c011 	.word	0x0800c011
 8009560:	0800c022 	.word	0x0800c022

08009564 <memcpy>:
 8009564:	440a      	add	r2, r1
 8009566:	4291      	cmp	r1, r2
 8009568:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800956c:	d100      	bne.n	8009570 <memcpy+0xc>
 800956e:	4770      	bx	lr
 8009570:	b510      	push	{r4, lr}
 8009572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800957a:	4291      	cmp	r1, r2
 800957c:	d1f9      	bne.n	8009572 <memcpy+0xe>
 800957e:	bd10      	pop	{r4, pc}

08009580 <memmove>:
 8009580:	4288      	cmp	r0, r1
 8009582:	b510      	push	{r4, lr}
 8009584:	eb01 0402 	add.w	r4, r1, r2
 8009588:	d902      	bls.n	8009590 <memmove+0x10>
 800958a:	4284      	cmp	r4, r0
 800958c:	4623      	mov	r3, r4
 800958e:	d807      	bhi.n	80095a0 <memmove+0x20>
 8009590:	1e43      	subs	r3, r0, #1
 8009592:	42a1      	cmp	r1, r4
 8009594:	d008      	beq.n	80095a8 <memmove+0x28>
 8009596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800959a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800959e:	e7f8      	b.n	8009592 <memmove+0x12>
 80095a0:	4402      	add	r2, r0
 80095a2:	4601      	mov	r1, r0
 80095a4:	428a      	cmp	r2, r1
 80095a6:	d100      	bne.n	80095aa <memmove+0x2a>
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095b2:	e7f7      	b.n	80095a4 <memmove+0x24>

080095b4 <_free_r>:
 80095b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d044      	beq.n	8009644 <_free_r+0x90>
 80095ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095be:	9001      	str	r0, [sp, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f1a1 0404 	sub.w	r4, r1, #4
 80095c6:	bfb8      	it	lt
 80095c8:	18e4      	addlt	r4, r4, r3
 80095ca:	f000 f913 	bl	80097f4 <__malloc_lock>
 80095ce:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <_free_r+0x94>)
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	b933      	cbnz	r3, 80095e4 <_free_r+0x30>
 80095d6:	6063      	str	r3, [r4, #4]
 80095d8:	6014      	str	r4, [r2, #0]
 80095da:	b003      	add	sp, #12
 80095dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095e0:	f000 b90e 	b.w	8009800 <__malloc_unlock>
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	d908      	bls.n	80095fa <_free_r+0x46>
 80095e8:	6825      	ldr	r5, [r4, #0]
 80095ea:	1961      	adds	r1, r4, r5
 80095ec:	428b      	cmp	r3, r1
 80095ee:	bf01      	itttt	eq
 80095f0:	6819      	ldreq	r1, [r3, #0]
 80095f2:	685b      	ldreq	r3, [r3, #4]
 80095f4:	1949      	addeq	r1, r1, r5
 80095f6:	6021      	streq	r1, [r4, #0]
 80095f8:	e7ed      	b.n	80095d6 <_free_r+0x22>
 80095fa:	461a      	mov	r2, r3
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	b10b      	cbz	r3, 8009604 <_free_r+0x50>
 8009600:	42a3      	cmp	r3, r4
 8009602:	d9fa      	bls.n	80095fa <_free_r+0x46>
 8009604:	6811      	ldr	r1, [r2, #0]
 8009606:	1855      	adds	r5, r2, r1
 8009608:	42a5      	cmp	r5, r4
 800960a:	d10b      	bne.n	8009624 <_free_r+0x70>
 800960c:	6824      	ldr	r4, [r4, #0]
 800960e:	4421      	add	r1, r4
 8009610:	1854      	adds	r4, r2, r1
 8009612:	42a3      	cmp	r3, r4
 8009614:	6011      	str	r1, [r2, #0]
 8009616:	d1e0      	bne.n	80095da <_free_r+0x26>
 8009618:	681c      	ldr	r4, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	6053      	str	r3, [r2, #4]
 800961e:	4421      	add	r1, r4
 8009620:	6011      	str	r1, [r2, #0]
 8009622:	e7da      	b.n	80095da <_free_r+0x26>
 8009624:	d902      	bls.n	800962c <_free_r+0x78>
 8009626:	230c      	movs	r3, #12
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	e7d6      	b.n	80095da <_free_r+0x26>
 800962c:	6825      	ldr	r5, [r4, #0]
 800962e:	1961      	adds	r1, r4, r5
 8009630:	428b      	cmp	r3, r1
 8009632:	bf04      	itt	eq
 8009634:	6819      	ldreq	r1, [r3, #0]
 8009636:	685b      	ldreq	r3, [r3, #4]
 8009638:	6063      	str	r3, [r4, #4]
 800963a:	bf04      	itt	eq
 800963c:	1949      	addeq	r1, r1, r5
 800963e:	6021      	streq	r1, [r4, #0]
 8009640:	6054      	str	r4, [r2, #4]
 8009642:	e7ca      	b.n	80095da <_free_r+0x26>
 8009644:	b003      	add	sp, #12
 8009646:	bd30      	pop	{r4, r5, pc}
 8009648:	20000780 	.word	0x20000780

0800964c <sbrk_aligned>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	4e0e      	ldr	r6, [pc, #56]	; (8009688 <sbrk_aligned+0x3c>)
 8009650:	460c      	mov	r4, r1
 8009652:	6831      	ldr	r1, [r6, #0]
 8009654:	4605      	mov	r5, r0
 8009656:	b911      	cbnz	r1, 800965e <sbrk_aligned+0x12>
 8009658:	f000 f8bc 	bl	80097d4 <_sbrk_r>
 800965c:	6030      	str	r0, [r6, #0]
 800965e:	4621      	mov	r1, r4
 8009660:	4628      	mov	r0, r5
 8009662:	f000 f8b7 	bl	80097d4 <_sbrk_r>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d00a      	beq.n	8009680 <sbrk_aligned+0x34>
 800966a:	1cc4      	adds	r4, r0, #3
 800966c:	f024 0403 	bic.w	r4, r4, #3
 8009670:	42a0      	cmp	r0, r4
 8009672:	d007      	beq.n	8009684 <sbrk_aligned+0x38>
 8009674:	1a21      	subs	r1, r4, r0
 8009676:	4628      	mov	r0, r5
 8009678:	f000 f8ac 	bl	80097d4 <_sbrk_r>
 800967c:	3001      	adds	r0, #1
 800967e:	d101      	bne.n	8009684 <sbrk_aligned+0x38>
 8009680:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009684:	4620      	mov	r0, r4
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	20000784 	.word	0x20000784

0800968c <_malloc_r>:
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	1ccd      	adds	r5, r1, #3
 8009692:	f025 0503 	bic.w	r5, r5, #3
 8009696:	3508      	adds	r5, #8
 8009698:	2d0c      	cmp	r5, #12
 800969a:	bf38      	it	cc
 800969c:	250c      	movcc	r5, #12
 800969e:	2d00      	cmp	r5, #0
 80096a0:	4607      	mov	r7, r0
 80096a2:	db01      	blt.n	80096a8 <_malloc_r+0x1c>
 80096a4:	42a9      	cmp	r1, r5
 80096a6:	d905      	bls.n	80096b4 <_malloc_r+0x28>
 80096a8:	230c      	movs	r3, #12
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	2600      	movs	r6, #0
 80096ae:	4630      	mov	r0, r6
 80096b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b4:	4e2e      	ldr	r6, [pc, #184]	; (8009770 <_malloc_r+0xe4>)
 80096b6:	f000 f89d 	bl	80097f4 <__malloc_lock>
 80096ba:	6833      	ldr	r3, [r6, #0]
 80096bc:	461c      	mov	r4, r3
 80096be:	bb34      	cbnz	r4, 800970e <_malloc_r+0x82>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7ff ffc2 	bl	800964c <sbrk_aligned>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	4604      	mov	r4, r0
 80096cc:	d14d      	bne.n	800976a <_malloc_r+0xde>
 80096ce:	6834      	ldr	r4, [r6, #0]
 80096d0:	4626      	mov	r6, r4
 80096d2:	2e00      	cmp	r6, #0
 80096d4:	d140      	bne.n	8009758 <_malloc_r+0xcc>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	4631      	mov	r1, r6
 80096da:	4638      	mov	r0, r7
 80096dc:	eb04 0803 	add.w	r8, r4, r3
 80096e0:	f000 f878 	bl	80097d4 <_sbrk_r>
 80096e4:	4580      	cmp	r8, r0
 80096e6:	d13a      	bne.n	800975e <_malloc_r+0xd2>
 80096e8:	6821      	ldr	r1, [r4, #0]
 80096ea:	3503      	adds	r5, #3
 80096ec:	1a6d      	subs	r5, r5, r1
 80096ee:	f025 0503 	bic.w	r5, r5, #3
 80096f2:	3508      	adds	r5, #8
 80096f4:	2d0c      	cmp	r5, #12
 80096f6:	bf38      	it	cc
 80096f8:	250c      	movcc	r5, #12
 80096fa:	4629      	mov	r1, r5
 80096fc:	4638      	mov	r0, r7
 80096fe:	f7ff ffa5 	bl	800964c <sbrk_aligned>
 8009702:	3001      	adds	r0, #1
 8009704:	d02b      	beq.n	800975e <_malloc_r+0xd2>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	442b      	add	r3, r5
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	e00e      	b.n	800972c <_malloc_r+0xa0>
 800970e:	6822      	ldr	r2, [r4, #0]
 8009710:	1b52      	subs	r2, r2, r5
 8009712:	d41e      	bmi.n	8009752 <_malloc_r+0xc6>
 8009714:	2a0b      	cmp	r2, #11
 8009716:	d916      	bls.n	8009746 <_malloc_r+0xba>
 8009718:	1961      	adds	r1, r4, r5
 800971a:	42a3      	cmp	r3, r4
 800971c:	6025      	str	r5, [r4, #0]
 800971e:	bf18      	it	ne
 8009720:	6059      	strne	r1, [r3, #4]
 8009722:	6863      	ldr	r3, [r4, #4]
 8009724:	bf08      	it	eq
 8009726:	6031      	streq	r1, [r6, #0]
 8009728:	5162      	str	r2, [r4, r5]
 800972a:	604b      	str	r3, [r1, #4]
 800972c:	4638      	mov	r0, r7
 800972e:	f104 060b 	add.w	r6, r4, #11
 8009732:	f000 f865 	bl	8009800 <__malloc_unlock>
 8009736:	f026 0607 	bic.w	r6, r6, #7
 800973a:	1d23      	adds	r3, r4, #4
 800973c:	1af2      	subs	r2, r6, r3
 800973e:	d0b6      	beq.n	80096ae <_malloc_r+0x22>
 8009740:	1b9b      	subs	r3, r3, r6
 8009742:	50a3      	str	r3, [r4, r2]
 8009744:	e7b3      	b.n	80096ae <_malloc_r+0x22>
 8009746:	6862      	ldr	r2, [r4, #4]
 8009748:	42a3      	cmp	r3, r4
 800974a:	bf0c      	ite	eq
 800974c:	6032      	streq	r2, [r6, #0]
 800974e:	605a      	strne	r2, [r3, #4]
 8009750:	e7ec      	b.n	800972c <_malloc_r+0xa0>
 8009752:	4623      	mov	r3, r4
 8009754:	6864      	ldr	r4, [r4, #4]
 8009756:	e7b2      	b.n	80096be <_malloc_r+0x32>
 8009758:	4634      	mov	r4, r6
 800975a:	6876      	ldr	r6, [r6, #4]
 800975c:	e7b9      	b.n	80096d2 <_malloc_r+0x46>
 800975e:	230c      	movs	r3, #12
 8009760:	603b      	str	r3, [r7, #0]
 8009762:	4638      	mov	r0, r7
 8009764:	f000 f84c 	bl	8009800 <__malloc_unlock>
 8009768:	e7a1      	b.n	80096ae <_malloc_r+0x22>
 800976a:	6025      	str	r5, [r4, #0]
 800976c:	e7de      	b.n	800972c <_malloc_r+0xa0>
 800976e:	bf00      	nop
 8009770:	20000780 	.word	0x20000780

08009774 <_realloc_r>:
 8009774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	4680      	mov	r8, r0
 800977a:	4614      	mov	r4, r2
 800977c:	460e      	mov	r6, r1
 800977e:	b921      	cbnz	r1, 800978a <_realloc_r+0x16>
 8009780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	4611      	mov	r1, r2
 8009786:	f7ff bf81 	b.w	800968c <_malloc_r>
 800978a:	b92a      	cbnz	r2, 8009798 <_realloc_r+0x24>
 800978c:	f7ff ff12 	bl	80095b4 <_free_r>
 8009790:	4625      	mov	r5, r4
 8009792:	4628      	mov	r0, r5
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	f000 f838 	bl	800980c <_malloc_usable_size_r>
 800979c:	4284      	cmp	r4, r0
 800979e:	4607      	mov	r7, r0
 80097a0:	d802      	bhi.n	80097a8 <_realloc_r+0x34>
 80097a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097a6:	d812      	bhi.n	80097ce <_realloc_r+0x5a>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4640      	mov	r0, r8
 80097ac:	f7ff ff6e 	bl	800968c <_malloc_r>
 80097b0:	4605      	mov	r5, r0
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d0ed      	beq.n	8009792 <_realloc_r+0x1e>
 80097b6:	42bc      	cmp	r4, r7
 80097b8:	4622      	mov	r2, r4
 80097ba:	4631      	mov	r1, r6
 80097bc:	bf28      	it	cs
 80097be:	463a      	movcs	r2, r7
 80097c0:	f7ff fed0 	bl	8009564 <memcpy>
 80097c4:	4631      	mov	r1, r6
 80097c6:	4640      	mov	r0, r8
 80097c8:	f7ff fef4 	bl	80095b4 <_free_r>
 80097cc:	e7e1      	b.n	8009792 <_realloc_r+0x1e>
 80097ce:	4635      	mov	r5, r6
 80097d0:	e7df      	b.n	8009792 <_realloc_r+0x1e>
	...

080097d4 <_sbrk_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d06      	ldr	r5, [pc, #24]	; (80097f0 <_sbrk_r+0x1c>)
 80097d8:	2300      	movs	r3, #0
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	602b      	str	r3, [r5, #0]
 80097e0:	f7fa fd36 	bl	8004250 <_sbrk>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_sbrk_r+0x1a>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_sbrk_r+0x1a>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	20000788 	.word	0x20000788

080097f4 <__malloc_lock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_lock+0x8>)
 80097f6:	f000 b811 	b.w	800981c <__retarget_lock_acquire_recursive>
 80097fa:	bf00      	nop
 80097fc:	2000078c 	.word	0x2000078c

08009800 <__malloc_unlock>:
 8009800:	4801      	ldr	r0, [pc, #4]	; (8009808 <__malloc_unlock+0x8>)
 8009802:	f000 b80c 	b.w	800981e <__retarget_lock_release_recursive>
 8009806:	bf00      	nop
 8009808:	2000078c 	.word	0x2000078c

0800980c <_malloc_usable_size_r>:
 800980c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009810:	1f18      	subs	r0, r3, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfbc      	itt	lt
 8009816:	580b      	ldrlt	r3, [r1, r0]
 8009818:	18c0      	addlt	r0, r0, r3
 800981a:	4770      	bx	lr

0800981c <__retarget_lock_acquire_recursive>:
 800981c:	4770      	bx	lr

0800981e <__retarget_lock_release_recursive>:
 800981e:	4770      	bx	lr

08009820 <sin>:
 8009820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009822:	ec53 2b10 	vmov	r2, r3, d0
 8009826:	4828      	ldr	r0, [pc, #160]	; (80098c8 <sin+0xa8>)
 8009828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800982c:	4281      	cmp	r1, r0
 800982e:	dc07      	bgt.n	8009840 <sin+0x20>
 8009830:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80098c0 <sin+0xa0>
 8009834:	2000      	movs	r0, #0
 8009836:	b005      	add	sp, #20
 8009838:	f85d eb04 	ldr.w	lr, [sp], #4
 800983c:	f002 b804 	b.w	800b848 <__kernel_sin>
 8009840:	4822      	ldr	r0, [pc, #136]	; (80098cc <sin+0xac>)
 8009842:	4281      	cmp	r1, r0
 8009844:	dd09      	ble.n	800985a <sin+0x3a>
 8009846:	ee10 0a10 	vmov	r0, s0
 800984a:	4619      	mov	r1, r3
 800984c:	f7f6 fd1c 	bl	8000288 <__aeabi_dsub>
 8009850:	ec41 0b10 	vmov	d0, r0, r1
 8009854:	b005      	add	sp, #20
 8009856:	f85d fb04 	ldr.w	pc, [sp], #4
 800985a:	4668      	mov	r0, sp
 800985c:	f001 f91c 	bl	800aa98 <__ieee754_rem_pio2>
 8009860:	f000 0003 	and.w	r0, r0, #3
 8009864:	2801      	cmp	r0, #1
 8009866:	d00c      	beq.n	8009882 <sin+0x62>
 8009868:	2802      	cmp	r0, #2
 800986a:	d011      	beq.n	8009890 <sin+0x70>
 800986c:	b9f0      	cbnz	r0, 80098ac <sin+0x8c>
 800986e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009872:	ed9d 0b00 	vldr	d0, [sp]
 8009876:	2001      	movs	r0, #1
 8009878:	f001 ffe6 	bl	800b848 <__kernel_sin>
 800987c:	ec51 0b10 	vmov	r0, r1, d0
 8009880:	e7e6      	b.n	8009850 <sin+0x30>
 8009882:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009886:	ed9d 0b00 	vldr	d0, [sp]
 800988a:	f001 fbc5 	bl	800b018 <__kernel_cos>
 800988e:	e7f5      	b.n	800987c <sin+0x5c>
 8009890:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009894:	ed9d 0b00 	vldr	d0, [sp]
 8009898:	2001      	movs	r0, #1
 800989a:	f001 ffd5 	bl	800b848 <__kernel_sin>
 800989e:	ec53 2b10 	vmov	r2, r3, d0
 80098a2:	ee10 0a10 	vmov	r0, s0
 80098a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80098aa:	e7d1      	b.n	8009850 <sin+0x30>
 80098ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098b0:	ed9d 0b00 	vldr	d0, [sp]
 80098b4:	f001 fbb0 	bl	800b018 <__kernel_cos>
 80098b8:	e7f1      	b.n	800989e <sin+0x7e>
 80098ba:	bf00      	nop
 80098bc:	f3af 8000 	nop.w
	...
 80098c8:	3fe921fb 	.word	0x3fe921fb
 80098cc:	7fefffff 	.word	0x7fefffff

080098d0 <asin>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	ed2d 8b02 	vpush	{d8}
 80098d6:	ec55 4b10 	vmov	r4, r5, d0
 80098da:	f000 f8cd 	bl	8009a78 <__ieee754_asin>
 80098de:	4622      	mov	r2, r4
 80098e0:	462b      	mov	r3, r5
 80098e2:	4620      	mov	r0, r4
 80098e4:	4629      	mov	r1, r5
 80098e6:	eeb0 8a40 	vmov.f32	s16, s0
 80098ea:	eef0 8a60 	vmov.f32	s17, s1
 80098ee:	f7f7 f91d 	bl	8000b2c <__aeabi_dcmpun>
 80098f2:	b9a8      	cbnz	r0, 8009920 <asin+0x50>
 80098f4:	ec45 4b10 	vmov	d0, r4, r5
 80098f8:	f002 fa36 	bl	800bd68 <fabs>
 80098fc:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <asin+0x60>)
 80098fe:	ec51 0b10 	vmov	r0, r1, d0
 8009902:	2200      	movs	r2, #0
 8009904:	f7f7 f908 	bl	8000b18 <__aeabi_dcmpgt>
 8009908:	b150      	cbz	r0, 8009920 <asin+0x50>
 800990a:	f7ff fae9 	bl	8008ee0 <__errno>
 800990e:	ecbd 8b02 	vpop	{d8}
 8009912:	2321      	movs	r3, #33	; 0x21
 8009914:	6003      	str	r3, [r0, #0]
 8009916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991a:	4806      	ldr	r0, [pc, #24]	; (8009934 <asin+0x64>)
 800991c:	f002 bab8 	b.w	800be90 <nan>
 8009920:	eeb0 0a48 	vmov.f32	s0, s16
 8009924:	eef0 0a68 	vmov.f32	s1, s17
 8009928:	ecbd 8b02 	vpop	{d8}
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	3ff00000 	.word	0x3ff00000
 8009934:	0800c005 	.word	0x0800c005

08009938 <atan2>:
 8009938:	f000 bab2 	b.w	8009ea0 <__ieee754_atan2>

0800993c <pow>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	ed2d 8b02 	vpush	{d8}
 8009942:	eeb0 8a40 	vmov.f32	s16, s0
 8009946:	eef0 8a60 	vmov.f32	s17, s1
 800994a:	ec55 4b11 	vmov	r4, r5, d1
 800994e:	f000 fb73 	bl	800a038 <__ieee754_pow>
 8009952:	4622      	mov	r2, r4
 8009954:	462b      	mov	r3, r5
 8009956:	4620      	mov	r0, r4
 8009958:	4629      	mov	r1, r5
 800995a:	ec57 6b10 	vmov	r6, r7, d0
 800995e:	f7f7 f8e5 	bl	8000b2c <__aeabi_dcmpun>
 8009962:	2800      	cmp	r0, #0
 8009964:	d13b      	bne.n	80099de <pow+0xa2>
 8009966:	ec51 0b18 	vmov	r0, r1, d8
 800996a:	2200      	movs	r2, #0
 800996c:	2300      	movs	r3, #0
 800996e:	f7f7 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009972:	b1b8      	cbz	r0, 80099a4 <pow+0x68>
 8009974:	2200      	movs	r2, #0
 8009976:	2300      	movs	r3, #0
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f7f7 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009980:	2800      	cmp	r0, #0
 8009982:	d146      	bne.n	8009a12 <pow+0xd6>
 8009984:	ec45 4b10 	vmov	d0, r4, r5
 8009988:	f002 f9f7 	bl	800bd7a <finite>
 800998c:	b338      	cbz	r0, 80099de <pow+0xa2>
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f7 f8a1 	bl	8000adc <__aeabi_dcmplt>
 800999a:	b300      	cbz	r0, 80099de <pow+0xa2>
 800999c:	f7ff faa0 	bl	8008ee0 <__errno>
 80099a0:	2322      	movs	r3, #34	; 0x22
 80099a2:	e01b      	b.n	80099dc <pow+0xa0>
 80099a4:	ec47 6b10 	vmov	d0, r6, r7
 80099a8:	f002 f9e7 	bl	800bd7a <finite>
 80099ac:	b9e0      	cbnz	r0, 80099e8 <pow+0xac>
 80099ae:	eeb0 0a48 	vmov.f32	s0, s16
 80099b2:	eef0 0a68 	vmov.f32	s1, s17
 80099b6:	f002 f9e0 	bl	800bd7a <finite>
 80099ba:	b1a8      	cbz	r0, 80099e8 <pow+0xac>
 80099bc:	ec45 4b10 	vmov	d0, r4, r5
 80099c0:	f002 f9db 	bl	800bd7a <finite>
 80099c4:	b180      	cbz	r0, 80099e8 <pow+0xac>
 80099c6:	4632      	mov	r2, r6
 80099c8:	463b      	mov	r3, r7
 80099ca:	4630      	mov	r0, r6
 80099cc:	4639      	mov	r1, r7
 80099ce:	f7f7 f8ad 	bl	8000b2c <__aeabi_dcmpun>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0e2      	beq.n	800999c <pow+0x60>
 80099d6:	f7ff fa83 	bl	8008ee0 <__errno>
 80099da:	2321      	movs	r3, #33	; 0x21
 80099dc:	6003      	str	r3, [r0, #0]
 80099de:	ecbd 8b02 	vpop	{d8}
 80099e2:	ec47 6b10 	vmov	d0, r6, r7
 80099e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e8:	2200      	movs	r2, #0
 80099ea:	2300      	movs	r3, #0
 80099ec:	4630      	mov	r0, r6
 80099ee:	4639      	mov	r1, r7
 80099f0:	f7f7 f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d0f2      	beq.n	80099de <pow+0xa2>
 80099f8:	eeb0 0a48 	vmov.f32	s0, s16
 80099fc:	eef0 0a68 	vmov.f32	s1, s17
 8009a00:	f002 f9bb 	bl	800bd7a <finite>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d0ea      	beq.n	80099de <pow+0xa2>
 8009a08:	ec45 4b10 	vmov	d0, r4, r5
 8009a0c:	f002 f9b5 	bl	800bd7a <finite>
 8009a10:	e7c3      	b.n	800999a <pow+0x5e>
 8009a12:	4f01      	ldr	r7, [pc, #4]	; (8009a18 <pow+0xdc>)
 8009a14:	2600      	movs	r6, #0
 8009a16:	e7e2      	b.n	80099de <pow+0xa2>
 8009a18:	3ff00000 	.word	0x3ff00000

08009a1c <sqrt>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	ed2d 8b02 	vpush	{d8}
 8009a22:	ec55 4b10 	vmov	r4, r5, d0
 8009a26:	f001 fa43 	bl	800aeb0 <__ieee754_sqrt>
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	eeb0 8a40 	vmov.f32	s16, s0
 8009a36:	eef0 8a60 	vmov.f32	s17, s1
 8009a3a:	f7f7 f877 	bl	8000b2c <__aeabi_dcmpun>
 8009a3e:	b990      	cbnz	r0, 8009a66 <sqrt+0x4a>
 8009a40:	2200      	movs	r2, #0
 8009a42:	2300      	movs	r3, #0
 8009a44:	4620      	mov	r0, r4
 8009a46:	4629      	mov	r1, r5
 8009a48:	f7f7 f848 	bl	8000adc <__aeabi_dcmplt>
 8009a4c:	b158      	cbz	r0, 8009a66 <sqrt+0x4a>
 8009a4e:	f7ff fa47 	bl	8008ee0 <__errno>
 8009a52:	2321      	movs	r3, #33	; 0x21
 8009a54:	6003      	str	r3, [r0, #0]
 8009a56:	2200      	movs	r2, #0
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f7f6 fef5 	bl	800084c <__aeabi_ddiv>
 8009a62:	ec41 0b18 	vmov	d8, r0, r1
 8009a66:	eeb0 0a48 	vmov.f32	s0, s16
 8009a6a:	eef0 0a68 	vmov.f32	s1, s17
 8009a6e:	ecbd 8b02 	vpop	{d8}
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	0000      	movs	r0, r0
	...

08009a78 <__ieee754_asin>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	ed2d 8b04 	vpush	{d8-d9}
 8009a80:	ec55 4b10 	vmov	r4, r5, d0
 8009a84:	4bcc      	ldr	r3, [pc, #816]	; (8009db8 <__ieee754_asin+0x340>)
 8009a86:	b083      	sub	sp, #12
 8009a88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009a8c:	4598      	cmp	r8, r3
 8009a8e:	9501      	str	r5, [sp, #4]
 8009a90:	dd35      	ble.n	8009afe <__ieee754_asin+0x86>
 8009a92:	ee10 3a10 	vmov	r3, s0
 8009a96:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009a9a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009a9e:	ea58 0303 	orrs.w	r3, r8, r3
 8009aa2:	d117      	bne.n	8009ad4 <__ieee754_asin+0x5c>
 8009aa4:	a3aa      	add	r3, pc, #680	; (adr r3, 8009d50 <__ieee754_asin+0x2d8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	ee10 0a10 	vmov	r0, s0
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	a3a8      	add	r3, pc, #672	; (adr r3, 8009d58 <__ieee754_asin+0x2e0>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7f6 fd99 	bl	80005f8 <__aeabi_dmul>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4630      	mov	r0, r6
 8009acc:	4639      	mov	r1, r7
 8009ace:	f7f6 fbdd 	bl	800028c <__adddf3>
 8009ad2:	e00b      	b.n	8009aec <__ieee754_asin+0x74>
 8009ad4:	ee10 2a10 	vmov	r2, s0
 8009ad8:	462b      	mov	r3, r5
 8009ada:	ee10 0a10 	vmov	r0, s0
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fbd2 	bl	8000288 <__aeabi_dsub>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	f7f6 feb0 	bl	800084c <__aeabi_ddiv>
 8009aec:	4604      	mov	r4, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	ec45 4b10 	vmov	d0, r4, r5
 8009af4:	b003      	add	sp, #12
 8009af6:	ecbd 8b04 	vpop	{d8-d9}
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	4baf      	ldr	r3, [pc, #700]	; (8009dbc <__ieee754_asin+0x344>)
 8009b00:	4598      	cmp	r8, r3
 8009b02:	dc11      	bgt.n	8009b28 <__ieee754_asin+0xb0>
 8009b04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009b08:	f280 80ae 	bge.w	8009c68 <__ieee754_asin+0x1f0>
 8009b0c:	a394      	add	r3, pc, #592	; (adr r3, 8009d60 <__ieee754_asin+0x2e8>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	ee10 0a10 	vmov	r0, s0
 8009b16:	4629      	mov	r1, r5
 8009b18:	f7f6 fbb8 	bl	800028c <__adddf3>
 8009b1c:	4ba8      	ldr	r3, [pc, #672]	; (8009dc0 <__ieee754_asin+0x348>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f7f6 fffa 	bl	8000b18 <__aeabi_dcmpgt>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1e3      	bne.n	8009af0 <__ieee754_asin+0x78>
 8009b28:	ec45 4b10 	vmov	d0, r4, r5
 8009b2c:	f002 f91c 	bl	800bd68 <fabs>
 8009b30:	49a3      	ldr	r1, [pc, #652]	; (8009dc0 <__ieee754_asin+0x348>)
 8009b32:	ec53 2b10 	vmov	r2, r3, d0
 8009b36:	2000      	movs	r0, #0
 8009b38:	f7f6 fba6 	bl	8000288 <__aeabi_dsub>
 8009b3c:	4ba1      	ldr	r3, [pc, #644]	; (8009dc4 <__ieee754_asin+0x34c>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f7f6 fd5a 	bl	80005f8 <__aeabi_dmul>
 8009b44:	a388      	add	r3, pc, #544	; (adr r3, 8009d68 <__ieee754_asin+0x2f0>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	f7f6 fd53 	bl	80005f8 <__aeabi_dmul>
 8009b52:	a387      	add	r3, pc, #540	; (adr r3, 8009d70 <__ieee754_asin+0x2f8>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fb98 	bl	800028c <__adddf3>
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	462b      	mov	r3, r5
 8009b60:	f7f6 fd4a 	bl	80005f8 <__aeabi_dmul>
 8009b64:	a384      	add	r3, pc, #528	; (adr r3, 8009d78 <__ieee754_asin+0x300>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	f7f6 fb8d 	bl	8000288 <__aeabi_dsub>
 8009b6e:	4622      	mov	r2, r4
 8009b70:	462b      	mov	r3, r5
 8009b72:	f7f6 fd41 	bl	80005f8 <__aeabi_dmul>
 8009b76:	a382      	add	r3, pc, #520	; (adr r3, 8009d80 <__ieee754_asin+0x308>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 fb86 	bl	800028c <__adddf3>
 8009b80:	4622      	mov	r2, r4
 8009b82:	462b      	mov	r3, r5
 8009b84:	f7f6 fd38 	bl	80005f8 <__aeabi_dmul>
 8009b88:	a37f      	add	r3, pc, #508	; (adr r3, 8009d88 <__ieee754_asin+0x310>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 fb7b 	bl	8000288 <__aeabi_dsub>
 8009b92:	4622      	mov	r2, r4
 8009b94:	462b      	mov	r3, r5
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	a37d      	add	r3, pc, #500	; (adr r3, 8009d90 <__ieee754_asin+0x318>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fb74 	bl	800028c <__adddf3>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	f7f6 fd26 	bl	80005f8 <__aeabi_dmul>
 8009bac:	a37a      	add	r3, pc, #488	; (adr r3, 8009d98 <__ieee754_asin+0x320>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	ec41 0b18 	vmov	d8, r0, r1
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	4629      	mov	r1, r5
 8009bba:	f7f6 fd1d 	bl	80005f8 <__aeabi_dmul>
 8009bbe:	a378      	add	r3, pc, #480	; (adr r3, 8009da0 <__ieee754_asin+0x328>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f7f6 fb60 	bl	8000288 <__aeabi_dsub>
 8009bc8:	4622      	mov	r2, r4
 8009bca:	462b      	mov	r3, r5
 8009bcc:	f7f6 fd14 	bl	80005f8 <__aeabi_dmul>
 8009bd0:	a375      	add	r3, pc, #468	; (adr r3, 8009da8 <__ieee754_asin+0x330>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fb59 	bl	800028c <__adddf3>
 8009bda:	4622      	mov	r2, r4
 8009bdc:	462b      	mov	r3, r5
 8009bde:	f7f6 fd0b 	bl	80005f8 <__aeabi_dmul>
 8009be2:	a373      	add	r3, pc, #460	; (adr r3, 8009db0 <__ieee754_asin+0x338>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fb4e 	bl	8000288 <__aeabi_dsub>
 8009bec:	4622      	mov	r2, r4
 8009bee:	462b      	mov	r3, r5
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	4b72      	ldr	r3, [pc, #456]	; (8009dc0 <__ieee754_asin+0x348>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f7f6 fb48 	bl	800028c <__adddf3>
 8009bfc:	ec45 4b10 	vmov	d0, r4, r5
 8009c00:	4606      	mov	r6, r0
 8009c02:	460f      	mov	r7, r1
 8009c04:	f001 f954 	bl	800aeb0 <__ieee754_sqrt>
 8009c08:	4b6f      	ldr	r3, [pc, #444]	; (8009dc8 <__ieee754_asin+0x350>)
 8009c0a:	4598      	cmp	r8, r3
 8009c0c:	ec5b ab10 	vmov	sl, fp, d0
 8009c10:	f340 80dc 	ble.w	8009dcc <__ieee754_asin+0x354>
 8009c14:	4632      	mov	r2, r6
 8009c16:	463b      	mov	r3, r7
 8009c18:	ec51 0b18 	vmov	r0, r1, d8
 8009c1c:	f7f6 fe16 	bl	800084c <__aeabi_ddiv>
 8009c20:	4652      	mov	r2, sl
 8009c22:	465b      	mov	r3, fp
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	4652      	mov	r2, sl
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	f7f6 fb2e 	bl	800028c <__adddf3>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	f7f6 fb2a 	bl	800028c <__adddf3>
 8009c38:	a347      	add	r3, pc, #284	; (adr r3, 8009d58 <__ieee754_asin+0x2e0>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fb23 	bl	8000288 <__aeabi_dsub>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	a142      	add	r1, pc, #264	; (adr r1, 8009d50 <__ieee754_asin+0x2d8>)
 8009c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c4c:	f7f6 fb1c 	bl	8000288 <__aeabi_dsub>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfdc      	itt	le
 8009c56:	4602      	movle	r2, r0
 8009c58:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	bfdc      	itt	le
 8009c62:	4614      	movle	r4, r2
 8009c64:	461d      	movle	r5, r3
 8009c66:	e743      	b.n	8009af0 <__ieee754_asin+0x78>
 8009c68:	ee10 2a10 	vmov	r2, s0
 8009c6c:	ee10 0a10 	vmov	r0, s0
 8009c70:	462b      	mov	r3, r5
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7f6 fcc0 	bl	80005f8 <__aeabi_dmul>
 8009c78:	a33b      	add	r3, pc, #236	; (adr r3, 8009d68 <__ieee754_asin+0x2f0>)
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	f7f6 fcb9 	bl	80005f8 <__aeabi_dmul>
 8009c86:	a33a      	add	r3, pc, #232	; (adr r3, 8009d70 <__ieee754_asin+0x2f8>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f7f6 fafe 	bl	800028c <__adddf3>
 8009c90:	4632      	mov	r2, r6
 8009c92:	463b      	mov	r3, r7
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	a337      	add	r3, pc, #220	; (adr r3, 8009d78 <__ieee754_asin+0x300>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f7f6 faf3 	bl	8000288 <__aeabi_dsub>
 8009ca2:	4632      	mov	r2, r6
 8009ca4:	463b      	mov	r3, r7
 8009ca6:	f7f6 fca7 	bl	80005f8 <__aeabi_dmul>
 8009caa:	a335      	add	r3, pc, #212	; (adr r3, 8009d80 <__ieee754_asin+0x308>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 faec 	bl	800028c <__adddf3>
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	f7f6 fc9e 	bl	80005f8 <__aeabi_dmul>
 8009cbc:	a332      	add	r3, pc, #200	; (adr r3, 8009d88 <__ieee754_asin+0x310>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fae1 	bl	8000288 <__aeabi_dsub>
 8009cc6:	4632      	mov	r2, r6
 8009cc8:	463b      	mov	r3, r7
 8009cca:	f7f6 fc95 	bl	80005f8 <__aeabi_dmul>
 8009cce:	a330      	add	r3, pc, #192	; (adr r3, 8009d90 <__ieee754_asin+0x318>)
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	f7f6 fada 	bl	800028c <__adddf3>
 8009cd8:	4632      	mov	r2, r6
 8009cda:	463b      	mov	r3, r7
 8009cdc:	f7f6 fc8c 	bl	80005f8 <__aeabi_dmul>
 8009ce0:	a32d      	add	r3, pc, #180	; (adr r3, 8009d98 <__ieee754_asin+0x320>)
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	4680      	mov	r8, r0
 8009ce8:	4689      	mov	r9, r1
 8009cea:	4630      	mov	r0, r6
 8009cec:	4639      	mov	r1, r7
 8009cee:	f7f6 fc83 	bl	80005f8 <__aeabi_dmul>
 8009cf2:	a32b      	add	r3, pc, #172	; (adr r3, 8009da0 <__ieee754_asin+0x328>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fac6 	bl	8000288 <__aeabi_dsub>
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	f7f6 fc7a 	bl	80005f8 <__aeabi_dmul>
 8009d04:	a328      	add	r3, pc, #160	; (adr r3, 8009da8 <__ieee754_asin+0x330>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	f7f6 fabf 	bl	800028c <__adddf3>
 8009d0e:	4632      	mov	r2, r6
 8009d10:	463b      	mov	r3, r7
 8009d12:	f7f6 fc71 	bl	80005f8 <__aeabi_dmul>
 8009d16:	a326      	add	r3, pc, #152	; (adr r3, 8009db0 <__ieee754_asin+0x338>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	f7f6 fab4 	bl	8000288 <__aeabi_dsub>
 8009d20:	4632      	mov	r2, r6
 8009d22:	463b      	mov	r3, r7
 8009d24:	f7f6 fc68 	bl	80005f8 <__aeabi_dmul>
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <__ieee754_asin+0x348>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f7f6 faae 	bl	800028c <__adddf3>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	f7f6 fd88 	bl	800084c <__aeabi_ddiv>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	462b      	mov	r3, r5
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4620      	mov	r0, r4
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	e6bf      	b.n	8009ace <__ieee754_asin+0x56>
 8009d4e:	bf00      	nop
 8009d50:	54442d18 	.word	0x54442d18
 8009d54:	3ff921fb 	.word	0x3ff921fb
 8009d58:	33145c07 	.word	0x33145c07
 8009d5c:	3c91a626 	.word	0x3c91a626
 8009d60:	8800759c 	.word	0x8800759c
 8009d64:	7e37e43c 	.word	0x7e37e43c
 8009d68:	0dfdf709 	.word	0x0dfdf709
 8009d6c:	3f023de1 	.word	0x3f023de1
 8009d70:	7501b288 	.word	0x7501b288
 8009d74:	3f49efe0 	.word	0x3f49efe0
 8009d78:	b5688f3b 	.word	0xb5688f3b
 8009d7c:	3fa48228 	.word	0x3fa48228
 8009d80:	0e884455 	.word	0x0e884455
 8009d84:	3fc9c155 	.word	0x3fc9c155
 8009d88:	03eb6f7d 	.word	0x03eb6f7d
 8009d8c:	3fd4d612 	.word	0x3fd4d612
 8009d90:	55555555 	.word	0x55555555
 8009d94:	3fc55555 	.word	0x3fc55555
 8009d98:	b12e9282 	.word	0xb12e9282
 8009d9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009da0:	1b8d0159 	.word	0x1b8d0159
 8009da4:	3fe6066c 	.word	0x3fe6066c
 8009da8:	9c598ac8 	.word	0x9c598ac8
 8009dac:	40002ae5 	.word	0x40002ae5
 8009db0:	1c8a2d4b 	.word	0x1c8a2d4b
 8009db4:	40033a27 	.word	0x40033a27
 8009db8:	3fefffff 	.word	0x3fefffff
 8009dbc:	3fdfffff 	.word	0x3fdfffff
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	3fef3332 	.word	0x3fef3332
 8009dcc:	ee10 2a10 	vmov	r2, s0
 8009dd0:	ee10 0a10 	vmov	r0, s0
 8009dd4:	465b      	mov	r3, fp
 8009dd6:	4659      	mov	r1, fp
 8009dd8:	f7f6 fa58 	bl	800028c <__adddf3>
 8009ddc:	4632      	mov	r2, r6
 8009dde:	463b      	mov	r3, r7
 8009de0:	ec41 0b19 	vmov	d9, r0, r1
 8009de4:	ec51 0b18 	vmov	r0, r1, d8
 8009de8:	f7f6 fd30 	bl	800084c <__aeabi_ddiv>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	ec51 0b19 	vmov	r0, r1, d9
 8009df4:	f7f6 fc00 	bl	80005f8 <__aeabi_dmul>
 8009df8:	f04f 0800 	mov.w	r8, #0
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	460f      	mov	r7, r1
 8009e00:	4642      	mov	r2, r8
 8009e02:	465b      	mov	r3, fp
 8009e04:	4640      	mov	r0, r8
 8009e06:	4659      	mov	r1, fp
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7f6 fa38 	bl	8000288 <__aeabi_dsub>
 8009e18:	4642      	mov	r2, r8
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	460d      	mov	r5, r1
 8009e1e:	465b      	mov	r3, fp
 8009e20:	4650      	mov	r0, sl
 8009e22:	4659      	mov	r1, fp
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	4629      	mov	r1, r5
 8009e30:	f7f6 fd0c 	bl	800084c <__aeabi_ddiv>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	f7f6 fa28 	bl	800028c <__adddf3>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	a113      	add	r1, pc, #76	; (adr r1, 8009e90 <__ieee754_asin+0x418>)
 8009e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e46:	f7f6 fa1f 	bl	8000288 <__aeabi_dsub>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 fa19 	bl	8000288 <__aeabi_dsub>
 8009e56:	4642      	mov	r2, r8
 8009e58:	4604      	mov	r4, r0
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	4640      	mov	r0, r8
 8009e60:	4659      	mov	r1, fp
 8009e62:	f7f6 fa13 	bl	800028c <__adddf3>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	a10b      	add	r1, pc, #44	; (adr r1, 8009e98 <__ieee754_asin+0x420>)
 8009e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e70:	f7f6 fa0a 	bl	8000288 <__aeabi_dsub>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4620      	mov	r0, r4
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7f6 fa04 	bl	8000288 <__aeabi_dsub>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	a104      	add	r1, pc, #16	; (adr r1, 8009e98 <__ieee754_asin+0x420>)
 8009e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8a:	e6df      	b.n	8009c4c <__ieee754_asin+0x1d4>
 8009e8c:	f3af 8000 	nop.w
 8009e90:	33145c07 	.word	0x33145c07
 8009e94:	3c91a626 	.word	0x3c91a626
 8009e98:	54442d18 	.word	0x54442d18
 8009e9c:	3fe921fb 	.word	0x3fe921fb

08009ea0 <__ieee754_atan2>:
 8009ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea4:	ec57 6b11 	vmov	r6, r7, d1
 8009ea8:	4273      	negs	r3, r6
 8009eaa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a030 <__ieee754_atan2+0x190>
 8009eae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009eb2:	4333      	orrs	r3, r6
 8009eb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009eb8:	4573      	cmp	r3, lr
 8009eba:	ec51 0b10 	vmov	r0, r1, d0
 8009ebe:	ee11 8a10 	vmov	r8, s2
 8009ec2:	d80a      	bhi.n	8009eda <__ieee754_atan2+0x3a>
 8009ec4:	4244      	negs	r4, r0
 8009ec6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009eca:	4304      	orrs	r4, r0
 8009ecc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009ed0:	4574      	cmp	r4, lr
 8009ed2:	ee10 9a10 	vmov	r9, s0
 8009ed6:	468c      	mov	ip, r1
 8009ed8:	d907      	bls.n	8009eea <__ieee754_atan2+0x4a>
 8009eda:	4632      	mov	r2, r6
 8009edc:	463b      	mov	r3, r7
 8009ede:	f7f6 f9d5 	bl	800028c <__adddf3>
 8009ee2:	ec41 0b10 	vmov	d0, r0, r1
 8009ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009eee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ef2:	4334      	orrs	r4, r6
 8009ef4:	d103      	bne.n	8009efe <__ieee754_atan2+0x5e>
 8009ef6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009efa:	f001 bd95 	b.w	800ba28 <atan>
 8009efe:	17bc      	asrs	r4, r7, #30
 8009f00:	f004 0402 	and.w	r4, r4, #2
 8009f04:	ea53 0909 	orrs.w	r9, r3, r9
 8009f08:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009f0c:	d107      	bne.n	8009f1e <__ieee754_atan2+0x7e>
 8009f0e:	2c02      	cmp	r4, #2
 8009f10:	d060      	beq.n	8009fd4 <__ieee754_atan2+0x134>
 8009f12:	2c03      	cmp	r4, #3
 8009f14:	d1e5      	bne.n	8009ee2 <__ieee754_atan2+0x42>
 8009f16:	a142      	add	r1, pc, #264	; (adr r1, 800a020 <__ieee754_atan2+0x180>)
 8009f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f1c:	e7e1      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009f1e:	ea52 0808 	orrs.w	r8, r2, r8
 8009f22:	d106      	bne.n	8009f32 <__ieee754_atan2+0x92>
 8009f24:	f1bc 0f00 	cmp.w	ip, #0
 8009f28:	da5f      	bge.n	8009fea <__ieee754_atan2+0x14a>
 8009f2a:	a13f      	add	r1, pc, #252	; (adr r1, 800a028 <__ieee754_atan2+0x188>)
 8009f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f30:	e7d7      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009f32:	4572      	cmp	r2, lr
 8009f34:	d10f      	bne.n	8009f56 <__ieee754_atan2+0xb6>
 8009f36:	4293      	cmp	r3, r2
 8009f38:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009f3c:	d107      	bne.n	8009f4e <__ieee754_atan2+0xae>
 8009f3e:	2c02      	cmp	r4, #2
 8009f40:	d84c      	bhi.n	8009fdc <__ieee754_atan2+0x13c>
 8009f42:	4b35      	ldr	r3, [pc, #212]	; (800a018 <__ieee754_atan2+0x178>)
 8009f44:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009f48:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009f4c:	e7c9      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009f4e:	2c02      	cmp	r4, #2
 8009f50:	d848      	bhi.n	8009fe4 <__ieee754_atan2+0x144>
 8009f52:	4b32      	ldr	r3, [pc, #200]	; (800a01c <__ieee754_atan2+0x17c>)
 8009f54:	e7f6      	b.n	8009f44 <__ieee754_atan2+0xa4>
 8009f56:	4573      	cmp	r3, lr
 8009f58:	d0e4      	beq.n	8009f24 <__ieee754_atan2+0x84>
 8009f5a:	1a9b      	subs	r3, r3, r2
 8009f5c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009f60:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f64:	da1e      	bge.n	8009fa4 <__ieee754_atan2+0x104>
 8009f66:	2f00      	cmp	r7, #0
 8009f68:	da01      	bge.n	8009f6e <__ieee754_atan2+0xce>
 8009f6a:	323c      	adds	r2, #60	; 0x3c
 8009f6c:	db1e      	blt.n	8009fac <__ieee754_atan2+0x10c>
 8009f6e:	4632      	mov	r2, r6
 8009f70:	463b      	mov	r3, r7
 8009f72:	f7f6 fc6b 	bl	800084c <__aeabi_ddiv>
 8009f76:	ec41 0b10 	vmov	d0, r0, r1
 8009f7a:	f001 fef5 	bl	800bd68 <fabs>
 8009f7e:	f001 fd53 	bl	800ba28 <atan>
 8009f82:	ec51 0b10 	vmov	r0, r1, d0
 8009f86:	2c01      	cmp	r4, #1
 8009f88:	d013      	beq.n	8009fb2 <__ieee754_atan2+0x112>
 8009f8a:	2c02      	cmp	r4, #2
 8009f8c:	d015      	beq.n	8009fba <__ieee754_atan2+0x11a>
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d0a7      	beq.n	8009ee2 <__ieee754_atan2+0x42>
 8009f92:	a319      	add	r3, pc, #100	; (adr r3, 8009ff8 <__ieee754_atan2+0x158>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 f976 	bl	8000288 <__aeabi_dsub>
 8009f9c:	a318      	add	r3, pc, #96	; (adr r3, 800a000 <__ieee754_atan2+0x160>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	e014      	b.n	8009fce <__ieee754_atan2+0x12e>
 8009fa4:	a118      	add	r1, pc, #96	; (adr r1, 800a008 <__ieee754_atan2+0x168>)
 8009fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009faa:	e7ec      	b.n	8009f86 <__ieee754_atan2+0xe6>
 8009fac:	2000      	movs	r0, #0
 8009fae:	2100      	movs	r1, #0
 8009fb0:	e7e9      	b.n	8009f86 <__ieee754_atan2+0xe6>
 8009fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	e793      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009fba:	a30f      	add	r3, pc, #60	; (adr r3, 8009ff8 <__ieee754_atan2+0x158>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f962 	bl	8000288 <__aeabi_dsub>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	a10d      	add	r1, pc, #52	; (adr r1, 800a000 <__ieee754_atan2+0x160>)
 8009fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fce:	f7f6 f95b 	bl	8000288 <__aeabi_dsub>
 8009fd2:	e786      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009fd4:	a10a      	add	r1, pc, #40	; (adr r1, 800a000 <__ieee754_atan2+0x160>)
 8009fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fda:	e782      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009fdc:	a10c      	add	r1, pc, #48	; (adr r1, 800a010 <__ieee754_atan2+0x170>)
 8009fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe2:	e77e      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	e77b      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009fea:	a107      	add	r1, pc, #28	; (adr r1, 800a008 <__ieee754_atan2+0x168>)
 8009fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ff0:	e777      	b.n	8009ee2 <__ieee754_atan2+0x42>
 8009ff2:	bf00      	nop
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	33145c07 	.word	0x33145c07
 8009ffc:	3ca1a626 	.word	0x3ca1a626
 800a000:	54442d18 	.word	0x54442d18
 800a004:	400921fb 	.word	0x400921fb
 800a008:	54442d18 	.word	0x54442d18
 800a00c:	3ff921fb 	.word	0x3ff921fb
 800a010:	54442d18 	.word	0x54442d18
 800a014:	3fe921fb 	.word	0x3fe921fb
 800a018:	0800c038 	.word	0x0800c038
 800a01c:	0800c050 	.word	0x0800c050
 800a020:	54442d18 	.word	0x54442d18
 800a024:	c00921fb 	.word	0xc00921fb
 800a028:	54442d18 	.word	0x54442d18
 800a02c:	bff921fb 	.word	0xbff921fb
 800a030:	7ff00000 	.word	0x7ff00000
 800a034:	00000000 	.word	0x00000000

0800a038 <__ieee754_pow>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	ed2d 8b06 	vpush	{d8-d10}
 800a040:	b089      	sub	sp, #36	; 0x24
 800a042:	ed8d 1b00 	vstr	d1, [sp]
 800a046:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a04a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a04e:	ea58 0102 	orrs.w	r1, r8, r2
 800a052:	ec57 6b10 	vmov	r6, r7, d0
 800a056:	d115      	bne.n	800a084 <__ieee754_pow+0x4c>
 800a058:	19b3      	adds	r3, r6, r6
 800a05a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a05e:	4152      	adcs	r2, r2
 800a060:	4299      	cmp	r1, r3
 800a062:	4b89      	ldr	r3, [pc, #548]	; (800a288 <__ieee754_pow+0x250>)
 800a064:	4193      	sbcs	r3, r2
 800a066:	f080 84d2 	bcs.w	800aa0e <__ieee754_pow+0x9d6>
 800a06a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 f90b 	bl	800028c <__adddf3>
 800a076:	ec41 0b10 	vmov	d0, r0, r1
 800a07a:	b009      	add	sp, #36	; 0x24
 800a07c:	ecbd 8b06 	vpop	{d8-d10}
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	4b81      	ldr	r3, [pc, #516]	; (800a28c <__ieee754_pow+0x254>)
 800a086:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a08a:	429c      	cmp	r4, r3
 800a08c:	ee10 aa10 	vmov	sl, s0
 800a090:	463d      	mov	r5, r7
 800a092:	dc06      	bgt.n	800a0a2 <__ieee754_pow+0x6a>
 800a094:	d101      	bne.n	800a09a <__ieee754_pow+0x62>
 800a096:	2e00      	cmp	r6, #0
 800a098:	d1e7      	bne.n	800a06a <__ieee754_pow+0x32>
 800a09a:	4598      	cmp	r8, r3
 800a09c:	dc01      	bgt.n	800a0a2 <__ieee754_pow+0x6a>
 800a09e:	d10f      	bne.n	800a0c0 <__ieee754_pow+0x88>
 800a0a0:	b172      	cbz	r2, 800a0c0 <__ieee754_pow+0x88>
 800a0a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a0a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a0aa:	ea55 050a 	orrs.w	r5, r5, sl
 800a0ae:	d1dc      	bne.n	800a06a <__ieee754_pow+0x32>
 800a0b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0b4:	18db      	adds	r3, r3, r3
 800a0b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a0ba:	4152      	adcs	r2, r2
 800a0bc:	429d      	cmp	r5, r3
 800a0be:	e7d0      	b.n	800a062 <__ieee754_pow+0x2a>
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	da3b      	bge.n	800a13c <__ieee754_pow+0x104>
 800a0c4:	4b72      	ldr	r3, [pc, #456]	; (800a290 <__ieee754_pow+0x258>)
 800a0c6:	4598      	cmp	r8, r3
 800a0c8:	dc51      	bgt.n	800a16e <__ieee754_pow+0x136>
 800a0ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a0ce:	4598      	cmp	r8, r3
 800a0d0:	f340 84ac 	ble.w	800aa2c <__ieee754_pow+0x9f4>
 800a0d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a0d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0dc:	2b14      	cmp	r3, #20
 800a0de:	dd0f      	ble.n	800a100 <__ieee754_pow+0xc8>
 800a0e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a0e4:	fa22 f103 	lsr.w	r1, r2, r3
 800a0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	f040 849d 	bne.w	800aa2c <__ieee754_pow+0x9f4>
 800a0f2:	f001 0101 	and.w	r1, r1, #1
 800a0f6:	f1c1 0302 	rsb	r3, r1, #2
 800a0fa:	9304      	str	r3, [sp, #16]
 800a0fc:	b182      	cbz	r2, 800a120 <__ieee754_pow+0xe8>
 800a0fe:	e05f      	b.n	800a1c0 <__ieee754_pow+0x188>
 800a100:	2a00      	cmp	r2, #0
 800a102:	d15b      	bne.n	800a1bc <__ieee754_pow+0x184>
 800a104:	f1c3 0314 	rsb	r3, r3, #20
 800a108:	fa48 f103 	asr.w	r1, r8, r3
 800a10c:	fa01 f303 	lsl.w	r3, r1, r3
 800a110:	4543      	cmp	r3, r8
 800a112:	f040 8488 	bne.w	800aa26 <__ieee754_pow+0x9ee>
 800a116:	f001 0101 	and.w	r1, r1, #1
 800a11a:	f1c1 0302 	rsb	r3, r1, #2
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	4b5c      	ldr	r3, [pc, #368]	; (800a294 <__ieee754_pow+0x25c>)
 800a122:	4598      	cmp	r8, r3
 800a124:	d132      	bne.n	800a18c <__ieee754_pow+0x154>
 800a126:	f1b9 0f00 	cmp.w	r9, #0
 800a12a:	f280 8478 	bge.w	800aa1e <__ieee754_pow+0x9e6>
 800a12e:	4959      	ldr	r1, [pc, #356]	; (800a294 <__ieee754_pow+0x25c>)
 800a130:	4632      	mov	r2, r6
 800a132:	463b      	mov	r3, r7
 800a134:	2000      	movs	r0, #0
 800a136:	f7f6 fb89 	bl	800084c <__aeabi_ddiv>
 800a13a:	e79c      	b.n	800a076 <__ieee754_pow+0x3e>
 800a13c:	2300      	movs	r3, #0
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	2a00      	cmp	r2, #0
 800a142:	d13d      	bne.n	800a1c0 <__ieee754_pow+0x188>
 800a144:	4b51      	ldr	r3, [pc, #324]	; (800a28c <__ieee754_pow+0x254>)
 800a146:	4598      	cmp	r8, r3
 800a148:	d1ea      	bne.n	800a120 <__ieee754_pow+0xe8>
 800a14a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a14e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a152:	ea53 030a 	orrs.w	r3, r3, sl
 800a156:	f000 845a 	beq.w	800aa0e <__ieee754_pow+0x9d6>
 800a15a:	4b4f      	ldr	r3, [pc, #316]	; (800a298 <__ieee754_pow+0x260>)
 800a15c:	429c      	cmp	r4, r3
 800a15e:	dd08      	ble.n	800a172 <__ieee754_pow+0x13a>
 800a160:	f1b9 0f00 	cmp.w	r9, #0
 800a164:	f2c0 8457 	blt.w	800aa16 <__ieee754_pow+0x9de>
 800a168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a16c:	e783      	b.n	800a076 <__ieee754_pow+0x3e>
 800a16e:	2302      	movs	r3, #2
 800a170:	e7e5      	b.n	800a13e <__ieee754_pow+0x106>
 800a172:	f1b9 0f00 	cmp.w	r9, #0
 800a176:	f04f 0000 	mov.w	r0, #0
 800a17a:	f04f 0100 	mov.w	r1, #0
 800a17e:	f6bf af7a 	bge.w	800a076 <__ieee754_pow+0x3e>
 800a182:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a186:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a18a:	e774      	b.n	800a076 <__ieee754_pow+0x3e>
 800a18c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a190:	d106      	bne.n	800a1a0 <__ieee754_pow+0x168>
 800a192:	4632      	mov	r2, r6
 800a194:	463b      	mov	r3, r7
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 fa2d 	bl	80005f8 <__aeabi_dmul>
 800a19e:	e76a      	b.n	800a076 <__ieee754_pow+0x3e>
 800a1a0:	4b3e      	ldr	r3, [pc, #248]	; (800a29c <__ieee754_pow+0x264>)
 800a1a2:	4599      	cmp	r9, r3
 800a1a4:	d10c      	bne.n	800a1c0 <__ieee754_pow+0x188>
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	db0a      	blt.n	800a1c0 <__ieee754_pow+0x188>
 800a1aa:	ec47 6b10 	vmov	d0, r6, r7
 800a1ae:	b009      	add	sp, #36	; 0x24
 800a1b0:	ecbd 8b06 	vpop	{d8-d10}
 800a1b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	f000 be7a 	b.w	800aeb0 <__ieee754_sqrt>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	ec47 6b10 	vmov	d0, r6, r7
 800a1c4:	f001 fdd0 	bl	800bd68 <fabs>
 800a1c8:	ec51 0b10 	vmov	r0, r1, d0
 800a1cc:	f1ba 0f00 	cmp.w	sl, #0
 800a1d0:	d129      	bne.n	800a226 <__ieee754_pow+0x1ee>
 800a1d2:	b124      	cbz	r4, 800a1de <__ieee754_pow+0x1a6>
 800a1d4:	4b2f      	ldr	r3, [pc, #188]	; (800a294 <__ieee754_pow+0x25c>)
 800a1d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d123      	bne.n	800a226 <__ieee754_pow+0x1ee>
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	da05      	bge.n	800a1f0 <__ieee754_pow+0x1b8>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	492a      	ldr	r1, [pc, #168]	; (800a294 <__ieee754_pow+0x25c>)
 800a1ec:	f7f6 fb2e 	bl	800084c <__aeabi_ddiv>
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	f6bf af40 	bge.w	800a076 <__ieee754_pow+0x3e>
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a1fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a200:	4323      	orrs	r3, r4
 800a202:	d108      	bne.n	800a216 <__ieee754_pow+0x1de>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4610      	mov	r0, r2
 800a20a:	4619      	mov	r1, r3
 800a20c:	f7f6 f83c 	bl	8000288 <__aeabi_dsub>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	e78f      	b.n	800a136 <__ieee754_pow+0xfe>
 800a216:	9b04      	ldr	r3, [sp, #16]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	f47f af2c 	bne.w	800a076 <__ieee754_pow+0x3e>
 800a21e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a222:	4619      	mov	r1, r3
 800a224:	e727      	b.n	800a076 <__ieee754_pow+0x3e>
 800a226:	0feb      	lsrs	r3, r5, #31
 800a228:	3b01      	subs	r3, #1
 800a22a:	9306      	str	r3, [sp, #24]
 800a22c:	9a06      	ldr	r2, [sp, #24]
 800a22e:	9b04      	ldr	r3, [sp, #16]
 800a230:	4313      	orrs	r3, r2
 800a232:	d102      	bne.n	800a23a <__ieee754_pow+0x202>
 800a234:	4632      	mov	r2, r6
 800a236:	463b      	mov	r3, r7
 800a238:	e7e6      	b.n	800a208 <__ieee754_pow+0x1d0>
 800a23a:	4b19      	ldr	r3, [pc, #100]	; (800a2a0 <__ieee754_pow+0x268>)
 800a23c:	4598      	cmp	r8, r3
 800a23e:	f340 80fb 	ble.w	800a438 <__ieee754_pow+0x400>
 800a242:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a246:	4598      	cmp	r8, r3
 800a248:	4b13      	ldr	r3, [pc, #76]	; (800a298 <__ieee754_pow+0x260>)
 800a24a:	dd0c      	ble.n	800a266 <__ieee754_pow+0x22e>
 800a24c:	429c      	cmp	r4, r3
 800a24e:	dc0f      	bgt.n	800a270 <__ieee754_pow+0x238>
 800a250:	f1b9 0f00 	cmp.w	r9, #0
 800a254:	da0f      	bge.n	800a276 <__ieee754_pow+0x23e>
 800a256:	2000      	movs	r0, #0
 800a258:	b009      	add	sp, #36	; 0x24
 800a25a:	ecbd 8b06 	vpop	{d8-d10}
 800a25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a262:	f001 bbd6 	b.w	800ba12 <__math_oflow>
 800a266:	429c      	cmp	r4, r3
 800a268:	dbf2      	blt.n	800a250 <__ieee754_pow+0x218>
 800a26a:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <__ieee754_pow+0x25c>)
 800a26c:	429c      	cmp	r4, r3
 800a26e:	dd19      	ble.n	800a2a4 <__ieee754_pow+0x26c>
 800a270:	f1b9 0f00 	cmp.w	r9, #0
 800a274:	dcef      	bgt.n	800a256 <__ieee754_pow+0x21e>
 800a276:	2000      	movs	r0, #0
 800a278:	b009      	add	sp, #36	; 0x24
 800a27a:	ecbd 8b06 	vpop	{d8-d10}
 800a27e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a282:	f001 bbbd 	b.w	800ba00 <__math_uflow>
 800a286:	bf00      	nop
 800a288:	fff00000 	.word	0xfff00000
 800a28c:	7ff00000 	.word	0x7ff00000
 800a290:	433fffff 	.word	0x433fffff
 800a294:	3ff00000 	.word	0x3ff00000
 800a298:	3fefffff 	.word	0x3fefffff
 800a29c:	3fe00000 	.word	0x3fe00000
 800a2a0:	41e00000 	.word	0x41e00000
 800a2a4:	4b60      	ldr	r3, [pc, #384]	; (800a428 <__ieee754_pow+0x3f0>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f7f5 ffee 	bl	8000288 <__aeabi_dsub>
 800a2ac:	a354      	add	r3, pc, #336	; (adr r3, 800a400 <__ieee754_pow+0x3c8>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	f7f6 f99f 	bl	80005f8 <__aeabi_dmul>
 800a2ba:	a353      	add	r3, pc, #332	; (adr r3, 800a408 <__ieee754_pow+0x3d0>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	4b57      	ldr	r3, [pc, #348]	; (800a42c <__ieee754_pow+0x3f4>)
 800a2ce:	4682      	mov	sl, r0
 800a2d0:	468b      	mov	fp, r1
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f6 f98e 	bl	80005f8 <__aeabi_dmul>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	a14b      	add	r1, pc, #300	; (adr r1, 800a410 <__ieee754_pow+0x3d8>)
 800a2e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2e6:	f7f5 ffcf 	bl	8000288 <__aeabi_dsub>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	f7f6 f983 	bl	80005f8 <__aeabi_dmul>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	494d      	ldr	r1, [pc, #308]	; (800a430 <__ieee754_pow+0x3f8>)
 800a2fa:	f7f5 ffc5 	bl	8000288 <__aeabi_dsub>
 800a2fe:	4622      	mov	r2, r4
 800a300:	4680      	mov	r8, r0
 800a302:	4689      	mov	r9, r1
 800a304:	462b      	mov	r3, r5
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7f6 f975 	bl	80005f8 <__aeabi_dmul>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f6 f96f 	bl	80005f8 <__aeabi_dmul>
 800a31a:	a33f      	add	r3, pc, #252	; (adr r3, 800a418 <__ieee754_pow+0x3e0>)
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f7f6 f96a 	bl	80005f8 <__aeabi_dmul>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4650      	mov	r0, sl
 800a32a:	4659      	mov	r1, fp
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4680      	mov	r8, r0
 800a336:	4689      	mov	r9, r1
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f5 ffa6 	bl	800028c <__adddf3>
 800a340:	2000      	movs	r0, #0
 800a342:	4632      	mov	r2, r6
 800a344:	463b      	mov	r3, r7
 800a346:	4604      	mov	r4, r0
 800a348:	460d      	mov	r5, r1
 800a34a:	f7f5 ff9d 	bl	8000288 <__aeabi_dsub>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f5 ff97 	bl	8000288 <__aeabi_dsub>
 800a35a:	9b04      	ldr	r3, [sp, #16]
 800a35c:	9a06      	ldr	r2, [sp, #24]
 800a35e:	3b01      	subs	r3, #1
 800a360:	4313      	orrs	r3, r2
 800a362:	4682      	mov	sl, r0
 800a364:	468b      	mov	fp, r1
 800a366:	f040 81e7 	bne.w	800a738 <__ieee754_pow+0x700>
 800a36a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a420 <__ieee754_pow+0x3e8>
 800a36e:	eeb0 8a47 	vmov.f32	s16, s14
 800a372:	eef0 8a67 	vmov.f32	s17, s15
 800a376:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a37a:	2600      	movs	r6, #0
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a384:	f7f5 ff80 	bl	8000288 <__aeabi_dsub>
 800a388:	4622      	mov	r2, r4
 800a38a:	462b      	mov	r3, r5
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a394:	4680      	mov	r8, r0
 800a396:	4689      	mov	r9, r1
 800a398:	4650      	mov	r0, sl
 800a39a:	4659      	mov	r1, fp
 800a39c:	f7f6 f92c 	bl	80005f8 <__aeabi_dmul>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4640      	mov	r0, r8
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	f7f5 ff70 	bl	800028c <__adddf3>
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	4689      	mov	r9, r1
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f6 f91e 	bl	80005f8 <__aeabi_dmul>
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	f7f5 ff60 	bl	800028c <__adddf3>
 800a3cc:	4b19      	ldr	r3, [pc, #100]	; (800a434 <__ieee754_pow+0x3fc>)
 800a3ce:	4299      	cmp	r1, r3
 800a3d0:	ec45 4b19 	vmov	d9, r4, r5
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	468b      	mov	fp, r1
 800a3da:	f340 82f1 	ble.w	800a9c0 <__ieee754_pow+0x988>
 800a3de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a3e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a3e6:	4303      	orrs	r3, r0
 800a3e8:	f000 81e4 	beq.w	800a7b4 <__ieee754_pow+0x77c>
 800a3ec:	ec51 0b18 	vmov	r0, r1, d8
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f7f6 fb72 	bl	8000adc <__aeabi_dcmplt>
 800a3f8:	3800      	subs	r0, #0
 800a3fa:	bf18      	it	ne
 800a3fc:	2001      	movne	r0, #1
 800a3fe:	e72b      	b.n	800a258 <__ieee754_pow+0x220>
 800a400:	60000000 	.word	0x60000000
 800a404:	3ff71547 	.word	0x3ff71547
 800a408:	f85ddf44 	.word	0xf85ddf44
 800a40c:	3e54ae0b 	.word	0x3e54ae0b
 800a410:	55555555 	.word	0x55555555
 800a414:	3fd55555 	.word	0x3fd55555
 800a418:	652b82fe 	.word	0x652b82fe
 800a41c:	3ff71547 	.word	0x3ff71547
 800a420:	00000000 	.word	0x00000000
 800a424:	bff00000 	.word	0xbff00000
 800a428:	3ff00000 	.word	0x3ff00000
 800a42c:	3fd00000 	.word	0x3fd00000
 800a430:	3fe00000 	.word	0x3fe00000
 800a434:	408fffff 	.word	0x408fffff
 800a438:	4bd5      	ldr	r3, [pc, #852]	; (800a790 <__ieee754_pow+0x758>)
 800a43a:	402b      	ands	r3, r5
 800a43c:	2200      	movs	r2, #0
 800a43e:	b92b      	cbnz	r3, 800a44c <__ieee754_pow+0x414>
 800a440:	4bd4      	ldr	r3, [pc, #848]	; (800a794 <__ieee754_pow+0x75c>)
 800a442:	f7f6 f8d9 	bl	80005f8 <__aeabi_dmul>
 800a446:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a44a:	460c      	mov	r4, r1
 800a44c:	1523      	asrs	r3, r4, #20
 800a44e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a452:	4413      	add	r3, r2
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	4bd0      	ldr	r3, [pc, #832]	; (800a798 <__ieee754_pow+0x760>)
 800a458:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a45c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a460:	429c      	cmp	r4, r3
 800a462:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a466:	dd08      	ble.n	800a47a <__ieee754_pow+0x442>
 800a468:	4bcc      	ldr	r3, [pc, #816]	; (800a79c <__ieee754_pow+0x764>)
 800a46a:	429c      	cmp	r4, r3
 800a46c:	f340 8162 	ble.w	800a734 <__ieee754_pow+0x6fc>
 800a470:	9b05      	ldr	r3, [sp, #20]
 800a472:	3301      	adds	r3, #1
 800a474:	9305      	str	r3, [sp, #20]
 800a476:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a47a:	2400      	movs	r4, #0
 800a47c:	00e3      	lsls	r3, r4, #3
 800a47e:	9307      	str	r3, [sp, #28]
 800a480:	4bc7      	ldr	r3, [pc, #796]	; (800a7a0 <__ieee754_pow+0x768>)
 800a482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a486:	ed93 7b00 	vldr	d7, [r3]
 800a48a:	4629      	mov	r1, r5
 800a48c:	ec53 2b17 	vmov	r2, r3, d7
 800a490:	eeb0 9a47 	vmov.f32	s18, s14
 800a494:	eef0 9a67 	vmov.f32	s19, s15
 800a498:	4682      	mov	sl, r0
 800a49a:	f7f5 fef5 	bl	8000288 <__aeabi_dsub>
 800a49e:	4652      	mov	r2, sl
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	462b      	mov	r3, r5
 800a4a6:	ec51 0b19 	vmov	r0, r1, d9
 800a4aa:	f7f5 feef 	bl	800028c <__adddf3>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	49bb      	ldr	r1, [pc, #748]	; (800a7a4 <__ieee754_pow+0x76c>)
 800a4b6:	f7f6 f9c9 	bl	800084c <__aeabi_ddiv>
 800a4ba:	ec41 0b1a 	vmov	d10, r0, r1
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	f7f6 f897 	bl	80005f8 <__aeabi_dmul>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4d0:	9302      	str	r3, [sp, #8]
 800a4d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a4d6:	46ab      	mov	fp, r5
 800a4d8:	106d      	asrs	r5, r5, #1
 800a4da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a4de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a4e2:	ec41 0b18 	vmov	d8, r0, r1
 800a4e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	461d      	mov	r5, r3
 800a4f4:	f7f6 f880 	bl	80005f8 <__aeabi_dmul>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	4639      	mov	r1, r7
 800a500:	f7f5 fec2 	bl	8000288 <__aeabi_dsub>
 800a504:	ec53 2b19 	vmov	r2, r3, d9
 800a508:	4606      	mov	r6, r0
 800a50a:	460f      	mov	r7, r1
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	f7f5 feba 	bl	8000288 <__aeabi_dsub>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4650      	mov	r0, sl
 800a51a:	4659      	mov	r1, fp
 800a51c:	f7f5 feb4 	bl	8000288 <__aeabi_dsub>
 800a520:	4642      	mov	r2, r8
 800a522:	464b      	mov	r3, r9
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f5 feaa 	bl	8000288 <__aeabi_dsub>
 800a534:	ec53 2b1a 	vmov	r2, r3, d10
 800a538:	f7f6 f85e 	bl	80005f8 <__aeabi_dmul>
 800a53c:	ec53 2b18 	vmov	r2, r3, d8
 800a540:	ec41 0b19 	vmov	d9, r0, r1
 800a544:	ec51 0b18 	vmov	r0, r1, d8
 800a548:	f7f6 f856 	bl	80005f8 <__aeabi_dmul>
 800a54c:	a37c      	add	r3, pc, #496	; (adr r3, 800a740 <__ieee754_pow+0x708>)
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	4604      	mov	r4, r0
 800a554:	460d      	mov	r5, r1
 800a556:	f7f6 f84f 	bl	80005f8 <__aeabi_dmul>
 800a55a:	a37b      	add	r3, pc, #492	; (adr r3, 800a748 <__ieee754_pow+0x710>)
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	f7f5 fe94 	bl	800028c <__adddf3>
 800a564:	4622      	mov	r2, r4
 800a566:	462b      	mov	r3, r5
 800a568:	f7f6 f846 	bl	80005f8 <__aeabi_dmul>
 800a56c:	a378      	add	r3, pc, #480	; (adr r3, 800a750 <__ieee754_pow+0x718>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f5 fe8b 	bl	800028c <__adddf3>
 800a576:	4622      	mov	r2, r4
 800a578:	462b      	mov	r3, r5
 800a57a:	f7f6 f83d 	bl	80005f8 <__aeabi_dmul>
 800a57e:	a376      	add	r3, pc, #472	; (adr r3, 800a758 <__ieee754_pow+0x720>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f7f5 fe82 	bl	800028c <__adddf3>
 800a588:	4622      	mov	r2, r4
 800a58a:	462b      	mov	r3, r5
 800a58c:	f7f6 f834 	bl	80005f8 <__aeabi_dmul>
 800a590:	a373      	add	r3, pc, #460	; (adr r3, 800a760 <__ieee754_pow+0x728>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f5 fe79 	bl	800028c <__adddf3>
 800a59a:	4622      	mov	r2, r4
 800a59c:	462b      	mov	r3, r5
 800a59e:	f7f6 f82b 	bl	80005f8 <__aeabi_dmul>
 800a5a2:	a371      	add	r3, pc, #452	; (adr r3, 800a768 <__ieee754_pow+0x730>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f5 fe70 	bl	800028c <__adddf3>
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	462b      	mov	r3, r5
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f7f6 f81e 	bl	80005f8 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f6 f818 	bl	80005f8 <__aeabi_dmul>
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	464b      	mov	r3, r9
 800a5d0:	ec51 0b18 	vmov	r0, r1, d8
 800a5d4:	f7f5 fe5a 	bl	800028c <__adddf3>
 800a5d8:	ec53 2b19 	vmov	r2, r3, d9
 800a5dc:	f7f6 f80c 	bl	80005f8 <__aeabi_dmul>
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	f7f5 fe52 	bl	800028c <__adddf3>
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	4682      	mov	sl, r0
 800a5ec:	468b      	mov	fp, r1
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	f7f6 f800 	bl	80005f8 <__aeabi_dmul>
 800a5f8:	4b6b      	ldr	r3, [pc, #428]	; (800a7a8 <__ieee754_pow+0x770>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	460f      	mov	r7, r1
 800a600:	f7f5 fe44 	bl	800028c <__adddf3>
 800a604:	4652      	mov	r2, sl
 800a606:	465b      	mov	r3, fp
 800a608:	f7f5 fe40 	bl	800028c <__adddf3>
 800a60c:	2000      	movs	r0, #0
 800a60e:	4604      	mov	r4, r0
 800a610:	460d      	mov	r5, r1
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4640      	mov	r0, r8
 800a618:	4649      	mov	r1, r9
 800a61a:	f7f5 ffed 	bl	80005f8 <__aeabi_dmul>
 800a61e:	4b62      	ldr	r3, [pc, #392]	; (800a7a8 <__ieee754_pow+0x770>)
 800a620:	4680      	mov	r8, r0
 800a622:	4689      	mov	r9, r1
 800a624:	2200      	movs	r2, #0
 800a626:	4620      	mov	r0, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f7f5 fe2d 	bl	8000288 <__aeabi_dsub>
 800a62e:	4632      	mov	r2, r6
 800a630:	463b      	mov	r3, r7
 800a632:	f7f5 fe29 	bl	8000288 <__aeabi_dsub>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4650      	mov	r0, sl
 800a63c:	4659      	mov	r1, fp
 800a63e:	f7f5 fe23 	bl	8000288 <__aeabi_dsub>
 800a642:	ec53 2b18 	vmov	r2, r3, d8
 800a646:	f7f5 ffd7 	bl	80005f8 <__aeabi_dmul>
 800a64a:	4622      	mov	r2, r4
 800a64c:	4606      	mov	r6, r0
 800a64e:	460f      	mov	r7, r1
 800a650:	462b      	mov	r3, r5
 800a652:	ec51 0b19 	vmov	r0, r1, d9
 800a656:	f7f5 ffcf 	bl	80005f8 <__aeabi_dmul>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	f7f5 fe13 	bl	800028c <__adddf3>
 800a666:	4606      	mov	r6, r0
 800a668:	460f      	mov	r7, r1
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4640      	mov	r0, r8
 800a670:	4649      	mov	r1, r9
 800a672:	f7f5 fe0b 	bl	800028c <__adddf3>
 800a676:	a33e      	add	r3, pc, #248	; (adr r3, 800a770 <__ieee754_pow+0x738>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	2000      	movs	r0, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	460d      	mov	r5, r1
 800a682:	f7f5 ffb9 	bl	80005f8 <__aeabi_dmul>
 800a686:	4642      	mov	r2, r8
 800a688:	ec41 0b18 	vmov	d8, r0, r1
 800a68c:	464b      	mov	r3, r9
 800a68e:	4620      	mov	r0, r4
 800a690:	4629      	mov	r1, r5
 800a692:	f7f5 fdf9 	bl	8000288 <__aeabi_dsub>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4630      	mov	r0, r6
 800a69c:	4639      	mov	r1, r7
 800a69e:	f7f5 fdf3 	bl	8000288 <__aeabi_dsub>
 800a6a2:	a335      	add	r3, pc, #212	; (adr r3, 800a778 <__ieee754_pow+0x740>)
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	f7f5 ffa6 	bl	80005f8 <__aeabi_dmul>
 800a6ac:	a334      	add	r3, pc, #208	; (adr r3, 800a780 <__ieee754_pow+0x748>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7f5 ff9d 	bl	80005f8 <__aeabi_dmul>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7f5 fde1 	bl	800028c <__adddf3>
 800a6ca:	9a07      	ldr	r2, [sp, #28]
 800a6cc:	4b37      	ldr	r3, [pc, #220]	; (800a7ac <__ieee754_pow+0x774>)
 800a6ce:	4413      	add	r3, r2
 800a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d4:	f7f5 fdda 	bl	800028c <__adddf3>
 800a6d8:	4682      	mov	sl, r0
 800a6da:	9805      	ldr	r0, [sp, #20]
 800a6dc:	468b      	mov	fp, r1
 800a6de:	f7f5 ff21 	bl	8000524 <__aeabi_i2d>
 800a6e2:	9a07      	ldr	r2, [sp, #28]
 800a6e4:	4b32      	ldr	r3, [pc, #200]	; (800a7b0 <__ieee754_pow+0x778>)
 800a6e6:	4413      	add	r3, r2
 800a6e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	460f      	mov	r7, r1
 800a6f0:	4652      	mov	r2, sl
 800a6f2:	465b      	mov	r3, fp
 800a6f4:	ec51 0b18 	vmov	r0, r1, d8
 800a6f8:	f7f5 fdc8 	bl	800028c <__adddf3>
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	464b      	mov	r3, r9
 800a700:	f7f5 fdc4 	bl	800028c <__adddf3>
 800a704:	4632      	mov	r2, r6
 800a706:	463b      	mov	r3, r7
 800a708:	f7f5 fdc0 	bl	800028c <__adddf3>
 800a70c:	2000      	movs	r0, #0
 800a70e:	4632      	mov	r2, r6
 800a710:	463b      	mov	r3, r7
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	f7f5 fdb7 	bl	8000288 <__aeabi_dsub>
 800a71a:	4642      	mov	r2, r8
 800a71c:	464b      	mov	r3, r9
 800a71e:	f7f5 fdb3 	bl	8000288 <__aeabi_dsub>
 800a722:	ec53 2b18 	vmov	r2, r3, d8
 800a726:	f7f5 fdaf 	bl	8000288 <__aeabi_dsub>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4650      	mov	r0, sl
 800a730:	4659      	mov	r1, fp
 800a732:	e610      	b.n	800a356 <__ieee754_pow+0x31e>
 800a734:	2401      	movs	r4, #1
 800a736:	e6a1      	b.n	800a47c <__ieee754_pow+0x444>
 800a738:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a788 <__ieee754_pow+0x750>
 800a73c:	e617      	b.n	800a36e <__ieee754_pow+0x336>
 800a73e:	bf00      	nop
 800a740:	4a454eef 	.word	0x4a454eef
 800a744:	3fca7e28 	.word	0x3fca7e28
 800a748:	93c9db65 	.word	0x93c9db65
 800a74c:	3fcd864a 	.word	0x3fcd864a
 800a750:	a91d4101 	.word	0xa91d4101
 800a754:	3fd17460 	.word	0x3fd17460
 800a758:	518f264d 	.word	0x518f264d
 800a75c:	3fd55555 	.word	0x3fd55555
 800a760:	db6fabff 	.word	0xdb6fabff
 800a764:	3fdb6db6 	.word	0x3fdb6db6
 800a768:	33333303 	.word	0x33333303
 800a76c:	3fe33333 	.word	0x3fe33333
 800a770:	e0000000 	.word	0xe0000000
 800a774:	3feec709 	.word	0x3feec709
 800a778:	dc3a03fd 	.word	0xdc3a03fd
 800a77c:	3feec709 	.word	0x3feec709
 800a780:	145b01f5 	.word	0x145b01f5
 800a784:	be3e2fe0 	.word	0xbe3e2fe0
 800a788:	00000000 	.word	0x00000000
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	7ff00000 	.word	0x7ff00000
 800a794:	43400000 	.word	0x43400000
 800a798:	0003988e 	.word	0x0003988e
 800a79c:	000bb679 	.word	0x000bb679
 800a7a0:	0800c068 	.word	0x0800c068
 800a7a4:	3ff00000 	.word	0x3ff00000
 800a7a8:	40080000 	.word	0x40080000
 800a7ac:	0800c088 	.word	0x0800c088
 800a7b0:	0800c078 	.word	0x0800c078
 800a7b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800aa8c <__ieee754_pow+0xa54>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	4649      	mov	r1, r9
 800a7be:	f7f5 fd65 	bl	800028c <__adddf3>
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	ec41 0b1a 	vmov	d10, r0, r1
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	f7f5 fd5b 	bl	8000288 <__aeabi_dsub>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	ec51 0b1a 	vmov	r0, r1, d10
 800a7da:	f7f6 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f47f ae04 	bne.w	800a3ec <__ieee754_pow+0x3b4>
 800a7e4:	4aa4      	ldr	r2, [pc, #656]	; (800aa78 <__ieee754_pow+0xa40>)
 800a7e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	f340 8108 	ble.w	800aa00 <__ieee754_pow+0x9c8>
 800a7f0:	151b      	asrs	r3, r3, #20
 800a7f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a7f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a7fa:	fa4a f303 	asr.w	r3, sl, r3
 800a7fe:	445b      	add	r3, fp
 800a800:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a804:	4e9d      	ldr	r6, [pc, #628]	; (800aa7c <__ieee754_pow+0xa44>)
 800a806:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a80a:	4116      	asrs	r6, r2
 800a80c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a810:	2000      	movs	r0, #0
 800a812:	ea23 0106 	bic.w	r1, r3, r6
 800a816:	f1c2 0214 	rsb	r2, r2, #20
 800a81a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a81e:	fa4a fa02 	asr.w	sl, sl, r2
 800a822:	f1bb 0f00 	cmp.w	fp, #0
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4620      	mov	r0, r4
 800a82c:	4629      	mov	r1, r5
 800a82e:	bfb8      	it	lt
 800a830:	f1ca 0a00 	rsblt	sl, sl, #0
 800a834:	f7f5 fd28 	bl	8000288 <__aeabi_dsub>
 800a838:	ec41 0b19 	vmov	d9, r0, r1
 800a83c:	4642      	mov	r2, r8
 800a83e:	464b      	mov	r3, r9
 800a840:	ec51 0b19 	vmov	r0, r1, d9
 800a844:	f7f5 fd22 	bl	800028c <__adddf3>
 800a848:	a37b      	add	r3, pc, #492	; (adr r3, 800aa38 <__ieee754_pow+0xa00>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	2000      	movs	r0, #0
 800a850:	4604      	mov	r4, r0
 800a852:	460d      	mov	r5, r1
 800a854:	f7f5 fed0 	bl	80005f8 <__aeabi_dmul>
 800a858:	ec53 2b19 	vmov	r2, r3, d9
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	4620      	mov	r0, r4
 800a862:	4629      	mov	r1, r5
 800a864:	f7f5 fd10 	bl	8000288 <__aeabi_dsub>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4640      	mov	r0, r8
 800a86e:	4649      	mov	r1, r9
 800a870:	f7f5 fd0a 	bl	8000288 <__aeabi_dsub>
 800a874:	a372      	add	r3, pc, #456	; (adr r3, 800aa40 <__ieee754_pow+0xa08>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f7f5 febd 	bl	80005f8 <__aeabi_dmul>
 800a87e:	a372      	add	r3, pc, #456	; (adr r3, 800aa48 <__ieee754_pow+0xa10>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	4620      	mov	r0, r4
 800a88a:	4629      	mov	r1, r5
 800a88c:	f7f5 feb4 	bl	80005f8 <__aeabi_dmul>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4640      	mov	r0, r8
 800a896:	4649      	mov	r1, r9
 800a898:	f7f5 fcf8 	bl	800028c <__adddf3>
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7f5 fcf0 	bl	800028c <__adddf3>
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	4689      	mov	r9, r1
 800a8b4:	f7f5 fce8 	bl	8000288 <__aeabi_dsub>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fce2 	bl	8000288 <__aeabi_dsub>
 800a8c4:	4642      	mov	r2, r8
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460f      	mov	r7, r1
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	f7f5 fe92 	bl	80005f8 <__aeabi_dmul>
 800a8d4:	a35e      	add	r3, pc, #376	; (adr r3, 800aa50 <__ieee754_pow+0xa18>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	4604      	mov	r4, r0
 800a8dc:	460d      	mov	r5, r1
 800a8de:	f7f5 fe8b 	bl	80005f8 <__aeabi_dmul>
 800a8e2:	a35d      	add	r3, pc, #372	; (adr r3, 800aa58 <__ieee754_pow+0xa20>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	f7f5 fcce 	bl	8000288 <__aeabi_dsub>
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	f7f5 fe82 	bl	80005f8 <__aeabi_dmul>
 800a8f4:	a35a      	add	r3, pc, #360	; (adr r3, 800aa60 <__ieee754_pow+0xa28>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fcc7 	bl	800028c <__adddf3>
 800a8fe:	4622      	mov	r2, r4
 800a900:	462b      	mov	r3, r5
 800a902:	f7f5 fe79 	bl	80005f8 <__aeabi_dmul>
 800a906:	a358      	add	r3, pc, #352	; (adr r3, 800aa68 <__ieee754_pow+0xa30>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f7f5 fcbc 	bl	8000288 <__aeabi_dsub>
 800a910:	4622      	mov	r2, r4
 800a912:	462b      	mov	r3, r5
 800a914:	f7f5 fe70 	bl	80005f8 <__aeabi_dmul>
 800a918:	a355      	add	r3, pc, #340	; (adr r3, 800aa70 <__ieee754_pow+0xa38>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fcb5 	bl	800028c <__adddf3>
 800a922:	4622      	mov	r2, r4
 800a924:	462b      	mov	r3, r5
 800a926:	f7f5 fe67 	bl	80005f8 <__aeabi_dmul>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4640      	mov	r0, r8
 800a930:	4649      	mov	r1, r9
 800a932:	f7f5 fca9 	bl	8000288 <__aeabi_dsub>
 800a936:	4604      	mov	r4, r0
 800a938:	460d      	mov	r5, r1
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4640      	mov	r0, r8
 800a940:	4649      	mov	r1, r9
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	2200      	movs	r2, #0
 800a948:	ec41 0b19 	vmov	d9, r0, r1
 800a94c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a950:	4620      	mov	r0, r4
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fc98 	bl	8000288 <__aeabi_dsub>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	ec51 0b19 	vmov	r0, r1, d9
 800a960:	f7f5 ff74 	bl	800084c <__aeabi_ddiv>
 800a964:	4632      	mov	r2, r6
 800a966:	4604      	mov	r4, r0
 800a968:	460d      	mov	r5, r1
 800a96a:	463b      	mov	r3, r7
 800a96c:	4640      	mov	r0, r8
 800a96e:	4649      	mov	r1, r9
 800a970:	f7f5 fe42 	bl	80005f8 <__aeabi_dmul>
 800a974:	4632      	mov	r2, r6
 800a976:	463b      	mov	r3, r7
 800a978:	f7f5 fc88 	bl	800028c <__adddf3>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 fc80 	bl	8000288 <__aeabi_dsub>
 800a988:	4642      	mov	r2, r8
 800a98a:	464b      	mov	r3, r9
 800a98c:	f7f5 fc7c 	bl	8000288 <__aeabi_dsub>
 800a990:	460b      	mov	r3, r1
 800a992:	4602      	mov	r2, r0
 800a994:	493a      	ldr	r1, [pc, #232]	; (800aa80 <__ieee754_pow+0xa48>)
 800a996:	2000      	movs	r0, #0
 800a998:	f7f5 fc76 	bl	8000288 <__aeabi_dsub>
 800a99c:	ec41 0b10 	vmov	d0, r0, r1
 800a9a0:	ee10 3a90 	vmov	r3, s1
 800a9a4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a9a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9ac:	da2b      	bge.n	800aa06 <__ieee754_pow+0x9ce>
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	f001 fa76 	bl	800bea0 <scalbn>
 800a9b4:	ec51 0b10 	vmov	r0, r1, d0
 800a9b8:	ec53 2b18 	vmov	r2, r3, d8
 800a9bc:	f7ff bbed 	b.w	800a19a <__ieee754_pow+0x162>
 800a9c0:	4b30      	ldr	r3, [pc, #192]	; (800aa84 <__ieee754_pow+0xa4c>)
 800a9c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a9c6:	429e      	cmp	r6, r3
 800a9c8:	f77f af0c 	ble.w	800a7e4 <__ieee754_pow+0x7ac>
 800a9cc:	4b2e      	ldr	r3, [pc, #184]	; (800aa88 <__ieee754_pow+0xa50>)
 800a9ce:	440b      	add	r3, r1
 800a9d0:	4303      	orrs	r3, r0
 800a9d2:	d009      	beq.n	800a9e8 <__ieee754_pow+0x9b0>
 800a9d4:	ec51 0b18 	vmov	r0, r1, d8
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f7f6 f87e 	bl	8000adc <__aeabi_dcmplt>
 800a9e0:	3800      	subs	r0, #0
 800a9e2:	bf18      	it	ne
 800a9e4:	2001      	movne	r0, #1
 800a9e6:	e447      	b.n	800a278 <__ieee754_pow+0x240>
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	f7f5 fc4c 	bl	8000288 <__aeabi_dsub>
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	f7f6 f886 	bl	8000b04 <__aeabi_dcmpge>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	f43f aef3 	beq.w	800a7e4 <__ieee754_pow+0x7ac>
 800a9fe:	e7e9      	b.n	800a9d4 <__ieee754_pow+0x99c>
 800aa00:	f04f 0a00 	mov.w	sl, #0
 800aa04:	e71a      	b.n	800a83c <__ieee754_pow+0x804>
 800aa06:	ec51 0b10 	vmov	r0, r1, d0
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	e7d4      	b.n	800a9b8 <__ieee754_pow+0x980>
 800aa0e:	491c      	ldr	r1, [pc, #112]	; (800aa80 <__ieee754_pow+0xa48>)
 800aa10:	2000      	movs	r0, #0
 800aa12:	f7ff bb30 	b.w	800a076 <__ieee754_pow+0x3e>
 800aa16:	2000      	movs	r0, #0
 800aa18:	2100      	movs	r1, #0
 800aa1a:	f7ff bb2c 	b.w	800a076 <__ieee754_pow+0x3e>
 800aa1e:	4630      	mov	r0, r6
 800aa20:	4639      	mov	r1, r7
 800aa22:	f7ff bb28 	b.w	800a076 <__ieee754_pow+0x3e>
 800aa26:	9204      	str	r2, [sp, #16]
 800aa28:	f7ff bb7a 	b.w	800a120 <__ieee754_pow+0xe8>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f7ff bb64 	b.w	800a0fa <__ieee754_pow+0xc2>
 800aa32:	bf00      	nop
 800aa34:	f3af 8000 	nop.w
 800aa38:	00000000 	.word	0x00000000
 800aa3c:	3fe62e43 	.word	0x3fe62e43
 800aa40:	fefa39ef 	.word	0xfefa39ef
 800aa44:	3fe62e42 	.word	0x3fe62e42
 800aa48:	0ca86c39 	.word	0x0ca86c39
 800aa4c:	be205c61 	.word	0xbe205c61
 800aa50:	72bea4d0 	.word	0x72bea4d0
 800aa54:	3e663769 	.word	0x3e663769
 800aa58:	c5d26bf1 	.word	0xc5d26bf1
 800aa5c:	3ebbbd41 	.word	0x3ebbbd41
 800aa60:	af25de2c 	.word	0xaf25de2c
 800aa64:	3f11566a 	.word	0x3f11566a
 800aa68:	16bebd93 	.word	0x16bebd93
 800aa6c:	3f66c16c 	.word	0x3f66c16c
 800aa70:	5555553e 	.word	0x5555553e
 800aa74:	3fc55555 	.word	0x3fc55555
 800aa78:	3fe00000 	.word	0x3fe00000
 800aa7c:	000fffff 	.word	0x000fffff
 800aa80:	3ff00000 	.word	0x3ff00000
 800aa84:	4090cbff 	.word	0x4090cbff
 800aa88:	3f6f3400 	.word	0x3f6f3400
 800aa8c:	652b82fe 	.word	0x652b82fe
 800aa90:	3c971547 	.word	0x3c971547
 800aa94:	00000000 	.word	0x00000000

0800aa98 <__ieee754_rem_pio2>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	ed2d 8b02 	vpush	{d8}
 800aaa0:	ec55 4b10 	vmov	r4, r5, d0
 800aaa4:	4bca      	ldr	r3, [pc, #808]	; (800add0 <__ieee754_rem_pio2+0x338>)
 800aaa6:	b08b      	sub	sp, #44	; 0x2c
 800aaa8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800aaac:	4598      	cmp	r8, r3
 800aaae:	4682      	mov	sl, r0
 800aab0:	9502      	str	r5, [sp, #8]
 800aab2:	dc08      	bgt.n	800aac6 <__ieee754_rem_pio2+0x2e>
 800aab4:	2200      	movs	r2, #0
 800aab6:	2300      	movs	r3, #0
 800aab8:	ed80 0b00 	vstr	d0, [r0]
 800aabc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aac0:	f04f 0b00 	mov.w	fp, #0
 800aac4:	e028      	b.n	800ab18 <__ieee754_rem_pio2+0x80>
 800aac6:	4bc3      	ldr	r3, [pc, #780]	; (800add4 <__ieee754_rem_pio2+0x33c>)
 800aac8:	4598      	cmp	r8, r3
 800aaca:	dc78      	bgt.n	800abbe <__ieee754_rem_pio2+0x126>
 800aacc:	9b02      	ldr	r3, [sp, #8]
 800aace:	4ec2      	ldr	r6, [pc, #776]	; (800add8 <__ieee754_rem_pio2+0x340>)
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	ee10 0a10 	vmov	r0, s0
 800aad6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ad98 <__ieee754_rem_pio2+0x300>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	4629      	mov	r1, r5
 800aade:	dd39      	ble.n	800ab54 <__ieee754_rem_pio2+0xbc>
 800aae0:	f7f5 fbd2 	bl	8000288 <__aeabi_dsub>
 800aae4:	45b0      	cmp	r8, r6
 800aae6:	4604      	mov	r4, r0
 800aae8:	460d      	mov	r5, r1
 800aaea:	d01b      	beq.n	800ab24 <__ieee754_rem_pio2+0x8c>
 800aaec:	a3ac      	add	r3, pc, #688	; (adr r3, 800ada0 <__ieee754_rem_pio2+0x308>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fbc9 	bl	8000288 <__aeabi_dsub>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	e9ca 2300 	strd	r2, r3, [sl]
 800aafe:	4620      	mov	r0, r4
 800ab00:	4629      	mov	r1, r5
 800ab02:	f7f5 fbc1 	bl	8000288 <__aeabi_dsub>
 800ab06:	a3a6      	add	r3, pc, #664	; (adr r3, 800ada0 <__ieee754_rem_pio2+0x308>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fbbc 	bl	8000288 <__aeabi_dsub>
 800ab10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab14:	f04f 0b01 	mov.w	fp, #1
 800ab18:	4658      	mov	r0, fp
 800ab1a:	b00b      	add	sp, #44	; 0x2c
 800ab1c:	ecbd 8b02 	vpop	{d8}
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	a3a0      	add	r3, pc, #640	; (adr r3, 800ada8 <__ieee754_rem_pio2+0x310>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fbad 	bl	8000288 <__aeabi_dsub>
 800ab2e:	a3a0      	add	r3, pc, #640	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x318>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	4604      	mov	r4, r0
 800ab36:	460d      	mov	r5, r1
 800ab38:	f7f5 fba6 	bl	8000288 <__aeabi_dsub>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	e9ca 2300 	strd	r2, r3, [sl]
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fb9e 	bl	8000288 <__aeabi_dsub>
 800ab4c:	a398      	add	r3, pc, #608	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x318>)
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	e7db      	b.n	800ab0c <__ieee754_rem_pio2+0x74>
 800ab54:	f7f5 fb9a 	bl	800028c <__adddf3>
 800ab58:	45b0      	cmp	r8, r6
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	d016      	beq.n	800ab8e <__ieee754_rem_pio2+0xf6>
 800ab60:	a38f      	add	r3, pc, #572	; (adr r3, 800ada0 <__ieee754_rem_pio2+0x308>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	f7f5 fb91 	bl	800028c <__adddf3>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	e9ca 2300 	strd	r2, r3, [sl]
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7f5 fb87 	bl	8000288 <__aeabi_dsub>
 800ab7a:	a389      	add	r3, pc, #548	; (adr r3, 800ada0 <__ieee754_rem_pio2+0x308>)
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f7f5 fb84 	bl	800028c <__adddf3>
 800ab84:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ab88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab8c:	e7c4      	b.n	800ab18 <__ieee754_rem_pio2+0x80>
 800ab8e:	a386      	add	r3, pc, #536	; (adr r3, 800ada8 <__ieee754_rem_pio2+0x310>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	f7f5 fb7a 	bl	800028c <__adddf3>
 800ab98:	a385      	add	r3, pc, #532	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x318>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	4604      	mov	r4, r0
 800aba0:	460d      	mov	r5, r1
 800aba2:	f7f5 fb73 	bl	800028c <__adddf3>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	e9ca 2300 	strd	r2, r3, [sl]
 800abae:	4620      	mov	r0, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	f7f5 fb69 	bl	8000288 <__aeabi_dsub>
 800abb6:	a37e      	add	r3, pc, #504	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x318>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	e7e0      	b.n	800ab80 <__ieee754_rem_pio2+0xe8>
 800abbe:	4b87      	ldr	r3, [pc, #540]	; (800addc <__ieee754_rem_pio2+0x344>)
 800abc0:	4598      	cmp	r8, r3
 800abc2:	f300 80d9 	bgt.w	800ad78 <__ieee754_rem_pio2+0x2e0>
 800abc6:	f001 f8cf 	bl	800bd68 <fabs>
 800abca:	ec55 4b10 	vmov	r4, r5, d0
 800abce:	ee10 0a10 	vmov	r0, s0
 800abd2:	a379      	add	r3, pc, #484	; (adr r3, 800adb8 <__ieee754_rem_pio2+0x320>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	4629      	mov	r1, r5
 800abda:	f7f5 fd0d 	bl	80005f8 <__aeabi_dmul>
 800abde:	4b80      	ldr	r3, [pc, #512]	; (800ade0 <__ieee754_rem_pio2+0x348>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	f7f5 fb53 	bl	800028c <__adddf3>
 800abe6:	f7f5 ffb7 	bl	8000b58 <__aeabi_d2iz>
 800abea:	4683      	mov	fp, r0
 800abec:	f7f5 fc9a 	bl	8000524 <__aeabi_i2d>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	ec43 2b18 	vmov	d8, r2, r3
 800abf8:	a367      	add	r3, pc, #412	; (adr r3, 800ad98 <__ieee754_rem_pio2+0x300>)
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f7f5 fcfb 	bl	80005f8 <__aeabi_dmul>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4620      	mov	r0, r4
 800ac08:	4629      	mov	r1, r5
 800ac0a:	f7f5 fb3d 	bl	8000288 <__aeabi_dsub>
 800ac0e:	a364      	add	r3, pc, #400	; (adr r3, 800ada0 <__ieee754_rem_pio2+0x308>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	4606      	mov	r6, r0
 800ac16:	460f      	mov	r7, r1
 800ac18:	ec51 0b18 	vmov	r0, r1, d8
 800ac1c:	f7f5 fcec 	bl	80005f8 <__aeabi_dmul>
 800ac20:	f1bb 0f1f 	cmp.w	fp, #31
 800ac24:	4604      	mov	r4, r0
 800ac26:	460d      	mov	r5, r1
 800ac28:	dc0d      	bgt.n	800ac46 <__ieee754_rem_pio2+0x1ae>
 800ac2a:	4b6e      	ldr	r3, [pc, #440]	; (800ade4 <__ieee754_rem_pio2+0x34c>)
 800ac2c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ac30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac34:	4543      	cmp	r3, r8
 800ac36:	d006      	beq.n	800ac46 <__ieee754_rem_pio2+0x1ae>
 800ac38:	4622      	mov	r2, r4
 800ac3a:	462b      	mov	r3, r5
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	4639      	mov	r1, r7
 800ac40:	f7f5 fb22 	bl	8000288 <__aeabi_dsub>
 800ac44:	e00f      	b.n	800ac66 <__ieee754_rem_pio2+0x1ce>
 800ac46:	462b      	mov	r3, r5
 800ac48:	4622      	mov	r2, r4
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	f7f5 fb1b 	bl	8000288 <__aeabi_dsub>
 800ac52:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ac56:	9303      	str	r3, [sp, #12]
 800ac58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac5c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ac60:	f1b8 0f10 	cmp.w	r8, #16
 800ac64:	dc02      	bgt.n	800ac6c <__ieee754_rem_pio2+0x1d4>
 800ac66:	e9ca 0100 	strd	r0, r1, [sl]
 800ac6a:	e039      	b.n	800ace0 <__ieee754_rem_pio2+0x248>
 800ac6c:	a34e      	add	r3, pc, #312	; (adr r3, 800ada8 <__ieee754_rem_pio2+0x310>)
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	ec51 0b18 	vmov	r0, r1, d8
 800ac76:	f7f5 fcbf 	bl	80005f8 <__aeabi_dmul>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	460d      	mov	r5, r1
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4630      	mov	r0, r6
 800ac84:	4639      	mov	r1, r7
 800ac86:	f7f5 faff 	bl	8000288 <__aeabi_dsub>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4680      	mov	r8, r0
 800ac90:	4689      	mov	r9, r1
 800ac92:	4630      	mov	r0, r6
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 faf7 	bl	8000288 <__aeabi_dsub>
 800ac9a:	4622      	mov	r2, r4
 800ac9c:	462b      	mov	r3, r5
 800ac9e:	f7f5 faf3 	bl	8000288 <__aeabi_dsub>
 800aca2:	a343      	add	r3, pc, #268	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x318>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	ec51 0b18 	vmov	r0, r1, d8
 800acb0:	f7f5 fca2 	bl	80005f8 <__aeabi_dmul>
 800acb4:	4622      	mov	r2, r4
 800acb6:	462b      	mov	r3, r5
 800acb8:	f7f5 fae6 	bl	8000288 <__aeabi_dsub>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4604      	mov	r4, r0
 800acc2:	460d      	mov	r5, r1
 800acc4:	4640      	mov	r0, r8
 800acc6:	4649      	mov	r1, r9
 800acc8:	f7f5 fade 	bl	8000288 <__aeabi_dsub>
 800accc:	9a03      	ldr	r2, [sp, #12]
 800acce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	2b31      	cmp	r3, #49	; 0x31
 800acd6:	dc24      	bgt.n	800ad22 <__ieee754_rem_pio2+0x28a>
 800acd8:	e9ca 0100 	strd	r0, r1, [sl]
 800acdc:	4646      	mov	r6, r8
 800acde:	464f      	mov	r7, r9
 800ace0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ace4:	4630      	mov	r0, r6
 800ace6:	4642      	mov	r2, r8
 800ace8:	464b      	mov	r3, r9
 800acea:	4639      	mov	r1, r7
 800acec:	f7f5 facc 	bl	8000288 <__aeabi_dsub>
 800acf0:	462b      	mov	r3, r5
 800acf2:	4622      	mov	r2, r4
 800acf4:	f7f5 fac8 	bl	8000288 <__aeabi_dsub>
 800acf8:	9b02      	ldr	r3, [sp, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad00:	f6bf af0a 	bge.w	800ab18 <__ieee754_rem_pio2+0x80>
 800ad04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad08:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad10:	f8ca 8000 	str.w	r8, [sl]
 800ad14:	f8ca 0008 	str.w	r0, [sl, #8]
 800ad18:	f8ca 300c 	str.w	r3, [sl, #12]
 800ad1c:	f1cb 0b00 	rsb	fp, fp, #0
 800ad20:	e6fa      	b.n	800ab18 <__ieee754_rem_pio2+0x80>
 800ad22:	a327      	add	r3, pc, #156	; (adr r3, 800adc0 <__ieee754_rem_pio2+0x328>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	ec51 0b18 	vmov	r0, r1, d8
 800ad2c:	f7f5 fc64 	bl	80005f8 <__aeabi_dmul>
 800ad30:	4604      	mov	r4, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4640      	mov	r0, r8
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	f7f5 faa4 	bl	8000288 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	4606      	mov	r6, r0
 800ad46:	460f      	mov	r7, r1
 800ad48:	4640      	mov	r0, r8
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	f7f5 fa9c 	bl	8000288 <__aeabi_dsub>
 800ad50:	4622      	mov	r2, r4
 800ad52:	462b      	mov	r3, r5
 800ad54:	f7f5 fa98 	bl	8000288 <__aeabi_dsub>
 800ad58:	a31b      	add	r3, pc, #108	; (adr r3, 800adc8 <__ieee754_rem_pio2+0x330>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460d      	mov	r5, r1
 800ad62:	ec51 0b18 	vmov	r0, r1, d8
 800ad66:	f7f5 fc47 	bl	80005f8 <__aeabi_dmul>
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	f7f5 fa8b 	bl	8000288 <__aeabi_dsub>
 800ad72:	4604      	mov	r4, r0
 800ad74:	460d      	mov	r5, r1
 800ad76:	e75f      	b.n	800ac38 <__ieee754_rem_pio2+0x1a0>
 800ad78:	4b1b      	ldr	r3, [pc, #108]	; (800ade8 <__ieee754_rem_pio2+0x350>)
 800ad7a:	4598      	cmp	r8, r3
 800ad7c:	dd36      	ble.n	800adec <__ieee754_rem_pio2+0x354>
 800ad7e:	ee10 2a10 	vmov	r2, s0
 800ad82:	462b      	mov	r3, r5
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7f5 fa7e 	bl	8000288 <__aeabi_dsub>
 800ad8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad90:	e9ca 0100 	strd	r0, r1, [sl]
 800ad94:	e694      	b.n	800aac0 <__ieee754_rem_pio2+0x28>
 800ad96:	bf00      	nop
 800ad98:	54400000 	.word	0x54400000
 800ad9c:	3ff921fb 	.word	0x3ff921fb
 800ada0:	1a626331 	.word	0x1a626331
 800ada4:	3dd0b461 	.word	0x3dd0b461
 800ada8:	1a600000 	.word	0x1a600000
 800adac:	3dd0b461 	.word	0x3dd0b461
 800adb0:	2e037073 	.word	0x2e037073
 800adb4:	3ba3198a 	.word	0x3ba3198a
 800adb8:	6dc9c883 	.word	0x6dc9c883
 800adbc:	3fe45f30 	.word	0x3fe45f30
 800adc0:	2e000000 	.word	0x2e000000
 800adc4:	3ba3198a 	.word	0x3ba3198a
 800adc8:	252049c1 	.word	0x252049c1
 800adcc:	397b839a 	.word	0x397b839a
 800add0:	3fe921fb 	.word	0x3fe921fb
 800add4:	4002d97b 	.word	0x4002d97b
 800add8:	3ff921fb 	.word	0x3ff921fb
 800addc:	413921fb 	.word	0x413921fb
 800ade0:	3fe00000 	.word	0x3fe00000
 800ade4:	0800c098 	.word	0x0800c098
 800ade8:	7fefffff 	.word	0x7fefffff
 800adec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800adf0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800adf4:	ee10 0a10 	vmov	r0, s0
 800adf8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800adfc:	ee10 6a10 	vmov	r6, s0
 800ae00:	460f      	mov	r7, r1
 800ae02:	f7f5 fea9 	bl	8000b58 <__aeabi_d2iz>
 800ae06:	f7f5 fb8d 	bl	8000524 <__aeabi_i2d>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4630      	mov	r0, r6
 800ae10:	4639      	mov	r1, r7
 800ae12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae16:	f7f5 fa37 	bl	8000288 <__aeabi_dsub>
 800ae1a:	4b23      	ldr	r3, [pc, #140]	; (800aea8 <__ieee754_rem_pio2+0x410>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f7f5 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ae22:	460f      	mov	r7, r1
 800ae24:	4606      	mov	r6, r0
 800ae26:	f7f5 fe97 	bl	8000b58 <__aeabi_d2iz>
 800ae2a:	f7f5 fb7b 	bl	8000524 <__aeabi_i2d>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae3a:	f7f5 fa25 	bl	8000288 <__aeabi_dsub>
 800ae3e:	4b1a      	ldr	r3, [pc, #104]	; (800aea8 <__ieee754_rem_pio2+0x410>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae4a:	ad04      	add	r5, sp, #16
 800ae4c:	f04f 0803 	mov.w	r8, #3
 800ae50:	46a9      	mov	r9, r5
 800ae52:	2600      	movs	r6, #0
 800ae54:	2700      	movs	r7, #0
 800ae56:	4632      	mov	r2, r6
 800ae58:	463b      	mov	r3, r7
 800ae5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ae5e:	46c3      	mov	fp, r8
 800ae60:	3d08      	subs	r5, #8
 800ae62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ae66:	f7f5 fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d1f3      	bne.n	800ae56 <__ieee754_rem_pio2+0x3be>
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <__ieee754_rem_pio2+0x414>)
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	2302      	movs	r3, #2
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	4622      	mov	r2, r4
 800ae78:	465b      	mov	r3, fp
 800ae7a:	4651      	mov	r1, sl
 800ae7c:	4648      	mov	r0, r9
 800ae7e:	f000 f993 	bl	800b1a8 <__kernel_rem_pio2>
 800ae82:	9b02      	ldr	r3, [sp, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	4683      	mov	fp, r0
 800ae88:	f6bf ae46 	bge.w	800ab18 <__ieee754_rem_pio2+0x80>
 800ae8c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ae90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae94:	e9ca 2300 	strd	r2, r3, [sl]
 800ae98:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ae9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aea0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800aea4:	e73a      	b.n	800ad1c <__ieee754_rem_pio2+0x284>
 800aea6:	bf00      	nop
 800aea8:	41700000 	.word	0x41700000
 800aeac:	0800c118 	.word	0x0800c118

0800aeb0 <__ieee754_sqrt>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	ec55 4b10 	vmov	r4, r5, d0
 800aeb8:	4e55      	ldr	r6, [pc, #340]	; (800b010 <__ieee754_sqrt+0x160>)
 800aeba:	43ae      	bics	r6, r5
 800aebc:	ee10 0a10 	vmov	r0, s0
 800aec0:	ee10 3a10 	vmov	r3, s0
 800aec4:	462a      	mov	r2, r5
 800aec6:	4629      	mov	r1, r5
 800aec8:	d110      	bne.n	800aeec <__ieee754_sqrt+0x3c>
 800aeca:	ee10 2a10 	vmov	r2, s0
 800aece:	462b      	mov	r3, r5
 800aed0:	f7f5 fb92 	bl	80005f8 <__aeabi_dmul>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4620      	mov	r0, r4
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7f5 f9d6 	bl	800028c <__adddf3>
 800aee0:	4604      	mov	r4, r0
 800aee2:	460d      	mov	r5, r1
 800aee4:	ec45 4b10 	vmov	d0, r4, r5
 800aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeec:	2d00      	cmp	r5, #0
 800aeee:	dc10      	bgt.n	800af12 <__ieee754_sqrt+0x62>
 800aef0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aef4:	4330      	orrs	r0, r6
 800aef6:	d0f5      	beq.n	800aee4 <__ieee754_sqrt+0x34>
 800aef8:	b15d      	cbz	r5, 800af12 <__ieee754_sqrt+0x62>
 800aefa:	ee10 2a10 	vmov	r2, s0
 800aefe:	462b      	mov	r3, r5
 800af00:	ee10 0a10 	vmov	r0, s0
 800af04:	f7f5 f9c0 	bl	8000288 <__aeabi_dsub>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	f7f5 fc9e 	bl	800084c <__aeabi_ddiv>
 800af10:	e7e6      	b.n	800aee0 <__ieee754_sqrt+0x30>
 800af12:	1512      	asrs	r2, r2, #20
 800af14:	d074      	beq.n	800b000 <__ieee754_sqrt+0x150>
 800af16:	07d4      	lsls	r4, r2, #31
 800af18:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800af1c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800af20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800af24:	bf5e      	ittt	pl
 800af26:	0fda      	lsrpl	r2, r3, #31
 800af28:	005b      	lslpl	r3, r3, #1
 800af2a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800af2e:	2400      	movs	r4, #0
 800af30:	0fda      	lsrs	r2, r3, #31
 800af32:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800af36:	107f      	asrs	r7, r7, #1
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	2516      	movs	r5, #22
 800af3c:	4620      	mov	r0, r4
 800af3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800af42:	1886      	adds	r6, r0, r2
 800af44:	428e      	cmp	r6, r1
 800af46:	bfde      	ittt	le
 800af48:	1b89      	suble	r1, r1, r6
 800af4a:	18b0      	addle	r0, r6, r2
 800af4c:	18a4      	addle	r4, r4, r2
 800af4e:	0049      	lsls	r1, r1, #1
 800af50:	3d01      	subs	r5, #1
 800af52:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800af56:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800af5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af5e:	d1f0      	bne.n	800af42 <__ieee754_sqrt+0x92>
 800af60:	462a      	mov	r2, r5
 800af62:	f04f 0e20 	mov.w	lr, #32
 800af66:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af6a:	4281      	cmp	r1, r0
 800af6c:	eb06 0c05 	add.w	ip, r6, r5
 800af70:	dc02      	bgt.n	800af78 <__ieee754_sqrt+0xc8>
 800af72:	d113      	bne.n	800af9c <__ieee754_sqrt+0xec>
 800af74:	459c      	cmp	ip, r3
 800af76:	d811      	bhi.n	800af9c <__ieee754_sqrt+0xec>
 800af78:	f1bc 0f00 	cmp.w	ip, #0
 800af7c:	eb0c 0506 	add.w	r5, ip, r6
 800af80:	da43      	bge.n	800b00a <__ieee754_sqrt+0x15a>
 800af82:	2d00      	cmp	r5, #0
 800af84:	db41      	blt.n	800b00a <__ieee754_sqrt+0x15a>
 800af86:	f100 0801 	add.w	r8, r0, #1
 800af8a:	1a09      	subs	r1, r1, r0
 800af8c:	459c      	cmp	ip, r3
 800af8e:	bf88      	it	hi
 800af90:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800af94:	eba3 030c 	sub.w	r3, r3, ip
 800af98:	4432      	add	r2, r6
 800af9a:	4640      	mov	r0, r8
 800af9c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800afa0:	f1be 0e01 	subs.w	lr, lr, #1
 800afa4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800afa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800afac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800afb0:	d1db      	bne.n	800af6a <__ieee754_sqrt+0xba>
 800afb2:	430b      	orrs	r3, r1
 800afb4:	d006      	beq.n	800afc4 <__ieee754_sqrt+0x114>
 800afb6:	1c50      	adds	r0, r2, #1
 800afb8:	bf13      	iteet	ne
 800afba:	3201      	addne	r2, #1
 800afbc:	3401      	addeq	r4, #1
 800afbe:	4672      	moveq	r2, lr
 800afc0:	f022 0201 	bicne.w	r2, r2, #1
 800afc4:	1063      	asrs	r3, r4, #1
 800afc6:	0852      	lsrs	r2, r2, #1
 800afc8:	07e1      	lsls	r1, r4, #31
 800afca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800afce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800afd2:	bf48      	it	mi
 800afd4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800afd8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800afdc:	4614      	mov	r4, r2
 800afde:	e781      	b.n	800aee4 <__ieee754_sqrt+0x34>
 800afe0:	0ad9      	lsrs	r1, r3, #11
 800afe2:	3815      	subs	r0, #21
 800afe4:	055b      	lsls	r3, r3, #21
 800afe6:	2900      	cmp	r1, #0
 800afe8:	d0fa      	beq.n	800afe0 <__ieee754_sqrt+0x130>
 800afea:	02cd      	lsls	r5, r1, #11
 800afec:	d50a      	bpl.n	800b004 <__ieee754_sqrt+0x154>
 800afee:	f1c2 0420 	rsb	r4, r2, #32
 800aff2:	fa23 f404 	lsr.w	r4, r3, r4
 800aff6:	1e55      	subs	r5, r2, #1
 800aff8:	4093      	lsls	r3, r2
 800affa:	4321      	orrs	r1, r4
 800affc:	1b42      	subs	r2, r0, r5
 800affe:	e78a      	b.n	800af16 <__ieee754_sqrt+0x66>
 800b000:	4610      	mov	r0, r2
 800b002:	e7f0      	b.n	800afe6 <__ieee754_sqrt+0x136>
 800b004:	0049      	lsls	r1, r1, #1
 800b006:	3201      	adds	r2, #1
 800b008:	e7ef      	b.n	800afea <__ieee754_sqrt+0x13a>
 800b00a:	4680      	mov	r8, r0
 800b00c:	e7bd      	b.n	800af8a <__ieee754_sqrt+0xda>
 800b00e:	bf00      	nop
 800b010:	7ff00000 	.word	0x7ff00000
 800b014:	00000000 	.word	0x00000000

0800b018 <__kernel_cos>:
 800b018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	ec57 6b10 	vmov	r6, r7, d0
 800b020:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b024:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b028:	ed8d 1b00 	vstr	d1, [sp]
 800b02c:	da07      	bge.n	800b03e <__kernel_cos+0x26>
 800b02e:	ee10 0a10 	vmov	r0, s0
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 fd90 	bl	8000b58 <__aeabi_d2iz>
 800b038:	2800      	cmp	r0, #0
 800b03a:	f000 8088 	beq.w	800b14e <__kernel_cos+0x136>
 800b03e:	4632      	mov	r2, r6
 800b040:	463b      	mov	r3, r7
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 fad7 	bl	80005f8 <__aeabi_dmul>
 800b04a:	4b51      	ldr	r3, [pc, #324]	; (800b190 <__kernel_cos+0x178>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	4604      	mov	r4, r0
 800b050:	460d      	mov	r5, r1
 800b052:	f7f5 fad1 	bl	80005f8 <__aeabi_dmul>
 800b056:	a340      	add	r3, pc, #256	; (adr r3, 800b158 <__kernel_cos+0x140>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	4682      	mov	sl, r0
 800b05e:	468b      	mov	fp, r1
 800b060:	4620      	mov	r0, r4
 800b062:	4629      	mov	r1, r5
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	a33d      	add	r3, pc, #244	; (adr r3, 800b160 <__kernel_cos+0x148>)
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f7f5 f90d 	bl	800028c <__adddf3>
 800b072:	4622      	mov	r2, r4
 800b074:	462b      	mov	r3, r5
 800b076:	f7f5 fabf 	bl	80005f8 <__aeabi_dmul>
 800b07a:	a33b      	add	r3, pc, #236	; (adr r3, 800b168 <__kernel_cos+0x150>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f7f5 f902 	bl	8000288 <__aeabi_dsub>
 800b084:	4622      	mov	r2, r4
 800b086:	462b      	mov	r3, r5
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	a338      	add	r3, pc, #224	; (adr r3, 800b170 <__kernel_cos+0x158>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	f7f5 f8fb 	bl	800028c <__adddf3>
 800b096:	4622      	mov	r2, r4
 800b098:	462b      	mov	r3, r5
 800b09a:	f7f5 faad 	bl	80005f8 <__aeabi_dmul>
 800b09e:	a336      	add	r3, pc, #216	; (adr r3, 800b178 <__kernel_cos+0x160>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 f8f0 	bl	8000288 <__aeabi_dsub>
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	462b      	mov	r3, r5
 800b0ac:	f7f5 faa4 	bl	80005f8 <__aeabi_dmul>
 800b0b0:	a333      	add	r3, pc, #204	; (adr r3, 800b180 <__kernel_cos+0x168>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f7f5 f8e9 	bl	800028c <__adddf3>
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	462b      	mov	r3, r5
 800b0be:	f7f5 fa9b 	bl	80005f8 <__aeabi_dmul>
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	462b      	mov	r3, r5
 800b0c6:	f7f5 fa97 	bl	80005f8 <__aeabi_dmul>
 800b0ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	f7f5 fa8f 	bl	80005f8 <__aeabi_dmul>
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4602      	mov	r2, r0
 800b0de:	4629      	mov	r1, r5
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f7f5 f8d1 	bl	8000288 <__aeabi_dsub>
 800b0e6:	4b2b      	ldr	r3, [pc, #172]	; (800b194 <__kernel_cos+0x17c>)
 800b0e8:	4598      	cmp	r8, r3
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	dc10      	bgt.n	800b112 <__kernel_cos+0xfa>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4650      	mov	r0, sl
 800b0f6:	4659      	mov	r1, fp
 800b0f8:	f7f5 f8c6 	bl	8000288 <__aeabi_dsub>
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4926      	ldr	r1, [pc, #152]	; (800b198 <__kernel_cos+0x180>)
 800b100:	4602      	mov	r2, r0
 800b102:	2000      	movs	r0, #0
 800b104:	f7f5 f8c0 	bl	8000288 <__aeabi_dsub>
 800b108:	ec41 0b10 	vmov	d0, r0, r1
 800b10c:	b003      	add	sp, #12
 800b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b112:	4b22      	ldr	r3, [pc, #136]	; (800b19c <__kernel_cos+0x184>)
 800b114:	4920      	ldr	r1, [pc, #128]	; (800b198 <__kernel_cos+0x180>)
 800b116:	4598      	cmp	r8, r3
 800b118:	bfcc      	ite	gt
 800b11a:	4d21      	ldrgt	r5, [pc, #132]	; (800b1a0 <__kernel_cos+0x188>)
 800b11c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b120:	2400      	movs	r4, #0
 800b122:	4622      	mov	r2, r4
 800b124:	462b      	mov	r3, r5
 800b126:	2000      	movs	r0, #0
 800b128:	f7f5 f8ae 	bl	8000288 <__aeabi_dsub>
 800b12c:	4622      	mov	r2, r4
 800b12e:	4680      	mov	r8, r0
 800b130:	4689      	mov	r9, r1
 800b132:	462b      	mov	r3, r5
 800b134:	4650      	mov	r0, sl
 800b136:	4659      	mov	r1, fp
 800b138:	f7f5 f8a6 	bl	8000288 <__aeabi_dsub>
 800b13c:	4632      	mov	r2, r6
 800b13e:	463b      	mov	r3, r7
 800b140:	f7f5 f8a2 	bl	8000288 <__aeabi_dsub>
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	4640      	mov	r0, r8
 800b14a:	4649      	mov	r1, r9
 800b14c:	e7da      	b.n	800b104 <__kernel_cos+0xec>
 800b14e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b188 <__kernel_cos+0x170>
 800b152:	e7db      	b.n	800b10c <__kernel_cos+0xf4>
 800b154:	f3af 8000 	nop.w
 800b158:	be8838d4 	.word	0xbe8838d4
 800b15c:	bda8fae9 	.word	0xbda8fae9
 800b160:	bdb4b1c4 	.word	0xbdb4b1c4
 800b164:	3e21ee9e 	.word	0x3e21ee9e
 800b168:	809c52ad 	.word	0x809c52ad
 800b16c:	3e927e4f 	.word	0x3e927e4f
 800b170:	19cb1590 	.word	0x19cb1590
 800b174:	3efa01a0 	.word	0x3efa01a0
 800b178:	16c15177 	.word	0x16c15177
 800b17c:	3f56c16c 	.word	0x3f56c16c
 800b180:	5555554c 	.word	0x5555554c
 800b184:	3fa55555 	.word	0x3fa55555
 800b188:	00000000 	.word	0x00000000
 800b18c:	3ff00000 	.word	0x3ff00000
 800b190:	3fe00000 	.word	0x3fe00000
 800b194:	3fd33332 	.word	0x3fd33332
 800b198:	3ff00000 	.word	0x3ff00000
 800b19c:	3fe90000 	.word	0x3fe90000
 800b1a0:	3fd20000 	.word	0x3fd20000
 800b1a4:	00000000 	.word	0x00000000

0800b1a8 <__kernel_rem_pio2>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	ed2d 8b02 	vpush	{d8}
 800b1b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b1b4:	f112 0f14 	cmn.w	r2, #20
 800b1b8:	9308      	str	r3, [sp, #32]
 800b1ba:	9101      	str	r1, [sp, #4]
 800b1bc:	4bc4      	ldr	r3, [pc, #784]	; (800b4d0 <__kernel_rem_pio2+0x328>)
 800b1be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b1c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1c6:	9302      	str	r3, [sp, #8]
 800b1c8:	9b08      	ldr	r3, [sp, #32]
 800b1ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b1ce:	bfa8      	it	ge
 800b1d0:	1ed4      	subge	r4, r2, #3
 800b1d2:	9306      	str	r3, [sp, #24]
 800b1d4:	bfb2      	itee	lt
 800b1d6:	2400      	movlt	r4, #0
 800b1d8:	2318      	movge	r3, #24
 800b1da:	fb94 f4f3 	sdivge	r4, r4, r3
 800b1de:	f06f 0317 	mvn.w	r3, #23
 800b1e2:	fb04 3303 	mla	r3, r4, r3, r3
 800b1e6:	eb03 0a02 	add.w	sl, r3, r2
 800b1ea:	9b02      	ldr	r3, [sp, #8]
 800b1ec:	9a06      	ldr	r2, [sp, #24]
 800b1ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b4c0 <__kernel_rem_pio2+0x318>
 800b1f2:	eb03 0802 	add.w	r8, r3, r2
 800b1f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b1f8:	1aa7      	subs	r7, r4, r2
 800b1fa:	ae22      	add	r6, sp, #136	; 0x88
 800b1fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b200:	2500      	movs	r5, #0
 800b202:	4545      	cmp	r5, r8
 800b204:	dd13      	ble.n	800b22e <__kernel_rem_pio2+0x86>
 800b206:	9b08      	ldr	r3, [sp, #32]
 800b208:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b4c0 <__kernel_rem_pio2+0x318>
 800b20c:	aa22      	add	r2, sp, #136	; 0x88
 800b20e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b212:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b216:	f04f 0800 	mov.w	r8, #0
 800b21a:	9b02      	ldr	r3, [sp, #8]
 800b21c:	4598      	cmp	r8, r3
 800b21e:	dc2f      	bgt.n	800b280 <__kernel_rem_pio2+0xd8>
 800b220:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b224:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b228:	462f      	mov	r7, r5
 800b22a:	2600      	movs	r6, #0
 800b22c:	e01b      	b.n	800b266 <__kernel_rem_pio2+0xbe>
 800b22e:	42ef      	cmn	r7, r5
 800b230:	d407      	bmi.n	800b242 <__kernel_rem_pio2+0x9a>
 800b232:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b236:	f7f5 f975 	bl	8000524 <__aeabi_i2d>
 800b23a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b23e:	3501      	adds	r5, #1
 800b240:	e7df      	b.n	800b202 <__kernel_rem_pio2+0x5a>
 800b242:	ec51 0b18 	vmov	r0, r1, d8
 800b246:	e7f8      	b.n	800b23a <__kernel_rem_pio2+0x92>
 800b248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b24c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b250:	f7f5 f9d2 	bl	80005f8 <__aeabi_dmul>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b25c:	f7f5 f816 	bl	800028c <__adddf3>
 800b260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b264:	3601      	adds	r6, #1
 800b266:	9b06      	ldr	r3, [sp, #24]
 800b268:	429e      	cmp	r6, r3
 800b26a:	f1a7 0708 	sub.w	r7, r7, #8
 800b26e:	ddeb      	ble.n	800b248 <__kernel_rem_pio2+0xa0>
 800b270:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b274:	f108 0801 	add.w	r8, r8, #1
 800b278:	ecab 7b02 	vstmia	fp!, {d7}
 800b27c:	3508      	adds	r5, #8
 800b27e:	e7cc      	b.n	800b21a <__kernel_rem_pio2+0x72>
 800b280:	9b02      	ldr	r3, [sp, #8]
 800b282:	aa0e      	add	r2, sp, #56	; 0x38
 800b284:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b288:	930d      	str	r3, [sp, #52]	; 0x34
 800b28a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b28c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b290:	9c02      	ldr	r4, [sp, #8]
 800b292:	930c      	str	r3, [sp, #48]	; 0x30
 800b294:	00e3      	lsls	r3, r4, #3
 800b296:	930a      	str	r3, [sp, #40]	; 0x28
 800b298:	ab9a      	add	r3, sp, #616	; 0x268
 800b29a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b29e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b2a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b2a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b2a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b2ac:	46c3      	mov	fp, r8
 800b2ae:	46a1      	mov	r9, r4
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	f1a5 0508 	sub.w	r5, r5, #8
 800b2b8:	dc77      	bgt.n	800b3aa <__kernel_rem_pio2+0x202>
 800b2ba:	ec47 6b10 	vmov	d0, r6, r7
 800b2be:	4650      	mov	r0, sl
 800b2c0:	f000 fdee 	bl	800bea0 <scalbn>
 800b2c4:	ec57 6b10 	vmov	r6, r7, d0
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b2ce:	ee10 0a10 	vmov	r0, s0
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f5 f990 	bl	80005f8 <__aeabi_dmul>
 800b2d8:	ec41 0b10 	vmov	d0, r0, r1
 800b2dc:	f000 fd58 	bl	800bd90 <floor>
 800b2e0:	4b7c      	ldr	r3, [pc, #496]	; (800b4d4 <__kernel_rem_pio2+0x32c>)
 800b2e2:	ec51 0b10 	vmov	r0, r1, d0
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f7f5 f986 	bl	80005f8 <__aeabi_dmul>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	f7f4 ffc8 	bl	8000288 <__aeabi_dsub>
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	f7f5 fc2c 	bl	8000b58 <__aeabi_d2iz>
 800b300:	9004      	str	r0, [sp, #16]
 800b302:	f7f5 f90f 	bl	8000524 <__aeabi_i2d>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	4630      	mov	r0, r6
 800b30c:	4639      	mov	r1, r7
 800b30e:	f7f4 ffbb 	bl	8000288 <__aeabi_dsub>
 800b312:	f1ba 0f00 	cmp.w	sl, #0
 800b316:	4606      	mov	r6, r0
 800b318:	460f      	mov	r7, r1
 800b31a:	dd6d      	ble.n	800b3f8 <__kernel_rem_pio2+0x250>
 800b31c:	1e62      	subs	r2, r4, #1
 800b31e:	ab0e      	add	r3, sp, #56	; 0x38
 800b320:	9d04      	ldr	r5, [sp, #16]
 800b322:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b326:	f1ca 0118 	rsb	r1, sl, #24
 800b32a:	fa40 f301 	asr.w	r3, r0, r1
 800b32e:	441d      	add	r5, r3
 800b330:	408b      	lsls	r3, r1
 800b332:	1ac0      	subs	r0, r0, r3
 800b334:	ab0e      	add	r3, sp, #56	; 0x38
 800b336:	9504      	str	r5, [sp, #16]
 800b338:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b33c:	f1ca 0317 	rsb	r3, sl, #23
 800b340:	fa40 fb03 	asr.w	fp, r0, r3
 800b344:	f1bb 0f00 	cmp.w	fp, #0
 800b348:	dd65      	ble.n	800b416 <__kernel_rem_pio2+0x26e>
 800b34a:	9b04      	ldr	r3, [sp, #16]
 800b34c:	2200      	movs	r2, #0
 800b34e:	3301      	adds	r3, #1
 800b350:	9304      	str	r3, [sp, #16]
 800b352:	4615      	mov	r5, r2
 800b354:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b358:	4294      	cmp	r4, r2
 800b35a:	f300 809c 	bgt.w	800b496 <__kernel_rem_pio2+0x2ee>
 800b35e:	f1ba 0f00 	cmp.w	sl, #0
 800b362:	dd07      	ble.n	800b374 <__kernel_rem_pio2+0x1cc>
 800b364:	f1ba 0f01 	cmp.w	sl, #1
 800b368:	f000 80c0 	beq.w	800b4ec <__kernel_rem_pio2+0x344>
 800b36c:	f1ba 0f02 	cmp.w	sl, #2
 800b370:	f000 80c6 	beq.w	800b500 <__kernel_rem_pio2+0x358>
 800b374:	f1bb 0f02 	cmp.w	fp, #2
 800b378:	d14d      	bne.n	800b416 <__kernel_rem_pio2+0x26e>
 800b37a:	4632      	mov	r2, r6
 800b37c:	463b      	mov	r3, r7
 800b37e:	4956      	ldr	r1, [pc, #344]	; (800b4d8 <__kernel_rem_pio2+0x330>)
 800b380:	2000      	movs	r0, #0
 800b382:	f7f4 ff81 	bl	8000288 <__aeabi_dsub>
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	2d00      	cmp	r5, #0
 800b38c:	d043      	beq.n	800b416 <__kernel_rem_pio2+0x26e>
 800b38e:	4650      	mov	r0, sl
 800b390:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b4c8 <__kernel_rem_pio2+0x320>
 800b394:	f000 fd84 	bl	800bea0 <scalbn>
 800b398:	4630      	mov	r0, r6
 800b39a:	4639      	mov	r1, r7
 800b39c:	ec53 2b10 	vmov	r2, r3, d0
 800b3a0:	f7f4 ff72 	bl	8000288 <__aeabi_dsub>
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	e035      	b.n	800b416 <__kernel_rem_pio2+0x26e>
 800b3aa:	4b4c      	ldr	r3, [pc, #304]	; (800b4dc <__kernel_rem_pio2+0x334>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	f7f5 f921 	bl	80005f8 <__aeabi_dmul>
 800b3b6:	f7f5 fbcf 	bl	8000b58 <__aeabi_d2iz>
 800b3ba:	f7f5 f8b3 	bl	8000524 <__aeabi_i2d>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	ec43 2b18 	vmov	d8, r2, r3
 800b3c6:	4b46      	ldr	r3, [pc, #280]	; (800b4e0 <__kernel_rem_pio2+0x338>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f7f5 f915 	bl	80005f8 <__aeabi_dmul>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	f7f4 ff57 	bl	8000288 <__aeabi_dsub>
 800b3da:	f7f5 fbbd 	bl	8000b58 <__aeabi_d2iz>
 800b3de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3e2:	f84b 0b04 	str.w	r0, [fp], #4
 800b3e6:	ec51 0b18 	vmov	r0, r1, d8
 800b3ea:	f7f4 ff4f 	bl	800028c <__adddf3>
 800b3ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460f      	mov	r7, r1
 800b3f6:	e75b      	b.n	800b2b0 <__kernel_rem_pio2+0x108>
 800b3f8:	d106      	bne.n	800b408 <__kernel_rem_pio2+0x260>
 800b3fa:	1e63      	subs	r3, r4, #1
 800b3fc:	aa0e      	add	r2, sp, #56	; 0x38
 800b3fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b402:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b406:	e79d      	b.n	800b344 <__kernel_rem_pio2+0x19c>
 800b408:	4b36      	ldr	r3, [pc, #216]	; (800b4e4 <__kernel_rem_pio2+0x33c>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	f7f5 fb7a 	bl	8000b04 <__aeabi_dcmpge>
 800b410:	2800      	cmp	r0, #0
 800b412:	d13d      	bne.n	800b490 <__kernel_rem_pio2+0x2e8>
 800b414:	4683      	mov	fp, r0
 800b416:	2200      	movs	r2, #0
 800b418:	2300      	movs	r3, #0
 800b41a:	4630      	mov	r0, r6
 800b41c:	4639      	mov	r1, r7
 800b41e:	f7f5 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800b422:	2800      	cmp	r0, #0
 800b424:	f000 80c0 	beq.w	800b5a8 <__kernel_rem_pio2+0x400>
 800b428:	1e65      	subs	r5, r4, #1
 800b42a:	462b      	mov	r3, r5
 800b42c:	2200      	movs	r2, #0
 800b42e:	9902      	ldr	r1, [sp, #8]
 800b430:	428b      	cmp	r3, r1
 800b432:	da6c      	bge.n	800b50e <__kernel_rem_pio2+0x366>
 800b434:	2a00      	cmp	r2, #0
 800b436:	f000 8089 	beq.w	800b54c <__kernel_rem_pio2+0x3a4>
 800b43a:	ab0e      	add	r3, sp, #56	; 0x38
 800b43c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b440:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 80ad 	beq.w	800b5a4 <__kernel_rem_pio2+0x3fc>
 800b44a:	4650      	mov	r0, sl
 800b44c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b4c8 <__kernel_rem_pio2+0x320>
 800b450:	f000 fd26 	bl	800bea0 <scalbn>
 800b454:	ab9a      	add	r3, sp, #616	; 0x268
 800b456:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b45a:	ec57 6b10 	vmov	r6, r7, d0
 800b45e:	00ec      	lsls	r4, r5, #3
 800b460:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b464:	46aa      	mov	sl, r5
 800b466:	f1ba 0f00 	cmp.w	sl, #0
 800b46a:	f280 80d6 	bge.w	800b61a <__kernel_rem_pio2+0x472>
 800b46e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b4c0 <__kernel_rem_pio2+0x318>
 800b472:	462e      	mov	r6, r5
 800b474:	2e00      	cmp	r6, #0
 800b476:	f2c0 8104 	blt.w	800b682 <__kernel_rem_pio2+0x4da>
 800b47a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b47c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b480:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b4e8 <__kernel_rem_pio2+0x340>
 800b484:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b488:	f04f 0800 	mov.w	r8, #0
 800b48c:	1baf      	subs	r7, r5, r6
 800b48e:	e0ea      	b.n	800b666 <__kernel_rem_pio2+0x4be>
 800b490:	f04f 0b02 	mov.w	fp, #2
 800b494:	e759      	b.n	800b34a <__kernel_rem_pio2+0x1a2>
 800b496:	f8d8 3000 	ldr.w	r3, [r8]
 800b49a:	b955      	cbnz	r5, 800b4b2 <__kernel_rem_pio2+0x30a>
 800b49c:	b123      	cbz	r3, 800b4a8 <__kernel_rem_pio2+0x300>
 800b49e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b4a2:	f8c8 3000 	str.w	r3, [r8]
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	3201      	adds	r2, #1
 800b4aa:	f108 0804 	add.w	r8, r8, #4
 800b4ae:	461d      	mov	r5, r3
 800b4b0:	e752      	b.n	800b358 <__kernel_rem_pio2+0x1b0>
 800b4b2:	1acb      	subs	r3, r1, r3
 800b4b4:	f8c8 3000 	str.w	r3, [r8]
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	e7f5      	b.n	800b4a8 <__kernel_rem_pio2+0x300>
 800b4bc:	f3af 8000 	nop.w
	...
 800b4cc:	3ff00000 	.word	0x3ff00000
 800b4d0:	0800c260 	.word	0x0800c260
 800b4d4:	40200000 	.word	0x40200000
 800b4d8:	3ff00000 	.word	0x3ff00000
 800b4dc:	3e700000 	.word	0x3e700000
 800b4e0:	41700000 	.word	0x41700000
 800b4e4:	3fe00000 	.word	0x3fe00000
 800b4e8:	0800c220 	.word	0x0800c220
 800b4ec:	1e62      	subs	r2, r4, #1
 800b4ee:	ab0e      	add	r3, sp, #56	; 0x38
 800b4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b4f8:	a90e      	add	r1, sp, #56	; 0x38
 800b4fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b4fe:	e739      	b.n	800b374 <__kernel_rem_pio2+0x1cc>
 800b500:	1e62      	subs	r2, r4, #1
 800b502:	ab0e      	add	r3, sp, #56	; 0x38
 800b504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b508:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b50c:	e7f4      	b.n	800b4f8 <__kernel_rem_pio2+0x350>
 800b50e:	a90e      	add	r1, sp, #56	; 0x38
 800b510:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b514:	3b01      	subs	r3, #1
 800b516:	430a      	orrs	r2, r1
 800b518:	e789      	b.n	800b42e <__kernel_rem_pio2+0x286>
 800b51a:	3301      	adds	r3, #1
 800b51c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b520:	2900      	cmp	r1, #0
 800b522:	d0fa      	beq.n	800b51a <__kernel_rem_pio2+0x372>
 800b524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b526:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b52a:	446a      	add	r2, sp
 800b52c:	3a98      	subs	r2, #152	; 0x98
 800b52e:	920a      	str	r2, [sp, #40]	; 0x28
 800b530:	9a08      	ldr	r2, [sp, #32]
 800b532:	18e3      	adds	r3, r4, r3
 800b534:	18a5      	adds	r5, r4, r2
 800b536:	aa22      	add	r2, sp, #136	; 0x88
 800b538:	f104 0801 	add.w	r8, r4, #1
 800b53c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b540:	9304      	str	r3, [sp, #16]
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	4543      	cmp	r3, r8
 800b546:	da04      	bge.n	800b552 <__kernel_rem_pio2+0x3aa>
 800b548:	461c      	mov	r4, r3
 800b54a:	e6a3      	b.n	800b294 <__kernel_rem_pio2+0xec>
 800b54c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b54e:	2301      	movs	r3, #1
 800b550:	e7e4      	b.n	800b51c <__kernel_rem_pio2+0x374>
 800b552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b554:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b558:	f7f4 ffe4 	bl	8000524 <__aeabi_i2d>
 800b55c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b562:	46ab      	mov	fp, r5
 800b564:	461c      	mov	r4, r3
 800b566:	f04f 0900 	mov.w	r9, #0
 800b56a:	2600      	movs	r6, #0
 800b56c:	2700      	movs	r7, #0
 800b56e:	9b06      	ldr	r3, [sp, #24]
 800b570:	4599      	cmp	r9, r3
 800b572:	dd06      	ble.n	800b582 <__kernel_rem_pio2+0x3da>
 800b574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b576:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b57a:	f108 0801 	add.w	r8, r8, #1
 800b57e:	930a      	str	r3, [sp, #40]	; 0x28
 800b580:	e7df      	b.n	800b542 <__kernel_rem_pio2+0x39a>
 800b582:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b586:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b58a:	f7f5 f835 	bl	80005f8 <__aeabi_dmul>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4630      	mov	r0, r6
 800b594:	4639      	mov	r1, r7
 800b596:	f7f4 fe79 	bl	800028c <__adddf3>
 800b59a:	f109 0901 	add.w	r9, r9, #1
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	e7e4      	b.n	800b56e <__kernel_rem_pio2+0x3c6>
 800b5a4:	3d01      	subs	r5, #1
 800b5a6:	e748      	b.n	800b43a <__kernel_rem_pio2+0x292>
 800b5a8:	ec47 6b10 	vmov	d0, r6, r7
 800b5ac:	f1ca 0000 	rsb	r0, sl, #0
 800b5b0:	f000 fc76 	bl	800bea0 <scalbn>
 800b5b4:	ec57 6b10 	vmov	r6, r7, d0
 800b5b8:	4ba0      	ldr	r3, [pc, #640]	; (800b83c <__kernel_rem_pio2+0x694>)
 800b5ba:	ee10 0a10 	vmov	r0, s0
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	f7f5 fa9f 	bl	8000b04 <__aeabi_dcmpge>
 800b5c6:	b1f8      	cbz	r0, 800b608 <__kernel_rem_pio2+0x460>
 800b5c8:	4b9d      	ldr	r3, [pc, #628]	; (800b840 <__kernel_rem_pio2+0x698>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	f7f5 f812 	bl	80005f8 <__aeabi_dmul>
 800b5d4:	f7f5 fac0 	bl	8000b58 <__aeabi_d2iz>
 800b5d8:	4680      	mov	r8, r0
 800b5da:	f7f4 ffa3 	bl	8000524 <__aeabi_i2d>
 800b5de:	4b97      	ldr	r3, [pc, #604]	; (800b83c <__kernel_rem_pio2+0x694>)
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f7f5 f809 	bl	80005f8 <__aeabi_dmul>
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7f4 fe4b 	bl	8000288 <__aeabi_dsub>
 800b5f2:	f7f5 fab1 	bl	8000b58 <__aeabi_d2iz>
 800b5f6:	1c65      	adds	r5, r4, #1
 800b5f8:	ab0e      	add	r3, sp, #56	; 0x38
 800b5fa:	f10a 0a18 	add.w	sl, sl, #24
 800b5fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b602:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b606:	e720      	b.n	800b44a <__kernel_rem_pio2+0x2a2>
 800b608:	4630      	mov	r0, r6
 800b60a:	4639      	mov	r1, r7
 800b60c:	f7f5 faa4 	bl	8000b58 <__aeabi_d2iz>
 800b610:	ab0e      	add	r3, sp, #56	; 0x38
 800b612:	4625      	mov	r5, r4
 800b614:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b618:	e717      	b.n	800b44a <__kernel_rem_pio2+0x2a2>
 800b61a:	ab0e      	add	r3, sp, #56	; 0x38
 800b61c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b620:	f7f4 ff80 	bl	8000524 <__aeabi_i2d>
 800b624:	4632      	mov	r2, r6
 800b626:	463b      	mov	r3, r7
 800b628:	f7f4 ffe6 	bl	80005f8 <__aeabi_dmul>
 800b62c:	4b84      	ldr	r3, [pc, #528]	; (800b840 <__kernel_rem_pio2+0x698>)
 800b62e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b632:	2200      	movs	r2, #0
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f4 ffde 	bl	80005f8 <__aeabi_dmul>
 800b63c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b640:	4606      	mov	r6, r0
 800b642:	460f      	mov	r7, r1
 800b644:	e70f      	b.n	800b466 <__kernel_rem_pio2+0x2be>
 800b646:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b64a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b64e:	f7f4 ffd3 	bl	80005f8 <__aeabi_dmul>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b65a:	f7f4 fe17 	bl	800028c <__adddf3>
 800b65e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b662:	f108 0801 	add.w	r8, r8, #1
 800b666:	9b02      	ldr	r3, [sp, #8]
 800b668:	4598      	cmp	r8, r3
 800b66a:	dc01      	bgt.n	800b670 <__kernel_rem_pio2+0x4c8>
 800b66c:	45b8      	cmp	r8, r7
 800b66e:	ddea      	ble.n	800b646 <__kernel_rem_pio2+0x49e>
 800b670:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b674:	ab4a      	add	r3, sp, #296	; 0x128
 800b676:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b67a:	ed87 7b00 	vstr	d7, [r7]
 800b67e:	3e01      	subs	r6, #1
 800b680:	e6f8      	b.n	800b474 <__kernel_rem_pio2+0x2cc>
 800b682:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b684:	2b02      	cmp	r3, #2
 800b686:	dc0b      	bgt.n	800b6a0 <__kernel_rem_pio2+0x4f8>
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dc35      	bgt.n	800b6f8 <__kernel_rem_pio2+0x550>
 800b68c:	d059      	beq.n	800b742 <__kernel_rem_pio2+0x59a>
 800b68e:	9b04      	ldr	r3, [sp, #16]
 800b690:	f003 0007 	and.w	r0, r3, #7
 800b694:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b698:	ecbd 8b02 	vpop	{d8}
 800b69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d1f3      	bne.n	800b68e <__kernel_rem_pio2+0x4e6>
 800b6a6:	ab4a      	add	r3, sp, #296	; 0x128
 800b6a8:	4423      	add	r3, r4
 800b6aa:	9306      	str	r3, [sp, #24]
 800b6ac:	461c      	mov	r4, r3
 800b6ae:	469a      	mov	sl, r3
 800b6b0:	9502      	str	r5, [sp, #8]
 800b6b2:	9b02      	ldr	r3, [sp, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f1aa 0a08 	sub.w	sl, sl, #8
 800b6ba:	dc6b      	bgt.n	800b794 <__kernel_rem_pio2+0x5ec>
 800b6bc:	46aa      	mov	sl, r5
 800b6be:	f1ba 0f01 	cmp.w	sl, #1
 800b6c2:	f1a4 0408 	sub.w	r4, r4, #8
 800b6c6:	f300 8085 	bgt.w	800b7d4 <__kernel_rem_pio2+0x62c>
 800b6ca:	9c06      	ldr	r4, [sp, #24]
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	3408      	adds	r4, #8
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	2d01      	cmp	r5, #1
 800b6d4:	f300 809d 	bgt.w	800b812 <__kernel_rem_pio2+0x66a>
 800b6d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b6dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b6e0:	f1bb 0f00 	cmp.w	fp, #0
 800b6e4:	f040 809b 	bne.w	800b81e <__kernel_rem_pio2+0x676>
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	e9c3 5600 	strd	r5, r6, [r3]
 800b6ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b6f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b6f6:	e7ca      	b.n	800b68e <__kernel_rem_pio2+0x4e6>
 800b6f8:	3408      	adds	r4, #8
 800b6fa:	ab4a      	add	r3, sp, #296	; 0x128
 800b6fc:	441c      	add	r4, r3
 800b6fe:	462e      	mov	r6, r5
 800b700:	2000      	movs	r0, #0
 800b702:	2100      	movs	r1, #0
 800b704:	2e00      	cmp	r6, #0
 800b706:	da36      	bge.n	800b776 <__kernel_rem_pio2+0x5ce>
 800b708:	f1bb 0f00 	cmp.w	fp, #0
 800b70c:	d039      	beq.n	800b782 <__kernel_rem_pio2+0x5da>
 800b70e:	4602      	mov	r2, r0
 800b710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b714:	9c01      	ldr	r4, [sp, #4]
 800b716:	e9c4 2300 	strd	r2, r3, [r4]
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b722:	f7f4 fdb1 	bl	8000288 <__aeabi_dsub>
 800b726:	ae4c      	add	r6, sp, #304	; 0x130
 800b728:	2401      	movs	r4, #1
 800b72a:	42a5      	cmp	r5, r4
 800b72c:	da2c      	bge.n	800b788 <__kernel_rem_pio2+0x5e0>
 800b72e:	f1bb 0f00 	cmp.w	fp, #0
 800b732:	d002      	beq.n	800b73a <__kernel_rem_pio2+0x592>
 800b734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b738:	4619      	mov	r1, r3
 800b73a:	9b01      	ldr	r3, [sp, #4]
 800b73c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b740:	e7a5      	b.n	800b68e <__kernel_rem_pio2+0x4e6>
 800b742:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b746:	eb0d 0403 	add.w	r4, sp, r3
 800b74a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b74e:	2000      	movs	r0, #0
 800b750:	2100      	movs	r1, #0
 800b752:	2d00      	cmp	r5, #0
 800b754:	da09      	bge.n	800b76a <__kernel_rem_pio2+0x5c2>
 800b756:	f1bb 0f00 	cmp.w	fp, #0
 800b75a:	d002      	beq.n	800b762 <__kernel_rem_pio2+0x5ba>
 800b75c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b760:	4619      	mov	r1, r3
 800b762:	9b01      	ldr	r3, [sp, #4]
 800b764:	e9c3 0100 	strd	r0, r1, [r3]
 800b768:	e791      	b.n	800b68e <__kernel_rem_pio2+0x4e6>
 800b76a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b76e:	f7f4 fd8d 	bl	800028c <__adddf3>
 800b772:	3d01      	subs	r5, #1
 800b774:	e7ed      	b.n	800b752 <__kernel_rem_pio2+0x5aa>
 800b776:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b77a:	f7f4 fd87 	bl	800028c <__adddf3>
 800b77e:	3e01      	subs	r6, #1
 800b780:	e7c0      	b.n	800b704 <__kernel_rem_pio2+0x55c>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	e7c5      	b.n	800b714 <__kernel_rem_pio2+0x56c>
 800b788:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b78c:	f7f4 fd7e 	bl	800028c <__adddf3>
 800b790:	3401      	adds	r4, #1
 800b792:	e7ca      	b.n	800b72a <__kernel_rem_pio2+0x582>
 800b794:	e9da 8900 	ldrd	r8, r9, [sl]
 800b798:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b79c:	9b02      	ldr	r3, [sp, #8]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	9302      	str	r3, [sp, #8]
 800b7a2:	4632      	mov	r2, r6
 800b7a4:	463b      	mov	r3, r7
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	f7f4 fd6f 	bl	800028c <__adddf3>
 800b7ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	f7f4 fd65 	bl	8000288 <__aeabi_dsub>
 800b7be:	4632      	mov	r2, r6
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	f7f4 fd63 	bl	800028c <__adddf3>
 800b7c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b7ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7ce:	ed8a 7b00 	vstr	d7, [sl]
 800b7d2:	e76e      	b.n	800b6b2 <__kernel_rem_pio2+0x50a>
 800b7d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b7d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4632      	mov	r2, r6
 800b7e0:	463b      	mov	r3, r7
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	f7f4 fd52 	bl	800028c <__adddf3>
 800b7e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	4649      	mov	r1, r9
 800b7f4:	f7f4 fd48 	bl	8000288 <__aeabi_dsub>
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	f7f4 fd46 	bl	800028c <__adddf3>
 800b800:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b804:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b808:	ed84 7b00 	vstr	d7, [r4]
 800b80c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b810:	e755      	b.n	800b6be <__kernel_rem_pio2+0x516>
 800b812:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b816:	f7f4 fd39 	bl	800028c <__adddf3>
 800b81a:	3d01      	subs	r5, #1
 800b81c:	e759      	b.n	800b6d2 <__kernel_rem_pio2+0x52a>
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	9a01      	ldr	r2, [sp, #4]
 800b822:	601d      	str	r5, [r3, #0]
 800b824:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b828:	605c      	str	r4, [r3, #4]
 800b82a:	609f      	str	r7, [r3, #8]
 800b82c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b830:	60d3      	str	r3, [r2, #12]
 800b832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b836:	6110      	str	r0, [r2, #16]
 800b838:	6153      	str	r3, [r2, #20]
 800b83a:	e728      	b.n	800b68e <__kernel_rem_pio2+0x4e6>
 800b83c:	41700000 	.word	0x41700000
 800b840:	3e700000 	.word	0x3e700000
 800b844:	00000000 	.word	0x00000000

0800b848 <__kernel_sin>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	ed2d 8b04 	vpush	{d8-d9}
 800b850:	eeb0 8a41 	vmov.f32	s16, s2
 800b854:	eef0 8a61 	vmov.f32	s17, s3
 800b858:	ec55 4b10 	vmov	r4, r5, d0
 800b85c:	b083      	sub	sp, #12
 800b85e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b862:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b866:	9001      	str	r0, [sp, #4]
 800b868:	da06      	bge.n	800b878 <__kernel_sin+0x30>
 800b86a:	ee10 0a10 	vmov	r0, s0
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f5 f972 	bl	8000b58 <__aeabi_d2iz>
 800b874:	2800      	cmp	r0, #0
 800b876:	d051      	beq.n	800b91c <__kernel_sin+0xd4>
 800b878:	4622      	mov	r2, r4
 800b87a:	462b      	mov	r3, r5
 800b87c:	4620      	mov	r0, r4
 800b87e:	4629      	mov	r1, r5
 800b880:	f7f4 feba 	bl	80005f8 <__aeabi_dmul>
 800b884:	4682      	mov	sl, r0
 800b886:	468b      	mov	fp, r1
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4620      	mov	r0, r4
 800b88e:	4629      	mov	r1, r5
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	a341      	add	r3, pc, #260	; (adr r3, 800b99c <__kernel_sin+0x154>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	4680      	mov	r8, r0
 800b89c:	4689      	mov	r9, r1
 800b89e:	4650      	mov	r0, sl
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	f7f4 fea9 	bl	80005f8 <__aeabi_dmul>
 800b8a6:	a33f      	add	r3, pc, #252	; (adr r3, 800b9a4 <__kernel_sin+0x15c>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f7f4 fcec 	bl	8000288 <__aeabi_dsub>
 800b8b0:	4652      	mov	r2, sl
 800b8b2:	465b      	mov	r3, fp
 800b8b4:	f7f4 fea0 	bl	80005f8 <__aeabi_dmul>
 800b8b8:	a33c      	add	r3, pc, #240	; (adr r3, 800b9ac <__kernel_sin+0x164>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f4 fce5 	bl	800028c <__adddf3>
 800b8c2:	4652      	mov	r2, sl
 800b8c4:	465b      	mov	r3, fp
 800b8c6:	f7f4 fe97 	bl	80005f8 <__aeabi_dmul>
 800b8ca:	a33a      	add	r3, pc, #232	; (adr r3, 800b9b4 <__kernel_sin+0x16c>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f7f4 fcda 	bl	8000288 <__aeabi_dsub>
 800b8d4:	4652      	mov	r2, sl
 800b8d6:	465b      	mov	r3, fp
 800b8d8:	f7f4 fe8e 	bl	80005f8 <__aeabi_dmul>
 800b8dc:	a337      	add	r3, pc, #220	; (adr r3, 800b9bc <__kernel_sin+0x174>)
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f7f4 fcd3 	bl	800028c <__adddf3>
 800b8e6:	9b01      	ldr	r3, [sp, #4]
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	460f      	mov	r7, r1
 800b8ec:	b9eb      	cbnz	r3, 800b92a <__kernel_sin+0xe2>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4650      	mov	r0, sl
 800b8f4:	4659      	mov	r1, fp
 800b8f6:	f7f4 fe7f 	bl	80005f8 <__aeabi_dmul>
 800b8fa:	a325      	add	r3, pc, #148	; (adr r3, 800b990 <__kernel_sin+0x148>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f7f4 fcc2 	bl	8000288 <__aeabi_dsub>
 800b904:	4642      	mov	r2, r8
 800b906:	464b      	mov	r3, r9
 800b908:	f7f4 fe76 	bl	80005f8 <__aeabi_dmul>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	4620      	mov	r0, r4
 800b912:	4629      	mov	r1, r5
 800b914:	f7f4 fcba 	bl	800028c <__adddf3>
 800b918:	4604      	mov	r4, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	ec45 4b10 	vmov	d0, r4, r5
 800b920:	b003      	add	sp, #12
 800b922:	ecbd 8b04 	vpop	{d8-d9}
 800b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92a:	4b1b      	ldr	r3, [pc, #108]	; (800b998 <__kernel_sin+0x150>)
 800b92c:	ec51 0b18 	vmov	r0, r1, d8
 800b930:	2200      	movs	r2, #0
 800b932:	f7f4 fe61 	bl	80005f8 <__aeabi_dmul>
 800b936:	4632      	mov	r2, r6
 800b938:	ec41 0b19 	vmov	d9, r0, r1
 800b93c:	463b      	mov	r3, r7
 800b93e:	4640      	mov	r0, r8
 800b940:	4649      	mov	r1, r9
 800b942:	f7f4 fe59 	bl	80005f8 <__aeabi_dmul>
 800b946:	4602      	mov	r2, r0
 800b948:	460b      	mov	r3, r1
 800b94a:	ec51 0b19 	vmov	r0, r1, d9
 800b94e:	f7f4 fc9b 	bl	8000288 <__aeabi_dsub>
 800b952:	4652      	mov	r2, sl
 800b954:	465b      	mov	r3, fp
 800b956:	f7f4 fe4f 	bl	80005f8 <__aeabi_dmul>
 800b95a:	ec53 2b18 	vmov	r2, r3, d8
 800b95e:	f7f4 fc93 	bl	8000288 <__aeabi_dsub>
 800b962:	a30b      	add	r3, pc, #44	; (adr r3, 800b990 <__kernel_sin+0x148>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	4606      	mov	r6, r0
 800b96a:	460f      	mov	r7, r1
 800b96c:	4640      	mov	r0, r8
 800b96e:	4649      	mov	r1, r9
 800b970:	f7f4 fe42 	bl	80005f8 <__aeabi_dmul>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4630      	mov	r0, r6
 800b97a:	4639      	mov	r1, r7
 800b97c:	f7f4 fc86 	bl	800028c <__adddf3>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4620      	mov	r0, r4
 800b986:	4629      	mov	r1, r5
 800b988:	f7f4 fc7e 	bl	8000288 <__aeabi_dsub>
 800b98c:	e7c4      	b.n	800b918 <__kernel_sin+0xd0>
 800b98e:	bf00      	nop
 800b990:	55555549 	.word	0x55555549
 800b994:	3fc55555 	.word	0x3fc55555
 800b998:	3fe00000 	.word	0x3fe00000
 800b99c:	5acfd57c 	.word	0x5acfd57c
 800b9a0:	3de5d93a 	.word	0x3de5d93a
 800b9a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b9a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b9ac:	57b1fe7d 	.word	0x57b1fe7d
 800b9b0:	3ec71de3 	.word	0x3ec71de3
 800b9b4:	19c161d5 	.word	0x19c161d5
 800b9b8:	3f2a01a0 	.word	0x3f2a01a0
 800b9bc:	1110f8a6 	.word	0x1110f8a6
 800b9c0:	3f811111 	.word	0x3f811111

0800b9c4 <with_errno>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	4616      	mov	r6, r2
 800b9cc:	f7fd fa88 	bl	8008ee0 <__errno>
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	6006      	str	r6, [r0, #0]
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}

0800b9d8 <xflow>:
 800b9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9da:	4614      	mov	r4, r2
 800b9dc:	461d      	mov	r5, r3
 800b9de:	b108      	cbz	r0, 800b9e4 <xflow+0xc>
 800b9e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b9e4:	e9cd 2300 	strd	r2, r3, [sp]
 800b9e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	f7f4 fe02 	bl	80005f8 <__aeabi_dmul>
 800b9f4:	2222      	movs	r2, #34	; 0x22
 800b9f6:	b003      	add	sp, #12
 800b9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9fc:	f7ff bfe2 	b.w	800b9c4 <with_errno>

0800ba00 <__math_uflow>:
 800ba00:	b508      	push	{r3, lr}
 800ba02:	2200      	movs	r2, #0
 800ba04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba08:	f7ff ffe6 	bl	800b9d8 <xflow>
 800ba0c:	ec41 0b10 	vmov	d0, r0, r1
 800ba10:	bd08      	pop	{r3, pc}

0800ba12 <__math_oflow>:
 800ba12:	b508      	push	{r3, lr}
 800ba14:	2200      	movs	r2, #0
 800ba16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba1a:	f7ff ffdd 	bl	800b9d8 <xflow>
 800ba1e:	ec41 0b10 	vmov	d0, r0, r1
 800ba22:	bd08      	pop	{r3, pc}
 800ba24:	0000      	movs	r0, r0
	...

0800ba28 <atan>:
 800ba28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	ec55 4b10 	vmov	r4, r5, d0
 800ba30:	4bc3      	ldr	r3, [pc, #780]	; (800bd40 <atan+0x318>)
 800ba32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba36:	429e      	cmp	r6, r3
 800ba38:	46ab      	mov	fp, r5
 800ba3a:	dd18      	ble.n	800ba6e <atan+0x46>
 800ba3c:	4bc1      	ldr	r3, [pc, #772]	; (800bd44 <atan+0x31c>)
 800ba3e:	429e      	cmp	r6, r3
 800ba40:	dc01      	bgt.n	800ba46 <atan+0x1e>
 800ba42:	d109      	bne.n	800ba58 <atan+0x30>
 800ba44:	b144      	cbz	r4, 800ba58 <atan+0x30>
 800ba46:	4622      	mov	r2, r4
 800ba48:	462b      	mov	r3, r5
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f7f4 fc1d 	bl	800028c <__adddf3>
 800ba52:	4604      	mov	r4, r0
 800ba54:	460d      	mov	r5, r1
 800ba56:	e006      	b.n	800ba66 <atan+0x3e>
 800ba58:	f1bb 0f00 	cmp.w	fp, #0
 800ba5c:	f300 8131 	bgt.w	800bcc2 <atan+0x29a>
 800ba60:	a59b      	add	r5, pc, #620	; (adr r5, 800bcd0 <atan+0x2a8>)
 800ba62:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba66:	ec45 4b10 	vmov	d0, r4, r5
 800ba6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6e:	4bb6      	ldr	r3, [pc, #728]	; (800bd48 <atan+0x320>)
 800ba70:	429e      	cmp	r6, r3
 800ba72:	dc14      	bgt.n	800ba9e <atan+0x76>
 800ba74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ba78:	429e      	cmp	r6, r3
 800ba7a:	dc0d      	bgt.n	800ba98 <atan+0x70>
 800ba7c:	a396      	add	r3, pc, #600	; (adr r3, 800bcd8 <atan+0x2b0>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	ee10 0a10 	vmov	r0, s0
 800ba86:	4629      	mov	r1, r5
 800ba88:	f7f4 fc00 	bl	800028c <__adddf3>
 800ba8c:	4baf      	ldr	r3, [pc, #700]	; (800bd4c <atan+0x324>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f7f5 f842 	bl	8000b18 <__aeabi_dcmpgt>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d1e6      	bne.n	800ba66 <atan+0x3e>
 800ba98:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ba9c:	e02b      	b.n	800baf6 <atan+0xce>
 800ba9e:	f000 f963 	bl	800bd68 <fabs>
 800baa2:	4bab      	ldr	r3, [pc, #684]	; (800bd50 <atan+0x328>)
 800baa4:	429e      	cmp	r6, r3
 800baa6:	ec55 4b10 	vmov	r4, r5, d0
 800baaa:	f300 80bf 	bgt.w	800bc2c <atan+0x204>
 800baae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bab2:	429e      	cmp	r6, r3
 800bab4:	f300 80a0 	bgt.w	800bbf8 <atan+0x1d0>
 800bab8:	ee10 2a10 	vmov	r2, s0
 800babc:	ee10 0a10 	vmov	r0, s0
 800bac0:	462b      	mov	r3, r5
 800bac2:	4629      	mov	r1, r5
 800bac4:	f7f4 fbe2 	bl	800028c <__adddf3>
 800bac8:	4ba0      	ldr	r3, [pc, #640]	; (800bd4c <atan+0x324>)
 800baca:	2200      	movs	r2, #0
 800bacc:	f7f4 fbdc 	bl	8000288 <__aeabi_dsub>
 800bad0:	2200      	movs	r2, #0
 800bad2:	4606      	mov	r6, r0
 800bad4:	460f      	mov	r7, r1
 800bad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bada:	4620      	mov	r0, r4
 800badc:	4629      	mov	r1, r5
 800bade:	f7f4 fbd5 	bl	800028c <__adddf3>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4630      	mov	r0, r6
 800bae8:	4639      	mov	r1, r7
 800baea:	f7f4 feaf 	bl	800084c <__aeabi_ddiv>
 800baee:	f04f 0a00 	mov.w	sl, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	460d      	mov	r5, r1
 800baf6:	4622      	mov	r2, r4
 800baf8:	462b      	mov	r3, r5
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4680      	mov	r8, r0
 800bb08:	4689      	mov	r9, r1
 800bb0a:	f7f4 fd75 	bl	80005f8 <__aeabi_dmul>
 800bb0e:	a374      	add	r3, pc, #464	; (adr r3, 800bce0 <atan+0x2b8>)
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	4606      	mov	r6, r0
 800bb16:	460f      	mov	r7, r1
 800bb18:	f7f4 fd6e 	bl	80005f8 <__aeabi_dmul>
 800bb1c:	a372      	add	r3, pc, #456	; (adr r3, 800bce8 <atan+0x2c0>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f7f4 fbb3 	bl	800028c <__adddf3>
 800bb26:	4632      	mov	r2, r6
 800bb28:	463b      	mov	r3, r7
 800bb2a:	f7f4 fd65 	bl	80005f8 <__aeabi_dmul>
 800bb2e:	a370      	add	r3, pc, #448	; (adr r3, 800bcf0 <atan+0x2c8>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f7f4 fbaa 	bl	800028c <__adddf3>
 800bb38:	4632      	mov	r2, r6
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	f7f4 fd5c 	bl	80005f8 <__aeabi_dmul>
 800bb40:	a36d      	add	r3, pc, #436	; (adr r3, 800bcf8 <atan+0x2d0>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fba1 	bl	800028c <__adddf3>
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	a36b      	add	r3, pc, #428	; (adr r3, 800bd00 <atan+0x2d8>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f7f4 fb98 	bl	800028c <__adddf3>
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	463b      	mov	r3, r7
 800bb60:	f7f4 fd4a 	bl	80005f8 <__aeabi_dmul>
 800bb64:	a368      	add	r3, pc, #416	; (adr r3, 800bd08 <atan+0x2e0>)
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	f7f4 fb8f 	bl	800028c <__adddf3>
 800bb6e:	4642      	mov	r2, r8
 800bb70:	464b      	mov	r3, r9
 800bb72:	f7f4 fd41 	bl	80005f8 <__aeabi_dmul>
 800bb76:	a366      	add	r3, pc, #408	; (adr r3, 800bd10 <atan+0x2e8>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	4680      	mov	r8, r0
 800bb7e:	4689      	mov	r9, r1
 800bb80:	4630      	mov	r0, r6
 800bb82:	4639      	mov	r1, r7
 800bb84:	f7f4 fd38 	bl	80005f8 <__aeabi_dmul>
 800bb88:	a363      	add	r3, pc, #396	; (adr r3, 800bd18 <atan+0x2f0>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fb7b 	bl	8000288 <__aeabi_dsub>
 800bb92:	4632      	mov	r2, r6
 800bb94:	463b      	mov	r3, r7
 800bb96:	f7f4 fd2f 	bl	80005f8 <__aeabi_dmul>
 800bb9a:	a361      	add	r3, pc, #388	; (adr r3, 800bd20 <atan+0x2f8>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f7f4 fb72 	bl	8000288 <__aeabi_dsub>
 800bba4:	4632      	mov	r2, r6
 800bba6:	463b      	mov	r3, r7
 800bba8:	f7f4 fd26 	bl	80005f8 <__aeabi_dmul>
 800bbac:	a35e      	add	r3, pc, #376	; (adr r3, 800bd28 <atan+0x300>)
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	f7f4 fb69 	bl	8000288 <__aeabi_dsub>
 800bbb6:	4632      	mov	r2, r6
 800bbb8:	463b      	mov	r3, r7
 800bbba:	f7f4 fd1d 	bl	80005f8 <__aeabi_dmul>
 800bbbe:	a35c      	add	r3, pc, #368	; (adr r3, 800bd30 <atan+0x308>)
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f7f4 fb60 	bl	8000288 <__aeabi_dsub>
 800bbc8:	4632      	mov	r2, r6
 800bbca:	463b      	mov	r3, r7
 800bbcc:	f7f4 fd14 	bl	80005f8 <__aeabi_dmul>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4640      	mov	r0, r8
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	f7f4 fb58 	bl	800028c <__adddf3>
 800bbdc:	4622      	mov	r2, r4
 800bbde:	462b      	mov	r3, r5
 800bbe0:	f7f4 fd0a 	bl	80005f8 <__aeabi_dmul>
 800bbe4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	d14b      	bne.n	800bc86 <atan+0x25e>
 800bbee:	4620      	mov	r0, r4
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	f7f4 fb49 	bl	8000288 <__aeabi_dsub>
 800bbf6:	e72c      	b.n	800ba52 <atan+0x2a>
 800bbf8:	ee10 0a10 	vmov	r0, s0
 800bbfc:	4b53      	ldr	r3, [pc, #332]	; (800bd4c <atan+0x324>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 fb41 	bl	8000288 <__aeabi_dsub>
 800bc06:	4b51      	ldr	r3, [pc, #324]	; (800bd4c <atan+0x324>)
 800bc08:	4606      	mov	r6, r0
 800bc0a:	460f      	mov	r7, r1
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7f4 fb3b 	bl	800028c <__adddf3>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	f7f4 fe15 	bl	800084c <__aeabi_ddiv>
 800bc22:	f04f 0a01 	mov.w	sl, #1
 800bc26:	4604      	mov	r4, r0
 800bc28:	460d      	mov	r5, r1
 800bc2a:	e764      	b.n	800baf6 <atan+0xce>
 800bc2c:	4b49      	ldr	r3, [pc, #292]	; (800bd54 <atan+0x32c>)
 800bc2e:	429e      	cmp	r6, r3
 800bc30:	da1d      	bge.n	800bc6e <atan+0x246>
 800bc32:	ee10 0a10 	vmov	r0, s0
 800bc36:	4b48      	ldr	r3, [pc, #288]	; (800bd58 <atan+0x330>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	f7f4 fb24 	bl	8000288 <__aeabi_dsub>
 800bc40:	4b45      	ldr	r3, [pc, #276]	; (800bd58 <atan+0x330>)
 800bc42:	4606      	mov	r6, r0
 800bc44:	460f      	mov	r7, r1
 800bc46:	2200      	movs	r2, #0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	f7f4 fcd4 	bl	80005f8 <__aeabi_dmul>
 800bc50:	4b3e      	ldr	r3, [pc, #248]	; (800bd4c <atan+0x324>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	f7f4 fb1a 	bl	800028c <__adddf3>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 fdf4 	bl	800084c <__aeabi_ddiv>
 800bc64:	f04f 0a02 	mov.w	sl, #2
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	e743      	b.n	800baf6 <atan+0xce>
 800bc6e:	462b      	mov	r3, r5
 800bc70:	ee10 2a10 	vmov	r2, s0
 800bc74:	4939      	ldr	r1, [pc, #228]	; (800bd5c <atan+0x334>)
 800bc76:	2000      	movs	r0, #0
 800bc78:	f7f4 fde8 	bl	800084c <__aeabi_ddiv>
 800bc7c:	f04f 0a03 	mov.w	sl, #3
 800bc80:	4604      	mov	r4, r0
 800bc82:	460d      	mov	r5, r1
 800bc84:	e737      	b.n	800baf6 <atan+0xce>
 800bc86:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <atan+0x338>)
 800bc88:	4e36      	ldr	r6, [pc, #216]	; (800bd64 <atan+0x33c>)
 800bc8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bc8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bc92:	e9da 2300 	ldrd	r2, r3, [sl]
 800bc96:	f7f4 faf7 	bl	8000288 <__aeabi_dsub>
 800bc9a:	4622      	mov	r2, r4
 800bc9c:	462b      	mov	r3, r5
 800bc9e:	f7f4 faf3 	bl	8000288 <__aeabi_dsub>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bcaa:	f7f4 faed 	bl	8000288 <__aeabi_dsub>
 800bcae:	f1bb 0f00 	cmp.w	fp, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	f6bf aed6 	bge.w	800ba66 <atan+0x3e>
 800bcba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcbe:	461d      	mov	r5, r3
 800bcc0:	e6d1      	b.n	800ba66 <atan+0x3e>
 800bcc2:	a51d      	add	r5, pc, #116	; (adr r5, 800bd38 <atan+0x310>)
 800bcc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bcc8:	e6cd      	b.n	800ba66 <atan+0x3e>
 800bcca:	bf00      	nop
 800bccc:	f3af 8000 	nop.w
 800bcd0:	54442d18 	.word	0x54442d18
 800bcd4:	bff921fb 	.word	0xbff921fb
 800bcd8:	8800759c 	.word	0x8800759c
 800bcdc:	7e37e43c 	.word	0x7e37e43c
 800bce0:	e322da11 	.word	0xe322da11
 800bce4:	3f90ad3a 	.word	0x3f90ad3a
 800bce8:	24760deb 	.word	0x24760deb
 800bcec:	3fa97b4b 	.word	0x3fa97b4b
 800bcf0:	a0d03d51 	.word	0xa0d03d51
 800bcf4:	3fb10d66 	.word	0x3fb10d66
 800bcf8:	c54c206e 	.word	0xc54c206e
 800bcfc:	3fb745cd 	.word	0x3fb745cd
 800bd00:	920083ff 	.word	0x920083ff
 800bd04:	3fc24924 	.word	0x3fc24924
 800bd08:	5555550d 	.word	0x5555550d
 800bd0c:	3fd55555 	.word	0x3fd55555
 800bd10:	2c6a6c2f 	.word	0x2c6a6c2f
 800bd14:	bfa2b444 	.word	0xbfa2b444
 800bd18:	52defd9a 	.word	0x52defd9a
 800bd1c:	3fadde2d 	.word	0x3fadde2d
 800bd20:	af749a6d 	.word	0xaf749a6d
 800bd24:	3fb3b0f2 	.word	0x3fb3b0f2
 800bd28:	fe231671 	.word	0xfe231671
 800bd2c:	3fbc71c6 	.word	0x3fbc71c6
 800bd30:	9998ebc4 	.word	0x9998ebc4
 800bd34:	3fc99999 	.word	0x3fc99999
 800bd38:	54442d18 	.word	0x54442d18
 800bd3c:	3ff921fb 	.word	0x3ff921fb
 800bd40:	440fffff 	.word	0x440fffff
 800bd44:	7ff00000 	.word	0x7ff00000
 800bd48:	3fdbffff 	.word	0x3fdbffff
 800bd4c:	3ff00000 	.word	0x3ff00000
 800bd50:	3ff2ffff 	.word	0x3ff2ffff
 800bd54:	40038000 	.word	0x40038000
 800bd58:	3ff80000 	.word	0x3ff80000
 800bd5c:	bff00000 	.word	0xbff00000
 800bd60:	0800c290 	.word	0x0800c290
 800bd64:	0800c270 	.word	0x0800c270

0800bd68 <fabs>:
 800bd68:	ec51 0b10 	vmov	r0, r1, d0
 800bd6c:	ee10 2a10 	vmov	r2, s0
 800bd70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd74:	ec43 2b10 	vmov	d0, r2, r3
 800bd78:	4770      	bx	lr

0800bd7a <finite>:
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	ed8d 0b00 	vstr	d0, [sp]
 800bd80:	9801      	ldr	r0, [sp, #4]
 800bd82:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bd86:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bd8a:	0fc0      	lsrs	r0, r0, #31
 800bd8c:	b002      	add	sp, #8
 800bd8e:	4770      	bx	lr

0800bd90 <floor>:
 800bd90:	ec51 0b10 	vmov	r0, r1, d0
 800bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bd9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bda0:	2e13      	cmp	r6, #19
 800bda2:	ee10 5a10 	vmov	r5, s0
 800bda6:	ee10 8a10 	vmov	r8, s0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	dc32      	bgt.n	800be14 <floor+0x84>
 800bdae:	2e00      	cmp	r6, #0
 800bdb0:	da14      	bge.n	800bddc <floor+0x4c>
 800bdb2:	a333      	add	r3, pc, #204	; (adr r3, 800be80 <floor+0xf0>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa68 	bl	800028c <__adddf3>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f7f4 feaa 	bl	8000b18 <__aeabi_dcmpgt>
 800bdc4:	b138      	cbz	r0, 800bdd6 <floor+0x46>
 800bdc6:	2c00      	cmp	r4, #0
 800bdc8:	da57      	bge.n	800be7a <floor+0xea>
 800bdca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bdce:	431d      	orrs	r5, r3
 800bdd0:	d001      	beq.n	800bdd6 <floor+0x46>
 800bdd2:	4c2d      	ldr	r4, [pc, #180]	; (800be88 <floor+0xf8>)
 800bdd4:	2500      	movs	r5, #0
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4628      	mov	r0, r5
 800bdda:	e025      	b.n	800be28 <floor+0x98>
 800bddc:	4f2b      	ldr	r7, [pc, #172]	; (800be8c <floor+0xfc>)
 800bdde:	4137      	asrs	r7, r6
 800bde0:	ea01 0307 	and.w	r3, r1, r7
 800bde4:	4303      	orrs	r3, r0
 800bde6:	d01f      	beq.n	800be28 <floor+0x98>
 800bde8:	a325      	add	r3, pc, #148	; (adr r3, 800be80 <floor+0xf0>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fa4d 	bl	800028c <__adddf3>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f7f4 fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d0eb      	beq.n	800bdd6 <floor+0x46>
 800bdfe:	2c00      	cmp	r4, #0
 800be00:	bfbe      	ittt	lt
 800be02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800be06:	fa43 f606 	asrlt.w	r6, r3, r6
 800be0a:	19a4      	addlt	r4, r4, r6
 800be0c:	ea24 0407 	bic.w	r4, r4, r7
 800be10:	2500      	movs	r5, #0
 800be12:	e7e0      	b.n	800bdd6 <floor+0x46>
 800be14:	2e33      	cmp	r6, #51	; 0x33
 800be16:	dd0b      	ble.n	800be30 <floor+0xa0>
 800be18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be1c:	d104      	bne.n	800be28 <floor+0x98>
 800be1e:	ee10 2a10 	vmov	r2, s0
 800be22:	460b      	mov	r3, r1
 800be24:	f7f4 fa32 	bl	800028c <__adddf3>
 800be28:	ec41 0b10 	vmov	d0, r0, r1
 800be2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800be34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be38:	fa23 f707 	lsr.w	r7, r3, r7
 800be3c:	4207      	tst	r7, r0
 800be3e:	d0f3      	beq.n	800be28 <floor+0x98>
 800be40:	a30f      	add	r3, pc, #60	; (adr r3, 800be80 <floor+0xf0>)
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f7f4 fa21 	bl	800028c <__adddf3>
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	f7f4 fe63 	bl	8000b18 <__aeabi_dcmpgt>
 800be52:	2800      	cmp	r0, #0
 800be54:	d0bf      	beq.n	800bdd6 <floor+0x46>
 800be56:	2c00      	cmp	r4, #0
 800be58:	da02      	bge.n	800be60 <floor+0xd0>
 800be5a:	2e14      	cmp	r6, #20
 800be5c:	d103      	bne.n	800be66 <floor+0xd6>
 800be5e:	3401      	adds	r4, #1
 800be60:	ea25 0507 	bic.w	r5, r5, r7
 800be64:	e7b7      	b.n	800bdd6 <floor+0x46>
 800be66:	2301      	movs	r3, #1
 800be68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800be6c:	fa03 f606 	lsl.w	r6, r3, r6
 800be70:	4435      	add	r5, r6
 800be72:	4545      	cmp	r5, r8
 800be74:	bf38      	it	cc
 800be76:	18e4      	addcc	r4, r4, r3
 800be78:	e7f2      	b.n	800be60 <floor+0xd0>
 800be7a:	2500      	movs	r5, #0
 800be7c:	462c      	mov	r4, r5
 800be7e:	e7aa      	b.n	800bdd6 <floor+0x46>
 800be80:	8800759c 	.word	0x8800759c
 800be84:	7e37e43c 	.word	0x7e37e43c
 800be88:	bff00000 	.word	0xbff00000
 800be8c:	000fffff 	.word	0x000fffff

0800be90 <nan>:
 800be90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be98 <nan+0x8>
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	00000000 	.word	0x00000000
 800be9c:	7ff80000 	.word	0x7ff80000

0800bea0 <scalbn>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	ec55 4b10 	vmov	r4, r5, d0
 800bea6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800beaa:	4606      	mov	r6, r0
 800beac:	462b      	mov	r3, r5
 800beae:	b99a      	cbnz	r2, 800bed8 <scalbn+0x38>
 800beb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800beb4:	4323      	orrs	r3, r4
 800beb6:	d036      	beq.n	800bf26 <scalbn+0x86>
 800beb8:	4b39      	ldr	r3, [pc, #228]	; (800bfa0 <scalbn+0x100>)
 800beba:	4629      	mov	r1, r5
 800bebc:	ee10 0a10 	vmov	r0, s0
 800bec0:	2200      	movs	r2, #0
 800bec2:	f7f4 fb99 	bl	80005f8 <__aeabi_dmul>
 800bec6:	4b37      	ldr	r3, [pc, #220]	; (800bfa4 <scalbn+0x104>)
 800bec8:	429e      	cmp	r6, r3
 800beca:	4604      	mov	r4, r0
 800becc:	460d      	mov	r5, r1
 800bece:	da10      	bge.n	800bef2 <scalbn+0x52>
 800bed0:	a32b      	add	r3, pc, #172	; (adr r3, 800bf80 <scalbn+0xe0>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	e03a      	b.n	800bf4e <scalbn+0xae>
 800bed8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bedc:	428a      	cmp	r2, r1
 800bede:	d10c      	bne.n	800befa <scalbn+0x5a>
 800bee0:	ee10 2a10 	vmov	r2, s0
 800bee4:	4620      	mov	r0, r4
 800bee6:	4629      	mov	r1, r5
 800bee8:	f7f4 f9d0 	bl	800028c <__adddf3>
 800beec:	4604      	mov	r4, r0
 800beee:	460d      	mov	r5, r1
 800bef0:	e019      	b.n	800bf26 <scalbn+0x86>
 800bef2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bef6:	460b      	mov	r3, r1
 800bef8:	3a36      	subs	r2, #54	; 0x36
 800befa:	4432      	add	r2, r6
 800befc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf00:	428a      	cmp	r2, r1
 800bf02:	dd08      	ble.n	800bf16 <scalbn+0x76>
 800bf04:	2d00      	cmp	r5, #0
 800bf06:	a120      	add	r1, pc, #128	; (adr r1, 800bf88 <scalbn+0xe8>)
 800bf08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf0c:	da1c      	bge.n	800bf48 <scalbn+0xa8>
 800bf0e:	a120      	add	r1, pc, #128	; (adr r1, 800bf90 <scalbn+0xf0>)
 800bf10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf14:	e018      	b.n	800bf48 <scalbn+0xa8>
 800bf16:	2a00      	cmp	r2, #0
 800bf18:	dd08      	ble.n	800bf2c <scalbn+0x8c>
 800bf1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf26:	ec45 4b10 	vmov	d0, r4, r5
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf30:	da19      	bge.n	800bf66 <scalbn+0xc6>
 800bf32:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bf36:	429e      	cmp	r6, r3
 800bf38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bf3c:	dd0a      	ble.n	800bf54 <scalbn+0xb4>
 800bf3e:	a112      	add	r1, pc, #72	; (adr r1, 800bf88 <scalbn+0xe8>)
 800bf40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e2      	bne.n	800bf0e <scalbn+0x6e>
 800bf48:	a30f      	add	r3, pc, #60	; (adr r3, 800bf88 <scalbn+0xe8>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 fb53 	bl	80005f8 <__aeabi_dmul>
 800bf52:	e7cb      	b.n	800beec <scalbn+0x4c>
 800bf54:	a10a      	add	r1, pc, #40	; (adr r1, 800bf80 <scalbn+0xe0>)
 800bf56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d0b8      	beq.n	800bed0 <scalbn+0x30>
 800bf5e:	a10e      	add	r1, pc, #56	; (adr r1, 800bf98 <scalbn+0xf8>)
 800bf60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf64:	e7b4      	b.n	800bed0 <scalbn+0x30>
 800bf66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf6a:	3236      	adds	r2, #54	; 0x36
 800bf6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bf74:	4620      	mov	r0, r4
 800bf76:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <scalbn+0x108>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	e7e8      	b.n	800bf4e <scalbn+0xae>
 800bf7c:	f3af 8000 	nop.w
 800bf80:	c2f8f359 	.word	0xc2f8f359
 800bf84:	01a56e1f 	.word	0x01a56e1f
 800bf88:	8800759c 	.word	0x8800759c
 800bf8c:	7e37e43c 	.word	0x7e37e43c
 800bf90:	8800759c 	.word	0x8800759c
 800bf94:	fe37e43c 	.word	0xfe37e43c
 800bf98:	c2f8f359 	.word	0xc2f8f359
 800bf9c:	81a56e1f 	.word	0x81a56e1f
 800bfa0:	43500000 	.word	0x43500000
 800bfa4:	ffff3cb0 	.word	0xffff3cb0
 800bfa8:	3c900000 	.word	0x3c900000

0800bfac <_init>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr

0800bfb8 <_fini>:
 800bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfba:	bf00      	nop
 800bfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfbe:	bc08      	pop	{r3}
 800bfc0:	469e      	mov	lr, r3
 800bfc2:	4770      	bx	lr
