
drone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800ba38  0800ba38  0001ba38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb0  0800bcb0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcb0  0800bcb0  0001bcb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcb8  0800bcb8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcb8  0800bcb8  0001bcb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcbc  0800bcbc  0001bcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800bcc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          0000070c  200000a0  200000a0  000200a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016324  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae2  00000000  00000000  000363f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00038ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023120  00000000  00000000  0003b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001785b  00000000  00000000  0005e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d176f  00000000  00000000  00075e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147582  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e90  00000000  00000000  001475d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba1c 	.word	0x0800ba1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800ba1c 	.word	0x0800ba1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize(uint8_t Gain, uint8_t rate, uint8_t mode) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	460b      	mov	r3, r1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	717b      	strb	r3, [r7, #5]
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f60:	223c      	movs	r2, #60	; 0x3c
 8000f62:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  HAL_StatusTypeDef status;
  do {
    status = HAL_I2C_IsDeviceReady( & hi2c1, devAddr, 3, 5);
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <HMC5883L_initialize+0x7c>)
 8000f70:	f004 fa10 	bl	8005394 <HAL_I2C_IsDeviceReady>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f2      	bne.n	8000f64 <HMC5883L_initialize+0x18>
  // write CONFIG_A register
  HAL_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f003 f9f0 	bl	8004364 <HAL_Delay>
  buffer[0] = HMC5883L_RA_CONFIG_A;
 8000f84:	2300      	movs	r3, #0
 8000f86:	733b      	strb	r3, [r7, #12]
  buffer[1] = rate;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	737b      	strb	r3, [r7, #13]

  do {
    status = HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10);
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	f107 020c 	add.w	r2, r7, #12
 8000f96:	230a      	movs	r3, #10
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <HMC5883L_initialize+0x7c>)
 8000f9e:	f003 fed5 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ef      	bne.n	8000f8c <HMC5883L_initialize+0x40>
  // write CONFIG_B register
  HMC5883L_setGain(Gain);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f80c 	bl	8000fcc <HMC5883L_setGain>
  // write MODE register
  HMC5883L_setMode(mode);
 8000fb4:	797b      	ldrb	r3, [r7, #5]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f82c 	bl	8001014 <HMC5883L_setMode>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200000c0 	.word	0x200000c0

08000fcc <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 4-0 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HMC5883L_setGain+0x40>)
 8000fd8:	223c      	movs	r2, #60	; 0x3c
 8000fda:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_CONFIG_B;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	733b      	strb	r3, [r7, #12]
  buffer[1] = gain;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 8000fe4:	bf00      	nop
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HMC5883L_setGain+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b299      	uxth	r1, r3
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <HMC5883L_setGain+0x44>)
 8000ff8:	f003 fea8 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f1      	bne.n	8000fe6 <HMC5883L_setGain+0x1a>
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	200000c0 	.word	0x200000c0

08001014 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 7-2 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HMC5883L_setMode+0x44>)
 8001020:	223c      	movs	r2, #60	; 0x3c
 8001022:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_MODE;
 8001024:	2302      	movs	r3, #2
 8001026:	733b      	strb	r3, [r7, #12]
  buffer[1] = newMode; // + 0x80;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 800102c:	bf00      	nop
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HMC5883L_setMode+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b299      	uxth	r1, r3
 8001034:	f107 020c 	add.w	r2, r7, #12
 8001038:	230a      	movs	r3, #10
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2302      	movs	r3, #2
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <HMC5883L_setMode+0x48>)
 8001040:	f003 fe84 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f1      	bne.n	800102e <HMC5883L_setMode+0x1a>
  mode = newMode; // track to tell if we have to clear bit 7 after a read
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <HMC5883L_setMode+0x4c>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	7013      	strb	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	200000c0 	.word	0x200000c0
 8001060:	200000bc 	.word	0x200000bc

08001064 <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001070:	edc7 0a01 	vstr	s1, [r7, #4]
 8001074:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	609a      	str	r2, [r3, #8]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 8001096:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edd3 6a05 	vldr	s13, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d6:	ed97 6a00 	vldr	s12, [r7]
 80010da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80010f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	ee17 0a90 	vmov	r0, s15
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	4604      	mov	r4, r0
 800110e:	460d      	mov	r5, r1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	ed93 7a04 	vldr	s14, [r3, #16]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 7a03 	vldr	s15, [r3, #12]
 800111c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001120:	eef0 7ae7 	vabs.f32	s15, s15
 8001124:	ee17 0a90 	vmov	r0, s15
 8001128:	f7ff fa0e 	bl	8000548 <__aeabi_f2d>
 800112c:	4680      	mov	r8, r0
 800112e:	4689      	mov	r9, r1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa07 	bl	8000548 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4640      	mov	r0, r8
 8001140:	4649      	mov	r1, r9
 8001142:	f7ff fa59 	bl	80005f8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff f89d 	bl	800028c <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd25 	bl	8000ba8 <__aeabi_d2f>
 800115e:	4602      	mov	r2, r0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	ee07 3a90 	vmov	s15, r3
}
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001180 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	4613      	mov	r3, r2
 800118e:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e024      	b.n	80011e0 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d103      	bne.n	80011a4 <flash+0x24>
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	4816      	ldr	r0, [pc, #88]	; (80011f8 <flash+0x78>)
 80011a0:	f003 fc75 	bl	8004a8e <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d103      	bne.n	80011b2 <flash+0x32>
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <flash+0x78>)
 80011ae:	f003 fc6e 	bl	8004a8e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	; 0x64
 80011b4:	f003 f8d6 	bl	8004364 <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d103      	bne.n	80011c6 <flash+0x46>
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <flash+0x78>)
 80011c2:	f003 fc64 	bl	8004a8e <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d103      	bne.n	80011d4 <flash+0x54>
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	480a      	ldr	r0, [pc, #40]	; (80011f8 <flash+0x78>)
 80011d0:	f003 fc5d 	bl	8004a8e <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80011d4:	2064      	movs	r0, #100	; 0x64
 80011d6:	f003 f8c5 	bl	8004364 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbd6      	blt.n	8001196 <flash+0x16>
  }

  HAL_Delay(200);
 80011e8:	20c8      	movs	r0, #200	; 0xc8
 80011ea:	f003 f8bb 	bl	8004364 <HAL_Delay>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020000 	.word	0x40020000

080011fc <console>:

// Monitor console
void console(const char *str) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)str, (uint16_t)strlen(str));
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7fe ffe3 	bl	80001d0 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29b      	uxth	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <console+0x24>)
 8001214:	f006 fea5 	bl	8007f62 <HAL_UART_Transmit_IT>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002e4 	.word	0x200002e4

08001224 <send_data>:

void send_data(float x1, float x2, float x3,
    float x4, float x5, float x6, float x7, float x8, float x9) {
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b093      	sub	sp, #76	; 0x4c
 8001228:	af08      	add	r7, sp, #32
 800122a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800122e:	edc7 0a08 	vstr	s1, [r7, #32]
 8001232:	ed87 1a07 	vstr	s2, [r7, #28]
 8001236:	edc7 1a06 	vstr	s3, [r7, #24]
 800123a:	ed87 2a05 	vstr	s4, [r7, #20]
 800123e:	edc7 2a04 	vstr	s5, [r7, #16]
 8001242:	ed87 3a03 	vstr	s6, [r7, #12]
 8001246:	edc7 3a02 	vstr	s7, [r7, #8]
 800124a:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 800124e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001252:	2100      	movs	r1, #0
 8001254:	4837      	ldr	r0, [pc, #220]	; (8001334 <send_data+0x110>)
 8001256:	f007 fe13 	bl	8008e80 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 800125a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800125e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001338 <send_data+0x114>
 8001262:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001266:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 800126a:	edd7 7a08 	vldr	s15, [r7, #32]
 800126e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001338 <send_data+0x114>
 8001272:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001276:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 800127a:	edd7 7a07 	vldr	s15, [r7, #28]
 800127e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001338 <send_data+0x114>
 8001282:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128a:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 800128e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001292:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001338 <send_data+0x114>
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800129a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129e:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 80012a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001338 <send_data+0x114>
 80012aa:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b2:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 80012b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001338 <send_data+0x114>
 80012be:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c6:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80012ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001338 <send_data+0x114>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001338 <send_data+0x114>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ee:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001338 <send_data+0x114>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 6a90 	vmov	r6, s15
 8001306:	9606      	str	r6, [sp, #24]
 8001308:	9505      	str	r5, [sp, #20]
 800130a:	9404      	str	r4, [sp, #16]
 800130c:	9003      	str	r0, [sp, #12]
 800130e:	9102      	str	r1, [sp, #8]
 8001310:	9201      	str	r2, [sp, #4]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	ee16 3a10 	vmov	r3, s12
 8001318:	ee16 2a90 	vmov	r2, s13
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <send_data+0x118>)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <send_data+0x110>)
 8001320:	f007 fdb6 	bl	8008e90 <siprintf>
  console(g_console_msg);
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <send_data+0x110>)
 8001326:	f7ff ff69 	bl	80011fc <console>
}
 800132a:	bf00      	nop
 800132c:	372c      	adds	r7, #44	; 0x2c
 800132e:	46bd      	mov	sp, r7
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	bf00      	nop
 8001334:	2000057c 	.word	0x2000057c
 8001338:	47c35000 	.word	0x47c35000
 800133c:	0800ba38 	.word	0x0800ba38

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f002 ff9b 	bl	8004280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f8f1 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 fc93 	bl	8001c78 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001352:	f000 f9f1 	bl	8001738 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001356:	f000 f955 	bl	8001604 <MX_I2C1_Init>
  MX_TIM2_Init();
 800135a:	f000 fab1 	bl	80018c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800135e:	f000 fb29 	bl	80019b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001362:	f000 fba3 	bl	8001aac <MX_TIM4_Init>
  MX_SPI1_Init();
 8001366:	f000 f97b 	bl	8001660 <MX_SPI1_Init>
  MX_SPI2_Init();
 800136a:	f000 f9af 	bl	80016cc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800136e:	f000 fc2f 	bl	8001bd0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001372:	f000 fc57 	bl	8001c24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Turn off all lights
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	4859      	ldr	r0, [pc, #356]	; (80014e0 <main+0x1a0>)
 800137c:	f003 fb6e 	bl	8004a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	4856      	ldr	r0, [pc, #344]	; (80014e0 <main+0x1a0>)
 8001386:	f003 fb69 	bl	8004a5c <HAL_GPIO_WritePin>

  // Gyro, accel
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 0.5); // Accel x
 800138a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800138e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001392:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001396:	4853      	ldr	r0, [pc, #332]	; (80014e4 <main+0x1a4>)
 8001398:	f7ff fe64 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 0.5); // Accel y
 800139c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013a0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013a4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013a8:	484f      	ldr	r0, [pc, #316]	; (80014e8 <main+0x1a8>)
 80013aa:	f7ff fe5b 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 0.5); // Accel z
 80013ae:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013b2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013b6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013ba:	484c      	ldr	r0, [pc, #304]	; (80014ec <main+0x1ac>)
 80013bc:	f7ff fe52 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 0.5); // Gyro x
 80013c0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013c8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013cc:	4848      	ldr	r0, [pc, #288]	; (80014f0 <main+0x1b0>)
 80013ce:	f7ff fe49 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 0.5); // Gyro y
 80013d2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013da:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013de:	4845      	ldr	r0, [pc, #276]	; (80014f4 <main+0x1b4>)
 80013e0:	f7ff fe40 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 0.5); // Gyro z
 80013e4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80013e8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013ec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80013f0:	4841      	ldr	r0, [pc, #260]	; (80014f8 <main+0x1b8>)
 80013f2:	f7ff fe37 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[6], 2, 2, 0.01); // Thrust
 80013f6:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80014fc <main+0x1bc>
 80013fa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013fe:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001402:	483f      	ldr	r0, [pc, #252]	; (8001500 <main+0x1c0>)
 8001404:	f7ff fe2e 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[7], 2, 2, 0.01); // Yaw
 8001408:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 80014fc <main+0x1bc>
 800140c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001410:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001414:	483b      	ldr	r0, [pc, #236]	; (8001504 <main+0x1c4>)
 8001416:	f7ff fe25 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[8], 2, 2, 0.01); // Pitch
 800141a:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80014fc <main+0x1bc>
 800141e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001422:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001426:	4838      	ldr	r0, [pc, #224]	; (8001508 <main+0x1c8>)
 8001428:	f7ff fe1c 	bl	8001064 <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[9], 2, 2, 0.01); // Roll
 800142c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80014fc <main+0x1bc>
 8001430:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001434:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001438:	4834      	ldr	r0, [pc, #208]	; (800150c <main+0x1cc>)
 800143a:	f7ff fe13 	bl	8001064 <SimpleKalmanFilter_Init>

  // Initialize GY-86
  SD_MPU6050_Init(
 800143e:	2303      	movs	r3, #3
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2303      	movs	r3, #3
 8001444:	2200      	movs	r2, #0
 8001446:	4932      	ldr	r1, [pc, #200]	; (8001510 <main+0x1d0>)
 8001448:	4832      	ldr	r0, [pc, #200]	; (8001514 <main+0x1d4>)
 800144a:	f000 fc94 	bl	8001d76 <SD_MPU6050_Init>
      &hi2c1,
      &g_dev1,
      SD_MPU6050_Device_0,
      SD_MPU6050_Accelerometer_16G,
      SD_MPU6050_Gyroscope_2000s);
  SD_MPU6050_SetDataRate(&hi2c1, &g_dev1, SD_MPU6050_DataRate_8KHz);
 800144e:	2200      	movs	r2, #0
 8001450:	492f      	ldr	r1, [pc, #188]	; (8001510 <main+0x1d0>)
 8001452:	4830      	ldr	r0, [pc, #192]	; (8001514 <main+0x1d4>)
 8001454:	f000 fd04 	bl	8001e60 <SD_MPU6050_SetDataRate>
  flash(1, 5);
 8001458:	2105      	movs	r1, #5
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fe90 	bl	8001180 <flash>

  begin(&g_dev2, MS5611_HIGH_RES); // MS5611 sensor init
 8001460:	2106      	movs	r1, #6
 8001462:	482d      	ldr	r0, [pc, #180]	; (8001518 <main+0x1d8>)
 8001464:	f000 fee0 	bl	8002228 <begin>
  Set_config(&hi2c1, &g_dev1, MPU6050_DLPF_BW_260); // LPF mpu
 8001468:	2200      	movs	r2, #0
 800146a:	4929      	ldr	r1, [pc, #164]	; (8001510 <main+0x1d0>)
 800146c:	4829      	ldr	r0, [pc, #164]	; (8001514 <main+0x1d4>)
 800146e:	f000 feb3 	bl	80021d8 <Set_config>
  SetAuxbus(&hi2c1, &g_dev1); // Enable MPU6050 AUX bus to interface with HMC5883l
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <main+0x1d0>)
 8001474:	4827      	ldr	r0, [pc, #156]	; (8001514 <main+0x1d4>)
 8001476:	f000 fe7d 	bl	8002174 <SetAuxbus>
  HMC5883L_initialize(HMC5883L_GAIN_1370, HMC5883L_RATE_75, HMC5883L_MODE_CONTINUOUS);
 800147a:	2200      	movs	r2, #0
 800147c:	2118      	movs	r1, #24
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fd64 	bl	8000f4c <HMC5883L_initialize>
  flash(1, 5);
 8001484:	2105      	movs	r1, #5
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff fe7a 	bl	8001180 <flash>

  // Remote control
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800148c:	2100      	movs	r1, #0
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <main+0x1dc>)
 8001490:	f005 fb3c 	bl	8006b0c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001494:	2104      	movs	r1, #4
 8001496:	4821      	ldr	r0, [pc, #132]	; (800151c <main+0x1dc>)
 8001498:	f005 fb38 	bl	8006b0c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 800149c:	2108      	movs	r1, #8
 800149e:	481f      	ldr	r0, [pc, #124]	; (800151c <main+0x1dc>)
 80014a0:	f005 fb34 	bl	8006b0c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80014a4:	210c      	movs	r1, #12
 80014a6:	481d      	ldr	r0, [pc, #116]	; (800151c <main+0x1dc>)
 80014a8:	f005 fb30 	bl	8006b0c <HAL_TIM_IC_Start_IT>

  // Init PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	481c      	ldr	r0, [pc, #112]	; (8001520 <main+0x1e0>)
 80014b0:	f005 fa0a 	bl	80068c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014b4:	2104      	movs	r1, #4
 80014b6:	481a      	ldr	r0, [pc, #104]	; (8001520 <main+0x1e0>)
 80014b8:	f005 fa06 	bl	80068c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014bc:	2108      	movs	r1, #8
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <main+0x1e0>)
 80014c0:	f005 fa02 	bl	80068c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014c4:	210c      	movs	r1, #12
 80014c6:	4816      	ldr	r0, [pc, #88]	; (8001520 <main+0x1e0>)
 80014c8:	f005 f9fe 	bl	80068c8 <HAL_TIM_PWM_Start>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 80014cc:	4815      	ldr	r0, [pc, #84]	; (8001524 <main+0x1e4>)
 80014ce:	f005 f93b 	bl	8006748 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Receive data and callback HAL_UART_RxCpltCallback
    HAL_UART_Receive_IT(&huart1, g_control, 10);
 80014d2:	220a      	movs	r2, #10
 80014d4:	4914      	ldr	r1, [pc, #80]	; (8001528 <main+0x1e8>)
 80014d6:	4815      	ldr	r0, [pc, #84]	; (800152c <main+0x1ec>)
 80014d8:	f006 fd88 	bl	8007fec <HAL_UART_Receive_IT>
 80014dc:	e7f9      	b.n	80014d2 <main+0x192>
 80014de:	bf00      	nop
 80014e0:	40020000 	.word	0x40020000
 80014e4:	2000036c 	.word	0x2000036c
 80014e8:	20000384 	.word	0x20000384
 80014ec:	2000039c 	.word	0x2000039c
 80014f0:	200003b4 	.word	0x200003b4
 80014f4:	200003cc 	.word	0x200003cc
 80014f8:	200003e4 	.word	0x200003e4
 80014fc:	3c23d70a 	.word	0x3c23d70a
 8001500:	200003fc 	.word	0x200003fc
 8001504:	20000414 	.word	0x20000414
 8001508:	2000042c 	.word	0x2000042c
 800150c:	20000444 	.word	0x20000444
 8001510:	200004ec 	.word	0x200004ec
 8001514:	200000c0 	.word	0x200000c0
 8001518:	20000508 	.word	0x20000508
 800151c:	2000029c 	.word	0x2000029c
 8001520:	200001c4 	.word	0x200001c4
 8001524:	20000254 	.word	0x20000254
 8001528:	20000570 	.word	0x20000570
 800152c:	200002e4 	.word	0x200002e4

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2230      	movs	r2, #48	; 0x30
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f007 fc9e 	bl	8008e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <SystemClock_Config+0xcc>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <SystemClock_Config+0xcc>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <SystemClock_Config+0xcc>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <SystemClock_Config+0xd0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <SystemClock_Config+0xd0>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <SystemClock_Config+0xd0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158c:	2301      	movs	r3, #1
 800158e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001596:	2302      	movs	r3, #2
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015a0:	2304      	movs	r3, #4
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015a4:	23a8      	movs	r3, #168	; 0xa8
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ac:	2304      	movs	r3, #4
 80015ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fb57 	bl	8005c68 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c0:	f000 fbd4 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2302      	movs	r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2105      	movs	r1, #5
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fdb8 	bl	8006158 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ee:	f000 fbbd 	bl	8001d6c <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3750      	adds	r7, #80	; 0x50
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C1_Init+0x50>)
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <MX_I2C1_Init+0x54>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2C1_Init+0x50>)
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <MX_I2C1_Init+0x58>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_I2C1_Init+0x50>)
 8001622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_I2C1_Init+0x50>)
 8001642:	f003 fa3f 	bl	8004ac4 <HAL_I2C_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800164c:	f000 fb8e 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000c0 	.word	0x200000c0
 8001658:	40005400 	.word	0x40005400
 800165c:	000186a0 	.word	0x000186a0

08001660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <MX_SPI1_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <MX_SPI1_Init+0x64>)
 800166c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_SPI1_Init+0x64>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_SPI1_Init+0x64>)
 80016b2:	f004 ff71 	bl	8006598 <HAL_SPI_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016bc:	f000 fb56 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000114 	.word	0x20000114
 80016c8:	40013000 	.word	0x40013000

080016cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_SPI2_Init+0x64>)
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <MX_SPI2_Init+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI2_Init+0x64>)
 80016d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI2_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_SPI2_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI2_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI2_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI2_Init+0x64>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI2_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_SPI2_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI2_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_SPI2_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI2_Init+0x64>)
 8001718:	220a      	movs	r2, #10
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_SPI2_Init+0x64>)
 800171e:	f004 ff3b 	bl	8006598 <HAL_SPI_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001728:	f000 fb20 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000016c 	.word	0x2000016c
 8001734:	40003800 	.word	0x40003800

08001738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	; 0x58
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2220      	movs	r2, #32
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f007 fb85 	bl	8008e80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001776:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <MX_TIM1_Init+0x180>)
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <MX_TIM1_Init+0x184>)
 800177a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 800177c:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <MX_TIM1_Init+0x180>)
 800177e:	2215      	movs	r2, #21
 8001780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <MX_TIM1_Init+0x180>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <MX_TIM1_Init+0x180>)
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <MX_TIM1_Init+0x180>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001796:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <MX_TIM1_Init+0x180>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <MX_TIM1_Init+0x180>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a2:	4845      	ldr	r0, [pc, #276]	; (80018b8 <MX_TIM1_Init+0x180>)
 80017a4:	f004 ff81 	bl	80066aa <HAL_TIM_Base_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ae:	f000 fadd 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017bc:	4619      	mov	r1, r3
 80017be:	483e      	ldr	r0, [pc, #248]	; (80018b8 <MX_TIM1_Init+0x180>)
 80017c0:	f005 fd32 	bl	8007228 <HAL_TIM_ConfigClockSource>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017ca:	f000 facf 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ce:	483a      	ldr	r0, [pc, #232]	; (80018b8 <MX_TIM1_Init+0x180>)
 80017d0:	f005 f82a 	bl	8006828 <HAL_TIM_PWM_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017da:	f000 fac7 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ea:	4619      	mov	r1, r3
 80017ec:	4832      	ldr	r0, [pc, #200]	; (80018b8 <MX_TIM1_Init+0x180>)
 80017ee:	f006 fa89 	bl	8007d04 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017f8:	f000 fab8 	bl	8001d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fc:	2360      	movs	r3, #96	; 0x60
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	4825      	ldr	r0, [pc, #148]	; (80018b8 <MX_TIM1_Init+0x180>)
 8001822:	f005 fc3f 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800182c:	f000 fa9e 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	2204      	movs	r2, #4
 8001836:	4619      	mov	r1, r3
 8001838:	481f      	ldr	r0, [pc, #124]	; (80018b8 <MX_TIM1_Init+0x180>)
 800183a:	f005 fc33 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001844:	f000 fa92 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	2208      	movs	r2, #8
 800184e:	4619      	mov	r1, r3
 8001850:	4819      	ldr	r0, [pc, #100]	; (80018b8 <MX_TIM1_Init+0x180>)
 8001852:	f005 fc27 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800185c:	f000 fa86 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	220c      	movs	r2, #12
 8001866:	4619      	mov	r1, r3
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <MX_TIM1_Init+0x180>)
 800186a:	f005 fc1b 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001874:	f000 fa7a 	bl	8001d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <MX_TIM1_Init+0x180>)
 800189c:	f006 faae 	bl	8007dfc <HAL_TIMEx_ConfigBreakDeadTime>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80018a6:	f000 fa61 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018aa:	4803      	ldr	r0, [pc, #12]	; (80018b8 <MX_TIM1_Init+0x180>)
 80018ac:	f000 fff8 	bl	80028a0 <HAL_TIM_MspPostInit>

}
 80018b0:	bf00      	nop
 80018b2:	3758      	adds	r7, #88	; 0x58
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001c4 	.word	0x200001c4
 80018bc:	40010000 	.word	0x40010000

080018c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <MX_TIM2_Init+0xf0>)
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <MX_TIM2_Init+0xf0>)
 80018ec:	2215      	movs	r2, #21
 80018ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_TIM2_Init+0xf0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <MX_TIM2_Init+0xf0>)
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_TIM2_Init+0xf0>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_TIM2_Init+0xf0>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800190a:	4829      	ldr	r0, [pc, #164]	; (80019b0 <MX_TIM2_Init+0xf0>)
 800190c:	f004 ff8c 	bl	8006828 <HAL_TIM_PWM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001916:	f000 fa29 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	4619      	mov	r1, r3
 8001928:	4821      	ldr	r0, [pc, #132]	; (80019b0 <MX_TIM2_Init+0xf0>)
 800192a:	f006 f9eb 	bl	8007d04 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001934:	f000 fa1a 	bl	8001d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001938:	2360      	movs	r3, #96	; 0x60
 800193a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	4818      	ldr	r0, [pc, #96]	; (80019b0 <MX_TIM2_Init+0xf0>)
 8001950:	f005 fba8 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800195a:	f000 fa07 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2204      	movs	r2, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4812      	ldr	r0, [pc, #72]	; (80019b0 <MX_TIM2_Init+0xf0>)
 8001966:	f005 fb9d 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001970:	f000 f9fc 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2208      	movs	r2, #8
 8001978:	4619      	mov	r1, r3
 800197a:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_TIM2_Init+0xf0>)
 800197c:	f005 fb92 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001986:	f000 f9f1 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	220c      	movs	r2, #12
 800198e:	4619      	mov	r1, r3
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_TIM2_Init+0xf0>)
 8001992:	f005 fb87 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800199c:	f000 f9e6 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM2_Init+0xf0>)
 80019a2:	f000 ff7d 	bl	80028a0 <HAL_TIM_MspPostInit>

}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000020c 	.word	0x2000020c

080019b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 80019e0:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <MX_TIM3_Init+0xf4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 80019e6:	2254      	movs	r2, #84	; 0x54
 80019e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80019f0:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a04:	4827      	ldr	r0, [pc, #156]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 8001a06:	f004 fe50 	bl	80066aa <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001a10:	f000 f9ac 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f107 0318 	add.w	r3, r7, #24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4820      	ldr	r0, [pc, #128]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 8001a22:	f005 fc01 	bl	8007228 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a2c:	f000 f99e 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a30:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 8001a32:	f005 f811 	bl	8006a58 <HAL_TIM_IC_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a3c:	f000 f996 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 8001a50:	f006 f958 	bl	8007d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001a5a:	f000 f987 	bl	8001d6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2208      	movs	r2, #8
 8001a72:	4619      	mov	r1, r3
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 8001a76:	f005 fa79 	bl	8006f6c <HAL_TIM_IC_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001a80:	f000 f974 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001a84:	463b      	mov	r3, r7
 8001a86:	220c      	movs	r2, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_TIM3_Init+0xf0>)
 8001a8c:	f005 fa6e 	bl	8006f6c <HAL_TIM_IC_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001a96:	f000 f969 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000254 	.word	0x20000254
 8001aa8:	40000400 	.word	0x40000400

08001aac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aca:	463b      	mov	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001ad8:	4a3c      	ldr	r2, [pc, #240]	; (8001bcc <MX_TIM4_Init+0x120>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001ade:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001ae2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000;
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001aec:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001af0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001afe:	4832      	ldr	r0, [pc, #200]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001b00:	f004 fdd3 	bl	80066aa <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001b0a:	f000 f92f 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482b      	ldr	r0, [pc, #172]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001b1c:	f005 fb84 	bl	8007228 <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b26:	f000 f921 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b2a:	4827      	ldr	r0, [pc, #156]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001b2c:	f004 ff94 	bl	8006a58 <HAL_TIM_IC_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001b36:	f000 f919 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001b4a:	f006 f8db 	bl	8007d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001b54:	f000 f90a 	bl	8001d6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b58:	230a      	movs	r3, #10
 8001b5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4816      	ldr	r0, [pc, #88]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001b70:	f005 f9fc 	bl	8006f6c <HAL_TIM_IC_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001b7a:	f000 f8f7 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2204      	movs	r2, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001b86:	f005 f9f1 	bl	8006f6c <HAL_TIM_IC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001b90:	f000 f8ec 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	2208      	movs	r2, #8
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001b9c:	f005 f9e6 	bl	8006f6c <HAL_TIM_IC_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001ba6:	f000 f8e1 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001baa:	463b      	mov	r3, r7
 8001bac:	220c      	movs	r2, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_TIM4_Init+0x11c>)
 8001bb2:	f005 f9db 	bl	8006f6c <HAL_TIM_IC_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001bbc:	f000 f8d6 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	40000800 	.word	0x40000800

08001bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <MX_USART1_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c08:	f006 f95e 	bl	8007ec8 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f000 f8ab 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200002e4 	.word	0x200002e4
 8001c20:	40011000 	.word	0x40011000

08001c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <MX_USART2_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c5c:	f006 f934 	bl	8007ec8 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c66:	f000 f881 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000328 	.word	0x20000328
 8001c74:	40004400 	.word	0x40004400

08001c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001d08:	f043 0310 	orr.w	r3, r3, #16
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_GPIO_Init+0xec>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	21c0      	movs	r1, #192	; 0xc0
 8001d3a:	480b      	ldr	r0, [pc, #44]	; (8001d68 <MX_GPIO_Init+0xf0>)
 8001d3c:	f002 fe8e 	bl	8004a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d40:	23c0      	movs	r3, #192	; 0xc0
 8001d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4804      	ldr	r0, [pc, #16]	; (8001d68 <MX_GPIO_Init+0xf0>)
 8001d58:	f002 fccc 	bl	80046f4 <HAL_GPIO_Init>

}
 8001d5c:	bf00      	nop
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <Error_Handler+0x8>

08001d76 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

/////////////////////////////////////////////
SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b08a      	sub	sp, #40	; 0x28
 8001d7a:	af02      	add	r7, sp, #8
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	4611      	mov	r1, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001d8c:	2375      	movs	r3, #117	; 0x75
 8001d8e:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001da6:	7efb      	ldrb	r3, [r7, #27]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	2305      	movs	r3, #5
 8001dac:	2202      	movs	r2, #2
 8001dae:	69f8      	ldr	r0, [r7, #28]
 8001db0:	f003 faf0 	bl	8005394 <HAL_I2C_IsDeviceReady>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e04c      	b.n	8001e58 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001dbe:	7efb      	ldrb	r3, [r7, #27]
 8001dc0:	b299      	uxth	r1, r3
 8001dc2:	f107 021a 	add.w	r2, r7, #26
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	69f8      	ldr	r0, [r7, #28]
 8001dd0:	f002 ffbc 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e03c      	b.n	8001e58 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001dde:	7efb      	ldrb	r3, [r7, #27]
 8001de0:	b299      	uxth	r1, r3
 8001de2:	f107 0219 	add.w	r2, r7, #25
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	69f8      	ldr	r0, [r7, #28]
 8001df0:	f003 f8aa 	bl	8004f48 <HAL_I2C_Master_Receive>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e02c      	b.n	8001e58 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e02a      	b.n	8001e58 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001e02:	bf00      	nop
 8001e04:	7e7b      	ldrb	r3, [r7, #25]
 8001e06:	2b68      	cmp	r3, #104	; 0x68
 8001e08:	d1f9      	bne.n	8001dfe <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001e0a:	236b      	movs	r3, #107	; 0x6b
 8001e0c:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001e12:	7efb      	ldrb	r3, [r7, #27]
 8001e14:	b299      	uxth	r1, r3
 8001e16:	f107 0214 	add.w	r2, r7, #20
 8001e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2302      	movs	r3, #2
 8001e22:	69f8      	ldr	r0, [r7, #28]
 8001e24:	f002 ff92 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e012      	b.n	8001e58 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8001e32:	2207      	movs	r2, #7
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f812 	bl	8001e60 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f830 	bl	8001ea8 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8001e48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f899 	bl	8001f88 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001e78:	2319      	movs	r3, #25
 8001e7a:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001e80:	bf00      	nop
 8001e82:	7cfb      	ldrb	r3, [r7, #19]
 8001e84:	b299      	uxth	r1, r3
 8001e86:	f107 0210 	add.w	r2, r7, #16
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2302      	movs	r3, #2
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f002 ff5a 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f1      	bne.n	8001e82 <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001ec0:	231c      	movs	r3, #28
 8001ec2:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001ec4:	bf00      	nop
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	b299      	uxth	r1, r3
 8001eca:	f107 0211 	add.w	r2, r7, #17
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f002 ff38 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f1      	bne.n	8001ec6 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001ee2:	bf00      	nop
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	b299      	uxth	r1, r3
 8001ee8:	f107 0212 	add.w	r2, r7, #18
 8001eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	6978      	ldr	r0, [r7, #20]
 8001ef6:	f003 f827 	bl	8004f48 <HAL_I2C_Master_Receive>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f1      	bne.n	8001ee4 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001f00:	7cbb      	ldrb	r3, [r7, #18]
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	f023 0318 	bic.w	r3, r3, #24
 8001f08:	b25a      	sxtb	r2, r3
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001f18:	bf00      	nop
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	f107 0212 	add.w	r2, r7, #18
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f002 ff0e 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f1      	bne.n	8001f1a <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d81f      	bhi.n	8001f7c <SD_MPU6050_SetAccelerometer+0xd4>
 8001f3c:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <SD_MPU6050_SetAccelerometer+0x9c>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5f 	.word	0x08001f5f
 8001f4c:	08001f69 	.word	0x08001f69
 8001f50:	08001f73 	.word	0x08001f73
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001f5a:	609a      	str	r2, [r3, #8]
			break;
 8001f5c:	e00f      	b.n	8001f7e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001f64:	609a      	str	r2, [r3, #8]
			break;
 8001f66:	e00a      	b.n	8001f7e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001f6e:	609a      	str	r2, [r3, #8]
			break;
 8001f70:	e005      	b.n	8001f7e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001f78:	609a      	str	r2, [r3, #8]
			break;
 8001f7a:	e000      	b.n	8001f7e <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8001f7c:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8001fa0:	231b      	movs	r3, #27
 8001fa2:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001fa4:	bf00      	nop
 8001fa6:	7cfb      	ldrb	r3, [r7, #19]
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	f107 0211 	add.w	r2, r7, #17
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f002 fec8 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f1      	bne.n	8001fa6 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001fc2:	bf00      	nop
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	f107 0212 	add.w	r2, r7, #18
 8001fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f002 ffb7 	bl	8004f48 <HAL_I2C_Master_Receive>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f1      	bne.n	8001fc4 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8001fe0:	7cbb      	ldrb	r3, [r7, #18]
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	f023 0318 	bic.w	r3, r3, #24
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001ff8:	bf00      	nop
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	b299      	uxth	r1, r3
 8001ffe:	f107 0212 	add.w	r2, r7, #18
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f002 fe9e 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f1      	bne.n	8001ffa <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d81b      	bhi.n	8002054 <SD_MPU6050_SetGyroscope+0xcc>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <SD_MPU6050_SetGyroscope+0x9c>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002035 	.word	0x08002035
 8002028:	0800203d 	.word	0x0800203d
 800202c:	08002045 	.word	0x08002045
 8002030:	0800204d 	.word	0x0800204d
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <SD_MPU6050_SetGyroscope+0xd8>)
 8002038:	605a      	str	r2, [r3, #4]
				break;
 800203a:	e00c      	b.n	8002056 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <SD_MPU6050_SetGyroscope+0xdc>)
 8002040:	605a      	str	r2, [r3, #4]
				break;
 8002042:	e008      	b.n	8002056 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <SD_MPU6050_SetGyroscope+0xe0>)
 8002048:	605a      	str	r2, [r3, #4]
				break;
 800204a:	e004      	b.n	8002056 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <SD_MPU6050_SetGyroscope+0xe4>)
 8002050:	605a      	str	r2, [r3, #4]
				break;
 8002052:	e000      	b.n	8002056 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8002054:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	3bfa232d 	.word	0x3bfa232d
 8002064:	3c7a232d 	.word	0x3c7a232d
 8002068:	3cf9c190 	.word	0x3cf9c190
 800206c:	3d79c190 	.word	0x3d79c190

08002070 <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af02      	add	r7, sp, #8
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800207a:	233b      	movs	r3, #59	; 0x3b
 800207c:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1) != HAL_OK);
 800208a:	bf00      	nop
 800208c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002090:	b299      	uxth	r1, r3
 8002092:	f107 020f 	add.w	r2, r7, #15
 8002096:	2301      	movs	r3, #1
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2301      	movs	r3, #1
 800209c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800209e:	f002 fe55 	bl	8004d4c <HAL_I2C_Master_Transmit>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f1      	bne.n	800208c <SD_MPU6050_ReadAll+0x1c>
	//HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1);
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1) != HAL_OK);
 80020a8:	bf00      	nop
 80020aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ae:	b299      	uxth	r1, r3
 80020b0:	f107 0210 	add.w	r2, r7, #16
 80020b4:	2301      	movs	r3, #1
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	230e      	movs	r3, #14
 80020ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020bc:	f002 ff44 	bl	8004f48 <HAL_I2C_Master_Receive>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f1      	bne.n	80020aa <SD_MPU6050_ReadAll+0x3a>
	//HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1);
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 80020c6:	7c3b      	ldrb	r3, [r7, #16]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7c7b      	ldrb	r3, [r7, #17]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80020d8:	7cbb      	ldrb	r3, [r7, #18]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b21a      	sxth	r2, r3
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 80020ea:	7d3b      	ldrb	r3, [r7, #20]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	7d7b      	ldrb	r3, [r7, #21]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b21a      	sxth	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 80020fc:	7dbb      	ldrb	r3, [r7, #22]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	b21a      	sxth	r2, r3
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	b21b      	sxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 800210a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002116:	eddf 6a15 	vldr	s13, [pc, #84]	; 800216c <SD_MPU6050_ReadAll+0xfc>
 800211a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002170 <SD_MPU6050_ReadAll+0x100>
 8002122:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 800212c:	7e3b      	ldrb	r3, [r7, #24]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b21a      	sxth	r2, r3
 8002132:	7e7b      	ldrb	r3, [r7, #25]
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21a      	sxth	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 800213e:	7ebb      	ldrb	r3, [r7, #26]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b21a      	sxth	r2, r3
 8002144:	7efb      	ldrb	r3, [r7, #27]
 8002146:	b21b      	sxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b21a      	sxth	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8002150:	7f3b      	ldrb	r3, [r7, #28]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	b21a      	sxth	r2, r3
 8002156:	7f7b      	ldrb	r3, [r7, #29]
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21a      	sxth	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	43aa0000 	.word	0x43aa0000
 8002170:	42121eb8 	.word	0x42121eb8

08002174 <SetAuxbus>:
	InterruptsStruct->Status = read;
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

void SetAuxbus(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct){
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]
	uint8_t address = DataStruct->Address;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	72fb      	strb	r3, [r7, #11]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_USER_CTRL;
 8002188:	236a      	movs	r3, #106	; 0x6a
 800218a:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 800218c:	2300      	movs	r3, #0
 800218e:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 8002190:	200a      	movs	r0, #10
 8002192:	f002 f8e7 	bl	8004364 <HAL_Delay>
	/*set I2C Bypass enable bit (I2C_BYPASS_EN,bit 2) in INT Pin / Bypass Enable Configuration register (INT_PIN_CFG,0x37) to 1*/
	d[0] = MPU6050_INT_PIN_CFG;
 8002196:	2337      	movs	r3, #55	; 0x37
 8002198:	723b      	strb	r3, [r7, #8]
	d[1] = 0x02;
 800219a:	2302      	movs	r3, #2
 800219c:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800219e:	bf00      	nop
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	b299      	uxth	r1, r3
 80021a4:	f107 0208 	add.w	r2, r7, #8
 80021a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2302      	movs	r3, #2
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f002 fdcb 	bl	8004d4c <HAL_I2C_Master_Transmit>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f1      	bne.n	80021a0 <SetAuxbus+0x2c>
	HAL_Delay(10);
 80021bc:	200a      	movs	r0, #10
 80021be:	f002 f8d1 	bl	8004364 <HAL_Delay>
	/*Turn off sleep mode by reseting SLEEP bit (bit 6) of the power management register #1 (PWR_MGMT_1, 0x6B)*/
	d[0] = MPU6050_PWR_MGMT_1;
 80021c2:	236b      	movs	r3, #107	; 0x6b
 80021c4:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 80021ca:	200a      	movs	r0, #10
 80021cc:	f002 f8ca 	bl	8004364 <HAL_Delay>
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <Set_config>:
void Set_config(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t f_cut){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af02      	add	r7, sp, #8
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	4613      	mov	r3, r2
 80021e4:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_CONFIG;
 80021f0:	231a      	movs	r3, #26
 80021f2:	743b      	strb	r3, [r7, #16]
	d[1] = f_cut;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	747b      	strb	r3, [r7, #17]
	HAL_Delay(10);
 80021f8:	200a      	movs	r0, #10
 80021fa:	f002 f8b3 	bl	8004364 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80021fe:	bf00      	nop
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	b299      	uxth	r1, r3
 8002204:	f107 0210 	add.w	r2, r7, #16
 8002208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2302      	movs	r3, #2
 8002210:	6978      	ldr	r0, [r7, #20]
 8002212:	f002 fd9b 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f1      	bne.n	8002200 <Set_config+0x28>
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <begin>:
#include "ms5611.h"
#include "math.h"
extern I2C_HandleTypeDef hi2c1;
extern void delay(uint16_t z);

bool begin(MS5611 *dev, ms5611_osr_t osr){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
    //Wire.begin();
		while(HAL_I2C_IsDeviceReady(&hi2c1, MS5611_ADDRESS, 3, 100) != HAL_OK);
 8002234:	bf00      	nop
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	2203      	movs	r2, #3
 800223a:	21ee      	movs	r1, #238	; 0xee
 800223c:	480f      	ldr	r0, [pc, #60]	; (800227c <begin+0x54>)
 800223e:	f003 f8a9 	bl	8005394 <HAL_I2C_IsDeviceReady>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f6      	bne.n	8002236 <begin+0xe>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8002248:	bf00      	nop
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <begin+0x54>)
 800224c:	f003 f9d0 	bl	80055f0 <HAL_I2C_GetState>
 8002250:	4603      	mov	r3, r0
 8002252:	2b20      	cmp	r3, #32
 8002254:	d1f9      	bne.n	800224a <begin+0x22>
		setOversampling(dev, osr);
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	4619      	mov	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f810 	bl	8002280 <setOversampling>
		reset();
 8002260:	f000 f850 	bl	8002304 <reset>
		HAL_Delay(100);
 8002264:	2064      	movs	r0, #100	; 0x64
 8002266:	f002 f87d 	bl	8004364 <HAL_Delay>
    readPROM(dev);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f860 	bl	8002330 <readPROM>
    return true;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200000c0 	.word	0x200000c0

08002280 <setOversampling>:

// Set oversampling value
void setOversampling(MS5611 *dev, ms5611_osr_t osr){
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
	  dev->uosr = osr;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    switch (osr)
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d82d      	bhi.n	80022f6 <setOversampling+0x76>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <setOversampling+0x20>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022c5 	.word	0x080022c5
 80022a4:	080022f7 	.word	0x080022f7
 80022a8:	080022cf 	.word	0x080022cf
 80022ac:	080022f7 	.word	0x080022f7
 80022b0:	080022d9 	.word	0x080022d9
 80022b4:	080022f7 	.word	0x080022f7
 80022b8:	080022e3 	.word	0x080022e3
 80022bc:	080022f7 	.word	0x080022f7
 80022c0:	080022ed 	.word	0x080022ed
    {
	case MS5611_ULTRA_LOW_POWER:
	    dev->ct = 1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022cc:	e013      	b.n	80022f6 <setOversampling+0x76>
	case MS5611_LOW_POWER:
	    dev->ct = 2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022d6:	e00e      	b.n	80022f6 <setOversampling+0x76>
	case MS5611_STANDARD:
	    dev->ct = 3;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2203      	movs	r2, #3
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022e0:	e009      	b.n	80022f6 <setOversampling+0x76>
	case MS5611_HIGH_RES:
	    dev->ct = 4;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2204      	movs	r2, #4
 80022e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022ea:	e004      	b.n	80022f6 <setOversampling+0x76>
	case MS5611_ULTRA_HIGH_RES:
	    dev->ct = 5;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2205      	movs	r2, #5
 80022f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 80022f4:	bf00      	nop
    }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <reset>:
// Get oversampling value
ms5611_osr_t getOversampling(MS5611 dev) {
    return (ms5611_osr_t) dev.uosr;
}

void reset(void){
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af02      	add	r7, sp, #8
  while(HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t*) MS5611_CMD_RESET, 1, 10) != HAL_OK);
 800230a:	bf00      	nop
 800230c:	230a      	movs	r3, #10
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2301      	movs	r3, #1
 8002312:	221e      	movs	r2, #30
 8002314:	21ee      	movs	r1, #238	; 0xee
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <reset+0x28>)
 8002318:	f002 fd18 	bl	8004d4c <HAL_I2C_Master_Transmit>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f4      	bne.n	800230c <reset+0x8>
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200000c0 	.word	0x200000c0

08002330 <readPROM>:

void readPROM(MS5611 *dev){
 8002330:	b580      	push	{r7, lr}
 8002332:	b08c      	sub	sp, #48	; 0x30
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
  reset();
 8002338:	f7ff ffe4 	bl	8002304 <reset>
  HAL_Delay(3000);
 800233c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002340:	f002 f810 	bl	8004364 <HAL_Delay>
  //read PROM
  uint8_t buf1[16];
  //uint16_t C[8];
  uint8_t CMD_PROM = 0xA0;
 8002344:	23a0      	movs	r3, #160	; 0xa0
 8002346:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < 8; i++) {
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	e023      	b.n	8002396 <readPROM+0x66>
    while (HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t *) &CMD_PROM, 1, 100) != HAL_OK);
 800234e:	bf00      	nop
 8002350:	f107 020f 	add.w	r2, r7, #15
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2301      	movs	r3, #1
 800235a:	21ee      	movs	r1, #238	; 0xee
 800235c:	4826      	ldr	r0, [pc, #152]	; (80023f8 <readPROM+0xc8>)
 800235e:	f002 fcf5 	bl	8004d4c <HAL_I2C_Master_Transmit>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f3      	bne.n	8002350 <readPROM+0x20>
    while (HAL_I2C_Master_Receive(&hi2c1, MS5611_ADDRESS_READ, &buf1[i*2], 2, 100) != HAL_OK);
 8002368:	bf00      	nop
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	f107 0210 	add.w	r2, r7, #16
 8002372:	441a      	add	r2, r3
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2302      	movs	r3, #2
 800237a:	21ef      	movs	r1, #239	; 0xef
 800237c:	481e      	ldr	r0, [pc, #120]	; (80023f8 <readPROM+0xc8>)
 800237e:	f002 fde3 	bl	8004f48 <HAL_I2C_Master_Receive>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <readPROM+0x3a>
    CMD_PROM = CMD_PROM + 2;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3302      	adds	r3, #2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < 8; i++) {
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3301      	adds	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	2b07      	cmp	r3, #7
 800239a:	ddd8      	ble.n	800234e <readPROM+0x1e>
  }
  for (uint8_t i = 0; i < 6; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023a2:	e01c      	b.n	80023de <readPROM+0xae>
    dev->fc[i] = (int16_t) buf1[2*i+2] << 8 | (int16_t) buf1[2*i+3];
 80023a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023a8:	3301      	adds	r3, #1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	3328      	adds	r3, #40	; 0x28
 80023ae:	443b      	add	r3, r7
 80023b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023ba:	0052      	lsls	r2, r2, #1
 80023bc:	3203      	adds	r2, #3
 80023be:	3228      	adds	r2, #40	; 0x28
 80023c0:	443a      	add	r2, r7
 80023c2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023cc:	4619      	mov	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0; i < 6; i++) {
 80023d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023d8:	3301      	adds	r3, #1
 80023da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d9de      	bls.n	80023a4 <readPROM+0x74>
  }
  crc4(dev->fc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f807 	bl	80023fc <crc4>
}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200000c0 	.word	0x200000c0

080023fc <crc4>:
// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg){
	return 0;
}
//////////////////////////////////////////////////////
unsigned char crc4(unsigned int n_prom[]) {
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	int cnt; // simple counter
	unsigned int n_rem; // crc reminder
	unsigned int crc_read; // original value of the crc
	unsigned char n_bit;
	n_rem = 0x00;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
	crc_read=n_prom[7]; //save read CRC
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	60bb      	str	r3, [r7, #8]
	n_prom[7]=(0xFF00 & (n_prom[7])); //CRC byte is replaced by 0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	331c      	adds	r3, #28
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	331c      	adds	r3, #28
 8002418:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800241c:	601a      	str	r2, [r3, #0]
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e039      	b.n	8002498 <crc4+0x9c>
		// choose LSB or MSB
		if (cnt%2==1) n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	bfb8      	it	lt
 800242e:	425b      	neglt	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d10b      	bne.n	800244c <crc4+0x50>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	105b      	asrs	r3, r3, #1
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4053      	eors	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	e00b      	b.n	8002464 <crc4+0x68>
		else n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	105b      	asrs	r3, r3, #1
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4053      	eors	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 8002464:	2308      	movs	r3, #8
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e010      	b.n	800248c <crc4+0x90>
			if (n_rem & (0x8000)) {
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <crc4+0x84>
				n_rem = (n_rem << 1) ^ 0x3000;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e002      	b.n	8002486 <crc4+0x8a>
			} else {
				n_rem = (n_rem << 1);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3b01      	subs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1eb      	bne.n	800246a <crc4+0x6e>
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b0f      	cmp	r3, #15
 800249c:	ddc2      	ble.n	8002424 <crc4+0x28>
			}
		}
	}
	n_rem= (0x000F & (n_rem >> 12)); // final 4-bit reminder is CRC code
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	0b1b      	lsrs	r3, r3, #12
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	613b      	str	r3, [r7, #16]
	n_prom[7]=crc_read; // restore the crc_read to its original place
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	331c      	adds	r3, #28
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	601a      	str	r2, [r3, #0]
	return (n_rem ^ 0x0);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	b2db      	uxtb	r3, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_MspInit+0x4c>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_MspInit+0x4c>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_MspInit+0x4c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_MspInit+0x4c>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <HAL_MspInit+0x4c>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_MspInit+0x4c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_I2C_MspInit+0x84>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d12b      	bne.n	800258a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_I2C_MspInit+0x88>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <HAL_I2C_MspInit+0x88>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_I2C_MspInit+0x88>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002552:	2312      	movs	r3, #18
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800255e:	2304      	movs	r3, #4
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	480c      	ldr	r0, [pc, #48]	; (800259c <HAL_I2C_MspInit+0x8c>)
 800256a:	f002 f8c3 	bl	80046f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_I2C_MspInit+0x88>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_I2C_MspInit+0x88>)
 8002578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_I2C_MspInit+0x88>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40005400 	.word	0x40005400
 8002598:	40023800 	.word	0x40023800
 800259c:	40020400 	.word	0x40020400

080025a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a50      	ldr	r2, [pc, #320]	; (8002700 <HAL_SPI_MspInit+0x160>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d14a      	bne.n	8002658 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
 80025c6:	4b4f      	ldr	r3, [pc, #316]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80025cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a47      	ldr	r2, [pc, #284]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b45      	ldr	r3, [pc, #276]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_SPI_MspInit+0x164>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a40      	ldr	r2, [pc, #256]	; (8002704 <HAL_SPI_MspInit+0x164>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <HAL_SPI_MspInit+0x164>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002616:	2320      	movs	r3, #32
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002626:	2305      	movs	r3, #5
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	4835      	ldr	r0, [pc, #212]	; (8002708 <HAL_SPI_MspInit+0x168>)
 8002632:	f002 f85f 	bl	80046f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002636:	2330      	movs	r3, #48	; 0x30
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002646:	2305      	movs	r3, #5
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	482e      	ldr	r0, [pc, #184]	; (800270c <HAL_SPI_MspInit+0x16c>)
 8002652:	f002 f84f 	bl	80046f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002656:	e04f      	b.n	80026f8 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2c      	ldr	r2, [pc, #176]	; (8002710 <HAL_SPI_MspInit+0x170>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d14a      	bne.n	80026f8 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_SPI_MspInit+0x164>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <HAL_SPI_MspInit+0x164>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_SPI_MspInit+0x164>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_SPI_MspInit+0x164>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_SPI_MspInit+0x164>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_SPI_MspInit+0x164>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_SPI_MspInit+0x164>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026b6:	230c      	movs	r3, #12
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026c6:	2305      	movs	r3, #5
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ce:	4619      	mov	r1, r3
 80026d0:	4810      	ldr	r0, [pc, #64]	; (8002714 <HAL_SPI_MspInit+0x174>)
 80026d2:	f002 f80f 	bl	80046f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e8:	2305      	movs	r3, #5
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	4806      	ldr	r0, [pc, #24]	; (800270c <HAL_SPI_MspInit+0x16c>)
 80026f4:	f001 fffe 	bl	80046f4 <HAL_GPIO_Init>
}
 80026f8:	bf00      	nop
 80026fa:	3738      	adds	r7, #56	; 0x38
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40013000 	.word	0x40013000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40003800 	.word	0x40003800
 8002714:	40020800 	.word	0x40020800

08002718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	; 0x30
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a44      	ldr	r2, [pc, #272]	; (8002848 <HAL_TIM_Base_MspInit+0x130>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10e      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a42      	ldr	r2, [pc, #264]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002756:	e073      	b.n	8002840 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <HAL_TIM_Base_MspInit+0x138>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d134      	bne.n	80027cc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a38      	ldr	r2, [pc, #224]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b36      	ldr	r3, [pc, #216]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a31      	ldr	r2, [pc, #196]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800279a:	2303      	movs	r3, #3
 800279c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027aa:	2302      	movs	r3, #2
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 031c 	add.w	r3, r7, #28
 80027b2:	4619      	mov	r1, r3
 80027b4:	4827      	ldr	r0, [pc, #156]	; (8002854 <HAL_TIM_Base_MspInit+0x13c>)
 80027b6:	f001 ff9d 	bl	80046f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	201d      	movs	r0, #29
 80027c0:	f001 fecf 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027c4:	201d      	movs	r0, #29
 80027c6:	f001 fee8 	bl	800459a <HAL_NVIC_EnableIRQ>
}
 80027ca:	e039      	b.n	8002840 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM4)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_TIM_Base_MspInit+0x140>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d134      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_TIM_Base_MspInit+0x134>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800280e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002820:	2302      	movs	r3, #2
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	480c      	ldr	r0, [pc, #48]	; (800285c <HAL_TIM_Base_MspInit+0x144>)
 800282c:	f001 ff62 	bl	80046f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2100      	movs	r1, #0
 8002834:	201e      	movs	r0, #30
 8002836:	f001 fe94 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800283a:	201e      	movs	r0, #30
 800283c:	f001 fead 	bl	800459a <HAL_NVIC_EnableIRQ>
}
 8002840:	bf00      	nop
 8002842:	3730      	adds	r7, #48	; 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40010000 	.word	0x40010000
 800284c:	40023800 	.word	0x40023800
 8002850:	40000400 	.word	0x40000400
 8002854:	40020400 	.word	0x40020400
 8002858:	40000800 	.word	0x40000800
 800285c:	40020c00 	.word	0x40020c00

08002860 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d10d      	bne.n	800288e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_TIM_PWM_MspInit+0x3c>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_TIM_PWM_MspInit+0x3c>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_TIM_PWM_MspInit+0x3c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800

080028a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a34      	ldr	r2, [pc, #208]	; (8002990 <HAL_TIM_MspPostInit+0xf0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d11f      	bne.n	8002902 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b33      	ldr	r3, [pc, #204]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 80028cc:	f043 0310 	orr.w	r3, r3, #16
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80028de:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4619      	mov	r1, r3
 80028fa:	4827      	ldr	r0, [pc, #156]	; (8002998 <HAL_TIM_MspPostInit+0xf8>)
 80028fc:	f001 fefa 	bl	80046f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002900:	e042      	b.n	8002988 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d13d      	bne.n	8002988 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6313      	str	r3, [r2, #48]	; 0x30
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_TIM_MspPostInit+0xf4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8002944:	f248 0306 	movw	r3, #32774	; 0x8006
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002956:	2301      	movs	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	480e      	ldr	r0, [pc, #56]	; (800299c <HAL_TIM_MspPostInit+0xfc>)
 8002962:	f001 fec7 	bl	80046f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800296a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002978:	2301      	movs	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	4807      	ldr	r0, [pc, #28]	; (80029a0 <HAL_TIM_MspPostInit+0x100>)
 8002984:	f001 feb6 	bl	80046f4 <HAL_GPIO_Init>
}
 8002988:	bf00      	nop
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40010000 	.word	0x40010000
 8002994:	40023800 	.word	0x40023800
 8002998:	40021000 	.word	0x40021000
 800299c:	40020000 	.word	0x40020000
 80029a0:	40020400 	.word	0x40020400

080029a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <HAL_UART_MspInit+0x134>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d135      	bne.n	8002a32 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	4b44      	ldr	r3, [pc, #272]	; (8002adc <HAL_UART_MspInit+0x138>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a43      	ldr	r2, [pc, #268]	; (8002adc <HAL_UART_MspInit+0x138>)
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_UART_MspInit+0x138>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <HAL_UART_MspInit+0x138>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a3c      	ldr	r2, [pc, #240]	; (8002adc <HAL_UART_MspInit+0x138>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_UART_MspInit+0x138>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a10:	2307      	movs	r3, #7
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4831      	ldr	r0, [pc, #196]	; (8002ae0 <HAL_UART_MspInit+0x13c>)
 8002a1c:	f001 fe6a 	bl	80046f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	2025      	movs	r0, #37	; 0x25
 8002a26:	f001 fd9c 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a2a:	2025      	movs	r0, #37	; 0x25
 8002a2c:	f001 fdb5 	bl	800459a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a30:	e04e      	b.n	8002ad0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <HAL_UART_MspInit+0x140>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d149      	bne.n	8002ad0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a25      	ldr	r2, [pc, #148]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	6313      	str	r3, [r2, #48]	; 0x30
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_UART_MspInit+0x138>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a90:	2308      	movs	r3, #8
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <HAL_UART_MspInit+0x13c>)
 8002aac:	f001 fe22 	bl	80046f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4807      	ldr	r0, [pc, #28]	; (8002ae8 <HAL_UART_MspInit+0x144>)
 8002acc:	f001 fe12 	bl	80046f4 <HAL_GPIO_Init>
}
 8002ad0:	bf00      	nop
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40011000 	.word	0x40011000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40004400 	.word	0x40004400
 8002ae8:	40020c00 	.word	0x40020c00

08002aec <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	ed87 0a03 	vstr	s0, [r7, #12]
 8002af6:	edc7 0a02 	vstr	s1, [r7, #8]
 8002afa:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002afe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0e:	d501      	bpl.n	8002b14 <limit+0x28>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	e00b      	b.n	8002b2c <limit+0x40>
 8002b14:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	dd01      	ble.n	8002b2a <limit+0x3e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	e000      	b.n	8002b2c <limit+0x40>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	ee07 3a90 	vmov	s15, r3
}
 8002b30:	eeb0 0a67 	vmov.f32	s0, s15
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <ctl_motors_speed+0x34>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <ctl_motors_speed+0x34>)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002b5a:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <ctl_motors_speed+0x34>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <ctl_motors_speed+0x34>)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000

08002b78 <calc_angles>:

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles() {
 8002b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b7c:	af00      	add	r7, sp, #0
  // Angle calculation using integration
  gyro_angle[X] += (g_gx / (FREQ * SSF_GYRO));
 8002b7e:	4bd0      	ldr	r3, [pc, #832]	; (8002ec0 <calc_angles+0x348>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fce0 	bl	8000548 <__aeabi_f2d>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	4bcd      	ldr	r3, [pc, #820]	; (8002ec4 <calc_angles+0x34c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fcd9 	bl	8000548 <__aeabi_f2d>
 8002b96:	a3c2      	add	r3, pc, #776	; (adr r3, 8002ea0 <calc_angles+0x328>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fe56 	bl	800084c <__aeabi_ddiv>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fb70 	bl	800028c <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fd fff8 	bl	8000ba8 <__aeabi_d2f>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4ac1      	ldr	r2, [pc, #772]	; (8002ec0 <calc_angles+0x348>)
 8002bbc:	6013      	str	r3, [r2, #0]
  gyro_angle[Y] += (-g_gy / (FREQ * SSF_GYRO)); // Change sign to match the accelerometer's one
 8002bbe:	4bc0      	ldr	r3, [pc, #768]	; (8002ec0 <calc_angles+0x348>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fcc0 	bl	8000548 <__aeabi_f2d>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	460d      	mov	r5, r1
 8002bcc:	4bbe      	ldr	r3, [pc, #760]	; (8002ec8 <calc_angles+0x350>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	eef1 7a67 	vneg.f32	s15, s15
 8002bd6:	ee17 3a90 	vmov	r3, s15
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fcb4 	bl	8000548 <__aeabi_f2d>
 8002be0:	a3af      	add	r3, pc, #700	; (adr r3, 8002ea0 <calc_angles+0x328>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fe31 	bl	800084c <__aeabi_ddiv>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd fb4b 	bl	800028c <__adddf3>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ffd3 	bl	8000ba8 <__aeabi_d2f>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4aae      	ldr	r2, [pc, #696]	; (8002ec0 <calc_angles+0x348>)
 8002c06:	6053      	str	r3, [r2, #4]

  // Transfer roll to pitch if IMU has yawed
  gyro_angle[Y] += gyro_angle[X] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002c08:	4bad      	ldr	r3, [pc, #692]	; (8002ec0 <calc_angles+0x348>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fc9b 	bl	8000548 <__aeabi_f2d>
 8002c12:	4604      	mov	r4, r0
 8002c14:	460d      	mov	r5, r1
 8002c16:	4baa      	ldr	r3, [pc, #680]	; (8002ec0 <calc_angles+0x348>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc94 	bl	8000548 <__aeabi_f2d>
 8002c20:	4680      	mov	r8, r0
 8002c22:	4689      	mov	r9, r1
 8002c24:	4ba9      	ldr	r3, [pc, #676]	; (8002ecc <calc_angles+0x354>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc8d 	bl	8000548 <__aeabi_f2d>
 8002c2e:	a39e      	add	r3, pc, #632	; (adr r3, 8002ea8 <calc_angles+0x330>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fce0 	bl	80005f8 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	ec43 2b17 	vmov	d7, r2, r3
 8002c40:	eeb0 0a47 	vmov.f32	s0, s14
 8002c44:	eef0 0a67 	vmov.f32	s1, s15
 8002c48:	f006 fd92 	bl	8009770 <sin>
 8002c4c:	ec53 2b10 	vmov	r2, r3, d0
 8002c50:	4640      	mov	r0, r8
 8002c52:	4649      	mov	r1, r9
 8002c54:	f7fd fcd0 	bl	80005f8 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4629      	mov	r1, r5
 8002c60:	f7fd fb14 	bl	800028c <__adddf3>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd ff9c 	bl	8000ba8 <__aeabi_d2f>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4a93      	ldr	r2, [pc, #588]	; (8002ec0 <calc_angles+0x348>)
 8002c74:	6053      	str	r3, [r2, #4]
  gyro_angle[X] -= gyro_angle[Y] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002c76:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <calc_angles+0x348>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc64 	bl	8000548 <__aeabi_f2d>
 8002c80:	4604      	mov	r4, r0
 8002c82:	460d      	mov	r5, r1
 8002c84:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <calc_angles+0x348>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc5d 	bl	8000548 <__aeabi_f2d>
 8002c8e:	4680      	mov	r8, r0
 8002c90:	4689      	mov	r9, r1
 8002c92:	4b8e      	ldr	r3, [pc, #568]	; (8002ecc <calc_angles+0x354>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc56 	bl	8000548 <__aeabi_f2d>
 8002c9c:	a382      	add	r3, pc, #520	; (adr r3, 8002ea8 <calc_angles+0x330>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd fca9 	bl	80005f8 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	ec43 2b17 	vmov	d7, r2, r3
 8002cae:	eeb0 0a47 	vmov.f32	s0, s14
 8002cb2:	eef0 0a67 	vmov.f32	s1, s15
 8002cb6:	f006 fd5b 	bl	8009770 <sin>
 8002cba:	ec53 2b10 	vmov	r2, r3, d0
 8002cbe:	4640      	mov	r0, r8
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	f7fd fc99 	bl	80005f8 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd fadb 	bl	8000288 <__aeabi_dsub>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd ff65 	bl	8000ba8 <__aeabi_d2f>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a77      	ldr	r2, [pc, #476]	; (8002ec0 <calc_angles+0x348>)
 8002ce2:	6013      	str	r3, [r2, #0]

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  acc_total_vector = sqrt(pow(g_ax, 2) + pow(g_ay, 2) + pow(g_az, 2));
 8002ce4:	4b7a      	ldr	r3, [pc, #488]	; (8002ed0 <calc_angles+0x358>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc2d 	bl	8000548 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002eb0 <calc_angles+0x338>
 8002cf6:	ec43 2b10 	vmov	d0, r2, r3
 8002cfa:	f006 fdc5 	bl	8009888 <pow>
 8002cfe:	ec55 4b10 	vmov	r4, r5, d0
 8002d02:	4b74      	ldr	r3, [pc, #464]	; (8002ed4 <calc_angles+0x35c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc1e 	bl	8000548 <__aeabi_f2d>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8002eb0 <calc_angles+0x338>
 8002d14:	ec43 2b10 	vmov	d0, r2, r3
 8002d18:	f006 fdb6 	bl	8009888 <pow>
 8002d1c:	ec53 2b10 	vmov	r2, r3, d0
 8002d20:	4620      	mov	r0, r4
 8002d22:	4629      	mov	r1, r5
 8002d24:	f7fd fab2 	bl	800028c <__adddf3>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	461d      	mov	r5, r3
 8002d30:	4b69      	ldr	r3, [pc, #420]	; (8002ed8 <calc_angles+0x360>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fc07 	bl	8000548 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8002eb0 <calc_angles+0x338>
 8002d42:	ec43 2b10 	vmov	d0, r2, r3
 8002d46:	f006 fd9f 	bl	8009888 <pow>
 8002d4a:	ec53 2b10 	vmov	r2, r3, d0
 8002d4e:	4620      	mov	r0, r4
 8002d50:	4629      	mov	r1, r5
 8002d52:	f7fd fa9b 	bl	800028c <__adddf3>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	ec43 2b17 	vmov	d7, r2, r3
 8002d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d62:	eef0 0a67 	vmov.f32	s1, s15
 8002d66:	f006 fdff 	bl	8009968 <sqrt>
 8002d6a:	ec53 2b10 	vmov	r2, r3, d0
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd fef1 	bl	8000b58 <__aeabi_d2iz>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <calc_angles+0x364>)
 8002d7a:	6013      	str	r3, [r2, #0]

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(g_ax) < acc_total_vector) {
 8002d7c:	4b54      	ldr	r3, [pc, #336]	; (8002ed0 <calc_angles+0x358>)
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d86:	ee17 3a90 	vmov	r3, s15
 8002d8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002d8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002d92:	4b52      	ldr	r3, [pc, #328]	; (8002edc <calc_angles+0x364>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	da24      	bge.n	8002de4 <calc_angles+0x26c>
    acc_angle[X] = asin((float)g_ay / acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <calc_angles+0x35c>)
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <calc_angles+0x364>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002db0:	ee16 0a90 	vmov	r0, s13
 8002db4:	f7fd fbc8 	bl	8000548 <__aeabi_f2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	ec43 2b10 	vmov	d0, r2, r3
 8002dc0:	f006 fd2e 	bl	8009820 <asin>
 8002dc4:	ec51 0b10 	vmov	r0, r1, d0
 8002dc8:	a33b      	add	r3, pc, #236	; (adr r3, 8002eb8 <calc_angles+0x340>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fc13 	bl	80005f8 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd fee5 	bl	8000ba8 <__aeabi_d2f>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a3f      	ldr	r2, [pc, #252]	; (8002ee0 <calc_angles+0x368>)
 8002de2:	6013      	str	r3, [r2, #0]
  }

  if (abs(g_ay) < acc_total_vector) {
 8002de4:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <calc_angles+0x35c>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dee:	ee17 3a90 	vmov	r3, s15
 8002df2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002df6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002dfa:	4b38      	ldr	r3, [pc, #224]	; (8002edc <calc_angles+0x364>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	da24      	bge.n	8002e4c <calc_angles+0x2d4>
    acc_angle[Y] = asin((float)g_ax / acc_total_vector) * (180 / M_PI);
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <calc_angles+0x358>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <calc_angles+0x364>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e18:	ee16 0a90 	vmov	r0, s13
 8002e1c:	f7fd fb94 	bl	8000548 <__aeabi_f2d>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	ec43 2b10 	vmov	d0, r2, r3
 8002e28:	f006 fcfa 	bl	8009820 <asin>
 8002e2c:	ec51 0b10 	vmov	r0, r1, d0
 8002e30:	a321      	add	r3, pc, #132	; (adr r3, 8002eb8 <calc_angles+0x340>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fbdf 	bl	80005f8 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fd feb1 	bl	8000ba8 <__aeabi_d2f>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <calc_angles+0x368>)
 8002e4a:	6053      	str	r3, [r2, #4]
  }

  if (initialized == 1) {
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <calc_angles+0x36c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d178      	bne.n	8002f46 <calc_angles+0x3ce>
    // Correct the drift of the gyro with the accelerometer
    gyro_angle[X] = gyro_angle[X] * 0.5 + acc_angle[X] * 0.5;
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <calc_angles+0x348>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb75 	bl	8000548 <__aeabi_f2d>
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <calc_angles+0x370>)
 8002e64:	f7fd fbc8 	bl	80005f8 <__aeabi_dmul>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	461d      	mov	r5, r3
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <calc_angles+0x368>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb67 	bl	8000548 <__aeabi_f2d>
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <calc_angles+0x370>)
 8002e80:	f7fd fbba 	bl	80005f8 <__aeabi_dmul>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4620      	mov	r0, r4
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	f7fd f9fe 	bl	800028c <__adddf3>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	e028      	b.n	8002eec <calc_angles+0x374>
 8002e9a:	bf00      	nop
 8002e9c:	f3af 8000 	nop.w
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	40c99600 	.word	0x40c99600
 8002ea8:	fb7aa1c6 	.word	0xfb7aa1c6
 8002eac:	3eb65a3c 	.word	0x3eb65a3c
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	40000000 	.word	0x40000000
 8002eb8:	1a63c1f8 	.word	0x1a63c1f8
 8002ebc:	404ca5dc 	.word	0x404ca5dc
 8002ec0:	20000694 	.word	0x20000694
 8002ec4:	20000688 	.word	0x20000688
 8002ec8:	2000068c 	.word	0x2000068c
 8002ecc:	20000690 	.word	0x20000690
 8002ed0:	2000067c 	.word	0x2000067c
 8002ed4:	20000680 	.word	0x20000680
 8002ed8:	20000684 	.word	0x20000684
 8002edc:	200006b8 	.word	0x200006b8
 8002ee0:	200006a0 	.word	0x200006a0
 8002ee4:	200006bc 	.word	0x200006bc
 8002ee8:	3fe00000 	.word	0x3fe00000
 8002eec:	f7fd fe5c 	bl	8000ba8 <__aeabi_d2f>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4a65      	ldr	r2, [pc, #404]	; (8003088 <calc_angles+0x510>)
 8002ef4:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = gyro_angle[Y] * 0.5 + acc_angle[Y] * 0.5;
 8002ef6:	4b64      	ldr	r3, [pc, #400]	; (8003088 <calc_angles+0x510>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fb24 	bl	8000548 <__aeabi_f2d>
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	4b61      	ldr	r3, [pc, #388]	; (800308c <calc_angles+0x514>)
 8002f06:	f7fd fb77 	bl	80005f8 <__aeabi_dmul>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4614      	mov	r4, r2
 8002f10:	461d      	mov	r5, r3
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <calc_angles+0x518>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fb16 	bl	8000548 <__aeabi_f2d>
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <calc_angles+0x514>)
 8002f22:	f7fd fb69 	bl	80005f8 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9ad 	bl	800028c <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fe35 	bl	8000ba8 <__aeabi_d2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a51      	ldr	r2, [pc, #324]	; (8003088 <calc_angles+0x510>)
 8002f42:	6053      	str	r3, [r2, #4]
 8002f44:	e00a      	b.n	8002f5c <calc_angles+0x3e4>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    gyro_angle[X] = acc_angle[X];
 8002f46:	4b52      	ldr	r3, [pc, #328]	; (8003090 <calc_angles+0x518>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a4f      	ldr	r2, [pc, #316]	; (8003088 <calc_angles+0x510>)
 8002f4c:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = acc_angle[Y];
 8002f4e:	4b50      	ldr	r3, [pc, #320]	; (8003090 <calc_angles+0x518>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <calc_angles+0x510>)
 8002f54:	6053      	str	r3, [r2, #4]

    initialized = 1;
 8002f56:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <calc_angles+0x51c>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
  }

  // To dampen the pitch and roll angles a complementary filter is used
  measures[ROLL] = measures[ROLL] * 0.9 + gyro_angle[X] * 0.1;
 8002f5c:	4b4e      	ldr	r3, [pc, #312]	; (8003098 <calc_angles+0x520>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd faf1 	bl	8000548 <__aeabi_f2d>
 8002f66:	a342      	add	r3, pc, #264	; (adr r3, 8003070 <calc_angles+0x4f8>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd fb44 	bl	80005f8 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4b43      	ldr	r3, [pc, #268]	; (8003088 <calc_angles+0x510>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fae3 	bl	8000548 <__aeabi_f2d>
 8002f82:	a33d      	add	r3, pc, #244	; (adr r3, 8003078 <calc_angles+0x500>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fb36 	bl	80005f8 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd f97a 	bl	800028c <__adddf3>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7fd fe02 	bl	8000ba8 <__aeabi_d2f>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <calc_angles+0x520>)
 8002fa8:	6093      	str	r3, [r2, #8]
  measures[PITCH] = measures[PITCH] * 0.9 + gyro_angle[Y] * 0.1;
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <calc_angles+0x520>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd faca 	bl	8000548 <__aeabi_f2d>
 8002fb4:	a32e      	add	r3, pc, #184	; (adr r3, 8003070 <calc_angles+0x4f8>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	f7fd fb1d 	bl	80005f8 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4614      	mov	r4, r2
 8002fc4:	461d      	mov	r5, r3
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <calc_angles+0x510>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fabc 	bl	8000548 <__aeabi_f2d>
 8002fd0:	a329      	add	r3, pc, #164	; (adr r3, 8003078 <calc_angles+0x500>)
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f7fd fb0f 	bl	80005f8 <__aeabi_dmul>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7fd f953 	bl	800028c <__adddf3>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7fd fddb 	bl	8000ba8 <__aeabi_d2f>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4a28      	ldr	r2, [pc, #160]	; (8003098 <calc_angles+0x520>)
 8002ff6:	6053      	str	r3, [r2, #4]
  measures[YAW] = -g_gz / SSF_GYRO; // Store the angular motion for this axis
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <calc_angles+0x524>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	eeb1 7a67 	vneg.f32	s14, s15
 8003002:	eddf 6a27 	vldr	s13, [pc, #156]	; 80030a0 <calc_angles+0x528>
 8003006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <calc_angles+0x520>)
 800300c:	edc3 7a00 	vstr	s15, [r3]

  // Norm [-1, 1]
  g_angle_x = -measures[PITCH];
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <calc_angles+0x520>)
 8003012:	edd3 7a01 	vldr	s15, [r3, #4]
 8003016:	eef1 7a67 	vneg.f32	s15, s15
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <calc_angles+0x52c>)
 800301c:	edc3 7a00 	vstr	s15, [r3]
  g_angle_y = measures[ROLL];
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <calc_angles+0x520>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <calc_angles+0x530>)
 8003026:	6013      	str	r3, [r2, #0]
  g_angle_z += measures[YAW]*0.001;
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <calc_angles+0x534>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fa8b 	bl	8000548 <__aeabi_f2d>
 8003032:	4604      	mov	r4, r0
 8003034:	460d      	mov	r5, r1
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <calc_angles+0x520>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa84 	bl	8000548 <__aeabi_f2d>
 8003040:	a30f      	add	r3, pc, #60	; (adr r3, 8003080 <calc_angles+0x508>)
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f7fd fad7 	bl	80005f8 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4620      	mov	r0, r4
 8003050:	4629      	mov	r1, r5
 8003052:	f7fd f91b 	bl	800028c <__adddf3>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fda3 	bl	8000ba8 <__aeabi_d2f>
 8003062:	4603      	mov	r3, r0
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <calc_angles+0x534>)
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306e:	bf00      	nop
 8003070:	cccccccd 	.word	0xcccccccd
 8003074:	3feccccc 	.word	0x3feccccc
 8003078:	9999999a 	.word	0x9999999a
 800307c:	3fb99999 	.word	0x3fb99999
 8003080:	d2f1a9fc 	.word	0xd2f1a9fc
 8003084:	3f50624d 	.word	0x3f50624d
 8003088:	20000694 	.word	0x20000694
 800308c:	3fe00000 	.word	0x3fe00000
 8003090:	200006a0 	.word	0x200006a0
 8003094:	200006bc 	.word	0x200006bc
 8003098:	200006ac 	.word	0x200006ac
 800309c:	20000690 	.word	0x20000690
 80030a0:	42830000 	.word	0x42830000
 80030a4:	200006c0 	.word	0x200006c0
 80030a8:	200006c4 	.word	0x200006c4
 80030ac:	200006c8 	.word	0x200006c8

080030b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <NMI_Handler+0x4>

080030b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ba:	e7fe      	b.n	80030ba <HardFault_Handler+0x4>

080030bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <MemManage_Handler+0x4>

080030c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030c6:	e7fe      	b.n	80030c6 <BusFault_Handler+0x4>

080030c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030cc:	e7fe      	b.n	80030cc <UsageFault_Handler+0x4>

080030ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030fc:	f001 f912 	bl	8004324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	0000      	movs	r0, r0
	...

08003108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  // Read MPU6050 values
  SD_MPU6050_ReadAll(&hi2c1, &g_dev1);
 800310e:	49d2      	ldr	r1, [pc, #840]	; (8003458 <TIM3_IRQHandler+0x350>)
 8003110:	48d2      	ldr	r0, [pc, #840]	; (800345c <TIM3_IRQHandler+0x354>)
 8003112:	f7fe ffad 	bl	8002070 <SD_MPU6050_ReadAll>

  // Raw 6-axis, remove noise
  g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], g_dev1.Accelerometer_X) + g_ax_offset;
 8003116:	4bd0      	ldr	r3, [pc, #832]	; (8003458 <TIM3_IRQHandler+0x350>)
 8003118:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003124:	eeb0 0a67 	vmov.f32	s0, s15
 8003128:	48cd      	ldr	r0, [pc, #820]	; (8003460 <TIM3_IRQHandler+0x358>)
 800312a:	f7fd ffb4 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 800312e:	eeb0 7a40 	vmov.f32	s14, s0
 8003132:	4bcc      	ldr	r3, [pc, #816]	; (8003464 <TIM3_IRQHandler+0x35c>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	4bca      	ldr	r3, [pc, #808]	; (8003468 <TIM3_IRQHandler+0x360>)
 800313e:	edc3 7a00 	vstr	s15, [r3]
  g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], g_dev1.Accelerometer_Y) + g_ay_offset;
 8003142:	4bc5      	ldr	r3, [pc, #788]	; (8003458 <TIM3_IRQHandler+0x350>)
 8003144:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003150:	eeb0 0a67 	vmov.f32	s0, s15
 8003154:	48c5      	ldr	r0, [pc, #788]	; (800346c <TIM3_IRQHandler+0x364>)
 8003156:	f7fd ff9e 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 800315a:	eeb0 7a40 	vmov.f32	s14, s0
 800315e:	4bc4      	ldr	r3, [pc, #784]	; (8003470 <TIM3_IRQHandler+0x368>)
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003168:	4bc2      	ldr	r3, [pc, #776]	; (8003474 <TIM3_IRQHandler+0x36c>)
 800316a:	edc3 7a00 	vstr	s15, [r3]
  g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], g_dev1.Accelerometer_Z) + g_az_offset;
 800316e:	4bba      	ldr	r3, [pc, #744]	; (8003458 <TIM3_IRQHandler+0x350>)
 8003170:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317c:	eeb0 0a67 	vmov.f32	s0, s15
 8003180:	48bd      	ldr	r0, [pc, #756]	; (8003478 <TIM3_IRQHandler+0x370>)
 8003182:	f7fd ff88 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 8003186:	eeb0 7a40 	vmov.f32	s14, s0
 800318a:	4bbc      	ldr	r3, [pc, #752]	; (800347c <TIM3_IRQHandler+0x374>)
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	4bba      	ldr	r3, [pc, #744]	; (8003480 <TIM3_IRQHandler+0x378>)
 8003196:	edc3 7a00 	vstr	s15, [r3]
  g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], g_dev1.Gyroscope_X) + g_gx_offset;
 800319a:	4baf      	ldr	r3, [pc, #700]	; (8003458 <TIM3_IRQHandler+0x350>)
 800319c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a8:	eeb0 0a67 	vmov.f32	s0, s15
 80031ac:	48b5      	ldr	r0, [pc, #724]	; (8003484 <TIM3_IRQHandler+0x37c>)
 80031ae:	f7fd ff72 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 80031b2:	eeb0 7a40 	vmov.f32	s14, s0
 80031b6:	4bb4      	ldr	r3, [pc, #720]	; (8003488 <TIM3_IRQHandler+0x380>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	4bb2      	ldr	r3, [pc, #712]	; (800348c <TIM3_IRQHandler+0x384>)
 80031c2:	edc3 7a00 	vstr	s15, [r3]
  g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], g_dev1.Gyroscope_Y) + g_gy_offset;
 80031c6:	4ba4      	ldr	r3, [pc, #656]	; (8003458 <TIM3_IRQHandler+0x350>)
 80031c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d4:	eeb0 0a67 	vmov.f32	s0, s15
 80031d8:	48ad      	ldr	r0, [pc, #692]	; (8003490 <TIM3_IRQHandler+0x388>)
 80031da:	f7fd ff5c 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 80031de:	eeb0 7a40 	vmov.f32	s14, s0
 80031e2:	4bac      	ldr	r3, [pc, #688]	; (8003494 <TIM3_IRQHandler+0x38c>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	4baa      	ldr	r3, [pc, #680]	; (8003498 <TIM3_IRQHandler+0x390>)
 80031ee:	edc3 7a00 	vstr	s15, [r3]
  g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], g_dev1.Gyroscope_Z) + g_gz_offset;
 80031f2:	4b99      	ldr	r3, [pc, #612]	; (8003458 <TIM3_IRQHandler+0x350>)
 80031f4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003200:	eeb0 0a67 	vmov.f32	s0, s15
 8003204:	48a5      	ldr	r0, [pc, #660]	; (800349c <TIM3_IRQHandler+0x394>)
 8003206:	f7fd ff46 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 800320a:	eeb0 7a40 	vmov.f32	s14, s0
 800320e:	4ba4      	ldr	r3, [pc, #656]	; (80034a0 <TIM3_IRQHandler+0x398>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	4ba2      	ldr	r3, [pc, #648]	; (80034a4 <TIM3_IRQHandler+0x39c>)
 800321a:	edc3 7a00 	vstr	s15, [r3]

  calc_angles();
 800321e:	f7ff fcab 	bl	8002b78 <calc_angles>

  g_gyro_x = limit(g_gx, -2000, 2000) / 2000;
 8003222:	4b9a      	ldr	r3, [pc, #616]	; (800348c <TIM3_IRQHandler+0x384>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 80034a8 <TIM3_IRQHandler+0x3a0>
 800322c:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80034ac <TIM3_IRQHandler+0x3a4>
 8003230:	eeb0 0a67 	vmov.f32	s0, s15
 8003234:	f7ff fc5a 	bl	8002aec <limit>
 8003238:	eeb0 7a40 	vmov.f32	s14, s0
 800323c:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80034a8 <TIM3_IRQHandler+0x3a0>
 8003240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003244:	4b9a      	ldr	r3, [pc, #616]	; (80034b0 <TIM3_IRQHandler+0x3a8>)
 8003246:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_y = limit(g_gy, -2000, 2000) / 2000;
 800324a:	4b93      	ldr	r3, [pc, #588]	; (8003498 <TIM3_IRQHandler+0x390>)
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ed9f 1a95 	vldr	s2, [pc, #596]	; 80034a8 <TIM3_IRQHandler+0x3a0>
 8003254:	eddf 0a95 	vldr	s1, [pc, #596]	; 80034ac <TIM3_IRQHandler+0x3a4>
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	f7ff fc46 	bl	8002aec <limit>
 8003260:	eeb0 7a40 	vmov.f32	s14, s0
 8003264:	eddf 6a90 	vldr	s13, [pc, #576]	; 80034a8 <TIM3_IRQHandler+0x3a0>
 8003268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326c:	4b91      	ldr	r3, [pc, #580]	; (80034b4 <TIM3_IRQHandler+0x3ac>)
 800326e:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_z = limit(g_gz, -2000, 2000) / 2000;
 8003272:	4b8c      	ldr	r3, [pc, #560]	; (80034a4 <TIM3_IRQHandler+0x39c>)
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 80034a8 <TIM3_IRQHandler+0x3a0>
 800327c:	eddf 0a8b 	vldr	s1, [pc, #556]	; 80034ac <TIM3_IRQHandler+0x3a4>
 8003280:	eeb0 0a67 	vmov.f32	s0, s15
 8003284:	f7ff fc32 	bl	8002aec <limit>
 8003288:	eeb0 7a40 	vmov.f32	s14, s0
 800328c:	eddf 6a86 	vldr	s13, [pc, #536]	; 80034a8 <TIM3_IRQHandler+0x3a0>
 8003290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003294:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <TIM3_IRQHandler+0x3b0>)
 8003296:	edc3 7a00 	vstr	s15, [r3]

  // Control pitch, roll, yaw using offsets
  float angle_x = limit(g_angle_x, -90, 90) / 90 - 0.01*g_pitch;
 800329a:	4b88      	ldr	r3, [pc, #544]	; (80034bc <TIM3_IRQHandler+0x3b4>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ed9f 1a87 	vldr	s2, [pc, #540]	; 80034c0 <TIM3_IRQHandler+0x3b8>
 80032a4:	eddf 0a87 	vldr	s1, [pc, #540]	; 80034c4 <TIM3_IRQHandler+0x3bc>
 80032a8:	eeb0 0a67 	vmov.f32	s0, s15
 80032ac:	f7ff fc1e 	bl	8002aec <limit>
 80032b0:	eef0 7a40 	vmov.f32	s15, s0
 80032b4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80034c0 <TIM3_IRQHandler+0x3b8>
 80032b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032bc:	ee16 0a90 	vmov	r0, s13
 80032c0:	f7fd f942 	bl	8000548 <__aeabi_f2d>
 80032c4:	4604      	mov	r4, r0
 80032c6:	460d      	mov	r5, r1
 80032c8:	4b7f      	ldr	r3, [pc, #508]	; (80034c8 <TIM3_IRQHandler+0x3c0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f93b 	bl	8000548 <__aeabi_f2d>
 80032d2:	a35f      	add	r3, pc, #380	; (adr r3, 8003450 <TIM3_IRQHandler+0x348>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fd f98e 	bl	80005f8 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fc ffd0 	bl	8000288 <__aeabi_dsub>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fd fc5a 	bl	8000ba8 <__aeabi_d2f>
 80032f4:	4603      	mov	r3, r0
 80032f6:	60fb      	str	r3, [r7, #12]
  float angle_y = limit(g_angle_y, -90, 90) / 90 - 0.01*g_roll;
 80032f8:	4b74      	ldr	r3, [pc, #464]	; (80034cc <TIM3_IRQHandler+0x3c4>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	ed9f 1a70 	vldr	s2, [pc, #448]	; 80034c0 <TIM3_IRQHandler+0x3b8>
 8003302:	eddf 0a70 	vldr	s1, [pc, #448]	; 80034c4 <TIM3_IRQHandler+0x3bc>
 8003306:	eeb0 0a67 	vmov.f32	s0, s15
 800330a:	f7ff fbef 	bl	8002aec <limit>
 800330e:	eef0 7a40 	vmov.f32	s15, s0
 8003312:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80034c0 <TIM3_IRQHandler+0x3b8>
 8003316:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800331a:	ee16 0a90 	vmov	r0, s13
 800331e:	f7fd f913 	bl	8000548 <__aeabi_f2d>
 8003322:	4604      	mov	r4, r0
 8003324:	460d      	mov	r5, r1
 8003326:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <TIM3_IRQHandler+0x3c8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f90c 	bl	8000548 <__aeabi_f2d>
 8003330:	a347      	add	r3, pc, #284	; (adr r3, 8003450 <TIM3_IRQHandler+0x348>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f95f 	bl	80005f8 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7fc ffa1 	bl	8000288 <__aeabi_dsub>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	f7fd fc2b 	bl	8000ba8 <__aeabi_d2f>
 8003352:	4603      	mov	r3, r0
 8003354:	60bb      	str	r3, [r7, #8]
  float angle_z = limit(g_angle_z, -90, 90) / 90 - 0.01*g_yaw;
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <TIM3_IRQHandler+0x3cc>)
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80034c0 <TIM3_IRQHandler+0x3b8>
 8003360:	eddf 0a58 	vldr	s1, [pc, #352]	; 80034c4 <TIM3_IRQHandler+0x3bc>
 8003364:	eeb0 0a67 	vmov.f32	s0, s15
 8003368:	f7ff fbc0 	bl	8002aec <limit>
 800336c:	eef0 7a40 	vmov.f32	s15, s0
 8003370:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80034c0 <TIM3_IRQHandler+0x3b8>
 8003374:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003378:	ee16 0a90 	vmov	r0, s13
 800337c:	f7fd f8e4 	bl	8000548 <__aeabi_f2d>
 8003380:	4604      	mov	r4, r0
 8003382:	460d      	mov	r5, r1
 8003384:	4b54      	ldr	r3, [pc, #336]	; (80034d8 <TIM3_IRQHandler+0x3d0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8dd 	bl	8000548 <__aeabi_f2d>
 800338e:	a330      	add	r3, pc, #192	; (adr r3, 8003450 <TIM3_IRQHandler+0x348>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f930 	bl	80005f8 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4620      	mov	r0, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	f7fc ff72 	bl	8000288 <__aeabi_dsub>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fd fbfc 	bl	8000ba8 <__aeabi_d2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	607b      	str	r3, [r7, #4]

  if (g_thrust <= -99 && g_yaw <= -99
 80033b4:	4b49      	ldr	r3, [pc, #292]	; (80034dc <TIM3_IRQHandler+0x3d4>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80034e0 <TIM3_IRQHandler+0x3d8>
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	d820      	bhi.n	800340a <TIM3_IRQHandler+0x302>
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <TIM3_IRQHandler+0x3d0>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80034e0 <TIM3_IRQHandler+0x3d8>
 80033d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	d816      	bhi.n	800340a <TIM3_IRQHandler+0x302>
      && g_pitch <= -99 && g_roll >= 98) {
 80033dc:	4b3a      	ldr	r3, [pc, #232]	; (80034c8 <TIM3_IRQHandler+0x3c0>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80034e0 <TIM3_IRQHandler+0x3d8>
 80033e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d80c      	bhi.n	800340a <TIM3_IRQHandler+0x302>
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <TIM3_IRQHandler+0x3c8>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80034e4 <TIM3_IRQHandler+0x3dc>
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	db02      	blt.n	800340a <TIM3_IRQHandler+0x302>
    fly_mode = ready;
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <TIM3_IRQHandler+0x3e0>)
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
  }

  g_conn_lost_counter += 1;
 800340a:	4b38      	ldr	r3, [pc, #224]	; (80034ec <TIM3_IRQHandler+0x3e4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a36      	ldr	r2, [pc, #216]	; (80034ec <TIM3_IRQHandler+0x3e4>)
 8003412:	6013      	str	r3, [r2, #0]
  if (g_conn_lost_counter > MAX_LOST_CONN_COUNTER || g_conn_lost_counter < 0) {
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <TIM3_IRQHandler+0x3e4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b64      	cmp	r3, #100	; 0x64
 800341a:	dc03      	bgt.n	8003424 <TIM3_IRQHandler+0x31c>
 800341c:	4b33      	ldr	r3, [pc, #204]	; (80034ec <TIM3_IRQHandler+0x3e4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	da6b      	bge.n	80034fc <TIM3_IRQHandler+0x3f4>
    g_I_pitch_accumulated = 0;
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <TIM3_IRQHandler+0x3e8>)
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
    g_I_roll_accumulated = 0;
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <TIM3_IRQHandler+0x3ec>)
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
    g_I_yaw_accumulated = 0;
 8003434:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <TIM3_IRQHandler+0x3f0>)
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 800343c:	230f      	movs	r3, #15
 800343e:	220f      	movs	r2, #15
 8003440:	210f      	movs	r1, #15
 8003442:	200f      	movs	r0, #15
 8003444:	f7ff fb7c 	bl	8002b40 <ctl_motors_speed>
    fly_mode = init;
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <TIM3_IRQHandler+0x3e0>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e055      	b.n	80034fc <TIM3_IRQHandler+0x3f4>
 8003450:	47ae147b 	.word	0x47ae147b
 8003454:	3f847ae1 	.word	0x3f847ae1
 8003458:	200004ec 	.word	0x200004ec
 800345c:	200000c0 	.word	0x200000c0
 8003460:	2000036c 	.word	0x2000036c
 8003464:	20000008 	.word	0x20000008
 8003468:	2000067c 	.word	0x2000067c
 800346c:	20000384 	.word	0x20000384
 8003470:	2000000c 	.word	0x2000000c
 8003474:	20000680 	.word	0x20000680
 8003478:	2000039c 	.word	0x2000039c
 800347c:	20000010 	.word	0x20000010
 8003480:	20000684 	.word	0x20000684
 8003484:	200003b4 	.word	0x200003b4
 8003488:	20000014 	.word	0x20000014
 800348c:	20000688 	.word	0x20000688
 8003490:	200003cc 	.word	0x200003cc
 8003494:	20000018 	.word	0x20000018
 8003498:	2000068c 	.word	0x2000068c
 800349c:	200003e4 	.word	0x200003e4
 80034a0:	2000001c 	.word	0x2000001c
 80034a4:	20000690 	.word	0x20000690
 80034a8:	44fa0000 	.word	0x44fa0000
 80034ac:	c4fa0000 	.word	0xc4fa0000
 80034b0:	200006cc 	.word	0x200006cc
 80034b4:	200006d0 	.word	0x200006d0
 80034b8:	200006d4 	.word	0x200006d4
 80034bc:	200006c0 	.word	0x200006c0
 80034c0:	42b40000 	.word	0x42b40000
 80034c4:	c2b40000 	.word	0xc2b40000
 80034c8:	20000760 	.word	0x20000760
 80034cc:	200006c4 	.word	0x200006c4
 80034d0:	20000764 	.word	0x20000764
 80034d4:	200006c8 	.word	0x200006c8
 80034d8:	20000768 	.word	0x20000768
 80034dc:	2000075c 	.word	0x2000075c
 80034e0:	c2c60000 	.word	0xc2c60000
 80034e4:	42c40000 	.word	0x42c40000
 80034e8:	200006d8 	.word	0x200006d8
 80034ec:	20000004 	.word	0x20000004
 80034f0:	200006e4 	.word	0x200006e4
 80034f4:	200006f4 	.word	0x200006f4
 80034f8:	20000704 	.word	0x20000704
  }

  switch (fly_mode) {
 80034fc:	4b60      	ldr	r3, [pc, #384]	; (8003680 <TIM3_IRQHandler+0x578>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b06      	cmp	r3, #6
 8003502:	f200 835a 	bhi.w	8003bba <TIM3_IRQHandler+0xab2>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <TIM3_IRQHandler+0x404>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003529 	.word	0x08003529
 8003510:	0800354f 	.word	0x0800354f
 8003514:	08003595 	.word	0x08003595
 8003518:	080035ab 	.word	0x080035ab
 800351c:	080035c1 	.word	0x080035c1
 8003520:	080035d7 	.word	0x080035d7
 8003524:	080036ad 	.word	0x080036ad
    case init:
      g_I_pitch_accumulated = 0;
 8003528:	4b56      	ldr	r3, [pc, #344]	; (8003684 <TIM3_IRQHandler+0x57c>)
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <TIM3_IRQHandler+0x580>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 8003538:	4b54      	ldr	r3, [pc, #336]	; (800368c <TIM3_IRQHandler+0x584>)
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 8003540:	230f      	movs	r3, #15
 8003542:	220f      	movs	r2, #15
 8003544:	210f      	movs	r1, #15
 8003546:	200f      	movs	r0, #15
 8003548:	f7ff fafa 	bl	8002b40 <ctl_motors_speed>
      break;
 800354c:	e335      	b.n	8003bba <TIM3_IRQHandler+0xab2>
    case ready:
      g_I_pitch_accumulated = 0;
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <TIM3_IRQHandler+0x57c>)
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <TIM3_IRQHandler+0x580>)
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 800355e:	4b4b      	ldr	r3, [pc, #300]	; (800368c <TIM3_IRQHandler+0x584>)
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003566:	f240 2323 	movw	r3, #547	; 0x223
 800356a:	f240 2223 	movw	r2, #547	; 0x223
 800356e:	f240 2123 	movw	r1, #547	; 0x223
 8003572:	f240 2023 	movw	r0, #547	; 0x223
 8003576:	f7ff fae3 	bl	8002b40 <ctl_motors_speed>
      if (g_thrust > 0) {
 800357a:	4b45      	ldr	r3, [pc, #276]	; (8003690 <TIM3_IRQHandler+0x588>)
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003588:	dc00      	bgt.n	800358c <TIM3_IRQHandler+0x484>
        fly_mode = testing_2;
      }

      break;
 800358a:	e316      	b.n	8003bba <TIM3_IRQHandler+0xab2>
        fly_mode = testing_2;
 800358c:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <TIM3_IRQHandler+0x578>)
 800358e:	2206      	movs	r2, #6
 8003590:	701a      	strb	r2, [r3, #0]
      break;
 8003592:	e312      	b.n	8003bba <TIM3_IRQHandler+0xab2>
    case holding:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003594:	f240 2323 	movw	r3, #547	; 0x223
 8003598:	f240 2223 	movw	r2, #547	; 0x223
 800359c:	f240 2123 	movw	r1, #547	; 0x223
 80035a0:	f240 2023 	movw	r0, #547	; 0x223
 80035a4:	f7ff facc 	bl	8002b40 <ctl_motors_speed>
      break;
 80035a8:	e307      	b.n	8003bba <TIM3_IRQHandler+0xab2>
    case moving:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 80035aa:	f240 2323 	movw	r3, #547	; 0x223
 80035ae:	f240 2223 	movw	r2, #547	; 0x223
 80035b2:	f240 2123 	movw	r1, #547	; 0x223
 80035b6:	f240 2023 	movw	r0, #547	; 0x223
 80035ba:	f7ff fac1 	bl	8002b40 <ctl_motors_speed>
      break;
 80035be:	e2fc      	b.n	8003bba <TIM3_IRQHandler+0xab2>
    case landing:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 80035c0:	f240 2323 	movw	r3, #547	; 0x223
 80035c4:	f240 2223 	movw	r2, #547	; 0x223
 80035c8:	f240 2123 	movw	r1, #547	; 0x223
 80035cc:	f240 2023 	movw	r0, #547	; 0x223
 80035d0:	f7ff fab6 	bl	8002b40 <ctl_motors_speed>
      break;
 80035d4:	e2f1      	b.n	8003bba <TIM3_IRQHandler+0xab2>
    case testing_1:
      g_sig1 = MIN_SPEED + g_thrust;
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <TIM3_IRQHandler+0x588>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003694 <TIM3_IRQHandler+0x58c>
 80035e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035e4:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <TIM3_IRQHandler+0x590>)
 80035e6:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <TIM3_IRQHandler+0x588>)
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003694 <TIM3_IRQHandler+0x58c>
 80035f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <TIM3_IRQHandler+0x594>)
 80035fa:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <TIM3_IRQHandler+0x588>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003694 <TIM3_IRQHandler+0x58c>
 8003608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <TIM3_IRQHandler+0x598>)
 800360e:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <TIM3_IRQHandler+0x588>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003694 <TIM3_IRQHandler+0x58c>
 800361c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <TIM3_IRQHandler+0x59c>)
 8003622:	edc3 7a00 	vstr	s15, [r3]
      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <TIM3_IRQHandler+0x590>)
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <TIM3_IRQHandler+0x594>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <TIM3_IRQHandler+0x598>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <TIM3_IRQHandler+0x59c>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364e:	ee17 3a90 	vmov	r3, s15
 8003652:	ee16 2a10 	vmov	r2, s12
 8003656:	ee16 1a90 	vmov	r1, s13
 800365a:	ee17 0a10 	vmov	r0, s14
 800365e:	f7ff fa6f 	bl	8002b40 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <TIM3_IRQHandler+0x588>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80036a8 <TIM3_IRQHandler+0x5a0>
 800366c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	d900      	bls.n	8003678 <TIM3_IRQHandler+0x570>
        fly_mode = init;
      }

      break;
 8003676:	e2a0      	b.n	8003bba <TIM3_IRQHandler+0xab2>
        fly_mode = init;
 8003678:	4b01      	ldr	r3, [pc, #4]	; (8003680 <TIM3_IRQHandler+0x578>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
      break;
 800367e:	e29c      	b.n	8003bba <TIM3_IRQHandler+0xab2>
 8003680:	200006d8 	.word	0x200006d8
 8003684:	200006e4 	.word	0x200006e4
 8003688:	200006f4 	.word	0x200006f4
 800368c:	20000704 	.word	0x20000704
 8003690:	2000075c 	.word	0x2000075c
 8003694:	4408c000 	.word	0x4408c000
 8003698:	2000070c 	.word	0x2000070c
 800369c:	20000710 	.word	0x20000710
 80036a0:	20000714 	.word	0x20000714
 80036a4:	20000718 	.word	0x20000718
 80036a8:	c2c60000 	.word	0xc2c60000
    case testing_2:
      g_P_pitch = angle_x*g_P_pitch_gain;
 80036ac:	4bd0      	ldr	r3, [pc, #832]	; (80039f0 <TIM3_IRQHandler+0x8e8>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c0:	4bcc      	ldr	r3, [pc, #816]	; (80039f4 <TIM3_IRQHandler+0x8ec>)
 80036c2:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_x*ACCUMULATION_TIME; // 0.005 = 1/FREQ
 80036c6:	4bcc      	ldr	r3, [pc, #816]	; (80039f8 <TIM3_IRQHandler+0x8f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc ff3c 	bl	8000548 <__aeabi_f2d>
 80036d0:	4604      	mov	r4, r0
 80036d2:	460d      	mov	r5, r1
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7fc ff37 	bl	8000548 <__aeabi_f2d>
 80036da:	a3c3      	add	r3, pc, #780	; (adr r3, 80039e8 <TIM3_IRQHandler+0x8e0>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f7fc ff8a 	bl	80005f8 <__aeabi_dmul>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fc fdce 	bl	800028c <__adddf3>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	f7fd fa56 	bl	8000ba8 <__aeabi_d2f>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4abe      	ldr	r2, [pc, #760]	; (80039f8 <TIM3_IRQHandler+0x8f0>)
 8003700:	6013      	str	r3, [r2, #0]
      g_I_pitch = limit(g_I_pitch_accumulated*g_I_pitch_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 8003702:	4bbe      	ldr	r3, [pc, #760]	; (80039fc <TIM3_IRQHandler+0x8f4>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800370e:	4bba      	ldr	r3, [pc, #744]	; (80039f8 <TIM3_IRQHandler+0x8f0>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003718:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 8003a00 <TIM3_IRQHandler+0x8f8>
 800371c:	eddf 0ab9 	vldr	s1, [pc, #740]	; 8003a04 <TIM3_IRQHandler+0x8fc>
 8003720:	eeb0 0a67 	vmov.f32	s0, s15
 8003724:	f7ff f9e2 	bl	8002aec <limit>
 8003728:	eef0 7a40 	vmov.f32	s15, s0
 800372c:	4bb6      	ldr	r3, [pc, #728]	; (8003a08 <TIM3_IRQHandler+0x900>)
 800372e:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = g_gyro_y*g_D_pitch_gain;
 8003732:	4bb6      	ldr	r3, [pc, #728]	; (8003a0c <TIM3_IRQHandler+0x904>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800373e:	4bb4      	ldr	r3, [pc, #720]	; (8003a10 <TIM3_IRQHandler+0x908>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003748:	4bb2      	ldr	r3, [pc, #712]	; (8003a14 <TIM3_IRQHandler+0x90c>)
 800374a:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = angle_y*g_P_roll_gain;
 800374e:	4bb2      	ldr	r3, [pc, #712]	; (8003a18 <TIM3_IRQHandler+0x910>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800375a:	edd7 7a02 	vldr	s15, [r7, #8]
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	4bae      	ldr	r3, [pc, #696]	; (8003a1c <TIM3_IRQHandler+0x914>)
 8003764:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_y*ACCUMULATION_TIME;
 8003768:	4bad      	ldr	r3, [pc, #692]	; (8003a20 <TIM3_IRQHandler+0x918>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc feeb 	bl	8000548 <__aeabi_f2d>
 8003772:	4604      	mov	r4, r0
 8003774:	460d      	mov	r5, r1
 8003776:	68b8      	ldr	r0, [r7, #8]
 8003778:	f7fc fee6 	bl	8000548 <__aeabi_f2d>
 800377c:	a39a      	add	r3, pc, #616	; (adr r3, 80039e8 <TIM3_IRQHandler+0x8e0>)
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f7fc ff39 	bl	80005f8 <__aeabi_dmul>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4620      	mov	r0, r4
 800378c:	4629      	mov	r1, r5
 800378e:	f7fc fd7d 	bl	800028c <__adddf3>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd fa05 	bl	8000ba8 <__aeabi_d2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a9f      	ldr	r2, [pc, #636]	; (8003a20 <TIM3_IRQHandler+0x918>)
 80037a2:	6013      	str	r3, [r2, #0]
      g_I_roll = limit(g_I_roll_accumulated*g_I_roll_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 80037a4:	4b9f      	ldr	r3, [pc, #636]	; (8003a24 <TIM3_IRQHandler+0x91c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b0:	4b9b      	ldr	r3, [pc, #620]	; (8003a20 <TIM3_IRQHandler+0x918>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8003a00 <TIM3_IRQHandler+0x8f8>
 80037be:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003a04 <TIM3_IRQHandler+0x8fc>
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	f7ff f991 	bl	8002aec <limit>
 80037ca:	eef0 7a40 	vmov.f32	s15, s0
 80037ce:	4b96      	ldr	r3, [pc, #600]	; (8003a28 <TIM3_IRQHandler+0x920>)
 80037d0:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = g_gyro_x*g_D_roll_gain;
 80037d4:	4b95      	ldr	r3, [pc, #596]	; (8003a2c <TIM3_IRQHandler+0x924>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e0:	4b93      	ldr	r3, [pc, #588]	; (8003a30 <TIM3_IRQHandler+0x928>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	4b92      	ldr	r3, [pc, #584]	; (8003a34 <TIM3_IRQHandler+0x92c>)
 80037ec:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = angle_z*g_P_yaw_gain;
 80037f0:	4b91      	ldr	r3, [pc, #580]	; (8003a38 <TIM3_IRQHandler+0x930>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003804:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <TIM3_IRQHandler+0x934>)
 8003806:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_z*ACCUMULATION_TIME;
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <TIM3_IRQHandler+0x938>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fc fe9a 	bl	8000548 <__aeabi_f2d>
 8003814:	4604      	mov	r4, r0
 8003816:	460d      	mov	r5, r1
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fc fe95 	bl	8000548 <__aeabi_f2d>
 800381e:	a372      	add	r3, pc, #456	; (adr r3, 80039e8 <TIM3_IRQHandler+0x8e0>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc fee8 	bl	80005f8 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fc fd2c 	bl	800028c <__adddf3>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	f7fd f9b4 	bl	8000ba8 <__aeabi_d2f>
 8003840:	4603      	mov	r3, r0
 8003842:	4a7f      	ldr	r2, [pc, #508]	; (8003a40 <TIM3_IRQHandler+0x938>)
 8003844:	6013      	str	r3, [r2, #0]
      g_I_yaw = limit(g_I_yaw_accumulated*g_I_yaw_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <TIM3_IRQHandler+0x93c>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003852:	4b7b      	ldr	r3, [pc, #492]	; (8003a40 <TIM3_IRQHandler+0x938>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385c:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8003a00 <TIM3_IRQHandler+0x8f8>
 8003860:	eddf 0a68 	vldr	s1, [pc, #416]	; 8003a04 <TIM3_IRQHandler+0x8fc>
 8003864:	eeb0 0a67 	vmov.f32	s0, s15
 8003868:	f7ff f940 	bl	8002aec <limit>
 800386c:	eef0 7a40 	vmov.f32	s15, s0
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <TIM3_IRQHandler+0x940>)
 8003872:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = g_gyro_z*g_D_yaw_gain;
 8003876:	4b75      	ldr	r3, [pc, #468]	; (8003a4c <TIM3_IRQHandler+0x944>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <TIM3_IRQHandler+0x948>)
 8003884:	edd3 7a00 	vldr	s15, [r3]
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	4b71      	ldr	r3, [pc, #452]	; (8003a54 <TIM3_IRQHandler+0x94c>)
 800388e:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + 3 + g_thrust*3;
 8003892:	4b71      	ldr	r3, [pc, #452]	; (8003a58 <TIM3_IRQHandler+0x950>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800389c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003a5c <TIM3_IRQHandler+0x954>
 80038a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ac:	ee17 3a90 	vmov	r3, s15
 80038b0:	603b      	str	r3, [r7, #0]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038bc:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <TIM3_IRQHandler+0x8ec>)
 80038be:	edd3 6a00 	vldr	s13, [r3]
 80038c2:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <TIM3_IRQHandler+0x900>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038cc:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <TIM3_IRQHandler+0x90c>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038da:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <TIM3_IRQHandler+0x914>)
 80038dc:	edd3 6a00 	vldr	s13, [r3]
 80038e0:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <TIM3_IRQHandler+0x920>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038ea:	4b52      	ldr	r3, [pc, #328]	; (8003a34 <TIM3_IRQHandler+0x92c>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <TIM3_IRQHandler+0x934>)
 80038fa:	edd3 6a00 	vldr	s13, [r3]
 80038fe:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <TIM3_IRQHandler+0x940>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003908:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <TIM3_IRQHandler+0x94c>)
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003916:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <TIM3_IRQHandler+0x958>)
 8003918:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <TIM3_IRQHandler+0x8ec>)
 8003928:	edd3 6a00 	vldr	s13, [r3]
 800392c:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <TIM3_IRQHandler+0x900>)
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <TIM3_IRQHandler+0x90c>)
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <TIM3_IRQHandler+0x914>)
 8003946:	edd3 6a00 	vldr	s13, [r3]
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <TIM3_IRQHandler+0x920>)
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003954:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <TIM3_IRQHandler+0x92c>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <TIM3_IRQHandler+0x934>)
 8003964:	edd3 6a00 	vldr	s13, [r3]
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <TIM3_IRQHandler+0x940>)
 800396a:	edd3 7a00 	vldr	s15, [r3]
 800396e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003972:	4b38      	ldr	r3, [pc, #224]	; (8003a54 <TIM3_IRQHandler+0x94c>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003980:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <TIM3_IRQHandler+0x95c>)
 8003982:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <TIM3_IRQHandler+0x8ec>)
 8003992:	edd3 6a00 	vldr	s13, [r3]
 8003996:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <TIM3_IRQHandler+0x900>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <TIM3_IRQHandler+0x90c>)
 80039a2:	edd3 7a00 	vldr	s15, [r3]
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <TIM3_IRQHandler+0x914>)
 80039b0:	edd3 6a00 	vldr	s13, [r3]
 80039b4:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <TIM3_IRQHandler+0x920>)
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <TIM3_IRQHandler+0x92c>)
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <TIM3_IRQHandler+0x934>)
 80039ce:	edd3 6a00 	vldr	s13, [r3]
 80039d2:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <TIM3_IRQHandler+0x940>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <TIM3_IRQHandler+0x94c>)
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	e041      	b.n	8003a68 <TIM3_IRQHandler+0x960>
 80039e4:	f3af 8000 	nop.w
 80039e8:	1eb851ec 	.word	0x1eb851ec
 80039ec:	3fb1eb85 	.word	0x3fb1eb85
 80039f0:	20000020 	.word	0x20000020
 80039f4:	200006dc 	.word	0x200006dc
 80039f8:	200006e4 	.word	0x200006e4
 80039fc:	20000021 	.word	0x20000021
 8003a00:	42c80000 	.word	0x42c80000
 8003a04:	c2c80000 	.word	0xc2c80000
 8003a08:	200006e0 	.word	0x200006e0
 8003a0c:	20000022 	.word	0x20000022
 8003a10:	200006d0 	.word	0x200006d0
 8003a14:	200006e8 	.word	0x200006e8
 8003a18:	20000023 	.word	0x20000023
 8003a1c:	200006ec 	.word	0x200006ec
 8003a20:	200006f4 	.word	0x200006f4
 8003a24:	20000024 	.word	0x20000024
 8003a28:	200006f0 	.word	0x200006f0
 8003a2c:	20000025 	.word	0x20000025
 8003a30:	200006cc 	.word	0x200006cc
 8003a34:	200006f8 	.word	0x200006f8
 8003a38:	20000026 	.word	0x20000026
 8003a3c:	200006fc 	.word	0x200006fc
 8003a40:	20000704 	.word	0x20000704
 8003a44:	20000027 	.word	0x20000027
 8003a48:	20000700 	.word	0x20000700
 8003a4c:	20000028 	.word	0x20000028
 8003a50:	200006d4 	.word	0x200006d4
 8003a54:	20000708 	.word	0x20000708
 8003a58:	2000075c 	.word	0x2000075c
 8003a5c:	44098000 	.word	0x44098000
 8003a60:	2000070c 	.word	0x2000070c
 8003a64:	20000710 	.word	0x20000710
 8003a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <TIM3_IRQHandler+0xb28>)
 8003a72:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a80:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <TIM3_IRQHandler+0xb2c>)
 8003a82:	edd3 6a00 	vldr	s13, [r3]
 8003a86:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <TIM3_IRQHandler+0xb30>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a90:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <TIM3_IRQHandler+0xb34>)
 8003a92:	edd3 7a00 	vldr	s15, [r3]
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a9e:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <TIM3_IRQHandler+0xb38>)
 8003aa0:	edd3 6a00 	vldr	s13, [r3]
 8003aa4:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <TIM3_IRQHandler+0xb3c>)
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003aae:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <TIM3_IRQHandler+0xb40>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003abc:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <TIM3_IRQHandler+0xb44>)
 8003abe:	edd3 6a00 	vldr	s13, [r3]
 8003ac2:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <TIM3_IRQHandler+0xb48>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003acc:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <TIM3_IRQHandler+0xb4c>)
 8003ace:	edd3 7a00 	vldr	s15, [r3]
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ada:	4b5f      	ldr	r3, [pc, #380]	; (8003c58 <TIM3_IRQHandler+0xb50>)
 8003adc:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003ae0:	4b5e      	ldr	r3, [pc, #376]	; (8003c5c <TIM3_IRQHandler+0xb54>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8003c60 <TIM3_IRQHandler+0xb58>
 8003aea:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8003c64 <TIM3_IRQHandler+0xb5c>
 8003aee:	eeb0 0a67 	vmov.f32	s0, s15
 8003af2:	f7fe fffb 	bl	8002aec <limit>
 8003af6:	eef0 7a40 	vmov.f32	s15, s0
 8003afa:	4b58      	ldr	r3, [pc, #352]	; (8003c5c <TIM3_IRQHandler+0xb54>)
 8003afc:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 8003b00:	4b59      	ldr	r3, [pc, #356]	; (8003c68 <TIM3_IRQHandler+0xb60>)
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8003c60 <TIM3_IRQHandler+0xb58>
 8003b0a:	eddf 0a56 	vldr	s1, [pc, #344]	; 8003c64 <TIM3_IRQHandler+0xb5c>
 8003b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b12:	f7fe ffeb 	bl	8002aec <limit>
 8003b16:	eef0 7a40 	vmov.f32	s15, s0
 8003b1a:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <TIM3_IRQHandler+0xb60>)
 8003b1c:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003b20:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <TIM3_IRQHandler+0xb28>)
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8003c60 <TIM3_IRQHandler+0xb58>
 8003b2a:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8003c64 <TIM3_IRQHandler+0xb5c>
 8003b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b32:	f7fe ffdb 	bl	8002aec <limit>
 8003b36:	eef0 7a40 	vmov.f32	s15, s0
 8003b3a:	4b3d      	ldr	r3, [pc, #244]	; (8003c30 <TIM3_IRQHandler+0xb28>)
 8003b3c:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <TIM3_IRQHandler+0xb50>)
 8003b42:	edd3 7a00 	vldr	s15, [r3]
 8003b46:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8003c60 <TIM3_IRQHandler+0xb58>
 8003b4a:	eddf 0a46 	vldr	s1, [pc, #280]	; 8003c64 <TIM3_IRQHandler+0xb5c>
 8003b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b52:	f7fe ffcb 	bl	8002aec <limit>
 8003b56:	eef0 7a40 	vmov.f32	s15, s0
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <TIM3_IRQHandler+0xb50>)
 8003b5c:	edc3 7a00 	vstr	s15, [r3]

      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <TIM3_IRQHandler+0xb54>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <TIM3_IRQHandler+0xb60>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003b74:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <TIM3_IRQHandler+0xb28>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <TIM3_IRQHandler+0xb50>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b88:	ee17 3a90 	vmov	r3, s15
 8003b8c:	ee16 2a10 	vmov	r2, s12
 8003b90:	ee16 1a90 	vmov	r1, s13
 8003b94:	ee17 0a10 	vmov	r0, s14
 8003b98:	f7fe ffd2 	bl	8002b40 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003b9c:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <TIM3_IRQHandler+0xb64>)
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003c70 <TIM3_IRQHandler+0xb68>
 8003ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	d900      	bls.n	8003bb2 <TIM3_IRQHandler+0xaaa>
        fly_mode = init;
      }

      break;
 8003bb0:	e002      	b.n	8003bb8 <TIM3_IRQHandler+0xab0>
        fly_mode = init;
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <TIM3_IRQHandler+0xb6c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
      break;
 8003bb8:	bf00      	nop
  monitor[7] = g_I_yaw;
  monitor[8] = g_D_yaw;
#endif

#if MONITOR == 3
  monitor[0] = g_sig1;
 8003bba:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <TIM3_IRQHandler+0xb54>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2e      	ldr	r2, [pc, #184]	; (8003c78 <TIM3_IRQHandler+0xb70>)
 8003bc0:	6013      	str	r3, [r2, #0]
  monitor[1] = g_sig2;
 8003bc2:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <TIM3_IRQHandler+0xb60>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <TIM3_IRQHandler+0xb70>)
 8003bc8:	6053      	str	r3, [r2, #4]
  monitor[2] = g_sig1 > g_sig2 ? g_sig2 : g_sig1;
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <TIM3_IRQHandler+0xb54>)
 8003bcc:	ed93 7a00 	vldr	s14, [r3]
 8003bd0:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <TIM3_IRQHandler+0xb60>)
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bde:	dd02      	ble.n	8003be6 <TIM3_IRQHandler+0xade>
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <TIM3_IRQHandler+0xb60>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	e001      	b.n	8003bea <TIM3_IRQHandler+0xae2>
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <TIM3_IRQHandler+0xb54>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <TIM3_IRQHandler+0xb70>)
 8003bec:	6093      	str	r3, [r2, #8]
  monitor[3] = g_sig3;
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <TIM3_IRQHandler+0xb28>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <TIM3_IRQHandler+0xb70>)
 8003bf4:	60d3      	str	r3, [r2, #12]
  monitor[4] = g_sig4;
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <TIM3_IRQHandler+0xb50>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <TIM3_IRQHandler+0xb70>)
 8003bfc:	6113      	str	r3, [r2, #16]
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <TIM3_IRQHandler+0xb28>)
 8003c00:	ed93 7a00 	vldr	s14, [r3]
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <TIM3_IRQHandler+0xb50>)
 8003c06:	edd3 7a00 	vldr	s15, [r3]
 8003c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c12:	dd02      	ble.n	8003c1a <TIM3_IRQHandler+0xb12>
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <TIM3_IRQHandler+0xb50>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	e001      	b.n	8003c1e <TIM3_IRQHandler+0xb16>
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <TIM3_IRQHandler+0xb28>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <TIM3_IRQHandler+0xb70>)
 8003c20:	6153      	str	r3, [r2, #20]
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c22:	4816      	ldr	r0, [pc, #88]	; (8003c7c <TIM3_IRQHandler+0xb74>)
 8003c24:	f003 f89a 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c30:	20000714 	.word	0x20000714
 8003c34:	200006dc 	.word	0x200006dc
 8003c38:	200006e0 	.word	0x200006e0
 8003c3c:	200006e8 	.word	0x200006e8
 8003c40:	200006ec 	.word	0x200006ec
 8003c44:	200006f0 	.word	0x200006f0
 8003c48:	200006f8 	.word	0x200006f8
 8003c4c:	200006fc 	.word	0x200006fc
 8003c50:	20000700 	.word	0x20000700
 8003c54:	20000708 	.word	0x20000708
 8003c58:	20000718 	.word	0x20000718
 8003c5c:	2000070c 	.word	0x2000070c
 8003c60:	446cc000 	.word	0x446cc000
 8003c64:	4408c000 	.word	0x4408c000
 8003c68:	20000710 	.word	0x20000710
 8003c6c:	2000075c 	.word	0x2000075c
 8003c70:	c2c60000 	.word	0xc2c60000
 8003c74:	200006d8 	.word	0x200006d8
 8003c78:	2000076c 	.word	0x2000076c
 8003c7c:	20000254 	.word	0x20000254

08003c80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c84:	4802      	ldr	r0, [pc, #8]	; (8003c90 <TIM4_IRQHandler+0x10>)
 8003c86:	f003 f869 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	2000029c 	.word	0x2000029c

08003c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c98:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <USART1_IRQHandler+0x10>)
 8003c9a:	f004 f9d7 	bl	800804c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200002e4 	.word	0x200002e4

08003ca8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <HAL_UART_TxCpltCallback+0x18>)
 8003cb4:	f000 feeb 	bl	8004a8e <HAL_GPIO_TogglePin>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40020000 	.word	0x40020000

08003cc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8003ccc:	4b89      	ldr	r3, [pc, #548]	; (8003ef4 <HAL_UART_RxCpltCallback+0x230>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	4888      	ldr	r0, [pc, #544]	; (8003ef8 <HAL_UART_RxCpltCallback+0x234>)
 8003cd6:	f000 feda 	bl	8004a8e <HAL_GPIO_TogglePin>

  // Serialise control values
  static uint8_t g_control_1st_idx = 0;
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8003cda:	4b88      	ldr	r3, [pc, #544]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce0:	d102      	bne.n	8003ce8 <HAL_UART_RxCpltCallback+0x24>
 8003ce2:	4b87      	ldr	r3, [pc, #540]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8003ce8:	4b84      	ldr	r3, [pc, #528]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2bfe      	cmp	r3, #254	; 0xfe
 8003cee:	d102      	bne.n	8003cf6 <HAL_UART_RxCpltCallback+0x32>
 8003cf0:	4b83      	ldr	r3, [pc, #524]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	701a      	strb	r2, [r3, #0]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8003cf6:	4b81      	ldr	r3, [pc, #516]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003cf8:	789b      	ldrb	r3, [r3, #2]
 8003cfa:	2bfe      	cmp	r3, #254	; 0xfe
 8003cfc:	d102      	bne.n	8003d04 <HAL_UART_RxCpltCallback+0x40>
 8003cfe:	4b80      	ldr	r3, [pc, #512]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d00:	2203      	movs	r2, #3
 8003d02:	701a      	strb	r2, [r3, #0]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8003d04:	4b7d      	ldr	r3, [pc, #500]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d06:	78db      	ldrb	r3, [r3, #3]
 8003d08:	2bfe      	cmp	r3, #254	; 0xfe
 8003d0a:	d102      	bne.n	8003d12 <HAL_UART_RxCpltCallback+0x4e>
 8003d0c:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d0e:	2204      	movs	r2, #4
 8003d10:	701a      	strb	r2, [r3, #0]
  if (g_control[4] == 254) g_control_1st_idx = 5;
 8003d12:	4b7a      	ldr	r3, [pc, #488]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d14:	791b      	ldrb	r3, [r3, #4]
 8003d16:	2bfe      	cmp	r3, #254	; 0xfe
 8003d18:	d102      	bne.n	8003d20 <HAL_UART_RxCpltCallback+0x5c>
 8003d1a:	4b79      	ldr	r3, [pc, #484]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	701a      	strb	r2, [r3, #0]
  if (g_control[5] == 254) g_control_1st_idx = 6;
 8003d20:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d22:	795b      	ldrb	r3, [r3, #5]
 8003d24:	2bfe      	cmp	r3, #254	; 0xfe
 8003d26:	d102      	bne.n	8003d2e <HAL_UART_RxCpltCallback+0x6a>
 8003d28:	4b75      	ldr	r3, [pc, #468]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d2a:	2206      	movs	r2, #6
 8003d2c:	701a      	strb	r2, [r3, #0]
  if (g_control[6] == 254) g_control_1st_idx = 7;
 8003d2e:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d30:	799b      	ldrb	r3, [r3, #6]
 8003d32:	2bfe      	cmp	r3, #254	; 0xfe
 8003d34:	d102      	bne.n	8003d3c <HAL_UART_RxCpltCallback+0x78>
 8003d36:	4b72      	ldr	r3, [pc, #456]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d38:	2207      	movs	r2, #7
 8003d3a:	701a      	strb	r2, [r3, #0]
  if (g_control[7] == 254) g_control_1st_idx = 8;
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d3e:	79db      	ldrb	r3, [r3, #7]
 8003d40:	2bfe      	cmp	r3, #254	; 0xfe
 8003d42:	d102      	bne.n	8003d4a <HAL_UART_RxCpltCallback+0x86>
 8003d44:	4b6e      	ldr	r3, [pc, #440]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d46:	2208      	movs	r2, #8
 8003d48:	701a      	strb	r2, [r3, #0]
  if (g_control[8] == 254) g_control_1st_idx = 9;
 8003d4a:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d4c:	7a1b      	ldrb	r3, [r3, #8]
 8003d4e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d50:	d102      	bne.n	8003d58 <HAL_UART_RxCpltCallback+0x94>
 8003d52:	4b6b      	ldr	r3, [pc, #428]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d54:	2209      	movs	r2, #9
 8003d56:	701a      	strb	r2, [r3, #0]
  if (g_control[9] == 254) g_control_1st_idx = 0;
 8003d58:	4b68      	ldr	r3, [pc, #416]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d5a:	7a5b      	ldrb	r3, [r3, #9]
 8003d5c:	2bfe      	cmp	r3, #254	; 0xfe
 8003d5e:	d102      	bne.n	8003d66 <HAL_UART_RxCpltCallback+0xa2>
 8003d60:	4b67      	ldr	r3, [pc, #412]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]
  g_P_pitch_gain = g_control[g_control_1st_idx];
 8003d66:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b63      	ldr	r3, [pc, #396]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d6e:	5c9a      	ldrb	r2, [r3, r2]
 8003d70:	4b64      	ldr	r3, [pc, #400]	; (8003f04 <HAL_UART_RxCpltCallback+0x240>)
 8003d72:	701a      	strb	r2, [r3, #0]
  g_I_pitch_gain = g_control[(g_control_1st_idx+1)%10];
 8003d74:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	1c59      	adds	r1, r3, #1
 8003d7a:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003d7c:	fb83 2301 	smull	r2, r3, r3, r1
 8003d80:	109a      	asrs	r2, r3, #2
 8003d82:	17cb      	asrs	r3, r1, #31
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	1aca      	subs	r2, r1, r3
 8003d90:	4b5a      	ldr	r3, [pc, #360]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003d92:	5c9a      	ldrb	r2, [r3, r2]
 8003d94:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <HAL_UART_RxCpltCallback+0x248>)
 8003d96:	701a      	strb	r2, [r3, #0]
  g_D_pitch_gain = g_control[(g_control_1st_idx+2)%10];
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	1c99      	adds	r1, r3, #2
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003da0:	fb83 2301 	smull	r2, r3, r3, r1
 8003da4:	109a      	asrs	r2, r3, #2
 8003da6:	17cb      	asrs	r3, r1, #31
 8003da8:	1ad2      	subs	r2, r2, r3
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	1aca      	subs	r2, r1, r3
 8003db4:	4b51      	ldr	r3, [pc, #324]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003db6:	5c9a      	ldrb	r2, [r3, r2]
 8003db8:	4b55      	ldr	r3, [pc, #340]	; (8003f10 <HAL_UART_RxCpltCallback+0x24c>)
 8003dba:	701a      	strb	r2, [r3, #0]
  g_P_roll_gain = g_control[(g_control_1st_idx+3)%10];
 8003dbc:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	1cd9      	adds	r1, r3, #3
 8003dc2:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003dc4:	fb83 2301 	smull	r2, r3, r3, r1
 8003dc8:	109a      	asrs	r2, r3, #2
 8003dca:	17cb      	asrs	r3, r1, #31
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	1aca      	subs	r2, r1, r3
 8003dd8:	4b48      	ldr	r3, [pc, #288]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003dda:	5c9a      	ldrb	r2, [r3, r2]
 8003ddc:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <HAL_UART_RxCpltCallback+0x250>)
 8003dde:	701a      	strb	r2, [r3, #0]
  g_I_roll_gain = g_control[(g_control_1st_idx+4)%10];
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	4b48      	ldr	r3, [pc, #288]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003de8:	fb83 2301 	smull	r2, r3, r3, r1
 8003dec:	109a      	asrs	r2, r3, #2
 8003dee:	17cb      	asrs	r3, r1, #31
 8003df0:	1ad2      	subs	r2, r2, r3
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	1aca      	subs	r2, r1, r3
 8003dfc:	4b3f      	ldr	r3, [pc, #252]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003dfe:	5c9a      	ldrb	r2, [r3, r2]
 8003e00:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <HAL_UART_RxCpltCallback+0x254>)
 8003e02:	701a      	strb	r2, [r3, #0]
  g_D_roll_gain = g_control[(g_control_1st_idx+5)%10];
 8003e04:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	1d59      	adds	r1, r3, #5
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003e0c:	fb83 2301 	smull	r2, r3, r3, r1
 8003e10:	109a      	asrs	r2, r3, #2
 8003e12:	17cb      	asrs	r3, r1, #31
 8003e14:	1ad2      	subs	r2, r2, r3
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	1aca      	subs	r2, r1, r3
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003e22:	5c9a      	ldrb	r2, [r3, r2]
 8003e24:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_UART_RxCpltCallback+0x258>)
 8003e26:	701a      	strb	r2, [r3, #0]
  g_P_yaw_gain = g_control[(g_control_1st_idx+6)%10];
 8003e28:	4b35      	ldr	r3, [pc, #212]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	1d99      	adds	r1, r3, #6
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003e30:	fb83 2301 	smull	r2, r3, r3, r1
 8003e34:	109a      	asrs	r2, r3, #2
 8003e36:	17cb      	asrs	r3, r1, #31
 8003e38:	1ad2      	subs	r2, r2, r3
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	1aca      	subs	r2, r1, r3
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003e46:	5c9a      	ldrb	r2, [r3, r2]
 8003e48:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <HAL_UART_RxCpltCallback+0x25c>)
 8003e4a:	701a      	strb	r2, [r3, #0]
  g_I_yaw_gain = g_control[(g_control_1st_idx+7)%10];
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	1dd9      	adds	r1, r3, #7
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003e54:	fb83 2301 	smull	r2, r3, r3, r1
 8003e58:	109a      	asrs	r2, r3, #2
 8003e5a:	17cb      	asrs	r3, r1, #31
 8003e5c:	1ad2      	subs	r2, r2, r3
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	1aca      	subs	r2, r1, r3
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003e6a:	5c9a      	ldrb	r2, [r3, r2]
 8003e6c:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_UART_RxCpltCallback+0x260>)
 8003e6e:	701a      	strb	r2, [r3, #0]
  g_D_yaw_gain = g_control[(g_control_1st_idx+8)%10];
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <HAL_UART_RxCpltCallback+0x23c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f103 0108 	add.w	r1, r3, #8
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_UART_RxCpltCallback+0x244>)
 8003e7a:	fb83 2301 	smull	r2, r3, r3, r1
 8003e7e:	109a      	asrs	r2, r3, #2
 8003e80:	17cb      	asrs	r3, r1, #31
 8003e82:	1ad2      	subs	r2, r2, r3
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	1aca      	subs	r2, r1, r3
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_UART_RxCpltCallback+0x238>)
 8003e90:	5c9a      	ldrb	r2, [r3, r2]
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_UART_RxCpltCallback+0x264>)
 8003e94:	701a      	strb	r2, [r3, #0]

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003e96:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003e98:	edd3 7a00 	vldr	s15, [r3]
 8003e9c:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003e9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ea2:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003ea4:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003eaa:	ed93 6a03 	vldr	s12, [r3, #12]
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003eb0:	edd3 5a04 	vldr	s11, [r3, #16]
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003eb6:	ed93 5a05 	vldr	s10, [r3, #20]
 8003eba:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003ebc:	edd3 4a06 	vldr	s9, [r3, #24]
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003ec2:	edd3 3a07 	vldr	s7, [r3, #28]
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_UART_RxCpltCallback+0x268>)
 8003ec8:	ed93 4a08 	vldr	s8, [r3, #32]
 8003ecc:	eeb0 3a64 	vmov.f32	s6, s9
 8003ed0:	eef0 2a45 	vmov.f32	s5, s10
 8003ed4:	eeb0 2a65 	vmov.f32	s4, s11
 8003ed8:	eef0 1a46 	vmov.f32	s3, s12
 8003edc:	eeb0 1a66 	vmov.f32	s2, s13
 8003ee0:	eef0 0a47 	vmov.f32	s1, s14
 8003ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee8:	f7fd f99c 	bl	8001224 <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000004 	.word	0x20000004
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	20000570 	.word	0x20000570
 8003f00:	20000790 	.word	0x20000790
 8003f04:	20000020 	.word	0x20000020
 8003f08:	66666667 	.word	0x66666667
 8003f0c:	20000021 	.word	0x20000021
 8003f10:	20000022 	.word	0x20000022
 8003f14:	20000023 	.word	0x20000023
 8003f18:	20000024 	.word	0x20000024
 8003f1c:	20000025 	.word	0x20000025
 8003f20:	20000026 	.word	0x20000026
 8003f24:	20000027 	.word	0x20000027
 8003f28:	20000028 	.word	0x20000028
 8003f2c:	2000076c 	.word	0x2000076c

08003f30 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7f1b      	ldrb	r3, [r3, #28]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d12f      	bne.n	8003fa0 <HAL_TIM_IC_CaptureCallback+0x70>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f44:	488a      	ldr	r0, [pc, #552]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f46:	f000 fd71 	bl	8004a2c <HAL_GPIO_ReadPin>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_TIM_IC_CaptureCallback+0x30>
      pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f50:	2100      	movs	r1, #0
 8003f52:	4888      	ldr	r0, [pc, #544]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f54:	f003 fa30 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b86      	ldr	r3, [pc, #536]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8003f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f64:	4882      	ldr	r0, [pc, #520]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003f66:	f000 fd61 	bl	8004a2c <HAL_GPIO_ReadPin>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d117      	bne.n	8003fa0 <HAL_TIM_IC_CaptureCallback+0x70>
      pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003f70:	2100      	movs	r1, #0
 8003f72:	4880      	ldr	r0, [pc, #512]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003f74:	f003 fa20 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4b7e      	ldr	r3, [pc, #504]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f7e:	605a      	str	r2, [r3, #4]
      int value = pwm_in[1] - pwm_in[0];
 8003f80:	4b7d      	ldr	r3, [pc, #500]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	617b      	str	r3, [r7, #20]
      if (value >= 200 && value < 400) {
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2bc7      	cmp	r3, #199	; 0xc7
 8003f90:	dd06      	ble.n	8003fa0 <HAL_TIM_IC_CaptureCallback+0x70>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003f98:	da02      	bge.n	8003fa0 <HAL_TIM_IC_CaptureCallback+0x70>
        pwm_in[2] = value;
 8003f9a:	4a77      	ldr	r2, [pc, #476]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	6093      	str	r3, [r2, #8]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7f1b      	ldrb	r3, [r3, #28]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d12f      	bne.n	8004008 <HAL_TIM_IC_CaptureCallback+0xd8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8003fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fac:	4870      	ldr	r0, [pc, #448]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fae:	f000 fd3d 	bl	8004a2c <HAL_GPIO_ReadPin>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x98>
      pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003fb8:	2104      	movs	r1, #4
 8003fba:	486e      	ldr	r0, [pc, #440]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fbc:	f003 f9fc 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b6c      	ldr	r3, [pc, #432]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fc6:	60da      	str	r2, [r3, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8003fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fcc:	4868      	ldr	r0, [pc, #416]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003fce:	f000 fd2d 	bl	8004a2c <HAL_GPIO_ReadPin>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d117      	bne.n	8004008 <HAL_TIM_IC_CaptureCallback+0xd8>
      pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8003fd8:	2104      	movs	r1, #4
 8003fda:	4866      	ldr	r0, [pc, #408]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 8003fdc:	f003 f9ec 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b64      	ldr	r3, [pc, #400]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fe6:	611a      	str	r2, [r3, #16]
      int value = pwm_in[4] - pwm_in[3];
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	4b62      	ldr	r3, [pc, #392]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	613b      	str	r3, [r7, #16]
      if (value >= 200 && value < 400) {
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2bc7      	cmp	r3, #199	; 0xc7
 8003ff8:	dd06      	ble.n	8004008 <HAL_TIM_IC_CaptureCallback+0xd8>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004000:	da02      	bge.n	8004008 <HAL_TIM_IC_CaptureCallback+0xd8>
        pwm_in[5] = value;
 8004002:	4a5d      	ldr	r2, [pc, #372]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	6153      	str	r3, [r2, #20]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7f1b      	ldrb	r3, [r3, #28]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d12f      	bne.n	8004070 <HAL_TIM_IC_CaptureCallback+0x140>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 8004010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004014:	4856      	ldr	r0, [pc, #344]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004016:	f000 fd09 	bl	8004a2c <HAL_GPIO_ReadPin>
 800401a:	4603      	mov	r3, r0
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IC_CaptureCallback+0x100>
      pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8004020:	2108      	movs	r1, #8
 8004022:	4854      	ldr	r0, [pc, #336]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004024:	f003 f9c8 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	4b52      	ldr	r3, [pc, #328]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 800402e:	619a      	str	r2, [r3, #24]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8004030:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004034:	484e      	ldr	r0, [pc, #312]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004036:	f000 fcf9 	bl	8004a2c <HAL_GPIO_ReadPin>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d117      	bne.n	8004070 <HAL_TIM_IC_CaptureCallback+0x140>
      pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8004040:	2108      	movs	r1, #8
 8004042:	484c      	ldr	r0, [pc, #304]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004044:	f003 f9b8 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 800404e:	61da      	str	r2, [r3, #28]
      int value = pwm_in[7] - pwm_in[6];
 8004050:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	4b48      	ldr	r3, [pc, #288]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	60fb      	str	r3, [r7, #12]
      if (value >= 200 && value < 400) {
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2bc7      	cmp	r3, #199	; 0xc7
 8004060:	dd06      	ble.n	8004070 <HAL_TIM_IC_CaptureCallback+0x140>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004068:	da02      	bge.n	8004070 <HAL_TIM_IC_CaptureCallback+0x140>
        pwm_in[8] = value;
 800406a:	4a43      	ldr	r2, [pc, #268]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6213      	str	r3, [r2, #32]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7f1b      	ldrb	r3, [r3, #28]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d12f      	bne.n	80040d8 <HAL_TIM_IC_CaptureCallback+0x1a8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8004078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800407c:	483c      	ldr	r0, [pc, #240]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 800407e:	f000 fcd5 	bl	8004a2c <HAL_GPIO_ReadPin>
 8004082:	4603      	mov	r3, r0
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_TIM_IC_CaptureCallback+0x168>
      pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004088:	210c      	movs	r1, #12
 800408a:	483a      	ldr	r0, [pc, #232]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 800408c:	f003 f994 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 8004090:	4603      	mov	r3, r0
 8004092:	461a      	mov	r2, r3
 8004094:	4b38      	ldr	r3, [pc, #224]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8004098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800409c:	4834      	ldr	r0, [pc, #208]	; (8004170 <HAL_TIM_IC_CaptureCallback+0x240>)
 800409e:	f000 fcc5 	bl	8004a2c <HAL_GPIO_ReadPin>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d117      	bne.n	80040d8 <HAL_TIM_IC_CaptureCallback+0x1a8>
      pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 80040a8:	210c      	movs	r1, #12
 80040aa:	4832      	ldr	r0, [pc, #200]	; (8004174 <HAL_TIM_IC_CaptureCallback+0x244>)
 80040ac:	f003 f984 	bl	80073b8 <HAL_TIM_ReadCapturedValue>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
      int value = pwm_in[10] - pwm_in[9];
 80040b8:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040bc:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	60bb      	str	r3, [r7, #8]
      if (value >= 200 && value < 400) {
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2bc7      	cmp	r3, #199	; 0xc7
 80040c8:	dd06      	ble.n	80040d8 <HAL_TIM_IC_CaptureCallback+0x1a8>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80040d0:	da02      	bge.n	80040d8 <HAL_TIM_IC_CaptureCallback+0x1a8>
        pwm_in[11] = value;
 80040d2:	4a29      	ldr	r2, [pc, #164]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
    }
  }

  g_thrust = SimpleKalmanFilter_updateEstimate(&g_filters[6], pwm_in[5] - 300);
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e8:	eeb0 0a67 	vmov.f32	s0, s15
 80040ec:	4823      	ldr	r0, [pc, #140]	; (800417c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80040ee:	f7fc ffd2 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 80040f2:	eef0 7a40 	vmov.f32	s15, s0
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <HAL_TIM_IC_CaptureCallback+0x250>)
 80040f8:	edc3 7a00 	vstr	s15, [r3]
  g_yaw = SimpleKalmanFilter_updateEstimate(&g_filters[7], pwm_in[2] - 300);
 80040fc:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410c:	eeb0 0a67 	vmov.f32	s0, s15
 8004110:	481c      	ldr	r0, [pc, #112]	; (8004184 <HAL_TIM_IC_CaptureCallback+0x254>)
 8004112:	f7fc ffc0 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 8004116:	eef0 7a40 	vmov.f32	s15, s0
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_TIM_IC_CaptureCallback+0x258>)
 800411c:	edc3 7a00 	vstr	s15, [r3]
  g_pitch = SimpleKalmanFilter_updateEstimate(&g_filters[8], pwm_in[8] - 300);
 8004120:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004130:	eeb0 0a67 	vmov.f32	s0, s15
 8004134:	4815      	ldr	r0, [pc, #84]	; (800418c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8004136:	f7fc ffae 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 800413a:	eef0 7a40 	vmov.f32	s15, s0
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <HAL_TIM_IC_CaptureCallback+0x260>)
 8004140:	edc3 7a00 	vstr	s15, [r3]
  g_roll = SimpleKalmanFilter_updateEstimate(&g_filters[9], pwm_in[11] - 300);
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004154:	eeb0 0a67 	vmov.f32	s0, s15
 8004158:	480e      	ldr	r0, [pc, #56]	; (8004194 <HAL_TIM_IC_CaptureCallback+0x264>)
 800415a:	f7fc ff9c 	bl	8001096 <SimpleKalmanFilter_updateEstimate>
 800415e:	eef0 7a40 	vmov.f32	s15, s0
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_TIM_IC_CaptureCallback+0x268>)
 8004164:	edc3 7a00 	vstr	s15, [r3]
  monitor[2] = 0;
  monitor[3] = g_pitch;
  monitor[4] = g_roll;
  monitor[5] = 0;
#endif
}
 8004168:	bf00      	nop
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40020c00 	.word	0x40020c00
 8004174:	2000029c 	.word	0x2000029c
 8004178:	2000071c 	.word	0x2000071c
 800417c:	200003fc 	.word	0x200003fc
 8004180:	2000075c 	.word	0x2000075c
 8004184:	20000414 	.word	0x20000414
 8004188:	20000768 	.word	0x20000768
 800418c:	2000042c 	.word	0x2000042c
 8004190:	20000760 	.word	0x20000760
 8004194:	20000444 	.word	0x20000444
 8004198:	20000764 	.word	0x20000764

0800419c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <_sbrk+0x5c>)
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <_sbrk+0x60>)
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <_sbrk+0x64>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <_sbrk+0x64>)
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <_sbrk+0x68>)
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <_sbrk+0x64>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d207      	bcs.n	80041dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041cc:	f004 fe2e 	bl	8008e2c <__errno>
 80041d0:	4603      	mov	r3, r0
 80041d2:	220c      	movs	r2, #12
 80041d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041da:	e009      	b.n	80041f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <_sbrk+0x64>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	4a05      	ldr	r2, [pc, #20]	; (8004200 <_sbrk+0x64>)
 80041ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20020000 	.word	0x20020000
 80041fc:	00000400 	.word	0x00000400
 8004200:	20000794 	.word	0x20000794
 8004204:	200007b0 	.word	0x200007b0

08004208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <SystemInit+0x20>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <SystemInit+0x20>)
 8004214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800422c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004230:	480d      	ldr	r0, [pc, #52]	; (8004268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004232:	490e      	ldr	r1, [pc, #56]	; (800426c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004234:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004238:	e002      	b.n	8004240 <LoopCopyDataInit>

0800423a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800423a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800423c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800423e:	3304      	adds	r3, #4

08004240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004244:	d3f9      	bcc.n	800423a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004246:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004248:	4c0b      	ldr	r4, [pc, #44]	; (8004278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800424a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800424c:	e001      	b.n	8004252 <LoopFillZerobss>

0800424e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800424e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004250:	3204      	adds	r2, #4

08004252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004254:	d3fb      	bcc.n	800424e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004256:	f7ff ffd7 	bl	8004208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800425a:	f004 fded 	bl	8008e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800425e:	f7fd f86f 	bl	8001340 <main>
  bx  lr    
 8004262:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800426c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004270:	0800bcc0 	.word	0x0800bcc0
  ldr r2, =_sbss
 8004274:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004278:	200007ac 	.word	0x200007ac

0800427c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800427c:	e7fe      	b.n	800427c <ADC_IRQHandler>
	...

08004280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <HAL_Init+0x40>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <HAL_Init+0x40>)
 800428a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800428e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_Init+0x40>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <HAL_Init+0x40>)
 8004296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_Init+0x40>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <HAL_Init+0x40>)
 80042a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a8:	2003      	movs	r0, #3
 80042aa:	f000 f94f 	bl	800454c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ae:	200f      	movs	r0, #15
 80042b0:	f000 f808 	bl	80042c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042b4:	f7fe f904 	bl	80024c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023c00 	.word	0x40023c00

080042c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_InitTick+0x54>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_InitTick+0x58>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	4619      	mov	r1, r3
 80042d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042da:	fbb3 f3f1 	udiv	r3, r3, r1
 80042de:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f967 	bl	80045b6 <HAL_SYSTICK_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00e      	b.n	8004310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b0f      	cmp	r3, #15
 80042f6:	d80a      	bhi.n	800430e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042f8:	2200      	movs	r2, #0
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004300:	f000 f92f 	bl	8004562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004304:	4a06      	ldr	r2, [pc, #24]	; (8004320 <HAL_InitTick+0x5c>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2000002c 	.word	0x2000002c
 800431c:	20000034 	.word	0x20000034
 8004320:	20000030 	.word	0x20000030

08004324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_IncTick+0x20>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_IncTick+0x24>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4413      	add	r3, r2
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <HAL_IncTick+0x24>)
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000034 	.word	0x20000034
 8004348:	20000798 	.word	0x20000798

0800434c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return uwTick;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_GetTick+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000798 	.word	0x20000798

08004364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff ffee 	bl	800434c <HAL_GetTick>
 8004370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800437c:	d005      	beq.n	800438a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_Delay+0x44>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800438a:	bf00      	nop
 800438c:	f7ff ffde 	bl	800434c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d8f7      	bhi.n	800438c <HAL_Delay+0x28>
  {
  }
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000034 	.word	0x20000034

080043ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	60d3      	str	r3, [r2, #12]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <__NVIC_GetPriorityGrouping+0x18>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 0307 	and.w	r3, r3, #7
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	db0b      	blt.n	800443a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	4907      	ldr	r1, [pc, #28]	; (8004448 <__NVIC_EnableIRQ+0x38>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2001      	movs	r0, #1
 8004432:	fa00 f202 	lsl.w	r2, r0, r2
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000e100 	.word	0xe000e100

0800444c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	6039      	str	r1, [r7, #0]
 8004456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	2b00      	cmp	r3, #0
 800445e:	db0a      	blt.n	8004476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	490c      	ldr	r1, [pc, #48]	; (8004498 <__NVIC_SetPriority+0x4c>)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	440b      	add	r3, r1
 8004470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004474:	e00a      	b.n	800448c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4908      	ldr	r1, [pc, #32]	; (800449c <__NVIC_SetPriority+0x50>)
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	3b04      	subs	r3, #4
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	440b      	add	r3, r1
 800448a:	761a      	strb	r2, [r3, #24]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000e100 	.word	0xe000e100
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f1c3 0307 	rsb	r3, r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	bf28      	it	cs
 80044be:	2304      	movcs	r3, #4
 80044c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d902      	bls.n	80044d0 <NVIC_EncodePriority+0x30>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3b03      	subs	r3, #3
 80044ce:	e000      	b.n	80044d2 <NVIC_EncodePriority+0x32>
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43da      	mvns	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	401a      	ands	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43d9      	mvns	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	4313      	orrs	r3, r2
         );
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004518:	d301      	bcc.n	800451e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800451a:	2301      	movs	r3, #1
 800451c:	e00f      	b.n	800453e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <SysTick_Config+0x40>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004526:	210f      	movs	r1, #15
 8004528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800452c:	f7ff ff8e 	bl	800444c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <SysTick_Config+0x40>)
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <SysTick_Config+0x40>)
 8004538:	2207      	movs	r2, #7
 800453a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	e000e010 	.word	0xe000e010

0800454c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff29 	bl	80043ac <__NVIC_SetPriorityGrouping>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	4603      	mov	r3, r0
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004574:	f7ff ff3e 	bl	80043f4 <__NVIC_GetPriorityGrouping>
 8004578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff ff8e 	bl	80044a0 <NVIC_EncodePriority>
 8004584:	4602      	mov	r2, r0
 8004586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff5d 	bl	800444c <__NVIC_SetPriority>
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff31 	bl	8004410 <__NVIC_EnableIRQ>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ffa2 	bl	8004508 <SysTick_Config>
 80045c4:	4603      	mov	r3, r0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045dc:	f7ff feb6 	bl	800434c <HAL_GetTick>
 80045e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d008      	beq.n	8004600 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2280      	movs	r2, #128	; 0x80
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e052      	b.n	80046a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0216 	bic.w	r2, r2, #22
 800460e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800461e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <HAL_DMA_Abort+0x62>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0208 	bic.w	r2, r2, #8
 800463e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004650:	e013      	b.n	800467a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004652:	f7ff fe7b 	bl	800434c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b05      	cmp	r3, #5
 800465e:	d90c      	bls.n	800467a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2203      	movs	r2, #3
 800466a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e015      	b.n	80046a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e4      	bne.n	8004652 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	223f      	movs	r2, #63	; 0x3f
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d004      	beq.n	80046cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e00c      	b.n	80046e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2205      	movs	r2, #5
 80046d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	e16b      	b.n	80049e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004710:	2201      	movs	r2, #1
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	429a      	cmp	r2, r3
 800472a:	f040 815a 	bne.w	80049e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b01      	cmp	r3, #1
 8004738:	d005      	beq.n	8004746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004742:	2b02      	cmp	r3, #2
 8004744:	d130      	bne.n	80047a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2203      	movs	r2, #3
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800477c:	2201      	movs	r2, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 0201 	and.w	r2, r3, #1
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d017      	beq.n	80047e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	2203      	movs	r2, #3
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d123      	bne.n	8004838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	08da      	lsrs	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3208      	adds	r2, #8
 80047f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	220f      	movs	r2, #15
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	08da      	lsrs	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3208      	adds	r2, #8
 8004832:	69b9      	ldr	r1, [r7, #24]
 8004834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	2203      	movs	r2, #3
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4013      	ands	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0203 	and.w	r2, r3, #3
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 80b4 	beq.w	80049e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <HAL_GPIO_Init+0x30c>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	4a5f      	ldr	r2, [pc, #380]	; (8004a00 <HAL_GPIO_Init+0x30c>)
 8004884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004888:	6453      	str	r3, [r2, #68]	; 0x44
 800488a:	4b5d      	ldr	r3, [pc, #372]	; (8004a00 <HAL_GPIO_Init+0x30c>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004896:	4a5b      	ldr	r2, [pc, #364]	; (8004a04 <HAL_GPIO_Init+0x310>)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	3302      	adds	r3, #2
 800489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	220f      	movs	r2, #15
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_GPIO_Init+0x314>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d02b      	beq.n	800491a <HAL_GPIO_Init+0x226>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a51      	ldr	r2, [pc, #324]	; (8004a0c <HAL_GPIO_Init+0x318>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d025      	beq.n	8004916 <HAL_GPIO_Init+0x222>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a50      	ldr	r2, [pc, #320]	; (8004a10 <HAL_GPIO_Init+0x31c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01f      	beq.n	8004912 <HAL_GPIO_Init+0x21e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4f      	ldr	r2, [pc, #316]	; (8004a14 <HAL_GPIO_Init+0x320>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d019      	beq.n	800490e <HAL_GPIO_Init+0x21a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4e      	ldr	r2, [pc, #312]	; (8004a18 <HAL_GPIO_Init+0x324>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_GPIO_Init+0x216>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4d      	ldr	r2, [pc, #308]	; (8004a1c <HAL_GPIO_Init+0x328>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00d      	beq.n	8004906 <HAL_GPIO_Init+0x212>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a4c      	ldr	r2, [pc, #304]	; (8004a20 <HAL_GPIO_Init+0x32c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <HAL_GPIO_Init+0x20e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	; (8004a24 <HAL_GPIO_Init+0x330>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d101      	bne.n	80048fe <HAL_GPIO_Init+0x20a>
 80048fa:	2307      	movs	r3, #7
 80048fc:	e00e      	b.n	800491c <HAL_GPIO_Init+0x228>
 80048fe:	2308      	movs	r3, #8
 8004900:	e00c      	b.n	800491c <HAL_GPIO_Init+0x228>
 8004902:	2306      	movs	r3, #6
 8004904:	e00a      	b.n	800491c <HAL_GPIO_Init+0x228>
 8004906:	2305      	movs	r3, #5
 8004908:	e008      	b.n	800491c <HAL_GPIO_Init+0x228>
 800490a:	2304      	movs	r3, #4
 800490c:	e006      	b.n	800491c <HAL_GPIO_Init+0x228>
 800490e:	2303      	movs	r3, #3
 8004910:	e004      	b.n	800491c <HAL_GPIO_Init+0x228>
 8004912:	2302      	movs	r3, #2
 8004914:	e002      	b.n	800491c <HAL_GPIO_Init+0x228>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_GPIO_Init+0x228>
 800491a:	2300      	movs	r3, #0
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	f002 0203 	and.w	r2, r2, #3
 8004922:	0092      	lsls	r2, r2, #2
 8004924:	4093      	lsls	r3, r2
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800492c:	4935      	ldr	r1, [pc, #212]	; (8004a04 <HAL_GPIO_Init+0x310>)
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	3302      	adds	r3, #2
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <HAL_GPIO_Init+0x334>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800495e:	4a32      	ldr	r2, [pc, #200]	; (8004a28 <HAL_GPIO_Init+0x334>)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004964:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_GPIO_Init+0x334>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004988:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <HAL_GPIO_Init+0x334>)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800498e:	4b26      	ldr	r3, [pc, #152]	; (8004a28 <HAL_GPIO_Init+0x334>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b2:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_GPIO_Init+0x334>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b8:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_GPIO_Init+0x334>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049dc:	4a12      	ldr	r2, [pc, #72]	; (8004a28 <HAL_GPIO_Init+0x334>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3301      	adds	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	f67f ae90 	bls.w	8004710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3724      	adds	r7, #36	; 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40013800 	.word	0x40013800
 8004a08:	40020000 	.word	0x40020000
 8004a0c:	40020400 	.word	0x40020400
 8004a10:	40020800 	.word	0x40020800
 8004a14:	40020c00 	.word	0x40020c00
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40021400 	.word	0x40021400
 8004a20:	40021800 	.word	0x40021800
 8004a24:	40021c00 	.word	0x40021c00
 8004a28:	40013c00 	.word	0x40013c00

08004a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e001      	b.n	8004a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a6c:	787b      	ldrb	r3, [r7, #1]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a78:	e003      	b.n	8004a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a7a:	887b      	ldrh	r3, [r7, #2]
 8004a7c:	041a      	lsls	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aa0:	887a      	ldrh	r2, [r7, #2]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	041a      	lsls	r2, r3, #16
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43d9      	mvns	r1, r3
 8004aac:	887b      	ldrh	r3, [r7, #2]
 8004aae:	400b      	ands	r3, r1
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	619a      	str	r2, [r3, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e12b      	b.n	8004d2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd fd10 	bl	8002510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b28:	f001 fd0e 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 8004b2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4a81      	ldr	r2, [pc, #516]	; (8004d38 <HAL_I2C_Init+0x274>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d807      	bhi.n	8004b48 <HAL_I2C_Init+0x84>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a80      	ldr	r2, [pc, #512]	; (8004d3c <HAL_I2C_Init+0x278>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bf94      	ite	ls
 8004b40:	2301      	movls	r3, #1
 8004b42:	2300      	movhi	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e006      	b.n	8004b56 <HAL_I2C_Init+0x92>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a7d      	ldr	r2, [pc, #500]	; (8004d40 <HAL_I2C_Init+0x27c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bf94      	ite	ls
 8004b50:	2301      	movls	r3, #1
 8004b52:	2300      	movhi	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e0e7      	b.n	8004d2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a78      	ldr	r2, [pc, #480]	; (8004d44 <HAL_I2C_Init+0x280>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	0c9b      	lsrs	r3, r3, #18
 8004b68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a6a      	ldr	r2, [pc, #424]	; (8004d38 <HAL_I2C_Init+0x274>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d802      	bhi.n	8004b98 <HAL_I2C_Init+0xd4>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	3301      	adds	r3, #1
 8004b96:	e009      	b.n	8004bac <HAL_I2C_Init+0xe8>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	4a69      	ldr	r2, [pc, #420]	; (8004d48 <HAL_I2C_Init+0x284>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	3301      	adds	r3, #1
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	495c      	ldr	r1, [pc, #368]	; (8004d38 <HAL_I2C_Init+0x274>)
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	d819      	bhi.n	8004c00 <HAL_I2C_Init+0x13c>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1e59      	subs	r1, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004be0:	400b      	ands	r3, r1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_I2C_Init+0x138>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1e59      	subs	r1, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfa:	e051      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	e04f      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d111      	bne.n	8004c2c <HAL_I2C_Init+0x168>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1e58      	subs	r0, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	440b      	add	r3, r1
 8004c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e012      	b.n	8004c52 <HAL_I2C_Init+0x18e>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1e58      	subs	r0, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	0099      	lsls	r1, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_I2C_Init+0x196>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e022      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10e      	bne.n	8004c80 <HAL_I2C_Init+0x1bc>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1e58      	subs	r0, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	440b      	add	r3, r1
 8004c70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7e:	e00f      	b.n	8004ca0 <HAL_I2C_Init+0x1dc>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e58      	subs	r0, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	0099      	lsls	r1, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c96:	3301      	adds	r3, #1
 8004c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	6809      	ldr	r1, [r1, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6911      	ldr	r1, [r2, #16]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68d2      	ldr	r2, [r2, #12]
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	000186a0 	.word	0x000186a0
 8004d3c:	001e847f 	.word	0x001e847f
 8004d40:	003d08ff 	.word	0x003d08ff
 8004d44:	431bde83 	.word	0x431bde83
 8004d48:	10624dd3 	.word	0x10624dd3

08004d4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	461a      	mov	r2, r3
 8004d58:	460b      	mov	r3, r1
 8004d5a:	817b      	strh	r3, [r7, #10]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d60:	f7ff faf4 	bl	800434c <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	f040 80e0 	bne.w	8004f34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2319      	movs	r3, #25
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	4970      	ldr	r1, [pc, #448]	; (8004f40 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fd94 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0d3      	b.n	8004f36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_I2C_Master_Transmit+0x50>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0cc      	b.n	8004f36 <HAL_I2C_Master_Transmit+0x1ea>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d007      	beq.n	8004dc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2221      	movs	r2, #33	; 0x21
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2210      	movs	r2, #16
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	893a      	ldrh	r2, [r7, #8]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a50      	ldr	r2, [pc, #320]	; (8004f44 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e04:	8979      	ldrh	r1, [r7, #10]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	6a3a      	ldr	r2, [r7, #32]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fbfe 	bl	800560c <I2C_MasterRequestWrite>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e08d      	b.n	8004f36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e30:	e066      	b.n	8004f00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	6a39      	ldr	r1, [r7, #32]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fe0e 	bl	8005a58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00d      	beq.n	8004e5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d107      	bne.n	8004e5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e06b      	b.n	8004f36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_I2C_Master_Transmit+0x188>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d017      	beq.n	8004ed4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	6a39      	ldr	r1, [r7, #32]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fdfe 	bl	8005ada <I2C_WaitOnBTFFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00d      	beq.n	8004f00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d107      	bne.n	8004efc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e01a      	b.n	8004f36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d194      	bne.n	8004e32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	00100002 	.word	0x00100002
 8004f44:	ffff0000 	.word	0xffff0000

08004f48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	461a      	mov	r2, r3
 8004f54:	460b      	mov	r3, r1
 8004f56:	817b      	strh	r3, [r7, #10]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f5c:	f7ff f9f6 	bl	800434c <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	f040 820b 	bne.w	8005386 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	2319      	movs	r3, #25
 8004f76:	2201      	movs	r2, #1
 8004f78:	497c      	ldr	r1, [pc, #496]	; (800516c <HAL_I2C_Master_Receive+0x224>)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fc96 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
 8004f88:	e1fe      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_I2C_Master_Receive+0x50>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e1f7      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d007      	beq.n	8004fbe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2222      	movs	r2, #34	; 0x22
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	893a      	ldrh	r2, [r7, #8]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a5c      	ldr	r2, [pc, #368]	; (8005170 <HAL_I2C_Master_Receive+0x228>)
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005000:	8979      	ldrh	r1, [r7, #10]
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fb82 	bl	8005710 <I2C_MasterRequestRead>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e1b8      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d113      	bne.n	8005046 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	623b      	str	r3, [r7, #32]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e18c      	b.n	8005360 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b01      	cmp	r3, #1
 800504c:	d11b      	bne.n	8005086 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e16c      	b.n	8005360 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508a:	2b02      	cmp	r3, #2
 800508c:	d11b      	bne.n	80050c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	e14c      	b.n	8005360 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050ec:	e138      	b.n	8005360 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	f200 80f1 	bhi.w	80052da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d123      	bne.n	8005148 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fd29 	bl	8005b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e139      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005146:	e10b      	b.n	8005360 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514c:	2b02      	cmp	r3, #2
 800514e:	d14e      	bne.n	80051ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	2200      	movs	r2, #0
 8005158:	4906      	ldr	r1, [pc, #24]	; (8005174 <HAL_I2C_Master_Receive+0x22c>)
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fba6 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e10e      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
 800516a:	bf00      	nop
 800516c:	00100002 	.word	0x00100002
 8005170:	ffff0000 	.word	0xffff0000
 8005174:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ec:	e0b8      	b.n	8005360 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	2200      	movs	r2, #0
 80051f6:	4966      	ldr	r1, [pc, #408]	; (8005390 <HAL_I2C_Master_Receive+0x448>)
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fb57 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0bf      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2200      	movs	r2, #0
 8005252:	494f      	ldr	r1, [pc, #316]	; (8005390 <HAL_I2C_Master_Receive+0x448>)
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fb29 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e091      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052d8:	e042      	b.n	8005360 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fc3c 	bl	8005b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e04c      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b04      	cmp	r3, #4
 800532c:	d118      	bne.n	8005360 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f aec2 	bne.w	80050ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	e000      	b.n	8005388 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	3728      	adds	r7, #40	; 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	00010004 	.word	0x00010004

08005394 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	460b      	mov	r3, r1
 80053a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80053a4:	f7fe ffd2 	bl	800434c <HAL_GetTick>
 80053a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	f040 8111 	bne.w	80055de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2319      	movs	r3, #25
 80053c2:	2201      	movs	r2, #1
 80053c4:	4988      	ldr	r1, [pc, #544]	; (80055e8 <HAL_I2C_IsDeviceReady+0x254>)
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fa70 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
 80053d4:	e104      	b.n	80055e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_I2C_IsDeviceReady+0x50>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e0fd      	b.n	80055e0 <HAL_I2C_IsDeviceReady+0x24c>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d007      	beq.n	800540a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2224      	movs	r2, #36	; 0x24
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a70      	ldr	r2, [pc, #448]	; (80055ec <HAL_I2C_IsDeviceReady+0x258>)
 800542c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2200      	movs	r2, #0
 8005446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fa2e 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005464:	d103      	bne.n	800546e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e0b6      	b.n	80055e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005472:	897b      	ldrh	r3, [r7, #10]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005480:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005482:	f7fe ff63 	bl	800434c <HAL_GetTick>
 8005486:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b02      	cmp	r3, #2
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ac:	bf0c      	ite	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	2300      	movne	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054b6:	e025      	b.n	8005504 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fe ff48 	bl	800434c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <HAL_I2C_IsDeviceReady+0x13a>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d103      	bne.n	80054d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	22a0      	movs	r2, #160	; 0xa0
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2ba0      	cmp	r3, #160	; 0xa0
 800550e:	d005      	beq.n	800551c <HAL_I2C_IsDeviceReady+0x188>
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <HAL_I2C_IsDeviceReady+0x188>
 8005516:	7dbb      	ldrb	r3, [r7, #22]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0cd      	beq.n	80054b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d129      	bne.n	8005586 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005540:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2319      	movs	r3, #25
 800555e:	2201      	movs	r2, #1
 8005560:	4921      	ldr	r1, [pc, #132]	; (80055e8 <HAL_I2C_IsDeviceReady+0x254>)
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f9a2 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e036      	b.n	80055e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e02c      	b.n	80055e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005594:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800559e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2319      	movs	r3, #25
 80055a6:	2201      	movs	r2, #1
 80055a8:	490f      	ldr	r1, [pc, #60]	; (80055e8 <HAL_I2C_IsDeviceReady+0x254>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f97e 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e012      	b.n	80055e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	3301      	adds	r3, #1
 80055be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	f4ff af32 	bcc.w	800542e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80055de:	2302      	movs	r3, #2
  }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	00100002 	.word	0x00100002
 80055ec:	ffff0000 	.word	0xffff0000

080055f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fe:	b2db      	uxtb	r3, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	460b      	mov	r3, r1
 800561a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d006      	beq.n	8005636 <I2C_MasterRequestWrite+0x2a>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d003      	beq.n	8005636 <I2C_MasterRequestWrite+0x2a>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005634:	d108      	bne.n	8005648 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e00b      	b.n	8005660 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	2b12      	cmp	r3, #18
 800564e:	d107      	bne.n	8005660 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f91d 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	d103      	bne.n	8005690 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e035      	b.n	8005700 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800569c:	d108      	bne.n	80056b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800569e:	897b      	ldrh	r3, [r7, #10]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056ac:	611a      	str	r2, [r3, #16]
 80056ae:	e01b      	b.n	80056e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056b0:	897b      	ldrh	r3, [r7, #10]
 80056b2:	11db      	asrs	r3, r3, #7
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f003 0306 	and.w	r3, r3, #6
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f063 030f 	orn	r3, r3, #15
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	490e      	ldr	r1, [pc, #56]	; (8005708 <I2C_MasterRequestWrite+0xfc>)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f943 	bl	800595a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e010      	b.n	8005700 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80056de:	897b      	ldrh	r3, [r7, #10]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4907      	ldr	r1, [pc, #28]	; (800570c <I2C_MasterRequestWrite+0x100>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f933 	bl	800595a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	00010008 	.word	0x00010008
 800570c:	00010002 	.word	0x00010002

08005710 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	460b      	mov	r3, r1
 800571e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005734:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d006      	beq.n	800574a <I2C_MasterRequestRead+0x3a>
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d003      	beq.n	800574a <I2C_MasterRequestRead+0x3a>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005748:	d108      	bne.n	800575c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e00b      	b.n	8005774 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	2b11      	cmp	r3, #17
 8005762:	d107      	bne.n	8005774 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f893 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579a:	d103      	bne.n	80057a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e079      	b.n	800589c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b0:	d108      	bne.n	80057c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057b2:	897b      	ldrh	r3, [r7, #10]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	e05f      	b.n	8005884 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057c4:	897b      	ldrh	r3, [r7, #10]
 80057c6:	11db      	asrs	r3, r3, #7
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f003 0306 	and.w	r3, r3, #6
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f063 030f 	orn	r3, r3, #15
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	4930      	ldr	r1, [pc, #192]	; (80058a4 <I2C_MasterRequestRead+0x194>)
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f8b9 	bl	800595a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e054      	b.n	800589c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057f2:	897b      	ldrh	r3, [r7, #10]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4929      	ldr	r1, [pc, #164]	; (80058a8 <I2C_MasterRequestRead+0x198>)
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f8a9 	bl	800595a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e044      	b.n	800589c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005836:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f831 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585e:	d103      	bne.n	8005868 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e017      	b.n	800589c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800586c:	897b      	ldrh	r3, [r7, #10]
 800586e:	11db      	asrs	r3, r3, #7
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f063 030e 	orn	r3, r3, #14
 800587c:	b2da      	uxtb	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4907      	ldr	r1, [pc, #28]	; (80058a8 <I2C_MasterRequestRead+0x198>)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f865 	bl	800595a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	00010008 	.word	0x00010008
 80058a8:	00010002 	.word	0x00010002

080058ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058bc:	e025      	b.n	800590a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c4:	d021      	beq.n	800590a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c6:	f7fe fd41 	bl	800434c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d116      	bne.n	800590a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e023      	b.n	8005952 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	0c1b      	lsrs	r3, r3, #16
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d10d      	bne.n	8005930 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	43da      	mvns	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	e00c      	b.n	800594a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	43da      	mvns	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4013      	ands	r3, r2
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	429a      	cmp	r2, r3
 800594e:	d0b6      	beq.n	80058be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005968:	e051      	b.n	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d123      	bne.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005988:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005992:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0204 	orr.w	r2, r3, #4
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e046      	b.n	8005a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c8:	d021      	beq.n	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ca:	f7fe fcbf 	bl	800434c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d116      	bne.n	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e020      	b.n	8005a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d10c      	bne.n	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e00b      	b.n	8005a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	43da      	mvns	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d18d      	bne.n	800596a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a64:	e02d      	b.n	8005ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f8ce 	bl	8005c08 <I2C_IsAcknowledgeFailed>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e02d      	b.n	8005ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7c:	d021      	beq.n	8005ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7e:	f7fe fc65 	bl	800434c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d116      	bne.n	8005ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e007      	b.n	8005ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d1ca      	bne.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ae6:	e02d      	b.n	8005b44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f88d 	bl	8005c08 <I2C_IsAcknowledgeFailed>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e02d      	b.n	8005b54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afe:	d021      	beq.n	8005b44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b00:	f7fe fc24 	bl	800434c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d302      	bcc.n	8005b16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d116      	bne.n	8005b44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f043 0220 	orr.w	r2, r3, #32
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e007      	b.n	8005b54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d1ca      	bne.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b68:	e042      	b.n	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d119      	bne.n	8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0210 	mvn.w	r2, #16
 8005b80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e029      	b.n	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bac:	f7fe fbce 	bl	800434c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d116      	bne.n	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e007      	b.n	8005c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d1b5      	bne.n	8005b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1e:	d11b      	bne.n	8005c58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f043 0204 	orr.w	r2, r3, #4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e267      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d075      	beq.n	8005d72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c86:	4b88      	ldr	r3, [pc, #544]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d00c      	beq.n	8005cac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c92:	4b85      	ldr	r3, [pc, #532]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d112      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9e:	4b82      	ldr	r3, [pc, #520]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005caa:	d10b      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cac:	4b7e      	ldr	r3, [pc, #504]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05b      	beq.n	8005d70 <HAL_RCC_OscConfig+0x108>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d157      	bne.n	8005d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e242      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ccc:	d106      	bne.n	8005cdc <HAL_RCC_OscConfig+0x74>
 8005cce:	4b76      	ldr	r3, [pc, #472]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a75      	ldr	r2, [pc, #468]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e01d      	b.n	8005d18 <HAL_RCC_OscConfig+0xb0>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce4:	d10c      	bne.n	8005d00 <HAL_RCC_OscConfig+0x98>
 8005ce6:	4b70      	ldr	r3, [pc, #448]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6f      	ldr	r2, [pc, #444]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	4b6d      	ldr	r3, [pc, #436]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a6c      	ldr	r2, [pc, #432]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e00b      	b.n	8005d18 <HAL_RCC_OscConfig+0xb0>
 8005d00:	4b69      	ldr	r3, [pc, #420]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a68      	ldr	r2, [pc, #416]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a65      	ldr	r2, [pc, #404]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d013      	beq.n	8005d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d20:	f7fe fb14 	bl	800434c <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d28:	f7fe fb10 	bl	800434c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b64      	cmp	r3, #100	; 0x64
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e207      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0xc0>
 8005d46:	e014      	b.n	8005d72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d48:	f7fe fb00 	bl	800434c <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d50:	f7fe fafc 	bl	800434c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e1f3      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d62:	4b51      	ldr	r3, [pc, #324]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f0      	bne.n	8005d50 <HAL_RCC_OscConfig+0xe8>
 8005d6e:	e000      	b.n	8005d72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d063      	beq.n	8005e46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8a:	4b47      	ldr	r3, [pc, #284]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d11c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d96:	4b44      	ldr	r3, [pc, #272]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d116      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da2:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_RCC_OscConfig+0x152>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e1c7      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dba:	4b3b      	ldr	r3, [pc, #236]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	4937      	ldr	r1, [pc, #220]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dce:	e03a      	b.n	8005e46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d020      	beq.n	8005e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd8:	4b34      	ldr	r3, [pc, #208]	; (8005eac <HAL_RCC_OscConfig+0x244>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dde:	f7fe fab5 	bl	800434c <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de6:	f7fe fab1 	bl	800434c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e1a8      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df8:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e04:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4925      	ldr	r1, [pc, #148]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]
 8005e18:	e015      	b.n	8005e46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <HAL_RCC_OscConfig+0x244>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fe fa94 	bl	800434c <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e28:	f7fe fa90 	bl	800434c <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e187      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d036      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d016      	beq.n	8005e88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <HAL_RCC_OscConfig+0x248>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e60:	f7fe fa74 	bl	800434c <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e68:	f7fe fa70 	bl	800434c <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e167      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x200>
 8005e86:	e01b      	b.n	8005ec0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <HAL_RCC_OscConfig+0x248>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8e:	f7fe fa5d 	bl	800434c <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e94:	e00e      	b.n	8005eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e96:	f7fe fa59 	bl	800434c <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d907      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e150      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	42470000 	.word	0x42470000
 8005eb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb4:	4b88      	ldr	r3, [pc, #544]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1ea      	bne.n	8005e96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8097 	beq.w	8005ffc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ed2:	4b81      	ldr	r3, [pc, #516]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	4b7d      	ldr	r3, [pc, #500]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	4a7c      	ldr	r2, [pc, #496]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eec:	6413      	str	r3, [r2, #64]	; 0x40
 8005eee:	4b7a      	ldr	r3, [pc, #488]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efa:	2301      	movs	r3, #1
 8005efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005efe:	4b77      	ldr	r3, [pc, #476]	; (80060dc <HAL_RCC_OscConfig+0x474>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d118      	bne.n	8005f3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f0a:	4b74      	ldr	r3, [pc, #464]	; (80060dc <HAL_RCC_OscConfig+0x474>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a73      	ldr	r2, [pc, #460]	; (80060dc <HAL_RCC_OscConfig+0x474>)
 8005f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f16:	f7fe fa19 	bl	800434c <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1e:	f7fe fa15 	bl	800434c <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e10c      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f30:	4b6a      	ldr	r3, [pc, #424]	; (80060dc <HAL_RCC_OscConfig+0x474>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d106      	bne.n	8005f52 <HAL_RCC_OscConfig+0x2ea>
 8005f44:	4b64      	ldr	r3, [pc, #400]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	4a63      	ldr	r2, [pc, #396]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f4a:	f043 0301 	orr.w	r3, r3, #1
 8005f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f50:	e01c      	b.n	8005f8c <HAL_RCC_OscConfig+0x324>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x30c>
 8005f5a:	4b5f      	ldr	r3, [pc, #380]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	4a5e      	ldr	r2, [pc, #376]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f60:	f043 0304 	orr.w	r3, r3, #4
 8005f64:	6713      	str	r3, [r2, #112]	; 0x70
 8005f66:	4b5c      	ldr	r3, [pc, #368]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	4a5b      	ldr	r2, [pc, #364]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	6713      	str	r3, [r2, #112]	; 0x70
 8005f72:	e00b      	b.n	8005f8c <HAL_RCC_OscConfig+0x324>
 8005f74:	4b58      	ldr	r3, [pc, #352]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f78:	4a57      	ldr	r2, [pc, #348]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f7a:	f023 0301 	bic.w	r3, r3, #1
 8005f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f80:	4b55      	ldr	r3, [pc, #340]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	4a54      	ldr	r2, [pc, #336]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005f86:	f023 0304 	bic.w	r3, r3, #4
 8005f8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f94:	f7fe f9da 	bl	800434c <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f9a:	e00a      	b.n	8005fb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f9c:	f7fe f9d6 	bl	800434c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e0cb      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb2:	4b49      	ldr	r3, [pc, #292]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0ee      	beq.n	8005f9c <HAL_RCC_OscConfig+0x334>
 8005fbe:	e014      	b.n	8005fea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fc0:	f7fe f9c4 	bl	800434c <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc6:	e00a      	b.n	8005fde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc8:	f7fe f9c0 	bl	800434c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e0b5      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fde:	4b3e      	ldr	r3, [pc, #248]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1ee      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d105      	bne.n	8005ffc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff0:	4b39      	ldr	r3, [pc, #228]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	4a38      	ldr	r2, [pc, #224]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8005ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80a1 	beq.w	8006148 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	2b08      	cmp	r3, #8
 8006010:	d05c      	beq.n	80060cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d141      	bne.n	800609e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601a:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <HAL_RCC_OscConfig+0x478>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fe f994 	bl	800434c <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006028:	f7fe f990 	bl	800434c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e087      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	019b      	lsls	r3, r3, #6
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	3b01      	subs	r3, #1
 8006060:	041b      	lsls	r3, r3, #16
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	061b      	lsls	r3, r3, #24
 800606a:	491b      	ldr	r1, [pc, #108]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 800606c:	4313      	orrs	r3, r2
 800606e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006070:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <HAL_RCC_OscConfig+0x478>)
 8006072:	2201      	movs	r2, #1
 8006074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006076:	f7fe f969 	bl	800434c <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607e:	f7fe f965 	bl	800434c <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e05c      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006090:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f0      	beq.n	800607e <HAL_RCC_OscConfig+0x416>
 800609c:	e054      	b.n	8006148 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609e:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <HAL_RCC_OscConfig+0x478>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a4:	f7fe f952 	bl	800434c <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ac:	f7fe f94e 	bl	800434c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e045      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <HAL_RCC_OscConfig+0x470>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x444>
 80060ca:	e03d      	b.n	8006148 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d107      	bne.n	80060e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e038      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
 80060d8:	40023800 	.word	0x40023800
 80060dc:	40007000 	.word	0x40007000
 80060e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <HAL_RCC_OscConfig+0x4ec>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d028      	beq.n	8006144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d121      	bne.n	8006144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610a:	429a      	cmp	r2, r3
 800610c:	d11a      	bne.n	8006144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800611a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800611c:	4293      	cmp	r3, r2
 800611e:	d111      	bne.n	8006144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	3b01      	subs	r3, #1
 800612e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006130:	429a      	cmp	r2, r3
 8006132:	d107      	bne.n	8006144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006140:	429a      	cmp	r2, r3
 8006142:	d001      	beq.n	8006148 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40023800 	.word	0x40023800

08006158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0cc      	b.n	8006306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800616c:	4b68      	ldr	r3, [pc, #416]	; (8006310 <HAL_RCC_ClockConfig+0x1b8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d90c      	bls.n	8006194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617a:	4b65      	ldr	r3, [pc, #404]	; (8006310 <HAL_RCC_ClockConfig+0x1b8>)
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006182:	4b63      	ldr	r3, [pc, #396]	; (8006310 <HAL_RCC_ClockConfig+0x1b8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d001      	beq.n	8006194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0b8      	b.n	8006306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d020      	beq.n	80061e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061ac:	4b59      	ldr	r3, [pc, #356]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4a58      	ldr	r2, [pc, #352]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c4:	4b53      	ldr	r3, [pc, #332]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4a52      	ldr	r2, [pc, #328]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d0:	4b50      	ldr	r3, [pc, #320]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	494d      	ldr	r1, [pc, #308]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d044      	beq.n	8006278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d107      	bne.n	8006206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f6:	4b47      	ldr	r3, [pc, #284]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d119      	bne.n	8006236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e07f      	b.n	8006306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d003      	beq.n	8006216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006212:	2b03      	cmp	r3, #3
 8006214:	d107      	bne.n	8006226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006216:	4b3f      	ldr	r3, [pc, #252]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e06f      	b.n	8006306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006226:	4b3b      	ldr	r3, [pc, #236]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e067      	b.n	8006306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006236:	4b37      	ldr	r3, [pc, #220]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f023 0203 	bic.w	r2, r3, #3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4934      	ldr	r1, [pc, #208]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	4313      	orrs	r3, r2
 8006246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006248:	f7fe f880 	bl	800434c <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624e:	e00a      	b.n	8006266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006250:	f7fe f87c 	bl	800434c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	f241 3288 	movw	r2, #5000	; 0x1388
 800625e:	4293      	cmp	r3, r2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e04f      	b.n	8006306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006266:	4b2b      	ldr	r3, [pc, #172]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 020c 	and.w	r2, r3, #12
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	429a      	cmp	r2, r3
 8006276:	d1eb      	bne.n	8006250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <HAL_RCC_ClockConfig+0x1b8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d20c      	bcs.n	80062a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006286:	4b22      	ldr	r3, [pc, #136]	; (8006310 <HAL_RCC_ClockConfig+0x1b8>)
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800628e:	4b20      	ldr	r3, [pc, #128]	; (8006310 <HAL_RCC_ClockConfig+0x1b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d001      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e032      	b.n	8006306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062ac:	4b19      	ldr	r3, [pc, #100]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4916      	ldr	r1, [pc, #88]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ca:	4b12      	ldr	r3, [pc, #72]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	490e      	ldr	r1, [pc, #56]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062de:	f000 f821 	bl	8006324 <HAL_RCC_GetSysClockFreq>
 80062e2:	4602      	mov	r2, r0
 80062e4:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	490a      	ldr	r1, [pc, #40]	; (8006318 <HAL_RCC_ClockConfig+0x1c0>)
 80062f0:	5ccb      	ldrb	r3, [r1, r3]
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	4a09      	ldr	r2, [pc, #36]	; (800631c <HAL_RCC_ClockConfig+0x1c4>)
 80062f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <HAL_RCC_ClockConfig+0x1c8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd ffe0 	bl	80042c4 <HAL_InitTick>

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40023c00 	.word	0x40023c00
 8006314:	40023800 	.word	0x40023800
 8006318:	0800ba58 	.word	0x0800ba58
 800631c:	2000002c 	.word	0x2000002c
 8006320:	20000030 	.word	0x20000030

08006324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006328:	b094      	sub	sp, #80	; 0x50
 800632a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	647b      	str	r3, [r7, #68]	; 0x44
 8006330:	2300      	movs	r3, #0
 8006332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006334:	2300      	movs	r3, #0
 8006336:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800633c:	4b79      	ldr	r3, [pc, #484]	; (8006524 <HAL_RCC_GetSysClockFreq+0x200>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b08      	cmp	r3, #8
 8006346:	d00d      	beq.n	8006364 <HAL_RCC_GetSysClockFreq+0x40>
 8006348:	2b08      	cmp	r3, #8
 800634a:	f200 80e1 	bhi.w	8006510 <HAL_RCC_GetSysClockFreq+0x1ec>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x34>
 8006352:	2b04      	cmp	r3, #4
 8006354:	d003      	beq.n	800635e <HAL_RCC_GetSysClockFreq+0x3a>
 8006356:	e0db      	b.n	8006510 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006358:	4b73      	ldr	r3, [pc, #460]	; (8006528 <HAL_RCC_GetSysClockFreq+0x204>)
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800635c:	e0db      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800635e:	4b73      	ldr	r3, [pc, #460]	; (800652c <HAL_RCC_GetSysClockFreq+0x208>)
 8006360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006362:	e0d8      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006364:	4b6f      	ldr	r3, [pc, #444]	; (8006524 <HAL_RCC_GetSysClockFreq+0x200>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800636c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636e:	4b6d      	ldr	r3, [pc, #436]	; (8006524 <HAL_RCC_GetSysClockFreq+0x200>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d063      	beq.n	8006442 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800637a:	4b6a      	ldr	r3, [pc, #424]	; (8006524 <HAL_RCC_GetSysClockFreq+0x200>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	099b      	lsrs	r3, r3, #6
 8006380:	2200      	movs	r2, #0
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
 8006384:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638c:	633b      	str	r3, [r7, #48]	; 0x30
 800638e:	2300      	movs	r3, #0
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
 8006392:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	f04f 0000 	mov.w	r0, #0
 800639e:	f04f 0100 	mov.w	r1, #0
 80063a2:	0159      	lsls	r1, r3, #5
 80063a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a8:	0150      	lsls	r0, r2, #5
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4621      	mov	r1, r4
 80063b0:	1a51      	subs	r1, r2, r1
 80063b2:	6139      	str	r1, [r7, #16]
 80063b4:	4629      	mov	r1, r5
 80063b6:	eb63 0301 	sbc.w	r3, r3, r1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c8:	4659      	mov	r1, fp
 80063ca:	018b      	lsls	r3, r1, #6
 80063cc:	4651      	mov	r1, sl
 80063ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063d2:	4651      	mov	r1, sl
 80063d4:	018a      	lsls	r2, r1, #6
 80063d6:	4651      	mov	r1, sl
 80063d8:	ebb2 0801 	subs.w	r8, r2, r1
 80063dc:	4659      	mov	r1, fp
 80063de:	eb63 0901 	sbc.w	r9, r3, r1
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f6:	4690      	mov	r8, r2
 80063f8:	4699      	mov	r9, r3
 80063fa:	4623      	mov	r3, r4
 80063fc:	eb18 0303 	adds.w	r3, r8, r3
 8006400:	60bb      	str	r3, [r7, #8]
 8006402:	462b      	mov	r3, r5
 8006404:	eb49 0303 	adc.w	r3, r9, r3
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006416:	4629      	mov	r1, r5
 8006418:	024b      	lsls	r3, r1, #9
 800641a:	4621      	mov	r1, r4
 800641c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006420:	4621      	mov	r1, r4
 8006422:	024a      	lsls	r2, r1, #9
 8006424:	4610      	mov	r0, r2
 8006426:	4619      	mov	r1, r3
 8006428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642a:	2200      	movs	r2, #0
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
 800642e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006434:	f7fa fc08 	bl	8000c48 <__aeabi_uldivmod>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4613      	mov	r3, r2
 800643e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006440:	e058      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006442:	4b38      	ldr	r3, [pc, #224]	; (8006524 <HAL_RCC_GetSysClockFreq+0x200>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	2200      	movs	r2, #0
 800644a:	4618      	mov	r0, r3
 800644c:	4611      	mov	r1, r2
 800644e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006452:	623b      	str	r3, [r7, #32]
 8006454:	2300      	movs	r3, #0
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
 8006458:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800645c:	4642      	mov	r2, r8
 800645e:	464b      	mov	r3, r9
 8006460:	f04f 0000 	mov.w	r0, #0
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	0159      	lsls	r1, r3, #5
 800646a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800646e:	0150      	lsls	r0, r2, #5
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4641      	mov	r1, r8
 8006476:	ebb2 0a01 	subs.w	sl, r2, r1
 800647a:	4649      	mov	r1, r9
 800647c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800648c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006490:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006494:	ebb2 040a 	subs.w	r4, r2, sl
 8006498:	eb63 050b 	sbc.w	r5, r3, fp
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	00eb      	lsls	r3, r5, #3
 80064a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064aa:	00e2      	lsls	r2, r4, #3
 80064ac:	4614      	mov	r4, r2
 80064ae:	461d      	mov	r5, r3
 80064b0:	4643      	mov	r3, r8
 80064b2:	18e3      	adds	r3, r4, r3
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	464b      	mov	r3, r9
 80064b8:	eb45 0303 	adc.w	r3, r5, r3
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064ca:	4629      	mov	r1, r5
 80064cc:	028b      	lsls	r3, r1, #10
 80064ce:	4621      	mov	r1, r4
 80064d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064d4:	4621      	mov	r1, r4
 80064d6:	028a      	lsls	r2, r1, #10
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064de:	2200      	movs	r2, #0
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	61fa      	str	r2, [r7, #28]
 80064e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e8:	f7fa fbae 	bl	8000c48 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4613      	mov	r3, r2
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	0c1b      	lsrs	r3, r3, #16
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	3301      	adds	r3, #1
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800650e:	e002      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCC_GetSysClockFreq+0x204>)
 8006512:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006518:	4618      	mov	r0, r3
 800651a:	3750      	adds	r7, #80	; 0x50
 800651c:	46bd      	mov	sp, r7
 800651e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006522:	bf00      	nop
 8006524:	40023800 	.word	0x40023800
 8006528:	00f42400 	.word	0x00f42400
 800652c:	007a1200 	.word	0x007a1200

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006534:	4b03      	ldr	r3, [pc, #12]	; (8006544 <HAL_RCC_GetHCLKFreq+0x14>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000002c 	.word	0x2000002c

08006548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800654c:	f7ff fff0 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006550:	4602      	mov	r2, r0
 8006552:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	0a9b      	lsrs	r3, r3, #10
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	4903      	ldr	r1, [pc, #12]	; (800656c <HAL_RCC_GetPCLK1Freq+0x24>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006564:	4618      	mov	r0, r3
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40023800 	.word	0x40023800
 800656c:	0800ba68 	.word	0x0800ba68

08006570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006574:	f7ff ffdc 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0b5b      	lsrs	r3, r3, #13
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	; (8006594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	0800ba68 	.word	0x0800ba68

08006598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e07b      	b.n	80066a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d108      	bne.n	80065c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ba:	d009      	beq.n	80065d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	61da      	str	r2, [r3, #28]
 80065c2:	e005      	b.n	80065d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fb ffd8 	bl	80025a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006606:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006654:	ea42 0103 	orr.w	r1, r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	f003 0104 	and.w	r1, r3, #4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	f003 0210 	and.w	r2, r3, #16
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e041      	b.n	8006740 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fc f821 	bl	8002718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f000 fed1 	bl	8007490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d001      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e04e      	b.n	80067fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <HAL_TIM_Base_Start_IT+0xc4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d022      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x80>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678a:	d01d      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x80>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <HAL_TIM_Base_Start_IT+0xc8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d018      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x80>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1e      	ldr	r2, [pc, #120]	; (8006814 <HAL_TIM_Base_Start_IT+0xcc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d013      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x80>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_TIM_Base_Start_IT+0xd0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00e      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x80>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1b      	ldr	r2, [pc, #108]	; (800681c <HAL_TIM_Base_Start_IT+0xd4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d009      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a19      	ldr	r2, [pc, #100]	; (8006820 <HAL_TIM_Base_Start_IT+0xd8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <HAL_TIM_Base_Start_IT+0x80>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a18      	ldr	r2, [pc, #96]	; (8006824 <HAL_TIM_Base_Start_IT+0xdc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d111      	bne.n	80067ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b06      	cmp	r3, #6
 80067d8:	d010      	beq.n	80067fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ea:	e007      	b.n	80067fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40010400 	.word	0x40010400
 8006820:	40014000 	.word	0x40014000
 8006824:	40001800 	.word	0x40001800

08006828 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e041      	b.n	80068be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc f806 	bl	8002860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f000 fe12 	bl	8007490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <HAL_TIM_PWM_Start+0x24>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e022      	b.n	8006932 <HAL_TIM_PWM_Start+0x6a>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d109      	bne.n	8006906 <HAL_TIM_PWM_Start+0x3e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e015      	b.n	8006932 <HAL_TIM_PWM_Start+0x6a>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d109      	bne.n	8006920 <HAL_TIM_PWM_Start+0x58>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	e008      	b.n	8006932 <HAL_TIM_PWM_Start+0x6a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e07c      	b.n	8006a34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start+0x82>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	e013      	b.n	8006972 <HAL_TIM_PWM_Start+0xaa>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0x92>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006958:	e00b      	b.n	8006972 <HAL_TIM_PWM_Start+0xaa>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006968:	e003      	b.n	8006972 <HAL_TIM_PWM_Start+0xaa>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2201      	movs	r2, #1
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f001 f99c 	bl	8007cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2d      	ldr	r2, [pc, #180]	; (8006a3c <HAL_TIM_PWM_Start+0x174>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_TIM_PWM_Start+0xcc>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <HAL_TIM_PWM_Start+0x178>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d101      	bne.n	8006998 <HAL_TIM_PWM_Start+0xd0>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <HAL_TIM_PWM_Start+0xd2>
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <HAL_TIM_PWM_Start+0x174>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d022      	beq.n	80069fe <HAL_TIM_PWM_Start+0x136>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c0:	d01d      	beq.n	80069fe <HAL_TIM_PWM_Start+0x136>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <HAL_TIM_PWM_Start+0x17c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d018      	beq.n	80069fe <HAL_TIM_PWM_Start+0x136>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <HAL_TIM_PWM_Start+0x180>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d013      	beq.n	80069fe <HAL_TIM_PWM_Start+0x136>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <HAL_TIM_PWM_Start+0x184>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00e      	beq.n	80069fe <HAL_TIM_PWM_Start+0x136>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <HAL_TIM_PWM_Start+0x178>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIM_PWM_Start+0x136>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_TIM_PWM_Start+0x188>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_PWM_Start+0x136>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <HAL_TIM_PWM_Start+0x18c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d111      	bne.n	8006a22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d010      	beq.n	8006a32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	e007      	b.n	8006a32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40010400 	.word	0x40010400
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40001800 	.word	0x40001800

08006a58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e041      	b.n	8006aee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f839 	bl	8006af6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f000 fcfa 	bl	8007490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_IC_Start_IT+0x1e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	e013      	b.n	8006b52 <HAL_TIM_IC_Start_IT+0x46>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_IC_Start_IT+0x2e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	e00b      	b.n	8006b52 <HAL_TIM_IC_Start_IT+0x46>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_IC_Start_IT+0x3e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	e003      	b.n	8006b52 <HAL_TIM_IC_Start_IT+0x46>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <HAL_TIM_IC_Start_IT+0x58>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e013      	b.n	8006b8c <HAL_TIM_IC_Start_IT+0x80>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d104      	bne.n	8006b74 <HAL_TIM_IC_Start_IT+0x68>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	e00b      	b.n	8006b8c <HAL_TIM_IC_Start_IT+0x80>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d104      	bne.n	8006b84 <HAL_TIM_IC_Start_IT+0x78>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	e003      	b.n	8006b8c <HAL_TIM_IC_Start_IT+0x80>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d102      	bne.n	8006b9a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b94:	7b7b      	ldrb	r3, [r7, #13]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d001      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e0cc      	b.n	8006d38 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_IC_Start_IT+0xa2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bac:	e013      	b.n	8006bd6 <HAL_TIM_IC_Start_IT+0xca>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d104      	bne.n	8006bbe <HAL_TIM_IC_Start_IT+0xb2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbc:	e00b      	b.n	8006bd6 <HAL_TIM_IC_Start_IT+0xca>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d104      	bne.n	8006bce <HAL_TIM_IC_Start_IT+0xc2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bcc:	e003      	b.n	8006bd6 <HAL_TIM_IC_Start_IT+0xca>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <HAL_TIM_IC_Start_IT+0xda>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006be4:	e013      	b.n	8006c0e <HAL_TIM_IC_Start_IT+0x102>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d104      	bne.n	8006bf6 <HAL_TIM_IC_Start_IT+0xea>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bf4:	e00b      	b.n	8006c0e <HAL_TIM_IC_Start_IT+0x102>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d104      	bne.n	8006c06 <HAL_TIM_IC_Start_IT+0xfa>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c04:	e003      	b.n	8006c0e <HAL_TIM_IC_Start_IT+0x102>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b0c      	cmp	r3, #12
 8006c12:	d841      	bhi.n	8006c98 <HAL_TIM_IC_Start_IT+0x18c>
 8006c14:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <HAL_TIM_IC_Start_IT+0x110>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c51 	.word	0x08006c51
 8006c20:	08006c99 	.word	0x08006c99
 8006c24:	08006c99 	.word	0x08006c99
 8006c28:	08006c99 	.word	0x08006c99
 8006c2c:	08006c63 	.word	0x08006c63
 8006c30:	08006c99 	.word	0x08006c99
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006c99 	.word	0x08006c99
 8006c3c:	08006c75 	.word	0x08006c75
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006c99 	.word	0x08006c99
 8006c4c:	08006c87 	.word	0x08006c87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0202 	orr.w	r2, r2, #2
 8006c5e:	60da      	str	r2, [r3, #12]
      break;
 8006c60:	e01d      	b.n	8006c9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0204 	orr.w	r2, r2, #4
 8006c70:	60da      	str	r2, [r3, #12]
      break;
 8006c72:	e014      	b.n	8006c9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0208 	orr.w	r2, r2, #8
 8006c82:	60da      	str	r2, [r3, #12]
      break;
 8006c84:	e00b      	b.n	8006c9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0210 	orr.w	r2, r2, #16
 8006c94:	60da      	str	r2, [r3, #12]
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d148      	bne.n	8006d36 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f803 	bl	8007cb8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <HAL_TIM_IC_Start_IT+0x234>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc4:	d01d      	beq.n	8006d02 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <HAL_TIM_IC_Start_IT+0x238>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <HAL_TIM_IC_Start_IT+0x23c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <HAL_TIM_IC_Start_IT+0x240>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a19      	ldr	r2, [pc, #100]	; (8006d50 <HAL_TIM_IC_Start_IT+0x244>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <HAL_TIM_IC_Start_IT+0x248>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <HAL_TIM_IC_Start_IT+0x24c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d111      	bne.n	8006d26 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d010      	beq.n	8006d36 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	e007      	b.n	8006d36 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0201 	orr.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40000400 	.word	0x40000400
 8006d48:	40000800 	.word	0x40000800
 8006d4c:	40000c00 	.word	0x40000c00
 8006d50:	40010400 	.word	0x40010400
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40001800 	.word	0x40001800

08006d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0202 	mvn.w	r2, #2
 8006d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fd f8c6 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fb54 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fb5b 	bl	8007468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d122      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d11b      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0204 	mvn.w	r2, #4
 8006ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fd f89c 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8006df8:	e005      	b.n	8006e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fb2a 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fb31 	bl	8007468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d122      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d11b      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0208 	mvn.w	r2, #8
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2204      	movs	r2, #4
 8006e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fd f872 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e005      	b.n	8006e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fb00 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fb07 	bl	8007468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0210 	mvn.w	r2, #16
 8006e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2208      	movs	r2, #8
 8006e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fd f848 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fad6 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fadd 	bl	8007468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0201 	mvn.w	r2, #1
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fab0 	bl	8007440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d10e      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	2b80      	cmp	r3, #128	; 0x80
 8006efa:	d107      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 ffd4 	bl	8007eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d10e      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d107      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 faa2 	bl	800747c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d10e      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d107      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0220 	mvn.w	r2, #32
 8006f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 ff9e 	bl	8007ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e088      	b.n	800709c <HAL_TIM_IC_ConfigChannel+0x130>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11b      	bne.n	8006fd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f000 fcc2 	bl	8007930 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 020c 	bic.w	r2, r2, #12
 8006fba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6999      	ldr	r1, [r3, #24]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	619a      	str	r2, [r3, #24]
 8006fce:	e060      	b.n	8007092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d11c      	bne.n	8007010 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6819      	ldr	r1, [r3, #0]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f000 fd46 	bl	8007a76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ff8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6999      	ldr	r1, [r3, #24]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	021a      	lsls	r2, r3, #8
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	619a      	str	r2, [r3, #24]
 800700e:	e040      	b.n	8007092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b08      	cmp	r3, #8
 8007014:	d11b      	bne.n	800704e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6819      	ldr	r1, [r3, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f000 fd93 	bl	8007b50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 020c 	bic.w	r2, r2, #12
 8007038:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69d9      	ldr	r1, [r3, #28]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	61da      	str	r2, [r3, #28]
 800704c:	e021      	b.n	8007092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b0c      	cmp	r3, #12
 8007052:	d11c      	bne.n	800708e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6819      	ldr	r1, [r3, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f000 fdb0 	bl	8007bc8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69da      	ldr	r2, [r3, #28]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007076:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69d9      	ldr	r1, [r3, #28]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	021a      	lsls	r2, r3, #8
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	61da      	str	r2, [r3, #28]
 800708c:	e001      	b.n	8007092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070be:	2302      	movs	r3, #2
 80070c0:	e0ae      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b0c      	cmp	r3, #12
 80070ce:	f200 809f 	bhi.w	8007210 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	0800710d 	.word	0x0800710d
 80070dc:	08007211 	.word	0x08007211
 80070e0:	08007211 	.word	0x08007211
 80070e4:	08007211 	.word	0x08007211
 80070e8:	0800714d 	.word	0x0800714d
 80070ec:	08007211 	.word	0x08007211
 80070f0:	08007211 	.word	0x08007211
 80070f4:	08007211 	.word	0x08007211
 80070f8:	0800718f 	.word	0x0800718f
 80070fc:	08007211 	.word	0x08007211
 8007100:	08007211 	.word	0x08007211
 8007104:	08007211 	.word	0x08007211
 8007108:	080071cf 	.word	0x080071cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fa5c 	bl	80075d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0208 	orr.w	r2, r2, #8
 8007126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0204 	bic.w	r2, r2, #4
 8007136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6999      	ldr	r1, [r3, #24]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	619a      	str	r2, [r3, #24]
      break;
 800714a:	e064      	b.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 faac 	bl	80076b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6999      	ldr	r1, [r3, #24]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	021a      	lsls	r2, r3, #8
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	619a      	str	r2, [r3, #24]
      break;
 800718c:	e043      	b.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fb01 	bl	800779c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 0208 	orr.w	r2, r2, #8
 80071a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0204 	bic.w	r2, r2, #4
 80071b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69d9      	ldr	r1, [r3, #28]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	61da      	str	r2, [r3, #28]
      break;
 80071cc:	e023      	b.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fb55 	bl	8007884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69d9      	ldr	r1, [r3, #28]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	021a      	lsls	r2, r3, #8
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	61da      	str	r2, [r3, #28]
      break;
 800720e:	e002      	b.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	75fb      	strb	r3, [r7, #23]
      break;
 8007214:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIM_ConfigClockSource+0x1c>
 8007240:	2302      	movs	r3, #2
 8007242:	e0b4      	b.n	80073ae <HAL_TIM_ConfigClockSource+0x186>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800726a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727c:	d03e      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0xd4>
 800727e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007282:	f200 8087 	bhi.w	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728a:	f000 8086 	beq.w	800739a <HAL_TIM_ConfigClockSource+0x172>
 800728e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007292:	d87f      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 8007294:	2b70      	cmp	r3, #112	; 0x70
 8007296:	d01a      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0xa6>
 8007298:	2b70      	cmp	r3, #112	; 0x70
 800729a:	d87b      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 800729c:	2b60      	cmp	r3, #96	; 0x60
 800729e:	d050      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x11a>
 80072a0:	2b60      	cmp	r3, #96	; 0x60
 80072a2:	d877      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072a4:	2b50      	cmp	r3, #80	; 0x50
 80072a6:	d03c      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0xfa>
 80072a8:	2b50      	cmp	r3, #80	; 0x50
 80072aa:	d873      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d058      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x13a>
 80072b0:	2b40      	cmp	r3, #64	; 0x40
 80072b2:	d86f      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072b4:	2b30      	cmp	r3, #48	; 0x30
 80072b6:	d064      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072b8:	2b30      	cmp	r3, #48	; 0x30
 80072ba:	d86b      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d060      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d867      	bhi.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d05c      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d05a      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x15a>
 80072cc:	e062      	b.n	8007394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6899      	ldr	r1, [r3, #8]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f000 fccb 	bl	8007c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	609a      	str	r2, [r3, #8]
      break;
 80072fa:	e04f      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6899      	ldr	r1, [r3, #8]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f000 fcb4 	bl	8007c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800731e:	609a      	str	r2, [r3, #8]
      break;
 8007320:	e03c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6859      	ldr	r1, [r3, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	461a      	mov	r2, r3
 8007330:	f000 fb72 	bl	8007a18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2150      	movs	r1, #80	; 0x50
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fc81 	bl	8007c42 <TIM_ITRx_SetConfig>
      break;
 8007340:	e02c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	f000 fbce 	bl	8007af0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2160      	movs	r1, #96	; 0x60
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fc71 	bl	8007c42 <TIM_ITRx_SetConfig>
      break;
 8007360:	e01c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6859      	ldr	r1, [r3, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	461a      	mov	r2, r3
 8007370:	f000 fb52 	bl	8007a18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2140      	movs	r1, #64	; 0x40
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fc61 	bl	8007c42 <TIM_ITRx_SetConfig>
      break;
 8007380:	e00c      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f000 fc58 	bl	8007c42 <TIM_ITRx_SetConfig>
      break;
 8007392:	e003      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
      break;
 8007398:	e000      	b.n	800739c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800739a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	d831      	bhi.n	8007430 <HAL_TIM_ReadCapturedValue+0x78>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	08007409 	.word	0x08007409
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007431 	.word	0x08007431
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007413 	.word	0x08007413
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007431 	.word	0x08007431
 80073f4:	0800741d 	.word	0x0800741d
 80073f8:	08007431 	.word	0x08007431
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007431 	.word	0x08007431
 8007404:	08007427 	.word	0x08007427
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	60fb      	str	r3, [r7, #12]

      break;
 8007410:	e00f      	b.n	8007432 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	60fb      	str	r3, [r7, #12]

      break;
 800741a:	e00a      	b.n	8007432 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	60fb      	str	r3, [r7, #12]

      break;
 8007424:	e005      	b.n	8007432 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	60fb      	str	r3, [r7, #12]

      break;
 800742e:	e000      	b.n	8007432 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007430:	bf00      	nop
  }

  return tmpreg;
 8007432:	68fb      	ldr	r3, [r7, #12]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a40      	ldr	r2, [pc, #256]	; (80075a4 <TIM_Base_SetConfig+0x114>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d013      	beq.n	80074d0 <TIM_Base_SetConfig+0x40>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ae:	d00f      	beq.n	80074d0 <TIM_Base_SetConfig+0x40>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a3d      	ldr	r2, [pc, #244]	; (80075a8 <TIM_Base_SetConfig+0x118>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00b      	beq.n	80074d0 <TIM_Base_SetConfig+0x40>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a3c      	ldr	r2, [pc, #240]	; (80075ac <TIM_Base_SetConfig+0x11c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d007      	beq.n	80074d0 <TIM_Base_SetConfig+0x40>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a3b      	ldr	r2, [pc, #236]	; (80075b0 <TIM_Base_SetConfig+0x120>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d003      	beq.n	80074d0 <TIM_Base_SetConfig+0x40>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a3a      	ldr	r2, [pc, #232]	; (80075b4 <TIM_Base_SetConfig+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d108      	bne.n	80074e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2f      	ldr	r2, [pc, #188]	; (80075a4 <TIM_Base_SetConfig+0x114>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d02b      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f0:	d027      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2c      	ldr	r2, [pc, #176]	; (80075a8 <TIM_Base_SetConfig+0x118>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d023      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <TIM_Base_SetConfig+0x11c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01f      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a2a      	ldr	r2, [pc, #168]	; (80075b0 <TIM_Base_SetConfig+0x120>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d01b      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a29      	ldr	r2, [pc, #164]	; (80075b4 <TIM_Base_SetConfig+0x124>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d017      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a28      	ldr	r2, [pc, #160]	; (80075b8 <TIM_Base_SetConfig+0x128>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a27      	ldr	r2, [pc, #156]	; (80075bc <TIM_Base_SetConfig+0x12c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00f      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a26      	ldr	r2, [pc, #152]	; (80075c0 <TIM_Base_SetConfig+0x130>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00b      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a25      	ldr	r2, [pc, #148]	; (80075c4 <TIM_Base_SetConfig+0x134>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d007      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a24      	ldr	r2, [pc, #144]	; (80075c8 <TIM_Base_SetConfig+0x138>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_Base_SetConfig+0xb2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a23      	ldr	r2, [pc, #140]	; (80075cc <TIM_Base_SetConfig+0x13c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d108      	bne.n	8007554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <TIM_Base_SetConfig+0x114>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_Base_SetConfig+0xf8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a0c      	ldr	r2, [pc, #48]	; (80075b4 <TIM_Base_SetConfig+0x124>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d103      	bne.n	8007590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	691a      	ldr	r2, [r3, #16]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	615a      	str	r2, [r3, #20]
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40000400 	.word	0x40000400
 80075ac:	40000800 	.word	0x40000800
 80075b0:	40000c00 	.word	0x40000c00
 80075b4:	40010400 	.word	0x40010400
 80075b8:	40014000 	.word	0x40014000
 80075bc:	40014400 	.word	0x40014400
 80075c0:	40014800 	.word	0x40014800
 80075c4:	40001800 	.word	0x40001800
 80075c8:	40001c00 	.word	0x40001c00
 80075cc:	40002000 	.word	0x40002000

080075d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f023 0201 	bic.w	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f023 0302 	bic.w	r3, r3, #2
 8007618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a20      	ldr	r2, [pc, #128]	; (80076a8 <TIM_OC1_SetConfig+0xd8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC1_SetConfig+0x64>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <TIM_OC1_SetConfig+0xdc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10c      	bne.n	800764e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f023 0308 	bic.w	r3, r3, #8
 800763a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f023 0304 	bic.w	r3, r3, #4
 800764c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a15      	ldr	r2, [pc, #84]	; (80076a8 <TIM_OC1_SetConfig+0xd8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_OC1_SetConfig+0x8e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a14      	ldr	r2, [pc, #80]	; (80076ac <TIM_OC1_SetConfig+0xdc>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d111      	bne.n	8007682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800766c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	621a      	str	r2, [r3, #32]
}
 800769c:	bf00      	nop
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	40010000 	.word	0x40010000
 80076ac:	40010400 	.word	0x40010400

080076b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f023 0210 	bic.w	r2, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f023 0320 	bic.w	r3, r3, #32
 80076fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a22      	ldr	r2, [pc, #136]	; (8007794 <TIM_OC2_SetConfig+0xe4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_OC2_SetConfig+0x68>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a21      	ldr	r2, [pc, #132]	; (8007798 <TIM_OC2_SetConfig+0xe8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d10d      	bne.n	8007734 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800771e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <TIM_OC2_SetConfig+0xe4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_OC2_SetConfig+0x94>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a16      	ldr	r2, [pc, #88]	; (8007798 <TIM_OC2_SetConfig+0xe8>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d113      	bne.n	800776c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800774a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	621a      	str	r2, [r3, #32]
}
 8007786:	bf00      	nop
 8007788:	371c      	adds	r7, #28
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40010000 	.word	0x40010000
 8007798:	40010400 	.word	0x40010400

0800779c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0303 	bic.w	r3, r3, #3
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a21      	ldr	r2, [pc, #132]	; (800787c <TIM_OC3_SetConfig+0xe0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d003      	beq.n	8007802 <TIM_OC3_SetConfig+0x66>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a20      	ldr	r2, [pc, #128]	; (8007880 <TIM_OC3_SetConfig+0xe4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10d      	bne.n	800781e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800781c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a16      	ldr	r2, [pc, #88]	; (800787c <TIM_OC3_SetConfig+0xe0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d003      	beq.n	800782e <TIM_OC3_SetConfig+0x92>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a15      	ldr	r2, [pc, #84]	; (8007880 <TIM_OC3_SetConfig+0xe4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d113      	bne.n	8007856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800783c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	621a      	str	r2, [r3, #32]
}
 8007870:	bf00      	nop
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	40010000 	.word	0x40010000
 8007880:	40010400 	.word	0x40010400

08007884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	021b      	lsls	r3, r3, #8
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	031b      	lsls	r3, r3, #12
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a12      	ldr	r2, [pc, #72]	; (8007928 <TIM_OC4_SetConfig+0xa4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d003      	beq.n	80078ec <TIM_OC4_SetConfig+0x68>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a11      	ldr	r2, [pc, #68]	; (800792c <TIM_OC4_SetConfig+0xa8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d109      	bne.n	8007900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	019b      	lsls	r3, r3, #6
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40010000 	.word	0x40010000
 800792c:	40010400 	.word	0x40010400

08007930 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f023 0201 	bic.w	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a28      	ldr	r2, [pc, #160]	; (80079fc <TIM_TI1_SetConfig+0xcc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01b      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007964:	d017      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a25      	ldr	r2, [pc, #148]	; (8007a00 <TIM_TI1_SetConfig+0xd0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a24      	ldr	r2, [pc, #144]	; (8007a04 <TIM_TI1_SetConfig+0xd4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00f      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <TIM_TI1_SetConfig+0xd8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00b      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a22      	ldr	r2, [pc, #136]	; (8007a0c <TIM_TI1_SetConfig+0xdc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d007      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4a21      	ldr	r2, [pc, #132]	; (8007a10 <TIM_TI1_SetConfig+0xe0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a20      	ldr	r2, [pc, #128]	; (8007a14 <TIM_TI1_SetConfig+0xe4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <TIM_TI1_SetConfig+0x6a>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <TIM_TI1_SetConfig+0x6c>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	e003      	b.n	80079ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f023 030a 	bic.w	r3, r3, #10
 80079d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f003 030a 	and.w	r3, r3, #10
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40010400 	.word	0x40010400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40001800 	.word	0x40001800

08007a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f023 0201 	bic.w	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f023 030a 	bic.w	r3, r3, #10
 8007a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b087      	sub	sp, #28
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f023 0210 	bic.w	r2, r3, #16
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	021b      	lsls	r3, r3, #8
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	031b      	lsls	r3, r3, #12
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ac8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	621a      	str	r2, [r3, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f023 0210 	bic.w	r2, r3, #16
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	031b      	lsls	r3, r3, #12
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	621a      	str	r2, [r3, #32]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f023 0303 	bic.w	r3, r3, #3
 8007b7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007ba0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	621a      	str	r2, [r3, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	031b      	lsls	r3, r3, #12
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	031b      	lsls	r3, r3, #12
 8007c20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f043 0307 	orr.w	r3, r3, #7
 8007c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	609a      	str	r2, [r3, #8]
}
 8007c6c:	bf00      	nop
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	021a      	lsls	r2, r3, #8
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	609a      	str	r2, [r3, #8]
}
 8007cac:	bf00      	nop
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2201      	movs	r2, #1
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1a      	ldr	r2, [r3, #32]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	401a      	ands	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a1a      	ldr	r2, [r3, #32]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e05a      	b.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a21      	ldr	r2, [pc, #132]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d022      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d68:	d01d      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d018      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a1b      	ldr	r2, [pc, #108]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d013      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1a      	ldr	r2, [pc, #104]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00e      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d009      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a17      	ldr	r2, [pc, #92]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d004      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d10c      	bne.n	8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	40010000 	.word	0x40010000
 8007de4:	40000400 	.word	0x40000400
 8007de8:	40000800 	.word	0x40000800
 8007dec:	40000c00 	.word	0x40000c00
 8007df0:	40010400 	.word	0x40010400
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40001800 	.word	0x40001800

08007dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e03d      	b.n	8007e94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e03f      	b.n	8007f5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fa fd58 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2224      	movs	r2, #36	; 0x24
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fd19 	bl	8008944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695a      	ldr	r2, [r3, #20]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d130      	bne.n	8007fde <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_UART_Transmit_IT+0x26>
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e029      	b.n	8007fe0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_UART_Transmit_IT+0x38>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e022      	b.n	8007fe0 <HAL_UART_Transmit_IT+0x7e>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2221      	movs	r2, #33	; 0x21
 8007fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fd8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e000      	b.n	8007fe0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007fde:	2302      	movs	r3, #2
  }
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b20      	cmp	r3, #32
 8008004:	d11d      	bne.n	8008042 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <HAL_UART_Receive_IT+0x26>
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e016      	b.n	8008044 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_UART_Receive_IT+0x38>
 8008020:	2302      	movs	r3, #2
 8008022:	e00f      	b.n	8008044 <HAL_UART_Receive_IT+0x58>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008032:	88fb      	ldrh	r3, [r7, #6]
 8008034:	461a      	mov	r2, r3
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 faab 	bl	8008594 <UART_Start_Receive_IT>
 800803e:	4603      	mov	r3, r0
 8008040:	e000      	b.n	8008044 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008042:	2302      	movs	r3, #2
  }
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b0ba      	sub	sp, #232	; 0xe8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008072:	2300      	movs	r3, #0
 8008074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008078:	2300      	movs	r3, #0
 800807a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800807e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800808a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10f      	bne.n	80080b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <HAL_UART_IRQHandler+0x66>
 800809e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb8f 	bl	80087ce <UART_Receive_IT>
      return;
 80080b0:	e256      	b.n	8008560 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 80de 	beq.w	8008278 <HAL_UART_IRQHandler+0x22c>
 80080bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80d1 	beq.w	8008278 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <HAL_UART_IRQHandler+0xae>
 80080e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f043 0201 	orr.w	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <HAL_UART_IRQHandler+0xd2>
 8008106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d005      	beq.n	800811e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f043 0202 	orr.w	r2, r3, #2
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800811e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00b      	beq.n	8008142 <HAL_UART_IRQHandler+0xf6>
 800812a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	f043 0204 	orr.w	r2, r3, #4
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d011      	beq.n	8008172 <HAL_UART_IRQHandler+0x126>
 800814e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800815a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f043 0208 	orr.w	r2, r3, #8
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 81ed 	beq.w	8008556 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_UART_IRQHandler+0x14e>
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb1a 	bl	80087ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	bf0c      	ite	eq
 80081a8:	2301      	moveq	r3, #1
 80081aa:	2300      	movne	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <HAL_UART_IRQHandler+0x17a>
 80081be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d04f      	beq.n	8008266 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa22 	bl	8008610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d6:	2b40      	cmp	r3, #64	; 0x40
 80081d8:	d141      	bne.n	800825e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3314      	adds	r3, #20
 80081e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3314      	adds	r3, #20
 8008202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800820a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800821e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1d9      	bne.n	80081da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	2b00      	cmp	r3, #0
 800822c:	d013      	beq.n	8008256 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	4a7d      	ldr	r2, [pc, #500]	; (8008428 <HAL_UART_IRQHandler+0x3dc>)
 8008234:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	4618      	mov	r0, r3
 800823c:	f7fc fa37 	bl	80046ae <HAL_DMA_Abort_IT>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d016      	beq.n	8008274 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	e00e      	b.n	8008274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f986 	bl	8008568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825c:	e00a      	b.n	8008274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f982 	bl	8008568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	e006      	b.n	8008274 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f97e 	bl	8008568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008272:	e170      	b.n	8008556 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	bf00      	nop
    return;
 8008276:	e16e      	b.n	8008556 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 814a 	bne.w	8008516 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8143 	beq.w	8008516 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 813c 	beq.w	8008516 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	f040 80b4 	bne.w	800842c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8140 	beq.w	800855a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082e2:	429a      	cmp	r2, r3
 80082e4:	f080 8139 	bcs.w	800855a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fa:	f000 8088 	beq.w	800840e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	330c      	adds	r3, #12
 8008304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	330c      	adds	r3, #12
 8008326:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800832a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800832e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008336:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1d9      	bne.n	80082fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3314      	adds	r3, #20
 8008350:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800835a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800835c:	f023 0301 	bic.w	r3, r3, #1
 8008360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3314      	adds	r3, #20
 800836a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800836e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008372:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008376:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e1      	bne.n	800834a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3314      	adds	r3, #20
 800838c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3314      	adds	r3, #20
 80083a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e3      	bne.n	8008386 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	330c      	adds	r3, #12
 80083d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083de:	f023 0310 	bic.w	r3, r3, #16
 80083e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80083f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e3      	bne.n	80083cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	4618      	mov	r0, r3
 800840a:	f7fc f8e0 	bl	80045ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008416:	b29b      	uxth	r3, r3
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	b29b      	uxth	r3, r3
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8ac 	bl	800857c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008424:	e099      	b.n	800855a <HAL_UART_IRQHandler+0x50e>
 8008426:	bf00      	nop
 8008428:	080086d7 	.word	0x080086d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008434:	b29b      	uxth	r3, r3
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008440:	b29b      	uxth	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 808b 	beq.w	800855e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8086 	beq.w	800855e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008476:	647a      	str	r2, [r7, #68]	; 0x44
 8008478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800847c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e3      	bne.n	8008452 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3314      	adds	r3, #20
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	623b      	str	r3, [r7, #32]
   return(result);
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3314      	adds	r3, #20
 80084aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084ae:	633a      	str	r2, [r7, #48]	; 0x30
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e3      	bne.n	800848a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	330c      	adds	r3, #12
 80084d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0310 	bic.w	r3, r3, #16
 80084e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	330c      	adds	r3, #12
 80084f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084f4:	61fa      	str	r2, [r7, #28]
 80084f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	69b9      	ldr	r1, [r7, #24]
 80084fa:	69fa      	ldr	r2, [r7, #28]
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	617b      	str	r3, [r7, #20]
   return(result);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e3      	bne.n	80084d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f834 	bl	800857c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008514:	e023      	b.n	800855e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <HAL_UART_IRQHandler+0x4ea>
 8008522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f8e5 	bl	80086fe <UART_Transmit_IT>
    return;
 8008534:	e014      	b.n	8008560 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00e      	beq.n	8008560 <HAL_UART_IRQHandler+0x514>
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f925 	bl	800879e <UART_EndTransmit_IT>
    return;
 8008554:	e004      	b.n	8008560 <HAL_UART_IRQHandler+0x514>
    return;
 8008556:	bf00      	nop
 8008558:	e002      	b.n	8008560 <HAL_UART_IRQHandler+0x514>
      return;
 800855a:	bf00      	nop
 800855c:	e000      	b.n	8008560 <HAL_UART_IRQHandler+0x514>
      return;
 800855e:	bf00      	nop
  }
}
 8008560:	37e8      	adds	r7, #232	; 0xe8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop

08008568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	88fa      	ldrh	r2, [r7, #6]
 80085ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	88fa      	ldrh	r2, [r7, #6]
 80085b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2222      	movs	r2, #34	; 0x22
 80085be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	695a      	ldr	r2, [r3, #20]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0201 	orr.w	r2, r2, #1
 80085f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0220 	orr.w	r2, r2, #32
 8008600:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b095      	sub	sp, #84	; 0x54
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800862e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	330c      	adds	r3, #12
 8008636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008638:	643a      	str	r2, [r7, #64]	; 0x40
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800863e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e5      	bne.n	8008618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3314      	adds	r3, #20
 8008652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	61fb      	str	r3, [r7, #28]
   return(result);
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f023 0301 	bic.w	r3, r3, #1
 8008662:	64bb      	str	r3, [r7, #72]	; 0x48
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3314      	adds	r3, #20
 800866a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800866c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e5      	bne.n	800864c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008684:	2b01      	cmp	r3, #1
 8008686:	d119      	bne.n	80086bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	60bb      	str	r3, [r7, #8]
   return(result);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f023 0310 	bic.w	r3, r3, #16
 800869e:	647b      	str	r3, [r7, #68]	; 0x44
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	330c      	adds	r3, #12
 80086a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a8:	61ba      	str	r2, [r7, #24]
 80086aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6979      	ldr	r1, [r7, #20]
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	613b      	str	r3, [r7, #16]
   return(result);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e5      	bne.n	8008688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086ca:	bf00      	nop
 80086cc:	3754      	adds	r7, #84	; 0x54
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff ff39 	bl	8008568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b21      	cmp	r3, #33	; 0x21
 8008710:	d13e      	bne.n	8008790 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800871a:	d114      	bne.n	8008746 <UART_Transmit_IT+0x48>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d110      	bne.n	8008746 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008738:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	1c9a      	adds	r2, r3, #2
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	621a      	str	r2, [r3, #32]
 8008744:	e008      	b.n	8008758 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	1c59      	adds	r1, r3, #1
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6211      	str	r1, [r2, #32]
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29b      	uxth	r3, r3
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	4619      	mov	r1, r3
 8008766:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10f      	bne.n	800878c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800877a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800878a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	e000      	b.n	8008792 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008790:	2302      	movs	r3, #2
  }
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7fb fa72 	bl	8003ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b08c      	sub	sp, #48	; 0x30
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b22      	cmp	r3, #34	; 0x22
 80087e0:	f040 80ab 	bne.w	800893a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ec:	d117      	bne.n	800881e <UART_Receive_IT+0x50>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d113      	bne.n	800881e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	b29b      	uxth	r3, r3
 8008808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880c:	b29a      	uxth	r2, r3
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	1c9a      	adds	r2, r3, #2
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	629a      	str	r2, [r3, #40]	; 0x28
 800881c:	e026      	b.n	800886c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008822:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008830:	d007      	beq.n	8008842 <UART_Receive_IT+0x74>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <UART_Receive_IT+0x82>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	b2da      	uxtb	r2, r3
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e008      	b.n	8008862 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885c:	b2da      	uxtb	r2, r3
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	b29b      	uxth	r3, r3
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	4619      	mov	r1, r3
 800887a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800887c:	2b00      	cmp	r3, #0
 800887e:	d15a      	bne.n	8008936 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0220 	bic.w	r2, r2, #32
 800888e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800889e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695a      	ldr	r2, [r3, #20]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0201 	bic.w	r2, r2, #1
 80088ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d135      	bne.n	800892c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	330c      	adds	r3, #12
 80088cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	613b      	str	r3, [r7, #16]
   return(result);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f023 0310 	bic.w	r3, r3, #16
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	330c      	adds	r3, #12
 80088e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e6:	623a      	str	r2, [r7, #32]
 80088e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	69f9      	ldr	r1, [r7, #28]
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e5      	bne.n	80088c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0310 	and.w	r3, r3, #16
 8008904:	2b10      	cmp	r3, #16
 8008906:	d10a      	bne.n	800891e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fe29 	bl	800857c <HAL_UARTEx_RxEventCallback>
 800892a:	e002      	b.n	8008932 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7fb f9c9 	bl	8003cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	e002      	b.n	800893c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	e000      	b.n	800893c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800893a:	2302      	movs	r3, #2
  }
}
 800893c:	4618      	mov	r0, r3
 800893e:	3730      	adds	r7, #48	; 0x30
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008948:	b0c0      	sub	sp, #256	; 0x100
 800894a:	af00      	add	r7, sp, #0
 800894c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	68d9      	ldr	r1, [r3, #12]
 8008962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	ea40 0301 	orr.w	r3, r0, r1
 800896c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	431a      	orrs	r2, r3
 800897c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	431a      	orrs	r2, r3
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	4313      	orrs	r3, r2
 800898c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800899c:	f021 010c 	bic.w	r1, r1, #12
 80089a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089aa:	430b      	orrs	r3, r1
 80089ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089be:	6999      	ldr	r1, [r3, #24]
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	ea40 0301 	orr.w	r3, r0, r1
 80089ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b8f      	ldr	r3, [pc, #572]	; (8008c10 <UART_SetConfig+0x2cc>)
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d005      	beq.n	80089e4 <UART_SetConfig+0xa0>
 80089d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	4b8d      	ldr	r3, [pc, #564]	; (8008c14 <UART_SetConfig+0x2d0>)
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d104      	bne.n	80089ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089e4:	f7fd fdc4 	bl	8006570 <HAL_RCC_GetPCLK2Freq>
 80089e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80089ec:	e003      	b.n	80089f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089ee:	f7fd fdab 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 80089f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a00:	f040 810c 	bne.w	8008c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a16:	4622      	mov	r2, r4
 8008a18:	462b      	mov	r3, r5
 8008a1a:	1891      	adds	r1, r2, r2
 8008a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a1e:	415b      	adcs	r3, r3
 8008a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a26:	4621      	mov	r1, r4
 8008a28:	eb12 0801 	adds.w	r8, r2, r1
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	eb43 0901 	adc.w	r9, r3, r1
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a46:	4690      	mov	r8, r2
 8008a48:	4699      	mov	r9, r3
 8008a4a:	4623      	mov	r3, r4
 8008a4c:	eb18 0303 	adds.w	r3, r8, r3
 8008a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a54:	462b      	mov	r3, r5
 8008a56:	eb49 0303 	adc.w	r3, r9, r3
 8008a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a72:	460b      	mov	r3, r1
 8008a74:	18db      	adds	r3, r3, r3
 8008a76:	653b      	str	r3, [r7, #80]	; 0x50
 8008a78:	4613      	mov	r3, r2
 8008a7a:	eb42 0303 	adc.w	r3, r2, r3
 8008a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a88:	f7f8 f8de 	bl	8000c48 <__aeabi_uldivmod>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4b61      	ldr	r3, [pc, #388]	; (8008c18 <UART_SetConfig+0x2d4>)
 8008a92:	fba3 2302 	umull	r2, r3, r3, r2
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	011c      	lsls	r4, r3, #4
 8008a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008aac:	4642      	mov	r2, r8
 8008aae:	464b      	mov	r3, r9
 8008ab0:	1891      	adds	r1, r2, r2
 8008ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ab4:	415b      	adcs	r3, r3
 8008ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008abc:	4641      	mov	r1, r8
 8008abe:	eb12 0a01 	adds.w	sl, r2, r1
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ac8:	f04f 0200 	mov.w	r2, #0
 8008acc:	f04f 0300 	mov.w	r3, #0
 8008ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008adc:	4692      	mov	sl, r2
 8008ade:	469b      	mov	fp, r3
 8008ae0:	4643      	mov	r3, r8
 8008ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8008ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008aea:	464b      	mov	r3, r9
 8008aec:	eb4b 0303 	adc.w	r3, fp, r3
 8008af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	18db      	adds	r3, r3, r3
 8008b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b0e:	4613      	mov	r3, r2
 8008b10:	eb42 0303 	adc.w	r3, r2, r3
 8008b14:	647b      	str	r3, [r7, #68]	; 0x44
 8008b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b1e:	f7f8 f893 	bl	8000c48 <__aeabi_uldivmod>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	4b3b      	ldr	r3, [pc, #236]	; (8008c18 <UART_SetConfig+0x2d4>)
 8008b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	2264      	movs	r2, #100	; 0x64
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
 8008b36:	1acb      	subs	r3, r1, r3
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b3e:	4b36      	ldr	r3, [pc, #216]	; (8008c18 <UART_SetConfig+0x2d4>)
 8008b40:	fba3 2302 	umull	r2, r3, r3, r2
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b4c:	441c      	add	r4, r3
 8008b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	1891      	adds	r1, r2, r2
 8008b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b68:	415b      	adcs	r3, r3
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b70:	4641      	mov	r1, r8
 8008b72:	1851      	adds	r1, r2, r1
 8008b74:	6339      	str	r1, [r7, #48]	; 0x30
 8008b76:	4649      	mov	r1, r9
 8008b78:	414b      	adcs	r3, r1
 8008b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b88:	4659      	mov	r1, fp
 8008b8a:	00cb      	lsls	r3, r1, #3
 8008b8c:	4651      	mov	r1, sl
 8008b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b92:	4651      	mov	r1, sl
 8008b94:	00ca      	lsls	r2, r1, #3
 8008b96:	4610      	mov	r0, r2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4642      	mov	r2, r8
 8008b9e:	189b      	adds	r3, r3, r2
 8008ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	460a      	mov	r2, r1
 8008ba8:	eb42 0303 	adc.w	r3, r2, r3
 8008bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	18db      	adds	r3, r3, r3
 8008bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bca:	4613      	mov	r3, r2
 8008bcc:	eb42 0303 	adc.w	r3, r2, r3
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bda:	f7f8 f835 	bl	8000c48 <__aeabi_uldivmod>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <UART_SetConfig+0x2d4>)
 8008be4:	fba3 1302 	umull	r1, r3, r3, r2
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	2164      	movs	r1, #100	; 0x64
 8008bec:	fb01 f303 	mul.w	r3, r1, r3
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	3332      	adds	r3, #50	; 0x32
 8008bf6:	4a08      	ldr	r2, [pc, #32]	; (8008c18 <UART_SetConfig+0x2d4>)
 8008bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfc:	095b      	lsrs	r3, r3, #5
 8008bfe:	f003 0207 	and.w	r2, r3, #7
 8008c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4422      	add	r2, r4
 8008c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c0c:	e105      	b.n	8008e1a <UART_SetConfig+0x4d6>
 8008c0e:	bf00      	nop
 8008c10:	40011000 	.word	0x40011000
 8008c14:	40011400 	.word	0x40011400
 8008c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c20:	2200      	movs	r2, #0
 8008c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c2e:	4642      	mov	r2, r8
 8008c30:	464b      	mov	r3, r9
 8008c32:	1891      	adds	r1, r2, r2
 8008c34:	6239      	str	r1, [r7, #32]
 8008c36:	415b      	adcs	r3, r3
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
 8008c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c3e:	4641      	mov	r1, r8
 8008c40:	1854      	adds	r4, r2, r1
 8008c42:	4649      	mov	r1, r9
 8008c44:	eb43 0501 	adc.w	r5, r3, r1
 8008c48:	f04f 0200 	mov.w	r2, #0
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	00eb      	lsls	r3, r5, #3
 8008c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c56:	00e2      	lsls	r2, r4, #3
 8008c58:	4614      	mov	r4, r2
 8008c5a:	461d      	mov	r5, r3
 8008c5c:	4643      	mov	r3, r8
 8008c5e:	18e3      	adds	r3, r4, r3
 8008c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c64:	464b      	mov	r3, r9
 8008c66:	eb45 0303 	adc.w	r3, r5, r3
 8008c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	008b      	lsls	r3, r1, #2
 8008c8e:	4621      	mov	r1, r4
 8008c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c94:	4621      	mov	r1, r4
 8008c96:	008a      	lsls	r2, r1, #2
 8008c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c9c:	f7f7 ffd4 	bl	8000c48 <__aeabi_uldivmod>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4b60      	ldr	r3, [pc, #384]	; (8008e28 <UART_SetConfig+0x4e4>)
 8008ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	011c      	lsls	r4, r3, #4
 8008cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	1891      	adds	r1, r2, r2
 8008cc6:	61b9      	str	r1, [r7, #24]
 8008cc8:	415b      	adcs	r3, r3
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cd0:	4641      	mov	r1, r8
 8008cd2:	1851      	adds	r1, r2, r1
 8008cd4:	6139      	str	r1, [r7, #16]
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	414b      	adcs	r3, r1
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	f04f 0200 	mov.w	r2, #0
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ce8:	4659      	mov	r1, fp
 8008cea:	00cb      	lsls	r3, r1, #3
 8008cec:	4651      	mov	r1, sl
 8008cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cf2:	4651      	mov	r1, sl
 8008cf4:	00ca      	lsls	r2, r1, #3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	189b      	adds	r3, r3, r2
 8008d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d04:	464b      	mov	r3, r9
 8008d06:	460a      	mov	r2, r1
 8008d08:	eb42 0303 	adc.w	r3, r2, r3
 8008d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d28:	4649      	mov	r1, r9
 8008d2a:	008b      	lsls	r3, r1, #2
 8008d2c:	4641      	mov	r1, r8
 8008d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d32:	4641      	mov	r1, r8
 8008d34:	008a      	lsls	r2, r1, #2
 8008d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d3a:	f7f7 ff85 	bl	8000c48 <__aeabi_uldivmod>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4b39      	ldr	r3, [pc, #228]	; (8008e28 <UART_SetConfig+0x4e4>)
 8008d44:	fba3 1302 	umull	r1, r3, r3, r2
 8008d48:	095b      	lsrs	r3, r3, #5
 8008d4a:	2164      	movs	r1, #100	; 0x64
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	3332      	adds	r3, #50	; 0x32
 8008d56:	4a34      	ldr	r2, [pc, #208]	; (8008e28 <UART_SetConfig+0x4e4>)
 8008d58:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5c:	095b      	lsrs	r3, r3, #5
 8008d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d62:	441c      	add	r4, r3
 8008d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d68:	2200      	movs	r2, #0
 8008d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8008d6c:	677a      	str	r2, [r7, #116]	; 0x74
 8008d6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d72:	4642      	mov	r2, r8
 8008d74:	464b      	mov	r3, r9
 8008d76:	1891      	adds	r1, r2, r2
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	415b      	adcs	r3, r3
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d82:	4641      	mov	r1, r8
 8008d84:	1851      	adds	r1, r2, r1
 8008d86:	6039      	str	r1, [r7, #0]
 8008d88:	4649      	mov	r1, r9
 8008d8a:	414b      	adcs	r3, r1
 8008d8c:	607b      	str	r3, [r7, #4]
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	f04f 0300 	mov.w	r3, #0
 8008d96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d9a:	4659      	mov	r1, fp
 8008d9c:	00cb      	lsls	r3, r1, #3
 8008d9e:	4651      	mov	r1, sl
 8008da0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008da4:	4651      	mov	r1, sl
 8008da6:	00ca      	lsls	r2, r1, #3
 8008da8:	4610      	mov	r0, r2
 8008daa:	4619      	mov	r1, r3
 8008dac:	4603      	mov	r3, r0
 8008dae:	4642      	mov	r2, r8
 8008db0:	189b      	adds	r3, r3, r2
 8008db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008db4:	464b      	mov	r3, r9
 8008db6:	460a      	mov	r2, r1
 8008db8:	eb42 0303 	adc.w	r3, r2, r3
 8008dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8008dc8:	667a      	str	r2, [r7, #100]	; 0x64
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	008b      	lsls	r3, r1, #2
 8008dda:	4641      	mov	r1, r8
 8008ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008de0:	4641      	mov	r1, r8
 8008de2:	008a      	lsls	r2, r1, #2
 8008de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008de8:	f7f7 ff2e 	bl	8000c48 <__aeabi_uldivmod>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <UART_SetConfig+0x4e4>)
 8008df2:	fba3 1302 	umull	r1, r3, r3, r2
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	2164      	movs	r1, #100	; 0x64
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	3332      	adds	r3, #50	; 0x32
 8008e04:	4a08      	ldr	r2, [pc, #32]	; (8008e28 <UART_SetConfig+0x4e4>)
 8008e06:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	f003 020f 	and.w	r2, r3, #15
 8008e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4422      	add	r2, r4
 8008e18:	609a      	str	r2, [r3, #8]
}
 8008e1a:	bf00      	nop
 8008e1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e20:	46bd      	mov	sp, r7
 8008e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e26:	bf00      	nop
 8008e28:	51eb851f 	.word	0x51eb851f

08008e2c <__errno>:
 8008e2c:	4b01      	ldr	r3, [pc, #4]	; (8008e34 <__errno+0x8>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000038 	.word	0x20000038

08008e38 <__libc_init_array>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	4d0d      	ldr	r5, [pc, #52]	; (8008e70 <__libc_init_array+0x38>)
 8008e3c:	4c0d      	ldr	r4, [pc, #52]	; (8008e74 <__libc_init_array+0x3c>)
 8008e3e:	1b64      	subs	r4, r4, r5
 8008e40:	10a4      	asrs	r4, r4, #2
 8008e42:	2600      	movs	r6, #0
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	d109      	bne.n	8008e5c <__libc_init_array+0x24>
 8008e48:	4d0b      	ldr	r5, [pc, #44]	; (8008e78 <__libc_init_array+0x40>)
 8008e4a:	4c0c      	ldr	r4, [pc, #48]	; (8008e7c <__libc_init_array+0x44>)
 8008e4c:	f002 fde6 	bl	800ba1c <_init>
 8008e50:	1b64      	subs	r4, r4, r5
 8008e52:	10a4      	asrs	r4, r4, #2
 8008e54:	2600      	movs	r6, #0
 8008e56:	42a6      	cmp	r6, r4
 8008e58:	d105      	bne.n	8008e66 <__libc_init_array+0x2e>
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e60:	4798      	blx	r3
 8008e62:	3601      	adds	r6, #1
 8008e64:	e7ee      	b.n	8008e44 <__libc_init_array+0xc>
 8008e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6a:	4798      	blx	r3
 8008e6c:	3601      	adds	r6, #1
 8008e6e:	e7f2      	b.n	8008e56 <__libc_init_array+0x1e>
 8008e70:	0800bcb8 	.word	0x0800bcb8
 8008e74:	0800bcb8 	.word	0x0800bcb8
 8008e78:	0800bcb8 	.word	0x0800bcb8
 8008e7c:	0800bcbc 	.word	0x0800bcbc

08008e80 <memset>:
 8008e80:	4402      	add	r2, r0
 8008e82:	4603      	mov	r3, r0
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d100      	bne.n	8008e8a <memset+0xa>
 8008e88:	4770      	bx	lr
 8008e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8e:	e7f9      	b.n	8008e84 <memset+0x4>

08008e90 <siprintf>:
 8008e90:	b40e      	push	{r1, r2, r3}
 8008e92:	b500      	push	{lr}
 8008e94:	b09c      	sub	sp, #112	; 0x70
 8008e96:	ab1d      	add	r3, sp, #116	; 0x74
 8008e98:	9002      	str	r0, [sp, #8]
 8008e9a:	9006      	str	r0, [sp, #24]
 8008e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ea0:	4809      	ldr	r0, [pc, #36]	; (8008ec8 <siprintf+0x38>)
 8008ea2:	9107      	str	r1, [sp, #28]
 8008ea4:	9104      	str	r1, [sp, #16]
 8008ea6:	4909      	ldr	r1, [pc, #36]	; (8008ecc <siprintf+0x3c>)
 8008ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eac:	9105      	str	r1, [sp, #20]
 8008eae:	6800      	ldr	r0, [r0, #0]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	a902      	add	r1, sp, #8
 8008eb4:	f000 f868 	bl	8008f88 <_svfiprintf_r>
 8008eb8:	9b02      	ldr	r3, [sp, #8]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	b01c      	add	sp, #112	; 0x70
 8008ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec4:	b003      	add	sp, #12
 8008ec6:	4770      	bx	lr
 8008ec8:	20000038 	.word	0x20000038
 8008ecc:	ffff0208 	.word	0xffff0208

08008ed0 <__ssputs_r>:
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	688e      	ldr	r6, [r1, #8]
 8008ed6:	429e      	cmp	r6, r3
 8008ed8:	4682      	mov	sl, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	4690      	mov	r8, r2
 8008ede:	461f      	mov	r7, r3
 8008ee0:	d838      	bhi.n	8008f54 <__ssputs_r+0x84>
 8008ee2:	898a      	ldrh	r2, [r1, #12]
 8008ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ee8:	d032      	beq.n	8008f50 <__ssputs_r+0x80>
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	6909      	ldr	r1, [r1, #16]
 8008eee:	eba5 0901 	sub.w	r9, r5, r1
 8008ef2:	6965      	ldr	r5, [r4, #20]
 8008ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008efc:	3301      	adds	r3, #1
 8008efe:	444b      	add	r3, r9
 8008f00:	106d      	asrs	r5, r5, #1
 8008f02:	429d      	cmp	r5, r3
 8008f04:	bf38      	it	cc
 8008f06:	461d      	movcc	r5, r3
 8008f08:	0553      	lsls	r3, r2, #21
 8008f0a:	d531      	bpl.n	8008f70 <__ssputs_r+0xa0>
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f000 fb63 	bl	80095d8 <_malloc_r>
 8008f12:	4606      	mov	r6, r0
 8008f14:	b950      	cbnz	r0, 8008f2c <__ssputs_r+0x5c>
 8008f16:	230c      	movs	r3, #12
 8008f18:	f8ca 3000 	str.w	r3, [sl]
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2c:	6921      	ldr	r1, [r4, #16]
 8008f2e:	464a      	mov	r2, r9
 8008f30:	f000 fabe 	bl	80094b0 <memcpy>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	6126      	str	r6, [r4, #16]
 8008f42:	6165      	str	r5, [r4, #20]
 8008f44:	444e      	add	r6, r9
 8008f46:	eba5 0509 	sub.w	r5, r5, r9
 8008f4a:	6026      	str	r6, [r4, #0]
 8008f4c:	60a5      	str	r5, [r4, #8]
 8008f4e:	463e      	mov	r6, r7
 8008f50:	42be      	cmp	r6, r7
 8008f52:	d900      	bls.n	8008f56 <__ssputs_r+0x86>
 8008f54:	463e      	mov	r6, r7
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	4632      	mov	r2, r6
 8008f5a:	4641      	mov	r1, r8
 8008f5c:	f000 fab6 	bl	80094cc <memmove>
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	1b9b      	subs	r3, r3, r6
 8008f64:	60a3      	str	r3, [r4, #8]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	4433      	add	r3, r6
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e7db      	b.n	8008f28 <__ssputs_r+0x58>
 8008f70:	462a      	mov	r2, r5
 8008f72:	f000 fba5 	bl	80096c0 <_realloc_r>
 8008f76:	4606      	mov	r6, r0
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1e1      	bne.n	8008f40 <__ssputs_r+0x70>
 8008f7c:	6921      	ldr	r1, [r4, #16]
 8008f7e:	4650      	mov	r0, sl
 8008f80:	f000 fabe 	bl	8009500 <_free_r>
 8008f84:	e7c7      	b.n	8008f16 <__ssputs_r+0x46>
	...

08008f88 <_svfiprintf_r>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	4698      	mov	r8, r3
 8008f8e:	898b      	ldrh	r3, [r1, #12]
 8008f90:	061b      	lsls	r3, r3, #24
 8008f92:	b09d      	sub	sp, #116	; 0x74
 8008f94:	4607      	mov	r7, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	4614      	mov	r4, r2
 8008f9a:	d50e      	bpl.n	8008fba <_svfiprintf_r+0x32>
 8008f9c:	690b      	ldr	r3, [r1, #16]
 8008f9e:	b963      	cbnz	r3, 8008fba <_svfiprintf_r+0x32>
 8008fa0:	2140      	movs	r1, #64	; 0x40
 8008fa2:	f000 fb19 	bl	80095d8 <_malloc_r>
 8008fa6:	6028      	str	r0, [r5, #0]
 8008fa8:	6128      	str	r0, [r5, #16]
 8008faa:	b920      	cbnz	r0, 8008fb6 <_svfiprintf_r+0x2e>
 8008fac:	230c      	movs	r3, #12
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb4:	e0d1      	b.n	800915a <_svfiprintf_r+0x1d2>
 8008fb6:	2340      	movs	r3, #64	; 0x40
 8008fb8:	616b      	str	r3, [r5, #20]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbe:	2320      	movs	r3, #32
 8008fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fc8:	2330      	movs	r3, #48	; 0x30
 8008fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009174 <_svfiprintf_r+0x1ec>
 8008fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fd2:	f04f 0901 	mov.w	r9, #1
 8008fd6:	4623      	mov	r3, r4
 8008fd8:	469a      	mov	sl, r3
 8008fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fde:	b10a      	cbz	r2, 8008fe4 <_svfiprintf_r+0x5c>
 8008fe0:	2a25      	cmp	r2, #37	; 0x25
 8008fe2:	d1f9      	bne.n	8008fd8 <_svfiprintf_r+0x50>
 8008fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fe8:	d00b      	beq.n	8009002 <_svfiprintf_r+0x7a>
 8008fea:	465b      	mov	r3, fp
 8008fec:	4622      	mov	r2, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f7ff ff6d 	bl	8008ed0 <__ssputs_r>
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	f000 80aa 	beq.w	8009150 <_svfiprintf_r+0x1c8>
 8008ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ffe:	445a      	add	r2, fp
 8009000:	9209      	str	r2, [sp, #36]	; 0x24
 8009002:	f89a 3000 	ldrb.w	r3, [sl]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 80a2 	beq.w	8009150 <_svfiprintf_r+0x1c8>
 800900c:	2300      	movs	r3, #0
 800900e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009016:	f10a 0a01 	add.w	sl, sl, #1
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	9307      	str	r3, [sp, #28]
 800901e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009022:	931a      	str	r3, [sp, #104]	; 0x68
 8009024:	4654      	mov	r4, sl
 8009026:	2205      	movs	r2, #5
 8009028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902c:	4851      	ldr	r0, [pc, #324]	; (8009174 <_svfiprintf_r+0x1ec>)
 800902e:	f7f7 f8d7 	bl	80001e0 <memchr>
 8009032:	9a04      	ldr	r2, [sp, #16]
 8009034:	b9d8      	cbnz	r0, 800906e <_svfiprintf_r+0xe6>
 8009036:	06d0      	lsls	r0, r2, #27
 8009038:	bf44      	itt	mi
 800903a:	2320      	movmi	r3, #32
 800903c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009040:	0711      	lsls	r1, r2, #28
 8009042:	bf44      	itt	mi
 8009044:	232b      	movmi	r3, #43	; 0x2b
 8009046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904a:	f89a 3000 	ldrb.w	r3, [sl]
 800904e:	2b2a      	cmp	r3, #42	; 0x2a
 8009050:	d015      	beq.n	800907e <_svfiprintf_r+0xf6>
 8009052:	9a07      	ldr	r2, [sp, #28]
 8009054:	4654      	mov	r4, sl
 8009056:	2000      	movs	r0, #0
 8009058:	f04f 0c0a 	mov.w	ip, #10
 800905c:	4621      	mov	r1, r4
 800905e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009062:	3b30      	subs	r3, #48	; 0x30
 8009064:	2b09      	cmp	r3, #9
 8009066:	d94e      	bls.n	8009106 <_svfiprintf_r+0x17e>
 8009068:	b1b0      	cbz	r0, 8009098 <_svfiprintf_r+0x110>
 800906a:	9207      	str	r2, [sp, #28]
 800906c:	e014      	b.n	8009098 <_svfiprintf_r+0x110>
 800906e:	eba0 0308 	sub.w	r3, r0, r8
 8009072:	fa09 f303 	lsl.w	r3, r9, r3
 8009076:	4313      	orrs	r3, r2
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	46a2      	mov	sl, r4
 800907c:	e7d2      	b.n	8009024 <_svfiprintf_r+0x9c>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	1d19      	adds	r1, r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	9103      	str	r1, [sp, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bfbb      	ittet	lt
 800908a:	425b      	neglt	r3, r3
 800908c:	f042 0202 	orrlt.w	r2, r2, #2
 8009090:	9307      	strge	r3, [sp, #28]
 8009092:	9307      	strlt	r3, [sp, #28]
 8009094:	bfb8      	it	lt
 8009096:	9204      	strlt	r2, [sp, #16]
 8009098:	7823      	ldrb	r3, [r4, #0]
 800909a:	2b2e      	cmp	r3, #46	; 0x2e
 800909c:	d10c      	bne.n	80090b8 <_svfiprintf_r+0x130>
 800909e:	7863      	ldrb	r3, [r4, #1]
 80090a0:	2b2a      	cmp	r3, #42	; 0x2a
 80090a2:	d135      	bne.n	8009110 <_svfiprintf_r+0x188>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	1d1a      	adds	r2, r3, #4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	9203      	str	r2, [sp, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfb8      	it	lt
 80090b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090b4:	3402      	adds	r4, #2
 80090b6:	9305      	str	r3, [sp, #20]
 80090b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009184 <_svfiprintf_r+0x1fc>
 80090bc:	7821      	ldrb	r1, [r4, #0]
 80090be:	2203      	movs	r2, #3
 80090c0:	4650      	mov	r0, sl
 80090c2:	f7f7 f88d 	bl	80001e0 <memchr>
 80090c6:	b140      	cbz	r0, 80090da <_svfiprintf_r+0x152>
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	eba0 000a 	sub.w	r0, r0, sl
 80090ce:	fa03 f000 	lsl.w	r0, r3, r0
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	4303      	orrs	r3, r0
 80090d6:	3401      	adds	r4, #1
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090de:	4826      	ldr	r0, [pc, #152]	; (8009178 <_svfiprintf_r+0x1f0>)
 80090e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090e4:	2206      	movs	r2, #6
 80090e6:	f7f7 f87b 	bl	80001e0 <memchr>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d038      	beq.n	8009160 <_svfiprintf_r+0x1d8>
 80090ee:	4b23      	ldr	r3, [pc, #140]	; (800917c <_svfiprintf_r+0x1f4>)
 80090f0:	bb1b      	cbnz	r3, 800913a <_svfiprintf_r+0x1b2>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	3307      	adds	r3, #7
 80090f6:	f023 0307 	bic.w	r3, r3, #7
 80090fa:	3308      	adds	r3, #8
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	4433      	add	r3, r6
 8009102:	9309      	str	r3, [sp, #36]	; 0x24
 8009104:	e767      	b.n	8008fd6 <_svfiprintf_r+0x4e>
 8009106:	fb0c 3202 	mla	r2, ip, r2, r3
 800910a:	460c      	mov	r4, r1
 800910c:	2001      	movs	r0, #1
 800910e:	e7a5      	b.n	800905c <_svfiprintf_r+0xd4>
 8009110:	2300      	movs	r3, #0
 8009112:	3401      	adds	r4, #1
 8009114:	9305      	str	r3, [sp, #20]
 8009116:	4619      	mov	r1, r3
 8009118:	f04f 0c0a 	mov.w	ip, #10
 800911c:	4620      	mov	r0, r4
 800911e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009122:	3a30      	subs	r2, #48	; 0x30
 8009124:	2a09      	cmp	r2, #9
 8009126:	d903      	bls.n	8009130 <_svfiprintf_r+0x1a8>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0c5      	beq.n	80090b8 <_svfiprintf_r+0x130>
 800912c:	9105      	str	r1, [sp, #20]
 800912e:	e7c3      	b.n	80090b8 <_svfiprintf_r+0x130>
 8009130:	fb0c 2101 	mla	r1, ip, r1, r2
 8009134:	4604      	mov	r4, r0
 8009136:	2301      	movs	r3, #1
 8009138:	e7f0      	b.n	800911c <_svfiprintf_r+0x194>
 800913a:	ab03      	add	r3, sp, #12
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	462a      	mov	r2, r5
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <_svfiprintf_r+0x1f8>)
 8009142:	a904      	add	r1, sp, #16
 8009144:	4638      	mov	r0, r7
 8009146:	f3af 8000 	nop.w
 800914a:	1c42      	adds	r2, r0, #1
 800914c:	4606      	mov	r6, r0
 800914e:	d1d6      	bne.n	80090fe <_svfiprintf_r+0x176>
 8009150:	89ab      	ldrh	r3, [r5, #12]
 8009152:	065b      	lsls	r3, r3, #25
 8009154:	f53f af2c 	bmi.w	8008fb0 <_svfiprintf_r+0x28>
 8009158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800915a:	b01d      	add	sp, #116	; 0x74
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	ab03      	add	r3, sp, #12
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	462a      	mov	r2, r5
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <_svfiprintf_r+0x1f8>)
 8009168:	a904      	add	r1, sp, #16
 800916a:	4638      	mov	r0, r7
 800916c:	f000 f87a 	bl	8009264 <_printf_i>
 8009170:	e7eb      	b.n	800914a <_svfiprintf_r+0x1c2>
 8009172:	bf00      	nop
 8009174:	0800ba70 	.word	0x0800ba70
 8009178:	0800ba7a 	.word	0x0800ba7a
 800917c:	00000000 	.word	0x00000000
 8009180:	08008ed1 	.word	0x08008ed1
 8009184:	0800ba76 	.word	0x0800ba76

08009188 <_printf_common>:
 8009188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	4616      	mov	r6, r2
 800918e:	4699      	mov	r9, r3
 8009190:	688a      	ldr	r2, [r1, #8]
 8009192:	690b      	ldr	r3, [r1, #16]
 8009194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009198:	4293      	cmp	r3, r2
 800919a:	bfb8      	it	lt
 800919c:	4613      	movlt	r3, r2
 800919e:	6033      	str	r3, [r6, #0]
 80091a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091a4:	4607      	mov	r7, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	b10a      	cbz	r2, 80091ae <_printf_common+0x26>
 80091aa:	3301      	adds	r3, #1
 80091ac:	6033      	str	r3, [r6, #0]
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	0699      	lsls	r1, r3, #26
 80091b2:	bf42      	ittt	mi
 80091b4:	6833      	ldrmi	r3, [r6, #0]
 80091b6:	3302      	addmi	r3, #2
 80091b8:	6033      	strmi	r3, [r6, #0]
 80091ba:	6825      	ldr	r5, [r4, #0]
 80091bc:	f015 0506 	ands.w	r5, r5, #6
 80091c0:	d106      	bne.n	80091d0 <_printf_common+0x48>
 80091c2:	f104 0a19 	add.w	sl, r4, #25
 80091c6:	68e3      	ldr	r3, [r4, #12]
 80091c8:	6832      	ldr	r2, [r6, #0]
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	42ab      	cmp	r3, r5
 80091ce:	dc26      	bgt.n	800921e <_printf_common+0x96>
 80091d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091d4:	1e13      	subs	r3, r2, #0
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	bf18      	it	ne
 80091da:	2301      	movne	r3, #1
 80091dc:	0692      	lsls	r2, r2, #26
 80091de:	d42b      	bmi.n	8009238 <_printf_common+0xb0>
 80091e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091e4:	4649      	mov	r1, r9
 80091e6:	4638      	mov	r0, r7
 80091e8:	47c0      	blx	r8
 80091ea:	3001      	adds	r0, #1
 80091ec:	d01e      	beq.n	800922c <_printf_common+0xa4>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	68e5      	ldr	r5, [r4, #12]
 80091f2:	6832      	ldr	r2, [r6, #0]
 80091f4:	f003 0306 	and.w	r3, r3, #6
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	bf08      	it	eq
 80091fc:	1aad      	subeq	r5, r5, r2
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	6922      	ldr	r2, [r4, #16]
 8009202:	bf0c      	ite	eq
 8009204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009208:	2500      	movne	r5, #0
 800920a:	4293      	cmp	r3, r2
 800920c:	bfc4      	itt	gt
 800920e:	1a9b      	subgt	r3, r3, r2
 8009210:	18ed      	addgt	r5, r5, r3
 8009212:	2600      	movs	r6, #0
 8009214:	341a      	adds	r4, #26
 8009216:	42b5      	cmp	r5, r6
 8009218:	d11a      	bne.n	8009250 <_printf_common+0xc8>
 800921a:	2000      	movs	r0, #0
 800921c:	e008      	b.n	8009230 <_printf_common+0xa8>
 800921e:	2301      	movs	r3, #1
 8009220:	4652      	mov	r2, sl
 8009222:	4649      	mov	r1, r9
 8009224:	4638      	mov	r0, r7
 8009226:	47c0      	blx	r8
 8009228:	3001      	adds	r0, #1
 800922a:	d103      	bne.n	8009234 <_printf_common+0xac>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009234:	3501      	adds	r5, #1
 8009236:	e7c6      	b.n	80091c6 <_printf_common+0x3e>
 8009238:	18e1      	adds	r1, r4, r3
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	2030      	movs	r0, #48	; 0x30
 800923e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009242:	4422      	add	r2, r4
 8009244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800924c:	3302      	adds	r3, #2
 800924e:	e7c7      	b.n	80091e0 <_printf_common+0x58>
 8009250:	2301      	movs	r3, #1
 8009252:	4622      	mov	r2, r4
 8009254:	4649      	mov	r1, r9
 8009256:	4638      	mov	r0, r7
 8009258:	47c0      	blx	r8
 800925a:	3001      	adds	r0, #1
 800925c:	d0e6      	beq.n	800922c <_printf_common+0xa4>
 800925e:	3601      	adds	r6, #1
 8009260:	e7d9      	b.n	8009216 <_printf_common+0x8e>
	...

08009264 <_printf_i>:
 8009264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	7e0f      	ldrb	r7, [r1, #24]
 800926a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800926c:	2f78      	cmp	r7, #120	; 0x78
 800926e:	4691      	mov	r9, r2
 8009270:	4680      	mov	r8, r0
 8009272:	460c      	mov	r4, r1
 8009274:	469a      	mov	sl, r3
 8009276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800927a:	d807      	bhi.n	800928c <_printf_i+0x28>
 800927c:	2f62      	cmp	r7, #98	; 0x62
 800927e:	d80a      	bhi.n	8009296 <_printf_i+0x32>
 8009280:	2f00      	cmp	r7, #0
 8009282:	f000 80d8 	beq.w	8009436 <_printf_i+0x1d2>
 8009286:	2f58      	cmp	r7, #88	; 0x58
 8009288:	f000 80a3 	beq.w	80093d2 <_printf_i+0x16e>
 800928c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009294:	e03a      	b.n	800930c <_printf_i+0xa8>
 8009296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800929a:	2b15      	cmp	r3, #21
 800929c:	d8f6      	bhi.n	800928c <_printf_i+0x28>
 800929e:	a101      	add	r1, pc, #4	; (adr r1, 80092a4 <_printf_i+0x40>)
 80092a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092a4:	080092fd 	.word	0x080092fd
 80092a8:	08009311 	.word	0x08009311
 80092ac:	0800928d 	.word	0x0800928d
 80092b0:	0800928d 	.word	0x0800928d
 80092b4:	0800928d 	.word	0x0800928d
 80092b8:	0800928d 	.word	0x0800928d
 80092bc:	08009311 	.word	0x08009311
 80092c0:	0800928d 	.word	0x0800928d
 80092c4:	0800928d 	.word	0x0800928d
 80092c8:	0800928d 	.word	0x0800928d
 80092cc:	0800928d 	.word	0x0800928d
 80092d0:	0800941d 	.word	0x0800941d
 80092d4:	08009341 	.word	0x08009341
 80092d8:	080093ff 	.word	0x080093ff
 80092dc:	0800928d 	.word	0x0800928d
 80092e0:	0800928d 	.word	0x0800928d
 80092e4:	0800943f 	.word	0x0800943f
 80092e8:	0800928d 	.word	0x0800928d
 80092ec:	08009341 	.word	0x08009341
 80092f0:	0800928d 	.word	0x0800928d
 80092f4:	0800928d 	.word	0x0800928d
 80092f8:	08009407 	.word	0x08009407
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	1d1a      	adds	r2, r3, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	602a      	str	r2, [r5, #0]
 8009304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800930c:	2301      	movs	r3, #1
 800930e:	e0a3      	b.n	8009458 <_printf_i+0x1f4>
 8009310:	6820      	ldr	r0, [r4, #0]
 8009312:	6829      	ldr	r1, [r5, #0]
 8009314:	0606      	lsls	r6, r0, #24
 8009316:	f101 0304 	add.w	r3, r1, #4
 800931a:	d50a      	bpl.n	8009332 <_printf_i+0xce>
 800931c:	680e      	ldr	r6, [r1, #0]
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	2e00      	cmp	r6, #0
 8009322:	da03      	bge.n	800932c <_printf_i+0xc8>
 8009324:	232d      	movs	r3, #45	; 0x2d
 8009326:	4276      	negs	r6, r6
 8009328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800932c:	485e      	ldr	r0, [pc, #376]	; (80094a8 <_printf_i+0x244>)
 800932e:	230a      	movs	r3, #10
 8009330:	e019      	b.n	8009366 <_printf_i+0x102>
 8009332:	680e      	ldr	r6, [r1, #0]
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	f010 0f40 	tst.w	r0, #64	; 0x40
 800933a:	bf18      	it	ne
 800933c:	b236      	sxthne	r6, r6
 800933e:	e7ef      	b.n	8009320 <_printf_i+0xbc>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	6820      	ldr	r0, [r4, #0]
 8009344:	1d19      	adds	r1, r3, #4
 8009346:	6029      	str	r1, [r5, #0]
 8009348:	0601      	lsls	r1, r0, #24
 800934a:	d501      	bpl.n	8009350 <_printf_i+0xec>
 800934c:	681e      	ldr	r6, [r3, #0]
 800934e:	e002      	b.n	8009356 <_printf_i+0xf2>
 8009350:	0646      	lsls	r6, r0, #25
 8009352:	d5fb      	bpl.n	800934c <_printf_i+0xe8>
 8009354:	881e      	ldrh	r6, [r3, #0]
 8009356:	4854      	ldr	r0, [pc, #336]	; (80094a8 <_printf_i+0x244>)
 8009358:	2f6f      	cmp	r7, #111	; 0x6f
 800935a:	bf0c      	ite	eq
 800935c:	2308      	moveq	r3, #8
 800935e:	230a      	movne	r3, #10
 8009360:	2100      	movs	r1, #0
 8009362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009366:	6865      	ldr	r5, [r4, #4]
 8009368:	60a5      	str	r5, [r4, #8]
 800936a:	2d00      	cmp	r5, #0
 800936c:	bfa2      	ittt	ge
 800936e:	6821      	ldrge	r1, [r4, #0]
 8009370:	f021 0104 	bicge.w	r1, r1, #4
 8009374:	6021      	strge	r1, [r4, #0]
 8009376:	b90e      	cbnz	r6, 800937c <_printf_i+0x118>
 8009378:	2d00      	cmp	r5, #0
 800937a:	d04d      	beq.n	8009418 <_printf_i+0x1b4>
 800937c:	4615      	mov	r5, r2
 800937e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009382:	fb03 6711 	mls	r7, r3, r1, r6
 8009386:	5dc7      	ldrb	r7, [r0, r7]
 8009388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800938c:	4637      	mov	r7, r6
 800938e:	42bb      	cmp	r3, r7
 8009390:	460e      	mov	r6, r1
 8009392:	d9f4      	bls.n	800937e <_printf_i+0x11a>
 8009394:	2b08      	cmp	r3, #8
 8009396:	d10b      	bne.n	80093b0 <_printf_i+0x14c>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	07de      	lsls	r6, r3, #31
 800939c:	d508      	bpl.n	80093b0 <_printf_i+0x14c>
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	6861      	ldr	r1, [r4, #4]
 80093a2:	4299      	cmp	r1, r3
 80093a4:	bfde      	ittt	le
 80093a6:	2330      	movle	r3, #48	; 0x30
 80093a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80093b0:	1b52      	subs	r2, r2, r5
 80093b2:	6122      	str	r2, [r4, #16]
 80093b4:	f8cd a000 	str.w	sl, [sp]
 80093b8:	464b      	mov	r3, r9
 80093ba:	aa03      	add	r2, sp, #12
 80093bc:	4621      	mov	r1, r4
 80093be:	4640      	mov	r0, r8
 80093c0:	f7ff fee2 	bl	8009188 <_printf_common>
 80093c4:	3001      	adds	r0, #1
 80093c6:	d14c      	bne.n	8009462 <_printf_i+0x1fe>
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093cc:	b004      	add	sp, #16
 80093ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d2:	4835      	ldr	r0, [pc, #212]	; (80094a8 <_printf_i+0x244>)
 80093d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093d8:	6829      	ldr	r1, [r5, #0]
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80093e0:	6029      	str	r1, [r5, #0]
 80093e2:	061d      	lsls	r5, r3, #24
 80093e4:	d514      	bpl.n	8009410 <_printf_i+0x1ac>
 80093e6:	07df      	lsls	r7, r3, #31
 80093e8:	bf44      	itt	mi
 80093ea:	f043 0320 	orrmi.w	r3, r3, #32
 80093ee:	6023      	strmi	r3, [r4, #0]
 80093f0:	b91e      	cbnz	r6, 80093fa <_printf_i+0x196>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	f023 0320 	bic.w	r3, r3, #32
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	2310      	movs	r3, #16
 80093fc:	e7b0      	b.n	8009360 <_printf_i+0xfc>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	f043 0320 	orr.w	r3, r3, #32
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	2378      	movs	r3, #120	; 0x78
 8009408:	4828      	ldr	r0, [pc, #160]	; (80094ac <_printf_i+0x248>)
 800940a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800940e:	e7e3      	b.n	80093d8 <_printf_i+0x174>
 8009410:	0659      	lsls	r1, r3, #25
 8009412:	bf48      	it	mi
 8009414:	b2b6      	uxthmi	r6, r6
 8009416:	e7e6      	b.n	80093e6 <_printf_i+0x182>
 8009418:	4615      	mov	r5, r2
 800941a:	e7bb      	b.n	8009394 <_printf_i+0x130>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	6826      	ldr	r6, [r4, #0]
 8009420:	6961      	ldr	r1, [r4, #20]
 8009422:	1d18      	adds	r0, r3, #4
 8009424:	6028      	str	r0, [r5, #0]
 8009426:	0635      	lsls	r5, r6, #24
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	d501      	bpl.n	8009430 <_printf_i+0x1cc>
 800942c:	6019      	str	r1, [r3, #0]
 800942e:	e002      	b.n	8009436 <_printf_i+0x1d2>
 8009430:	0670      	lsls	r0, r6, #25
 8009432:	d5fb      	bpl.n	800942c <_printf_i+0x1c8>
 8009434:	8019      	strh	r1, [r3, #0]
 8009436:	2300      	movs	r3, #0
 8009438:	6123      	str	r3, [r4, #16]
 800943a:	4615      	mov	r5, r2
 800943c:	e7ba      	b.n	80093b4 <_printf_i+0x150>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	1d1a      	adds	r2, r3, #4
 8009442:	602a      	str	r2, [r5, #0]
 8009444:	681d      	ldr	r5, [r3, #0]
 8009446:	6862      	ldr	r2, [r4, #4]
 8009448:	2100      	movs	r1, #0
 800944a:	4628      	mov	r0, r5
 800944c:	f7f6 fec8 	bl	80001e0 <memchr>
 8009450:	b108      	cbz	r0, 8009456 <_printf_i+0x1f2>
 8009452:	1b40      	subs	r0, r0, r5
 8009454:	6060      	str	r0, [r4, #4]
 8009456:	6863      	ldr	r3, [r4, #4]
 8009458:	6123      	str	r3, [r4, #16]
 800945a:	2300      	movs	r3, #0
 800945c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009460:	e7a8      	b.n	80093b4 <_printf_i+0x150>
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	462a      	mov	r2, r5
 8009466:	4649      	mov	r1, r9
 8009468:	4640      	mov	r0, r8
 800946a:	47d0      	blx	sl
 800946c:	3001      	adds	r0, #1
 800946e:	d0ab      	beq.n	80093c8 <_printf_i+0x164>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	079b      	lsls	r3, r3, #30
 8009474:	d413      	bmi.n	800949e <_printf_i+0x23a>
 8009476:	68e0      	ldr	r0, [r4, #12]
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	4298      	cmp	r0, r3
 800947c:	bfb8      	it	lt
 800947e:	4618      	movlt	r0, r3
 8009480:	e7a4      	b.n	80093cc <_printf_i+0x168>
 8009482:	2301      	movs	r3, #1
 8009484:	4632      	mov	r2, r6
 8009486:	4649      	mov	r1, r9
 8009488:	4640      	mov	r0, r8
 800948a:	47d0      	blx	sl
 800948c:	3001      	adds	r0, #1
 800948e:	d09b      	beq.n	80093c8 <_printf_i+0x164>
 8009490:	3501      	adds	r5, #1
 8009492:	68e3      	ldr	r3, [r4, #12]
 8009494:	9903      	ldr	r1, [sp, #12]
 8009496:	1a5b      	subs	r3, r3, r1
 8009498:	42ab      	cmp	r3, r5
 800949a:	dcf2      	bgt.n	8009482 <_printf_i+0x21e>
 800949c:	e7eb      	b.n	8009476 <_printf_i+0x212>
 800949e:	2500      	movs	r5, #0
 80094a0:	f104 0619 	add.w	r6, r4, #25
 80094a4:	e7f5      	b.n	8009492 <_printf_i+0x22e>
 80094a6:	bf00      	nop
 80094a8:	0800ba81 	.word	0x0800ba81
 80094ac:	0800ba92 	.word	0x0800ba92

080094b0 <memcpy>:
 80094b0:	440a      	add	r2, r1
 80094b2:	4291      	cmp	r1, r2
 80094b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094b8:	d100      	bne.n	80094bc <memcpy+0xc>
 80094ba:	4770      	bx	lr
 80094bc:	b510      	push	{r4, lr}
 80094be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094c6:	4291      	cmp	r1, r2
 80094c8:	d1f9      	bne.n	80094be <memcpy+0xe>
 80094ca:	bd10      	pop	{r4, pc}

080094cc <memmove>:
 80094cc:	4288      	cmp	r0, r1
 80094ce:	b510      	push	{r4, lr}
 80094d0:	eb01 0402 	add.w	r4, r1, r2
 80094d4:	d902      	bls.n	80094dc <memmove+0x10>
 80094d6:	4284      	cmp	r4, r0
 80094d8:	4623      	mov	r3, r4
 80094da:	d807      	bhi.n	80094ec <memmove+0x20>
 80094dc:	1e43      	subs	r3, r0, #1
 80094de:	42a1      	cmp	r1, r4
 80094e0:	d008      	beq.n	80094f4 <memmove+0x28>
 80094e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ea:	e7f8      	b.n	80094de <memmove+0x12>
 80094ec:	4402      	add	r2, r0
 80094ee:	4601      	mov	r1, r0
 80094f0:	428a      	cmp	r2, r1
 80094f2:	d100      	bne.n	80094f6 <memmove+0x2a>
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094fe:	e7f7      	b.n	80094f0 <memmove+0x24>

08009500 <_free_r>:
 8009500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009502:	2900      	cmp	r1, #0
 8009504:	d044      	beq.n	8009590 <_free_r+0x90>
 8009506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950a:	9001      	str	r0, [sp, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f1a1 0404 	sub.w	r4, r1, #4
 8009512:	bfb8      	it	lt
 8009514:	18e4      	addlt	r4, r4, r3
 8009516:	f000 f913 	bl	8009740 <__malloc_lock>
 800951a:	4a1e      	ldr	r2, [pc, #120]	; (8009594 <_free_r+0x94>)
 800951c:	9801      	ldr	r0, [sp, #4]
 800951e:	6813      	ldr	r3, [r2, #0]
 8009520:	b933      	cbnz	r3, 8009530 <_free_r+0x30>
 8009522:	6063      	str	r3, [r4, #4]
 8009524:	6014      	str	r4, [r2, #0]
 8009526:	b003      	add	sp, #12
 8009528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800952c:	f000 b90e 	b.w	800974c <__malloc_unlock>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d908      	bls.n	8009546 <_free_r+0x46>
 8009534:	6825      	ldr	r5, [r4, #0]
 8009536:	1961      	adds	r1, r4, r5
 8009538:	428b      	cmp	r3, r1
 800953a:	bf01      	itttt	eq
 800953c:	6819      	ldreq	r1, [r3, #0]
 800953e:	685b      	ldreq	r3, [r3, #4]
 8009540:	1949      	addeq	r1, r1, r5
 8009542:	6021      	streq	r1, [r4, #0]
 8009544:	e7ed      	b.n	8009522 <_free_r+0x22>
 8009546:	461a      	mov	r2, r3
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	b10b      	cbz	r3, 8009550 <_free_r+0x50>
 800954c:	42a3      	cmp	r3, r4
 800954e:	d9fa      	bls.n	8009546 <_free_r+0x46>
 8009550:	6811      	ldr	r1, [r2, #0]
 8009552:	1855      	adds	r5, r2, r1
 8009554:	42a5      	cmp	r5, r4
 8009556:	d10b      	bne.n	8009570 <_free_r+0x70>
 8009558:	6824      	ldr	r4, [r4, #0]
 800955a:	4421      	add	r1, r4
 800955c:	1854      	adds	r4, r2, r1
 800955e:	42a3      	cmp	r3, r4
 8009560:	6011      	str	r1, [r2, #0]
 8009562:	d1e0      	bne.n	8009526 <_free_r+0x26>
 8009564:	681c      	ldr	r4, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	6053      	str	r3, [r2, #4]
 800956a:	4421      	add	r1, r4
 800956c:	6011      	str	r1, [r2, #0]
 800956e:	e7da      	b.n	8009526 <_free_r+0x26>
 8009570:	d902      	bls.n	8009578 <_free_r+0x78>
 8009572:	230c      	movs	r3, #12
 8009574:	6003      	str	r3, [r0, #0]
 8009576:	e7d6      	b.n	8009526 <_free_r+0x26>
 8009578:	6825      	ldr	r5, [r4, #0]
 800957a:	1961      	adds	r1, r4, r5
 800957c:	428b      	cmp	r3, r1
 800957e:	bf04      	itt	eq
 8009580:	6819      	ldreq	r1, [r3, #0]
 8009582:	685b      	ldreq	r3, [r3, #4]
 8009584:	6063      	str	r3, [r4, #4]
 8009586:	bf04      	itt	eq
 8009588:	1949      	addeq	r1, r1, r5
 800958a:	6021      	streq	r1, [r4, #0]
 800958c:	6054      	str	r4, [r2, #4]
 800958e:	e7ca      	b.n	8009526 <_free_r+0x26>
 8009590:	b003      	add	sp, #12
 8009592:	bd30      	pop	{r4, r5, pc}
 8009594:	2000079c 	.word	0x2000079c

08009598 <sbrk_aligned>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4e0e      	ldr	r6, [pc, #56]	; (80095d4 <sbrk_aligned+0x3c>)
 800959c:	460c      	mov	r4, r1
 800959e:	6831      	ldr	r1, [r6, #0]
 80095a0:	4605      	mov	r5, r0
 80095a2:	b911      	cbnz	r1, 80095aa <sbrk_aligned+0x12>
 80095a4:	f000 f8bc 	bl	8009720 <_sbrk_r>
 80095a8:	6030      	str	r0, [r6, #0]
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 f8b7 	bl	8009720 <_sbrk_r>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d00a      	beq.n	80095cc <sbrk_aligned+0x34>
 80095b6:	1cc4      	adds	r4, r0, #3
 80095b8:	f024 0403 	bic.w	r4, r4, #3
 80095bc:	42a0      	cmp	r0, r4
 80095be:	d007      	beq.n	80095d0 <sbrk_aligned+0x38>
 80095c0:	1a21      	subs	r1, r4, r0
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 f8ac 	bl	8009720 <_sbrk_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d101      	bne.n	80095d0 <sbrk_aligned+0x38>
 80095cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095d0:	4620      	mov	r0, r4
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	200007a0 	.word	0x200007a0

080095d8 <_malloc_r>:
 80095d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095dc:	1ccd      	adds	r5, r1, #3
 80095de:	f025 0503 	bic.w	r5, r5, #3
 80095e2:	3508      	adds	r5, #8
 80095e4:	2d0c      	cmp	r5, #12
 80095e6:	bf38      	it	cc
 80095e8:	250c      	movcc	r5, #12
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	4607      	mov	r7, r0
 80095ee:	db01      	blt.n	80095f4 <_malloc_r+0x1c>
 80095f0:	42a9      	cmp	r1, r5
 80095f2:	d905      	bls.n	8009600 <_malloc_r+0x28>
 80095f4:	230c      	movs	r3, #12
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	2600      	movs	r6, #0
 80095fa:	4630      	mov	r0, r6
 80095fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009600:	4e2e      	ldr	r6, [pc, #184]	; (80096bc <_malloc_r+0xe4>)
 8009602:	f000 f89d 	bl	8009740 <__malloc_lock>
 8009606:	6833      	ldr	r3, [r6, #0]
 8009608:	461c      	mov	r4, r3
 800960a:	bb34      	cbnz	r4, 800965a <_malloc_r+0x82>
 800960c:	4629      	mov	r1, r5
 800960e:	4638      	mov	r0, r7
 8009610:	f7ff ffc2 	bl	8009598 <sbrk_aligned>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	4604      	mov	r4, r0
 8009618:	d14d      	bne.n	80096b6 <_malloc_r+0xde>
 800961a:	6834      	ldr	r4, [r6, #0]
 800961c:	4626      	mov	r6, r4
 800961e:	2e00      	cmp	r6, #0
 8009620:	d140      	bne.n	80096a4 <_malloc_r+0xcc>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	4631      	mov	r1, r6
 8009626:	4638      	mov	r0, r7
 8009628:	eb04 0803 	add.w	r8, r4, r3
 800962c:	f000 f878 	bl	8009720 <_sbrk_r>
 8009630:	4580      	cmp	r8, r0
 8009632:	d13a      	bne.n	80096aa <_malloc_r+0xd2>
 8009634:	6821      	ldr	r1, [r4, #0]
 8009636:	3503      	adds	r5, #3
 8009638:	1a6d      	subs	r5, r5, r1
 800963a:	f025 0503 	bic.w	r5, r5, #3
 800963e:	3508      	adds	r5, #8
 8009640:	2d0c      	cmp	r5, #12
 8009642:	bf38      	it	cc
 8009644:	250c      	movcc	r5, #12
 8009646:	4629      	mov	r1, r5
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff ffa5 	bl	8009598 <sbrk_aligned>
 800964e:	3001      	adds	r0, #1
 8009650:	d02b      	beq.n	80096aa <_malloc_r+0xd2>
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	442b      	add	r3, r5
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	e00e      	b.n	8009678 <_malloc_r+0xa0>
 800965a:	6822      	ldr	r2, [r4, #0]
 800965c:	1b52      	subs	r2, r2, r5
 800965e:	d41e      	bmi.n	800969e <_malloc_r+0xc6>
 8009660:	2a0b      	cmp	r2, #11
 8009662:	d916      	bls.n	8009692 <_malloc_r+0xba>
 8009664:	1961      	adds	r1, r4, r5
 8009666:	42a3      	cmp	r3, r4
 8009668:	6025      	str	r5, [r4, #0]
 800966a:	bf18      	it	ne
 800966c:	6059      	strne	r1, [r3, #4]
 800966e:	6863      	ldr	r3, [r4, #4]
 8009670:	bf08      	it	eq
 8009672:	6031      	streq	r1, [r6, #0]
 8009674:	5162      	str	r2, [r4, r5]
 8009676:	604b      	str	r3, [r1, #4]
 8009678:	4638      	mov	r0, r7
 800967a:	f104 060b 	add.w	r6, r4, #11
 800967e:	f000 f865 	bl	800974c <__malloc_unlock>
 8009682:	f026 0607 	bic.w	r6, r6, #7
 8009686:	1d23      	adds	r3, r4, #4
 8009688:	1af2      	subs	r2, r6, r3
 800968a:	d0b6      	beq.n	80095fa <_malloc_r+0x22>
 800968c:	1b9b      	subs	r3, r3, r6
 800968e:	50a3      	str	r3, [r4, r2]
 8009690:	e7b3      	b.n	80095fa <_malloc_r+0x22>
 8009692:	6862      	ldr	r2, [r4, #4]
 8009694:	42a3      	cmp	r3, r4
 8009696:	bf0c      	ite	eq
 8009698:	6032      	streq	r2, [r6, #0]
 800969a:	605a      	strne	r2, [r3, #4]
 800969c:	e7ec      	b.n	8009678 <_malloc_r+0xa0>
 800969e:	4623      	mov	r3, r4
 80096a0:	6864      	ldr	r4, [r4, #4]
 80096a2:	e7b2      	b.n	800960a <_malloc_r+0x32>
 80096a4:	4634      	mov	r4, r6
 80096a6:	6876      	ldr	r6, [r6, #4]
 80096a8:	e7b9      	b.n	800961e <_malloc_r+0x46>
 80096aa:	230c      	movs	r3, #12
 80096ac:	603b      	str	r3, [r7, #0]
 80096ae:	4638      	mov	r0, r7
 80096b0:	f000 f84c 	bl	800974c <__malloc_unlock>
 80096b4:	e7a1      	b.n	80095fa <_malloc_r+0x22>
 80096b6:	6025      	str	r5, [r4, #0]
 80096b8:	e7de      	b.n	8009678 <_malloc_r+0xa0>
 80096ba:	bf00      	nop
 80096bc:	2000079c 	.word	0x2000079c

080096c0 <_realloc_r>:
 80096c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c4:	4680      	mov	r8, r0
 80096c6:	4614      	mov	r4, r2
 80096c8:	460e      	mov	r6, r1
 80096ca:	b921      	cbnz	r1, 80096d6 <_realloc_r+0x16>
 80096cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d0:	4611      	mov	r1, r2
 80096d2:	f7ff bf81 	b.w	80095d8 <_malloc_r>
 80096d6:	b92a      	cbnz	r2, 80096e4 <_realloc_r+0x24>
 80096d8:	f7ff ff12 	bl	8009500 <_free_r>
 80096dc:	4625      	mov	r5, r4
 80096de:	4628      	mov	r0, r5
 80096e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e4:	f000 f838 	bl	8009758 <_malloc_usable_size_r>
 80096e8:	4284      	cmp	r4, r0
 80096ea:	4607      	mov	r7, r0
 80096ec:	d802      	bhi.n	80096f4 <_realloc_r+0x34>
 80096ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096f2:	d812      	bhi.n	800971a <_realloc_r+0x5a>
 80096f4:	4621      	mov	r1, r4
 80096f6:	4640      	mov	r0, r8
 80096f8:	f7ff ff6e 	bl	80095d8 <_malloc_r>
 80096fc:	4605      	mov	r5, r0
 80096fe:	2800      	cmp	r0, #0
 8009700:	d0ed      	beq.n	80096de <_realloc_r+0x1e>
 8009702:	42bc      	cmp	r4, r7
 8009704:	4622      	mov	r2, r4
 8009706:	4631      	mov	r1, r6
 8009708:	bf28      	it	cs
 800970a:	463a      	movcs	r2, r7
 800970c:	f7ff fed0 	bl	80094b0 <memcpy>
 8009710:	4631      	mov	r1, r6
 8009712:	4640      	mov	r0, r8
 8009714:	f7ff fef4 	bl	8009500 <_free_r>
 8009718:	e7e1      	b.n	80096de <_realloc_r+0x1e>
 800971a:	4635      	mov	r5, r6
 800971c:	e7df      	b.n	80096de <_realloc_r+0x1e>
	...

08009720 <_sbrk_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	; (800973c <_sbrk_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7fa fd36 	bl	800419c <_sbrk>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_sbrk_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_sbrk_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	200007a4 	.word	0x200007a4

08009740 <__malloc_lock>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__malloc_lock+0x8>)
 8009742:	f000 b811 	b.w	8009768 <__retarget_lock_acquire_recursive>
 8009746:	bf00      	nop
 8009748:	200007a8 	.word	0x200007a8

0800974c <__malloc_unlock>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__malloc_unlock+0x8>)
 800974e:	f000 b80c 	b.w	800976a <__retarget_lock_release_recursive>
 8009752:	bf00      	nop
 8009754:	200007a8 	.word	0x200007a8

08009758 <_malloc_usable_size_r>:
 8009758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800975c:	1f18      	subs	r0, r3, #4
 800975e:	2b00      	cmp	r3, #0
 8009760:	bfbc      	itt	lt
 8009762:	580b      	ldrlt	r3, [r1, r0]
 8009764:	18c0      	addlt	r0, r0, r3
 8009766:	4770      	bx	lr

08009768 <__retarget_lock_acquire_recursive>:
 8009768:	4770      	bx	lr

0800976a <__retarget_lock_release_recursive>:
 800976a:	4770      	bx	lr
 800976c:	0000      	movs	r0, r0
	...

08009770 <sin>:
 8009770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009772:	ec53 2b10 	vmov	r2, r3, d0
 8009776:	4828      	ldr	r0, [pc, #160]	; (8009818 <sin+0xa8>)
 8009778:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800977c:	4281      	cmp	r1, r0
 800977e:	dc07      	bgt.n	8009790 <sin+0x20>
 8009780:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009810 <sin+0xa0>
 8009784:	2000      	movs	r0, #0
 8009786:	b005      	add	sp, #20
 8009788:	f85d eb04 	ldr.w	lr, [sp], #4
 800978c:	f001 bf34 	b.w	800b5f8 <__kernel_sin>
 8009790:	4822      	ldr	r0, [pc, #136]	; (800981c <sin+0xac>)
 8009792:	4281      	cmp	r1, r0
 8009794:	dd09      	ble.n	80097aa <sin+0x3a>
 8009796:	ee10 0a10 	vmov	r0, s0
 800979a:	4619      	mov	r1, r3
 800979c:	f7f6 fd74 	bl	8000288 <__aeabi_dsub>
 80097a0:	ec41 0b10 	vmov	d0, r0, r1
 80097a4:	b005      	add	sp, #20
 80097a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80097aa:	4668      	mov	r0, sp
 80097ac:	f001 f84c 	bl	800a848 <__ieee754_rem_pio2>
 80097b0:	f000 0003 	and.w	r0, r0, #3
 80097b4:	2801      	cmp	r0, #1
 80097b6:	d00c      	beq.n	80097d2 <sin+0x62>
 80097b8:	2802      	cmp	r0, #2
 80097ba:	d011      	beq.n	80097e0 <sin+0x70>
 80097bc:	b9f0      	cbnz	r0, 80097fc <sin+0x8c>
 80097be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097c2:	ed9d 0b00 	vldr	d0, [sp]
 80097c6:	2001      	movs	r0, #1
 80097c8:	f001 ff16 	bl	800b5f8 <__kernel_sin>
 80097cc:	ec51 0b10 	vmov	r0, r1, d0
 80097d0:	e7e6      	b.n	80097a0 <sin+0x30>
 80097d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097d6:	ed9d 0b00 	vldr	d0, [sp]
 80097da:	f001 faf5 	bl	800adc8 <__kernel_cos>
 80097de:	e7f5      	b.n	80097cc <sin+0x5c>
 80097e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80097e4:	ed9d 0b00 	vldr	d0, [sp]
 80097e8:	2001      	movs	r0, #1
 80097ea:	f001 ff05 	bl	800b5f8 <__kernel_sin>
 80097ee:	ec53 2b10 	vmov	r2, r3, d0
 80097f2:	ee10 0a10 	vmov	r0, s0
 80097f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80097fa:	e7d1      	b.n	80097a0 <sin+0x30>
 80097fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009800:	ed9d 0b00 	vldr	d0, [sp]
 8009804:	f001 fae0 	bl	800adc8 <__kernel_cos>
 8009808:	e7f1      	b.n	80097ee <sin+0x7e>
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w
	...
 8009818:	3fe921fb 	.word	0x3fe921fb
 800981c:	7fefffff 	.word	0x7fefffff

08009820 <asin>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	ed2d 8b02 	vpush	{d8}
 8009826:	ec55 4b10 	vmov	r4, r5, d0
 800982a:	f000 f8c9 	bl	80099c0 <__ieee754_asin>
 800982e:	4622      	mov	r2, r4
 8009830:	462b      	mov	r3, r5
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	eeb0 8a40 	vmov.f32	s16, s0
 800983a:	eef0 8a60 	vmov.f32	s17, s1
 800983e:	f7f7 f975 	bl	8000b2c <__aeabi_dcmpun>
 8009842:	b9a8      	cbnz	r0, 8009870 <asin+0x50>
 8009844:	ec45 4b10 	vmov	d0, r4, r5
 8009848:	f001 ffc4 	bl	800b7d4 <fabs>
 800984c:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <asin+0x60>)
 800984e:	ec51 0b10 	vmov	r0, r1, d0
 8009852:	2200      	movs	r2, #0
 8009854:	f7f7 f960 	bl	8000b18 <__aeabi_dcmpgt>
 8009858:	b150      	cbz	r0, 8009870 <asin+0x50>
 800985a:	f7ff fae7 	bl	8008e2c <__errno>
 800985e:	ecbd 8b02 	vpop	{d8}
 8009862:	2321      	movs	r3, #33	; 0x21
 8009864:	6003      	str	r3, [r0, #0]
 8009866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986a:	4806      	ldr	r0, [pc, #24]	; (8009884 <asin+0x64>)
 800986c:	f002 b848 	b.w	800b900 <nan>
 8009870:	eeb0 0a48 	vmov.f32	s0, s16
 8009874:	eef0 0a68 	vmov.f32	s1, s17
 8009878:	ecbd 8b02 	vpop	{d8}
 800987c:	bd38      	pop	{r3, r4, r5, pc}
 800987e:	bf00      	nop
 8009880:	3ff00000 	.word	0x3ff00000
 8009884:	0800ba75 	.word	0x0800ba75

08009888 <pow>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	ed2d 8b02 	vpush	{d8}
 800988e:	eeb0 8a40 	vmov.f32	s16, s0
 8009892:	eef0 8a60 	vmov.f32	s17, s1
 8009896:	ec55 4b11 	vmov	r4, r5, d1
 800989a:	f000 faa5 	bl	8009de8 <__ieee754_pow>
 800989e:	4622      	mov	r2, r4
 80098a0:	462b      	mov	r3, r5
 80098a2:	4620      	mov	r0, r4
 80098a4:	4629      	mov	r1, r5
 80098a6:	ec57 6b10 	vmov	r6, r7, d0
 80098aa:	f7f7 f93f 	bl	8000b2c <__aeabi_dcmpun>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d13b      	bne.n	800992a <pow+0xa2>
 80098b2:	ec51 0b18 	vmov	r0, r1, d8
 80098b6:	2200      	movs	r2, #0
 80098b8:	2300      	movs	r3, #0
 80098ba:	f7f7 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 80098be:	b1b8      	cbz	r0, 80098f0 <pow+0x68>
 80098c0:	2200      	movs	r2, #0
 80098c2:	2300      	movs	r3, #0
 80098c4:	4620      	mov	r0, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	f7f7 f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d146      	bne.n	800995e <pow+0xd6>
 80098d0:	ec45 4b10 	vmov	d0, r4, r5
 80098d4:	f001 ff87 	bl	800b7e6 <finite>
 80098d8:	b338      	cbz	r0, 800992a <pow+0xa2>
 80098da:	2200      	movs	r2, #0
 80098dc:	2300      	movs	r3, #0
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f7 f8fb 	bl	8000adc <__aeabi_dcmplt>
 80098e6:	b300      	cbz	r0, 800992a <pow+0xa2>
 80098e8:	f7ff faa0 	bl	8008e2c <__errno>
 80098ec:	2322      	movs	r3, #34	; 0x22
 80098ee:	e01b      	b.n	8009928 <pow+0xa0>
 80098f0:	ec47 6b10 	vmov	d0, r6, r7
 80098f4:	f001 ff77 	bl	800b7e6 <finite>
 80098f8:	b9e0      	cbnz	r0, 8009934 <pow+0xac>
 80098fa:	eeb0 0a48 	vmov.f32	s0, s16
 80098fe:	eef0 0a68 	vmov.f32	s1, s17
 8009902:	f001 ff70 	bl	800b7e6 <finite>
 8009906:	b1a8      	cbz	r0, 8009934 <pow+0xac>
 8009908:	ec45 4b10 	vmov	d0, r4, r5
 800990c:	f001 ff6b 	bl	800b7e6 <finite>
 8009910:	b180      	cbz	r0, 8009934 <pow+0xac>
 8009912:	4632      	mov	r2, r6
 8009914:	463b      	mov	r3, r7
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f7 f907 	bl	8000b2c <__aeabi_dcmpun>
 800991e:	2800      	cmp	r0, #0
 8009920:	d0e2      	beq.n	80098e8 <pow+0x60>
 8009922:	f7ff fa83 	bl	8008e2c <__errno>
 8009926:	2321      	movs	r3, #33	; 0x21
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	ecbd 8b02 	vpop	{d8}
 800992e:	ec47 6b10 	vmov	d0, r6, r7
 8009932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009934:	2200      	movs	r2, #0
 8009936:	2300      	movs	r3, #0
 8009938:	4630      	mov	r0, r6
 800993a:	4639      	mov	r1, r7
 800993c:	f7f7 f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009940:	2800      	cmp	r0, #0
 8009942:	d0f2      	beq.n	800992a <pow+0xa2>
 8009944:	eeb0 0a48 	vmov.f32	s0, s16
 8009948:	eef0 0a68 	vmov.f32	s1, s17
 800994c:	f001 ff4b 	bl	800b7e6 <finite>
 8009950:	2800      	cmp	r0, #0
 8009952:	d0ea      	beq.n	800992a <pow+0xa2>
 8009954:	ec45 4b10 	vmov	d0, r4, r5
 8009958:	f001 ff45 	bl	800b7e6 <finite>
 800995c:	e7c3      	b.n	80098e6 <pow+0x5e>
 800995e:	4f01      	ldr	r7, [pc, #4]	; (8009964 <pow+0xdc>)
 8009960:	2600      	movs	r6, #0
 8009962:	e7e2      	b.n	800992a <pow+0xa2>
 8009964:	3ff00000 	.word	0x3ff00000

08009968 <sqrt>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	ed2d 8b02 	vpush	{d8}
 800996e:	ec55 4b10 	vmov	r4, r5, d0
 8009972:	f001 f975 	bl	800ac60 <__ieee754_sqrt>
 8009976:	4622      	mov	r2, r4
 8009978:	462b      	mov	r3, r5
 800997a:	4620      	mov	r0, r4
 800997c:	4629      	mov	r1, r5
 800997e:	eeb0 8a40 	vmov.f32	s16, s0
 8009982:	eef0 8a60 	vmov.f32	s17, s1
 8009986:	f7f7 f8d1 	bl	8000b2c <__aeabi_dcmpun>
 800998a:	b990      	cbnz	r0, 80099b2 <sqrt+0x4a>
 800998c:	2200      	movs	r2, #0
 800998e:	2300      	movs	r3, #0
 8009990:	4620      	mov	r0, r4
 8009992:	4629      	mov	r1, r5
 8009994:	f7f7 f8a2 	bl	8000adc <__aeabi_dcmplt>
 8009998:	b158      	cbz	r0, 80099b2 <sqrt+0x4a>
 800999a:	f7ff fa47 	bl	8008e2c <__errno>
 800999e:	2321      	movs	r3, #33	; 0x21
 80099a0:	6003      	str	r3, [r0, #0]
 80099a2:	2200      	movs	r2, #0
 80099a4:	2300      	movs	r3, #0
 80099a6:	4610      	mov	r0, r2
 80099a8:	4619      	mov	r1, r3
 80099aa:	f7f6 ff4f 	bl	800084c <__aeabi_ddiv>
 80099ae:	ec41 0b18 	vmov	d8, r0, r1
 80099b2:	eeb0 0a48 	vmov.f32	s0, s16
 80099b6:	eef0 0a68 	vmov.f32	s1, s17
 80099ba:	ecbd 8b02 	vpop	{d8}
 80099be:	bd38      	pop	{r3, r4, r5, pc}

080099c0 <__ieee754_asin>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	ed2d 8b04 	vpush	{d8-d9}
 80099c8:	ec55 4b10 	vmov	r4, r5, d0
 80099cc:	4bcc      	ldr	r3, [pc, #816]	; (8009d00 <__ieee754_asin+0x340>)
 80099ce:	b083      	sub	sp, #12
 80099d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80099d4:	4598      	cmp	r8, r3
 80099d6:	9501      	str	r5, [sp, #4]
 80099d8:	dd35      	ble.n	8009a46 <__ieee754_asin+0x86>
 80099da:	ee10 3a10 	vmov	r3, s0
 80099de:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80099e2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80099e6:	ea58 0303 	orrs.w	r3, r8, r3
 80099ea:	d117      	bne.n	8009a1c <__ieee754_asin+0x5c>
 80099ec:	a3aa      	add	r3, pc, #680	; (adr r3, 8009c98 <__ieee754_asin+0x2d8>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	ee10 0a10 	vmov	r0, s0
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7f6 fdfe 	bl	80005f8 <__aeabi_dmul>
 80099fc:	a3a8      	add	r3, pc, #672	; (adr r3, 8009ca0 <__ieee754_asin+0x2e0>)
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	4606      	mov	r6, r0
 8009a04:	460f      	mov	r7, r1
 8009a06:	4620      	mov	r0, r4
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f7f6 fdf5 	bl	80005f8 <__aeabi_dmul>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4630      	mov	r0, r6
 8009a14:	4639      	mov	r1, r7
 8009a16:	f7f6 fc39 	bl	800028c <__adddf3>
 8009a1a:	e00b      	b.n	8009a34 <__ieee754_asin+0x74>
 8009a1c:	ee10 2a10 	vmov	r2, s0
 8009a20:	462b      	mov	r3, r5
 8009a22:	ee10 0a10 	vmov	r0, s0
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fc2e 	bl	8000288 <__aeabi_dsub>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	f7f6 ff0c 	bl	800084c <__aeabi_ddiv>
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	ec45 4b10 	vmov	d0, r4, r5
 8009a3c:	b003      	add	sp, #12
 8009a3e:	ecbd 8b04 	vpop	{d8-d9}
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	4baf      	ldr	r3, [pc, #700]	; (8009d04 <__ieee754_asin+0x344>)
 8009a48:	4598      	cmp	r8, r3
 8009a4a:	dc11      	bgt.n	8009a70 <__ieee754_asin+0xb0>
 8009a4c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009a50:	f280 80ae 	bge.w	8009bb0 <__ieee754_asin+0x1f0>
 8009a54:	a394      	add	r3, pc, #592	; (adr r3, 8009ca8 <__ieee754_asin+0x2e8>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	ee10 0a10 	vmov	r0, s0
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fc14 	bl	800028c <__adddf3>
 8009a64:	4ba8      	ldr	r3, [pc, #672]	; (8009d08 <__ieee754_asin+0x348>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	f7f7 f856 	bl	8000b18 <__aeabi_dcmpgt>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d1e3      	bne.n	8009a38 <__ieee754_asin+0x78>
 8009a70:	ec45 4b10 	vmov	d0, r4, r5
 8009a74:	f001 feae 	bl	800b7d4 <fabs>
 8009a78:	49a3      	ldr	r1, [pc, #652]	; (8009d08 <__ieee754_asin+0x348>)
 8009a7a:	ec53 2b10 	vmov	r2, r3, d0
 8009a7e:	2000      	movs	r0, #0
 8009a80:	f7f6 fc02 	bl	8000288 <__aeabi_dsub>
 8009a84:	4ba1      	ldr	r3, [pc, #644]	; (8009d0c <__ieee754_asin+0x34c>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	f7f6 fdb6 	bl	80005f8 <__aeabi_dmul>
 8009a8c:	a388      	add	r3, pc, #544	; (adr r3, 8009cb0 <__ieee754_asin+0x2f0>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	4604      	mov	r4, r0
 8009a94:	460d      	mov	r5, r1
 8009a96:	f7f6 fdaf 	bl	80005f8 <__aeabi_dmul>
 8009a9a:	a387      	add	r3, pc, #540	; (adr r3, 8009cb8 <__ieee754_asin+0x2f8>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fbf4 	bl	800028c <__adddf3>
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	462b      	mov	r3, r5
 8009aa8:	f7f6 fda6 	bl	80005f8 <__aeabi_dmul>
 8009aac:	a384      	add	r3, pc, #528	; (adr r3, 8009cc0 <__ieee754_asin+0x300>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fbe9 	bl	8000288 <__aeabi_dsub>
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	462b      	mov	r3, r5
 8009aba:	f7f6 fd9d 	bl	80005f8 <__aeabi_dmul>
 8009abe:	a382      	add	r3, pc, #520	; (adr r3, 8009cc8 <__ieee754_asin+0x308>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fbe2 	bl	800028c <__adddf3>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	462b      	mov	r3, r5
 8009acc:	f7f6 fd94 	bl	80005f8 <__aeabi_dmul>
 8009ad0:	a37f      	add	r3, pc, #508	; (adr r3, 8009cd0 <__ieee754_asin+0x310>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fbd7 	bl	8000288 <__aeabi_dsub>
 8009ada:	4622      	mov	r2, r4
 8009adc:	462b      	mov	r3, r5
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	a37d      	add	r3, pc, #500	; (adr r3, 8009cd8 <__ieee754_asin+0x318>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fbd0 	bl	800028c <__adddf3>
 8009aec:	4622      	mov	r2, r4
 8009aee:	462b      	mov	r3, r5
 8009af0:	f7f6 fd82 	bl	80005f8 <__aeabi_dmul>
 8009af4:	a37a      	add	r3, pc, #488	; (adr r3, 8009ce0 <__ieee754_asin+0x320>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	ec41 0b18 	vmov	d8, r0, r1
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fd79 	bl	80005f8 <__aeabi_dmul>
 8009b06:	a378      	add	r3, pc, #480	; (adr r3, 8009ce8 <__ieee754_asin+0x328>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fbbc 	bl	8000288 <__aeabi_dsub>
 8009b10:	4622      	mov	r2, r4
 8009b12:	462b      	mov	r3, r5
 8009b14:	f7f6 fd70 	bl	80005f8 <__aeabi_dmul>
 8009b18:	a375      	add	r3, pc, #468	; (adr r3, 8009cf0 <__ieee754_asin+0x330>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fbb5 	bl	800028c <__adddf3>
 8009b22:	4622      	mov	r2, r4
 8009b24:	462b      	mov	r3, r5
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	a373      	add	r3, pc, #460	; (adr r3, 8009cf8 <__ieee754_asin+0x338>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fbaa 	bl	8000288 <__aeabi_dsub>
 8009b34:	4622      	mov	r2, r4
 8009b36:	462b      	mov	r3, r5
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	4b72      	ldr	r3, [pc, #456]	; (8009d08 <__ieee754_asin+0x348>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f7f6 fba4 	bl	800028c <__adddf3>
 8009b44:	ec45 4b10 	vmov	d0, r4, r5
 8009b48:	4606      	mov	r6, r0
 8009b4a:	460f      	mov	r7, r1
 8009b4c:	f001 f888 	bl	800ac60 <__ieee754_sqrt>
 8009b50:	4b6f      	ldr	r3, [pc, #444]	; (8009d10 <__ieee754_asin+0x350>)
 8009b52:	4598      	cmp	r8, r3
 8009b54:	ec5b ab10 	vmov	sl, fp, d0
 8009b58:	f340 80dc 	ble.w	8009d14 <__ieee754_asin+0x354>
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	463b      	mov	r3, r7
 8009b60:	ec51 0b18 	vmov	r0, r1, d8
 8009b64:	f7f6 fe72 	bl	800084c <__aeabi_ddiv>
 8009b68:	4652      	mov	r2, sl
 8009b6a:	465b      	mov	r3, fp
 8009b6c:	f7f6 fd44 	bl	80005f8 <__aeabi_dmul>
 8009b70:	4652      	mov	r2, sl
 8009b72:	465b      	mov	r3, fp
 8009b74:	f7f6 fb8a 	bl	800028c <__adddf3>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	f7f6 fb86 	bl	800028c <__adddf3>
 8009b80:	a347      	add	r3, pc, #284	; (adr r3, 8009ca0 <__ieee754_asin+0x2e0>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 fb7f 	bl	8000288 <__aeabi_dsub>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	a142      	add	r1, pc, #264	; (adr r1, 8009c98 <__ieee754_asin+0x2d8>)
 8009b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b94:	f7f6 fb78 	bl	8000288 <__aeabi_dsub>
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	bfdc      	itt	le
 8009b9e:	4602      	movle	r2, r0
 8009ba0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	460d      	mov	r5, r1
 8009ba8:	bfdc      	itt	le
 8009baa:	4614      	movle	r4, r2
 8009bac:	461d      	movle	r5, r3
 8009bae:	e743      	b.n	8009a38 <__ieee754_asin+0x78>
 8009bb0:	ee10 2a10 	vmov	r2, s0
 8009bb4:	ee10 0a10 	vmov	r0, s0
 8009bb8:	462b      	mov	r3, r5
 8009bba:	4629      	mov	r1, r5
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	a33b      	add	r3, pc, #236	; (adr r3, 8009cb0 <__ieee754_asin+0x2f0>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	f7f6 fd15 	bl	80005f8 <__aeabi_dmul>
 8009bce:	a33a      	add	r3, pc, #232	; (adr r3, 8009cb8 <__ieee754_asin+0x2f8>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 fb5a 	bl	800028c <__adddf3>
 8009bd8:	4632      	mov	r2, r6
 8009bda:	463b      	mov	r3, r7
 8009bdc:	f7f6 fd0c 	bl	80005f8 <__aeabi_dmul>
 8009be0:	a337      	add	r3, pc, #220	; (adr r3, 8009cc0 <__ieee754_asin+0x300>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f7f6 fb4f 	bl	8000288 <__aeabi_dsub>
 8009bea:	4632      	mov	r2, r6
 8009bec:	463b      	mov	r3, r7
 8009bee:	f7f6 fd03 	bl	80005f8 <__aeabi_dmul>
 8009bf2:	a335      	add	r3, pc, #212	; (adr r3, 8009cc8 <__ieee754_asin+0x308>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f7f6 fb48 	bl	800028c <__adddf3>
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	463b      	mov	r3, r7
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	a332      	add	r3, pc, #200	; (adr r3, 8009cd0 <__ieee754_asin+0x310>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f7f6 fb3d 	bl	8000288 <__aeabi_dsub>
 8009c0e:	4632      	mov	r2, r6
 8009c10:	463b      	mov	r3, r7
 8009c12:	f7f6 fcf1 	bl	80005f8 <__aeabi_dmul>
 8009c16:	a330      	add	r3, pc, #192	; (adr r3, 8009cd8 <__ieee754_asin+0x318>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f7f6 fb36 	bl	800028c <__adddf3>
 8009c20:	4632      	mov	r2, r6
 8009c22:	463b      	mov	r3, r7
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	a32d      	add	r3, pc, #180	; (adr r3, 8009ce0 <__ieee754_asin+0x320>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4689      	mov	r9, r1
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8009c3a:	a32b      	add	r3, pc, #172	; (adr r3, 8009ce8 <__ieee754_asin+0x328>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fb22 	bl	8000288 <__aeabi_dsub>
 8009c44:	4632      	mov	r2, r6
 8009c46:	463b      	mov	r3, r7
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	a328      	add	r3, pc, #160	; (adr r3, 8009cf0 <__ieee754_asin+0x330>)
 8009c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c52:	f7f6 fb1b 	bl	800028c <__adddf3>
 8009c56:	4632      	mov	r2, r6
 8009c58:	463b      	mov	r3, r7
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	a326      	add	r3, pc, #152	; (adr r3, 8009cf8 <__ieee754_asin+0x338>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	f7f6 fb10 	bl	8000288 <__aeabi_dsub>
 8009c68:	4632      	mov	r2, r6
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	4b25      	ldr	r3, [pc, #148]	; (8009d08 <__ieee754_asin+0x348>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fb0a 	bl	800028c <__adddf3>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f7f6 fde4 	bl	800084c <__aeabi_ddiv>
 8009c84:	4622      	mov	r2, r4
 8009c86:	462b      	mov	r3, r5
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4620      	mov	r0, r4
 8009c92:	4629      	mov	r1, r5
 8009c94:	e6bf      	b.n	8009a16 <__ieee754_asin+0x56>
 8009c96:	bf00      	nop
 8009c98:	54442d18 	.word	0x54442d18
 8009c9c:	3ff921fb 	.word	0x3ff921fb
 8009ca0:	33145c07 	.word	0x33145c07
 8009ca4:	3c91a626 	.word	0x3c91a626
 8009ca8:	8800759c 	.word	0x8800759c
 8009cac:	7e37e43c 	.word	0x7e37e43c
 8009cb0:	0dfdf709 	.word	0x0dfdf709
 8009cb4:	3f023de1 	.word	0x3f023de1
 8009cb8:	7501b288 	.word	0x7501b288
 8009cbc:	3f49efe0 	.word	0x3f49efe0
 8009cc0:	b5688f3b 	.word	0xb5688f3b
 8009cc4:	3fa48228 	.word	0x3fa48228
 8009cc8:	0e884455 	.word	0x0e884455
 8009ccc:	3fc9c155 	.word	0x3fc9c155
 8009cd0:	03eb6f7d 	.word	0x03eb6f7d
 8009cd4:	3fd4d612 	.word	0x3fd4d612
 8009cd8:	55555555 	.word	0x55555555
 8009cdc:	3fc55555 	.word	0x3fc55555
 8009ce0:	b12e9282 	.word	0xb12e9282
 8009ce4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009ce8:	1b8d0159 	.word	0x1b8d0159
 8009cec:	3fe6066c 	.word	0x3fe6066c
 8009cf0:	9c598ac8 	.word	0x9c598ac8
 8009cf4:	40002ae5 	.word	0x40002ae5
 8009cf8:	1c8a2d4b 	.word	0x1c8a2d4b
 8009cfc:	40033a27 	.word	0x40033a27
 8009d00:	3fefffff 	.word	0x3fefffff
 8009d04:	3fdfffff 	.word	0x3fdfffff
 8009d08:	3ff00000 	.word	0x3ff00000
 8009d0c:	3fe00000 	.word	0x3fe00000
 8009d10:	3fef3332 	.word	0x3fef3332
 8009d14:	ee10 2a10 	vmov	r2, s0
 8009d18:	ee10 0a10 	vmov	r0, s0
 8009d1c:	465b      	mov	r3, fp
 8009d1e:	4659      	mov	r1, fp
 8009d20:	f7f6 fab4 	bl	800028c <__adddf3>
 8009d24:	4632      	mov	r2, r6
 8009d26:	463b      	mov	r3, r7
 8009d28:	ec41 0b19 	vmov	d9, r0, r1
 8009d2c:	ec51 0b18 	vmov	r0, r1, d8
 8009d30:	f7f6 fd8c 	bl	800084c <__aeabi_ddiv>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	ec51 0b19 	vmov	r0, r1, d9
 8009d3c:	f7f6 fc5c 	bl	80005f8 <__aeabi_dmul>
 8009d40:	f04f 0800 	mov.w	r8, #0
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	4642      	mov	r2, r8
 8009d4a:	465b      	mov	r3, fp
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	4659      	mov	r1, fp
 8009d50:	f7f6 fc52 	bl	80005f8 <__aeabi_dmul>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fa94 	bl	8000288 <__aeabi_dsub>
 8009d60:	4642      	mov	r2, r8
 8009d62:	4604      	mov	r4, r0
 8009d64:	460d      	mov	r5, r1
 8009d66:	465b      	mov	r3, fp
 8009d68:	4650      	mov	r0, sl
 8009d6a:	4659      	mov	r1, fp
 8009d6c:	f7f6 fa8e 	bl	800028c <__adddf3>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4620      	mov	r0, r4
 8009d76:	4629      	mov	r1, r5
 8009d78:	f7f6 fd68 	bl	800084c <__aeabi_ddiv>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	f7f6 fa84 	bl	800028c <__adddf3>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	a113      	add	r1, pc, #76	; (adr r1, 8009dd8 <__ieee754_asin+0x418>)
 8009d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d8e:	f7f6 fa7b 	bl	8000288 <__aeabi_dsub>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4630      	mov	r0, r6
 8009d98:	4639      	mov	r1, r7
 8009d9a:	f7f6 fa75 	bl	8000288 <__aeabi_dsub>
 8009d9e:	4642      	mov	r2, r8
 8009da0:	4604      	mov	r4, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	465b      	mov	r3, fp
 8009da6:	4640      	mov	r0, r8
 8009da8:	4659      	mov	r1, fp
 8009daa:	f7f6 fa6f 	bl	800028c <__adddf3>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	a10b      	add	r1, pc, #44	; (adr r1, 8009de0 <__ieee754_asin+0x420>)
 8009db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db8:	f7f6 fa66 	bl	8000288 <__aeabi_dsub>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7f6 fa60 	bl	8000288 <__aeabi_dsub>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	a104      	add	r1, pc, #16	; (adr r1, 8009de0 <__ieee754_asin+0x420>)
 8009dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd2:	e6df      	b.n	8009b94 <__ieee754_asin+0x1d4>
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	33145c07 	.word	0x33145c07
 8009ddc:	3c91a626 	.word	0x3c91a626
 8009de0:	54442d18 	.word	0x54442d18
 8009de4:	3fe921fb 	.word	0x3fe921fb

08009de8 <__ieee754_pow>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	ed2d 8b06 	vpush	{d8-d10}
 8009df0:	b089      	sub	sp, #36	; 0x24
 8009df2:	ed8d 1b00 	vstr	d1, [sp]
 8009df6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009dfa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009dfe:	ea58 0102 	orrs.w	r1, r8, r2
 8009e02:	ec57 6b10 	vmov	r6, r7, d0
 8009e06:	d115      	bne.n	8009e34 <__ieee754_pow+0x4c>
 8009e08:	19b3      	adds	r3, r6, r6
 8009e0a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009e0e:	4152      	adcs	r2, r2
 8009e10:	4299      	cmp	r1, r3
 8009e12:	4b89      	ldr	r3, [pc, #548]	; (800a038 <__ieee754_pow+0x250>)
 8009e14:	4193      	sbcs	r3, r2
 8009e16:	f080 84d2 	bcs.w	800a7be <__ieee754_pow+0x9d6>
 8009e1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fa33 	bl	800028c <__adddf3>
 8009e26:	ec41 0b10 	vmov	d0, r0, r1
 8009e2a:	b009      	add	sp, #36	; 0x24
 8009e2c:	ecbd 8b06 	vpop	{d8-d10}
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	4b81      	ldr	r3, [pc, #516]	; (800a03c <__ieee754_pow+0x254>)
 8009e36:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	ee10 aa10 	vmov	sl, s0
 8009e40:	463d      	mov	r5, r7
 8009e42:	dc06      	bgt.n	8009e52 <__ieee754_pow+0x6a>
 8009e44:	d101      	bne.n	8009e4a <__ieee754_pow+0x62>
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	d1e7      	bne.n	8009e1a <__ieee754_pow+0x32>
 8009e4a:	4598      	cmp	r8, r3
 8009e4c:	dc01      	bgt.n	8009e52 <__ieee754_pow+0x6a>
 8009e4e:	d10f      	bne.n	8009e70 <__ieee754_pow+0x88>
 8009e50:	b172      	cbz	r2, 8009e70 <__ieee754_pow+0x88>
 8009e52:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009e56:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009e5a:	ea55 050a 	orrs.w	r5, r5, sl
 8009e5e:	d1dc      	bne.n	8009e1a <__ieee754_pow+0x32>
 8009e60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e64:	18db      	adds	r3, r3, r3
 8009e66:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009e6a:	4152      	adcs	r2, r2
 8009e6c:	429d      	cmp	r5, r3
 8009e6e:	e7d0      	b.n	8009e12 <__ieee754_pow+0x2a>
 8009e70:	2d00      	cmp	r5, #0
 8009e72:	da3b      	bge.n	8009eec <__ieee754_pow+0x104>
 8009e74:	4b72      	ldr	r3, [pc, #456]	; (800a040 <__ieee754_pow+0x258>)
 8009e76:	4598      	cmp	r8, r3
 8009e78:	dc51      	bgt.n	8009f1e <__ieee754_pow+0x136>
 8009e7a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009e7e:	4598      	cmp	r8, r3
 8009e80:	f340 84ac 	ble.w	800a7dc <__ieee754_pow+0x9f4>
 8009e84:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e8c:	2b14      	cmp	r3, #20
 8009e8e:	dd0f      	ble.n	8009eb0 <__ieee754_pow+0xc8>
 8009e90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009e94:	fa22 f103 	lsr.w	r1, r2, r3
 8009e98:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	f040 849d 	bne.w	800a7dc <__ieee754_pow+0x9f4>
 8009ea2:	f001 0101 	and.w	r1, r1, #1
 8009ea6:	f1c1 0302 	rsb	r3, r1, #2
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	b182      	cbz	r2, 8009ed0 <__ieee754_pow+0xe8>
 8009eae:	e05f      	b.n	8009f70 <__ieee754_pow+0x188>
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	d15b      	bne.n	8009f6c <__ieee754_pow+0x184>
 8009eb4:	f1c3 0314 	rsb	r3, r3, #20
 8009eb8:	fa48 f103 	asr.w	r1, r8, r3
 8009ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec0:	4543      	cmp	r3, r8
 8009ec2:	f040 8488 	bne.w	800a7d6 <__ieee754_pow+0x9ee>
 8009ec6:	f001 0101 	and.w	r1, r1, #1
 8009eca:	f1c1 0302 	rsb	r3, r1, #2
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	4b5c      	ldr	r3, [pc, #368]	; (800a044 <__ieee754_pow+0x25c>)
 8009ed2:	4598      	cmp	r8, r3
 8009ed4:	d132      	bne.n	8009f3c <__ieee754_pow+0x154>
 8009ed6:	f1b9 0f00 	cmp.w	r9, #0
 8009eda:	f280 8478 	bge.w	800a7ce <__ieee754_pow+0x9e6>
 8009ede:	4959      	ldr	r1, [pc, #356]	; (800a044 <__ieee754_pow+0x25c>)
 8009ee0:	4632      	mov	r2, r6
 8009ee2:	463b      	mov	r3, r7
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	f7f6 fcb1 	bl	800084c <__aeabi_ddiv>
 8009eea:	e79c      	b.n	8009e26 <__ieee754_pow+0x3e>
 8009eec:	2300      	movs	r3, #0
 8009eee:	9304      	str	r3, [sp, #16]
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	d13d      	bne.n	8009f70 <__ieee754_pow+0x188>
 8009ef4:	4b51      	ldr	r3, [pc, #324]	; (800a03c <__ieee754_pow+0x254>)
 8009ef6:	4598      	cmp	r8, r3
 8009ef8:	d1ea      	bne.n	8009ed0 <__ieee754_pow+0xe8>
 8009efa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009efe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009f02:	ea53 030a 	orrs.w	r3, r3, sl
 8009f06:	f000 845a 	beq.w	800a7be <__ieee754_pow+0x9d6>
 8009f0a:	4b4f      	ldr	r3, [pc, #316]	; (800a048 <__ieee754_pow+0x260>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	dd08      	ble.n	8009f22 <__ieee754_pow+0x13a>
 8009f10:	f1b9 0f00 	cmp.w	r9, #0
 8009f14:	f2c0 8457 	blt.w	800a7c6 <__ieee754_pow+0x9de>
 8009f18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f1c:	e783      	b.n	8009e26 <__ieee754_pow+0x3e>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	e7e5      	b.n	8009eee <__ieee754_pow+0x106>
 8009f22:	f1b9 0f00 	cmp.w	r9, #0
 8009f26:	f04f 0000 	mov.w	r0, #0
 8009f2a:	f04f 0100 	mov.w	r1, #0
 8009f2e:	f6bf af7a 	bge.w	8009e26 <__ieee754_pow+0x3e>
 8009f32:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f3a:	e774      	b.n	8009e26 <__ieee754_pow+0x3e>
 8009f3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009f40:	d106      	bne.n	8009f50 <__ieee754_pow+0x168>
 8009f42:	4632      	mov	r2, r6
 8009f44:	463b      	mov	r3, r7
 8009f46:	4630      	mov	r0, r6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	f7f6 fb55 	bl	80005f8 <__aeabi_dmul>
 8009f4e:	e76a      	b.n	8009e26 <__ieee754_pow+0x3e>
 8009f50:	4b3e      	ldr	r3, [pc, #248]	; (800a04c <__ieee754_pow+0x264>)
 8009f52:	4599      	cmp	r9, r3
 8009f54:	d10c      	bne.n	8009f70 <__ieee754_pow+0x188>
 8009f56:	2d00      	cmp	r5, #0
 8009f58:	db0a      	blt.n	8009f70 <__ieee754_pow+0x188>
 8009f5a:	ec47 6b10 	vmov	d0, r6, r7
 8009f5e:	b009      	add	sp, #36	; 0x24
 8009f60:	ecbd 8b06 	vpop	{d8-d10}
 8009f64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	f000 be7a 	b.w	800ac60 <__ieee754_sqrt>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9304      	str	r3, [sp, #16]
 8009f70:	ec47 6b10 	vmov	d0, r6, r7
 8009f74:	f001 fc2e 	bl	800b7d4 <fabs>
 8009f78:	ec51 0b10 	vmov	r0, r1, d0
 8009f7c:	f1ba 0f00 	cmp.w	sl, #0
 8009f80:	d129      	bne.n	8009fd6 <__ieee754_pow+0x1ee>
 8009f82:	b124      	cbz	r4, 8009f8e <__ieee754_pow+0x1a6>
 8009f84:	4b2f      	ldr	r3, [pc, #188]	; (800a044 <__ieee754_pow+0x25c>)
 8009f86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d123      	bne.n	8009fd6 <__ieee754_pow+0x1ee>
 8009f8e:	f1b9 0f00 	cmp.w	r9, #0
 8009f92:	da05      	bge.n	8009fa0 <__ieee754_pow+0x1b8>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	2000      	movs	r0, #0
 8009f9a:	492a      	ldr	r1, [pc, #168]	; (800a044 <__ieee754_pow+0x25c>)
 8009f9c:	f7f6 fc56 	bl	800084c <__aeabi_ddiv>
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	f6bf af40 	bge.w	8009e26 <__ieee754_pow+0x3e>
 8009fa6:	9b04      	ldr	r3, [sp, #16]
 8009fa8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009fac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fb0:	4323      	orrs	r3, r4
 8009fb2:	d108      	bne.n	8009fc6 <__ieee754_pow+0x1de>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4619      	mov	r1, r3
 8009fbc:	f7f6 f964 	bl	8000288 <__aeabi_dsub>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	e78f      	b.n	8009ee6 <__ieee754_pow+0xfe>
 8009fc6:	9b04      	ldr	r3, [sp, #16]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	f47f af2c 	bne.w	8009e26 <__ieee754_pow+0x3e>
 8009fce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	e727      	b.n	8009e26 <__ieee754_pow+0x3e>
 8009fd6:	0feb      	lsrs	r3, r5, #31
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	9306      	str	r3, [sp, #24]
 8009fdc:	9a06      	ldr	r2, [sp, #24]
 8009fde:	9b04      	ldr	r3, [sp, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	d102      	bne.n	8009fea <__ieee754_pow+0x202>
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	e7e6      	b.n	8009fb8 <__ieee754_pow+0x1d0>
 8009fea:	4b19      	ldr	r3, [pc, #100]	; (800a050 <__ieee754_pow+0x268>)
 8009fec:	4598      	cmp	r8, r3
 8009fee:	f340 80fb 	ble.w	800a1e8 <__ieee754_pow+0x400>
 8009ff2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009ff6:	4598      	cmp	r8, r3
 8009ff8:	4b13      	ldr	r3, [pc, #76]	; (800a048 <__ieee754_pow+0x260>)
 8009ffa:	dd0c      	ble.n	800a016 <__ieee754_pow+0x22e>
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	dc0f      	bgt.n	800a020 <__ieee754_pow+0x238>
 800a000:	f1b9 0f00 	cmp.w	r9, #0
 800a004:	da0f      	bge.n	800a026 <__ieee754_pow+0x23e>
 800a006:	2000      	movs	r0, #0
 800a008:	b009      	add	sp, #36	; 0x24
 800a00a:	ecbd 8b06 	vpop	{d8-d10}
 800a00e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a012:	f001 bbd6 	b.w	800b7c2 <__math_oflow>
 800a016:	429c      	cmp	r4, r3
 800a018:	dbf2      	blt.n	800a000 <__ieee754_pow+0x218>
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <__ieee754_pow+0x25c>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	dd19      	ble.n	800a054 <__ieee754_pow+0x26c>
 800a020:	f1b9 0f00 	cmp.w	r9, #0
 800a024:	dcef      	bgt.n	800a006 <__ieee754_pow+0x21e>
 800a026:	2000      	movs	r0, #0
 800a028:	b009      	add	sp, #36	; 0x24
 800a02a:	ecbd 8b06 	vpop	{d8-d10}
 800a02e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a032:	f001 bbbd 	b.w	800b7b0 <__math_uflow>
 800a036:	bf00      	nop
 800a038:	fff00000 	.word	0xfff00000
 800a03c:	7ff00000 	.word	0x7ff00000
 800a040:	433fffff 	.word	0x433fffff
 800a044:	3ff00000 	.word	0x3ff00000
 800a048:	3fefffff 	.word	0x3fefffff
 800a04c:	3fe00000 	.word	0x3fe00000
 800a050:	41e00000 	.word	0x41e00000
 800a054:	4b60      	ldr	r3, [pc, #384]	; (800a1d8 <__ieee754_pow+0x3f0>)
 800a056:	2200      	movs	r2, #0
 800a058:	f7f6 f916 	bl	8000288 <__aeabi_dsub>
 800a05c:	a354      	add	r3, pc, #336	; (adr r3, 800a1b0 <__ieee754_pow+0x3c8>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	4604      	mov	r4, r0
 800a064:	460d      	mov	r5, r1
 800a066:	f7f6 fac7 	bl	80005f8 <__aeabi_dmul>
 800a06a:	a353      	add	r3, pc, #332	; (adr r3, 800a1b8 <__ieee754_pow+0x3d0>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	4606      	mov	r6, r0
 800a072:	460f      	mov	r7, r1
 800a074:	4620      	mov	r0, r4
 800a076:	4629      	mov	r1, r5
 800a078:	f7f6 fabe 	bl	80005f8 <__aeabi_dmul>
 800a07c:	4b57      	ldr	r3, [pc, #348]	; (800a1dc <__ieee754_pow+0x3f4>)
 800a07e:	4682      	mov	sl, r0
 800a080:	468b      	mov	fp, r1
 800a082:	2200      	movs	r2, #0
 800a084:	4620      	mov	r0, r4
 800a086:	4629      	mov	r1, r5
 800a088:	f7f6 fab6 	bl	80005f8 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	a14b      	add	r1, pc, #300	; (adr r1, 800a1c0 <__ieee754_pow+0x3d8>)
 800a092:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a096:	f7f6 f8f7 	bl	8000288 <__aeabi_dsub>
 800a09a:	4622      	mov	r2, r4
 800a09c:	462b      	mov	r3, r5
 800a09e:	f7f6 faab 	bl	80005f8 <__aeabi_dmul>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	494d      	ldr	r1, [pc, #308]	; (800a1e0 <__ieee754_pow+0x3f8>)
 800a0aa:	f7f6 f8ed 	bl	8000288 <__aeabi_dsub>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	4689      	mov	r9, r1
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	f7f6 fa9d 	bl	80005f8 <__aeabi_dmul>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	f7f6 fa97 	bl	80005f8 <__aeabi_dmul>
 800a0ca:	a33f      	add	r3, pc, #252	; (adr r3, 800a1c8 <__ieee754_pow+0x3e0>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 fa92 	bl	80005f8 <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4650      	mov	r0, sl
 800a0da:	4659      	mov	r1, fp
 800a0dc:	f7f6 f8d4 	bl	8000288 <__aeabi_dsub>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	4689      	mov	r9, r1
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f7f6 f8ce 	bl	800028c <__adddf3>
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	4632      	mov	r2, r6
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	f7f6 f8c5 	bl	8000288 <__aeabi_dsub>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4640      	mov	r0, r8
 800a104:	4649      	mov	r1, r9
 800a106:	f7f6 f8bf 	bl	8000288 <__aeabi_dsub>
 800a10a:	9b04      	ldr	r3, [sp, #16]
 800a10c:	9a06      	ldr	r2, [sp, #24]
 800a10e:	3b01      	subs	r3, #1
 800a110:	4313      	orrs	r3, r2
 800a112:	4682      	mov	sl, r0
 800a114:	468b      	mov	fp, r1
 800a116:	f040 81e7 	bne.w	800a4e8 <__ieee754_pow+0x700>
 800a11a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a1d0 <__ieee754_pow+0x3e8>
 800a11e:	eeb0 8a47 	vmov.f32	s16, s14
 800a122:	eef0 8a67 	vmov.f32	s17, s15
 800a126:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a12a:	2600      	movs	r6, #0
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a134:	f7f6 f8a8 	bl	8000288 <__aeabi_dsub>
 800a138:	4622      	mov	r2, r4
 800a13a:	462b      	mov	r3, r5
 800a13c:	f7f6 fa5c 	bl	80005f8 <__aeabi_dmul>
 800a140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a144:	4680      	mov	r8, r0
 800a146:	4689      	mov	r9, r1
 800a148:	4650      	mov	r0, sl
 800a14a:	4659      	mov	r1, fp
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4640      	mov	r0, r8
 800a156:	4649      	mov	r1, r9
 800a158:	f7f6 f898 	bl	800028c <__adddf3>
 800a15c:	4632      	mov	r2, r6
 800a15e:	463b      	mov	r3, r7
 800a160:	4680      	mov	r8, r0
 800a162:	4689      	mov	r9, r1
 800a164:	4620      	mov	r0, r4
 800a166:	4629      	mov	r1, r5
 800a168:	f7f6 fa46 	bl	80005f8 <__aeabi_dmul>
 800a16c:	460b      	mov	r3, r1
 800a16e:	4604      	mov	r4, r0
 800a170:	460d      	mov	r5, r1
 800a172:	4602      	mov	r2, r0
 800a174:	4649      	mov	r1, r9
 800a176:	4640      	mov	r0, r8
 800a178:	f7f6 f888 	bl	800028c <__adddf3>
 800a17c:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <__ieee754_pow+0x3fc>)
 800a17e:	4299      	cmp	r1, r3
 800a180:	ec45 4b19 	vmov	d9, r4, r5
 800a184:	4606      	mov	r6, r0
 800a186:	460f      	mov	r7, r1
 800a188:	468b      	mov	fp, r1
 800a18a:	f340 82f1 	ble.w	800a770 <__ieee754_pow+0x988>
 800a18e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a192:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a196:	4303      	orrs	r3, r0
 800a198:	f000 81e4 	beq.w	800a564 <__ieee754_pow+0x77c>
 800a19c:	ec51 0b18 	vmov	r0, r1, d8
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f7f6 fc9a 	bl	8000adc <__aeabi_dcmplt>
 800a1a8:	3800      	subs	r0, #0
 800a1aa:	bf18      	it	ne
 800a1ac:	2001      	movne	r0, #1
 800a1ae:	e72b      	b.n	800a008 <__ieee754_pow+0x220>
 800a1b0:	60000000 	.word	0x60000000
 800a1b4:	3ff71547 	.word	0x3ff71547
 800a1b8:	f85ddf44 	.word	0xf85ddf44
 800a1bc:	3e54ae0b 	.word	0x3e54ae0b
 800a1c0:	55555555 	.word	0x55555555
 800a1c4:	3fd55555 	.word	0x3fd55555
 800a1c8:	652b82fe 	.word	0x652b82fe
 800a1cc:	3ff71547 	.word	0x3ff71547
 800a1d0:	00000000 	.word	0x00000000
 800a1d4:	bff00000 	.word	0xbff00000
 800a1d8:	3ff00000 	.word	0x3ff00000
 800a1dc:	3fd00000 	.word	0x3fd00000
 800a1e0:	3fe00000 	.word	0x3fe00000
 800a1e4:	408fffff 	.word	0x408fffff
 800a1e8:	4bd5      	ldr	r3, [pc, #852]	; (800a540 <__ieee754_pow+0x758>)
 800a1ea:	402b      	ands	r3, r5
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	b92b      	cbnz	r3, 800a1fc <__ieee754_pow+0x414>
 800a1f0:	4bd4      	ldr	r3, [pc, #848]	; (800a544 <__ieee754_pow+0x75c>)
 800a1f2:	f7f6 fa01 	bl	80005f8 <__aeabi_dmul>
 800a1f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	1523      	asrs	r3, r4, #20
 800a1fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a202:	4413      	add	r3, r2
 800a204:	9305      	str	r3, [sp, #20]
 800a206:	4bd0      	ldr	r3, [pc, #832]	; (800a548 <__ieee754_pow+0x760>)
 800a208:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a20c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a210:	429c      	cmp	r4, r3
 800a212:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a216:	dd08      	ble.n	800a22a <__ieee754_pow+0x442>
 800a218:	4bcc      	ldr	r3, [pc, #816]	; (800a54c <__ieee754_pow+0x764>)
 800a21a:	429c      	cmp	r4, r3
 800a21c:	f340 8162 	ble.w	800a4e4 <__ieee754_pow+0x6fc>
 800a220:	9b05      	ldr	r3, [sp, #20]
 800a222:	3301      	adds	r3, #1
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a22a:	2400      	movs	r4, #0
 800a22c:	00e3      	lsls	r3, r4, #3
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	4bc7      	ldr	r3, [pc, #796]	; (800a550 <__ieee754_pow+0x768>)
 800a232:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a236:	ed93 7b00 	vldr	d7, [r3]
 800a23a:	4629      	mov	r1, r5
 800a23c:	ec53 2b17 	vmov	r2, r3, d7
 800a240:	eeb0 9a47 	vmov.f32	s18, s14
 800a244:	eef0 9a67 	vmov.f32	s19, s15
 800a248:	4682      	mov	sl, r0
 800a24a:	f7f6 f81d 	bl	8000288 <__aeabi_dsub>
 800a24e:	4652      	mov	r2, sl
 800a250:	4606      	mov	r6, r0
 800a252:	460f      	mov	r7, r1
 800a254:	462b      	mov	r3, r5
 800a256:	ec51 0b19 	vmov	r0, r1, d9
 800a25a:	f7f6 f817 	bl	800028c <__adddf3>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	2000      	movs	r0, #0
 800a264:	49bb      	ldr	r1, [pc, #748]	; (800a554 <__ieee754_pow+0x76c>)
 800a266:	f7f6 faf1 	bl	800084c <__aeabi_ddiv>
 800a26a:	ec41 0b1a 	vmov	d10, r0, r1
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	4630      	mov	r0, r6
 800a274:	4639      	mov	r1, r7
 800a276:	f7f6 f9bf 	bl	80005f8 <__aeabi_dmul>
 800a27a:	2300      	movs	r3, #0
 800a27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a280:	9302      	str	r3, [sp, #8]
 800a282:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a286:	46ab      	mov	fp, r5
 800a288:	106d      	asrs	r5, r5, #1
 800a28a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a28e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a292:	ec41 0b18 	vmov	d8, r0, r1
 800a296:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a29a:	2200      	movs	r2, #0
 800a29c:	4640      	mov	r0, r8
 800a29e:	4649      	mov	r1, r9
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	461d      	mov	r5, r3
 800a2a4:	f7f6 f9a8 	bl	80005f8 <__aeabi_dmul>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f5 ffea 	bl	8000288 <__aeabi_dsub>
 800a2b4:	ec53 2b19 	vmov	r2, r3, d9
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	460f      	mov	r7, r1
 800a2bc:	4620      	mov	r0, r4
 800a2be:	4629      	mov	r1, r5
 800a2c0:	f7f5 ffe2 	bl	8000288 <__aeabi_dsub>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	f7f5 ffdc 	bl	8000288 <__aeabi_dsub>
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4630      	mov	r0, r6
 800a2de:	4639      	mov	r1, r7
 800a2e0:	f7f5 ffd2 	bl	8000288 <__aeabi_dsub>
 800a2e4:	ec53 2b1a 	vmov	r2, r3, d10
 800a2e8:	f7f6 f986 	bl	80005f8 <__aeabi_dmul>
 800a2ec:	ec53 2b18 	vmov	r2, r3, d8
 800a2f0:	ec41 0b19 	vmov	d9, r0, r1
 800a2f4:	ec51 0b18 	vmov	r0, r1, d8
 800a2f8:	f7f6 f97e 	bl	80005f8 <__aeabi_dmul>
 800a2fc:	a37c      	add	r3, pc, #496	; (adr r3, 800a4f0 <__ieee754_pow+0x708>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	4604      	mov	r4, r0
 800a304:	460d      	mov	r5, r1
 800a306:	f7f6 f977 	bl	80005f8 <__aeabi_dmul>
 800a30a:	a37b      	add	r3, pc, #492	; (adr r3, 800a4f8 <__ieee754_pow+0x710>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f5 ffbc 	bl	800028c <__adddf3>
 800a314:	4622      	mov	r2, r4
 800a316:	462b      	mov	r3, r5
 800a318:	f7f6 f96e 	bl	80005f8 <__aeabi_dmul>
 800a31c:	a378      	add	r3, pc, #480	; (adr r3, 800a500 <__ieee754_pow+0x718>)
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	f7f5 ffb3 	bl	800028c <__adddf3>
 800a326:	4622      	mov	r2, r4
 800a328:	462b      	mov	r3, r5
 800a32a:	f7f6 f965 	bl	80005f8 <__aeabi_dmul>
 800a32e:	a376      	add	r3, pc, #472	; (adr r3, 800a508 <__ieee754_pow+0x720>)
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f7f5 ffaa 	bl	800028c <__adddf3>
 800a338:	4622      	mov	r2, r4
 800a33a:	462b      	mov	r3, r5
 800a33c:	f7f6 f95c 	bl	80005f8 <__aeabi_dmul>
 800a340:	a373      	add	r3, pc, #460	; (adr r3, 800a510 <__ieee754_pow+0x728>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f7f5 ffa1 	bl	800028c <__adddf3>
 800a34a:	4622      	mov	r2, r4
 800a34c:	462b      	mov	r3, r5
 800a34e:	f7f6 f953 	bl	80005f8 <__aeabi_dmul>
 800a352:	a371      	add	r3, pc, #452	; (adr r3, 800a518 <__ieee754_pow+0x730>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f5 ff98 	bl	800028c <__adddf3>
 800a35c:	4622      	mov	r2, r4
 800a35e:	4606      	mov	r6, r0
 800a360:	460f      	mov	r7, r1
 800a362:	462b      	mov	r3, r5
 800a364:	4620      	mov	r0, r4
 800a366:	4629      	mov	r1, r5
 800a368:	f7f6 f946 	bl	80005f8 <__aeabi_dmul>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	4642      	mov	r2, r8
 800a37a:	4604      	mov	r4, r0
 800a37c:	460d      	mov	r5, r1
 800a37e:	464b      	mov	r3, r9
 800a380:	ec51 0b18 	vmov	r0, r1, d8
 800a384:	f7f5 ff82 	bl	800028c <__adddf3>
 800a388:	ec53 2b19 	vmov	r2, r3, d9
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	4622      	mov	r2, r4
 800a392:	462b      	mov	r3, r5
 800a394:	f7f5 ff7a 	bl	800028c <__adddf3>
 800a398:	4642      	mov	r2, r8
 800a39a:	4682      	mov	sl, r0
 800a39c:	468b      	mov	fp, r1
 800a39e:	464b      	mov	r3, r9
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	f7f6 f928 	bl	80005f8 <__aeabi_dmul>
 800a3a8:	4b6b      	ldr	r3, [pc, #428]	; (800a558 <__ieee754_pow+0x770>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	460f      	mov	r7, r1
 800a3b0:	f7f5 ff6c 	bl	800028c <__adddf3>
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	465b      	mov	r3, fp
 800a3b8:	f7f5 ff68 	bl	800028c <__adddf3>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	f7f6 f915 	bl	80005f8 <__aeabi_dmul>
 800a3ce:	4b62      	ldr	r3, [pc, #392]	; (800a558 <__ieee754_pow+0x770>)
 800a3d0:	4680      	mov	r8, r0
 800a3d2:	4689      	mov	r9, r1
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7f5 ff55 	bl	8000288 <__aeabi_dsub>
 800a3de:	4632      	mov	r2, r6
 800a3e0:	463b      	mov	r3, r7
 800a3e2:	f7f5 ff51 	bl	8000288 <__aeabi_dsub>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4650      	mov	r0, sl
 800a3ec:	4659      	mov	r1, fp
 800a3ee:	f7f5 ff4b 	bl	8000288 <__aeabi_dsub>
 800a3f2:	ec53 2b18 	vmov	r2, r3, d8
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	460f      	mov	r7, r1
 800a400:	462b      	mov	r3, r5
 800a402:	ec51 0b19 	vmov	r0, r1, d9
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4630      	mov	r0, r6
 800a410:	4639      	mov	r1, r7
 800a412:	f7f5 ff3b 	bl	800028c <__adddf3>
 800a416:	4606      	mov	r6, r0
 800a418:	460f      	mov	r7, r1
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f5 ff33 	bl	800028c <__adddf3>
 800a426:	a33e      	add	r3, pc, #248	; (adr r3, 800a520 <__ieee754_pow+0x738>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	2000      	movs	r0, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	460d      	mov	r5, r1
 800a432:	f7f6 f8e1 	bl	80005f8 <__aeabi_dmul>
 800a436:	4642      	mov	r2, r8
 800a438:	ec41 0b18 	vmov	d8, r0, r1
 800a43c:	464b      	mov	r3, r9
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7f5 ff21 	bl	8000288 <__aeabi_dsub>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f5 ff1b 	bl	8000288 <__aeabi_dsub>
 800a452:	a335      	add	r3, pc, #212	; (adr r3, 800a528 <__ieee754_pow+0x740>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	a334      	add	r3, pc, #208	; (adr r3, 800a530 <__ieee754_pow+0x748>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	4606      	mov	r6, r0
 800a464:	460f      	mov	r7, r1
 800a466:	4620      	mov	r0, r4
 800a468:	4629      	mov	r1, r5
 800a46a:	f7f6 f8c5 	bl	80005f8 <__aeabi_dmul>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4630      	mov	r0, r6
 800a474:	4639      	mov	r1, r7
 800a476:	f7f5 ff09 	bl	800028c <__adddf3>
 800a47a:	9a07      	ldr	r2, [sp, #28]
 800a47c:	4b37      	ldr	r3, [pc, #220]	; (800a55c <__ieee754_pow+0x774>)
 800a47e:	4413      	add	r3, r2
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f5 ff02 	bl	800028c <__adddf3>
 800a488:	4682      	mov	sl, r0
 800a48a:	9805      	ldr	r0, [sp, #20]
 800a48c:	468b      	mov	fp, r1
 800a48e:	f7f6 f849 	bl	8000524 <__aeabi_i2d>
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	4b32      	ldr	r3, [pc, #200]	; (800a560 <__ieee754_pow+0x778>)
 800a496:	4413      	add	r3, r2
 800a498:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	4652      	mov	r2, sl
 800a4a2:	465b      	mov	r3, fp
 800a4a4:	ec51 0b18 	vmov	r0, r1, d8
 800a4a8:	f7f5 fef0 	bl	800028c <__adddf3>
 800a4ac:	4642      	mov	r2, r8
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	f7f5 feec 	bl	800028c <__adddf3>
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	f7f5 fee8 	bl	800028c <__adddf3>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	4632      	mov	r2, r6
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	f7f5 fedf 	bl	8000288 <__aeabi_dsub>
 800a4ca:	4642      	mov	r2, r8
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	f7f5 fedb 	bl	8000288 <__aeabi_dsub>
 800a4d2:	ec53 2b18 	vmov	r2, r3, d8
 800a4d6:	f7f5 fed7 	bl	8000288 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4650      	mov	r0, sl
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	e610      	b.n	800a106 <__ieee754_pow+0x31e>
 800a4e4:	2401      	movs	r4, #1
 800a4e6:	e6a1      	b.n	800a22c <__ieee754_pow+0x444>
 800a4e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a538 <__ieee754_pow+0x750>
 800a4ec:	e617      	b.n	800a11e <__ieee754_pow+0x336>
 800a4ee:	bf00      	nop
 800a4f0:	4a454eef 	.word	0x4a454eef
 800a4f4:	3fca7e28 	.word	0x3fca7e28
 800a4f8:	93c9db65 	.word	0x93c9db65
 800a4fc:	3fcd864a 	.word	0x3fcd864a
 800a500:	a91d4101 	.word	0xa91d4101
 800a504:	3fd17460 	.word	0x3fd17460
 800a508:	518f264d 	.word	0x518f264d
 800a50c:	3fd55555 	.word	0x3fd55555
 800a510:	db6fabff 	.word	0xdb6fabff
 800a514:	3fdb6db6 	.word	0x3fdb6db6
 800a518:	33333303 	.word	0x33333303
 800a51c:	3fe33333 	.word	0x3fe33333
 800a520:	e0000000 	.word	0xe0000000
 800a524:	3feec709 	.word	0x3feec709
 800a528:	dc3a03fd 	.word	0xdc3a03fd
 800a52c:	3feec709 	.word	0x3feec709
 800a530:	145b01f5 	.word	0x145b01f5
 800a534:	be3e2fe0 	.word	0xbe3e2fe0
 800a538:	00000000 	.word	0x00000000
 800a53c:	3ff00000 	.word	0x3ff00000
 800a540:	7ff00000 	.word	0x7ff00000
 800a544:	43400000 	.word	0x43400000
 800a548:	0003988e 	.word	0x0003988e
 800a54c:	000bb679 	.word	0x000bb679
 800a550:	0800baa8 	.word	0x0800baa8
 800a554:	3ff00000 	.word	0x3ff00000
 800a558:	40080000 	.word	0x40080000
 800a55c:	0800bac8 	.word	0x0800bac8
 800a560:	0800bab8 	.word	0x0800bab8
 800a564:	a3b5      	add	r3, pc, #724	; (adr r3, 800a83c <__ieee754_pow+0xa54>)
 800a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56a:	4640      	mov	r0, r8
 800a56c:	4649      	mov	r1, r9
 800a56e:	f7f5 fe8d 	bl	800028c <__adddf3>
 800a572:	4622      	mov	r2, r4
 800a574:	ec41 0b1a 	vmov	d10, r0, r1
 800a578:	462b      	mov	r3, r5
 800a57a:	4630      	mov	r0, r6
 800a57c:	4639      	mov	r1, r7
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	ec51 0b1a 	vmov	r0, r1, d10
 800a58a:	f7f6 fac5 	bl	8000b18 <__aeabi_dcmpgt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f47f ae04 	bne.w	800a19c <__ieee754_pow+0x3b4>
 800a594:	4aa4      	ldr	r2, [pc, #656]	; (800a828 <__ieee754_pow+0xa40>)
 800a596:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a59a:	4293      	cmp	r3, r2
 800a59c:	f340 8108 	ble.w	800a7b0 <__ieee754_pow+0x9c8>
 800a5a0:	151b      	asrs	r3, r3, #20
 800a5a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a5a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a5aa:	fa4a f303 	asr.w	r3, sl, r3
 800a5ae:	445b      	add	r3, fp
 800a5b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a5b4:	4e9d      	ldr	r6, [pc, #628]	; (800a82c <__ieee754_pow+0xa44>)
 800a5b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a5ba:	4116      	asrs	r6, r2
 800a5bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	ea23 0106 	bic.w	r1, r3, r6
 800a5c6:	f1c2 0214 	rsb	r2, r2, #20
 800a5ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a5ce:	fa4a fa02 	asr.w	sl, sl, r2
 800a5d2:	f1bb 0f00 	cmp.w	fp, #0
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	bfb8      	it	lt
 800a5e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800a5e4:	f7f5 fe50 	bl	8000288 <__aeabi_dsub>
 800a5e8:	ec41 0b19 	vmov	d9, r0, r1
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	ec51 0b19 	vmov	r0, r1, d9
 800a5f4:	f7f5 fe4a 	bl	800028c <__adddf3>
 800a5f8:	a37b      	add	r3, pc, #492	; (adr r3, 800a7e8 <__ieee754_pow+0xa00>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	2000      	movs	r0, #0
 800a600:	4604      	mov	r4, r0
 800a602:	460d      	mov	r5, r1
 800a604:	f7f5 fff8 	bl	80005f8 <__aeabi_dmul>
 800a608:	ec53 2b19 	vmov	r2, r3, d9
 800a60c:	4606      	mov	r6, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	4620      	mov	r0, r4
 800a612:	4629      	mov	r1, r5
 800a614:	f7f5 fe38 	bl	8000288 <__aeabi_dsub>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4640      	mov	r0, r8
 800a61e:	4649      	mov	r1, r9
 800a620:	f7f5 fe32 	bl	8000288 <__aeabi_dsub>
 800a624:	a372      	add	r3, pc, #456	; (adr r3, 800a7f0 <__ieee754_pow+0xa08>)
 800a626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62a:	f7f5 ffe5 	bl	80005f8 <__aeabi_dmul>
 800a62e:	a372      	add	r3, pc, #456	; (adr r3, 800a7f8 <__ieee754_pow+0xa10>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	4680      	mov	r8, r0
 800a636:	4689      	mov	r9, r1
 800a638:	4620      	mov	r0, r4
 800a63a:	4629      	mov	r1, r5
 800a63c:	f7f5 ffdc 	bl	80005f8 <__aeabi_dmul>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4640      	mov	r0, r8
 800a646:	4649      	mov	r1, r9
 800a648:	f7f5 fe20 	bl	800028c <__adddf3>
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4630      	mov	r0, r6
 800a656:	4639      	mov	r1, r7
 800a658:	f7f5 fe18 	bl	800028c <__adddf3>
 800a65c:	4632      	mov	r2, r6
 800a65e:	463b      	mov	r3, r7
 800a660:	4680      	mov	r8, r0
 800a662:	4689      	mov	r9, r1
 800a664:	f7f5 fe10 	bl	8000288 <__aeabi_dsub>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 fe0a 	bl	8000288 <__aeabi_dsub>
 800a674:	4642      	mov	r2, r8
 800a676:	4606      	mov	r6, r0
 800a678:	460f      	mov	r7, r1
 800a67a:	464b      	mov	r3, r9
 800a67c:	4640      	mov	r0, r8
 800a67e:	4649      	mov	r1, r9
 800a680:	f7f5 ffba 	bl	80005f8 <__aeabi_dmul>
 800a684:	a35e      	add	r3, pc, #376	; (adr r3, 800a800 <__ieee754_pow+0xa18>)
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	4604      	mov	r4, r0
 800a68c:	460d      	mov	r5, r1
 800a68e:	f7f5 ffb3 	bl	80005f8 <__aeabi_dmul>
 800a692:	a35d      	add	r3, pc, #372	; (adr r3, 800a808 <__ieee754_pow+0xa20>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f7f5 fdf6 	bl	8000288 <__aeabi_dsub>
 800a69c:	4622      	mov	r2, r4
 800a69e:	462b      	mov	r3, r5
 800a6a0:	f7f5 ffaa 	bl	80005f8 <__aeabi_dmul>
 800a6a4:	a35a      	add	r3, pc, #360	; (adr r3, 800a810 <__ieee754_pow+0xa28>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f7f5 fdef 	bl	800028c <__adddf3>
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	f7f5 ffa1 	bl	80005f8 <__aeabi_dmul>
 800a6b6:	a358      	add	r3, pc, #352	; (adr r3, 800a818 <__ieee754_pow+0xa30>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f7f5 fde4 	bl	8000288 <__aeabi_dsub>
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	a355      	add	r3, pc, #340	; (adr r3, 800a820 <__ieee754_pow+0xa38>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 fddd 	bl	800028c <__adddf3>
 800a6d2:	4622      	mov	r2, r4
 800a6d4:	462b      	mov	r3, r5
 800a6d6:	f7f5 ff8f 	bl	80005f8 <__aeabi_dmul>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 fdd1 	bl	8000288 <__aeabi_dsub>
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	460d      	mov	r5, r1
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	ec41 0b19 	vmov	d9, r0, r1
 800a6fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fdc0 	bl	8000288 <__aeabi_dsub>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	ec51 0b19 	vmov	r0, r1, d9
 800a710:	f7f6 f89c 	bl	800084c <__aeabi_ddiv>
 800a714:	4632      	mov	r2, r6
 800a716:	4604      	mov	r4, r0
 800a718:	460d      	mov	r5, r1
 800a71a:	463b      	mov	r3, r7
 800a71c:	4640      	mov	r0, r8
 800a71e:	4649      	mov	r1, r9
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	4632      	mov	r2, r6
 800a726:	463b      	mov	r3, r7
 800a728:	f7f5 fdb0 	bl	800028c <__adddf3>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4620      	mov	r0, r4
 800a732:	4629      	mov	r1, r5
 800a734:	f7f5 fda8 	bl	8000288 <__aeabi_dsub>
 800a738:	4642      	mov	r2, r8
 800a73a:	464b      	mov	r3, r9
 800a73c:	f7f5 fda4 	bl	8000288 <__aeabi_dsub>
 800a740:	460b      	mov	r3, r1
 800a742:	4602      	mov	r2, r0
 800a744:	493a      	ldr	r1, [pc, #232]	; (800a830 <__ieee754_pow+0xa48>)
 800a746:	2000      	movs	r0, #0
 800a748:	f7f5 fd9e 	bl	8000288 <__aeabi_dsub>
 800a74c:	ec41 0b10 	vmov	d0, r0, r1
 800a750:	ee10 3a90 	vmov	r3, s1
 800a754:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a75c:	da2b      	bge.n	800a7b6 <__ieee754_pow+0x9ce>
 800a75e:	4650      	mov	r0, sl
 800a760:	f001 f8d6 	bl	800b910 <scalbn>
 800a764:	ec51 0b10 	vmov	r0, r1, d0
 800a768:	ec53 2b18 	vmov	r2, r3, d8
 800a76c:	f7ff bbed 	b.w	8009f4a <__ieee754_pow+0x162>
 800a770:	4b30      	ldr	r3, [pc, #192]	; (800a834 <__ieee754_pow+0xa4c>)
 800a772:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a776:	429e      	cmp	r6, r3
 800a778:	f77f af0c 	ble.w	800a594 <__ieee754_pow+0x7ac>
 800a77c:	4b2e      	ldr	r3, [pc, #184]	; (800a838 <__ieee754_pow+0xa50>)
 800a77e:	440b      	add	r3, r1
 800a780:	4303      	orrs	r3, r0
 800a782:	d009      	beq.n	800a798 <__ieee754_pow+0x9b0>
 800a784:	ec51 0b18 	vmov	r0, r1, d8
 800a788:	2200      	movs	r2, #0
 800a78a:	2300      	movs	r3, #0
 800a78c:	f7f6 f9a6 	bl	8000adc <__aeabi_dcmplt>
 800a790:	3800      	subs	r0, #0
 800a792:	bf18      	it	ne
 800a794:	2001      	movne	r0, #1
 800a796:	e447      	b.n	800a028 <__ieee754_pow+0x240>
 800a798:	4622      	mov	r2, r4
 800a79a:	462b      	mov	r3, r5
 800a79c:	f7f5 fd74 	bl	8000288 <__aeabi_dsub>
 800a7a0:	4642      	mov	r2, r8
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	f7f6 f9ae 	bl	8000b04 <__aeabi_dcmpge>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	f43f aef3 	beq.w	800a594 <__ieee754_pow+0x7ac>
 800a7ae:	e7e9      	b.n	800a784 <__ieee754_pow+0x99c>
 800a7b0:	f04f 0a00 	mov.w	sl, #0
 800a7b4:	e71a      	b.n	800a5ec <__ieee754_pow+0x804>
 800a7b6:	ec51 0b10 	vmov	r0, r1, d0
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	e7d4      	b.n	800a768 <__ieee754_pow+0x980>
 800a7be:	491c      	ldr	r1, [pc, #112]	; (800a830 <__ieee754_pow+0xa48>)
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	f7ff bb30 	b.w	8009e26 <__ieee754_pow+0x3e>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	f7ff bb2c 	b.w	8009e26 <__ieee754_pow+0x3e>
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	f7ff bb28 	b.w	8009e26 <__ieee754_pow+0x3e>
 800a7d6:	9204      	str	r2, [sp, #16]
 800a7d8:	f7ff bb7a 	b.w	8009ed0 <__ieee754_pow+0xe8>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f7ff bb64 	b.w	8009eaa <__ieee754_pow+0xc2>
 800a7e2:	bf00      	nop
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	00000000 	.word	0x00000000
 800a7ec:	3fe62e43 	.word	0x3fe62e43
 800a7f0:	fefa39ef 	.word	0xfefa39ef
 800a7f4:	3fe62e42 	.word	0x3fe62e42
 800a7f8:	0ca86c39 	.word	0x0ca86c39
 800a7fc:	be205c61 	.word	0xbe205c61
 800a800:	72bea4d0 	.word	0x72bea4d0
 800a804:	3e663769 	.word	0x3e663769
 800a808:	c5d26bf1 	.word	0xc5d26bf1
 800a80c:	3ebbbd41 	.word	0x3ebbbd41
 800a810:	af25de2c 	.word	0xaf25de2c
 800a814:	3f11566a 	.word	0x3f11566a
 800a818:	16bebd93 	.word	0x16bebd93
 800a81c:	3f66c16c 	.word	0x3f66c16c
 800a820:	5555553e 	.word	0x5555553e
 800a824:	3fc55555 	.word	0x3fc55555
 800a828:	3fe00000 	.word	0x3fe00000
 800a82c:	000fffff 	.word	0x000fffff
 800a830:	3ff00000 	.word	0x3ff00000
 800a834:	4090cbff 	.word	0x4090cbff
 800a838:	3f6f3400 	.word	0x3f6f3400
 800a83c:	652b82fe 	.word	0x652b82fe
 800a840:	3c971547 	.word	0x3c971547
 800a844:	00000000 	.word	0x00000000

0800a848 <__ieee754_rem_pio2>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	ed2d 8b02 	vpush	{d8}
 800a850:	ec55 4b10 	vmov	r4, r5, d0
 800a854:	4bca      	ldr	r3, [pc, #808]	; (800ab80 <__ieee754_rem_pio2+0x338>)
 800a856:	b08b      	sub	sp, #44	; 0x2c
 800a858:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a85c:	4598      	cmp	r8, r3
 800a85e:	4682      	mov	sl, r0
 800a860:	9502      	str	r5, [sp, #8]
 800a862:	dc08      	bgt.n	800a876 <__ieee754_rem_pio2+0x2e>
 800a864:	2200      	movs	r2, #0
 800a866:	2300      	movs	r3, #0
 800a868:	ed80 0b00 	vstr	d0, [r0]
 800a86c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a870:	f04f 0b00 	mov.w	fp, #0
 800a874:	e028      	b.n	800a8c8 <__ieee754_rem_pio2+0x80>
 800a876:	4bc3      	ldr	r3, [pc, #780]	; (800ab84 <__ieee754_rem_pio2+0x33c>)
 800a878:	4598      	cmp	r8, r3
 800a87a:	dc78      	bgt.n	800a96e <__ieee754_rem_pio2+0x126>
 800a87c:	9b02      	ldr	r3, [sp, #8]
 800a87e:	4ec2      	ldr	r6, [pc, #776]	; (800ab88 <__ieee754_rem_pio2+0x340>)
 800a880:	2b00      	cmp	r3, #0
 800a882:	ee10 0a10 	vmov	r0, s0
 800a886:	a3b0      	add	r3, pc, #704	; (adr r3, 800ab48 <__ieee754_rem_pio2+0x300>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	4629      	mov	r1, r5
 800a88e:	dd39      	ble.n	800a904 <__ieee754_rem_pio2+0xbc>
 800a890:	f7f5 fcfa 	bl	8000288 <__aeabi_dsub>
 800a894:	45b0      	cmp	r8, r6
 800a896:	4604      	mov	r4, r0
 800a898:	460d      	mov	r5, r1
 800a89a:	d01b      	beq.n	800a8d4 <__ieee754_rem_pio2+0x8c>
 800a89c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x308>)
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	f7f5 fcf1 	bl	8000288 <__aeabi_dsub>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	e9ca 2300 	strd	r2, r3, [sl]
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	f7f5 fce9 	bl	8000288 <__aeabi_dsub>
 800a8b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x308>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f7f5 fce4 	bl	8000288 <__aeabi_dsub>
 800a8c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8c4:	f04f 0b01 	mov.w	fp, #1
 800a8c8:	4658      	mov	r0, fp
 800a8ca:	b00b      	add	sp, #44	; 0x2c
 800a8cc:	ecbd 8b02 	vpop	{d8}
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x310>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	f7f5 fcd5 	bl	8000288 <__aeabi_dsub>
 800a8de:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x318>)
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	460d      	mov	r5, r1
 800a8e8:	f7f5 fcce 	bl	8000288 <__aeabi_dsub>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	e9ca 2300 	strd	r2, r3, [sl]
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fcc6 	bl	8000288 <__aeabi_dsub>
 800a8fc:	a398      	add	r3, pc, #608	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x318>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	e7db      	b.n	800a8bc <__ieee754_rem_pio2+0x74>
 800a904:	f7f5 fcc2 	bl	800028c <__adddf3>
 800a908:	45b0      	cmp	r8, r6
 800a90a:	4604      	mov	r4, r0
 800a90c:	460d      	mov	r5, r1
 800a90e:	d016      	beq.n	800a93e <__ieee754_rem_pio2+0xf6>
 800a910:	a38f      	add	r3, pc, #572	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x308>)
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	f7f5 fcb9 	bl	800028c <__adddf3>
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	e9ca 2300 	strd	r2, r3, [sl]
 800a922:	4620      	mov	r0, r4
 800a924:	4629      	mov	r1, r5
 800a926:	f7f5 fcaf 	bl	8000288 <__aeabi_dsub>
 800a92a:	a389      	add	r3, pc, #548	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x308>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fcac 	bl	800028c <__adddf3>
 800a934:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a938:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a93c:	e7c4      	b.n	800a8c8 <__ieee754_rem_pio2+0x80>
 800a93e:	a386      	add	r3, pc, #536	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x310>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f5 fca2 	bl	800028c <__adddf3>
 800a948:	a385      	add	r3, pc, #532	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x318>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	f7f5 fc9b 	bl	800028c <__adddf3>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	e9ca 2300 	strd	r2, r3, [sl]
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fc91 	bl	8000288 <__aeabi_dsub>
 800a966:	a37e      	add	r3, pc, #504	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x318>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	e7e0      	b.n	800a930 <__ieee754_rem_pio2+0xe8>
 800a96e:	4b87      	ldr	r3, [pc, #540]	; (800ab8c <__ieee754_rem_pio2+0x344>)
 800a970:	4598      	cmp	r8, r3
 800a972:	f300 80d9 	bgt.w	800ab28 <__ieee754_rem_pio2+0x2e0>
 800a976:	f000 ff2d 	bl	800b7d4 <fabs>
 800a97a:	ec55 4b10 	vmov	r4, r5, d0
 800a97e:	ee10 0a10 	vmov	r0, s0
 800a982:	a379      	add	r3, pc, #484	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x320>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	4629      	mov	r1, r5
 800a98a:	f7f5 fe35 	bl	80005f8 <__aeabi_dmul>
 800a98e:	4b80      	ldr	r3, [pc, #512]	; (800ab90 <__ieee754_rem_pio2+0x348>)
 800a990:	2200      	movs	r2, #0
 800a992:	f7f5 fc7b 	bl	800028c <__adddf3>
 800a996:	f7f6 f8df 	bl	8000b58 <__aeabi_d2iz>
 800a99a:	4683      	mov	fp, r0
 800a99c:	f7f5 fdc2 	bl	8000524 <__aeabi_i2d>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	ec43 2b18 	vmov	d8, r2, r3
 800a9a8:	a367      	add	r3, pc, #412	; (adr r3, 800ab48 <__ieee754_rem_pio2+0x300>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	f7f5 fe23 	bl	80005f8 <__aeabi_dmul>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	f7f5 fc65 	bl	8000288 <__aeabi_dsub>
 800a9be:	a364      	add	r3, pc, #400	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x308>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	460f      	mov	r7, r1
 800a9c8:	ec51 0b18 	vmov	r0, r1, d8
 800a9cc:	f7f5 fe14 	bl	80005f8 <__aeabi_dmul>
 800a9d0:	f1bb 0f1f 	cmp.w	fp, #31
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	460d      	mov	r5, r1
 800a9d8:	dc0d      	bgt.n	800a9f6 <__ieee754_rem_pio2+0x1ae>
 800a9da:	4b6e      	ldr	r3, [pc, #440]	; (800ab94 <__ieee754_rem_pio2+0x34c>)
 800a9dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e4:	4543      	cmp	r3, r8
 800a9e6:	d006      	beq.n	800a9f6 <__ieee754_rem_pio2+0x1ae>
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	f7f5 fc4a 	bl	8000288 <__aeabi_dsub>
 800a9f4:	e00f      	b.n	800aa16 <__ieee754_rem_pio2+0x1ce>
 800a9f6:	462b      	mov	r3, r5
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	f7f5 fc43 	bl	8000288 <__aeabi_dsub>
 800aa02:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa06:	9303      	str	r3, [sp, #12]
 800aa08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aa10:	f1b8 0f10 	cmp.w	r8, #16
 800aa14:	dc02      	bgt.n	800aa1c <__ieee754_rem_pio2+0x1d4>
 800aa16:	e9ca 0100 	strd	r0, r1, [sl]
 800aa1a:	e039      	b.n	800aa90 <__ieee754_rem_pio2+0x248>
 800aa1c:	a34e      	add	r3, pc, #312	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x310>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	ec51 0b18 	vmov	r0, r1, d8
 800aa26:	f7f5 fde7 	bl	80005f8 <__aeabi_dmul>
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	460d      	mov	r5, r1
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	4630      	mov	r0, r6
 800aa34:	4639      	mov	r1, r7
 800aa36:	f7f5 fc27 	bl	8000288 <__aeabi_dsub>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4680      	mov	r8, r0
 800aa40:	4689      	mov	r9, r1
 800aa42:	4630      	mov	r0, r6
 800aa44:	4639      	mov	r1, r7
 800aa46:	f7f5 fc1f 	bl	8000288 <__aeabi_dsub>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	f7f5 fc1b 	bl	8000288 <__aeabi_dsub>
 800aa52:	a343      	add	r3, pc, #268	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x318>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	4604      	mov	r4, r0
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	ec51 0b18 	vmov	r0, r1, d8
 800aa60:	f7f5 fdca 	bl	80005f8 <__aeabi_dmul>
 800aa64:	4622      	mov	r2, r4
 800aa66:	462b      	mov	r3, r5
 800aa68:	f7f5 fc0e 	bl	8000288 <__aeabi_dsub>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	f7f5 fc06 	bl	8000288 <__aeabi_dsub>
 800aa7c:	9a03      	ldr	r2, [sp, #12]
 800aa7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b31      	cmp	r3, #49	; 0x31
 800aa86:	dc24      	bgt.n	800aad2 <__ieee754_rem_pio2+0x28a>
 800aa88:	e9ca 0100 	strd	r0, r1, [sl]
 800aa8c:	4646      	mov	r6, r8
 800aa8e:	464f      	mov	r7, r9
 800aa90:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa94:	4630      	mov	r0, r6
 800aa96:	4642      	mov	r2, r8
 800aa98:	464b      	mov	r3, r9
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f5 fbf4 	bl	8000288 <__aeabi_dsub>
 800aaa0:	462b      	mov	r3, r5
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	f7f5 fbf0 	bl	8000288 <__aeabi_dsub>
 800aaa8:	9b02      	ldr	r3, [sp, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aab0:	f6bf af0a 	bge.w	800a8c8 <__ieee754_rem_pio2+0x80>
 800aab4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aab8:	f8ca 3004 	str.w	r3, [sl, #4]
 800aabc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aac0:	f8ca 8000 	str.w	r8, [sl]
 800aac4:	f8ca 0008 	str.w	r0, [sl, #8]
 800aac8:	f8ca 300c 	str.w	r3, [sl, #12]
 800aacc:	f1cb 0b00 	rsb	fp, fp, #0
 800aad0:	e6fa      	b.n	800a8c8 <__ieee754_rem_pio2+0x80>
 800aad2:	a327      	add	r3, pc, #156	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x328>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	ec51 0b18 	vmov	r0, r1, d8
 800aadc:	f7f5 fd8c 	bl	80005f8 <__aeabi_dmul>
 800aae0:	4604      	mov	r4, r0
 800aae2:	460d      	mov	r5, r1
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4640      	mov	r0, r8
 800aaea:	4649      	mov	r1, r9
 800aaec:	f7f5 fbcc 	bl	8000288 <__aeabi_dsub>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	460f      	mov	r7, r1
 800aaf8:	4640      	mov	r0, r8
 800aafa:	4649      	mov	r1, r9
 800aafc:	f7f5 fbc4 	bl	8000288 <__aeabi_dsub>
 800ab00:	4622      	mov	r2, r4
 800ab02:	462b      	mov	r3, r5
 800ab04:	f7f5 fbc0 	bl	8000288 <__aeabi_dsub>
 800ab08:	a31b      	add	r3, pc, #108	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x330>)
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	4604      	mov	r4, r0
 800ab10:	460d      	mov	r5, r1
 800ab12:	ec51 0b18 	vmov	r0, r1, d8
 800ab16:	f7f5 fd6f 	bl	80005f8 <__aeabi_dmul>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	f7f5 fbb3 	bl	8000288 <__aeabi_dsub>
 800ab22:	4604      	mov	r4, r0
 800ab24:	460d      	mov	r5, r1
 800ab26:	e75f      	b.n	800a9e8 <__ieee754_rem_pio2+0x1a0>
 800ab28:	4b1b      	ldr	r3, [pc, #108]	; (800ab98 <__ieee754_rem_pio2+0x350>)
 800ab2a:	4598      	cmp	r8, r3
 800ab2c:	dd36      	ble.n	800ab9c <__ieee754_rem_pio2+0x354>
 800ab2e:	ee10 2a10 	vmov	r2, s0
 800ab32:	462b      	mov	r3, r5
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 fba6 	bl	8000288 <__aeabi_dsub>
 800ab3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab40:	e9ca 0100 	strd	r0, r1, [sl]
 800ab44:	e694      	b.n	800a870 <__ieee754_rem_pio2+0x28>
 800ab46:	bf00      	nop
 800ab48:	54400000 	.word	0x54400000
 800ab4c:	3ff921fb 	.word	0x3ff921fb
 800ab50:	1a626331 	.word	0x1a626331
 800ab54:	3dd0b461 	.word	0x3dd0b461
 800ab58:	1a600000 	.word	0x1a600000
 800ab5c:	3dd0b461 	.word	0x3dd0b461
 800ab60:	2e037073 	.word	0x2e037073
 800ab64:	3ba3198a 	.word	0x3ba3198a
 800ab68:	6dc9c883 	.word	0x6dc9c883
 800ab6c:	3fe45f30 	.word	0x3fe45f30
 800ab70:	2e000000 	.word	0x2e000000
 800ab74:	3ba3198a 	.word	0x3ba3198a
 800ab78:	252049c1 	.word	0x252049c1
 800ab7c:	397b839a 	.word	0x397b839a
 800ab80:	3fe921fb 	.word	0x3fe921fb
 800ab84:	4002d97b 	.word	0x4002d97b
 800ab88:	3ff921fb 	.word	0x3ff921fb
 800ab8c:	413921fb 	.word	0x413921fb
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	0800bad8 	.word	0x0800bad8
 800ab98:	7fefffff 	.word	0x7fefffff
 800ab9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800aba0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800aba4:	ee10 0a10 	vmov	r0, s0
 800aba8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800abac:	ee10 6a10 	vmov	r6, s0
 800abb0:	460f      	mov	r7, r1
 800abb2:	f7f5 ffd1 	bl	8000b58 <__aeabi_d2iz>
 800abb6:	f7f5 fcb5 	bl	8000524 <__aeabi_i2d>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abc6:	f7f5 fb5f 	bl	8000288 <__aeabi_dsub>
 800abca:	4b23      	ldr	r3, [pc, #140]	; (800ac58 <__ieee754_rem_pio2+0x410>)
 800abcc:	2200      	movs	r2, #0
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	460f      	mov	r7, r1
 800abd4:	4606      	mov	r6, r0
 800abd6:	f7f5 ffbf 	bl	8000b58 <__aeabi_d2iz>
 800abda:	f7f5 fca3 	bl	8000524 <__aeabi_i2d>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4630      	mov	r0, r6
 800abe4:	4639      	mov	r1, r7
 800abe6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abea:	f7f5 fb4d 	bl	8000288 <__aeabi_dsub>
 800abee:	4b1a      	ldr	r3, [pc, #104]	; (800ac58 <__ieee754_rem_pio2+0x410>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	f7f5 fd01 	bl	80005f8 <__aeabi_dmul>
 800abf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abfa:	ad04      	add	r5, sp, #16
 800abfc:	f04f 0803 	mov.w	r8, #3
 800ac00:	46a9      	mov	r9, r5
 800ac02:	2600      	movs	r6, #0
 800ac04:	2700      	movs	r7, #0
 800ac06:	4632      	mov	r2, r6
 800ac08:	463b      	mov	r3, r7
 800ac0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ac0e:	46c3      	mov	fp, r8
 800ac10:	3d08      	subs	r5, #8
 800ac12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac16:	f7f5 ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d1f3      	bne.n	800ac06 <__ieee754_rem_pio2+0x3be>
 800ac1e:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <__ieee754_rem_pio2+0x414>)
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	2302      	movs	r3, #2
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	4622      	mov	r2, r4
 800ac28:	465b      	mov	r3, fp
 800ac2a:	4651      	mov	r1, sl
 800ac2c:	4648      	mov	r0, r9
 800ac2e:	f000 f993 	bl	800af58 <__kernel_rem_pio2>
 800ac32:	9b02      	ldr	r3, [sp, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	4683      	mov	fp, r0
 800ac38:	f6bf ae46 	bge.w	800a8c8 <__ieee754_rem_pio2+0x80>
 800ac3c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ac40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac44:	e9ca 2300 	strd	r2, r3, [sl]
 800ac48:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ac4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac50:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ac54:	e73a      	b.n	800aacc <__ieee754_rem_pio2+0x284>
 800ac56:	bf00      	nop
 800ac58:	41700000 	.word	0x41700000
 800ac5c:	0800bb58 	.word	0x0800bb58

0800ac60 <__ieee754_sqrt>:
 800ac60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac64:	ec55 4b10 	vmov	r4, r5, d0
 800ac68:	4e55      	ldr	r6, [pc, #340]	; (800adc0 <__ieee754_sqrt+0x160>)
 800ac6a:	43ae      	bics	r6, r5
 800ac6c:	ee10 0a10 	vmov	r0, s0
 800ac70:	ee10 3a10 	vmov	r3, s0
 800ac74:	462a      	mov	r2, r5
 800ac76:	4629      	mov	r1, r5
 800ac78:	d110      	bne.n	800ac9c <__ieee754_sqrt+0x3c>
 800ac7a:	ee10 2a10 	vmov	r2, s0
 800ac7e:	462b      	mov	r3, r5
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7f5 fafe 	bl	800028c <__adddf3>
 800ac90:	4604      	mov	r4, r0
 800ac92:	460d      	mov	r5, r1
 800ac94:	ec45 4b10 	vmov	d0, r4, r5
 800ac98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac9c:	2d00      	cmp	r5, #0
 800ac9e:	dc10      	bgt.n	800acc2 <__ieee754_sqrt+0x62>
 800aca0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aca4:	4330      	orrs	r0, r6
 800aca6:	d0f5      	beq.n	800ac94 <__ieee754_sqrt+0x34>
 800aca8:	b15d      	cbz	r5, 800acc2 <__ieee754_sqrt+0x62>
 800acaa:	ee10 2a10 	vmov	r2, s0
 800acae:	462b      	mov	r3, r5
 800acb0:	ee10 0a10 	vmov	r0, s0
 800acb4:	f7f5 fae8 	bl	8000288 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	f7f5 fdc6 	bl	800084c <__aeabi_ddiv>
 800acc0:	e7e6      	b.n	800ac90 <__ieee754_sqrt+0x30>
 800acc2:	1512      	asrs	r2, r2, #20
 800acc4:	d074      	beq.n	800adb0 <__ieee754_sqrt+0x150>
 800acc6:	07d4      	lsls	r4, r2, #31
 800acc8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800accc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800acd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800acd4:	bf5e      	ittt	pl
 800acd6:	0fda      	lsrpl	r2, r3, #31
 800acd8:	005b      	lslpl	r3, r3, #1
 800acda:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800acde:	2400      	movs	r4, #0
 800ace0:	0fda      	lsrs	r2, r3, #31
 800ace2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ace6:	107f      	asrs	r7, r7, #1
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	2516      	movs	r5, #22
 800acec:	4620      	mov	r0, r4
 800acee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800acf2:	1886      	adds	r6, r0, r2
 800acf4:	428e      	cmp	r6, r1
 800acf6:	bfde      	ittt	le
 800acf8:	1b89      	suble	r1, r1, r6
 800acfa:	18b0      	addle	r0, r6, r2
 800acfc:	18a4      	addle	r4, r4, r2
 800acfe:	0049      	lsls	r1, r1, #1
 800ad00:	3d01      	subs	r5, #1
 800ad02:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ad06:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ad0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad0e:	d1f0      	bne.n	800acf2 <__ieee754_sqrt+0x92>
 800ad10:	462a      	mov	r2, r5
 800ad12:	f04f 0e20 	mov.w	lr, #32
 800ad16:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ad1a:	4281      	cmp	r1, r0
 800ad1c:	eb06 0c05 	add.w	ip, r6, r5
 800ad20:	dc02      	bgt.n	800ad28 <__ieee754_sqrt+0xc8>
 800ad22:	d113      	bne.n	800ad4c <__ieee754_sqrt+0xec>
 800ad24:	459c      	cmp	ip, r3
 800ad26:	d811      	bhi.n	800ad4c <__ieee754_sqrt+0xec>
 800ad28:	f1bc 0f00 	cmp.w	ip, #0
 800ad2c:	eb0c 0506 	add.w	r5, ip, r6
 800ad30:	da43      	bge.n	800adba <__ieee754_sqrt+0x15a>
 800ad32:	2d00      	cmp	r5, #0
 800ad34:	db41      	blt.n	800adba <__ieee754_sqrt+0x15a>
 800ad36:	f100 0801 	add.w	r8, r0, #1
 800ad3a:	1a09      	subs	r1, r1, r0
 800ad3c:	459c      	cmp	ip, r3
 800ad3e:	bf88      	it	hi
 800ad40:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800ad44:	eba3 030c 	sub.w	r3, r3, ip
 800ad48:	4432      	add	r2, r6
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ad50:	f1be 0e01 	subs.w	lr, lr, #1
 800ad54:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ad58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad5c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ad60:	d1db      	bne.n	800ad1a <__ieee754_sqrt+0xba>
 800ad62:	430b      	orrs	r3, r1
 800ad64:	d006      	beq.n	800ad74 <__ieee754_sqrt+0x114>
 800ad66:	1c50      	adds	r0, r2, #1
 800ad68:	bf13      	iteet	ne
 800ad6a:	3201      	addne	r2, #1
 800ad6c:	3401      	addeq	r4, #1
 800ad6e:	4672      	moveq	r2, lr
 800ad70:	f022 0201 	bicne.w	r2, r2, #1
 800ad74:	1063      	asrs	r3, r4, #1
 800ad76:	0852      	lsrs	r2, r2, #1
 800ad78:	07e1      	lsls	r1, r4, #31
 800ad7a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ad7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ad82:	bf48      	it	mi
 800ad84:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ad88:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ad8c:	4614      	mov	r4, r2
 800ad8e:	e781      	b.n	800ac94 <__ieee754_sqrt+0x34>
 800ad90:	0ad9      	lsrs	r1, r3, #11
 800ad92:	3815      	subs	r0, #21
 800ad94:	055b      	lsls	r3, r3, #21
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d0fa      	beq.n	800ad90 <__ieee754_sqrt+0x130>
 800ad9a:	02cd      	lsls	r5, r1, #11
 800ad9c:	d50a      	bpl.n	800adb4 <__ieee754_sqrt+0x154>
 800ad9e:	f1c2 0420 	rsb	r4, r2, #32
 800ada2:	fa23 f404 	lsr.w	r4, r3, r4
 800ada6:	1e55      	subs	r5, r2, #1
 800ada8:	4093      	lsls	r3, r2
 800adaa:	4321      	orrs	r1, r4
 800adac:	1b42      	subs	r2, r0, r5
 800adae:	e78a      	b.n	800acc6 <__ieee754_sqrt+0x66>
 800adb0:	4610      	mov	r0, r2
 800adb2:	e7f0      	b.n	800ad96 <__ieee754_sqrt+0x136>
 800adb4:	0049      	lsls	r1, r1, #1
 800adb6:	3201      	adds	r2, #1
 800adb8:	e7ef      	b.n	800ad9a <__ieee754_sqrt+0x13a>
 800adba:	4680      	mov	r8, r0
 800adbc:	e7bd      	b.n	800ad3a <__ieee754_sqrt+0xda>
 800adbe:	bf00      	nop
 800adc0:	7ff00000 	.word	0x7ff00000
 800adc4:	00000000 	.word	0x00000000

0800adc8 <__kernel_cos>:
 800adc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	ec57 6b10 	vmov	r6, r7, d0
 800add0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800add4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800add8:	ed8d 1b00 	vstr	d1, [sp]
 800addc:	da07      	bge.n	800adee <__kernel_cos+0x26>
 800adde:	ee10 0a10 	vmov	r0, s0
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 feb8 	bl	8000b58 <__aeabi_d2iz>
 800ade8:	2800      	cmp	r0, #0
 800adea:	f000 8088 	beq.w	800aefe <__kernel_cos+0x136>
 800adee:	4632      	mov	r2, r6
 800adf0:	463b      	mov	r3, r7
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 fbff 	bl	80005f8 <__aeabi_dmul>
 800adfa:	4b51      	ldr	r3, [pc, #324]	; (800af40 <__kernel_cos+0x178>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	460d      	mov	r5, r1
 800ae02:	f7f5 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ae06:	a340      	add	r3, pc, #256	; (adr r3, 800af08 <__kernel_cos+0x140>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	468b      	mov	fp, r1
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ae18:	a33d      	add	r3, pc, #244	; (adr r3, 800af10 <__kernel_cos+0x148>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	f7f5 fa35 	bl	800028c <__adddf3>
 800ae22:	4622      	mov	r2, r4
 800ae24:	462b      	mov	r3, r5
 800ae26:	f7f5 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ae2a:	a33b      	add	r3, pc, #236	; (adr r3, 800af18 <__kernel_cos+0x150>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f7f5 fa2a 	bl	8000288 <__aeabi_dsub>
 800ae34:	4622      	mov	r2, r4
 800ae36:	462b      	mov	r3, r5
 800ae38:	f7f5 fbde 	bl	80005f8 <__aeabi_dmul>
 800ae3c:	a338      	add	r3, pc, #224	; (adr r3, 800af20 <__kernel_cos+0x158>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 fa23 	bl	800028c <__adddf3>
 800ae46:	4622      	mov	r2, r4
 800ae48:	462b      	mov	r3, r5
 800ae4a:	f7f5 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ae4e:	a336      	add	r3, pc, #216	; (adr r3, 800af28 <__kernel_cos+0x160>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f7f5 fa18 	bl	8000288 <__aeabi_dsub>
 800ae58:	4622      	mov	r2, r4
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	f7f5 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ae60:	a333      	add	r3, pc, #204	; (adr r3, 800af30 <__kernel_cos+0x168>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 fa11 	bl	800028c <__adddf3>
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	f7f5 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ae72:	4622      	mov	r2, r4
 800ae74:	462b      	mov	r3, r5
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae7e:	4604      	mov	r4, r0
 800ae80:	460d      	mov	r5, r1
 800ae82:	4630      	mov	r0, r6
 800ae84:	4639      	mov	r1, r7
 800ae86:	f7f5 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4620      	mov	r0, r4
 800ae92:	f7f5 f9f9 	bl	8000288 <__aeabi_dsub>
 800ae96:	4b2b      	ldr	r3, [pc, #172]	; (800af44 <__kernel_cos+0x17c>)
 800ae98:	4598      	cmp	r8, r3
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	dc10      	bgt.n	800aec2 <__kernel_cos+0xfa>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4650      	mov	r0, sl
 800aea6:	4659      	mov	r1, fp
 800aea8:	f7f5 f9ee 	bl	8000288 <__aeabi_dsub>
 800aeac:	460b      	mov	r3, r1
 800aeae:	4926      	ldr	r1, [pc, #152]	; (800af48 <__kernel_cos+0x180>)
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	f7f5 f9e8 	bl	8000288 <__aeabi_dsub>
 800aeb8:	ec41 0b10 	vmov	d0, r0, r1
 800aebc:	b003      	add	sp, #12
 800aebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec2:	4b22      	ldr	r3, [pc, #136]	; (800af4c <__kernel_cos+0x184>)
 800aec4:	4920      	ldr	r1, [pc, #128]	; (800af48 <__kernel_cos+0x180>)
 800aec6:	4598      	cmp	r8, r3
 800aec8:	bfcc      	ite	gt
 800aeca:	4d21      	ldrgt	r5, [pc, #132]	; (800af50 <__kernel_cos+0x188>)
 800aecc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800aed0:	2400      	movs	r4, #0
 800aed2:	4622      	mov	r2, r4
 800aed4:	462b      	mov	r3, r5
 800aed6:	2000      	movs	r0, #0
 800aed8:	f7f5 f9d6 	bl	8000288 <__aeabi_dsub>
 800aedc:	4622      	mov	r2, r4
 800aede:	4680      	mov	r8, r0
 800aee0:	4689      	mov	r9, r1
 800aee2:	462b      	mov	r3, r5
 800aee4:	4650      	mov	r0, sl
 800aee6:	4659      	mov	r1, fp
 800aee8:	f7f5 f9ce 	bl	8000288 <__aeabi_dsub>
 800aeec:	4632      	mov	r2, r6
 800aeee:	463b      	mov	r3, r7
 800aef0:	f7f5 f9ca 	bl	8000288 <__aeabi_dsub>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4640      	mov	r0, r8
 800aefa:	4649      	mov	r1, r9
 800aefc:	e7da      	b.n	800aeb4 <__kernel_cos+0xec>
 800aefe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800af38 <__kernel_cos+0x170>
 800af02:	e7db      	b.n	800aebc <__kernel_cos+0xf4>
 800af04:	f3af 8000 	nop.w
 800af08:	be8838d4 	.word	0xbe8838d4
 800af0c:	bda8fae9 	.word	0xbda8fae9
 800af10:	bdb4b1c4 	.word	0xbdb4b1c4
 800af14:	3e21ee9e 	.word	0x3e21ee9e
 800af18:	809c52ad 	.word	0x809c52ad
 800af1c:	3e927e4f 	.word	0x3e927e4f
 800af20:	19cb1590 	.word	0x19cb1590
 800af24:	3efa01a0 	.word	0x3efa01a0
 800af28:	16c15177 	.word	0x16c15177
 800af2c:	3f56c16c 	.word	0x3f56c16c
 800af30:	5555554c 	.word	0x5555554c
 800af34:	3fa55555 	.word	0x3fa55555
 800af38:	00000000 	.word	0x00000000
 800af3c:	3ff00000 	.word	0x3ff00000
 800af40:	3fe00000 	.word	0x3fe00000
 800af44:	3fd33332 	.word	0x3fd33332
 800af48:	3ff00000 	.word	0x3ff00000
 800af4c:	3fe90000 	.word	0x3fe90000
 800af50:	3fd20000 	.word	0x3fd20000
 800af54:	00000000 	.word	0x00000000

0800af58 <__kernel_rem_pio2>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	ed2d 8b02 	vpush	{d8}
 800af60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800af64:	f112 0f14 	cmn.w	r2, #20
 800af68:	9308      	str	r3, [sp, #32]
 800af6a:	9101      	str	r1, [sp, #4]
 800af6c:	4bc4      	ldr	r3, [pc, #784]	; (800b280 <__kernel_rem_pio2+0x328>)
 800af6e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800af70:	900b      	str	r0, [sp, #44]	; 0x2c
 800af72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af76:	9302      	str	r3, [sp, #8]
 800af78:	9b08      	ldr	r3, [sp, #32]
 800af7a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800af7e:	bfa8      	it	ge
 800af80:	1ed4      	subge	r4, r2, #3
 800af82:	9306      	str	r3, [sp, #24]
 800af84:	bfb2      	itee	lt
 800af86:	2400      	movlt	r4, #0
 800af88:	2318      	movge	r3, #24
 800af8a:	fb94 f4f3 	sdivge	r4, r4, r3
 800af8e:	f06f 0317 	mvn.w	r3, #23
 800af92:	fb04 3303 	mla	r3, r4, r3, r3
 800af96:	eb03 0a02 	add.w	sl, r3, r2
 800af9a:	9b02      	ldr	r3, [sp, #8]
 800af9c:	9a06      	ldr	r2, [sp, #24]
 800af9e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b270 <__kernel_rem_pio2+0x318>
 800afa2:	eb03 0802 	add.w	r8, r3, r2
 800afa6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800afa8:	1aa7      	subs	r7, r4, r2
 800afaa:	ae22      	add	r6, sp, #136	; 0x88
 800afac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800afb0:	2500      	movs	r5, #0
 800afb2:	4545      	cmp	r5, r8
 800afb4:	dd13      	ble.n	800afde <__kernel_rem_pio2+0x86>
 800afb6:	9b08      	ldr	r3, [sp, #32]
 800afb8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b270 <__kernel_rem_pio2+0x318>
 800afbc:	aa22      	add	r2, sp, #136	; 0x88
 800afbe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800afc2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800afc6:	f04f 0800 	mov.w	r8, #0
 800afca:	9b02      	ldr	r3, [sp, #8]
 800afcc:	4598      	cmp	r8, r3
 800afce:	dc2f      	bgt.n	800b030 <__kernel_rem_pio2+0xd8>
 800afd0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800afd4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800afd8:	462f      	mov	r7, r5
 800afda:	2600      	movs	r6, #0
 800afdc:	e01b      	b.n	800b016 <__kernel_rem_pio2+0xbe>
 800afde:	42ef      	cmn	r7, r5
 800afe0:	d407      	bmi.n	800aff2 <__kernel_rem_pio2+0x9a>
 800afe2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800afe6:	f7f5 fa9d 	bl	8000524 <__aeabi_i2d>
 800afea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800afee:	3501      	adds	r5, #1
 800aff0:	e7df      	b.n	800afb2 <__kernel_rem_pio2+0x5a>
 800aff2:	ec51 0b18 	vmov	r0, r1, d8
 800aff6:	e7f8      	b.n	800afea <__kernel_rem_pio2+0x92>
 800aff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800affc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b000:	f7f5 fafa 	bl	80005f8 <__aeabi_dmul>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b00c:	f7f5 f93e 	bl	800028c <__adddf3>
 800b010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b014:	3601      	adds	r6, #1
 800b016:	9b06      	ldr	r3, [sp, #24]
 800b018:	429e      	cmp	r6, r3
 800b01a:	f1a7 0708 	sub.w	r7, r7, #8
 800b01e:	ddeb      	ble.n	800aff8 <__kernel_rem_pio2+0xa0>
 800b020:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b024:	f108 0801 	add.w	r8, r8, #1
 800b028:	ecab 7b02 	vstmia	fp!, {d7}
 800b02c:	3508      	adds	r5, #8
 800b02e:	e7cc      	b.n	800afca <__kernel_rem_pio2+0x72>
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	aa0e      	add	r2, sp, #56	; 0x38
 800b034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b038:	930d      	str	r3, [sp, #52]	; 0x34
 800b03a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b03c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b040:	9c02      	ldr	r4, [sp, #8]
 800b042:	930c      	str	r3, [sp, #48]	; 0x30
 800b044:	00e3      	lsls	r3, r4, #3
 800b046:	930a      	str	r3, [sp, #40]	; 0x28
 800b048:	ab9a      	add	r3, sp, #616	; 0x268
 800b04a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b04e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b052:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b056:	ab72      	add	r3, sp, #456	; 0x1c8
 800b058:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b05c:	46c3      	mov	fp, r8
 800b05e:	46a1      	mov	r9, r4
 800b060:	f1b9 0f00 	cmp.w	r9, #0
 800b064:	f1a5 0508 	sub.w	r5, r5, #8
 800b068:	dc77      	bgt.n	800b15a <__kernel_rem_pio2+0x202>
 800b06a:	ec47 6b10 	vmov	d0, r6, r7
 800b06e:	4650      	mov	r0, sl
 800b070:	f000 fc4e 	bl	800b910 <scalbn>
 800b074:	ec57 6b10 	vmov	r6, r7, d0
 800b078:	2200      	movs	r2, #0
 800b07a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b07e:	ee10 0a10 	vmov	r0, s0
 800b082:	4639      	mov	r1, r7
 800b084:	f7f5 fab8 	bl	80005f8 <__aeabi_dmul>
 800b088:	ec41 0b10 	vmov	d0, r0, r1
 800b08c:	f000 fbb8 	bl	800b800 <floor>
 800b090:	4b7c      	ldr	r3, [pc, #496]	; (800b284 <__kernel_rem_pio2+0x32c>)
 800b092:	ec51 0b10 	vmov	r0, r1, d0
 800b096:	2200      	movs	r2, #0
 800b098:	f7f5 faae 	bl	80005f8 <__aeabi_dmul>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 f8f0 	bl	8000288 <__aeabi_dsub>
 800b0a8:	460f      	mov	r7, r1
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	f7f5 fd54 	bl	8000b58 <__aeabi_d2iz>
 800b0b0:	9004      	str	r0, [sp, #16]
 800b0b2:	f7f5 fa37 	bl	8000524 <__aeabi_i2d>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	4639      	mov	r1, r7
 800b0be:	f7f5 f8e3 	bl	8000288 <__aeabi_dsub>
 800b0c2:	f1ba 0f00 	cmp.w	sl, #0
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	dd6d      	ble.n	800b1a8 <__kernel_rem_pio2+0x250>
 800b0cc:	1e62      	subs	r2, r4, #1
 800b0ce:	ab0e      	add	r3, sp, #56	; 0x38
 800b0d0:	9d04      	ldr	r5, [sp, #16]
 800b0d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b0d6:	f1ca 0118 	rsb	r1, sl, #24
 800b0da:	fa40 f301 	asr.w	r3, r0, r1
 800b0de:	441d      	add	r5, r3
 800b0e0:	408b      	lsls	r3, r1
 800b0e2:	1ac0      	subs	r0, r0, r3
 800b0e4:	ab0e      	add	r3, sp, #56	; 0x38
 800b0e6:	9504      	str	r5, [sp, #16]
 800b0e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b0ec:	f1ca 0317 	rsb	r3, sl, #23
 800b0f0:	fa40 fb03 	asr.w	fp, r0, r3
 800b0f4:	f1bb 0f00 	cmp.w	fp, #0
 800b0f8:	dd65      	ble.n	800b1c6 <__kernel_rem_pio2+0x26e>
 800b0fa:	9b04      	ldr	r3, [sp, #16]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	3301      	adds	r3, #1
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	4615      	mov	r5, r2
 800b104:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b108:	4294      	cmp	r4, r2
 800b10a:	f300 809c 	bgt.w	800b246 <__kernel_rem_pio2+0x2ee>
 800b10e:	f1ba 0f00 	cmp.w	sl, #0
 800b112:	dd07      	ble.n	800b124 <__kernel_rem_pio2+0x1cc>
 800b114:	f1ba 0f01 	cmp.w	sl, #1
 800b118:	f000 80c0 	beq.w	800b29c <__kernel_rem_pio2+0x344>
 800b11c:	f1ba 0f02 	cmp.w	sl, #2
 800b120:	f000 80c6 	beq.w	800b2b0 <__kernel_rem_pio2+0x358>
 800b124:	f1bb 0f02 	cmp.w	fp, #2
 800b128:	d14d      	bne.n	800b1c6 <__kernel_rem_pio2+0x26e>
 800b12a:	4632      	mov	r2, r6
 800b12c:	463b      	mov	r3, r7
 800b12e:	4956      	ldr	r1, [pc, #344]	; (800b288 <__kernel_rem_pio2+0x330>)
 800b130:	2000      	movs	r0, #0
 800b132:	f7f5 f8a9 	bl	8000288 <__aeabi_dsub>
 800b136:	4606      	mov	r6, r0
 800b138:	460f      	mov	r7, r1
 800b13a:	2d00      	cmp	r5, #0
 800b13c:	d043      	beq.n	800b1c6 <__kernel_rem_pio2+0x26e>
 800b13e:	4650      	mov	r0, sl
 800b140:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b278 <__kernel_rem_pio2+0x320>
 800b144:	f000 fbe4 	bl	800b910 <scalbn>
 800b148:	4630      	mov	r0, r6
 800b14a:	4639      	mov	r1, r7
 800b14c:	ec53 2b10 	vmov	r2, r3, d0
 800b150:	f7f5 f89a 	bl	8000288 <__aeabi_dsub>
 800b154:	4606      	mov	r6, r0
 800b156:	460f      	mov	r7, r1
 800b158:	e035      	b.n	800b1c6 <__kernel_rem_pio2+0x26e>
 800b15a:	4b4c      	ldr	r3, [pc, #304]	; (800b28c <__kernel_rem_pio2+0x334>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	4630      	mov	r0, r6
 800b160:	4639      	mov	r1, r7
 800b162:	f7f5 fa49 	bl	80005f8 <__aeabi_dmul>
 800b166:	f7f5 fcf7 	bl	8000b58 <__aeabi_d2iz>
 800b16a:	f7f5 f9db 	bl	8000524 <__aeabi_i2d>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	ec43 2b18 	vmov	d8, r2, r3
 800b176:	4b46      	ldr	r3, [pc, #280]	; (800b290 <__kernel_rem_pio2+0x338>)
 800b178:	2200      	movs	r2, #0
 800b17a:	f7f5 fa3d 	bl	80005f8 <__aeabi_dmul>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4630      	mov	r0, r6
 800b184:	4639      	mov	r1, r7
 800b186:	f7f5 f87f 	bl	8000288 <__aeabi_dsub>
 800b18a:	f7f5 fce5 	bl	8000b58 <__aeabi_d2iz>
 800b18e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b192:	f84b 0b04 	str.w	r0, [fp], #4
 800b196:	ec51 0b18 	vmov	r0, r1, d8
 800b19a:	f7f5 f877 	bl	800028c <__adddf3>
 800b19e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	460f      	mov	r7, r1
 800b1a6:	e75b      	b.n	800b060 <__kernel_rem_pio2+0x108>
 800b1a8:	d106      	bne.n	800b1b8 <__kernel_rem_pio2+0x260>
 800b1aa:	1e63      	subs	r3, r4, #1
 800b1ac:	aa0e      	add	r2, sp, #56	; 0x38
 800b1ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b1b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b1b6:	e79d      	b.n	800b0f4 <__kernel_rem_pio2+0x19c>
 800b1b8:	4b36      	ldr	r3, [pc, #216]	; (800b294 <__kernel_rem_pio2+0x33c>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f7f5 fca2 	bl	8000b04 <__aeabi_dcmpge>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d13d      	bne.n	800b240 <__kernel_rem_pio2+0x2e8>
 800b1c4:	4683      	mov	fp, r0
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	4639      	mov	r1, r7
 800b1ce:	f7f5 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	f000 80c0 	beq.w	800b358 <__kernel_rem_pio2+0x400>
 800b1d8:	1e65      	subs	r5, r4, #1
 800b1da:	462b      	mov	r3, r5
 800b1dc:	2200      	movs	r2, #0
 800b1de:	9902      	ldr	r1, [sp, #8]
 800b1e0:	428b      	cmp	r3, r1
 800b1e2:	da6c      	bge.n	800b2be <__kernel_rem_pio2+0x366>
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	f000 8089 	beq.w	800b2fc <__kernel_rem_pio2+0x3a4>
 800b1ea:	ab0e      	add	r3, sp, #56	; 0x38
 800b1ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800b1f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 80ad 	beq.w	800b354 <__kernel_rem_pio2+0x3fc>
 800b1fa:	4650      	mov	r0, sl
 800b1fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b278 <__kernel_rem_pio2+0x320>
 800b200:	f000 fb86 	bl	800b910 <scalbn>
 800b204:	ab9a      	add	r3, sp, #616	; 0x268
 800b206:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b20a:	ec57 6b10 	vmov	r6, r7, d0
 800b20e:	00ec      	lsls	r4, r5, #3
 800b210:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b214:	46aa      	mov	sl, r5
 800b216:	f1ba 0f00 	cmp.w	sl, #0
 800b21a:	f280 80d6 	bge.w	800b3ca <__kernel_rem_pio2+0x472>
 800b21e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b270 <__kernel_rem_pio2+0x318>
 800b222:	462e      	mov	r6, r5
 800b224:	2e00      	cmp	r6, #0
 800b226:	f2c0 8104 	blt.w	800b432 <__kernel_rem_pio2+0x4da>
 800b22a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b22c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b230:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b298 <__kernel_rem_pio2+0x340>
 800b234:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b238:	f04f 0800 	mov.w	r8, #0
 800b23c:	1baf      	subs	r7, r5, r6
 800b23e:	e0ea      	b.n	800b416 <__kernel_rem_pio2+0x4be>
 800b240:	f04f 0b02 	mov.w	fp, #2
 800b244:	e759      	b.n	800b0fa <__kernel_rem_pio2+0x1a2>
 800b246:	f8d8 3000 	ldr.w	r3, [r8]
 800b24a:	b955      	cbnz	r5, 800b262 <__kernel_rem_pio2+0x30a>
 800b24c:	b123      	cbz	r3, 800b258 <__kernel_rem_pio2+0x300>
 800b24e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b252:	f8c8 3000 	str.w	r3, [r8]
 800b256:	2301      	movs	r3, #1
 800b258:	3201      	adds	r2, #1
 800b25a:	f108 0804 	add.w	r8, r8, #4
 800b25e:	461d      	mov	r5, r3
 800b260:	e752      	b.n	800b108 <__kernel_rem_pio2+0x1b0>
 800b262:	1acb      	subs	r3, r1, r3
 800b264:	f8c8 3000 	str.w	r3, [r8]
 800b268:	462b      	mov	r3, r5
 800b26a:	e7f5      	b.n	800b258 <__kernel_rem_pio2+0x300>
 800b26c:	f3af 8000 	nop.w
	...
 800b27c:	3ff00000 	.word	0x3ff00000
 800b280:	0800bca0 	.word	0x0800bca0
 800b284:	40200000 	.word	0x40200000
 800b288:	3ff00000 	.word	0x3ff00000
 800b28c:	3e700000 	.word	0x3e700000
 800b290:	41700000 	.word	0x41700000
 800b294:	3fe00000 	.word	0x3fe00000
 800b298:	0800bc60 	.word	0x0800bc60
 800b29c:	1e62      	subs	r2, r4, #1
 800b29e:	ab0e      	add	r3, sp, #56	; 0x38
 800b2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b2a8:	a90e      	add	r1, sp, #56	; 0x38
 800b2aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b2ae:	e739      	b.n	800b124 <__kernel_rem_pio2+0x1cc>
 800b2b0:	1e62      	subs	r2, r4, #1
 800b2b2:	ab0e      	add	r3, sp, #56	; 0x38
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b2bc:	e7f4      	b.n	800b2a8 <__kernel_rem_pio2+0x350>
 800b2be:	a90e      	add	r1, sp, #56	; 0x38
 800b2c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	e789      	b.n	800b1de <__kernel_rem_pio2+0x286>
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	d0fa      	beq.n	800b2ca <__kernel_rem_pio2+0x372>
 800b2d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b2da:	446a      	add	r2, sp
 800b2dc:	3a98      	subs	r2, #152	; 0x98
 800b2de:	920a      	str	r2, [sp, #40]	; 0x28
 800b2e0:	9a08      	ldr	r2, [sp, #32]
 800b2e2:	18e3      	adds	r3, r4, r3
 800b2e4:	18a5      	adds	r5, r4, r2
 800b2e6:	aa22      	add	r2, sp, #136	; 0x88
 800b2e8:	f104 0801 	add.w	r8, r4, #1
 800b2ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	9b04      	ldr	r3, [sp, #16]
 800b2f4:	4543      	cmp	r3, r8
 800b2f6:	da04      	bge.n	800b302 <__kernel_rem_pio2+0x3aa>
 800b2f8:	461c      	mov	r4, r3
 800b2fa:	e6a3      	b.n	800b044 <__kernel_rem_pio2+0xec>
 800b2fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2fe:	2301      	movs	r3, #1
 800b300:	e7e4      	b.n	800b2cc <__kernel_rem_pio2+0x374>
 800b302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b304:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b308:	f7f5 f90c 	bl	8000524 <__aeabi_i2d>
 800b30c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b312:	46ab      	mov	fp, r5
 800b314:	461c      	mov	r4, r3
 800b316:	f04f 0900 	mov.w	r9, #0
 800b31a:	2600      	movs	r6, #0
 800b31c:	2700      	movs	r7, #0
 800b31e:	9b06      	ldr	r3, [sp, #24]
 800b320:	4599      	cmp	r9, r3
 800b322:	dd06      	ble.n	800b332 <__kernel_rem_pio2+0x3da>
 800b324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b326:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b32a:	f108 0801 	add.w	r8, r8, #1
 800b32e:	930a      	str	r3, [sp, #40]	; 0x28
 800b330:	e7df      	b.n	800b2f2 <__kernel_rem_pio2+0x39a>
 800b332:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b336:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b33a:	f7f5 f95d 	bl	80005f8 <__aeabi_dmul>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4630      	mov	r0, r6
 800b344:	4639      	mov	r1, r7
 800b346:	f7f4 ffa1 	bl	800028c <__adddf3>
 800b34a:	f109 0901 	add.w	r9, r9, #1
 800b34e:	4606      	mov	r6, r0
 800b350:	460f      	mov	r7, r1
 800b352:	e7e4      	b.n	800b31e <__kernel_rem_pio2+0x3c6>
 800b354:	3d01      	subs	r5, #1
 800b356:	e748      	b.n	800b1ea <__kernel_rem_pio2+0x292>
 800b358:	ec47 6b10 	vmov	d0, r6, r7
 800b35c:	f1ca 0000 	rsb	r0, sl, #0
 800b360:	f000 fad6 	bl	800b910 <scalbn>
 800b364:	ec57 6b10 	vmov	r6, r7, d0
 800b368:	4ba0      	ldr	r3, [pc, #640]	; (800b5ec <__kernel_rem_pio2+0x694>)
 800b36a:	ee10 0a10 	vmov	r0, s0
 800b36e:	2200      	movs	r2, #0
 800b370:	4639      	mov	r1, r7
 800b372:	f7f5 fbc7 	bl	8000b04 <__aeabi_dcmpge>
 800b376:	b1f8      	cbz	r0, 800b3b8 <__kernel_rem_pio2+0x460>
 800b378:	4b9d      	ldr	r3, [pc, #628]	; (800b5f0 <__kernel_rem_pio2+0x698>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	f7f5 fbe8 	bl	8000b58 <__aeabi_d2iz>
 800b388:	4680      	mov	r8, r0
 800b38a:	f7f5 f8cb 	bl	8000524 <__aeabi_i2d>
 800b38e:	4b97      	ldr	r3, [pc, #604]	; (800b5ec <__kernel_rem_pio2+0x694>)
 800b390:	2200      	movs	r2, #0
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	460b      	mov	r3, r1
 800b398:	4602      	mov	r2, r0
 800b39a:	4639      	mov	r1, r7
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7f4 ff73 	bl	8000288 <__aeabi_dsub>
 800b3a2:	f7f5 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800b3a6:	1c65      	adds	r5, r4, #1
 800b3a8:	ab0e      	add	r3, sp, #56	; 0x38
 800b3aa:	f10a 0a18 	add.w	sl, sl, #24
 800b3ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b3b2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b3b6:	e720      	b.n	800b1fa <__kernel_rem_pio2+0x2a2>
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	f7f5 fbcc 	bl	8000b58 <__aeabi_d2iz>
 800b3c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b3c2:	4625      	mov	r5, r4
 800b3c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b3c8:	e717      	b.n	800b1fa <__kernel_rem_pio2+0x2a2>
 800b3ca:	ab0e      	add	r3, sp, #56	; 0x38
 800b3cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b3d0:	f7f5 f8a8 	bl	8000524 <__aeabi_i2d>
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	f7f5 f90e 	bl	80005f8 <__aeabi_dmul>
 800b3dc:	4b84      	ldr	r3, [pc, #528]	; (800b5f0 <__kernel_rem_pio2+0x698>)
 800b3de:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f5 f906 	bl	80005f8 <__aeabi_dmul>
 800b3ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	e70f      	b.n	800b216 <__kernel_rem_pio2+0x2be>
 800b3f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b3fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b3fe:	f7f5 f8fb 	bl	80005f8 <__aeabi_dmul>
 800b402:	4602      	mov	r2, r0
 800b404:	460b      	mov	r3, r1
 800b406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b40a:	f7f4 ff3f 	bl	800028c <__adddf3>
 800b40e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b412:	f108 0801 	add.w	r8, r8, #1
 800b416:	9b02      	ldr	r3, [sp, #8]
 800b418:	4598      	cmp	r8, r3
 800b41a:	dc01      	bgt.n	800b420 <__kernel_rem_pio2+0x4c8>
 800b41c:	45b8      	cmp	r8, r7
 800b41e:	ddea      	ble.n	800b3f6 <__kernel_rem_pio2+0x49e>
 800b420:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b424:	ab4a      	add	r3, sp, #296	; 0x128
 800b426:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b42a:	ed87 7b00 	vstr	d7, [r7]
 800b42e:	3e01      	subs	r6, #1
 800b430:	e6f8      	b.n	800b224 <__kernel_rem_pio2+0x2cc>
 800b432:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b434:	2b02      	cmp	r3, #2
 800b436:	dc0b      	bgt.n	800b450 <__kernel_rem_pio2+0x4f8>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	dc35      	bgt.n	800b4a8 <__kernel_rem_pio2+0x550>
 800b43c:	d059      	beq.n	800b4f2 <__kernel_rem_pio2+0x59a>
 800b43e:	9b04      	ldr	r3, [sp, #16]
 800b440:	f003 0007 	and.w	r0, r3, #7
 800b444:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b448:	ecbd 8b02 	vpop	{d8}
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b452:	2b03      	cmp	r3, #3
 800b454:	d1f3      	bne.n	800b43e <__kernel_rem_pio2+0x4e6>
 800b456:	ab4a      	add	r3, sp, #296	; 0x128
 800b458:	4423      	add	r3, r4
 800b45a:	9306      	str	r3, [sp, #24]
 800b45c:	461c      	mov	r4, r3
 800b45e:	469a      	mov	sl, r3
 800b460:	9502      	str	r5, [sp, #8]
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f1aa 0a08 	sub.w	sl, sl, #8
 800b46a:	dc6b      	bgt.n	800b544 <__kernel_rem_pio2+0x5ec>
 800b46c:	46aa      	mov	sl, r5
 800b46e:	f1ba 0f01 	cmp.w	sl, #1
 800b472:	f1a4 0408 	sub.w	r4, r4, #8
 800b476:	f300 8085 	bgt.w	800b584 <__kernel_rem_pio2+0x62c>
 800b47a:	9c06      	ldr	r4, [sp, #24]
 800b47c:	2000      	movs	r0, #0
 800b47e:	3408      	adds	r4, #8
 800b480:	2100      	movs	r1, #0
 800b482:	2d01      	cmp	r5, #1
 800b484:	f300 809d 	bgt.w	800b5c2 <__kernel_rem_pio2+0x66a>
 800b488:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b48c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b490:	f1bb 0f00 	cmp.w	fp, #0
 800b494:	f040 809b 	bne.w	800b5ce <__kernel_rem_pio2+0x676>
 800b498:	9b01      	ldr	r3, [sp, #4]
 800b49a:	e9c3 5600 	strd	r5, r6, [r3]
 800b49e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b4a2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b4a6:	e7ca      	b.n	800b43e <__kernel_rem_pio2+0x4e6>
 800b4a8:	3408      	adds	r4, #8
 800b4aa:	ab4a      	add	r3, sp, #296	; 0x128
 800b4ac:	441c      	add	r4, r3
 800b4ae:	462e      	mov	r6, r5
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	2e00      	cmp	r6, #0
 800b4b6:	da36      	bge.n	800b526 <__kernel_rem_pio2+0x5ce>
 800b4b8:	f1bb 0f00 	cmp.w	fp, #0
 800b4bc:	d039      	beq.n	800b532 <__kernel_rem_pio2+0x5da>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4c4:	9c01      	ldr	r4, [sp, #4]
 800b4c6:	e9c4 2300 	strd	r2, r3, [r4]
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b4d2:	f7f4 fed9 	bl	8000288 <__aeabi_dsub>
 800b4d6:	ae4c      	add	r6, sp, #304	; 0x130
 800b4d8:	2401      	movs	r4, #1
 800b4da:	42a5      	cmp	r5, r4
 800b4dc:	da2c      	bge.n	800b538 <__kernel_rem_pio2+0x5e0>
 800b4de:	f1bb 0f00 	cmp.w	fp, #0
 800b4e2:	d002      	beq.n	800b4ea <__kernel_rem_pio2+0x592>
 800b4e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b4f0:	e7a5      	b.n	800b43e <__kernel_rem_pio2+0x4e6>
 800b4f2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b4f6:	eb0d 0403 	add.w	r4, sp, r3
 800b4fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b4fe:	2000      	movs	r0, #0
 800b500:	2100      	movs	r1, #0
 800b502:	2d00      	cmp	r5, #0
 800b504:	da09      	bge.n	800b51a <__kernel_rem_pio2+0x5c2>
 800b506:	f1bb 0f00 	cmp.w	fp, #0
 800b50a:	d002      	beq.n	800b512 <__kernel_rem_pio2+0x5ba>
 800b50c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b510:	4619      	mov	r1, r3
 800b512:	9b01      	ldr	r3, [sp, #4]
 800b514:	e9c3 0100 	strd	r0, r1, [r3]
 800b518:	e791      	b.n	800b43e <__kernel_rem_pio2+0x4e6>
 800b51a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b51e:	f7f4 feb5 	bl	800028c <__adddf3>
 800b522:	3d01      	subs	r5, #1
 800b524:	e7ed      	b.n	800b502 <__kernel_rem_pio2+0x5aa>
 800b526:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b52a:	f7f4 feaf 	bl	800028c <__adddf3>
 800b52e:	3e01      	subs	r6, #1
 800b530:	e7c0      	b.n	800b4b4 <__kernel_rem_pio2+0x55c>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	e7c5      	b.n	800b4c4 <__kernel_rem_pio2+0x56c>
 800b538:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b53c:	f7f4 fea6 	bl	800028c <__adddf3>
 800b540:	3401      	adds	r4, #1
 800b542:	e7ca      	b.n	800b4da <__kernel_rem_pio2+0x582>
 800b544:	e9da 8900 	ldrd	r8, r9, [sl]
 800b548:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b54c:	9b02      	ldr	r3, [sp, #8]
 800b54e:	3b01      	subs	r3, #1
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	4632      	mov	r2, r6
 800b554:	463b      	mov	r3, r7
 800b556:	4640      	mov	r0, r8
 800b558:	4649      	mov	r1, r9
 800b55a:	f7f4 fe97 	bl	800028c <__adddf3>
 800b55e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4640      	mov	r0, r8
 800b568:	4649      	mov	r1, r9
 800b56a:	f7f4 fe8d 	bl	8000288 <__aeabi_dsub>
 800b56e:	4632      	mov	r2, r6
 800b570:	463b      	mov	r3, r7
 800b572:	f7f4 fe8b 	bl	800028c <__adddf3>
 800b576:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b57a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b57e:	ed8a 7b00 	vstr	d7, [sl]
 800b582:	e76e      	b.n	800b462 <__kernel_rem_pio2+0x50a>
 800b584:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b588:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b58c:	4640      	mov	r0, r8
 800b58e:	4632      	mov	r2, r6
 800b590:	463b      	mov	r3, r7
 800b592:	4649      	mov	r1, r9
 800b594:	f7f4 fe7a 	bl	800028c <__adddf3>
 800b598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	f7f4 fe70 	bl	8000288 <__aeabi_dsub>
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	463b      	mov	r3, r7
 800b5ac:	f7f4 fe6e 	bl	800028c <__adddf3>
 800b5b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b5b8:	ed84 7b00 	vstr	d7, [r4]
 800b5bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b5c0:	e755      	b.n	800b46e <__kernel_rem_pio2+0x516>
 800b5c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5c6:	f7f4 fe61 	bl	800028c <__adddf3>
 800b5ca:	3d01      	subs	r5, #1
 800b5cc:	e759      	b.n	800b482 <__kernel_rem_pio2+0x52a>
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	9a01      	ldr	r2, [sp, #4]
 800b5d2:	601d      	str	r5, [r3, #0]
 800b5d4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b5d8:	605c      	str	r4, [r3, #4]
 800b5da:	609f      	str	r7, [r3, #8]
 800b5dc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b5e0:	60d3      	str	r3, [r2, #12]
 800b5e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5e6:	6110      	str	r0, [r2, #16]
 800b5e8:	6153      	str	r3, [r2, #20]
 800b5ea:	e728      	b.n	800b43e <__kernel_rem_pio2+0x4e6>
 800b5ec:	41700000 	.word	0x41700000
 800b5f0:	3e700000 	.word	0x3e700000
 800b5f4:	00000000 	.word	0x00000000

0800b5f8 <__kernel_sin>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	ed2d 8b04 	vpush	{d8-d9}
 800b600:	eeb0 8a41 	vmov.f32	s16, s2
 800b604:	eef0 8a61 	vmov.f32	s17, s3
 800b608:	ec55 4b10 	vmov	r4, r5, d0
 800b60c:	b083      	sub	sp, #12
 800b60e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b612:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b616:	9001      	str	r0, [sp, #4]
 800b618:	da06      	bge.n	800b628 <__kernel_sin+0x30>
 800b61a:	ee10 0a10 	vmov	r0, s0
 800b61e:	4629      	mov	r1, r5
 800b620:	f7f5 fa9a 	bl	8000b58 <__aeabi_d2iz>
 800b624:	2800      	cmp	r0, #0
 800b626:	d051      	beq.n	800b6cc <__kernel_sin+0xd4>
 800b628:	4622      	mov	r2, r4
 800b62a:	462b      	mov	r3, r5
 800b62c:	4620      	mov	r0, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	f7f4 ffe2 	bl	80005f8 <__aeabi_dmul>
 800b634:	4682      	mov	sl, r0
 800b636:	468b      	mov	fp, r1
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4620      	mov	r0, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	f7f4 ffda 	bl	80005f8 <__aeabi_dmul>
 800b644:	a341      	add	r3, pc, #260	; (adr r3, 800b74c <__kernel_sin+0x154>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	4680      	mov	r8, r0
 800b64c:	4689      	mov	r9, r1
 800b64e:	4650      	mov	r0, sl
 800b650:	4659      	mov	r1, fp
 800b652:	f7f4 ffd1 	bl	80005f8 <__aeabi_dmul>
 800b656:	a33f      	add	r3, pc, #252	; (adr r3, 800b754 <__kernel_sin+0x15c>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f7f4 fe14 	bl	8000288 <__aeabi_dsub>
 800b660:	4652      	mov	r2, sl
 800b662:	465b      	mov	r3, fp
 800b664:	f7f4 ffc8 	bl	80005f8 <__aeabi_dmul>
 800b668:	a33c      	add	r3, pc, #240	; (adr r3, 800b75c <__kernel_sin+0x164>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f7f4 fe0d 	bl	800028c <__adddf3>
 800b672:	4652      	mov	r2, sl
 800b674:	465b      	mov	r3, fp
 800b676:	f7f4 ffbf 	bl	80005f8 <__aeabi_dmul>
 800b67a:	a33a      	add	r3, pc, #232	; (adr r3, 800b764 <__kernel_sin+0x16c>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f7f4 fe02 	bl	8000288 <__aeabi_dsub>
 800b684:	4652      	mov	r2, sl
 800b686:	465b      	mov	r3, fp
 800b688:	f7f4 ffb6 	bl	80005f8 <__aeabi_dmul>
 800b68c:	a337      	add	r3, pc, #220	; (adr r3, 800b76c <__kernel_sin+0x174>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f7f4 fdfb 	bl	800028c <__adddf3>
 800b696:	9b01      	ldr	r3, [sp, #4]
 800b698:	4606      	mov	r6, r0
 800b69a:	460f      	mov	r7, r1
 800b69c:	b9eb      	cbnz	r3, 800b6da <__kernel_sin+0xe2>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4650      	mov	r0, sl
 800b6a4:	4659      	mov	r1, fp
 800b6a6:	f7f4 ffa7 	bl	80005f8 <__aeabi_dmul>
 800b6aa:	a325      	add	r3, pc, #148	; (adr r3, 800b740 <__kernel_sin+0x148>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 fdea 	bl	8000288 <__aeabi_dsub>
 800b6b4:	4642      	mov	r2, r8
 800b6b6:	464b      	mov	r3, r9
 800b6b8:	f7f4 ff9e 	bl	80005f8 <__aeabi_dmul>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	f7f4 fde2 	bl	800028c <__adddf3>
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	460d      	mov	r5, r1
 800b6cc:	ec45 4b10 	vmov	d0, r4, r5
 800b6d0:	b003      	add	sp, #12
 800b6d2:	ecbd 8b04 	vpop	{d8-d9}
 800b6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6da:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <__kernel_sin+0x150>)
 800b6dc:	ec51 0b18 	vmov	r0, r1, d8
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	4632      	mov	r2, r6
 800b6e8:	ec41 0b19 	vmov	d9, r0, r1
 800b6ec:	463b      	mov	r3, r7
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	f7f4 ff81 	bl	80005f8 <__aeabi_dmul>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	ec51 0b19 	vmov	r0, r1, d9
 800b6fe:	f7f4 fdc3 	bl	8000288 <__aeabi_dsub>
 800b702:	4652      	mov	r2, sl
 800b704:	465b      	mov	r3, fp
 800b706:	f7f4 ff77 	bl	80005f8 <__aeabi_dmul>
 800b70a:	ec53 2b18 	vmov	r2, r3, d8
 800b70e:	f7f4 fdbb 	bl	8000288 <__aeabi_dsub>
 800b712:	a30b      	add	r3, pc, #44	; (adr r3, 800b740 <__kernel_sin+0x148>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	4606      	mov	r6, r0
 800b71a:	460f      	mov	r7, r1
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f4 ff6a 	bl	80005f8 <__aeabi_dmul>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4630      	mov	r0, r6
 800b72a:	4639      	mov	r1, r7
 800b72c:	f7f4 fdae 	bl	800028c <__adddf3>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4620      	mov	r0, r4
 800b736:	4629      	mov	r1, r5
 800b738:	f7f4 fda6 	bl	8000288 <__aeabi_dsub>
 800b73c:	e7c4      	b.n	800b6c8 <__kernel_sin+0xd0>
 800b73e:	bf00      	nop
 800b740:	55555549 	.word	0x55555549
 800b744:	3fc55555 	.word	0x3fc55555
 800b748:	3fe00000 	.word	0x3fe00000
 800b74c:	5acfd57c 	.word	0x5acfd57c
 800b750:	3de5d93a 	.word	0x3de5d93a
 800b754:	8a2b9ceb 	.word	0x8a2b9ceb
 800b758:	3e5ae5e6 	.word	0x3e5ae5e6
 800b75c:	57b1fe7d 	.word	0x57b1fe7d
 800b760:	3ec71de3 	.word	0x3ec71de3
 800b764:	19c161d5 	.word	0x19c161d5
 800b768:	3f2a01a0 	.word	0x3f2a01a0
 800b76c:	1110f8a6 	.word	0x1110f8a6
 800b770:	3f811111 	.word	0x3f811111

0800b774 <with_errno>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
 800b77a:	4616      	mov	r6, r2
 800b77c:	f7fd fb56 	bl	8008e2c <__errno>
 800b780:	4629      	mov	r1, r5
 800b782:	6006      	str	r6, [r0, #0]
 800b784:	4620      	mov	r0, r4
 800b786:	bd70      	pop	{r4, r5, r6, pc}

0800b788 <xflow>:
 800b788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b78a:	4614      	mov	r4, r2
 800b78c:	461d      	mov	r5, r3
 800b78e:	b108      	cbz	r0, 800b794 <xflow+0xc>
 800b790:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b794:	e9cd 2300 	strd	r2, r3, [sp]
 800b798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b79c:	4620      	mov	r0, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	2222      	movs	r2, #34	; 0x22
 800b7a6:	b003      	add	sp, #12
 800b7a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ac:	f7ff bfe2 	b.w	800b774 <with_errno>

0800b7b0 <__math_uflow>:
 800b7b0:	b508      	push	{r3, lr}
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b7b8:	f7ff ffe6 	bl	800b788 <xflow>
 800b7bc:	ec41 0b10 	vmov	d0, r0, r1
 800b7c0:	bd08      	pop	{r3, pc}

0800b7c2 <__math_oflow>:
 800b7c2:	b508      	push	{r3, lr}
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b7ca:	f7ff ffdd 	bl	800b788 <xflow>
 800b7ce:	ec41 0b10 	vmov	d0, r0, r1
 800b7d2:	bd08      	pop	{r3, pc}

0800b7d4 <fabs>:
 800b7d4:	ec51 0b10 	vmov	r0, r1, d0
 800b7d8:	ee10 2a10 	vmov	r2, s0
 800b7dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7e0:	ec43 2b10 	vmov	d0, r2, r3
 800b7e4:	4770      	bx	lr

0800b7e6 <finite>:
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	ed8d 0b00 	vstr	d0, [sp]
 800b7ec:	9801      	ldr	r0, [sp, #4]
 800b7ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b7f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b7f6:	0fc0      	lsrs	r0, r0, #31
 800b7f8:	b002      	add	sp, #8
 800b7fa:	4770      	bx	lr
 800b7fc:	0000      	movs	r0, r0
	...

0800b800 <floor>:
 800b800:	ec51 0b10 	vmov	r0, r1, d0
 800b804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b808:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b80c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b810:	2e13      	cmp	r6, #19
 800b812:	ee10 5a10 	vmov	r5, s0
 800b816:	ee10 8a10 	vmov	r8, s0
 800b81a:	460c      	mov	r4, r1
 800b81c:	dc32      	bgt.n	800b884 <floor+0x84>
 800b81e:	2e00      	cmp	r6, #0
 800b820:	da14      	bge.n	800b84c <floor+0x4c>
 800b822:	a333      	add	r3, pc, #204	; (adr r3, 800b8f0 <floor+0xf0>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fd30 	bl	800028c <__adddf3>
 800b82c:	2200      	movs	r2, #0
 800b82e:	2300      	movs	r3, #0
 800b830:	f7f5 f972 	bl	8000b18 <__aeabi_dcmpgt>
 800b834:	b138      	cbz	r0, 800b846 <floor+0x46>
 800b836:	2c00      	cmp	r4, #0
 800b838:	da57      	bge.n	800b8ea <floor+0xea>
 800b83a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b83e:	431d      	orrs	r5, r3
 800b840:	d001      	beq.n	800b846 <floor+0x46>
 800b842:	4c2d      	ldr	r4, [pc, #180]	; (800b8f8 <floor+0xf8>)
 800b844:	2500      	movs	r5, #0
 800b846:	4621      	mov	r1, r4
 800b848:	4628      	mov	r0, r5
 800b84a:	e025      	b.n	800b898 <floor+0x98>
 800b84c:	4f2b      	ldr	r7, [pc, #172]	; (800b8fc <floor+0xfc>)
 800b84e:	4137      	asrs	r7, r6
 800b850:	ea01 0307 	and.w	r3, r1, r7
 800b854:	4303      	orrs	r3, r0
 800b856:	d01f      	beq.n	800b898 <floor+0x98>
 800b858:	a325      	add	r3, pc, #148	; (adr r3, 800b8f0 <floor+0xf0>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fd15 	bl	800028c <__adddf3>
 800b862:	2200      	movs	r2, #0
 800b864:	2300      	movs	r3, #0
 800b866:	f7f5 f957 	bl	8000b18 <__aeabi_dcmpgt>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d0eb      	beq.n	800b846 <floor+0x46>
 800b86e:	2c00      	cmp	r4, #0
 800b870:	bfbe      	ittt	lt
 800b872:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b876:	fa43 f606 	asrlt.w	r6, r3, r6
 800b87a:	19a4      	addlt	r4, r4, r6
 800b87c:	ea24 0407 	bic.w	r4, r4, r7
 800b880:	2500      	movs	r5, #0
 800b882:	e7e0      	b.n	800b846 <floor+0x46>
 800b884:	2e33      	cmp	r6, #51	; 0x33
 800b886:	dd0b      	ble.n	800b8a0 <floor+0xa0>
 800b888:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b88c:	d104      	bne.n	800b898 <floor+0x98>
 800b88e:	ee10 2a10 	vmov	r2, s0
 800b892:	460b      	mov	r3, r1
 800b894:	f7f4 fcfa 	bl	800028c <__adddf3>
 800b898:	ec41 0b10 	vmov	d0, r0, r1
 800b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8a8:	fa23 f707 	lsr.w	r7, r3, r7
 800b8ac:	4207      	tst	r7, r0
 800b8ae:	d0f3      	beq.n	800b898 <floor+0x98>
 800b8b0:	a30f      	add	r3, pc, #60	; (adr r3, 800b8f0 <floor+0xf0>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f7f4 fce9 	bl	800028c <__adddf3>
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f7f5 f92b 	bl	8000b18 <__aeabi_dcmpgt>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d0bf      	beq.n	800b846 <floor+0x46>
 800b8c6:	2c00      	cmp	r4, #0
 800b8c8:	da02      	bge.n	800b8d0 <floor+0xd0>
 800b8ca:	2e14      	cmp	r6, #20
 800b8cc:	d103      	bne.n	800b8d6 <floor+0xd6>
 800b8ce:	3401      	adds	r4, #1
 800b8d0:	ea25 0507 	bic.w	r5, r5, r7
 800b8d4:	e7b7      	b.n	800b846 <floor+0x46>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b8dc:	fa03 f606 	lsl.w	r6, r3, r6
 800b8e0:	4435      	add	r5, r6
 800b8e2:	4545      	cmp	r5, r8
 800b8e4:	bf38      	it	cc
 800b8e6:	18e4      	addcc	r4, r4, r3
 800b8e8:	e7f2      	b.n	800b8d0 <floor+0xd0>
 800b8ea:	2500      	movs	r5, #0
 800b8ec:	462c      	mov	r4, r5
 800b8ee:	e7aa      	b.n	800b846 <floor+0x46>
 800b8f0:	8800759c 	.word	0x8800759c
 800b8f4:	7e37e43c 	.word	0x7e37e43c
 800b8f8:	bff00000 	.word	0xbff00000
 800b8fc:	000fffff 	.word	0x000fffff

0800b900 <nan>:
 800b900:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b908 <nan+0x8>
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	00000000 	.word	0x00000000
 800b90c:	7ff80000 	.word	0x7ff80000

0800b910 <scalbn>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	ec55 4b10 	vmov	r4, r5, d0
 800b916:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b91a:	4606      	mov	r6, r0
 800b91c:	462b      	mov	r3, r5
 800b91e:	b99a      	cbnz	r2, 800b948 <scalbn+0x38>
 800b920:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b924:	4323      	orrs	r3, r4
 800b926:	d036      	beq.n	800b996 <scalbn+0x86>
 800b928:	4b39      	ldr	r3, [pc, #228]	; (800ba10 <scalbn+0x100>)
 800b92a:	4629      	mov	r1, r5
 800b92c:	ee10 0a10 	vmov	r0, s0
 800b930:	2200      	movs	r2, #0
 800b932:	f7f4 fe61 	bl	80005f8 <__aeabi_dmul>
 800b936:	4b37      	ldr	r3, [pc, #220]	; (800ba14 <scalbn+0x104>)
 800b938:	429e      	cmp	r6, r3
 800b93a:	4604      	mov	r4, r0
 800b93c:	460d      	mov	r5, r1
 800b93e:	da10      	bge.n	800b962 <scalbn+0x52>
 800b940:	a32b      	add	r3, pc, #172	; (adr r3, 800b9f0 <scalbn+0xe0>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	e03a      	b.n	800b9be <scalbn+0xae>
 800b948:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b94c:	428a      	cmp	r2, r1
 800b94e:	d10c      	bne.n	800b96a <scalbn+0x5a>
 800b950:	ee10 2a10 	vmov	r2, s0
 800b954:	4620      	mov	r0, r4
 800b956:	4629      	mov	r1, r5
 800b958:	f7f4 fc98 	bl	800028c <__adddf3>
 800b95c:	4604      	mov	r4, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	e019      	b.n	800b996 <scalbn+0x86>
 800b962:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b966:	460b      	mov	r3, r1
 800b968:	3a36      	subs	r2, #54	; 0x36
 800b96a:	4432      	add	r2, r6
 800b96c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b970:	428a      	cmp	r2, r1
 800b972:	dd08      	ble.n	800b986 <scalbn+0x76>
 800b974:	2d00      	cmp	r5, #0
 800b976:	a120      	add	r1, pc, #128	; (adr r1, 800b9f8 <scalbn+0xe8>)
 800b978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b97c:	da1c      	bge.n	800b9b8 <scalbn+0xa8>
 800b97e:	a120      	add	r1, pc, #128	; (adr r1, 800ba00 <scalbn+0xf0>)
 800b980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b984:	e018      	b.n	800b9b8 <scalbn+0xa8>
 800b986:	2a00      	cmp	r2, #0
 800b988:	dd08      	ble.n	800b99c <scalbn+0x8c>
 800b98a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b98e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b992:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b996:	ec45 4b10 	vmov	d0, r4, r5
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b9a0:	da19      	bge.n	800b9d6 <scalbn+0xc6>
 800b9a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b9a6:	429e      	cmp	r6, r3
 800b9a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b9ac:	dd0a      	ble.n	800b9c4 <scalbn+0xb4>
 800b9ae:	a112      	add	r1, pc, #72	; (adr r1, 800b9f8 <scalbn+0xe8>)
 800b9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d1e2      	bne.n	800b97e <scalbn+0x6e>
 800b9b8:	a30f      	add	r3, pc, #60	; (adr r3, 800b9f8 <scalbn+0xe8>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f7f4 fe1b 	bl	80005f8 <__aeabi_dmul>
 800b9c2:	e7cb      	b.n	800b95c <scalbn+0x4c>
 800b9c4:	a10a      	add	r1, pc, #40	; (adr r1, 800b9f0 <scalbn+0xe0>)
 800b9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d0b8      	beq.n	800b940 <scalbn+0x30>
 800b9ce:	a10e      	add	r1, pc, #56	; (adr r1, 800ba08 <scalbn+0xf8>)
 800b9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d4:	e7b4      	b.n	800b940 <scalbn+0x30>
 800b9d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9da:	3236      	adds	r2, #54	; 0x36
 800b9dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <scalbn+0x108>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	e7e8      	b.n	800b9be <scalbn+0xae>
 800b9ec:	f3af 8000 	nop.w
 800b9f0:	c2f8f359 	.word	0xc2f8f359
 800b9f4:	01a56e1f 	.word	0x01a56e1f
 800b9f8:	8800759c 	.word	0x8800759c
 800b9fc:	7e37e43c 	.word	0x7e37e43c
 800ba00:	8800759c 	.word	0x8800759c
 800ba04:	fe37e43c 	.word	0xfe37e43c
 800ba08:	c2f8f359 	.word	0xc2f8f359
 800ba0c:	81a56e1f 	.word	0x81a56e1f
 800ba10:	43500000 	.word	0x43500000
 800ba14:	ffff3cb0 	.word	0xffff3cb0
 800ba18:	3c900000 	.word	0x3c900000

0800ba1c <_init>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	bf00      	nop
 800ba20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba22:	bc08      	pop	{r3}
 800ba24:	469e      	mov	lr, r3
 800ba26:	4770      	bx	lr

0800ba28 <_fini>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	bf00      	nop
 800ba2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2e:	bc08      	pop	{r3}
 800ba30:	469e      	mov	lr, r3
 800ba32:	4770      	bx	lr
