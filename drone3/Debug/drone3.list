
drone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b95c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800baf0  0800baf0  0001baf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd68  0800bd68  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd70  0800bd70  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd74  0800bd74  0001bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800bd78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000704  200000a0  200000a0  000200a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200007a4  200007a4  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016459  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b1c  00000000  00000000  00036525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00039048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023120  00000000  00000000  0003b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001787f  00000000  00000000  0005e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d177f  00000000  00000000  00075fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147736  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005eb4  00000000  00000000  00147788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bad4 	.word	0x0800bad4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800bad4 	.word	0x0800bad4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize(uint8_t Gain, uint8_t rate, uint8_t mode) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	460b      	mov	r3, r1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	717b      	strb	r3, [r7, #5]
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f60:	223c      	movs	r2, #60	; 0x3c
 8000f62:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  HAL_StatusTypeDef status;
  do {
    status = HAL_I2C_IsDeviceReady( & hi2c1, devAddr, 3, 5);
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <HMC5883L_initialize+0x7c>)
 8000f70:	f004 fa6c 	bl	800544c <HAL_I2C_IsDeviceReady>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f2      	bne.n	8000f64 <HMC5883L_initialize+0x18>
  // write CONFIG_A register
  HAL_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f003 fa4c 	bl	800441c <HAL_Delay>
  buffer[0] = HMC5883L_RA_CONFIG_A;
 8000f84:	2300      	movs	r3, #0
 8000f86:	733b      	strb	r3, [r7, #12]
  buffer[1] = rate;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	737b      	strb	r3, [r7, #13]

  do {
    status = HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10);
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HMC5883L_initialize+0x78>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	f107 020c 	add.w	r2, r7, #12
 8000f96:	230a      	movs	r3, #10
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <HMC5883L_initialize+0x7c>)
 8000f9e:	f003 ff31 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  while (status != HAL_OK);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ef      	bne.n	8000f8c <HMC5883L_initialize+0x40>
  // write CONFIG_B register
  HMC5883L_setGain(Gain);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f80c 	bl	8000fcc <HMC5883L_setGain>
  // write MODE register
  HMC5883L_setMode(mode);
 8000fb4:	797b      	ldrb	r3, [r7, #5]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f82c 	bl	8001014 <HMC5883L_setMode>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200000c0 	.word	0x200000c0

08000fcc <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 4-0 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HMC5883L_setGain+0x40>)
 8000fd8:	223c      	movs	r2, #60	; 0x3c
 8000fda:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_CONFIG_B;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	733b      	strb	r3, [r7, #12]
  buffer[1] = gain;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 8000fe4:	bf00      	nop
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HMC5883L_setGain+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b299      	uxth	r1, r3
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <HMC5883L_setGain+0x44>)
 8000ff8:	f003 ff04 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f1      	bne.n	8000fe6 <HMC5883L_setGain+0x1a>
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	200000c0 	.word	0x200000c0

08001014 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  // use this method to guarantee that bits 7-2 are set to zero, which is a
  // requirement specified in the datasheet; it's actually more efficient than
  // using the I2Cdev.writeBits method
  //I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HMC5883L_setMode+0x44>)
 8001020:	223c      	movs	r2, #60	; 0x3c
 8001022:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2];
  buffer[0] = HMC5883L_RA_MODE;
 8001024:	2302      	movs	r3, #2
 8001026:	733b      	strb	r3, [r7, #12]
  buffer[1] = newMode; // + 0x80;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 2, 10) != HAL_OK) {}
 800102c:	bf00      	nop
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HMC5883L_setMode+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b299      	uxth	r1, r3
 8001034:	f107 020c 	add.w	r2, r7, #12
 8001038:	230a      	movs	r3, #10
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2302      	movs	r3, #2
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <HMC5883L_setMode+0x48>)
 8001040:	f003 fee0 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f1      	bne.n	800102e <HMC5883L_setMode+0x1a>
  mode = newMode; // track to tell if we have to clear bit 7 after a read
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <HMC5883L_setMode+0x4c>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	7013      	strb	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	200000c0 	.word	0x200000c0
 8001060:	200000bc 	.word	0x200000bc

08001064 <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t * x, int16_t * y, int16_t * z) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  //I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer);
  //if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
  devAddr = HMC5883L_DEFAULT_ADDRESS;
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HMC5883L_getHeading+0x90>)
 8001072:	223c      	movs	r2, #60	; 0x3c
 8001074:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[6];
  buffer[0] = HMC5883L_RA_DATAX_H;
 8001076:	2303      	movs	r3, #3
 8001078:	743b      	strb	r3, [r7, #16]
  //buffer[1]	= 0x00;
  while (HAL_I2C_Master_Transmit( & hi2c1, devAddr, (uint8_t * ) buffer, 1, 1) != HAL_OK) {}
 800107a:	bf00      	nop
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HMC5883L_getHeading+0x90>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b299      	uxth	r1, r3
 8001082:	f107 0210 	add.w	r2, r7, #16
 8001086:	2301      	movs	r3, #1
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <HMC5883L_getHeading+0x94>)
 800108e:	f003 feb9 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f1      	bne.n	800107c <HMC5883L_getHeading+0x18>
  //HAL_I2C_Master_Transmit(&hi2c1, devAddr, (uint8_t*) buffer, 1, 1);
  while (HAL_I2C_Master_Receive( & hi2c1, devAddr, (uint8_t * ) buffer, 6, 1) != HAL_OK) {}
 8001098:	bf00      	nop
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HMC5883L_getHeading+0x90>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b299      	uxth	r1, r3
 80010a0:	f107 0210 	add.w	r2, r7, #16
 80010a4:	2301      	movs	r3, #1
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2306      	movs	r3, #6
 80010aa:	4813      	ldr	r0, [pc, #76]	; (80010f8 <HMC5883L_getHeading+0x94>)
 80010ac:	f003 ffa8 	bl	8005000 <HAL_I2C_Master_Receive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f1      	bne.n	800109a <HMC5883L_getHeading+0x36>
  //HAL_I2C_Master_Receive(&hi2c1, devAddr, (uint8_t*) buffer, 6, 10);
  *x = (((int16_t) buffer[0]) << 8) | buffer[1];
 80010b6:	7c3b      	ldrb	r3, [r7, #16]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7c7b      	ldrb	r3, [r7, #17]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	801a      	strh	r2, [r3, #0]
  *y = (((int16_t) buffer[4]) << 8) | buffer[5];
 80010c8:	7d3b      	ldrb	r3, [r7, #20]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7d7b      	ldrb	r3, [r7, #21]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	801a      	strh	r2, [r3, #0]
  *z = (((int16_t) buffer[2]) << 8) | buffer[3];
 80010da:	7cbb      	ldrb	r3, [r7, #18]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	801a      	strh	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	200000c0 	.word	0x200000c0

080010fc <SimpleKalmanFilter_Init>:
  //float _q, _q1;
  //float _current_estimate, _current_estimate1;
  //float _last_estimate, _last_estimate1;
  //float _kalman_gain, _kalman_gain1;    
//uint8_t convert_char(uint8_t num_char);
void SimpleKalmanFilter_Init(kalman_filter* kalman_unit, float mea_e, float est_e, float q){
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	ed87 0a02 	vstr	s0, [r7, #8]
 8001108:	edc7 0a01 	vstr	s1, [r7, #4]
 800110c:	ed87 1a00 	vstr	s2, [r7]
  kalman_unit->_err_measure = mea_e;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	601a      	str	r2, [r3, #0]
  kalman_unit->_err_estimate = est_e;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
  kalman_unit->_q = q;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	609a      	str	r2, [r3, #8]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SimpleKalmanFilter_updateEstimate>:
/*void SimpleKalmanFilter_Init1(float mea_e1, float est_e1, float q1){
  _err_measure1 = mea_e1;
  _err_estimate1 = est_e1;
  _q1 = q1;
}*/
float SimpleKalmanFilter_updateEstimate(kalman_filter* kalman_unit, float mea){
 800112e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	ed87 0a00 	vstr	s0, [r7]
  kalman_unit->_kalman_gain = kalman_unit->_err_estimate/(kalman_unit->_err_estimate + kalman_unit->_err_measure);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	ed93 7a01 	vldr	s14, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	edc3 7a05 	vstr	s15, [r3, #20]
  kalman_unit->_current_estimate = kalman_unit->_last_estimate + kalman_unit->_kalman_gain * (mea - kalman_unit->_last_estimate);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 6a05 	vldr	s13, [r3, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a04 	vldr	s15, [r3, #16]
 800116e:	ed97 6a00 	vldr	s12, [r7]
 8001172:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a03 	vstr	s15, [r3, #12]
  kalman_unit->_err_estimate =  ((float)1.0 - kalman_unit->_kalman_gain)*kalman_unit->_err_estimate + fabs(kalman_unit->_last_estimate-kalman_unit->_current_estimate)*kalman_unit->_q;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edd3 7a05 	vldr	s15, [r3, #20]
 800118a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800118e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edd3 7a01 	vldr	s15, [r3, #4]
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	ee17 0a90 	vmov	r0, s15
 80011a0:	f7ff f9d2 	bl	8000548 <__aeabi_f2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	eef0 7ae7 	vabs.f32	s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9c2 	bl	8000548 <__aeabi_f2d>
 80011c4:	4680      	mov	r8, r0
 80011c6:	4689      	mov	r9, r1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff fa0d 	bl	80005f8 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7ff f851 	bl	800028c <__adddf3>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fcd9 	bl	8000ba8 <__aeabi_d2f>
 80011f6:	4602      	mov	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
  kalman_unit->_last_estimate=kalman_unit->_current_estimate;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]

  return kalman_unit->_current_estimate;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001218 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t led, uint8_t count) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
  for (int i = 0; i < count; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e024      	b.n	8001278 <flash+0x60>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d103      	bne.n	800123c <flash+0x24>
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	4816      	ldr	r0, [pc, #88]	; (8001290 <flash+0x78>)
 8001238:	f003 fc85 	bl	8004b46 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d103      	bne.n	800124a <flash+0x32>
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <flash+0x78>)
 8001246:	f003 fc7e 	bl	8004b46 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800124a:	2064      	movs	r0, #100	; 0x64
 800124c:	f003 f8e6 	bl	800441c <HAL_Delay>
    if (led == 1) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d103      	bne.n	800125e <flash+0x46>
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <flash+0x78>)
 800125a:	f003 fc74 	bl	8004b46 <HAL_GPIO_TogglePin>
    if (led == 2) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d103      	bne.n	800126c <flash+0x54>
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <flash+0x78>)
 8001268:	f003 fc6d 	bl	8004b46 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800126c:	2064      	movs	r0, #100	; 0x64
 800126e:	f003 f8d5 	bl	800441c <HAL_Delay>
  for (int i = 0; i < count; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbd6      	blt.n	800122e <flash+0x16>
  }

  HAL_Delay(200);
 8001280:	20c8      	movs	r0, #200	; 0xc8
 8001282:	f003 f8cb 	bl	800441c <HAL_Delay>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020000 	.word	0x40020000

08001294 <console>:

// Monitor console
void console(const char *str) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7fe ff97 	bl	80001d0 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <console+0x24>)
 80012ac:	f006 feb5 	bl	800801a <HAL_UART_Transmit_IT>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002e4 	.word	0x200002e4

080012bc <send_data>:

void send_data(float x1, float x2, float x3,
    float x4, float x5, float x6, float x7, float x8, float x9) {
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	b093      	sub	sp, #76	; 0x4c
 80012c0:	af08      	add	r7, sp, #32
 80012c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80012c6:	edc7 0a08 	vstr	s1, [r7, #32]
 80012ca:	ed87 1a07 	vstr	s2, [r7, #28]
 80012ce:	edc7 1a06 	vstr	s3, [r7, #24]
 80012d2:	ed87 2a05 	vstr	s4, [r7, #20]
 80012d6:	edc7 2a04 	vstr	s5, [r7, #16]
 80012da:	ed87 3a03 	vstr	s6, [r7, #12]
 80012de:	edc7 3a02 	vstr	s7, [r7, #8]
 80012e2:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	2100      	movs	r1, #0
 80012ec:	4837      	ldr	r0, [pc, #220]	; (80013cc <send_data+0x110>)
 80012ee:	f007 fe23 	bl	8008f38 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 80012f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012f6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80013d0 <send_data+0x114>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80012fe:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 8001302:	edd7 7a08 	vldr	s15, [r7, #32]
 8001306:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80013d0 <send_data+0x114>
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800130e:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 8001312:	edd7 7a07 	vldr	s15, [r7, #28]
 8001316:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013d0 <send_data+0x114>
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800131e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001322:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8001326:	edd7 7a06 	vldr	s15, [r7, #24]
 800132a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80013d0 <send_data+0x114>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 800133a:	edd7 7a05 	vldr	s15, [r7, #20]
 800133e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80013d0 <send_data+0x114>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134a:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 800134e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001352:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80013d0 <send_data+0x114>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 8001362:	edd7 7a03 	vldr	s15, [r7, #12]
 8001366:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80013d0 <send_data+0x114>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 8001376:	edd7 7a02 	vldr	s15, [r7, #8]
 800137a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013d0 <send_data+0x114>
 800137e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001386:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 800138a:	edd7 7a01 	vldr	s15, [r7, #4]
 800138e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80013d0 <send_data+0x114>
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 6a90 	vmov	r6, s15
 800139e:	9606      	str	r6, [sp, #24]
 80013a0:	9505      	str	r5, [sp, #20]
 80013a2:	9404      	str	r4, [sp, #16]
 80013a4:	9003      	str	r0, [sp, #12]
 80013a6:	9102      	str	r1, [sp, #8]
 80013a8:	9201      	str	r2, [sp, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	ee16 3a10 	vmov	r3, s12
 80013b0:	ee16 2a90 	vmov	r2, s13
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <send_data+0x118>)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <send_data+0x110>)
 80013b8:	f007 fdc6 	bl	8008f48 <siprintf>
  console(g_console_msg);
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <send_data+0x110>)
 80013be:	f7ff ff69 	bl	8001294 <console>
}
 80013c2:	bf00      	nop
 80013c4:	372c      	adds	r7, #44	; 0x2c
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000574 	.word	0x20000574
 80013d0:	47c35000 	.word	0x47c35000
 80013d4:	0800baf0 	.word	0x0800baf0

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f002 ffab 	bl	8004338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8f1 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 fc93 	bl	8001d10 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013ea:	f000 f9f1 	bl	80017d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013ee:	f000 f955 	bl	800169c <MX_I2C1_Init>
  MX_TIM2_Init();
 80013f2:	f000 fab1 	bl	8001958 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013f6:	f000 fb29 	bl	8001a4c <MX_TIM3_Init>
  MX_TIM4_Init();
 80013fa:	f000 fba3 	bl	8001b44 <MX_TIM4_Init>
  MX_SPI1_Init();
 80013fe:	f000 f97b 	bl	80016f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001402:	f000 f9af 	bl	8001764 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001406:	f000 fc2f 	bl	8001c68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800140a:	f000 fc57 	bl	8001cbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Turn off all lights
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	4859      	ldr	r0, [pc, #356]	; (8001578 <main+0x1a0>)
 8001414:	f003 fb7e 	bl	8004b14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	4856      	ldr	r0, [pc, #344]	; (8001578 <main+0x1a0>)
 800141e:	f003 fb79 	bl	8004b14 <HAL_GPIO_WritePin>

  // Gyro, accel
  SimpleKalmanFilter_Init(&g_filters[0], 2, 2, 0.5); // Accel x
 8001422:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001426:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800142a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800142e:	4853      	ldr	r0, [pc, #332]	; (800157c <main+0x1a4>)
 8001430:	f7ff fe64 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[1], 2, 2, 0.5); // Accel y
 8001434:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001438:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800143c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001440:	484f      	ldr	r0, [pc, #316]	; (8001580 <main+0x1a8>)
 8001442:	f7ff fe5b 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[2], 2, 2, 0.5); // Accel z
 8001446:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800144a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800144e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001452:	484c      	ldr	r0, [pc, #304]	; (8001584 <main+0x1ac>)
 8001454:	f7ff fe52 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[3], 2, 2, 0.5); // Gyro x
 8001458:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800145c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001460:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001464:	4848      	ldr	r0, [pc, #288]	; (8001588 <main+0x1b0>)
 8001466:	f7ff fe49 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[4], 2, 2, 0.5); // Gyro y
 800146a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800146e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001472:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001476:	4845      	ldr	r0, [pc, #276]	; (800158c <main+0x1b4>)
 8001478:	f7ff fe40 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[5], 2, 2, 0.5); // Gyro z
 800147c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001480:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001484:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001488:	4841      	ldr	r0, [pc, #260]	; (8001590 <main+0x1b8>)
 800148a:	f7ff fe37 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[6], 2, 2, 0.01); // Thrust
 800148e:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8001594 <main+0x1bc>
 8001492:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001496:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800149a:	483f      	ldr	r0, [pc, #252]	; (8001598 <main+0x1c0>)
 800149c:	f7ff fe2e 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[7], 2, 2, 0.01); // Yaw
 80014a0:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8001594 <main+0x1bc>
 80014a4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014a8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014ac:	483b      	ldr	r0, [pc, #236]	; (800159c <main+0x1c4>)
 80014ae:	f7ff fe25 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[8], 2, 2, 0.01); // Pitch
 80014b2:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8001594 <main+0x1bc>
 80014b6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014ba:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014be:	4838      	ldr	r0, [pc, #224]	; (80015a0 <main+0x1c8>)
 80014c0:	f7ff fe1c 	bl	80010fc <SimpleKalmanFilter_Init>
  SimpleKalmanFilter_Init(&g_filters[9], 2, 2, 0.01); // Roll
 80014c4:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8001594 <main+0x1bc>
 80014c8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014cc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014d0:	4834      	ldr	r0, [pc, #208]	; (80015a4 <main+0x1cc>)
 80014d2:	f7ff fe13 	bl	80010fc <SimpleKalmanFilter_Init>

  // Initialize GY-86
  SD_MPU6050_Init(
 80014d6:	2303      	movs	r3, #3
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2303      	movs	r3, #3
 80014dc:	2200      	movs	r2, #0
 80014de:	4932      	ldr	r1, [pc, #200]	; (80015a8 <main+0x1d0>)
 80014e0:	4832      	ldr	r0, [pc, #200]	; (80015ac <main+0x1d4>)
 80014e2:	f000 fc94 	bl	8001e0e <SD_MPU6050_Init>
      &hi2c1,
      &g_dev1,
      SD_MPU6050_Device_0,
      SD_MPU6050_Accelerometer_16G,
      SD_MPU6050_Gyroscope_2000s);
  SD_MPU6050_SetDataRate(&hi2c1, &g_dev1, SD_MPU6050_DataRate_8KHz);
 80014e6:	2200      	movs	r2, #0
 80014e8:	492f      	ldr	r1, [pc, #188]	; (80015a8 <main+0x1d0>)
 80014ea:	4830      	ldr	r0, [pc, #192]	; (80015ac <main+0x1d4>)
 80014ec:	f000 fd04 	bl	8001ef8 <SD_MPU6050_SetDataRate>
  flash(1, 5);
 80014f0:	2105      	movs	r1, #5
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff fe90 	bl	8001218 <flash>

  begin(&g_dev2, MS5611_HIGH_RES); // MS5611 sensor init
 80014f8:	2106      	movs	r1, #6
 80014fa:	482d      	ldr	r0, [pc, #180]	; (80015b0 <main+0x1d8>)
 80014fc:	f000 fee0 	bl	80022c0 <begin>
  Set_config(&hi2c1, &g_dev1, MPU6050_DLPF_BW_260); // LPF mpu
 8001500:	2200      	movs	r2, #0
 8001502:	4929      	ldr	r1, [pc, #164]	; (80015a8 <main+0x1d0>)
 8001504:	4829      	ldr	r0, [pc, #164]	; (80015ac <main+0x1d4>)
 8001506:	f000 feb3 	bl	8002270 <Set_config>
  SetAuxbus(&hi2c1, &g_dev1); // Enable MPU6050 AUX bus to interface with HMC5883l
 800150a:	4927      	ldr	r1, [pc, #156]	; (80015a8 <main+0x1d0>)
 800150c:	4827      	ldr	r0, [pc, #156]	; (80015ac <main+0x1d4>)
 800150e:	f000 fe7d 	bl	800220c <SetAuxbus>
  HMC5883L_initialize(HMC5883L_GAIN_1370, HMC5883L_RATE_75, HMC5883L_MODE_CONTINUOUS);
 8001512:	2200      	movs	r2, #0
 8001514:	2118      	movs	r1, #24
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff fd18 	bl	8000f4c <HMC5883L_initialize>
  flash(1, 5);
 800151c:	2105      	movs	r1, #5
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fe7a 	bl	8001218 <flash>

  // Remote control
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001524:	2100      	movs	r1, #0
 8001526:	4823      	ldr	r0, [pc, #140]	; (80015b4 <main+0x1dc>)
 8001528:	f005 fb4c 	bl	8006bc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 800152c:	2104      	movs	r1, #4
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <main+0x1dc>)
 8001530:	f005 fb48 	bl	8006bc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8001534:	2108      	movs	r1, #8
 8001536:	481f      	ldr	r0, [pc, #124]	; (80015b4 <main+0x1dc>)
 8001538:	f005 fb44 	bl	8006bc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 800153c:	210c      	movs	r1, #12
 800153e:	481d      	ldr	r0, [pc, #116]	; (80015b4 <main+0x1dc>)
 8001540:	f005 fb40 	bl	8006bc4 <HAL_TIM_IC_Start_IT>

  // Init PWM timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001544:	2100      	movs	r1, #0
 8001546:	481c      	ldr	r0, [pc, #112]	; (80015b8 <main+0x1e0>)
 8001548:	f005 fa1a 	bl	8006980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800154c:	2104      	movs	r1, #4
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <main+0x1e0>)
 8001550:	f005 fa16 	bl	8006980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001554:	2108      	movs	r1, #8
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <main+0x1e0>)
 8001558:	f005 fa12 	bl	8006980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800155c:	210c      	movs	r1, #12
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <main+0x1e0>)
 8001560:	f005 fa0e 	bl	8006980 <HAL_TIM_PWM_Start>

  // Run timers
  HAL_TIM_Base_Start_IT(&htim3);
 8001564:	4815      	ldr	r0, [pc, #84]	; (80015bc <main+0x1e4>)
 8001566:	f005 f94b 	bl	8006800 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Receive data and callback HAL_UART_RxCpltCallback
    HAL_UART_Receive_IT(&huart1, g_control, 10);
 800156a:	220a      	movs	r2, #10
 800156c:	4914      	ldr	r1, [pc, #80]	; (80015c0 <main+0x1e8>)
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <main+0x1ec>)
 8001570:	f006 fd98 	bl	80080a4 <HAL_UART_Receive_IT>
 8001574:	e7f9      	b.n	800156a <main+0x192>
 8001576:	bf00      	nop
 8001578:	40020000 	.word	0x40020000
 800157c:	2000036c 	.word	0x2000036c
 8001580:	20000384 	.word	0x20000384
 8001584:	2000039c 	.word	0x2000039c
 8001588:	200003b4 	.word	0x200003b4
 800158c:	200003cc 	.word	0x200003cc
 8001590:	200003e4 	.word	0x200003e4
 8001594:	3c23d70a 	.word	0x3c23d70a
 8001598:	200003fc 	.word	0x200003fc
 800159c:	20000414 	.word	0x20000414
 80015a0:	2000042c 	.word	0x2000042c
 80015a4:	20000444 	.word	0x20000444
 80015a8:	200004ec 	.word	0x200004ec
 80015ac:	200000c0 	.word	0x200000c0
 80015b0:	20000508 	.word	0x20000508
 80015b4:	2000029c 	.word	0x2000029c
 80015b8:	200001c4 	.word	0x200001c4
 80015bc:	20000254 	.word	0x20000254
 80015c0:	20000570 	.word	0x20000570
 80015c4:	200002e4 	.word	0x200002e4

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2230      	movs	r2, #48	; 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fcae 	bl	8008f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <SystemClock_Config+0xcc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <SystemClock_Config+0xcc>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <SystemClock_Config+0xcc>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <SystemClock_Config+0xd0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <SystemClock_Config+0xd0>)
 8001612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <SystemClock_Config+0xd0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800163c:	23a8      	movs	r3, #168	; 0xa8
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	2302      	movs	r3, #2
 8001642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001644:	2304      	movs	r3, #4
 8001646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fb67 	bl	8005d20 <HAL_RCC_OscConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001658:	f000 fbd4 	bl	8001e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	230f      	movs	r3, #15
 800165e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001660:	2302      	movs	r3, #2
 8001662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001668:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800166c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800166e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2105      	movs	r1, #5
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fdc8 	bl	8006210 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001686:	f000 fbbd 	bl	8001e04 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	; 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_I2C1_Init+0x50>)
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <MX_I2C1_Init+0x54>)
 80016a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_I2C1_Init+0x50>)
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <MX_I2C1_Init+0x58>)
 80016aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_I2C1_Init+0x50>)
 80016ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_I2C1_Init+0x50>)
 80016da:	f003 fa4f 	bl	8004b7c <HAL_I2C_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f000 fb8e 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000c0 	.word	0x200000c0
 80016f0:	40005400 	.word	0x40005400
 80016f4:	000186a0 	.word	0x000186a0

080016f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI1_Init+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <MX_SPI1_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI1_Init+0x64>)
 8001704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI1_Init+0x64>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI1_Init+0x64>)
 8001744:	220a      	movs	r2, #10
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_SPI1_Init+0x64>)
 800174a:	f004 ff81 	bl	8006650 <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 fb56 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000114 	.word	0x20000114
 8001760:	40013000 	.word	0x40013000

08001764 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_SPI2_Init+0x64>)
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <MX_SPI2_Init+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001774:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_SPI2_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_SPI2_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001794:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_SPI2_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017b0:	220a      	movs	r2, #10
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017b6:	f004 ff4b 	bl	8006650 <HAL_SPI_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017c0:	f000 fb20 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000016c 	.word	0x2000016c
 80017cc:	40003800 	.word	0x40003800

080017d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2220      	movs	r2, #32
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f007 fb95 	bl	8008f38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <MX_TIM1_Init+0x180>)
 8001810:	4a50      	ldr	r2, [pc, #320]	; (8001954 <MX_TIM1_Init+0x184>)
 8001812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21;
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <MX_TIM1_Init+0x180>)
 8001816:	2215      	movs	r2, #21
 8001818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <MX_TIM1_Init+0x180>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <MX_TIM1_Init+0x180>)
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b49      	ldr	r3, [pc, #292]	; (8001950 <MX_TIM1_Init+0x180>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <MX_TIM1_Init+0x180>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b46      	ldr	r3, [pc, #280]	; (8001950 <MX_TIM1_Init+0x180>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183a:	4845      	ldr	r0, [pc, #276]	; (8001950 <MX_TIM1_Init+0x180>)
 800183c:	f004 ff91 	bl	8006762 <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001846:	f000 fadd 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001854:	4619      	mov	r1, r3
 8001856:	483e      	ldr	r0, [pc, #248]	; (8001950 <MX_TIM1_Init+0x180>)
 8001858:	f005 fd42 	bl	80072e0 <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001862:	f000 facf 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001866:	483a      	ldr	r0, [pc, #232]	; (8001950 <MX_TIM1_Init+0x180>)
 8001868:	f005 f83a 	bl	80068e0 <HAL_TIM_PWM_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001872:	f000 fac7 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800187e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001882:	4619      	mov	r1, r3
 8001884:	4832      	ldr	r0, [pc, #200]	; (8001950 <MX_TIM1_Init+0x180>)
 8001886:	f006 fa99 	bl	8007dbc <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001890:	f000 fab8 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001894:	2360      	movs	r3, #96	; 0x60
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4825      	ldr	r0, [pc, #148]	; (8001950 <MX_TIM1_Init+0x180>)
 80018ba:	f005 fc4f 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018c4:	f000 fa9e 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	2204      	movs	r2, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	481f      	ldr	r0, [pc, #124]	; (8001950 <MX_TIM1_Init+0x180>)
 80018d2:	f005 fc43 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80018dc:	f000 fa92 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2208      	movs	r2, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4819      	ldr	r0, [pc, #100]	; (8001950 <MX_TIM1_Init+0x180>)
 80018ea:	f005 fc37 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018f4:	f000 fa86 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	220c      	movs	r2, #12
 80018fe:	4619      	mov	r1, r3
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_TIM1_Init+0x180>)
 8001902:	f005 fc2b 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800190c:	f000 fa7a 	bl	8001e04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM1_Init+0x180>)
 8001934:	f006 fabe 	bl	8007eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800193e:	f000 fa61 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM1_Init+0x180>)
 8001944:	f000 fff8 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001948:	bf00      	nop
 800194a:	3758      	adds	r7, #88	; 0x58
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001c4 	.word	0x200001c4
 8001954:	40010000 	.word	0x40010000

08001958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <MX_TIM2_Init+0xf0>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21;
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001984:	2215      	movs	r2, #21
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <MX_TIM2_Init+0xf0>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_TIM2_Init+0xf0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a2:	4829      	ldr	r0, [pc, #164]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019a4:	f004 ff9c 	bl	80068e0 <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019ae:	f000 fa29 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4619      	mov	r1, r3
 80019c0:	4821      	ldr	r0, [pc, #132]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019c2:	f006 f9fb 	bl	8007dbc <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019cc:	f000 fa1a 	bl	8001e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d0:	2360      	movs	r3, #96	; 0x60
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019e8:	f005 fbb8 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019f2:	f000 fa07 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2204      	movs	r2, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_TIM2_Init+0xf0>)
 80019fe:	f005 fbad 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a08:	f000 f9fc 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2208      	movs	r2, #8
 8001a10:	4619      	mov	r1, r3
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001a14:	f005 fba2 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a1e:	f000 f9f1 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	220c      	movs	r2, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001a2a:	f005 fb97 	bl	800715c <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001a34:	f000 f9e6 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM2_Init+0xf0>)
 8001a3a:	f000 ff7d 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000020c 	.word	0x2000020c

08001a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0318 	add.w	r3, r7, #24
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a78:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <MX_TIM3_Init+0xf4>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a7e:	2254      	movs	r2, #84	; 0x54
 8001a80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a9c:	4827      	ldr	r0, [pc, #156]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001a9e:	f004 fe60 	bl	8006762 <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001aa8:	f000 f9ac 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4820      	ldr	r0, [pc, #128]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001aba:	f005 fc11 	bl	80072e0 <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ac4:	f000 f99e 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ac8:	481c      	ldr	r0, [pc, #112]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001aca:	f005 f821 	bl	8006b10 <HAL_TIM_IC_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ad4:	f000 f996 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4815      	ldr	r0, [pc, #84]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001ae8:	f006 f968 	bl	8007dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001af2:	f000 f987 	bl	8001e04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001afa:	2301      	movs	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001b0e:	f005 fa89 	bl	8007024 <HAL_TIM_IC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001b18:	f000 f974 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_TIM3_Init+0xf0>)
 8001b24:	f005 fa7e 	bl	8007024 <HAL_TIM_IC_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001b2e:	f000 f969 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000254 	.word	0x20000254
 8001b40:	40000400 	.word	0x40000400

08001b44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b62:	463b      	mov	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b70:	4a3c      	ldr	r2, [pc, #240]	; (8001c64 <MX_TIM4_Init+0x120>)
 8001b72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 8001b74:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b76:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001b7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4200;
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b84:	f241 0268 	movw	r2, #4200	; 0x1068
 8001b88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b96:	4832      	ldr	r0, [pc, #200]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001b98:	f004 fde3 	bl	8006762 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001ba2:	f000 f92f 	bl	8001e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482b      	ldr	r0, [pc, #172]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001bb4:	f005 fb94 	bl	80072e0 <HAL_TIM_ConfigClockSource>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bbe:	f000 f921 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bc2:	4827      	ldr	r0, [pc, #156]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001bc4:	f004 ffa4 	bl	8006b10 <HAL_TIM_IC_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001bce:	f000 f919 	bl	8001e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	481f      	ldr	r0, [pc, #124]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001be2:	f006 f8eb 	bl	8007dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001bec:	f000 f90a 	bl	8001e04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	4816      	ldr	r0, [pc, #88]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c08:	f005 fa0c 	bl	8007024 <HAL_TIM_IC_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001c12:	f000 f8f7 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c16:	463b      	mov	r3, r7
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4810      	ldr	r0, [pc, #64]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c1e:	f005 fa01 	bl	8007024 <HAL_TIM_IC_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001c28:	f000 f8ec 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	2208      	movs	r2, #8
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c34:	f005 f9f6 	bl	8007024 <HAL_TIM_IC_ConfigChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001c3e:	f000 f8e1 	bl	8001e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	220c      	movs	r2, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_TIM4_Init+0x11c>)
 8001c4a:	f005 f9eb 	bl	8007024 <HAL_TIM_IC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001c54:	f000 f8d6 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000029c 	.word	0x2000029c
 8001c64:	40000800 	.word	0x40000800

08001c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <MX_USART1_UART_Init+0x50>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART1_UART_Init+0x4c>)
 8001ca0:	f006 f96e 	bl	8007f80 <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001caa:	f000 f8ab 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002e4 	.word	0x200002e4
 8001cb8:	40011000 	.word	0x40011000

08001cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_USART2_UART_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f006 f944 	bl	8007f80 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfe:	f000 f881 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000328 	.word	0x20000328
 8001d0c:	40004400 	.word	0x40004400

08001d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	21c0      	movs	r1, #192	; 0xc0
 8001dd2:	480b      	ldr	r0, [pc, #44]	; (8001e00 <MX_GPIO_Init+0xf0>)
 8001dd4:	f002 fe9e 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd8:	23c0      	movs	r3, #192	; 0xc0
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_GPIO_Init+0xf0>)
 8001df0:	f002 fcdc 	bl	80047ac <HAL_GPIO_Init>

}
 8001df4:	bf00      	nop
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <Error_Handler+0x8>

08001e0e <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

/////////////////////////////////////////////
SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	; 0x28
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001e24:	2375      	movs	r3, #117	; 0x75
 8001e26:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001e3e:	7efb      	ldrb	r3, [r7, #27]
 8001e40:	b299      	uxth	r1, r3
 8001e42:	2305      	movs	r3, #5
 8001e44:	2202      	movs	r2, #2
 8001e46:	69f8      	ldr	r0, [r7, #28]
 8001e48:	f003 fb00 	bl	800544c <HAL_I2C_IsDeviceReady>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e04c      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001e56:	7efb      	ldrb	r3, [r7, #27]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	f107 021a 	add.w	r2, r7, #26
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	69f8      	ldr	r0, [r7, #28]
 8001e68:	f002 ffcc 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e03c      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001e76:	7efb      	ldrb	r3, [r7, #27]
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	f107 0219 	add.w	r2, r7, #25
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	69f8      	ldr	r0, [r7, #28]
 8001e88:	f003 f8ba 	bl	8005000 <HAL_I2C_Master_Receive>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e02c      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e02a      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001e9a:	bf00      	nop
 8001e9c:	7e7b      	ldrb	r3, [r7, #25]
 8001e9e:	2b68      	cmp	r3, #104	; 0x68
 8001ea0:	d1f9      	bne.n	8001e96 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001ea2:	236b      	movs	r3, #107	; 0x6b
 8001ea4:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001eaa:	7efb      	ldrb	r3, [r7, #27]
 8001eac:	b299      	uxth	r1, r3
 8001eae:	f107 0214 	add.w	r2, r7, #20
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	69f8      	ldr	r0, [r7, #28]
 8001ebc:	f002 ffa2 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e012      	b.n	8001ef0 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8001eca:	2207      	movs	r2, #7
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f812 	bl	8001ef8 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f830 	bl	8001f40 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8001ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f899 	bl	8002020 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001f10:	2319      	movs	r3, #25
 8001f12:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001f18:	bf00      	nop
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	f107 0210 	add.w	r2, r7, #16
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2302      	movs	r3, #2
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f002 ff6a 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f1      	bne.n	8001f1a <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001f58:	231c      	movs	r3, #28
 8001f5a:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001f5c:	bf00      	nop
 8001f5e:	7cfb      	ldrb	r3, [r7, #19]
 8001f60:	b299      	uxth	r1, r3
 8001f62:	f107 0211 	add.w	r2, r7, #17
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f002 ff48 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f1      	bne.n	8001f5e <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001f7a:	bf00      	nop
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	f107 0212 	add.w	r2, r7, #18
 8001f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f003 f837 	bl	8005000 <HAL_I2C_Master_Receive>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f1      	bne.n	8001f7c <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001f98:	7cbb      	ldrb	r3, [r7, #18]
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	f023 0318 	bic.w	r3, r3, #24
 8001fa0:	b25a      	sxtb	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001fb0:	bf00      	nop
 8001fb2:	7cfb      	ldrb	r3, [r7, #19]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 0212 	add.w	r2, r7, #18
 8001fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f002 ff1e 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f1      	bne.n	8001fb2 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d81f      	bhi.n	8002014 <SD_MPU6050_SetAccelerometer+0xd4>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <SD_MPU6050_SetAccelerometer+0x9c>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff7 	.word	0x08001ff7
 8001fe4:	08002001 	.word	0x08002001
 8001fe8:	0800200b 	.word	0x0800200b
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001ff2:	609a      	str	r2, [r3, #8]
			break;
 8001ff4:	e00f      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001ffc:	609a      	str	r2, [r3, #8]
			break;
 8001ffe:	e00a      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002006:	609a      	str	r2, [r3, #8]
			break;
 8002008:	e005      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002010:	609a      	str	r2, [r3, #8]
			break;
 8002012:	e000      	b.n	8002016 <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8002014:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	4613      	mov	r3, r2
 800202c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8002038:	231b      	movs	r3, #27
 800203a:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800203c:	bf00      	nop
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	b299      	uxth	r1, r3
 8002042:	f107 0211 	add.w	r2, r7, #17
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f002 fed8 	bl	8004e04 <HAL_I2C_Master_Transmit>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f1      	bne.n	800203e <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800205a:	bf00      	nop
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	b299      	uxth	r1, r3
 8002060:	f107 0212 	add.w	r2, r7, #18
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	6978      	ldr	r0, [r7, #20]
 800206e:	f002 ffc7 	bl	8005000 <HAL_I2C_Master_Receive>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f1      	bne.n	800205c <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8002078:	7cbb      	ldrb	r3, [r7, #18]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	f023 0318 	bic.w	r3, r3, #24
 8002080:	b25a      	sxtb	r2, r3
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	b25b      	sxtb	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b25b      	sxtb	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002090:	bf00      	nop
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	b299      	uxth	r1, r3
 8002096:	f107 0212 	add.w	r2, r7, #18
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2301      	movs	r3, #1
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f002 feae 	bl	8004e04 <HAL_I2C_Master_Transmit>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f1      	bne.n	8002092 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d81b      	bhi.n	80020ec <SD_MPU6050_SetGyroscope+0xcc>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <SD_MPU6050_SetGyroscope+0x9c>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020d5 	.word	0x080020d5
 80020c4:	080020dd 	.word	0x080020dd
 80020c8:	080020e5 	.word	0x080020e5
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SD_MPU6050_SetGyroscope+0xd8>)
 80020d0:	605a      	str	r2, [r3, #4]
				break;
 80020d2:	e00c      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <SD_MPU6050_SetGyroscope+0xdc>)
 80020d8:	605a      	str	r2, [r3, #4]
				break;
 80020da:	e008      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <SD_MPU6050_SetGyroscope+0xe0>)
 80020e0:	605a      	str	r2, [r3, #4]
				break;
 80020e2:	e004      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <SD_MPU6050_SetGyroscope+0xe4>)
 80020e8:	605a      	str	r2, [r3, #4]
				break;
 80020ea:	e000      	b.n	80020ee <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 80020ec:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	3bfa232d 	.word	0x3bfa232d
 80020fc:	3c7a232d 	.word	0x3c7a232d
 8002100:	3cf9c190 	.word	0x3cf9c190
 8002104:	3d79c190 	.word	0x3d79c190

08002108 <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af02      	add	r7, sp, #8
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8002112:	233b      	movs	r3, #59	; 0x3b
 8002114:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1) != HAL_OK);
 8002122:	bf00      	nop
 8002124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002128:	b299      	uxth	r1, r3
 800212a:	f107 020f 	add.w	r2, r7, #15
 800212e:	2301      	movs	r3, #1
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002136:	f002 fe65 	bl	8004e04 <HAL_I2C_Master_Transmit>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f1      	bne.n	8002124 <SD_MPU6050_ReadAll+0x1c>
	//HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1);
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1) != HAL_OK);
 8002140:	bf00      	nop
 8002142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002146:	b299      	uxth	r1, r3
 8002148:	f107 0210 	add.w	r2, r7, #16
 800214c:	2301      	movs	r3, #1
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	230e      	movs	r3, #14
 8002152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002154:	f002 ff54 	bl	8005000 <HAL_I2C_Master_Receive>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f1      	bne.n	8002142 <SD_MPU6050_ReadAll+0x3a>
	//HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1);
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800215e:	7c3b      	ldrb	r3, [r7, #16]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	7c7b      	ldrb	r3, [r7, #17]
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21a      	sxth	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8002170:	7cbb      	ldrb	r3, [r7, #18]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21a      	sxth	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8002182:	7d3b      	ldrb	r3, [r7, #20]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	7d7b      	ldrb	r3, [r7, #21]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21a      	sxth	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8002194:	7dbb      	ldrb	r3, [r7, #22]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80021a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ae:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002204 <SD_MPU6050_ReadAll+0xfc>
 80021b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002208 <SD_MPU6050_ReadAll+0x100>
 80021ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 80021c4:	7e3b      	ldrb	r3, [r7, #24]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	7e7b      	ldrb	r3, [r7, #25]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 80021d6:	7ebb      	ldrb	r3, [r7, #26]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	b21a      	sxth	r2, r3
 80021dc:	7efb      	ldrb	r3, [r7, #27]
 80021de:	b21b      	sxth	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 80021e8:	7f3b      	ldrb	r3, [r7, #28]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	7f7b      	ldrb	r3, [r7, #29]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	43aa0000 	.word	0x43aa0000
 8002208:	42121eb8 	.word	0x42121eb8

0800220c <SetAuxbus>:
	InterruptsStruct->Status = read;
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

void SetAuxbus(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct){
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]
	uint8_t address = DataStruct->Address;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	72fb      	strb	r3, [r7, #11]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_USER_CTRL;
 8002220:	236a      	movs	r3, #106	; 0x6a
 8002222:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 8002224:	2300      	movs	r3, #0
 8002226:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 8002228:	200a      	movs	r0, #10
 800222a:	f002 f8f7 	bl	800441c <HAL_Delay>
	/*set I2C Bypass enable bit (I2C_BYPASS_EN,bit 2) in INT Pin / Bypass Enable Configuration register (INT_PIN_CFG,0x37) to 1*/
	d[0] = MPU6050_INT_PIN_CFG;
 800222e:	2337      	movs	r3, #55	; 0x37
 8002230:	723b      	strb	r3, [r7, #8]
	d[1] = 0x02;
 8002232:	2302      	movs	r3, #2
 8002234:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8002236:	bf00      	nop
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	b299      	uxth	r1, r3
 800223c:	f107 0208 	add.w	r2, r7, #8
 8002240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2302      	movs	r3, #2
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f002 fddb 	bl	8004e04 <HAL_I2C_Master_Transmit>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f1      	bne.n	8002238 <SetAuxbus+0x2c>
	HAL_Delay(10);
 8002254:	200a      	movs	r0, #10
 8002256:	f002 f8e1 	bl	800441c <HAL_Delay>
	/*Turn off sleep mode by reseting SLEEP bit (bit 6) of the power management register #1 (PWR_MGMT_1, 0x6B)*/
	d[0] = MPU6050_PWR_MGMT_1;
 800225a:	236b      	movs	r3, #107	; 0x6b
 800225c:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 800225e:	2300      	movs	r3, #0
 8002260:	727b      	strb	r3, [r7, #9]
	//while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
	HAL_Delay(10);
 8002262:	200a      	movs	r0, #10
 8002264:	f002 f8da 	bl	800441c <HAL_Delay>
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <Set_config>:
void Set_config(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t f_cut){
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	/*set I2C Master enable bit (I2C_MST_EN, bit 5)  in user control register (USER_CTRL , 0x6A) to 0*/
	d[0] = MPU6050_CONFIG;
 8002288:	231a      	movs	r3, #26
 800228a:	743b      	strb	r3, [r7, #16]
	d[1] = f_cut;
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	747b      	strb	r3, [r7, #17]
	HAL_Delay(10);
 8002290:	200a      	movs	r0, #10
 8002292:	f002 f8c3 	bl	800441c <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8002296:	bf00      	nop
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	b299      	uxth	r1, r3
 800229c:	f107 0210 	add.w	r2, r7, #16
 80022a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2302      	movs	r3, #2
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f002 fdab 	bl	8004e04 <HAL_I2C_Master_Transmit>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f1      	bne.n	8002298 <Set_config+0x28>
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <begin>:
#include "ms5611.h"
#include "math.h"
extern I2C_HandleTypeDef hi2c1;
extern void delay(uint16_t z);

bool begin(MS5611 *dev, ms5611_osr_t osr){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
    //Wire.begin();
		while(HAL_I2C_IsDeviceReady(&hi2c1, MS5611_ADDRESS, 3, 100) != HAL_OK);
 80022cc:	bf00      	nop
 80022ce:	2364      	movs	r3, #100	; 0x64
 80022d0:	2203      	movs	r2, #3
 80022d2:	21ee      	movs	r1, #238	; 0xee
 80022d4:	480f      	ldr	r0, [pc, #60]	; (8002314 <begin+0x54>)
 80022d6:	f003 f8b9 	bl	800544c <HAL_I2C_IsDeviceReady>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f6      	bne.n	80022ce <begin+0xe>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80022e0:	bf00      	nop
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <begin+0x54>)
 80022e4:	f003 f9e0 	bl	80056a8 <HAL_I2C_GetState>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d1f9      	bne.n	80022e2 <begin+0x22>
		setOversampling(dev, osr);
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f810 	bl	8002318 <setOversampling>
		reset();
 80022f8:	f000 f850 	bl	800239c <reset>
		HAL_Delay(100);
 80022fc:	2064      	movs	r0, #100	; 0x64
 80022fe:	f002 f88d 	bl	800441c <HAL_Delay>
    readPROM(dev);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f860 	bl	80023c8 <readPROM>
    return true;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200000c0 	.word	0x200000c0

08002318 <setOversampling>:

// Set oversampling value
void setOversampling(MS5611 *dev, ms5611_osr_t osr){
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
	  dev->uosr = osr;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    switch (osr)
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d82d      	bhi.n	800238e <setOversampling+0x76>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <setOversampling+0x20>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	0800235d 	.word	0x0800235d
 800233c:	0800238f 	.word	0x0800238f
 8002340:	08002367 	.word	0x08002367
 8002344:	0800238f 	.word	0x0800238f
 8002348:	08002371 	.word	0x08002371
 800234c:	0800238f 	.word	0x0800238f
 8002350:	0800237b 	.word	0x0800237b
 8002354:	0800238f 	.word	0x0800238f
 8002358:	08002385 	.word	0x08002385
    {
	case MS5611_ULTRA_LOW_POWER:
	    dev->ct = 1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002364:	e013      	b.n	800238e <setOversampling+0x76>
	case MS5611_LOW_POWER:
	    dev->ct = 2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 800236e:	e00e      	b.n	800238e <setOversampling+0x76>
	case MS5611_STANDARD:
	    dev->ct = 3;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002378:	e009      	b.n	800238e <setOversampling+0x76>
	case MS5611_HIGH_RES:
	    dev->ct = 4;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2204      	movs	r2, #4
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 8002382:	e004      	b.n	800238e <setOversampling+0x76>
	case MS5611_ULTRA_HIGH_RES:
	    dev->ct = 5;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2205      	movs	r2, #5
 8002388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	    break;
 800238c:	bf00      	nop
    }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <reset>:
ms5611_osr_t getOversampling(MS5611 dev)
{
    return (ms5611_osr_t) dev.uosr;
}

void reset(void){ 
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af02      	add	r7, sp, #8
		while(HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t*) MS5611_CMD_RESET, 1, 10) != HAL_OK);
 80023a2:	bf00      	nop
 80023a4:	230a      	movs	r3, #10
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	221e      	movs	r2, #30
 80023ac:	21ee      	movs	r1, #238	; 0xee
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <reset+0x28>)
 80023b0:	f002 fd28 	bl	8004e04 <HAL_I2C_Master_Transmit>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f4      	bne.n	80023a4 <reset+0x8>
		}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200000c0 	.word	0x200000c0

080023c8 <readPROM>:

void readPROM(MS5611 *dev){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	6078      	str	r0, [r7, #4]
    reset();
 80023d0:	f7ff ffe4 	bl	800239c <reset>
		HAL_Delay(3000);
 80023d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023d8:	f002 f820 	bl	800441c <HAL_Delay>
		//read PROM
		uint8_t buf1[16];
		//uint16_t C[8];
		uint8_t CMD_PROM = 0xA0;
 80023dc:	23a0      	movs	r3, #160	; 0xa0
 80023de:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	e023      	b.n	800242e <readPROM+0x66>
		while (HAL_I2C_Master_Transmit(&hi2c1, MS5611_ADDRESS, (uint8_t *) &CMD_PROM, 1, 100) != HAL_OK);
 80023e6:	bf00      	nop
 80023e8:	f107 020f 	add.w	r2, r7, #15
 80023ec:	2364      	movs	r3, #100	; 0x64
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	21ee      	movs	r1, #238	; 0xee
 80023f4:	4826      	ldr	r0, [pc, #152]	; (8002490 <readPROM+0xc8>)
 80023f6:	f002 fd05 	bl	8004e04 <HAL_I2C_Master_Transmit>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f3      	bne.n	80023e8 <readPROM+0x20>
		while (HAL_I2C_Master_Receive(&hi2c1, MS5611_ADDRESS_READ, &buf1[i*2], 2, 100) != HAL_OK);
 8002400:	bf00      	nop
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	f107 0210 	add.w	r2, r7, #16
 800240a:	441a      	add	r2, r3
 800240c:	2364      	movs	r3, #100	; 0x64
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2302      	movs	r3, #2
 8002412:	21ef      	movs	r1, #239	; 0xef
 8002414:	481e      	ldr	r0, [pc, #120]	; (8002490 <readPROM+0xc8>)
 8002416:	f002 fdf3 	bl	8005000 <HAL_I2C_Master_Receive>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <readPROM+0x3a>
		CMD_PROM = CMD_PROM + 2;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3302      	adds	r3, #2
 8002424:	b2db      	uxtb	r3, r3
 8002426:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 8; i++) {
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	3301      	adds	r3, #1
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	2b07      	cmp	r3, #7
 8002432:	ddd8      	ble.n	80023e6 <readPROM+0x1e>
		}
		for (uint8_t i = 0; i < 6; i++) {
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800243a:	e01c      	b.n	8002476 <readPROM+0xae>
		dev->fc[i] = (int16_t) buf1[2*i+2] << 8 | (int16_t) buf1[2*i+3];
 800243c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002440:	3301      	adds	r3, #1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	3328      	adds	r3, #40	; 0x28
 8002446:	443b      	add	r3, r7
 8002448:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002452:	0052      	lsls	r2, r2, #1
 8002454:	3203      	adds	r2, #3
 8002456:	3228      	adds	r2, #40	; 0x28
 8002458:	443a      	add	r2, r7
 800245a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800245e:	4313      	orrs	r3, r2
 8002460:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002464:	4619      	mov	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t i = 0; i < 6; i++) {
 800246c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002470:	3301      	adds	r3, #1
 8002472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800247a:	2b05      	cmp	r3, #5
 800247c:	d9de      	bls.n	800243c <readPROM+0x74>
		}
		crc4(dev->fc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f807 	bl	8002494 <crc4>
}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200000c0 	.word	0x200000c0

08002494 <crc4>:
// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg){
	return 0; 
}
//////////////////////////////////////////////////////
unsigned char crc4(unsigned int n_prom[]) {
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	int cnt; // simple counter
	unsigned int n_rem; // crc reminder
	unsigned int crc_read; // original value of the crc
	unsigned char n_bit;
	n_rem = 0x00;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
	crc_read=n_prom[7]; //save read CRC
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	60bb      	str	r3, [r7, #8]
	n_prom[7]=(0xFF00 & (n_prom[7])); //CRC byte is replaced by 0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	331c      	adds	r3, #28
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	331c      	adds	r3, #28
 80024b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80024b4:	601a      	str	r2, [r3, #0]
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e039      	b.n	8002530 <crc4+0x9c>
		// choose LSB or MSB
		if (cnt%2==1) n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	bfb8      	it	lt
 80024c6:	425b      	neglt	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10b      	bne.n	80024e4 <crc4+0x50>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	105b      	asrs	r3, r3, #1
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4053      	eors	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e00b      	b.n	80024fc <crc4+0x68>
		else n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	105b      	asrs	r3, r3, #1
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4053      	eors	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 80024fc:	2308      	movs	r3, #8
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e010      	b.n	8002524 <crc4+0x90>
			if (n_rem & (0x8000)) {
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <crc4+0x84>
				n_rem = (n_rem << 1) ^ 0x3000; 
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e002      	b.n	800251e <crc4+0x8a>
			} else {
				n_rem = (n_rem << 1);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	3b01      	subs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1eb      	bne.n	8002502 <crc4+0x6e>
	for (cnt = 0; cnt < 16; cnt++) { // operation is performed on bytes
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	ddc2      	ble.n	80024bc <crc4+0x28>
			}
		}
	}
	n_rem= (0x000F & (n_rem >> 12)); // final 4-bit reminder is CRC code
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	0b1b      	lsrs	r3, r3, #12
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	613b      	str	r3, [r7, #16]
	n_prom[7]=crc_read; // restore the crc_read to its original place
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	331c      	adds	r3, #28
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	601a      	str	r2, [r3, #0]
	return (n_rem ^ 0x0);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	b2db      	uxtb	r3, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_MspInit+0x4c>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_MspInit+0x4c>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_I2C_MspInit+0x84>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d12b      	bne.n	8002622 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_I2C_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_I2C_MspInit+0x88>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_I2C_MspInit+0x88>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ea:	2312      	movs	r3, #18
 80025ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025f6:	2304      	movs	r3, #4
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <HAL_I2C_MspInit+0x8c>)
 8002602:	f002 f8d3 	bl	80047ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_I2C_MspInit+0x88>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_I2C_MspInit+0x88>)
 8002610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_I2C_MspInit+0x88>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40005400 	.word	0x40005400
 8002630:	40023800 	.word	0x40023800
 8002634:	40020400 	.word	0x40020400

08002638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08e      	sub	sp, #56	; 0x38
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_SPI_MspInit+0x160>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d14a      	bne.n	80026f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a4e      	ldr	r2, [pc, #312]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_SPI_MspInit+0x164>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <HAL_SPI_MspInit+0x164>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a47      	ldr	r2, [pc, #284]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b45      	ldr	r3, [pc, #276]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a40      	ldr	r2, [pc, #256]	; (800279c <HAL_SPI_MspInit+0x164>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b3e      	ldr	r3, [pc, #248]	; (800279c <HAL_SPI_MspInit+0x164>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026ae:	2320      	movs	r3, #32
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026be:	2305      	movs	r3, #5
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4835      	ldr	r0, [pc, #212]	; (80027a0 <HAL_SPI_MspInit+0x168>)
 80026ca:	f002 f86f 	bl	80047ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026ce:	2330      	movs	r3, #48	; 0x30
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026de:	2305      	movs	r3, #5
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	4619      	mov	r1, r3
 80026e8:	482e      	ldr	r0, [pc, #184]	; (80027a4 <HAL_SPI_MspInit+0x16c>)
 80026ea:	f002 f85f 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026ee:	e04f      	b.n	8002790 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <HAL_SPI_MspInit+0x170>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d14a      	bne.n	8002790 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_SPI_MspInit+0x164>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_SPI_MspInit+0x164>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_SPI_MspInit+0x164>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_SPI_MspInit+0x164>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800274e:	230c      	movs	r3, #12
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800275e:	2305      	movs	r3, #5
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	4619      	mov	r1, r3
 8002768:	4810      	ldr	r0, [pc, #64]	; (80027ac <HAL_SPI_MspInit+0x174>)
 800276a:	f002 f81f 	bl	80047ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800276e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002780:	2305      	movs	r3, #5
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <HAL_SPI_MspInit+0x16c>)
 800278c:	f002 f80e 	bl	80047ac <HAL_GPIO_Init>
}
 8002790:	bf00      	nop
 8002792:	3738      	adds	r7, #56	; 0x38
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40013000 	.word	0x40013000
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40003800 	.word	0x40003800
 80027ac:	40020800 	.word	0x40020800

080027b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a44      	ldr	r2, [pc, #272]	; (80028e0 <HAL_TIM_Base_MspInit+0x130>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a42      	ldr	r2, [pc, #264]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027ee:	e073      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3c      	ldr	r2, [pc, #240]	; (80028e8 <HAL_TIM_Base_MspInit+0x138>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d134      	bne.n	8002864 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002832:	2303      	movs	r3, #3
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002842:	2302      	movs	r3, #2
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4827      	ldr	r0, [pc, #156]	; (80028ec <HAL_TIM_Base_MspInit+0x13c>)
 800284e:	f001 ffad 	bl	80047ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	201d      	movs	r0, #29
 8002858:	f001 fedf 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800285c:	201d      	movs	r0, #29
 800285e:	f001 fef8 	bl	8004652 <HAL_NVIC_EnableIRQ>
}
 8002862:	e039      	b.n	80028d8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <HAL_TIM_Base_MspInit+0x140>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d134      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_TIM_Base_MspInit+0x134>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028b8:	2302      	movs	r3, #2
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <HAL_TIM_Base_MspInit+0x144>)
 80028c4:	f001 ff72 	bl	80047ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	201e      	movs	r0, #30
 80028ce:	f001 fea4 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028d2:	201e      	movs	r0, #30
 80028d4:	f001 febd 	bl	8004652 <HAL_NVIC_EnableIRQ>
}
 80028d8:	bf00      	nop
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40020c00 	.word	0x40020c00

080028f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d10d      	bne.n	8002926 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_TIM_PWM_MspInit+0x3c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <HAL_TIM_MspPostInit+0xf0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d11f      	bne.n	800299a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002976:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800297a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002988:	2301      	movs	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4827      	ldr	r0, [pc, #156]	; (8002a30 <HAL_TIM_MspPostInit+0xf8>)
 8002994:	f001 ff0a 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002998:	e042      	b.n	8002a20 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d13d      	bne.n	8002a20 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6313      	str	r3, [r2, #48]	; 0x30
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029ca:	f043 0302 	orr.w	r3, r3, #2
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_TIM_MspPostInit+0xf4>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80029dc:	f248 0306 	movw	r3, #32774	; 0x8006
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ee:	2301      	movs	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	480e      	ldr	r0, [pc, #56]	; (8002a34 <HAL_TIM_MspPostInit+0xfc>)
 80029fa:	f001 fed7 	bl	80047ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a10:	2301      	movs	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4807      	ldr	r0, [pc, #28]	; (8002a38 <HAL_TIM_MspPostInit+0x100>)
 8002a1c:	f001 fec6 	bl	80047ac <HAL_GPIO_Init>
}
 8002a20:	bf00      	nop
 8002a22:	3728      	adds	r7, #40	; 0x28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	; 0x30
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <HAL_UART_MspInit+0x134>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d135      	bne.n	8002aca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a68:	f043 0310 	orr.w	r3, r3, #16
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a3c      	ldr	r2, [pc, #240]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4831      	ldr	r0, [pc, #196]	; (8002b78 <HAL_UART_MspInit+0x13c>)
 8002ab4:	f001 fe7a 	bl	80047ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	2025      	movs	r0, #37	; 0x25
 8002abe:	f001 fdac 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ac2:	2025      	movs	r0, #37	; 0x25
 8002ac4:	f001 fdc5 	bl	8004652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ac8:	e04e      	b.n	8002b68 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_UART_MspInit+0x140>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d149      	bne.n	8002b68 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_UART_MspInit+0x138>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b38:	2307      	movs	r3, #7
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <HAL_UART_MspInit+0x13c>)
 8002b44:	f001 fe32 	bl	80047ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4619      	mov	r1, r3
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <HAL_UART_MspInit+0x144>)
 8002b64:	f001 fe22 	bl	80047ac <HAL_GPIO_Init>
}
 8002b68:	bf00      	nop
 8002b6a:	3730      	adds	r7, #48	; 0x30
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40020c00 	.word	0x40020c00

08002b84 <limit>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

float limit(float number, float min, float max) {
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b92:	ed87 1a01 	vstr	s2, [r7, #4]
  return number < min ? min : (number > max ? max : number);
 8002b96:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	d501      	bpl.n	8002bac <limit+0x28>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	e00b      	b.n	8002bc4 <limit+0x40>
 8002bac:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	dd01      	ble.n	8002bc2 <limit+0x3e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	e000      	b.n	8002bc4 <limit+0x40>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	ee07 3a90 	vmov	s15, r3
}
 8002bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <ctl_motors_speed>:

void ctl_motors_speed(uint32_t m1, uint32_t m2,
    uint32_t m3, uint32_t m4) {
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  TIM1->CCR1 = m1;
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <ctl_motors_speed+0x34>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6353      	str	r3, [r2, #52]	; 0x34
  TIM1->CCR2 = m2;
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <ctl_motors_speed+0x34>)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6393      	str	r3, [r2, #56]	; 0x38
  TIM1->CCR3 = m3;
 8002bf2:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <ctl_motors_speed+0x34>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR4 = m4;
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <ctl_motors_speed+0x34>)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000

08002c10 <calc_angles>:

// https://github.com/lobodol/IMU/blob/master/imu.ino?fbclid=IwAR1bmIn_qUKA1KbK5g8u7M5T1lKf2K4e0y23TLkXcwpcrFv7rZ7KPQ2Gsvo
void calc_angles() {
 8002c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c14:	af00      	add	r7, sp, #0
  // Angle calculation using integration
  gyro_angle[X] += (g_gx / (FREQ * SSF_GYRO));
 8002c16:	4bd0      	ldr	r3, [pc, #832]	; (8002f58 <calc_angles+0x348>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc94 	bl	8000548 <__aeabi_f2d>
 8002c20:	4604      	mov	r4, r0
 8002c22:	460d      	mov	r5, r1
 8002c24:	4bcd      	ldr	r3, [pc, #820]	; (8002f5c <calc_angles+0x34c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc8d 	bl	8000548 <__aeabi_f2d>
 8002c2e:	a3c2      	add	r3, pc, #776	; (adr r3, 8002f38 <calc_angles+0x328>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fe0a 	bl	800084c <__aeabi_ddiv>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f7fd fb24 	bl	800028c <__adddf3>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd ffac 	bl	8000ba8 <__aeabi_d2f>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4ac1      	ldr	r2, [pc, #772]	; (8002f58 <calc_angles+0x348>)
 8002c54:	6013      	str	r3, [r2, #0]
  gyro_angle[Y] += (-g_gy / (FREQ * SSF_GYRO)); // Change sign to match the accelerometer's one
 8002c56:	4bc0      	ldr	r3, [pc, #768]	; (8002f58 <calc_angles+0x348>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc74 	bl	8000548 <__aeabi_f2d>
 8002c60:	4604      	mov	r4, r0
 8002c62:	460d      	mov	r5, r1
 8002c64:	4bbe      	ldr	r3, [pc, #760]	; (8002f60 <calc_angles+0x350>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	eef1 7a67 	vneg.f32	s15, s15
 8002c6e:	ee17 3a90 	vmov	r3, s15
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc68 	bl	8000548 <__aeabi_f2d>
 8002c78:	a3af      	add	r3, pc, #700	; (adr r3, 8002f38 <calc_angles+0x328>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fde5 	bl	800084c <__aeabi_ddiv>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4620      	mov	r0, r4
 8002c88:	4629      	mov	r1, r5
 8002c8a:	f7fd faff 	bl	800028c <__adddf3>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7fd ff87 	bl	8000ba8 <__aeabi_d2f>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4aae      	ldr	r2, [pc, #696]	; (8002f58 <calc_angles+0x348>)
 8002c9e:	6053      	str	r3, [r2, #4]

  // Transfer roll to pitch if IMU has yawed
  gyro_angle[Y] += gyro_angle[X] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002ca0:	4bad      	ldr	r3, [pc, #692]	; (8002f58 <calc_angles+0x348>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fc4f 	bl	8000548 <__aeabi_f2d>
 8002caa:	4604      	mov	r4, r0
 8002cac:	460d      	mov	r5, r1
 8002cae:	4baa      	ldr	r3, [pc, #680]	; (8002f58 <calc_angles+0x348>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc48 	bl	8000548 <__aeabi_f2d>
 8002cb8:	4680      	mov	r8, r0
 8002cba:	4689      	mov	r9, r1
 8002cbc:	4ba9      	ldr	r3, [pc, #676]	; (8002f64 <calc_angles+0x354>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc41 	bl	8000548 <__aeabi_f2d>
 8002cc6:	a39e      	add	r3, pc, #632	; (adr r3, 8002f40 <calc_angles+0x330>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc94 	bl	80005f8 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	ec43 2b17 	vmov	d7, r2, r3
 8002cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cdc:	eef0 0a67 	vmov.f32	s1, s15
 8002ce0:	f006 fda2 	bl	8009828 <sin>
 8002ce4:	ec53 2b10 	vmov	r2, r3, d0
 8002ce8:	4640      	mov	r0, r8
 8002cea:	4649      	mov	r1, r9
 8002cec:	f7fd fc84 	bl	80005f8 <__aeabi_dmul>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	f7fd fac8 	bl	800028c <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd ff50 	bl	8000ba8 <__aeabi_d2f>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a93      	ldr	r2, [pc, #588]	; (8002f58 <calc_angles+0x348>)
 8002d0c:	6053      	str	r3, [r2, #4]
  gyro_angle[X] -= gyro_angle[Y] * sin(g_gz * (M_PI / (FREQ * SSF_GYRO * 180)));
 8002d0e:	4b92      	ldr	r3, [pc, #584]	; (8002f58 <calc_angles+0x348>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc18 	bl	8000548 <__aeabi_f2d>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	4b8e      	ldr	r3, [pc, #568]	; (8002f58 <calc_angles+0x348>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc11 	bl	8000548 <__aeabi_f2d>
 8002d26:	4680      	mov	r8, r0
 8002d28:	4689      	mov	r9, r1
 8002d2a:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <calc_angles+0x354>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc0a 	bl	8000548 <__aeabi_f2d>
 8002d34:	a382      	add	r3, pc, #520	; (adr r3, 8002f40 <calc_angles+0x330>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc5d 	bl	80005f8 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	ec43 2b17 	vmov	d7, r2, r3
 8002d46:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4a:	eef0 0a67 	vmov.f32	s1, s15
 8002d4e:	f006 fd6b 	bl	8009828 <sin>
 8002d52:	ec53 2b10 	vmov	r2, r3, d0
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fc4d 	bl	80005f8 <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fa8f 	bl	8000288 <__aeabi_dsub>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff19 	bl	8000ba8 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <calc_angles+0x348>)
 8002d7a:	6013      	str	r3, [r2, #0]

  // Calculate total 3D acceleration vector : √(X² + Y² + Z²)
  acc_total_vector = sqrt(pow(g_ax, 2) + pow(g_ay, 2) + pow(g_az, 2));
 8002d7c:	4b7a      	ldr	r3, [pc, #488]	; (8002f68 <calc_angles+0x358>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fbe1 	bl	8000548 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002f48 <calc_angles+0x338>
 8002d8e:	ec43 2b10 	vmov	d0, r2, r3
 8002d92:	f006 fdd5 	bl	8009940 <pow>
 8002d96:	ec55 4b10 	vmov	r4, r5, d0
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <calc_angles+0x35c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fbd2 	bl	8000548 <__aeabi_f2d>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8002f48 <calc_angles+0x338>
 8002dac:	ec43 2b10 	vmov	d0, r2, r3
 8002db0:	f006 fdc6 	bl	8009940 <pow>
 8002db4:	ec53 2b10 	vmov	r2, r3, d0
 8002db8:	4620      	mov	r0, r4
 8002dba:	4629      	mov	r1, r5
 8002dbc:	f7fd fa66 	bl	800028c <__adddf3>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4b69      	ldr	r3, [pc, #420]	; (8002f70 <calc_angles+0x360>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fbbb 	bl	8000548 <__aeabi_f2d>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8002f48 <calc_angles+0x338>
 8002dda:	ec43 2b10 	vmov	d0, r2, r3
 8002dde:	f006 fdaf 	bl	8009940 <pow>
 8002de2:	ec53 2b10 	vmov	r2, r3, d0
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fa4f 	bl	800028c <__adddf3>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	ec43 2b17 	vmov	d7, r2, r3
 8002df6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dfa:	eef0 0a67 	vmov.f32	s1, s15
 8002dfe:	f006 fe0f 	bl	8009a20 <sqrt>
 8002e02:	ec53 2b10 	vmov	r2, r3, d0
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd fea5 	bl	8000b58 <__aeabi_d2iz>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <calc_angles+0x364>)
 8002e12:	6013      	str	r3, [r2, #0]

  // To prevent asin to produce a NaN, make sure the input value is within [-1;+1]
  if (abs(g_ax) < acc_total_vector) {
 8002e14:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <calc_angles+0x358>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e1e:	ee17 3a90 	vmov	r3, s15
 8002e22:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e26:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e2a:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <calc_angles+0x364>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	da24      	bge.n	8002e7c <calc_angles+0x26c>
    acc_angle[X] = asin((float)g_ay / acc_total_vector) * (180 / M_PI); // asin gives angle in radian. Convert to degree multiplying by 180/pi
 8002e32:	4b4e      	ldr	r3, [pc, #312]	; (8002f6c <calc_angles+0x35c>)
 8002e34:	ed93 7a00 	vldr	s14, [r3]
 8002e38:	4b4e      	ldr	r3, [pc, #312]	; (8002f74 <calc_angles+0x364>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e48:	ee16 0a90 	vmov	r0, s13
 8002e4c:	f7fd fb7c 	bl	8000548 <__aeabi_f2d>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	ec43 2b10 	vmov	d0, r2, r3
 8002e58:	f006 fd3e 	bl	80098d8 <asin>
 8002e5c:	ec51 0b10 	vmov	r0, r1, d0
 8002e60:	a33b      	add	r3, pc, #236	; (adr r3, 8002f50 <calc_angles+0x340>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fbc7 	bl	80005f8 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fe99 	bl	8000ba8 <__aeabi_d2f>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a3f      	ldr	r2, [pc, #252]	; (8002f78 <calc_angles+0x368>)
 8002e7a:	6013      	str	r3, [r2, #0]
  }

  if (abs(g_ay) < acc_total_vector) {
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <calc_angles+0x35c>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e86:	ee17 3a90 	vmov	r3, s15
 8002e8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <calc_angles+0x364>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	da24      	bge.n	8002ee4 <calc_angles+0x2d4>
    acc_angle[Y] = asin((float)g_ax / acc_total_vector) * (180 / M_PI);
 8002e9a:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <calc_angles+0x358>)
 8002e9c:	ed93 7a00 	vldr	s14, [r3]
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <calc_angles+0x364>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	ee07 3a90 	vmov	s15, r3
 8002ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eb0:	ee16 0a90 	vmov	r0, s13
 8002eb4:	f7fd fb48 	bl	8000548 <__aeabi_f2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	ec43 2b10 	vmov	d0, r2, r3
 8002ec0:	f006 fd0a 	bl	80098d8 <asin>
 8002ec4:	ec51 0b10 	vmov	r0, r1, d0
 8002ec8:	a321      	add	r3, pc, #132	; (adr r3, 8002f50 <calc_angles+0x340>)
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f7fd fb93 	bl	80005f8 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fe65 	bl	8000ba8 <__aeabi_d2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <calc_angles+0x368>)
 8002ee2:	6053      	str	r3, [r2, #4]
  }

  if (initialized == 1) {
 8002ee4:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <calc_angles+0x36c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d178      	bne.n	8002fde <calc_angles+0x3ce>
    // Correct the drift of the gyro with the accelerometer
    gyro_angle[X] = gyro_angle[X] * 0.5 + acc_angle[X] * 0.5;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <calc_angles+0x348>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fb29 	bl	8000548 <__aeabi_f2d>
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <calc_angles+0x370>)
 8002efc:	f7fd fb7c 	bl	80005f8 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	461d      	mov	r5, r3
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <calc_angles+0x368>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fb1b 	bl	8000548 <__aeabi_f2d>
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <calc_angles+0x370>)
 8002f18:	f7fd fb6e 	bl	80005f8 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd f9b2 	bl	800028c <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	e028      	b.n	8002f84 <calc_angles+0x374>
 8002f32:	bf00      	nop
 8002f34:	f3af 8000 	nop.w
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	40c99600 	.word	0x40c99600
 8002f40:	fb7aa1c6 	.word	0xfb7aa1c6
 8002f44:	3eb65a3c 	.word	0x3eb65a3c
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	40000000 	.word	0x40000000
 8002f50:	1a63c1f8 	.word	0x1a63c1f8
 8002f54:	404ca5dc 	.word	0x404ca5dc
 8002f58:	2000068c 	.word	0x2000068c
 8002f5c:	20000680 	.word	0x20000680
 8002f60:	20000684 	.word	0x20000684
 8002f64:	20000688 	.word	0x20000688
 8002f68:	20000674 	.word	0x20000674
 8002f6c:	20000678 	.word	0x20000678
 8002f70:	2000067c 	.word	0x2000067c
 8002f74:	200006b0 	.word	0x200006b0
 8002f78:	20000698 	.word	0x20000698
 8002f7c:	200006b4 	.word	0x200006b4
 8002f80:	3fe00000 	.word	0x3fe00000
 8002f84:	f7fd fe10 	bl	8000ba8 <__aeabi_d2f>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4a65      	ldr	r2, [pc, #404]	; (8003120 <calc_angles+0x510>)
 8002f8c:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = gyro_angle[Y] * 0.5 + acc_angle[Y] * 0.5;
 8002f8e:	4b64      	ldr	r3, [pc, #400]	; (8003120 <calc_angles+0x510>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fad8 	bl	8000548 <__aeabi_f2d>
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	4b61      	ldr	r3, [pc, #388]	; (8003124 <calc_angles+0x514>)
 8002f9e:	f7fd fb2b 	bl	80005f8 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	461d      	mov	r5, r3
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <calc_angles+0x518>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd faca 	bl	8000548 <__aeabi_f2d>
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <calc_angles+0x514>)
 8002fba:	f7fd fb1d 	bl	80005f8 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7fd f961 	bl	800028c <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fde9 	bl	8000ba8 <__aeabi_d2f>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4a51      	ldr	r2, [pc, #324]	; (8003120 <calc_angles+0x510>)
 8002fda:	6053      	str	r3, [r2, #4]
 8002fdc:	e00a      	b.n	8002ff4 <calc_angles+0x3e4>
  }
  else {
    // At very first start, init gyro angles with accelerometer angles
    gyro_angle[X] = acc_angle[X];
 8002fde:	4b52      	ldr	r3, [pc, #328]	; (8003128 <calc_angles+0x518>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4f      	ldr	r2, [pc, #316]	; (8003120 <calc_angles+0x510>)
 8002fe4:	6013      	str	r3, [r2, #0]
    gyro_angle[Y] = acc_angle[Y];
 8002fe6:	4b50      	ldr	r3, [pc, #320]	; (8003128 <calc_angles+0x518>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4a4d      	ldr	r2, [pc, #308]	; (8003120 <calc_angles+0x510>)
 8002fec:	6053      	str	r3, [r2, #4]

    initialized = 1;
 8002fee:	4b4f      	ldr	r3, [pc, #316]	; (800312c <calc_angles+0x51c>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
  }

  // To dampen the pitch and roll angles a complementary filter is used
  measures[ROLL] = measures[ROLL] * 0.9 + gyro_angle[X] * 0.1;
 8002ff4:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <calc_angles+0x520>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd faa5 	bl	8000548 <__aeabi_f2d>
 8002ffe:	a342      	add	r3, pc, #264	; (adr r3, 8003108 <calc_angles+0x4f8>)
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f7fd faf8 	bl	80005f8 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4614      	mov	r4, r2
 800300e:	461d      	mov	r5, r3
 8003010:	4b43      	ldr	r3, [pc, #268]	; (8003120 <calc_angles+0x510>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fa97 	bl	8000548 <__aeabi_f2d>
 800301a:	a33d      	add	r3, pc, #244	; (adr r3, 8003110 <calc_angles+0x500>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f7fd faea 	bl	80005f8 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd f92e 	bl	800028c <__adddf3>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	f7fd fdb6 	bl	8000ba8 <__aeabi_d2f>
 800303c:	4603      	mov	r3, r0
 800303e:	4a3c      	ldr	r2, [pc, #240]	; (8003130 <calc_angles+0x520>)
 8003040:	6093      	str	r3, [r2, #8]
  measures[PITCH] = measures[PITCH] * 0.9 + gyro_angle[Y] * 0.1;
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <calc_angles+0x520>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fa7e 	bl	8000548 <__aeabi_f2d>
 800304c:	a32e      	add	r3, pc, #184	; (adr r3, 8003108 <calc_angles+0x4f8>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd fad1 	bl	80005f8 <__aeabi_dmul>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4614      	mov	r4, r2
 800305c:	461d      	mov	r5, r3
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <calc_angles+0x510>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa70 	bl	8000548 <__aeabi_f2d>
 8003068:	a329      	add	r3, pc, #164	; (adr r3, 8003110 <calc_angles+0x500>)
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f7fd fac3 	bl	80005f8 <__aeabi_dmul>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4620      	mov	r0, r4
 8003078:	4629      	mov	r1, r5
 800307a:	f7fd f907 	bl	800028c <__adddf3>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f7fd fd8f 	bl	8000ba8 <__aeabi_d2f>
 800308a:	4603      	mov	r3, r0
 800308c:	4a28      	ldr	r2, [pc, #160]	; (8003130 <calc_angles+0x520>)
 800308e:	6053      	str	r3, [r2, #4]
  measures[YAW] = -g_gz / SSF_GYRO; // Store the angular motion for this axis
 8003090:	4b28      	ldr	r3, [pc, #160]	; (8003134 <calc_angles+0x524>)
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	eeb1 7a67 	vneg.f32	s14, s15
 800309a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8003138 <calc_angles+0x528>
 800309e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <calc_angles+0x520>)
 80030a4:	edc3 7a00 	vstr	s15, [r3]

  // Norm [-1, 1]
  g_angle_x = -measures[PITCH];
 80030a8:	4b21      	ldr	r3, [pc, #132]	; (8003130 <calc_angles+0x520>)
 80030aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ae:	eef1 7a67 	vneg.f32	s15, s15
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <calc_angles+0x52c>)
 80030b4:	edc3 7a00 	vstr	s15, [r3]
  g_angle_y = measures[ROLL];
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <calc_angles+0x520>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <calc_angles+0x530>)
 80030be:	6013      	str	r3, [r2, #0]
  g_angle_z += measures[YAW]*0.001;
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <calc_angles+0x534>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fa3f 	bl	8000548 <__aeabi_f2d>
 80030ca:	4604      	mov	r4, r0
 80030cc:	460d      	mov	r5, r1
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <calc_angles+0x520>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa38 	bl	8000548 <__aeabi_f2d>
 80030d8:	a30f      	add	r3, pc, #60	; (adr r3, 8003118 <calc_angles+0x508>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd fa8b 	bl	80005f8 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7fd f8cf 	bl	800028c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fd57 	bl	8000ba8 <__aeabi_d2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a11      	ldr	r2, [pc, #68]	; (8003144 <calc_angles+0x534>)
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003106:	bf00      	nop
 8003108:	cccccccd 	.word	0xcccccccd
 800310c:	3feccccc 	.word	0x3feccccc
 8003110:	9999999a 	.word	0x9999999a
 8003114:	3fb99999 	.word	0x3fb99999
 8003118:	d2f1a9fc 	.word	0xd2f1a9fc
 800311c:	3f50624d 	.word	0x3f50624d
 8003120:	2000068c 	.word	0x2000068c
 8003124:	3fe00000 	.word	0x3fe00000
 8003128:	20000698 	.word	0x20000698
 800312c:	200006b4 	.word	0x200006b4
 8003130:	200006a4 	.word	0x200006a4
 8003134:	20000688 	.word	0x20000688
 8003138:	42830000 	.word	0x42830000
 800313c:	200006b8 	.word	0x200006b8
 8003140:	200006bc 	.word	0x200006bc
 8003144:	200006c0 	.word	0x200006c0

08003148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800314c:	e7fe      	b.n	800314c <NMI_Handler+0x4>

0800314e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003152:	e7fe      	b.n	8003152 <HardFault_Handler+0x4>

08003154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <MemManage_Handler+0x4>

0800315a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800315e:	e7fe      	b.n	800315e <BusFault_Handler+0x4>

08003160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <UsageFault_Handler+0x4>

08003166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003194:	f001 f922 	bl	80043dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}
 800319c:	0000      	movs	r0, r0
	...

080031a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031a0:	b5b0      	push	{r4, r5, r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  // Read MPU6050 values
  SD_MPU6050_ReadAll(&hi2c1, &g_dev1);
 80031a6:	49d2      	ldr	r1, [pc, #840]	; (80034f0 <TIM3_IRQHandler+0x350>)
 80031a8:	48d2      	ldr	r0, [pc, #840]	; (80034f4 <TIM3_IRQHandler+0x354>)
 80031aa:	f7fe ffad 	bl	8002108 <SD_MPU6050_ReadAll>
  HMC5883L_getHeading(&g_mx, &g_my, &g_mz);
 80031ae:	4ad2      	ldr	r2, [pc, #840]	; (80034f8 <TIM3_IRQHandler+0x358>)
 80031b0:	49d2      	ldr	r1, [pc, #840]	; (80034fc <TIM3_IRQHandler+0x35c>)
 80031b2:	48d3      	ldr	r0, [pc, #844]	; (8003500 <TIM3_IRQHandler+0x360>)
 80031b4:	f7fd ff56 	bl	8001064 <HMC5883L_getHeading>

  // Raw 6-axis, remove noise
  g_ax = SimpleKalmanFilter_updateEstimate(&g_filters[0], g_dev1.Accelerometer_X) + g_ax_offset;
 80031b8:	4bcd      	ldr	r3, [pc, #820]	; (80034f0 <TIM3_IRQHandler+0x350>)
 80031ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ca:	48ce      	ldr	r0, [pc, #824]	; (8003504 <TIM3_IRQHandler+0x364>)
 80031cc:	f7fd ffaf 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80031d0:	eeb0 7a40 	vmov.f32	s14, s0
 80031d4:	4bcc      	ldr	r3, [pc, #816]	; (8003508 <TIM3_IRQHandler+0x368>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031de:	4bcb      	ldr	r3, [pc, #812]	; (800350c <TIM3_IRQHandler+0x36c>)
 80031e0:	edc3 7a00 	vstr	s15, [r3]
  g_ay = SimpleKalmanFilter_updateEstimate(&g_filters[1], g_dev1.Accelerometer_Y) + g_ay_offset;
 80031e4:	4bc2      	ldr	r3, [pc, #776]	; (80034f0 <TIM3_IRQHandler+0x350>)
 80031e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	48c6      	ldr	r0, [pc, #792]	; (8003510 <TIM3_IRQHandler+0x370>)
 80031f8:	f7fd ff99 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80031fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003200:	4bc4      	ldr	r3, [pc, #784]	; (8003514 <TIM3_IRQHandler+0x374>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320a:	4bc3      	ldr	r3, [pc, #780]	; (8003518 <TIM3_IRQHandler+0x378>)
 800320c:	edc3 7a00 	vstr	s15, [r3]
  g_az = SimpleKalmanFilter_updateEstimate(&g_filters[2], g_dev1.Accelerometer_Z) + g_az_offset;
 8003210:	4bb7      	ldr	r3, [pc, #732]	; (80034f0 <TIM3_IRQHandler+0x350>)
 8003212:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321e:	eeb0 0a67 	vmov.f32	s0, s15
 8003222:	48be      	ldr	r0, [pc, #760]	; (800351c <TIM3_IRQHandler+0x37c>)
 8003224:	f7fd ff83 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8003228:	eeb0 7a40 	vmov.f32	s14, s0
 800322c:	4bbc      	ldr	r3, [pc, #752]	; (8003520 <TIM3_IRQHandler+0x380>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003236:	4bbb      	ldr	r3, [pc, #748]	; (8003524 <TIM3_IRQHandler+0x384>)
 8003238:	edc3 7a00 	vstr	s15, [r3]
  g_gx = SimpleKalmanFilter_updateEstimate(&g_filters[3], g_dev1.Gyroscope_X) + g_gx_offset;
 800323c:	4bac      	ldr	r3, [pc, #688]	; (80034f0 <TIM3_IRQHandler+0x350>)
 800323e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800324a:	eeb0 0a67 	vmov.f32	s0, s15
 800324e:	48b6      	ldr	r0, [pc, #728]	; (8003528 <TIM3_IRQHandler+0x388>)
 8003250:	f7fd ff6d 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8003254:	eeb0 7a40 	vmov.f32	s14, s0
 8003258:	4bb4      	ldr	r3, [pc, #720]	; (800352c <TIM3_IRQHandler+0x38c>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003262:	4bb3      	ldr	r3, [pc, #716]	; (8003530 <TIM3_IRQHandler+0x390>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
  g_gy = SimpleKalmanFilter_updateEstimate(&g_filters[4], g_dev1.Gyroscope_Y) + g_gy_offset;
 8003268:	4ba1      	ldr	r3, [pc, #644]	; (80034f0 <TIM3_IRQHandler+0x350>)
 800326a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003276:	eeb0 0a67 	vmov.f32	s0, s15
 800327a:	48ae      	ldr	r0, [pc, #696]	; (8003534 <TIM3_IRQHandler+0x394>)
 800327c:	f7fd ff57 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8003280:	eeb0 7a40 	vmov.f32	s14, s0
 8003284:	4bac      	ldr	r3, [pc, #688]	; (8003538 <TIM3_IRQHandler+0x398>)
 8003286:	edd3 7a00 	vldr	s15, [r3]
 800328a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328e:	4bab      	ldr	r3, [pc, #684]	; (800353c <TIM3_IRQHandler+0x39c>)
 8003290:	edc3 7a00 	vstr	s15, [r3]
  g_gz = SimpleKalmanFilter_updateEstimate(&g_filters[5], g_dev1.Gyroscope_Z) + g_gz_offset;
 8003294:	4b96      	ldr	r3, [pc, #600]	; (80034f0 <TIM3_IRQHandler+0x350>)
 8003296:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a2:	eeb0 0a67 	vmov.f32	s0, s15
 80032a6:	48a6      	ldr	r0, [pc, #664]	; (8003540 <TIM3_IRQHandler+0x3a0>)
 80032a8:	f7fd ff41 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80032ac:	eeb0 7a40 	vmov.f32	s14, s0
 80032b0:	4ba4      	ldr	r3, [pc, #656]	; (8003544 <TIM3_IRQHandler+0x3a4>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	4ba3      	ldr	r3, [pc, #652]	; (8003548 <TIM3_IRQHandler+0x3a8>)
 80032bc:	edc3 7a00 	vstr	s15, [r3]

  calc_angles();
 80032c0:	f7ff fca6 	bl	8002c10 <calc_angles>

  g_gyro_x = limit(g_gx, -2000, 2000) / 2000;
 80032c4:	4b9a      	ldr	r3, [pc, #616]	; (8003530 <TIM3_IRQHandler+0x390>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 800354c <TIM3_IRQHandler+0x3ac>
 80032ce:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8003550 <TIM3_IRQHandler+0x3b0>
 80032d2:	eeb0 0a67 	vmov.f32	s0, s15
 80032d6:	f7ff fc55 	bl	8002b84 <limit>
 80032da:	eeb0 7a40 	vmov.f32	s14, s0
 80032de:	eddf 6a9b 	vldr	s13, [pc, #620]	; 800354c <TIM3_IRQHandler+0x3ac>
 80032e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032e6:	4b9b      	ldr	r3, [pc, #620]	; (8003554 <TIM3_IRQHandler+0x3b4>)
 80032e8:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_y = limit(g_gy, -2000, 2000) / 2000;
 80032ec:	4b93      	ldr	r3, [pc, #588]	; (800353c <TIM3_IRQHandler+0x39c>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ed9f 1a96 	vldr	s2, [pc, #600]	; 800354c <TIM3_IRQHandler+0x3ac>
 80032f6:	eddf 0a96 	vldr	s1, [pc, #600]	; 8003550 <TIM3_IRQHandler+0x3b0>
 80032fa:	eeb0 0a67 	vmov.f32	s0, s15
 80032fe:	f7ff fc41 	bl	8002b84 <limit>
 8003302:	eeb0 7a40 	vmov.f32	s14, s0
 8003306:	eddf 6a91 	vldr	s13, [pc, #580]	; 800354c <TIM3_IRQHandler+0x3ac>
 800330a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800330e:	4b92      	ldr	r3, [pc, #584]	; (8003558 <TIM3_IRQHandler+0x3b8>)
 8003310:	edc3 7a00 	vstr	s15, [r3]
  g_gyro_z = limit(g_gz, -2000, 2000) / 2000;
 8003314:	4b8c      	ldr	r3, [pc, #560]	; (8003548 <TIM3_IRQHandler+0x3a8>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800354c <TIM3_IRQHandler+0x3ac>
 800331e:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8003550 <TIM3_IRQHandler+0x3b0>
 8003322:	eeb0 0a67 	vmov.f32	s0, s15
 8003326:	f7ff fc2d 	bl	8002b84 <limit>
 800332a:	eeb0 7a40 	vmov.f32	s14, s0
 800332e:	eddf 6a87 	vldr	s13, [pc, #540]	; 800354c <TIM3_IRQHandler+0x3ac>
 8003332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003336:	4b89      	ldr	r3, [pc, #548]	; (800355c <TIM3_IRQHandler+0x3bc>)
 8003338:	edc3 7a00 	vstr	s15, [r3]

  // Control pitch, roll, yaw using offsets
  float angle_x = limit(g_angle_x, -90, 90) / 90 - 0.01*g_pitch;
 800333c:	4b88      	ldr	r3, [pc, #544]	; (8003560 <TIM3_IRQHandler+0x3c0>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8003564 <TIM3_IRQHandler+0x3c4>
 8003346:	eddf 0a88 	vldr	s1, [pc, #544]	; 8003568 <TIM3_IRQHandler+0x3c8>
 800334a:	eeb0 0a67 	vmov.f32	s0, s15
 800334e:	f7ff fc19 	bl	8002b84 <limit>
 8003352:	eef0 7a40 	vmov.f32	s15, s0
 8003356:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003564 <TIM3_IRQHandler+0x3c4>
 800335a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800335e:	ee16 0a90 	vmov	r0, s13
 8003362:	f7fd f8f1 	bl	8000548 <__aeabi_f2d>
 8003366:	4604      	mov	r4, r0
 8003368:	460d      	mov	r5, r1
 800336a:	4b80      	ldr	r3, [pc, #512]	; (800356c <TIM3_IRQHandler+0x3cc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f8ea 	bl	8000548 <__aeabi_f2d>
 8003374:	a35c      	add	r3, pc, #368	; (adr r3, 80034e8 <TIM3_IRQHandler+0x348>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd f93d 	bl	80005f8 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fc ff7f 	bl	8000288 <__aeabi_dsub>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f7fd fc09 	bl	8000ba8 <__aeabi_d2f>
 8003396:	4603      	mov	r3, r0
 8003398:	60fb      	str	r3, [r7, #12]
  float angle_y = limit(g_angle_y, -90, 90) / 90 - 0.01*g_roll;
 800339a:	4b75      	ldr	r3, [pc, #468]	; (8003570 <TIM3_IRQHandler+0x3d0>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8003564 <TIM3_IRQHandler+0x3c4>
 80033a4:	eddf 0a70 	vldr	s1, [pc, #448]	; 8003568 <TIM3_IRQHandler+0x3c8>
 80033a8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ac:	f7ff fbea 	bl	8002b84 <limit>
 80033b0:	eef0 7a40 	vmov.f32	s15, s0
 80033b4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003564 <TIM3_IRQHandler+0x3c4>
 80033b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033bc:	ee16 0a90 	vmov	r0, s13
 80033c0:	f7fd f8c2 	bl	8000548 <__aeabi_f2d>
 80033c4:	4604      	mov	r4, r0
 80033c6:	460d      	mov	r5, r1
 80033c8:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <TIM3_IRQHandler+0x3d4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8bb 	bl	8000548 <__aeabi_f2d>
 80033d2:	a345      	add	r3, pc, #276	; (adr r3, 80034e8 <TIM3_IRQHandler+0x348>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fd f90e 	bl	80005f8 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4620      	mov	r0, r4
 80033e2:	4629      	mov	r1, r5
 80033e4:	f7fc ff50 	bl	8000288 <__aeabi_dsub>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	f7fd fbda 	bl	8000ba8 <__aeabi_d2f>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60bb      	str	r3, [r7, #8]
  float angle_z = limit(g_angle_z, -90, 90) / 90 - 0.01*g_yaw;
 80033f8:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <TIM3_IRQHandler+0x3d8>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8003564 <TIM3_IRQHandler+0x3c4>
 8003402:	eddf 0a59 	vldr	s1, [pc, #356]	; 8003568 <TIM3_IRQHandler+0x3c8>
 8003406:	eeb0 0a67 	vmov.f32	s0, s15
 800340a:	f7ff fbbb 	bl	8002b84 <limit>
 800340e:	eef0 7a40 	vmov.f32	s15, s0
 8003412:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003564 <TIM3_IRQHandler+0x3c4>
 8003416:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800341a:	ee16 0a90 	vmov	r0, s13
 800341e:	f7fd f893 	bl	8000548 <__aeabi_f2d>
 8003422:	4604      	mov	r4, r0
 8003424:	460d      	mov	r5, r1
 8003426:	4b55      	ldr	r3, [pc, #340]	; (800357c <TIM3_IRQHandler+0x3dc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f88c 	bl	8000548 <__aeabi_f2d>
 8003430:	a32d      	add	r3, pc, #180	; (adr r3, 80034e8 <TIM3_IRQHandler+0x348>)
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f7fd f8df 	bl	80005f8 <__aeabi_dmul>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4620      	mov	r0, r4
 8003440:	4629      	mov	r1, r5
 8003442:	f7fc ff21 	bl	8000288 <__aeabi_dsub>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f7fd fbab 	bl	8000ba8 <__aeabi_d2f>
 8003452:	4603      	mov	r3, r0
 8003454:	607b      	str	r3, [r7, #4]

  if (g_thrust <= -99 && g_yaw <= -99
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <TIM3_IRQHandler+0x3e0>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8003584 <TIM3_IRQHandler+0x3e4>
 8003460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	d820      	bhi.n	80034ac <TIM3_IRQHandler+0x30c>
 800346a:	4b44      	ldr	r3, [pc, #272]	; (800357c <TIM3_IRQHandler+0x3dc>)
 800346c:	edd3 7a00 	vldr	s15, [r3]
 8003470:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003584 <TIM3_IRQHandler+0x3e4>
 8003474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d816      	bhi.n	80034ac <TIM3_IRQHandler+0x30c>
      && g_pitch <= -99 && g_roll >= 98) {
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <TIM3_IRQHandler+0x3cc>)
 8003480:	edd3 7a00 	vldr	s15, [r3]
 8003484:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003584 <TIM3_IRQHandler+0x3e4>
 8003488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003490:	d80c      	bhi.n	80034ac <TIM3_IRQHandler+0x30c>
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <TIM3_IRQHandler+0x3d4>)
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003588 <TIM3_IRQHandler+0x3e8>
 800349c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	db02      	blt.n	80034ac <TIM3_IRQHandler+0x30c>
    fly_mode = ready;
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <TIM3_IRQHandler+0x3ec>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
  }

  g_conn_lost_counter += 1;
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <TIM3_IRQHandler+0x3f0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a37      	ldr	r2, [pc, #220]	; (8003590 <TIM3_IRQHandler+0x3f0>)
 80034b4:	6013      	str	r3, [r2, #0]
  if (g_conn_lost_counter > MAX_LOST_CONN_COUNTER || g_conn_lost_counter < 0) {
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <TIM3_IRQHandler+0x3f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b32      	cmp	r3, #50	; 0x32
 80034bc:	dc03      	bgt.n	80034c6 <TIM3_IRQHandler+0x326>
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <TIM3_IRQHandler+0x3f0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da72      	bge.n	80035ac <TIM3_IRQHandler+0x40c>
    g_I_pitch_accumulated = 0;
 80034c6:	4b33      	ldr	r3, [pc, #204]	; (8003594 <TIM3_IRQHandler+0x3f4>)
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
    g_I_roll_accumulated = 0;
 80034ce:	4b32      	ldr	r3, [pc, #200]	; (8003598 <TIM3_IRQHandler+0x3f8>)
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
    g_I_yaw_accumulated = 0;
 80034d6:	4b31      	ldr	r3, [pc, #196]	; (800359c <TIM3_IRQHandler+0x3fc>)
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
    ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80034de:	230f      	movs	r3, #15
 80034e0:	220f      	movs	r2, #15
 80034e2:	210f      	movs	r1, #15
 80034e4:	e05c      	b.n	80035a0 <TIM3_IRQHandler+0x400>
 80034e6:	bf00      	nop
 80034e8:	47ae147b 	.word	0x47ae147b
 80034ec:	3f847ae1 	.word	0x3f847ae1
 80034f0:	200004ec 	.word	0x200004ec
 80034f4:	200000c0 	.word	0x200000c0
 80034f8:	200006d4 	.word	0x200006d4
 80034fc:	200006d2 	.word	0x200006d2
 8003500:	200006d0 	.word	0x200006d0
 8003504:	2000036c 	.word	0x2000036c
 8003508:	20000008 	.word	0x20000008
 800350c:	20000674 	.word	0x20000674
 8003510:	20000384 	.word	0x20000384
 8003514:	2000000c 	.word	0x2000000c
 8003518:	20000678 	.word	0x20000678
 800351c:	2000039c 	.word	0x2000039c
 8003520:	20000010 	.word	0x20000010
 8003524:	2000067c 	.word	0x2000067c
 8003528:	200003b4 	.word	0x200003b4
 800352c:	20000014 	.word	0x20000014
 8003530:	20000680 	.word	0x20000680
 8003534:	200003cc 	.word	0x200003cc
 8003538:	20000018 	.word	0x20000018
 800353c:	20000684 	.word	0x20000684
 8003540:	200003e4 	.word	0x200003e4
 8003544:	2000001c 	.word	0x2000001c
 8003548:	20000688 	.word	0x20000688
 800354c:	44fa0000 	.word	0x44fa0000
 8003550:	c4fa0000 	.word	0xc4fa0000
 8003554:	200006c4 	.word	0x200006c4
 8003558:	200006c8 	.word	0x200006c8
 800355c:	200006cc 	.word	0x200006cc
 8003560:	200006b8 	.word	0x200006b8
 8003564:	42b40000 	.word	0x42b40000
 8003568:	c2b40000 	.word	0xc2b40000
 800356c:	2000075c 	.word	0x2000075c
 8003570:	200006bc 	.word	0x200006bc
 8003574:	20000760 	.word	0x20000760
 8003578:	200006c0 	.word	0x200006c0
 800357c:	20000764 	.word	0x20000764
 8003580:	20000758 	.word	0x20000758
 8003584:	c2c60000 	.word	0xc2c60000
 8003588:	42c40000 	.word	0x42c40000
 800358c:	200006d6 	.word	0x200006d6
 8003590:	20000004 	.word	0x20000004
 8003594:	200006e0 	.word	0x200006e0
 8003598:	200006f0 	.word	0x200006f0
 800359c:	20000700 	.word	0x20000700
 80035a0:	200f      	movs	r0, #15
 80035a2:	f7ff fb19 	bl	8002bd8 <ctl_motors_speed>
    fly_mode = init;
 80035a6:	4b62      	ldr	r3, [pc, #392]	; (8003730 <TIM3_IRQHandler+0x590>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
  }

  switch (fly_mode) {
 80035ac:	4b60      	ldr	r3, [pc, #384]	; (8003730 <TIM3_IRQHandler+0x590>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	f200 8356 	bhi.w	8003c62 <TIM3_IRQHandler+0xac2>
 80035b6:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <TIM3_IRQHandler+0x41c>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035d9 	.word	0x080035d9
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	08003645 	.word	0x08003645
 80035c8:	0800365b 	.word	0x0800365b
 80035cc:	08003671 	.word	0x08003671
 80035d0:	08003687 	.word	0x08003687
 80035d4:	0800375d 	.word	0x0800375d
    case init:
      g_I_pitch_accumulated = 0;
 80035d8:	4b56      	ldr	r3, [pc, #344]	; (8003734 <TIM3_IRQHandler+0x594>)
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 80035e0:	4b55      	ldr	r3, [pc, #340]	; (8003738 <TIM3_IRQHandler+0x598>)
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 80035e8:	4b54      	ldr	r3, [pc, #336]	; (800373c <TIM3_IRQHandler+0x59c>)
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(INIT_SPEED, INIT_SPEED, INIT_SPEED, INIT_SPEED);
 80035f0:	230f      	movs	r3, #15
 80035f2:	220f      	movs	r2, #15
 80035f4:	210f      	movs	r1, #15
 80035f6:	200f      	movs	r0, #15
 80035f8:	f7ff faee 	bl	8002bd8 <ctl_motors_speed>
      break;
 80035fc:	e331      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
    case ready:
      g_I_pitch_accumulated = 0;
 80035fe:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <TIM3_IRQHandler+0x594>)
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
      g_I_roll_accumulated = 0;
 8003606:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <TIM3_IRQHandler+0x598>)
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
      g_I_yaw_accumulated = 0;
 800360e:	4b4b      	ldr	r3, [pc, #300]	; (800373c <TIM3_IRQHandler+0x59c>)
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003616:	f240 2323 	movw	r3, #547	; 0x223
 800361a:	f240 2223 	movw	r2, #547	; 0x223
 800361e:	f240 2123 	movw	r1, #547	; 0x223
 8003622:	f240 2023 	movw	r0, #547	; 0x223
 8003626:	f7ff fad7 	bl	8002bd8 <ctl_motors_speed>
      if (g_thrust > 0) {
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <TIM3_IRQHandler+0x5a0>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003638:	dc00      	bgt.n	800363c <TIM3_IRQHandler+0x49c>
        fly_mode = testing_2;
      }

      break;
 800363a:	e312      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
        fly_mode = testing_2;
 800363c:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <TIM3_IRQHandler+0x590>)
 800363e:	2206      	movs	r2, #6
 8003640:	701a      	strb	r2, [r3, #0]
      break;
 8003642:	e30e      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
    case holding:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003644:	f240 2323 	movw	r3, #547	; 0x223
 8003648:	f240 2223 	movw	r2, #547	; 0x223
 800364c:	f240 2123 	movw	r1, #547	; 0x223
 8003650:	f240 2023 	movw	r0, #547	; 0x223
 8003654:	f7ff fac0 	bl	8002bd8 <ctl_motors_speed>
      break;
 8003658:	e303      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
    case moving:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 800365a:	f240 2323 	movw	r3, #547	; 0x223
 800365e:	f240 2223 	movw	r2, #547	; 0x223
 8003662:	f240 2123 	movw	r1, #547	; 0x223
 8003666:	f240 2023 	movw	r0, #547	; 0x223
 800366a:	f7ff fab5 	bl	8002bd8 <ctl_motors_speed>
      break;
 800366e:	e2f8      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
    case landing:
      ctl_motors_speed(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8003670:	f240 2323 	movw	r3, #547	; 0x223
 8003674:	f240 2223 	movw	r2, #547	; 0x223
 8003678:	f240 2123 	movw	r1, #547	; 0x223
 800367c:	f240 2023 	movw	r0, #547	; 0x223
 8003680:	f7ff faaa 	bl	8002bd8 <ctl_motors_speed>
      break;
 8003684:	e2ed      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
    case testing_1:
      g_sig1 = MIN_SPEED + g_thrust;
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <TIM3_IRQHandler+0x5a0>)
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003744 <TIM3_IRQHandler+0x5a4>
 8003690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003694:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <TIM3_IRQHandler+0x5a8>)
 8003696:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = MIN_SPEED + g_thrust;
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <TIM3_IRQHandler+0x5a0>)
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003744 <TIM3_IRQHandler+0x5a4>
 80036a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <TIM3_IRQHandler+0x5ac>)
 80036aa:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = MIN_SPEED + g_thrust;
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <TIM3_IRQHandler+0x5a0>)
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003744 <TIM3_IRQHandler+0x5a4>
 80036b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036bc:	4b24      	ldr	r3, [pc, #144]	; (8003750 <TIM3_IRQHandler+0x5b0>)
 80036be:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = MIN_SPEED + g_thrust;
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <TIM3_IRQHandler+0x5a0>)
 80036c4:	edd3 7a00 	vldr	s15, [r3]
 80036c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003744 <TIM3_IRQHandler+0x5a4>
 80036cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <TIM3_IRQHandler+0x5b4>)
 80036d2:	edc3 7a00 	vstr	s15, [r3]
      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <TIM3_IRQHandler+0x5a8>)
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <TIM3_IRQHandler+0x5ac>)
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80036ea:	4b19      	ldr	r3, [pc, #100]	; (8003750 <TIM3_IRQHandler+0x5b0>)
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <TIM3_IRQHandler+0x5b4>)
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fe:	ee17 3a90 	vmov	r3, s15
 8003702:	ee16 2a10 	vmov	r2, s12
 8003706:	ee16 1a90 	vmov	r1, s13
 800370a:	ee17 0a10 	vmov	r0, s14
 800370e:	f7ff fa63 	bl	8002bd8 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <TIM3_IRQHandler+0x5a0>)
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003758 <TIM3_IRQHandler+0x5b8>
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	d900      	bls.n	8003728 <TIM3_IRQHandler+0x588>
        fly_mode = init;
      }

      break;
 8003726:	e29c      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
        fly_mode = init;
 8003728:	4b01      	ldr	r3, [pc, #4]	; (8003730 <TIM3_IRQHandler+0x590>)
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
      break;
 800372e:	e298      	b.n	8003c62 <TIM3_IRQHandler+0xac2>
 8003730:	200006d6 	.word	0x200006d6
 8003734:	200006e0 	.word	0x200006e0
 8003738:	200006f0 	.word	0x200006f0
 800373c:	20000700 	.word	0x20000700
 8003740:	20000758 	.word	0x20000758
 8003744:	4408c000 	.word	0x4408c000
 8003748:	20000708 	.word	0x20000708
 800374c:	2000070c 	.word	0x2000070c
 8003750:	20000710 	.word	0x20000710
 8003754:	20000714 	.word	0x20000714
 8003758:	c2c60000 	.word	0xc2c60000
    case testing_2:
      g_P_pitch = angle_x*g_P_pitch_gain;
 800375c:	4bd0      	ldr	r3, [pc, #832]	; (8003aa0 <TIM3_IRQHandler+0x900>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003768:	edd7 7a03 	vldr	s15, [r7, #12]
 800376c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003770:	4bcc      	ldr	r3, [pc, #816]	; (8003aa4 <TIM3_IRQHandler+0x904>)
 8003772:	edc3 7a00 	vstr	s15, [r3]
      g_I_pitch_accumulated += angle_x*ACCUMULATION_TIME; // 0.005 = 1/FREQ
 8003776:	4bcc      	ldr	r3, [pc, #816]	; (8003aa8 <TIM3_IRQHandler+0x908>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fc fee4 	bl	8000548 <__aeabi_f2d>
 8003780:	4604      	mov	r4, r0
 8003782:	460d      	mov	r5, r1
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7fc fedf 	bl	8000548 <__aeabi_f2d>
 800378a:	a3c3      	add	r3, pc, #780	; (adr r3, 8003a98 <TIM3_IRQHandler+0x8f8>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f7fc ff32 	bl	80005f8 <__aeabi_dmul>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4620      	mov	r0, r4
 800379a:	4629      	mov	r1, r5
 800379c:	f7fc fd76 	bl	800028c <__adddf3>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7fd f9fe 	bl	8000ba8 <__aeabi_d2f>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4abe      	ldr	r2, [pc, #760]	; (8003aa8 <TIM3_IRQHandler+0x908>)
 80037b0:	6013      	str	r3, [r2, #0]
      g_I_pitch = limit(g_I_pitch_accumulated*g_I_pitch_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 80037b2:	4bbe      	ldr	r3, [pc, #760]	; (8003aac <TIM3_IRQHandler+0x90c>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037be:	4bba      	ldr	r3, [pc, #744]	; (8003aa8 <TIM3_IRQHandler+0x908>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c8:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 8003ab0 <TIM3_IRQHandler+0x910>
 80037cc:	eddf 0ab9 	vldr	s1, [pc, #740]	; 8003ab4 <TIM3_IRQHandler+0x914>
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	f7ff f9d6 	bl	8002b84 <limit>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	4bb6      	ldr	r3, [pc, #728]	; (8003ab8 <TIM3_IRQHandler+0x918>)
 80037de:	edc3 7a00 	vstr	s15, [r3]
      g_D_pitch = g_gyro_y*g_D_pitch_gain;
 80037e2:	4bb6      	ldr	r3, [pc, #728]	; (8003abc <TIM3_IRQHandler+0x91c>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ee:	4bb4      	ldr	r3, [pc, #720]	; (8003ac0 <TIM3_IRQHandler+0x920>)
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f8:	4bb2      	ldr	r3, [pc, #712]	; (8003ac4 <TIM3_IRQHandler+0x924>)
 80037fa:	edc3 7a00 	vstr	s15, [r3]

      g_P_roll = angle_y*g_P_roll_gain;
 80037fe:	4bb2      	ldr	r3, [pc, #712]	; (8003ac8 <TIM3_IRQHandler+0x928>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380a:	edd7 7a02 	vldr	s15, [r7, #8]
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	4bae      	ldr	r3, [pc, #696]	; (8003acc <TIM3_IRQHandler+0x92c>)
 8003814:	edc3 7a00 	vstr	s15, [r3]
      g_I_roll_accumulated += angle_y*ACCUMULATION_TIME;
 8003818:	4bad      	ldr	r3, [pc, #692]	; (8003ad0 <TIM3_IRQHandler+0x930>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fc fe93 	bl	8000548 <__aeabi_f2d>
 8003822:	4604      	mov	r4, r0
 8003824:	460d      	mov	r5, r1
 8003826:	68b8      	ldr	r0, [r7, #8]
 8003828:	f7fc fe8e 	bl	8000548 <__aeabi_f2d>
 800382c:	a39a      	add	r3, pc, #616	; (adr r3, 8003a98 <TIM3_IRQHandler+0x8f8>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f7fc fee1 	bl	80005f8 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fd25 	bl	800028c <__adddf3>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f7fd f9ad 	bl	8000ba8 <__aeabi_d2f>
 800384e:	4603      	mov	r3, r0
 8003850:	4a9f      	ldr	r2, [pc, #636]	; (8003ad0 <TIM3_IRQHandler+0x930>)
 8003852:	6013      	str	r3, [r2, #0]
      g_I_roll = limit(g_I_roll_accumulated*g_I_roll_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 8003854:	4b9f      	ldr	r3, [pc, #636]	; (8003ad4 <TIM3_IRQHandler+0x934>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003860:	4b9b      	ldr	r3, [pc, #620]	; (8003ad0 <TIM3_IRQHandler+0x930>)
 8003862:	edd3 7a00 	vldr	s15, [r3]
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8003ab0 <TIM3_IRQHandler+0x910>
 800386e:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003ab4 <TIM3_IRQHandler+0x914>
 8003872:	eeb0 0a67 	vmov.f32	s0, s15
 8003876:	f7ff f985 	bl	8002b84 <limit>
 800387a:	eef0 7a40 	vmov.f32	s15, s0
 800387e:	4b96      	ldr	r3, [pc, #600]	; (8003ad8 <TIM3_IRQHandler+0x938>)
 8003880:	edc3 7a00 	vstr	s15, [r3]
      g_D_roll = g_gyro_x*g_D_roll_gain;
 8003884:	4b95      	ldr	r3, [pc, #596]	; (8003adc <TIM3_IRQHandler+0x93c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003890:	4b93      	ldr	r3, [pc, #588]	; (8003ae0 <TIM3_IRQHandler+0x940>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	4b92      	ldr	r3, [pc, #584]	; (8003ae4 <TIM3_IRQHandler+0x944>)
 800389c:	edc3 7a00 	vstr	s15, [r3]

      g_P_yaw = angle_z*g_P_yaw_gain;
 80038a0:	4b91      	ldr	r3, [pc, #580]	; (8003ae8 <TIM3_IRQHandler+0x948>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80038b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b4:	4b8d      	ldr	r3, [pc, #564]	; (8003aec <TIM3_IRQHandler+0x94c>)
 80038b6:	edc3 7a00 	vstr	s15, [r3]
      g_I_yaw_accumulated += angle_z*ACCUMULATION_TIME;
 80038ba:	4b8d      	ldr	r3, [pc, #564]	; (8003af0 <TIM3_IRQHandler+0x950>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fc fe42 	bl	8000548 <__aeabi_f2d>
 80038c4:	4604      	mov	r4, r0
 80038c6:	460d      	mov	r5, r1
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fc fe3d 	bl	8000548 <__aeabi_f2d>
 80038ce:	a372      	add	r3, pc, #456	; (adr r3, 8003a98 <TIM3_IRQHandler+0x8f8>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fc fe90 	bl	80005f8 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4620      	mov	r0, r4
 80038de:	4629      	mov	r1, r5
 80038e0:	f7fc fcd4 	bl	800028c <__adddf3>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7fd f95c 	bl	8000ba8 <__aeabi_d2f>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4a7f      	ldr	r2, [pc, #508]	; (8003af0 <TIM3_IRQHandler+0x950>)
 80038f4:	6013      	str	r3, [r2, #0]
      g_I_yaw = limit(g_I_yaw_accumulated*g_I_yaw_gain, MIN_INTEGRAL, MAX_INTEGRAL);
 80038f6:	4b7f      	ldr	r3, [pc, #508]	; (8003af4 <TIM3_IRQHandler+0x954>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003902:	4b7b      	ldr	r3, [pc, #492]	; (8003af0 <TIM3_IRQHandler+0x950>)
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390c:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8003ab0 <TIM3_IRQHandler+0x910>
 8003910:	eddf 0a68 	vldr	s1, [pc, #416]	; 8003ab4 <TIM3_IRQHandler+0x914>
 8003914:	eeb0 0a67 	vmov.f32	s0, s15
 8003918:	f7ff f934 	bl	8002b84 <limit>
 800391c:	eef0 7a40 	vmov.f32	s15, s0
 8003920:	4b75      	ldr	r3, [pc, #468]	; (8003af8 <TIM3_IRQHandler+0x958>)
 8003922:	edc3 7a00 	vstr	s15, [r3]
      g_D_yaw = g_gyro_z*g_D_yaw_gain;
 8003926:	4b75      	ldr	r3, [pc, #468]	; (8003afc <TIM3_IRQHandler+0x95c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003932:	4b73      	ldr	r3, [pc, #460]	; (8003b00 <TIM3_IRQHandler+0x960>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393c:	4b71      	ldr	r3, [pc, #452]	; (8003b04 <TIM3_IRQHandler+0x964>)
 800393e:	edc3 7a00 	vstr	s15, [r3]

      int thrust = MIN_SPEED + g_thrust;
 8003942:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <TIM3_IRQHandler+0x968>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003b0c <TIM3_IRQHandler+0x96c>
 800394c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003954:	ee17 3a90 	vmov	r3, s15
 8003958:	603b      	str	r3, [r7, #0]

      g_sig1 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003964:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <TIM3_IRQHandler+0x904>)
 8003966:	edd3 6a00 	vldr	s13, [r3]
 800396a:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <TIM3_IRQHandler+0x918>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <TIM3_IRQHandler+0x924>)
 8003976:	edd3 7a00 	vldr	s15, [r3]
 800397a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003982:	4b52      	ldr	r3, [pc, #328]	; (8003acc <TIM3_IRQHandler+0x92c>)
 8003984:	edd3 6a00 	vldr	s13, [r3]
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <TIM3_IRQHandler+0x938>)
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003992:	4b54      	ldr	r3, [pc, #336]	; (8003ae4 <TIM3_IRQHandler+0x944>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039a0:	4b52      	ldr	r3, [pc, #328]	; (8003aec <TIM3_IRQHandler+0x94c>)
 80039a2:	edd3 6a00 	vldr	s13, [r3]
 80039a6:	4b54      	ldr	r3, [pc, #336]	; (8003af8 <TIM3_IRQHandler+0x958>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039b0:	4b54      	ldr	r3, [pc, #336]	; (8003b04 <TIM3_IRQHandler+0x964>)
 80039b2:	edd3 7a00 	vldr	s15, [r3]
 80039b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	4b54      	ldr	r3, [pc, #336]	; (8003b10 <TIM3_IRQHandler+0x970>)
 80039c0:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = thrust + (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ce:	4b35      	ldr	r3, [pc, #212]	; (8003aa4 <TIM3_IRQHandler+0x904>)
 80039d0:	edd3 6a00 	vldr	s13, [r3]
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <TIM3_IRQHandler+0x918>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <TIM3_IRQHandler+0x924>)
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ec:	4b37      	ldr	r3, [pc, #220]	; (8003acc <TIM3_IRQHandler+0x92c>)
 80039ee:	edd3 6a00 	vldr	s13, [r3]
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <TIM3_IRQHandler+0x938>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039fc:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <TIM3_IRQHandler+0x944>)
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <TIM3_IRQHandler+0x94c>)
 8003a0c:	edd3 6a00 	vldr	s13, [r3]
 8003a10:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <TIM3_IRQHandler+0x958>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a1a:	4b3a      	ldr	r3, [pc, #232]	; (8003b04 <TIM3_IRQHandler+0x964>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <TIM3_IRQHandler+0x974>)
 8003a2a:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) + (g_P_roll + g_I_roll + g_D_roll) + (g_P_yaw + g_I_yaw + g_D_yaw);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <TIM3_IRQHandler+0x904>)
 8003a3a:	edd3 6a00 	vldr	s13, [r3]
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <TIM3_IRQHandler+0x918>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a48:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <TIM3_IRQHandler+0x924>)
 8003a4a:	edd3 7a00 	vldr	s15, [r3]
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <TIM3_IRQHandler+0x92c>)
 8003a58:	edd3 6a00 	vldr	s13, [r3]
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <TIM3_IRQHandler+0x938>)
 8003a5e:	edd3 7a00 	vldr	s15, [r3]
 8003a62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a66:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <TIM3_IRQHandler+0x944>)
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <TIM3_IRQHandler+0x94c>)
 8003a76:	edd3 6a00 	vldr	s13, [r3]
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <TIM3_IRQHandler+0x958>)
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <TIM3_IRQHandler+0x964>)
 8003a86:	edd3 7a00 	vldr	s15, [r3]
 8003a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a92:	e041      	b.n	8003b18 <TIM3_IRQHandler+0x978>
 8003a94:	f3af 8000 	nop.w
 8003a98:	1eb851ec 	.word	0x1eb851ec
 8003a9c:	3fb1eb85 	.word	0x3fb1eb85
 8003aa0:	20000020 	.word	0x20000020
 8003aa4:	200006d8 	.word	0x200006d8
 8003aa8:	200006e0 	.word	0x200006e0
 8003aac:	20000021 	.word	0x20000021
 8003ab0:	42c80000 	.word	0x42c80000
 8003ab4:	c2c80000 	.word	0xc2c80000
 8003ab8:	200006dc 	.word	0x200006dc
 8003abc:	20000022 	.word	0x20000022
 8003ac0:	200006c8 	.word	0x200006c8
 8003ac4:	200006e4 	.word	0x200006e4
 8003ac8:	20000023 	.word	0x20000023
 8003acc:	200006e8 	.word	0x200006e8
 8003ad0:	200006f0 	.word	0x200006f0
 8003ad4:	20000024 	.word	0x20000024
 8003ad8:	200006ec 	.word	0x200006ec
 8003adc:	20000025 	.word	0x20000025
 8003ae0:	200006c4 	.word	0x200006c4
 8003ae4:	200006f4 	.word	0x200006f4
 8003ae8:	20000026 	.word	0x20000026
 8003aec:	200006f8 	.word	0x200006f8
 8003af0:	20000700 	.word	0x20000700
 8003af4:	20000027 	.word	0x20000027
 8003af8:	200006fc 	.word	0x200006fc
 8003afc:	20000028 	.word	0x20000028
 8003b00:	200006cc 	.word	0x200006cc
 8003b04:	20000704 	.word	0x20000704
 8003b08:	20000758 	.word	0x20000758
 8003b0c:	4408c000 	.word	0x4408c000
 8003b10:	20000708 	.word	0x20000708
 8003b14:	2000070c 	.word	0x2000070c
 8003b18:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <TIM3_IRQHandler+0xad0>)
 8003b1a:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = thrust - (g_P_pitch + g_I_pitch + g_D_pitch) - (g_P_roll + g_I_roll + g_D_roll) - (g_P_yaw + g_I_yaw + g_D_yaw);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b28:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <TIM3_IRQHandler+0xad4>)
 8003b2a:	edd3 6a00 	vldr	s13, [r3]
 8003b2e:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <TIM3_IRQHandler+0xad8>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <TIM3_IRQHandler+0xadc>)
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b46:	4b4e      	ldr	r3, [pc, #312]	; (8003c80 <TIM3_IRQHandler+0xae0>)
 8003b48:	edd3 6a00 	vldr	s13, [r3]
 8003b4c:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <TIM3_IRQHandler+0xae4>)
 8003b4e:	edd3 7a00 	vldr	s15, [r3]
 8003b52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b56:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <TIM3_IRQHandler+0xae8>)
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b64:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <TIM3_IRQHandler+0xaec>)
 8003b66:	edd3 6a00 	vldr	s13, [r3]
 8003b6a:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <TIM3_IRQHandler+0xaf0>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b74:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <TIM3_IRQHandler+0xaf4>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b82:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <TIM3_IRQHandler+0xaf8>)
 8003b84:	edc3 7a00 	vstr	s15, [r3]

      g_sig1 = limit(g_sig1, MIN_SPEED, MAX_SPEED);
 8003b88:	4b44      	ldr	r3, [pc, #272]	; (8003c9c <TIM3_IRQHandler+0xafc>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8003ca0 <TIM3_IRQHandler+0xb00>
 8003b92:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003ca4 <TIM3_IRQHandler+0xb04>
 8003b96:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9a:	f7fe fff3 	bl	8002b84 <limit>
 8003b9e:	eef0 7a40 	vmov.f32	s15, s0
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <TIM3_IRQHandler+0xafc>)
 8003ba4:	edc3 7a00 	vstr	s15, [r3]
      g_sig2 = limit(g_sig2, MIN_SPEED, MAX_SPEED);
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <TIM3_IRQHandler+0xb08>)
 8003baa:	edd3 7a00 	vldr	s15, [r3]
 8003bae:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8003ca0 <TIM3_IRQHandler+0xb00>
 8003bb2:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8003ca4 <TIM3_IRQHandler+0xb04>
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	f7fe ffe3 	bl	8002b84 <limit>
 8003bbe:	eef0 7a40 	vmov.f32	s15, s0
 8003bc2:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <TIM3_IRQHandler+0xb08>)
 8003bc4:	edc3 7a00 	vstr	s15, [r3]
      g_sig3 = limit(g_sig3, MIN_SPEED, MAX_SPEED);
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <TIM3_IRQHandler+0xad0>)
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8003ca0 <TIM3_IRQHandler+0xb00>
 8003bd2:	eddf 0a34 	vldr	s1, [pc, #208]	; 8003ca4 <TIM3_IRQHandler+0xb04>
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	f7fe ffd3 	bl	8002b84 <limit>
 8003bde:	eef0 7a40 	vmov.f32	s15, s0
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <TIM3_IRQHandler+0xad0>)
 8003be4:	edc3 7a00 	vstr	s15, [r3]
      g_sig4 = limit(g_sig4, MIN_SPEED, MAX_SPEED);
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <TIM3_IRQHandler+0xaf8>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8003ca0 <TIM3_IRQHandler+0xb00>
 8003bf2:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003ca4 <TIM3_IRQHandler+0xb04>
 8003bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfa:	f7fe ffc3 	bl	8002b84 <limit>
 8003bfe:	eef0 7a40 	vmov.f32	s15, s0
 8003c02:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <TIM3_IRQHandler+0xaf8>)
 8003c04:	edc3 7a00 	vstr	s15, [r3]

      ctl_motors_speed(g_sig1, g_sig2, g_sig3, g_sig4);
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <TIM3_IRQHandler+0xafc>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <TIM3_IRQHandler+0xb08>)
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <TIM3_IRQHandler+0xad0>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <TIM3_IRQHandler+0xaf8>)
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c30:	ee17 3a90 	vmov	r3, s15
 8003c34:	ee16 2a10 	vmov	r2, s12
 8003c38:	ee16 1a90 	vmov	r1, s13
 8003c3c:	ee17 0a10 	vmov	r0, s14
 8003c40:	f7fe ffca 	bl	8002bd8 <ctl_motors_speed>

      if (g_thrust <= -99) {
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <TIM3_IRQHandler+0xb0c>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003cb0 <TIM3_IRQHandler+0xb10>
 8003c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c56:	d900      	bls.n	8003c5a <TIM3_IRQHandler+0xaba>
        fly_mode = init;
      }

      break;
 8003c58:	e002      	b.n	8003c60 <TIM3_IRQHandler+0xac0>
        fly_mode = init;
 8003c5a:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <TIM3_IRQHandler+0xb14>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
      break;
 8003c60:	bf00      	nop
  monitor[4] = g_sig4;
  monitor[5] = g_sig3 > g_sig4 ? g_sig4 : g_sig3;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c62:	4815      	ldr	r0, [pc, #84]	; (8003cb8 <TIM3_IRQHandler+0xb18>)
 8003c64:	f003 f8d6 	bl	8006e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	20000710 	.word	0x20000710
 8003c74:	200006d8 	.word	0x200006d8
 8003c78:	200006dc 	.word	0x200006dc
 8003c7c:	200006e4 	.word	0x200006e4
 8003c80:	200006e8 	.word	0x200006e8
 8003c84:	200006ec 	.word	0x200006ec
 8003c88:	200006f4 	.word	0x200006f4
 8003c8c:	200006f8 	.word	0x200006f8
 8003c90:	200006fc 	.word	0x200006fc
 8003c94:	20000704 	.word	0x20000704
 8003c98:	20000714 	.word	0x20000714
 8003c9c:	20000708 	.word	0x20000708
 8003ca0:	446cc000 	.word	0x446cc000
 8003ca4:	4408c000 	.word	0x4408c000
 8003ca8:	2000070c 	.word	0x2000070c
 8003cac:	20000758 	.word	0x20000758
 8003cb0:	c2c60000 	.word	0xc2c60000
 8003cb4:	200006d6 	.word	0x200006d6
 8003cb8:	20000254 	.word	0x20000254

08003cbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003cc0:	4802      	ldr	r0, [pc, #8]	; (8003ccc <TIM4_IRQHandler+0x10>)
 8003cc2:	f003 f8a7 	bl	8006e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000029c 	.word	0x2000029c

08003cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cd4:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <USART1_IRQHandler+0x10>)
 8003cd6:	f004 fa15 	bl	8008104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200002e4 	.word	0x200002e4

08003ce4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8003cec:	2180      	movs	r1, #128	; 0x80
 8003cee:	4803      	ldr	r0, [pc, #12]	; (8003cfc <HAL_UART_TxCpltCallback+0x18>)
 8003cf0:	f000 ff29 	bl	8004b46 <HAL_GPIO_TogglePin>
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40020000 	.word	0x40020000

08003d00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  // Update alive status
  g_conn_lost_counter = 0;
 8003d08:	4ba9      	ldr	r3, [pc, #676]	; (8003fb0 <HAL_UART_RxCpltCallback+0x2b0>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]

  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	48a8      	ldr	r0, [pc, #672]	; (8003fb4 <HAL_UART_RxCpltCallback+0x2b4>)
 8003d12:	f000 ff18 	bl	8004b46 <HAL_GPIO_TogglePin>

  // Serialize control values
  uint8_t g_control_1st_idx = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  if (g_control[0] == 254) g_control_1st_idx = 1;
 8003d1a:	4ba7      	ldr	r3, [pc, #668]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_RxCpltCallback+0x26>
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
  if (g_control[1] == 254) g_control_1st_idx = 2;
 8003d26:	4ba4      	ldr	r3, [pc, #656]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_RxCpltCallback+0x32>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	73fb      	strb	r3, [r7, #15]
  if (g_control[2] == 254) g_control_1st_idx = 3;
 8003d32:	4ba1      	ldr	r3, [pc, #644]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d34:	789b      	ldrb	r3, [r3, #2]
 8003d36:	2bfe      	cmp	r3, #254	; 0xfe
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_RxCpltCallback+0x3e>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	73fb      	strb	r3, [r7, #15]
  if (g_control[3] == 254) g_control_1st_idx = 4;
 8003d3e:	4b9e      	ldr	r3, [pc, #632]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d40:	78db      	ldrb	r3, [r3, #3]
 8003d42:	2bfe      	cmp	r3, #254	; 0xfe
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_RxCpltCallback+0x4a>
 8003d46:	2304      	movs	r3, #4
 8003d48:	73fb      	strb	r3, [r7, #15]
  if (g_control[4] == 254) g_control_1st_idx = 5;
 8003d4a:	4b9b      	ldr	r3, [pc, #620]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d4c:	791b      	ldrb	r3, [r3, #4]
 8003d4e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_RxCpltCallback+0x56>
 8003d52:	2305      	movs	r3, #5
 8003d54:	73fb      	strb	r3, [r7, #15]
  if (g_control[5] == 254) g_control_1st_idx = 6;
 8003d56:	4b98      	ldr	r3, [pc, #608]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d58:	795b      	ldrb	r3, [r3, #5]
 8003d5a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_RxCpltCallback+0x62>
 8003d5e:	2306      	movs	r3, #6
 8003d60:	73fb      	strb	r3, [r7, #15]
  if (g_control[6] == 254) g_control_1st_idx = 7;
 8003d62:	4b95      	ldr	r3, [pc, #596]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d64:	799b      	ldrb	r3, [r3, #6]
 8003d66:	2bfe      	cmp	r3, #254	; 0xfe
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_RxCpltCallback+0x6e>
 8003d6a:	2307      	movs	r3, #7
 8003d6c:	73fb      	strb	r3, [r7, #15]
  if (g_control[7] == 254) g_control_1st_idx = 8;
 8003d6e:	4b92      	ldr	r3, [pc, #584]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d70:	79db      	ldrb	r3, [r3, #7]
 8003d72:	2bfe      	cmp	r3, #254	; 0xfe
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_RxCpltCallback+0x7a>
 8003d76:	2308      	movs	r3, #8
 8003d78:	73fb      	strb	r3, [r7, #15]
  if (g_control[8] == 254) g_control_1st_idx = 9;
 8003d7a:	4b8f      	ldr	r3, [pc, #572]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d7c:	7a1b      	ldrb	r3, [r3, #8]
 8003d7e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_RxCpltCallback+0x86>
 8003d82:	2309      	movs	r3, #9
 8003d84:	73fb      	strb	r3, [r7, #15]
  if (g_control[9] == 254) g_control_1st_idx = 0;
 8003d86:	4b8c      	ldr	r3, [pc, #560]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d88:	7a5b      	ldrb	r3, [r3, #9]
 8003d8a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_RxCpltCallback+0x92>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  g_P_pitch_gain = g_control[g_control_1st_idx];
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	4a88      	ldr	r2, [pc, #544]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003d96:	5cd2      	ldrb	r2, [r2, r3]
 8003d98:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_UART_RxCpltCallback+0x2bc>)
 8003d9a:	701a      	strb	r2, [r3, #0]
  g_I_pitch_gain = g_control[(g_control_1st_idx+1)%10];
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003da2:	fb83 2301 	smull	r2, r3, r3, r1
 8003da6:	109a      	asrs	r2, r3, #2
 8003da8:	17cb      	asrs	r3, r1, #31
 8003daa:	1ad2      	subs	r2, r2, r3
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	1aca      	subs	r2, r1, r3
 8003db6:	4b80      	ldr	r3, [pc, #512]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003db8:	5c9a      	ldrb	r2, [r3, r2]
 8003dba:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <HAL_UART_RxCpltCallback+0x2c4>)
 8003dbc:	701a      	strb	r2, [r3, #0]
  g_D_pitch_gain = g_control[(g_control_1st_idx+2)%10];
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	1c99      	adds	r1, r3, #2
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003dc4:	fb83 2301 	smull	r2, r3, r3, r1
 8003dc8:	109a      	asrs	r2, r3, #2
 8003dca:	17cb      	asrs	r3, r1, #31
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	1aca      	subs	r2, r1, r3
 8003dd8:	4b77      	ldr	r3, [pc, #476]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003dda:	5c9a      	ldrb	r2, [r3, r2]
 8003ddc:	4b7a      	ldr	r3, [pc, #488]	; (8003fc8 <HAL_UART_RxCpltCallback+0x2c8>)
 8003dde:	701a      	strb	r2, [r3, #0]
  g_P_roll_gain = g_control[(g_control_1st_idx+3)%10];
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	1cd9      	adds	r1, r3, #3
 8003de4:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003de6:	fb83 2301 	smull	r2, r3, r3, r1
 8003dea:	109a      	asrs	r2, r3, #2
 8003dec:	17cb      	asrs	r3, r1, #31
 8003dee:	1ad2      	subs	r2, r2, r3
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	1aca      	subs	r2, r1, r3
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003dfc:	5c9a      	ldrb	r2, [r3, r2]
 8003dfe:	4b73      	ldr	r3, [pc, #460]	; (8003fcc <HAL_UART_RxCpltCallback+0x2cc>)
 8003e00:	701a      	strb	r2, [r3, #0]
  g_I_roll_gain = g_control[(g_control_1st_idx+4)%10];
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	1d19      	adds	r1, r3, #4
 8003e06:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003e08:	fb83 2301 	smull	r2, r3, r3, r1
 8003e0c:	109a      	asrs	r2, r3, #2
 8003e0e:	17cb      	asrs	r3, r1, #31
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	1aca      	subs	r2, r1, r3
 8003e1c:	4b66      	ldr	r3, [pc, #408]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003e1e:	5c9a      	ldrb	r2, [r3, r2]
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <HAL_UART_RxCpltCallback+0x2d0>)
 8003e22:	701a      	strb	r2, [r3, #0]
  g_D_roll_gain = g_control[(g_control_1st_idx+5)%10];
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	1d59      	adds	r1, r3, #5
 8003e28:	4b65      	ldr	r3, [pc, #404]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003e2a:	fb83 2301 	smull	r2, r3, r3, r1
 8003e2e:	109a      	asrs	r2, r3, #2
 8003e30:	17cb      	asrs	r3, r1, #31
 8003e32:	1ad2      	subs	r2, r2, r3
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	1aca      	subs	r2, r1, r3
 8003e3e:	4b5e      	ldr	r3, [pc, #376]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003e40:	5c9a      	ldrb	r2, [r3, r2]
 8003e42:	4b64      	ldr	r3, [pc, #400]	; (8003fd4 <HAL_UART_RxCpltCallback+0x2d4>)
 8003e44:	701a      	strb	r2, [r3, #0]
  g_P_yaw_gain = g_control[(g_control_1st_idx+6)%10];
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	1d99      	adds	r1, r3, #6
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003e4c:	fb83 2301 	smull	r2, r3, r3, r1
 8003e50:	109a      	asrs	r2, r3, #2
 8003e52:	17cb      	asrs	r3, r1, #31
 8003e54:	1ad2      	subs	r2, r2, r3
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	1aca      	subs	r2, r1, r3
 8003e60:	4b55      	ldr	r3, [pc, #340]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003e62:	5c9a      	ldrb	r2, [r3, r2]
 8003e64:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <HAL_UART_RxCpltCallback+0x2d8>)
 8003e66:	701a      	strb	r2, [r3, #0]
  g_I_yaw_gain = g_control[(g_control_1st_idx+7)%10];
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	1dd9      	adds	r1, r3, #7
 8003e6c:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003e6e:	fb83 2301 	smull	r2, r3, r3, r1
 8003e72:	109a      	asrs	r2, r3, #2
 8003e74:	17cb      	asrs	r3, r1, #31
 8003e76:	1ad2      	subs	r2, r2, r3
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	1aca      	subs	r2, r1, r3
 8003e82:	4b4d      	ldr	r3, [pc, #308]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003e84:	5c9a      	ldrb	r2, [r3, r2]
 8003e86:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_UART_RxCpltCallback+0x2dc>)
 8003e88:	701a      	strb	r2, [r3, #0]
  g_D_yaw_gain = g_control[(g_control_1st_idx+8)%10];
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	f103 0108 	add.w	r1, r3, #8
 8003e90:	4b4b      	ldr	r3, [pc, #300]	; (8003fc0 <HAL_UART_RxCpltCallback+0x2c0>)
 8003e92:	fb83 2301 	smull	r2, r3, r3, r1
 8003e96:	109a      	asrs	r2, r3, #2
 8003e98:	17cb      	asrs	r3, r1, #31
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	1aca      	subs	r2, r1, r3
 8003ea6:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <HAL_UART_RxCpltCallback+0x2b8>)
 8003ea8:	5c9a      	ldrb	r2, [r3, r2]
 8003eaa:	4b4d      	ldr	r3, [pc, #308]	; (8003fe0 <HAL_UART_RxCpltCallback+0x2e0>)
 8003eac:	701a      	strb	r2, [r3, #0]

  monitor[0] = g_P_pitch_gain;
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_UART_RxCpltCallback+0x2bc>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eba:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003ebc:	edc3 7a00 	vstr	s15, [r3]
  monitor[1] = g_I_pitch_gain;
 8003ec0:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <HAL_UART_RxCpltCallback+0x2c4>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ecc:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003ece:	edc3 7a01 	vstr	s15, [r3, #4]
  monitor[2] = g_D_pitch_gain;
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <HAL_UART_RxCpltCallback+0x2c8>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003ee0:	edc3 7a02 	vstr	s15, [r3, #8]
  monitor[3] = g_P_roll_gain;
 8003ee4:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_UART_RxCpltCallback+0x2cc>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef0:	4b3c      	ldr	r3, [pc, #240]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003ef2:	edc3 7a03 	vstr	s15, [r3, #12]
  monitor[4] = g_I_roll_gain;
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_UART_RxCpltCallback+0x2d0>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f04:	edc3 7a04 	vstr	s15, [r3, #16]
  monitor[5] = g_D_roll_gain;
 8003f08:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_UART_RxCpltCallback+0x2d4>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f14:	4b33      	ldr	r3, [pc, #204]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f16:	edc3 7a05 	vstr	s15, [r3, #20]
  monitor[6] = g_P_yaw_gain;
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_UART_RxCpltCallback+0x2d8>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f28:	edc3 7a06 	vstr	s15, [r3, #24]
  monitor[7] = g_I_yaw_gain;
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_UART_RxCpltCallback+0x2dc>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f38:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f3a:	edc3 7a07 	vstr	s15, [r3, #28]
  monitor[8] = g_D_yaw_gain;
 8003f3e:	4b28      	ldr	r3, [pc, #160]	; (8003fe0 <HAL_UART_RxCpltCallback+0x2e0>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4a:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f4c:	edc3 7a08 	vstr	s15, [r3, #32]

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8003f50:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f58:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f5c:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f5e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f64:	ed93 6a03 	vldr	s12, [r3, #12]
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f6a:	edd3 5a04 	vldr	s11, [r3, #16]
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f70:	ed93 5a05 	vldr	s10, [r3, #20]
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f76:	edd3 4a06 	vldr	s9, [r3, #24]
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f7c:	edd3 3a07 	vldr	s7, [r3, #28]
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_UART_RxCpltCallback+0x2e4>)
 8003f82:	ed93 4a08 	vldr	s8, [r3, #32]
 8003f86:	eeb0 3a64 	vmov.f32	s6, s9
 8003f8a:	eef0 2a45 	vmov.f32	s5, s10
 8003f8e:	eeb0 2a65 	vmov.f32	s4, s11
 8003f92:	eef0 1a46 	vmov.f32	s3, s12
 8003f96:	eeb0 1a66 	vmov.f32	s2, s13
 8003f9a:	eef0 0a47 	vmov.f32	s1, s14
 8003f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa2:	f7fd f98b 	bl	80012bc <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000004 	.word	0x20000004
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	20000570 	.word	0x20000570
 8003fbc:	20000020 	.word	0x20000020
 8003fc0:	66666667 	.word	0x66666667
 8003fc4:	20000021 	.word	0x20000021
 8003fc8:	20000022 	.word	0x20000022
 8003fcc:	20000023 	.word	0x20000023
 8003fd0:	20000024 	.word	0x20000024
 8003fd4:	20000025 	.word	0x20000025
 8003fd8:	20000026 	.word	0x20000026
 8003fdc:	20000027 	.word	0x20000027
 8003fe0:	20000028 	.word	0x20000028
 8003fe4:	20000768 	.word	0x20000768

08003fe8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7f1b      	ldrb	r3, [r3, #28]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d12f      	bne.n	8004058 <HAL_TIM_IC_CaptureCallback+0x70>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 8003ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ffc:	488a      	ldr	r0, [pc, #552]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 8003ffe:	f000 fd71 	bl	8004ae4 <HAL_GPIO_ReadPin>
 8004002:	4603      	mov	r3, r0
 8004004:	2b01      	cmp	r3, #1
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IC_CaptureCallback+0x30>
      pwm_in[0] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8004008:	2100      	movs	r1, #0
 800400a:	4888      	ldr	r0, [pc, #544]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 800400c:	f003 fa30 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	4b86      	ldr	r3, [pc, #536]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004016:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8004018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800401c:	4882      	ldr	r0, [pc, #520]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 800401e:	f000 fd61 	bl	8004ae4 <HAL_GPIO_ReadPin>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d117      	bne.n	8004058 <HAL_TIM_IC_CaptureCallback+0x70>
      pwm_in[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8004028:	2100      	movs	r1, #0
 800402a:	4880      	ldr	r0, [pc, #512]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 800402c:	f003 fa20 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	4b7e      	ldr	r3, [pc, #504]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004036:	605a      	str	r2, [r3, #4]
      int value = pwm_in[1] - pwm_in[0];
 8004038:	4b7d      	ldr	r3, [pc, #500]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4b7c      	ldr	r3, [pc, #496]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	617b      	str	r3, [r7, #20]
      if (value >= 200 && value < 400) {
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2bc7      	cmp	r3, #199	; 0xc7
 8004048:	dd06      	ble.n	8004058 <HAL_TIM_IC_CaptureCallback+0x70>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004050:	da02      	bge.n	8004058 <HAL_TIM_IC_CaptureCallback+0x70>
        pwm_in[2] = value;
 8004052:	4a77      	ldr	r2, [pc, #476]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	6093      	str	r3, [r2, #8]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7f1b      	ldrb	r3, [r3, #28]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d12f      	bne.n	80040c0 <HAL_TIM_IC_CaptureCallback+0xd8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8004060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004064:	4870      	ldr	r0, [pc, #448]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004066:	f000 fd3d 	bl	8004ae4 <HAL_GPIO_ReadPin>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <HAL_TIM_IC_CaptureCallback+0x98>
      pwm_in[3] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8004070:	2104      	movs	r1, #4
 8004072:	486e      	ldr	r0, [pc, #440]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 8004074:	f003 f9fc 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b6c      	ldr	r3, [pc, #432]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800407e:	60da      	str	r2, [r3, #12]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8004080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004084:	4868      	ldr	r0, [pc, #416]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004086:	f000 fd2d 	bl	8004ae4 <HAL_GPIO_ReadPin>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d117      	bne.n	80040c0 <HAL_TIM_IC_CaptureCallback+0xd8>
      pwm_in[4] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8004090:	2104      	movs	r1, #4
 8004092:	4866      	ldr	r0, [pc, #408]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 8004094:	f003 f9ec 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	4b64      	ldr	r3, [pc, #400]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800409e:	611a      	str	r2, [r3, #16]
      int value = pwm_in[4] - pwm_in[3];
 80040a0:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	4b62      	ldr	r3, [pc, #392]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	613b      	str	r3, [r7, #16]
      if (value >= 200 && value < 400) {
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2bc7      	cmp	r3, #199	; 0xc7
 80040b0:	dd06      	ble.n	80040c0 <HAL_TIM_IC_CaptureCallback+0xd8>
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80040b8:	da02      	bge.n	80040c0 <HAL_TIM_IC_CaptureCallback+0xd8>
        pwm_in[5] = value;
 80040ba:	4a5d      	ldr	r2, [pc, #372]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6153      	str	r3, [r2, #20]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7f1b      	ldrb	r3, [r3, #28]
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d12f      	bne.n	8004128 <HAL_TIM_IC_CaptureCallback+0x140>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET) {
 80040c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040cc:	4856      	ldr	r0, [pc, #344]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 80040ce:	f000 fd09 	bl	8004ae4 <HAL_GPIO_ReadPin>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IC_CaptureCallback+0x100>
      pwm_in[6] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80040d8:	2108      	movs	r1, #8
 80040da:	4854      	ldr	r0, [pc, #336]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 80040dc:	f003 f9c8 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b52      	ldr	r3, [pc, #328]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 80040e6:	619a      	str	r2, [r3, #24]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 80040e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040ec:	484e      	ldr	r0, [pc, #312]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 80040ee:	f000 fcf9 	bl	8004ae4 <HAL_GPIO_ReadPin>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d117      	bne.n	8004128 <HAL_TIM_IC_CaptureCallback+0x140>
      pwm_in[7] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80040f8:	2108      	movs	r1, #8
 80040fa:	484c      	ldr	r0, [pc, #304]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 80040fc:	f003 f9b8 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004106:	61da      	str	r2, [r3, #28]
      int value = pwm_in[7] - pwm_in[6];
 8004108:	4b49      	ldr	r3, [pc, #292]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	4b48      	ldr	r3, [pc, #288]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	60fb      	str	r3, [r7, #12]
      if (value >= 200 && value < 400) {
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2bc7      	cmp	r3, #199	; 0xc7
 8004118:	dd06      	ble.n	8004128 <HAL_TIM_IC_CaptureCallback+0x140>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004120:	da02      	bge.n	8004128 <HAL_TIM_IC_CaptureCallback+0x140>
        pwm_in[8] = value;
 8004122:	4a43      	ldr	r2, [pc, #268]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6213      	str	r3, [r2, #32]
      }
    }
  }

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7f1b      	ldrb	r3, [r3, #28]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d12f      	bne.n	8004190 <HAL_TIM_IC_CaptureCallback+0x1a8>
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET) {
 8004130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004134:	483c      	ldr	r0, [pc, #240]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004136:	f000 fcd5 	bl	8004ae4 <HAL_GPIO_ReadPin>
 800413a:	4603      	mov	r3, r0
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_TIM_IC_CaptureCallback+0x168>
      pwm_in[9] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004140:	210c      	movs	r1, #12
 8004142:	483a      	ldr	r0, [pc, #232]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 8004144:	f003 f994 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8004150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004154:	4834      	ldr	r0, [pc, #208]	; (8004228 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004156:	f000 fcc5 	bl	8004ae4 <HAL_GPIO_ReadPin>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d117      	bne.n	8004190 <HAL_TIM_IC_CaptureCallback+0x1a8>
      pwm_in[10] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_4);
 8004160:	210c      	movs	r1, #12
 8004162:	4832      	ldr	r0, [pc, #200]	; (800422c <HAL_TIM_IC_CaptureCallback+0x244>)
 8004164:	f003 f984 	bl	8007470 <HAL_TIM_ReadCapturedValue>
 8004168:	4603      	mov	r3, r0
 800416a:	461a      	mov	r2, r3
 800416c:	4b30      	ldr	r3, [pc, #192]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800416e:	629a      	str	r2, [r3, #40]	; 0x28
      int value = pwm_in[10] - pwm_in[9];
 8004170:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004174:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	60bb      	str	r3, [r7, #8]
      if (value >= 200 && value < 400) {
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2bc7      	cmp	r3, #199	; 0xc7
 8004180:	dd06      	ble.n	8004190 <HAL_TIM_IC_CaptureCallback+0x1a8>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004188:	da02      	bge.n	8004190 <HAL_TIM_IC_CaptureCallback+0x1a8>
        pwm_in[11] = value;
 800418a:	4a29      	ldr	r2, [pc, #164]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
    }
  }

  g_thrust = SimpleKalmanFilter_updateEstimate(&g_filters[6], pwm_in[5] - 300);
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a0:	eeb0 0a67 	vmov.f32	s0, s15
 80041a4:	4823      	ldr	r0, [pc, #140]	; (8004234 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80041a6:	f7fc ffc2 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80041aa:	eef0 7a40 	vmov.f32	s15, s0
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_TIM_IC_CaptureCallback+0x250>)
 80041b0:	edc3 7a00 	vstr	s15, [r3]
  g_yaw = SimpleKalmanFilter_updateEstimate(&g_filters[7], pwm_in[2] - 300);
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c4:	eeb0 0a67 	vmov.f32	s0, s15
 80041c8:	481c      	ldr	r0, [pc, #112]	; (800423c <HAL_TIM_IC_CaptureCallback+0x254>)
 80041ca:	f7fc ffb0 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80041ce:	eef0 7a40 	vmov.f32	s15, s0
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_TIM_IC_CaptureCallback+0x258>)
 80041d4:	edc3 7a00 	vstr	s15, [r3]
  g_pitch = SimpleKalmanFilter_updateEstimate(&g_filters[8], pwm_in[8] - 300);
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e8:	eeb0 0a67 	vmov.f32	s0, s15
 80041ec:	4815      	ldr	r0, [pc, #84]	; (8004244 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80041ee:	f7fc ff9e 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 80041f2:	eef0 7a40 	vmov.f32	s15, s0
 80041f6:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_TIM_IC_CaptureCallback+0x260>)
 80041f8:	edc3 7a00 	vstr	s15, [r3]
  g_roll = SimpleKalmanFilter_updateEstimate(&g_filters[9], pwm_in[11] - 300);
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_TIM_IC_CaptureCallback+0x248>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800420c:	eeb0 0a67 	vmov.f32	s0, s15
 8004210:	480e      	ldr	r0, [pc, #56]	; (800424c <HAL_TIM_IC_CaptureCallback+0x264>)
 8004212:	f7fc ff8c 	bl	800112e <SimpleKalmanFilter_updateEstimate>
 8004216:	eef0 7a40 	vmov.f32	s15, s0
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <HAL_TIM_IC_CaptureCallback+0x268>)
 800421c:	edc3 7a00 	vstr	s15, [r3]
  monitor[2] = 0;
  monitor[3] = g_pitch;
  monitor[4] = g_roll;
  monitor[5] = 0;
#endif
}
 8004220:	bf00      	nop
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40020c00 	.word	0x40020c00
 800422c:	2000029c 	.word	0x2000029c
 8004230:	20000718 	.word	0x20000718
 8004234:	200003fc 	.word	0x200003fc
 8004238:	20000758 	.word	0x20000758
 800423c:	20000414 	.word	0x20000414
 8004240:	20000764 	.word	0x20000764
 8004244:	2000042c 	.word	0x2000042c
 8004248:	2000075c 	.word	0x2000075c
 800424c:	20000444 	.word	0x20000444
 8004250:	20000760 	.word	0x20000760

08004254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <_sbrk+0x5c>)
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <_sbrk+0x60>)
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <_sbrk+0x64>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004270:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <_sbrk+0x64>)
 8004272:	4a12      	ldr	r2, [pc, #72]	; (80042bc <_sbrk+0x68>)
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <_sbrk+0x64>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d207      	bcs.n	8004294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004284:	f004 fe2e 	bl	8008ee4 <__errno>
 8004288:	4603      	mov	r3, r0
 800428a:	220c      	movs	r2, #12
 800428c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004292:	e009      	b.n	80042a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <_sbrk+0x64>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800429a:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <_sbrk+0x64>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <_sbrk+0x64>)
 80042a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20020000 	.word	0x20020000
 80042b4:	00000400 	.word	0x00000400
 80042b8:	2000078c 	.word	0x2000078c
 80042bc:	200007a8 	.word	0x200007a8

080042c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <SystemInit+0x20>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <SystemInit+0x20>)
 80042cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800431c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042e8:	480d      	ldr	r0, [pc, #52]	; (8004320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042ea:	490e      	ldr	r1, [pc, #56]	; (8004324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042ec:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f0:	e002      	b.n	80042f8 <LoopCopyDataInit>

080042f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042f6:	3304      	adds	r3, #4

080042f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042fc:	d3f9      	bcc.n	80042f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042fe:	4a0b      	ldr	r2, [pc, #44]	; (800432c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004300:	4c0b      	ldr	r4, [pc, #44]	; (8004330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004304:	e001      	b.n	800430a <LoopFillZerobss>

08004306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004308:	3204      	adds	r2, #4

0800430a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800430c:	d3fb      	bcc.n	8004306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800430e:	f7ff ffd7 	bl	80042c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004312:	f004 fded 	bl	8008ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004316:	f7fd f85f 	bl	80013d8 <main>
  bx  lr    
 800431a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800431c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004324:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004328:	0800bd78 	.word	0x0800bd78
  ldr r2, =_sbss
 800432c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004330:	200007a4 	.word	0x200007a4

08004334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004334:	e7fe      	b.n	8004334 <ADC_IRQHandler>
	...

08004338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_Init+0x40>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <HAL_Init+0x40>)
 8004342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_Init+0x40>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <HAL_Init+0x40>)
 800434e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_Init+0x40>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <HAL_Init+0x40>)
 800435a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004360:	2003      	movs	r0, #3
 8004362:	f000 f94f 	bl	8004604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004366:	200f      	movs	r0, #15
 8004368:	f000 f808 	bl	800437c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800436c:	f7fe f8f4 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023c00 	.word	0x40023c00

0800437c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004384:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <HAL_InitTick+0x54>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_InitTick+0x58>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	4619      	mov	r1, r3
 800438e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004392:	fbb3 f3f1 	udiv	r3, r3, r1
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f967 	bl	800466e <HAL_SYSTICK_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e00e      	b.n	80043c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b0f      	cmp	r3, #15
 80043ae:	d80a      	bhi.n	80043c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043b0:	2200      	movs	r2, #0
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043b8:	f000 f92f 	bl	800461a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043bc:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <HAL_InitTick+0x5c>)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e000      	b.n	80043c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	2000002c 	.word	0x2000002c
 80043d4:	20000034 	.word	0x20000034
 80043d8:	20000030 	.word	0x20000030

080043dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_IncTick+0x20>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_IncTick+0x24>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4413      	add	r3, r2
 80043ec:	4a04      	ldr	r2, [pc, #16]	; (8004400 <HAL_IncTick+0x24>)
 80043ee:	6013      	str	r3, [r2, #0]
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000034 	.word	0x20000034
 8004400:	20000790 	.word	0x20000790

08004404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return uwTick;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_GetTick+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000790 	.word	0x20000790

0800441c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004424:	f7ff ffee 	bl	8004404 <HAL_GetTick>
 8004428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004434:	d005      	beq.n	8004442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_Delay+0x44>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004442:	bf00      	nop
 8004444:	f7ff ffde 	bl	8004404 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	429a      	cmp	r2, r3
 8004452:	d8f7      	bhi.n	8004444 <HAL_Delay+0x28>
  {
  }
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000034 	.word	0x20000034

08004464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004480:	4013      	ands	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800448c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004496:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	60d3      	str	r3, [r2, #12]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b0:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <__NVIC_GetPriorityGrouping+0x18>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	f003 0307 	and.w	r3, r3, #7
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db0b      	blt.n	80044f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	f003 021f 	and.w	r2, r3, #31
 80044e0:	4907      	ldr	r1, [pc, #28]	; (8004500 <__NVIC_EnableIRQ+0x38>)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2001      	movs	r0, #1
 80044ea:	fa00 f202 	lsl.w	r2, r0, r2
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e100 	.word	0xe000e100

08004504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	6039      	str	r1, [r7, #0]
 800450e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db0a      	blt.n	800452e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	490c      	ldr	r1, [pc, #48]	; (8004550 <__NVIC_SetPriority+0x4c>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	440b      	add	r3, r1
 8004528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800452c:	e00a      	b.n	8004544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4908      	ldr	r1, [pc, #32]	; (8004554 <__NVIC_SetPriority+0x50>)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	3b04      	subs	r3, #4
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	440b      	add	r3, r1
 8004542:	761a      	strb	r2, [r3, #24]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f1c3 0307 	rsb	r3, r3, #7
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf28      	it	cs
 8004576:	2304      	movcs	r3, #4
 8004578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3304      	adds	r3, #4
 800457e:	2b06      	cmp	r3, #6
 8004580:	d902      	bls.n	8004588 <NVIC_EncodePriority+0x30>
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3b03      	subs	r3, #3
 8004586:	e000      	b.n	800458a <NVIC_EncodePriority+0x32>
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800458c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43da      	mvns	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	401a      	ands	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	43d9      	mvns	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	4313      	orrs	r3, r2
         );
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3724      	adds	r7, #36	; 0x24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d0:	d301      	bcc.n	80045d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045d2:	2301      	movs	r3, #1
 80045d4:	e00f      	b.n	80045f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045d6:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <SysTick_Config+0x40>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3b01      	subs	r3, #1
 80045dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045de:	210f      	movs	r1, #15
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e4:	f7ff ff8e 	bl	8004504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <SysTick_Config+0x40>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ee:	4b04      	ldr	r3, [pc, #16]	; (8004600 <SysTick_Config+0x40>)
 80045f0:	2207      	movs	r2, #7
 80045f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000e010 	.word	0xe000e010

08004604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff29 	bl	8004464 <__NVIC_SetPriorityGrouping>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	4603      	mov	r3, r0
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800462c:	f7ff ff3e 	bl	80044ac <__NVIC_GetPriorityGrouping>
 8004630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	6978      	ldr	r0, [r7, #20]
 8004638:	f7ff ff8e 	bl	8004558 <NVIC_EncodePriority>
 800463c:	4602      	mov	r2, r0
 800463e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff5d 	bl	8004504 <__NVIC_SetPriority>
}
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	4603      	mov	r3, r0
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800465c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ff31 	bl	80044c8 <__NVIC_EnableIRQ>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ffa2 	bl	80045c0 <SysTick_Config>
 800467c:	4603      	mov	r3, r0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff feb6 	bl	8004404 <HAL_GetTick>
 8004698:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d008      	beq.n	80046b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2280      	movs	r2, #128	; 0x80
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e052      	b.n	800475e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0216 	bic.w	r2, r2, #22
 80046c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <HAL_DMA_Abort+0x62>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0208 	bic.w	r2, r2, #8
 80046f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004708:	e013      	b.n	8004732 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470a:	f7ff fe7b 	bl	8004404 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b05      	cmp	r3, #5
 8004716:	d90c      	bls.n	8004732 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e015      	b.n	800475e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e4      	bne.n	800470a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	223f      	movs	r2, #63	; 0x3f
 8004746:	409a      	lsls	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d004      	beq.n	8004784 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2280      	movs	r2, #128	; 0x80
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e00c      	b.n	800479e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2205      	movs	r2, #5
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	; 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	e16b      	b.n	8004aa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c8:	2201      	movs	r2, #1
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	f040 815a 	bne.w	8004a9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d005      	beq.n	80047fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d130      	bne.n	8004860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004834:	2201      	movs	r2, #1
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 0201 	and.w	r2, r3, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d017      	beq.n	800489c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2203      	movs	r2, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d123      	bne.n	80048f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	08da      	lsrs	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3208      	adds	r2, #8
 80048b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	220f      	movs	r2, #15
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	08da      	lsrs	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3208      	adds	r2, #8
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0203 	and.w	r2, r3, #3
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80b4 	beq.w	8004a9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	4b60      	ldr	r3, [pc, #384]	; (8004ab8 <HAL_GPIO_Init+0x30c>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4a5f      	ldr	r2, [pc, #380]	; (8004ab8 <HAL_GPIO_Init+0x30c>)
 800493c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004940:	6453      	str	r3, [r2, #68]	; 0x44
 8004942:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <HAL_GPIO_Init+0x30c>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800494e:	4a5b      	ldr	r2, [pc, #364]	; (8004abc <HAL_GPIO_Init+0x310>)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	3302      	adds	r3, #2
 8004956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	220f      	movs	r2, #15
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a52      	ldr	r2, [pc, #328]	; (8004ac0 <HAL_GPIO_Init+0x314>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d02b      	beq.n	80049d2 <HAL_GPIO_Init+0x226>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a51      	ldr	r2, [pc, #324]	; (8004ac4 <HAL_GPIO_Init+0x318>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d025      	beq.n	80049ce <HAL_GPIO_Init+0x222>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a50      	ldr	r2, [pc, #320]	; (8004ac8 <HAL_GPIO_Init+0x31c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01f      	beq.n	80049ca <HAL_GPIO_Init+0x21e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a4f      	ldr	r2, [pc, #316]	; (8004acc <HAL_GPIO_Init+0x320>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d019      	beq.n	80049c6 <HAL_GPIO_Init+0x21a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a4e      	ldr	r2, [pc, #312]	; (8004ad0 <HAL_GPIO_Init+0x324>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_GPIO_Init+0x216>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a4d      	ldr	r2, [pc, #308]	; (8004ad4 <HAL_GPIO_Init+0x328>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00d      	beq.n	80049be <HAL_GPIO_Init+0x212>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a4c      	ldr	r2, [pc, #304]	; (8004ad8 <HAL_GPIO_Init+0x32c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <HAL_GPIO_Init+0x20e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a4b      	ldr	r2, [pc, #300]	; (8004adc <HAL_GPIO_Init+0x330>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d101      	bne.n	80049b6 <HAL_GPIO_Init+0x20a>
 80049b2:	2307      	movs	r3, #7
 80049b4:	e00e      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049b6:	2308      	movs	r3, #8
 80049b8:	e00c      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049ba:	2306      	movs	r3, #6
 80049bc:	e00a      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049be:	2305      	movs	r3, #5
 80049c0:	e008      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049c2:	2304      	movs	r3, #4
 80049c4:	e006      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e004      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e002      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_GPIO_Init+0x228>
 80049d2:	2300      	movs	r3, #0
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	f002 0203 	and.w	r2, r2, #3
 80049da:	0092      	lsls	r2, r2, #2
 80049dc:	4093      	lsls	r3, r2
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049e4:	4935      	ldr	r1, [pc, #212]	; (8004abc <HAL_GPIO_Init+0x310>)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	3302      	adds	r3, #2
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049f2:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a16:	4a32      	ldr	r2, [pc, #200]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a46:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a94:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	f67f ae90 	bls.w	80047c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40013800 	.word	0x40013800
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	40020400 	.word	0x40020400
 8004ac8:	40020800 	.word	0x40020800
 8004acc:	40020c00 	.word	0x40020c00
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40021400 	.word	0x40021400
 8004ad8:	40021800 	.word	0x40021800
 8004adc:	40021c00 	.word	0x40021c00
 8004ae0:	40013c00 	.word	0x40013c00

08004ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
 8004b00:	e001      	b.n	8004b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
 8004b20:	4613      	mov	r3, r2
 8004b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b24:	787b      	ldrb	r3, [r7, #1]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b30:	e003      	b.n	8004b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b32:	887b      	ldrh	r3, [r7, #2]
 8004b34:	041a      	lsls	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	619a      	str	r2, [r3, #24]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b58:	887a      	ldrh	r2, [r7, #2]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	041a      	lsls	r2, r3, #16
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	400b      	ands	r3, r1
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	619a      	str	r2, [r3, #24]
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e12b      	b.n	8004de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd fd00 	bl	80025a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2224      	movs	r2, #36	; 0x24
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004be0:	f001 fd0e 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8004be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4a81      	ldr	r2, [pc, #516]	; (8004df0 <HAL_I2C_Init+0x274>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d807      	bhi.n	8004c00 <HAL_I2C_Init+0x84>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a80      	ldr	r2, [pc, #512]	; (8004df4 <HAL_I2C_Init+0x278>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf94      	ite	ls
 8004bf8:	2301      	movls	r3, #1
 8004bfa:	2300      	movhi	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e006      	b.n	8004c0e <HAL_I2C_Init+0x92>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a7d      	ldr	r2, [pc, #500]	; (8004df8 <HAL_I2C_Init+0x27c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bf94      	ite	ls
 8004c08:	2301      	movls	r3, #1
 8004c0a:	2300      	movhi	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0e7      	b.n	8004de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a78      	ldr	r2, [pc, #480]	; (8004dfc <HAL_I2C_Init+0x280>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	0c9b      	lsrs	r3, r3, #18
 8004c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a6a      	ldr	r2, [pc, #424]	; (8004df0 <HAL_I2C_Init+0x274>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d802      	bhi.n	8004c50 <HAL_I2C_Init+0xd4>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	e009      	b.n	8004c64 <HAL_I2C_Init+0xe8>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	4a69      	ldr	r2, [pc, #420]	; (8004e00 <HAL_I2C_Init+0x284>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	099b      	lsrs	r3, r3, #6
 8004c62:	3301      	adds	r3, #1
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	495c      	ldr	r1, [pc, #368]	; (8004df0 <HAL_I2C_Init+0x274>)
 8004c80:	428b      	cmp	r3, r1
 8004c82:	d819      	bhi.n	8004cb8 <HAL_I2C_Init+0x13c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1e59      	subs	r1, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c98:	400b      	ands	r3, r1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_I2C_Init+0x138>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1e59      	subs	r1, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb2:	e051      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e04f      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d111      	bne.n	8004ce4 <HAL_I2C_Init+0x168>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1e58      	subs	r0, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	440b      	add	r3, r1
 8004cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e012      	b.n	8004d0a <HAL_I2C_Init+0x18e>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e58      	subs	r0, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	0099      	lsls	r1, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Init+0x196>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e022      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <HAL_I2C_Init+0x1bc>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1e58      	subs	r0, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	440b      	add	r3, r1
 8004d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d36:	e00f      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e58      	subs	r0, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	0099      	lsls	r1, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	6809      	ldr	r1, [r1, #0]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6911      	ldr	r1, [r2, #16]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68d2      	ldr	r2, [r2, #12]
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	000186a0 	.word	0x000186a0
 8004df4:	001e847f 	.word	0x001e847f
 8004df8:	003d08ff 	.word	0x003d08ff
 8004dfc:	431bde83 	.word	0x431bde83
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	460b      	mov	r3, r1
 8004e12:	817b      	strh	r3, [r7, #10]
 8004e14:	4613      	mov	r3, r2
 8004e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7ff faf4 	bl	8004404 <HAL_GetTick>
 8004e1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	f040 80e0 	bne.w	8004fec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2319      	movs	r3, #25
 8004e32:	2201      	movs	r2, #1
 8004e34:	4970      	ldr	r1, [pc, #448]	; (8004ff8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fd94 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
 8004e44:	e0d3      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2C_Master_Transmit+0x50>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0cc      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d007      	beq.n	8004e7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2221      	movs	r2, #33	; 0x21
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2210      	movs	r2, #16
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	893a      	ldrh	r2, [r7, #8]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a50      	ldr	r2, [pc, #320]	; (8004ffc <HAL_I2C_Master_Transmit+0x1f8>)
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fbfe 	bl	80056c4 <I2C_MasterRequestWrite>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e08d      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ee8:	e066      	b.n	8004fb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6a39      	ldr	r1, [r7, #32]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fe0e 	bl	8005b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d107      	bne.n	8004f12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e06b      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d11b      	bne.n	8004f8c <HAL_I2C_Master_Transmit+0x188>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d017      	beq.n	8004f8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	6a39      	ldr	r1, [r7, #32]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fdfe 	bl	8005b92 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d107      	bne.n	8004fb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e01a      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d194      	bne.n	8004eea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e000      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	00100002 	.word	0x00100002
 8004ffc:	ffff0000 	.word	0xffff0000

08005000 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	; 0x30
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	460b      	mov	r3, r1
 800500e:	817b      	strh	r3, [r7, #10]
 8005010:	4613      	mov	r3, r2
 8005012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005014:	f7ff f9f6 	bl	8004404 <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b20      	cmp	r3, #32
 8005024:	f040 820b 	bne.w	800543e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2319      	movs	r3, #25
 800502e:	2201      	movs	r2, #1
 8005030:	497c      	ldr	r1, [pc, #496]	; (8005224 <HAL_I2C_Master_Receive+0x224>)
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fc96 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
 8005040:	e1fe      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_I2C_Master_Receive+0x50>
 800504c:	2302      	movs	r3, #2
 800504e:	e1f7      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b01      	cmp	r3, #1
 8005064:	d007      	beq.n	8005076 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2222      	movs	r2, #34	; 0x22
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2210      	movs	r2, #16
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	893a      	ldrh	r2, [r7, #8]
 80050a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a5c      	ldr	r2, [pc, #368]	; (8005228 <HAL_I2C_Master_Receive+0x228>)
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050b8:	8979      	ldrh	r1, [r7, #10]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fb82 	bl	80057c8 <I2C_MasterRequestRead>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e1b8      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d113      	bne.n	80050fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e18c      	b.n	8005418 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	2b01      	cmp	r3, #1
 8005104:	d11b      	bne.n	800513e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e16c      	b.n	8005418 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	2b02      	cmp	r3, #2
 8005144:	d11b      	bne.n	800517e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005154:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	e14c      	b.n	8005418 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800518c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051a4:	e138      	b.n	8005418 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	f200 80f1 	bhi.w	8005392 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d123      	bne.n	8005200 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fd29 	bl	8005c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e139      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051fe:	e10b      	b.n	8005418 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	2b02      	cmp	r3, #2
 8005206:	d14e      	bne.n	80052a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	2200      	movs	r2, #0
 8005210:	4906      	ldr	r1, [pc, #24]	; (800522c <HAL_I2C_Master_Receive+0x22c>)
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fba6 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e10e      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
 8005222:	bf00      	nop
 8005224:	00100002 	.word	0x00100002
 8005228:	ffff0000 	.word	0xffff0000
 800522c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052a4:	e0b8      	b.n	8005418 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	4966      	ldr	r1, [pc, #408]	; (8005448 <HAL_I2C_Master_Receive+0x448>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fb57 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0bf      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	494f      	ldr	r1, [pc, #316]	; (8005448 <HAL_I2C_Master_Receive+0x448>)
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fb29 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e091      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005390:	e042      	b.n	8005418 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fc3c 	bl	8005c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e04c      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d118      	bne.n	8005418 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	f47f aec2 	bne.w	80051a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e000      	b.n	8005440 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	00010004 	.word	0x00010004

0800544c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	; 0x28
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	460b      	mov	r3, r1
 800545a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800545c:	f7fe ffd2 	bl	8004404 <HAL_GetTick>
 8005460:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b20      	cmp	r3, #32
 8005470:	f040 8111 	bne.w	8005696 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2319      	movs	r3, #25
 800547a:	2201      	movs	r2, #1
 800547c:	4988      	ldr	r1, [pc, #544]	; (80056a0 <HAL_I2C_IsDeviceReady+0x254>)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fa70 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
 800548c:	e104      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_I2C_IsDeviceReady+0x50>
 8005498:	2302      	movs	r3, #2
 800549a:	e0fd      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x24c>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d007      	beq.n	80054c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2224      	movs	r2, #36	; 0x24
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a70      	ldr	r2, [pc, #448]	; (80056a4 <HAL_I2C_IsDeviceReady+0x258>)
 80054e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fa2e 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00d      	beq.n	800552a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551c:	d103      	bne.n	8005526 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0b6      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800552a:	897b      	ldrh	r3, [r7, #10]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005538:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800553a:	f7fe ff63 	bl	8004404 <HAL_GetTick>
 800553e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800556e:	e025      	b.n	80055bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005570:	f7fe ff48 	bl	8004404 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <HAL_I2C_IsDeviceReady+0x13a>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d103      	bne.n	800558e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	22a0      	movs	r2, #160	; 0xa0
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2ba0      	cmp	r3, #160	; 0xa0
 80055c6:	d005      	beq.n	80055d4 <HAL_I2C_IsDeviceReady+0x188>
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_I2C_IsDeviceReady+0x188>
 80055ce:	7dbb      	ldrb	r3, [r7, #22]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0cd      	beq.n	8005570 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d129      	bne.n	800563e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	2319      	movs	r3, #25
 8005616:	2201      	movs	r2, #1
 8005618:	4921      	ldr	r1, [pc, #132]	; (80056a0 <HAL_I2C_IsDeviceReady+0x254>)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f9a2 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e036      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e02c      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005656:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	2319      	movs	r3, #25
 800565e:	2201      	movs	r2, #1
 8005660:	490f      	ldr	r1, [pc, #60]	; (80056a0 <HAL_I2C_IsDeviceReady+0x254>)
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f97e 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e012      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	3301      	adds	r3, #1
 8005676:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	f4ff af32 	bcc.w	80054e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	00100002 	.word	0x00100002
 80056a4:	ffff0000 	.word	0xffff0000

080056a8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	b2db      	uxtb	r3, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	460b      	mov	r3, r1
 80056d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d006      	beq.n	80056ee <I2C_MasterRequestWrite+0x2a>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d003      	beq.n	80056ee <I2C_MasterRequestWrite+0x2a>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056ec:	d108      	bne.n	8005700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e00b      	b.n	8005718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2b12      	cmp	r3, #18
 8005706:	d107      	bne.n	8005718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f91d 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00d      	beq.n	800574c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573e:	d103      	bne.n	8005748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e035      	b.n	80057b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005754:	d108      	bne.n	8005768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	e01b      	b.n	80057a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005768:	897b      	ldrh	r3, [r7, #10]
 800576a:	11db      	asrs	r3, r3, #7
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 0306 	and.w	r3, r3, #6
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f063 030f 	orn	r3, r3, #15
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	490e      	ldr	r1, [pc, #56]	; (80057c0 <I2C_MasterRequestWrite+0xfc>)
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f943 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e010      	b.n	80057b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4907      	ldr	r1, [pc, #28]	; (80057c4 <I2C_MasterRequestWrite+0x100>)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f933 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	00010008 	.word	0x00010008
 80057c4:	00010002 	.word	0x00010002

080057c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	460b      	mov	r3, r1
 80057d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d006      	beq.n	8005802 <I2C_MasterRequestRead+0x3a>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d003      	beq.n	8005802 <I2C_MasterRequestRead+0x3a>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005800:	d108      	bne.n	8005814 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e00b      	b.n	800582c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	2b11      	cmp	r3, #17
 800581a:	d107      	bne.n	800582c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800582a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f893 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005852:	d103      	bne.n	800585c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e079      	b.n	8005954 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005868:	d108      	bne.n	800587c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800586a:	897b      	ldrh	r3, [r7, #10]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	b2da      	uxtb	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	611a      	str	r2, [r3, #16]
 800587a:	e05f      	b.n	800593c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800587c:	897b      	ldrh	r3, [r7, #10]
 800587e:	11db      	asrs	r3, r3, #7
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 0306 	and.w	r3, r3, #6
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f063 030f 	orn	r3, r3, #15
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	4930      	ldr	r1, [pc, #192]	; (800595c <I2C_MasterRequestRead+0x194>)
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f8b9 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e054      	b.n	8005954 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4929      	ldr	r1, [pc, #164]	; (8005960 <I2C_MasterRequestRead+0x198>)
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f8a9 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e044      	b.n	8005954 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f831 	bl	8005964 <I2C_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00d      	beq.n	8005924 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005916:	d103      	bne.n	8005920 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e017      	b.n	8005954 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005924:	897b      	ldrh	r3, [r7, #10]
 8005926:	11db      	asrs	r3, r3, #7
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f063 030e 	orn	r3, r3, #14
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	4907      	ldr	r1, [pc, #28]	; (8005960 <I2C_MasterRequestRead+0x198>)
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 f865 	bl	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	00010008 	.word	0x00010008
 8005960:	00010002 	.word	0x00010002

08005964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005974:	e025      	b.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597c:	d021      	beq.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fe fd41 	bl	8004404 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d116      	bne.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e023      	b.n	8005a0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10d      	bne.n	80059e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	43da      	mvns	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf0c      	ite	eq
 80059de:	2301      	moveq	r3, #1
 80059e0:	2300      	movne	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	e00c      	b.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4013      	ands	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf0c      	ite	eq
 80059fa:	2301      	moveq	r3, #1
 80059fc:	2300      	movne	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d0b6      	beq.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a20:	e051      	b.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a30:	d123      	bne.n	8005a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f043 0204 	orr.w	r2, r3, #4
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e046      	b.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a80:	d021      	beq.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fe fcbf 	bl	8004404 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d116      	bne.n	8005ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e020      	b.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10c      	bne.n	8005aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	43da      	mvns	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e00b      	b.n	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	43da      	mvns	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d18d      	bne.n	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b1c:	e02d      	b.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f8ce 	bl	8005cc0 <I2C_IsAcknowledgeFailed>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e02d      	b.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b34:	d021      	beq.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	f7fe fc65 	bl	8004404 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d116      	bne.n	8005b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e007      	b.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d1ca      	bne.n	8005b1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b9e:	e02d      	b.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f88d 	bl	8005cc0 <I2C_IsAcknowledgeFailed>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e02d      	b.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb6:	d021      	beq.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb8:	f7fe fc24 	bl	8004404 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d302      	bcc.n	8005bce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d116      	bne.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e007      	b.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d1ca      	bne.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c20:	e042      	b.n	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d119      	bne.n	8005c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0210 	mvn.w	r2, #16
 8005c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e029      	b.n	8005cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c64:	f7fe fbce 	bl	8004404 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d302      	bcc.n	8005c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d116      	bne.n	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e007      	b.n	8005cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d1b5      	bne.n	8005c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd6:	d11b      	bne.n	8005d10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ce0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f043 0204 	orr.w	r2, r3, #4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e267      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d075      	beq.n	8005e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3e:	4b88      	ldr	r3, [pc, #544]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 030c 	and.w	r3, r3, #12
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d00c      	beq.n	8005d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4a:	4b85      	ldr	r3, [pc, #532]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d112      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d56:	4b82      	ldr	r3, [pc, #520]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d62:	d10b      	bne.n	8005d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d64:	4b7e      	ldr	r3, [pc, #504]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d05b      	beq.n	8005e28 <HAL_RCC_OscConfig+0x108>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d157      	bne.n	8005e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e242      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d106      	bne.n	8005d94 <HAL_RCC_OscConfig+0x74>
 8005d86:	4b76      	ldr	r3, [pc, #472]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a75      	ldr	r2, [pc, #468]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e01d      	b.n	8005dd0 <HAL_RCC_OscConfig+0xb0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x98>
 8005d9e:	4b70      	ldr	r3, [pc, #448]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a6f      	ldr	r2, [pc, #444]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4b6d      	ldr	r3, [pc, #436]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a6c      	ldr	r2, [pc, #432]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0xb0>
 8005db8:	4b69      	ldr	r3, [pc, #420]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a68      	ldr	r2, [pc, #416]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a65      	ldr	r2, [pc, #404]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fe fb14 	bl	8004404 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fe fb10 	bl	8004404 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e207      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df2:	4b5b      	ldr	r3, [pc, #364]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0xc0>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fe fb00 	bl	8004404 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fe fafc 	bl	8004404 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e1f3      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1a:	4b51      	ldr	r3, [pc, #324]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0xe8>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d063      	beq.n	8005efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e36:	4b4a      	ldr	r3, [pc, #296]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e42:	4b47      	ldr	r3, [pc, #284]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d11c      	bne.n	8005e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e4e:	4b44      	ldr	r3, [pc, #272]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d116      	bne.n	8005e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5a:	4b41      	ldr	r3, [pc, #260]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_RCC_OscConfig+0x152>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d001      	beq.n	8005e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e1c7      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e72:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4937      	ldr	r1, [pc, #220]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e86:	e03a      	b.n	8005efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e90:	4b34      	ldr	r3, [pc, #208]	; (8005f64 <HAL_RCC_OscConfig+0x244>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fe fab5 	bl	8004404 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e9e:	f7fe fab1 	bl	8004404 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e1a8      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebc:	4b28      	ldr	r3, [pc, #160]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4925      	ldr	r1, [pc, #148]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	600b      	str	r3, [r1, #0]
 8005ed0:	e015      	b.n	8005efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed2:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCC_OscConfig+0x244>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fe fa94 	bl	8004404 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ee0:	f7fe fa90 	bl	8004404 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e187      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d036      	beq.n	8005f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <HAL_RCC_OscConfig+0x248>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f18:	f7fe fa74 	bl	8004404 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f20:	f7fe fa70 	bl	8004404 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e167      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCC_OscConfig+0x240>)
 8005f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f0      	beq.n	8005f20 <HAL_RCC_OscConfig+0x200>
 8005f3e:	e01b      	b.n	8005f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f40:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCC_OscConfig+0x248>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f46:	f7fe fa5d 	bl	8004404 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f4c:	e00e      	b.n	8005f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f4e:	f7fe fa59 	bl	8004404 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d907      	bls.n	8005f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e150      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
 8005f60:	40023800 	.word	0x40023800
 8005f64:	42470000 	.word	0x42470000
 8005f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f6c:	4b88      	ldr	r3, [pc, #544]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ea      	bne.n	8005f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8097 	beq.w	80060b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f86:	2300      	movs	r3, #0
 8005f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f8a:	4b81      	ldr	r3, [pc, #516]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	4b7d      	ldr	r3, [pc, #500]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	4a7c      	ldr	r2, [pc, #496]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa6:	4b7a      	ldr	r3, [pc, #488]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb6:	4b77      	ldr	r3, [pc, #476]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d118      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc2:	4b74      	ldr	r3, [pc, #464]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a73      	ldr	r2, [pc, #460]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fce:	f7fe fa19 	bl	8004404 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd6:	f7fe fa15 	bl	8004404 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e10c      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe8:	4b6a      	ldr	r3, [pc, #424]	; (8006194 <HAL_RCC_OscConfig+0x474>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d106      	bne.n	800600a <HAL_RCC_OscConfig+0x2ea>
 8005ffc:	4b64      	ldr	r3, [pc, #400]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	4a63      	ldr	r2, [pc, #396]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	6713      	str	r3, [r2, #112]	; 0x70
 8006008:	e01c      	b.n	8006044 <HAL_RCC_OscConfig+0x324>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b05      	cmp	r3, #5
 8006010:	d10c      	bne.n	800602c <HAL_RCC_OscConfig+0x30c>
 8006012:	4b5f      	ldr	r3, [pc, #380]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	4a5e      	ldr	r2, [pc, #376]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006018:	f043 0304 	orr.w	r3, r3, #4
 800601c:	6713      	str	r3, [r2, #112]	; 0x70
 800601e:	4b5c      	ldr	r3, [pc, #368]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	4a5b      	ldr	r2, [pc, #364]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	6713      	str	r3, [r2, #112]	; 0x70
 800602a:	e00b      	b.n	8006044 <HAL_RCC_OscConfig+0x324>
 800602c:	4b58      	ldr	r3, [pc, #352]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800602e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006030:	4a57      	ldr	r2, [pc, #348]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	6713      	str	r3, [r2, #112]	; 0x70
 8006038:	4b55      	ldr	r3, [pc, #340]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800603a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603c:	4a54      	ldr	r2, [pc, #336]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800603e:	f023 0304 	bic.w	r3, r3, #4
 8006042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d015      	beq.n	8006078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604c:	f7fe f9da 	bl	8004404 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006052:	e00a      	b.n	800606a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006054:	f7fe f9d6 	bl	8004404 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e0cb      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606a:	4b49      	ldr	r3, [pc, #292]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0ee      	beq.n	8006054 <HAL_RCC_OscConfig+0x334>
 8006076:	e014      	b.n	80060a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006078:	f7fe f9c4 	bl	8004404 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607e:	e00a      	b.n	8006096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006080:	f7fe f9c0 	bl	8004404 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e0b5      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006096:	4b3e      	ldr	r3, [pc, #248]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ee      	bne.n	8006080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a8:	4b39      	ldr	r3, [pc, #228]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	4a38      	ldr	r2, [pc, #224]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 80a1 	beq.w	8006200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060be:	4b34      	ldr	r3, [pc, #208]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d05c      	beq.n	8006184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d141      	bne.n	8006156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d2:	4b31      	ldr	r3, [pc, #196]	; (8006198 <HAL_RCC_OscConfig+0x478>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fe f994 	bl	8004404 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e0:	f7fe f990 	bl	8004404 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e087      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f2:	4b27      	ldr	r3, [pc, #156]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69da      	ldr	r2, [r3, #28]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	019b      	lsls	r3, r3, #6
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	3b01      	subs	r3, #1
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	061b      	lsls	r3, r3, #24
 8006122:	491b      	ldr	r1, [pc, #108]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006124:	4313      	orrs	r3, r2
 8006126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006128:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <HAL_RCC_OscConfig+0x478>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612e:	f7fe f969 	bl	8004404 <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006136:	f7fe f965 	bl	8004404 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e05c      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x416>
 8006154:	e054      	b.n	8006200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <HAL_RCC_OscConfig+0x478>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615c:	f7fe f952 	bl	8004404 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006164:	f7fe f94e 	bl	8004404 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e045      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_RCC_OscConfig+0x470>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x444>
 8006182:	e03d      	b.n	8006200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d107      	bne.n	800619c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e038      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
 8006190:	40023800 	.word	0x40023800
 8006194:	40007000 	.word	0x40007000
 8006198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <HAL_RCC_OscConfig+0x4ec>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d028      	beq.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d121      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d11a      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061cc:	4013      	ands	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d111      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	3b01      	subs	r3, #1
 80061e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d107      	bne.n	80061fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40023800 	.word	0x40023800

08006210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e0cc      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006224:	4b68      	ldr	r3, [pc, #416]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d90c      	bls.n	800624c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b65      	ldr	r3, [pc, #404]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0b8      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d020      	beq.n	800629a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800626e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800627c:	4b53      	ldr	r3, [pc, #332]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006288:	4b50      	ldr	r3, [pc, #320]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	494d      	ldr	r1, [pc, #308]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	4313      	orrs	r3, r2
 8006298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d044      	beq.n	8006330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b47      	ldr	r3, [pc, #284]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d119      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d003      	beq.n	80062ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d107      	bne.n	80062de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ce:	4b3f      	ldr	r3, [pc, #252]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e06f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062de:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e067      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ee:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f023 0203 	bic.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4934      	ldr	r1, [pc, #208]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006300:	f7fe f880 	bl	8004404 <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	e00a      	b.n	800631e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006308:	f7fe f87c 	bl	8004404 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e04f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631e:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 020c 	and.w	r2, r3, #12
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	429a      	cmp	r2, r3
 800632e:	d1eb      	bne.n	8006308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006330:	4b25      	ldr	r3, [pc, #148]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d20c      	bcs.n	8006358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e032      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4916      	ldr	r1, [pc, #88]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	490e      	ldr	r1, [pc, #56]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006396:	f000 f821 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800639a:	4602      	mov	r2, r0
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	490a      	ldr	r1, [pc, #40]	; (80063d0 <HAL_RCC_ClockConfig+0x1c0>)
 80063a8:	5ccb      	ldrb	r3, [r1, r3]
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1c8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd ffe0 	bl	800437c <HAL_InitTick>

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023c00 	.word	0x40023c00
 80063cc:	40023800 	.word	0x40023800
 80063d0:	0800bb10 	.word	0x0800bb10
 80063d4:	2000002c 	.word	0x2000002c
 80063d8:	20000030 	.word	0x20000030

080063dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e0:	b094      	sub	sp, #80	; 0x50
 80063e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	647b      	str	r3, [r7, #68]	; 0x44
 80063e8:	2300      	movs	r3, #0
 80063ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ec:	2300      	movs	r3, #0
 80063ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f4:	4b79      	ldr	r3, [pc, #484]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d00d      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0x40>
 8006400:	2b08      	cmp	r3, #8
 8006402:	f200 80e1 	bhi.w	80065c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_RCC_GetSysClockFreq+0x34>
 800640a:	2b04      	cmp	r3, #4
 800640c:	d003      	beq.n	8006416 <HAL_RCC_GetSysClockFreq+0x3a>
 800640e:	e0db      	b.n	80065c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006410:	4b73      	ldr	r3, [pc, #460]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006414:	e0db      	b.n	80065ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006416:	4b73      	ldr	r3, [pc, #460]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800641a:	e0d8      	b.n	80065ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800641c:	4b6f      	ldr	r3, [pc, #444]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006426:	4b6d      	ldr	r3, [pc, #436]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d063      	beq.n	80064fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006432:	4b6a      	ldr	r3, [pc, #424]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	2200      	movs	r2, #0
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
 800643c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006444:	633b      	str	r3, [r7, #48]	; 0x30
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f04f 0100 	mov.w	r1, #0
 800645a:	0159      	lsls	r1, r3, #5
 800645c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006460:	0150      	lsls	r0, r2, #5
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4621      	mov	r1, r4
 8006468:	1a51      	subs	r1, r2, r1
 800646a:	6139      	str	r1, [r7, #16]
 800646c:	4629      	mov	r1, r5
 800646e:	eb63 0301 	sbc.w	r3, r3, r1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006480:	4659      	mov	r1, fp
 8006482:	018b      	lsls	r3, r1, #6
 8006484:	4651      	mov	r1, sl
 8006486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800648a:	4651      	mov	r1, sl
 800648c:	018a      	lsls	r2, r1, #6
 800648e:	4651      	mov	r1, sl
 8006490:	ebb2 0801 	subs.w	r8, r2, r1
 8006494:	4659      	mov	r1, fp
 8006496:	eb63 0901 	sbc.w	r9, r3, r1
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ae:	4690      	mov	r8, r2
 80064b0:	4699      	mov	r9, r3
 80064b2:	4623      	mov	r3, r4
 80064b4:	eb18 0303 	adds.w	r3, r8, r3
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	462b      	mov	r3, r5
 80064bc:	eb49 0303 	adc.w	r3, r9, r3
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ce:	4629      	mov	r1, r5
 80064d0:	024b      	lsls	r3, r1, #9
 80064d2:	4621      	mov	r1, r4
 80064d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064d8:	4621      	mov	r1, r4
 80064da:	024a      	lsls	r2, r1, #9
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e2:	2200      	movs	r2, #0
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ec:	f7fa fbac 	bl	8000c48 <__aeabi_uldivmod>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4613      	mov	r3, r2
 80064f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f8:	e058      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064fa:	4b38      	ldr	r3, [pc, #224]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2200      	movs	r2, #0
 8006502:	4618      	mov	r0, r3
 8006504:	4611      	mov	r1, r2
 8006506:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	2300      	movs	r3, #0
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
 8006510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	f04f 0000 	mov.w	r0, #0
 800651c:	f04f 0100 	mov.w	r1, #0
 8006520:	0159      	lsls	r1, r3, #5
 8006522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006526:	0150      	lsls	r0, r2, #5
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4641      	mov	r1, r8
 800652e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006532:	4649      	mov	r1, r9
 8006534:	eb63 0b01 	sbc.w	fp, r3, r1
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800654c:	ebb2 040a 	subs.w	r4, r2, sl
 8006550:	eb63 050b 	sbc.w	r5, r3, fp
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	00eb      	lsls	r3, r5, #3
 800655e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006562:	00e2      	lsls	r2, r4, #3
 8006564:	4614      	mov	r4, r2
 8006566:	461d      	mov	r5, r3
 8006568:	4643      	mov	r3, r8
 800656a:	18e3      	adds	r3, r4, r3
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	464b      	mov	r3, r9
 8006570:	eb45 0303 	adc.w	r3, r5, r3
 8006574:	607b      	str	r3, [r7, #4]
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006582:	4629      	mov	r1, r5
 8006584:	028b      	lsls	r3, r1, #10
 8006586:	4621      	mov	r1, r4
 8006588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800658c:	4621      	mov	r1, r4
 800658e:	028a      	lsls	r2, r1, #10
 8006590:	4610      	mov	r0, r2
 8006592:	4619      	mov	r1, r3
 8006594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006596:	2200      	movs	r2, #0
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	61fa      	str	r2, [r7, #28]
 800659c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a0:	f7fa fb52 	bl	8000c48 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4613      	mov	r3, r2
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_RCC_GetSysClockFreq+0x200>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	0c1b      	lsrs	r3, r3, #16
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	3301      	adds	r3, #1
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c6:	e002      	b.n	80065ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3750      	adds	r7, #80	; 0x50
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800
 80065e0:	00f42400 	.word	0x00f42400
 80065e4:	007a1200 	.word	0x007a1200

080065e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <HAL_RCC_GetHCLKFreq+0x14>)
 80065ee:	681b      	ldr	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	2000002c 	.word	0x2000002c

08006600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006604:	f7ff fff0 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006608:	4602      	mov	r2, r0
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	0a9b      	lsrs	r3, r3, #10
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	4903      	ldr	r1, [pc, #12]	; (8006624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006616:	5ccb      	ldrb	r3, [r1, r3]
 8006618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800661c:	4618      	mov	r0, r3
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40023800 	.word	0x40023800
 8006624:	0800bb20 	.word	0x0800bb20

08006628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800662c:	f7ff ffdc 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006630:	4602      	mov	r2, r0
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	0b5b      	lsrs	r3, r3, #13
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	4903      	ldr	r1, [pc, #12]	; (800664c <HAL_RCC_GetPCLK2Freq+0x24>)
 800663e:	5ccb      	ldrb	r3, [r1, r3]
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006644:	4618      	mov	r0, r3
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40023800 	.word	0x40023800
 800664c:	0800bb20 	.word	0x0800bb20

08006650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e07b      	b.n	800675a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d108      	bne.n	800667c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006672:	d009      	beq.n	8006688 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	61da      	str	r2, [r3, #28]
 800667a:	e005      	b.n	8006688 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fb ffc8 	bl	8002638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670c:	ea42 0103 	orr.w	r1, r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	f003 0104 	and.w	r1, r3, #4
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f003 0210 	and.w	r2, r3, #16
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006748:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e041      	b.n	80067f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fc f811 	bl	80027b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2202      	movs	r2, #2
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f000 fed1 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e04e      	b.n	80068b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d022      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006842:	d01d      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1f      	ldr	r2, [pc, #124]	; (80068c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d018      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <HAL_TIM_Base_Start_IT+0xcc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d013      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1c      	ldr	r2, [pc, #112]	; (80068d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00e      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1b      	ldr	r2, [pc, #108]	; (80068d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d009      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a19      	ldr	r2, [pc, #100]	; (80068d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d004      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a18      	ldr	r2, [pc, #96]	; (80068dc <HAL_TIM_Base_Start_IT+0xdc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d111      	bne.n	80068a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b06      	cmp	r3, #6
 8006890:	d010      	beq.n	80068b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a2:	e007      	b.n	80068b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	40000c00 	.word	0x40000c00
 80068d4:	40010400 	.word	0x40010400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40001800 	.word	0x40001800

080068e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e041      	b.n	8006976 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fb fff6 	bl	80028f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f000 fe12 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <HAL_TIM_PWM_Start+0x24>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e022      	b.n	80069ea <HAL_TIM_PWM_Start+0x6a>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d109      	bne.n	80069be <HAL_TIM_PWM_Start+0x3e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	bf14      	ite	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	2300      	moveq	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	e015      	b.n	80069ea <HAL_TIM_PWM_Start+0x6a>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d109      	bne.n	80069d8 <HAL_TIM_PWM_Start+0x58>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	e008      	b.n	80069ea <HAL_TIM_PWM_Start+0x6a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e07c      	b.n	8006aec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PWM_Start+0x82>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a00:	e013      	b.n	8006a2a <HAL_TIM_PWM_Start+0xaa>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start+0x92>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a10:	e00b      	b.n	8006a2a <HAL_TIM_PWM_Start+0xaa>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d104      	bne.n	8006a22 <HAL_TIM_PWM_Start+0xa2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a20:	e003      	b.n	8006a2a <HAL_TIM_PWM_Start+0xaa>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 f99c 	bl	8007d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <HAL_TIM_PWM_Start+0x174>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIM_PWM_Start+0xcc>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2c      	ldr	r2, [pc, #176]	; (8006af8 <HAL_TIM_PWM_Start+0x178>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_PWM_Start+0xd0>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <HAL_TIM_PWM_Start+0xd2>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <HAL_TIM_PWM_Start+0x174>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x136>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a78:	d01d      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x136>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <HAL_TIM_PWM_Start+0x17c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x136>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_TIM_PWM_Start+0x180>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x136>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <HAL_TIM_PWM_Start+0x184>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x136>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a16      	ldr	r2, [pc, #88]	; (8006af8 <HAL_TIM_PWM_Start+0x178>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x136>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <HAL_TIM_PWM_Start+0x188>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x136>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a16      	ldr	r2, [pc, #88]	; (8006b0c <HAL_TIM_PWM_Start+0x18c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d111      	bne.n	8006ada <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b06      	cmp	r3, #6
 8006ac6:	d010      	beq.n	8006aea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad8:	e007      	b.n	8006aea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40001800 	.word	0x40001800

08006b10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e041      	b.n	8006ba6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f839 	bl	8006bae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f000 fcfa 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <HAL_TIM_IC_Start_IT+0x1e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	e013      	b.n	8006c0a <HAL_TIM_IC_Start_IT+0x46>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d104      	bne.n	8006bf2 <HAL_TIM_IC_Start_IT+0x2e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	e00b      	b.n	8006c0a <HAL_TIM_IC_Start_IT+0x46>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d104      	bne.n	8006c02 <HAL_TIM_IC_Start_IT+0x3e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	e003      	b.n	8006c0a <HAL_TIM_IC_Start_IT+0x46>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <HAL_TIM_IC_Start_IT+0x58>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	e013      	b.n	8006c44 <HAL_TIM_IC_Start_IT+0x80>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d104      	bne.n	8006c2c <HAL_TIM_IC_Start_IT+0x68>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	e00b      	b.n	8006c44 <HAL_TIM_IC_Start_IT+0x80>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d104      	bne.n	8006c3c <HAL_TIM_IC_Start_IT+0x78>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e003      	b.n	8006c44 <HAL_TIM_IC_Start_IT+0x80>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d102      	bne.n	8006c52 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c4c:	7b7b      	ldrb	r3, [r7, #13]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d001      	beq.n	8006c56 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e0cc      	b.n	8006df0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_IC_Start_IT+0xa2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c64:	e013      	b.n	8006c8e <HAL_TIM_IC_Start_IT+0xca>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_IC_Start_IT+0xb2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c74:	e00b      	b.n	8006c8e <HAL_TIM_IC_Start_IT+0xca>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_IC_Start_IT+0xc2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c84:	e003      	b.n	8006c8e <HAL_TIM_IC_Start_IT+0xca>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_IC_Start_IT+0xda>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c9c:	e013      	b.n	8006cc6 <HAL_TIM_IC_Start_IT+0x102>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_IC_Start_IT+0xea>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cac:	e00b      	b.n	8006cc6 <HAL_TIM_IC_Start_IT+0x102>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_IC_Start_IT+0xfa>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbc:	e003      	b.n	8006cc6 <HAL_TIM_IC_Start_IT+0x102>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b0c      	cmp	r3, #12
 8006cca:	d841      	bhi.n	8006d50 <HAL_TIM_IC_Start_IT+0x18c>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <HAL_TIM_IC_Start_IT+0x110>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006d09 	.word	0x08006d09
 8006cd8:	08006d51 	.word	0x08006d51
 8006cdc:	08006d51 	.word	0x08006d51
 8006ce0:	08006d51 	.word	0x08006d51
 8006ce4:	08006d1b 	.word	0x08006d1b
 8006ce8:	08006d51 	.word	0x08006d51
 8006cec:	08006d51 	.word	0x08006d51
 8006cf0:	08006d51 	.word	0x08006d51
 8006cf4:	08006d2d 	.word	0x08006d2d
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d51 	.word	0x08006d51
 8006d00:	08006d51 	.word	0x08006d51
 8006d04:	08006d3f 	.word	0x08006d3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0202 	orr.w	r2, r2, #2
 8006d16:	60da      	str	r2, [r3, #12]
      break;
 8006d18:	e01d      	b.n	8006d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0204 	orr.w	r2, r2, #4
 8006d28:	60da      	str	r2, [r3, #12]
      break;
 8006d2a:	e014      	b.n	8006d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0208 	orr.w	r2, r2, #8
 8006d3a:	60da      	str	r2, [r3, #12]
      break;
 8006d3c:	e00b      	b.n	8006d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0210 	orr.w	r2, r2, #16
 8006d4c:	60da      	str	r2, [r3, #12]
      break;
 8006d4e:	e002      	b.n	8006d56 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
      break;
 8006d54:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d148      	bne.n	8006dee <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2201      	movs	r2, #1
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f803 	bl	8007d70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a22      	ldr	r2, [pc, #136]	; (8006df8 <HAL_TIM_IC_Start_IT+0x234>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d022      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0x1f6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7c:	d01d      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0x1f6>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <HAL_TIM_IC_Start_IT+0x238>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d018      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0x1f6>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <HAL_TIM_IC_Start_IT+0x23c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0x1f6>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <HAL_TIM_IC_Start_IT+0x240>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0x1f6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <HAL_TIM_IC_Start_IT+0x244>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0x1f6>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a18      	ldr	r2, [pc, #96]	; (8006e0c <HAL_TIM_IC_Start_IT+0x248>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0x1f6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <HAL_TIM_IC_Start_IT+0x24c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d111      	bne.n	8006dde <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b06      	cmp	r3, #6
 8006dca:	d010      	beq.n	8006dee <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ddc:	e007      	b.n	8006dee <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0201 	orr.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40000400 	.word	0x40000400
 8006e00:	40000800 	.word	0x40000800
 8006e04:	40000c00 	.word	0x40000c00
 8006e08:	40010400 	.word	0x40010400
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	40001800 	.word	0x40001800

08006e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d122      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d11b      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0202 	mvn.w	r2, #2
 8006e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fd f8c6 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
 8006e5c:	e005      	b.n	8006e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fb54 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fb5b 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d122      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0204 	mvn.w	r2, #4
 8006e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fd f89c 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb2a 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fb31 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0208 	mvn.w	r2, #8
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2204      	movs	r2, #4
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fd f872 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fb00 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb07 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0210 	mvn.w	r2, #16
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2208      	movs	r2, #8
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fd f848 	bl	8003fe8 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fad6 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fadd 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0201 	mvn.w	r2, #1
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fab0 	bl	80074f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b80      	cmp	r3, #128	; 0x80
 8006fa4:	d10e      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	2b80      	cmp	r3, #128	; 0x80
 8006fb2:	d107      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 ffd4 	bl	8007f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b40      	cmp	r3, #64	; 0x40
 8006fd0:	d10e      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b40      	cmp	r3, #64	; 0x40
 8006fde:	d107      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 faa2 	bl	8007534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d10e      	bne.n	800701c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b20      	cmp	r3, #32
 800700a:	d107      	bne.n	800701c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0220 	mvn.w	r2, #32
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 ff9e 	bl	8007f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_TIM_IC_ConfigChannel+0x1e>
 800703e:	2302      	movs	r3, #2
 8007040:	e088      	b.n	8007154 <HAL_TIM_IC_ConfigChannel+0x130>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11b      	bne.n	8007088 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6819      	ldr	r1, [r3, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f000 fcc2 	bl	80079e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 020c 	bic.w	r2, r2, #12
 8007072:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6999      	ldr	r1, [r3, #24]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	619a      	str	r2, [r3, #24]
 8007086:	e060      	b.n	800714a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b04      	cmp	r3, #4
 800708c:	d11c      	bne.n	80070c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6819      	ldr	r1, [r3, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f000 fd46 	bl	8007b2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6999      	ldr	r1, [r3, #24]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	021a      	lsls	r2, r3, #8
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	619a      	str	r2, [r3, #24]
 80070c6:	e040      	b.n	800714a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d11b      	bne.n	8007106 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6819      	ldr	r1, [r3, #0]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f000 fd93 	bl	8007c08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 020c 	bic.w	r2, r2, #12
 80070f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69d9      	ldr	r1, [r3, #28]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	61da      	str	r2, [r3, #28]
 8007104:	e021      	b.n	800714a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d11c      	bne.n	8007146 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f000 fdb0 	bl	8007c80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69da      	ldr	r2, [r3, #28]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800712e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69d9      	ldr	r1, [r3, #28]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	021a      	lsls	r2, r3, #8
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	61da      	str	r2, [r3, #28]
 8007144:	e001      	b.n	800714a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007176:	2302      	movs	r3, #2
 8007178:	e0ae      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b0c      	cmp	r3, #12
 8007186:	f200 809f 	bhi.w	80072c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071c5 	.word	0x080071c5
 8007194:	080072c9 	.word	0x080072c9
 8007198:	080072c9 	.word	0x080072c9
 800719c:	080072c9 	.word	0x080072c9
 80071a0:	08007205 	.word	0x08007205
 80071a4:	080072c9 	.word	0x080072c9
 80071a8:	080072c9 	.word	0x080072c9
 80071ac:	080072c9 	.word	0x080072c9
 80071b0:	08007247 	.word	0x08007247
 80071b4:	080072c9 	.word	0x080072c9
 80071b8:	080072c9 	.word	0x080072c9
 80071bc:	080072c9 	.word	0x080072c9
 80071c0:	08007287 	.word	0x08007287
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fa5c 	bl	8007688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0208 	orr.w	r2, r2, #8
 80071de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0204 	bic.w	r2, r2, #4
 80071ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6999      	ldr	r1, [r3, #24]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	619a      	str	r2, [r3, #24]
      break;
 8007202:	e064      	b.n	80072ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 faac 	bl	8007768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800721e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800722e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	021a      	lsls	r2, r3, #8
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	619a      	str	r2, [r3, #24]
      break;
 8007244:	e043      	b.n	80072ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fb01 	bl	8007854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0208 	orr.w	r2, r2, #8
 8007260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69da      	ldr	r2, [r3, #28]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0204 	bic.w	r2, r2, #4
 8007270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69d9      	ldr	r1, [r3, #28]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	61da      	str	r2, [r3, #28]
      break;
 8007284:	e023      	b.n	80072ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fb55 	bl	800793c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69d9      	ldr	r1, [r3, #28]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	021a      	lsls	r2, r3, #8
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	61da      	str	r2, [r3, #28]
      break;
 80072c6:	e002      	b.n	80072ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	75fb      	strb	r3, [r7, #23]
      break;
 80072cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_TIM_ConfigClockSource+0x1c>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e0b4      	b.n	8007466 <HAL_TIM_ConfigClockSource+0x186>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800731a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007334:	d03e      	beq.n	80073b4 <HAL_TIM_ConfigClockSource+0xd4>
 8007336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733a:	f200 8087 	bhi.w	800744c <HAL_TIM_ConfigClockSource+0x16c>
 800733e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007342:	f000 8086 	beq.w	8007452 <HAL_TIM_ConfigClockSource+0x172>
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d87f      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
 800734c:	2b70      	cmp	r3, #112	; 0x70
 800734e:	d01a      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0xa6>
 8007350:	2b70      	cmp	r3, #112	; 0x70
 8007352:	d87b      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
 8007354:	2b60      	cmp	r3, #96	; 0x60
 8007356:	d050      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x11a>
 8007358:	2b60      	cmp	r3, #96	; 0x60
 800735a:	d877      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
 800735c:	2b50      	cmp	r3, #80	; 0x50
 800735e:	d03c      	beq.n	80073da <HAL_TIM_ConfigClockSource+0xfa>
 8007360:	2b50      	cmp	r3, #80	; 0x50
 8007362:	d873      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d058      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x13a>
 8007368:	2b40      	cmp	r3, #64	; 0x40
 800736a:	d86f      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
 800736c:	2b30      	cmp	r3, #48	; 0x30
 800736e:	d064      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x15a>
 8007370:	2b30      	cmp	r3, #48	; 0x30
 8007372:	d86b      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d060      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x15a>
 8007378:	2b20      	cmp	r3, #32
 800737a:	d867      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d05c      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x15a>
 8007380:	2b10      	cmp	r3, #16
 8007382:	d05a      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x15a>
 8007384:	e062      	b.n	800744c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	6899      	ldr	r1, [r3, #8]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f000 fccb 	bl	8007d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	609a      	str	r2, [r3, #8]
      break;
 80073b2:	e04f      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	6899      	ldr	r1, [r3, #8]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f000 fcb4 	bl	8007d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073d6:	609a      	str	r2, [r3, #8]
      break;
 80073d8:	e03c      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6859      	ldr	r1, [r3, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f000 fb72 	bl	8007ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2150      	movs	r1, #80	; 0x50
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fc81 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 80073f8:	e02c      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6859      	ldr	r1, [r3, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	461a      	mov	r2, r3
 8007408:	f000 fbce 	bl	8007ba8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2160      	movs	r1, #96	; 0x60
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fc71 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 8007418:	e01c      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6859      	ldr	r1, [r3, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	461a      	mov	r2, r3
 8007428:	f000 fb52 	bl	8007ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2140      	movs	r1, #64	; 0x40
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fc61 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 8007438:	e00c      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f000 fc58 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 800744a:	e003      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
      break;
 8007450:	e000      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b0c      	cmp	r3, #12
 8007482:	d831      	bhi.n	80074e8 <HAL_TIM_ReadCapturedValue+0x78>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074c1 	.word	0x080074c1
 8007490:	080074e9 	.word	0x080074e9
 8007494:	080074e9 	.word	0x080074e9
 8007498:	080074e9 	.word	0x080074e9
 800749c:	080074cb 	.word	0x080074cb
 80074a0:	080074e9 	.word	0x080074e9
 80074a4:	080074e9 	.word	0x080074e9
 80074a8:	080074e9 	.word	0x080074e9
 80074ac:	080074d5 	.word	0x080074d5
 80074b0:	080074e9 	.word	0x080074e9
 80074b4:	080074e9 	.word	0x080074e9
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	080074df 	.word	0x080074df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c6:	60fb      	str	r3, [r7, #12]

      break;
 80074c8:	e00f      	b.n	80074ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	60fb      	str	r3, [r7, #12]

      break;
 80074d2:	e00a      	b.n	80074ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	60fb      	str	r3, [r7, #12]

      break;
 80074dc:	e005      	b.n	80074ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	60fb      	str	r3, [r7, #12]

      break;
 80074e6:	e000      	b.n	80074ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80074e8:	bf00      	nop
  }

  return tmpreg;
 80074ea:	68fb      	ldr	r3, [r7, #12]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a40      	ldr	r2, [pc, #256]	; (800765c <TIM_Base_SetConfig+0x114>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007566:	d00f      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3d      	ldr	r2, [pc, #244]	; (8007660 <TIM_Base_SetConfig+0x118>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00b      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a3c      	ldr	r2, [pc, #240]	; (8007664 <TIM_Base_SetConfig+0x11c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d007      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a3b      	ldr	r2, [pc, #236]	; (8007668 <TIM_Base_SetConfig+0x120>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a3a      	ldr	r2, [pc, #232]	; (800766c <TIM_Base_SetConfig+0x124>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d108      	bne.n	800759a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2f      	ldr	r2, [pc, #188]	; (800765c <TIM_Base_SetConfig+0x114>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d02b      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a8:	d027      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2c      	ldr	r2, [pc, #176]	; (8007660 <TIM_Base_SetConfig+0x118>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d023      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2b      	ldr	r2, [pc, #172]	; (8007664 <TIM_Base_SetConfig+0x11c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d01f      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2a      	ldr	r2, [pc, #168]	; (8007668 <TIM_Base_SetConfig+0x120>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01b      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a29      	ldr	r2, [pc, #164]	; (800766c <TIM_Base_SetConfig+0x124>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d017      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a28      	ldr	r2, [pc, #160]	; (8007670 <TIM_Base_SetConfig+0x128>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a27      	ldr	r2, [pc, #156]	; (8007674 <TIM_Base_SetConfig+0x12c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00f      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a26      	ldr	r2, [pc, #152]	; (8007678 <TIM_Base_SetConfig+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00b      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a25      	ldr	r2, [pc, #148]	; (800767c <TIM_Base_SetConfig+0x134>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d007      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a24      	ldr	r2, [pc, #144]	; (8007680 <TIM_Base_SetConfig+0x138>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d003      	beq.n	80075fa <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a23      	ldr	r2, [pc, #140]	; (8007684 <TIM_Base_SetConfig+0x13c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d108      	bne.n	800760c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a0a      	ldr	r2, [pc, #40]	; (800765c <TIM_Base_SetConfig+0x114>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_Base_SetConfig+0xf8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a0c      	ldr	r2, [pc, #48]	; (800766c <TIM_Base_SetConfig+0x124>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d103      	bne.n	8007648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	615a      	str	r2, [r3, #20]
}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40010000 	.word	0x40010000
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40000c00 	.word	0x40000c00
 800766c:	40010400 	.word	0x40010400
 8007670:	40014000 	.word	0x40014000
 8007674:	40014400 	.word	0x40014400
 8007678:	40014800 	.word	0x40014800
 800767c:	40001800 	.word	0x40001800
 8007680:	40001c00 	.word	0x40001c00
 8007684:	40002000 	.word	0x40002000

08007688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f023 0201 	bic.w	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f023 0302 	bic.w	r3, r3, #2
 80076d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a20      	ldr	r2, [pc, #128]	; (8007760 <TIM_OC1_SetConfig+0xd8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <TIM_OC1_SetConfig+0x64>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a1f      	ldr	r2, [pc, #124]	; (8007764 <TIM_OC1_SetConfig+0xdc>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d10c      	bne.n	8007706 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f023 0308 	bic.w	r3, r3, #8
 80076f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f023 0304 	bic.w	r3, r3, #4
 8007704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a15      	ldr	r2, [pc, #84]	; (8007760 <TIM_OC1_SetConfig+0xd8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d003      	beq.n	8007716 <TIM_OC1_SetConfig+0x8e>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a14      	ldr	r2, [pc, #80]	; (8007764 <TIM_OC1_SetConfig+0xdc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d111      	bne.n	800773a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800771c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	621a      	str	r2, [r3, #32]
}
 8007754:	bf00      	nop
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	40010000 	.word	0x40010000
 8007764:	40010400 	.word	0x40010400

08007768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f023 0210 	bic.w	r2, r3, #16
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0320 	bic.w	r3, r3, #32
 80077b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a22      	ldr	r2, [pc, #136]	; (800784c <TIM_OC2_SetConfig+0xe4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_OC2_SetConfig+0x68>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a21      	ldr	r2, [pc, #132]	; (8007850 <TIM_OC2_SetConfig+0xe8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10d      	bne.n	80077ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a17      	ldr	r2, [pc, #92]	; (800784c <TIM_OC2_SetConfig+0xe4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_OC2_SetConfig+0x94>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <TIM_OC2_SetConfig+0xe8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d113      	bne.n	8007824 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800780a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40010400 	.word	0x40010400

08007854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800789c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a21      	ldr	r2, [pc, #132]	; (8007934 <TIM_OC3_SetConfig+0xe0>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d003      	beq.n	80078ba <TIM_OC3_SetConfig+0x66>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a20      	ldr	r2, [pc, #128]	; (8007938 <TIM_OC3_SetConfig+0xe4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d10d      	bne.n	80078d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a16      	ldr	r2, [pc, #88]	; (8007934 <TIM_OC3_SetConfig+0xe0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_OC3_SetConfig+0x92>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a15      	ldr	r2, [pc, #84]	; (8007938 <TIM_OC3_SetConfig+0xe4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d113      	bne.n	800790e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	621a      	str	r2, [r3, #32]
}
 8007928:	bf00      	nop
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	40010000 	.word	0x40010000
 8007938:	40010400 	.word	0x40010400

0800793c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	031b      	lsls	r3, r3, #12
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a12      	ldr	r2, [pc, #72]	; (80079e0 <TIM_OC4_SetConfig+0xa4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d003      	beq.n	80079a4 <TIM_OC4_SetConfig+0x68>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <TIM_OC4_SetConfig+0xa8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d109      	bne.n	80079b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	019b      	lsls	r3, r3, #6
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40010400 	.word	0x40010400

080079e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f023 0201 	bic.w	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4a28      	ldr	r2, [pc, #160]	; (8007ab4 <TIM_TI1_SetConfig+0xcc>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01b      	beq.n	8007a4e <TIM_TI1_SetConfig+0x66>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1c:	d017      	beq.n	8007a4e <TIM_TI1_SetConfig+0x66>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4a25      	ldr	r2, [pc, #148]	; (8007ab8 <TIM_TI1_SetConfig+0xd0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <TIM_TI1_SetConfig+0x66>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4a24      	ldr	r2, [pc, #144]	; (8007abc <TIM_TI1_SetConfig+0xd4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00f      	beq.n	8007a4e <TIM_TI1_SetConfig+0x66>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4a23      	ldr	r2, [pc, #140]	; (8007ac0 <TIM_TI1_SetConfig+0xd8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00b      	beq.n	8007a4e <TIM_TI1_SetConfig+0x66>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4a22      	ldr	r2, [pc, #136]	; (8007ac4 <TIM_TI1_SetConfig+0xdc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <TIM_TI1_SetConfig+0x66>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4a21      	ldr	r2, [pc, #132]	; (8007ac8 <TIM_TI1_SetConfig+0xe0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_TI1_SetConfig+0x66>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4a20      	ldr	r2, [pc, #128]	; (8007acc <TIM_TI1_SetConfig+0xe4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d101      	bne.n	8007a52 <TIM_TI1_SetConfig+0x6a>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <TIM_TI1_SetConfig+0x6c>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e003      	b.n	8007a72 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f043 0301 	orr.w	r3, r3, #1
 8007a70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f023 030a 	bic.w	r3, r3, #10
 8007a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f003 030a 	and.w	r3, r3, #10
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40010000 	.word	0x40010000
 8007ab8:	40000400 	.word	0x40000400
 8007abc:	40000800 	.word	0x40000800
 8007ac0:	40000c00 	.word	0x40000c00
 8007ac4:	40010400 	.word	0x40010400
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40001800 	.word	0x40001800

08007ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f023 030a 	bic.w	r3, r3, #10
 8007b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b087      	sub	sp, #28
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	f023 0210 	bic.w	r2, r3, #16
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	031b      	lsls	r3, r3, #12
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	621a      	str	r2, [r3, #32]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f023 0210 	bic.w	r2, r3, #16
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	031b      	lsls	r3, r3, #12
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	621a      	str	r2, [r3, #32]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007c58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	621a      	str	r2, [r3, #32]
}
 8007c74:	bf00      	nop
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	031b      	lsls	r3, r3, #12
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	031b      	lsls	r3, r3, #12
 8007cd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f043 0307 	orr.w	r3, r3, #7
 8007d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	609a      	str	r2, [r3, #8]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	021a      	lsls	r2, r3, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	609a      	str	r2, [r3, #8]
}
 8007d64:	bf00      	nop
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f003 031f 	and.w	r3, r3, #31
 8007d82:	2201      	movs	r2, #1
 8007d84:	fa02 f303 	lsl.w	r3, r2, r3
 8007d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a1a      	ldr	r2, [r3, #32]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	401a      	ands	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 031f 	and.w	r3, r3, #31
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	fa01 f303 	lsl.w	r3, r1, r3
 8007da8:	431a      	orrs	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e05a      	b.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a21      	ldr	r2, [pc, #132]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d022      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e20:	d01d      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1d      	ldr	r2, [pc, #116]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1b      	ldr	r2, [pc, #108]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a17      	ldr	r2, [pc, #92]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d10c      	bne.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40010000 	.word	0x40010000
 8007e9c:	40000400 	.word	0x40000400
 8007ea0:	40000800 	.word	0x40000800
 8007ea4:	40000c00 	.word	0x40000c00
 8007ea8:	40010400 	.word	0x40010400
 8007eac:	40014000 	.word	0x40014000
 8007eb0:	40001800 	.word	0x40001800

08007eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e03d      	b.n	8007f4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e03f      	b.n	8008012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fa fd48 	bl	8002a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2224      	movs	r2, #36	; 0x24
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fd19 	bl	80089fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	4613      	mov	r3, r2
 8008026:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b20      	cmp	r3, #32
 8008032:	d130      	bne.n	8008096 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_UART_Transmit_IT+0x26>
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e029      	b.n	8008098 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_UART_Transmit_IT+0x38>
 800804e:	2302      	movs	r3, #2
 8008050:	e022      	b.n	8008098 <HAL_UART_Transmit_IT+0x7e>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	88fa      	ldrh	r2, [r7, #6]
 8008064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2221      	movs	r2, #33	; 0x21
 8008076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008090:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e000      	b.n	8008098 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008096:	2302      	movs	r3, #2
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	4613      	mov	r3, r2
 80080b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d11d      	bne.n	80080fa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_UART_Receive_IT+0x26>
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e016      	b.n	80080fc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_UART_Receive_IT+0x38>
 80080d8:	2302      	movs	r3, #2
 80080da:	e00f      	b.n	80080fc <HAL_UART_Receive_IT+0x58>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 faab 	bl	800864c <UART_Start_Receive_IT>
 80080f6:	4603      	mov	r3, r0
 80080f8:	e000      	b.n	80080fc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80080fa:	2302      	movs	r3, #2
  }
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b0ba      	sub	sp, #232	; 0xe8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800812a:	2300      	movs	r3, #0
 800812c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008130:	2300      	movs	r3, #0
 8008132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813a:	f003 030f 	and.w	r3, r3, #15
 800813e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800814a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <HAL_UART_IRQHandler+0x66>
 8008156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fb8f 	bl	8008886 <UART_Receive_IT>
      return;
 8008168:	e256      	b.n	8008618 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800816a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 80de 	beq.w	8008330 <HAL_UART_IRQHandler+0x22c>
 8008174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008184:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 80d1 	beq.w	8008330 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00b      	beq.n	80081b2 <HAL_UART_IRQHandler+0xae>
 800819a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800819e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d005      	beq.n	80081b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f043 0201 	orr.w	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <HAL_UART_IRQHandler+0xd2>
 80081be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f043 0202 	orr.w	r2, r3, #2
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <HAL_UART_IRQHandler+0xf6>
 80081e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d005      	beq.n	80081fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f043 0204 	orr.w	r2, r3, #4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fe:	f003 0308 	and.w	r3, r3, #8
 8008202:	2b00      	cmp	r3, #0
 8008204:	d011      	beq.n	800822a <HAL_UART_IRQHandler+0x126>
 8008206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d105      	bne.n	800821e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	f043 0208 	orr.w	r2, r3, #8
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 81ed 	beq.w	800860e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b00      	cmp	r3, #0
 800823e:	d008      	beq.n	8008252 <HAL_UART_IRQHandler+0x14e>
 8008240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fb1a 	bl	8008886 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	bf0c      	ite	eq
 8008260:	2301      	moveq	r3, #1
 8008262:	2300      	movne	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <HAL_UART_IRQHandler+0x17a>
 8008276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800827a:	2b00      	cmp	r3, #0
 800827c:	d04f      	beq.n	800831e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa22 	bl	80086c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828e:	2b40      	cmp	r3, #64	; 0x40
 8008290:	d141      	bne.n	8008316 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3314      	adds	r3, #20
 8008298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3314      	adds	r3, #20
 80082ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082ce:	e841 2300 	strex	r3, r2, [r1]
 80082d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1d9      	bne.n	8008292 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d013      	beq.n	800830e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	4a7d      	ldr	r2, [pc, #500]	; (80084e0 <HAL_UART_IRQHandler+0x3dc>)
 80082ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fc fa37 	bl	8004766 <HAL_DMA_Abort_IT>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d016      	beq.n	800832c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830c:	e00e      	b.n	800832c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f986 	bl	8008620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	e00a      	b.n	800832c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f982 	bl	8008620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	e006      	b.n	800832c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f97e 	bl	8008620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800832a:	e170      	b.n	800860e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832c:	bf00      	nop
    return;
 800832e:	e16e      	b.n	800860e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	2b01      	cmp	r3, #1
 8008336:	f040 814a 	bne.w	80085ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800833a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833e:	f003 0310 	and.w	r3, r3, #16
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8143 	beq.w	80085ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 813c 	beq.w	80085ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008356:	2300      	movs	r3, #0
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	f040 80b4 	bne.w	80084e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8140 	beq.w	8008612 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800839a:	429a      	cmp	r2, r3
 800839c:	f080 8139 	bcs.w	8008612 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b2:	f000 8088 	beq.w	80084c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	330c      	adds	r3, #12
 80083bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	330c      	adds	r3, #12
 80083de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1d9      	bne.n	80083b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3314      	adds	r3, #20
 8008408:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008414:	f023 0301 	bic.w	r3, r3, #1
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3314      	adds	r3, #20
 8008422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008426:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800842a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800842e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e1      	bne.n	8008402 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3314      	adds	r3, #20
 8008444:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800844e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3314      	adds	r3, #20
 800845e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008462:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e3      	bne.n	800843e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	330c      	adds	r3, #12
 800848a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008496:	f023 0310 	bic.w	r3, r3, #16
 800849a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	330c      	adds	r3, #12
 80084a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80084aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e3      	bne.n	8008484 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fc f8e0 	bl	8004686 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f8ac 	bl	8008634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084dc:	e099      	b.n	8008612 <HAL_UART_IRQHandler+0x50e>
 80084de:	bf00      	nop
 80084e0:	0800878f 	.word	0x0800878f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 808b 	beq.w	8008616 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8086 	beq.w	8008616 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	330c      	adds	r3, #12
 8008510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800852e:	647a      	str	r2, [r7, #68]	; 0x44
 8008530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e3      	bne.n	800850a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3314      	adds	r3, #20
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	623b      	str	r3, [r7, #32]
   return(result);
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008566:	633a      	str	r2, [r7, #48]	; 0x30
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800856c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e3      	bne.n	8008542 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	60fb      	str	r3, [r7, #12]
   return(result);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0310 	bic.w	r3, r3, #16
 800859e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	330c      	adds	r3, #12
 80085a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085ac:	61fa      	str	r2, [r7, #28]
 80085ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	69b9      	ldr	r1, [r7, #24]
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e3      	bne.n	8008588 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f834 	bl	8008634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085cc:	e023      	b.n	8008616 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <HAL_UART_IRQHandler+0x4ea>
 80085da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f8e5 	bl	80087b6 <UART_Transmit_IT>
    return;
 80085ec:	e014      	b.n	8008618 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <HAL_UART_IRQHandler+0x514>
 80085fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008602:	2b00      	cmp	r3, #0
 8008604:	d008      	beq.n	8008618 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f925 	bl	8008856 <UART_EndTransmit_IT>
    return;
 800860c:	e004      	b.n	8008618 <HAL_UART_IRQHandler+0x514>
    return;
 800860e:	bf00      	nop
 8008610:	e002      	b.n	8008618 <HAL_UART_IRQHandler+0x514>
      return;
 8008612:	bf00      	nop
 8008614:	e000      	b.n	8008618 <HAL_UART_IRQHandler+0x514>
      return;
 8008616:	bf00      	nop
  }
}
 8008618:	37e8      	adds	r7, #232	; 0xe8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop

08008620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	88fa      	ldrh	r2, [r7, #6]
 800866a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2222      	movs	r2, #34	; 0x22
 8008676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008698:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	695a      	ldr	r2, [r3, #20]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0220 	orr.w	r2, r2, #32
 80086b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b095      	sub	sp, #84	; 0x54
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	330c      	adds	r3, #12
 80086d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	330c      	adds	r3, #12
 80086ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086f0:	643a      	str	r2, [r7, #64]	; 0x40
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e5      	bne.n	80086d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3314      	adds	r3, #20
 800870a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	61fb      	str	r3, [r7, #28]
   return(result);
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	f023 0301 	bic.w	r3, r3, #1
 800871a:	64bb      	str	r3, [r7, #72]	; 0x48
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3314      	adds	r3, #20
 8008722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008724:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800872a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e5      	bne.n	8008704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873c:	2b01      	cmp	r3, #1
 800873e:	d119      	bne.n	8008774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f023 0310 	bic.w	r3, r3, #16
 8008756:	647b      	str	r3, [r7, #68]	; 0x44
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	330c      	adds	r3, #12
 800875e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008760:	61ba      	str	r2, [r7, #24]
 8008762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6979      	ldr	r1, [r7, #20]
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	613b      	str	r3, [r7, #16]
   return(result);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e5      	bne.n	8008740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008782:	bf00      	nop
 8008784:	3754      	adds	r7, #84	; 0x54
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7ff ff39 	bl	8008620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b21      	cmp	r3, #33	; 0x21
 80087c8:	d13e      	bne.n	8008848 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d2:	d114      	bne.n	80087fe <UART_Transmit_IT+0x48>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d110      	bne.n	80087fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	1c9a      	adds	r2, r3, #2
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	621a      	str	r2, [r3, #32]
 80087fc:	e008      	b.n	8008810 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	1c59      	adds	r1, r3, #1
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6211      	str	r1, [r2, #32]
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b29b      	uxth	r3, r3
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	4619      	mov	r1, r3
 800881e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10f      	bne.n	8008844 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008832:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008842:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	e000      	b.n	800884a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008848:	2302      	movs	r3, #2
  }
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800886c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7fb fa34 	bl	8003ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b08c      	sub	sp, #48	; 0x30
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b22      	cmp	r3, #34	; 0x22
 8008898:	f040 80ab 	bne.w	80089f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a4:	d117      	bne.n	80088d6 <UART_Receive_IT+0x50>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d113      	bne.n	80088d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	1c9a      	adds	r2, r3, #2
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	629a      	str	r2, [r3, #40]	; 0x28
 80088d4:	e026      	b.n	8008924 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088dc:	2300      	movs	r3, #0
 80088de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e8:	d007      	beq.n	80088fa <UART_Receive_IT+0x74>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10a      	bne.n	8008908 <UART_Receive_IT+0x82>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	b2da      	uxtb	r2, r3
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	e008      	b.n	800891a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008914:	b2da      	uxtb	r2, r3
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b29b      	uxth	r3, r3
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	4619      	mov	r1, r3
 8008932:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008934:	2b00      	cmp	r3, #0
 8008936:	d15a      	bne.n	80089ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0220 	bic.w	r2, r2, #32
 8008946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695a      	ldr	r2, [r3, #20]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0201 	bic.w	r2, r2, #1
 8008966:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008974:	2b01      	cmp	r3, #1
 8008976:	d135      	bne.n	80089e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	330c      	adds	r3, #12
 8008984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	613b      	str	r3, [r7, #16]
   return(result);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f023 0310 	bic.w	r3, r3, #16
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	330c      	adds	r3, #12
 800899c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899e:	623a      	str	r2, [r7, #32]
 80089a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	69f9      	ldr	r1, [r7, #28]
 80089a4:	6a3a      	ldr	r2, [r7, #32]
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0310 	and.w	r3, r3, #16
 80089bc:	2b10      	cmp	r3, #16
 80089be:	d10a      	bne.n	80089d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fe29 	bl	8008634 <HAL_UARTEx_RxEventCallback>
 80089e2:	e002      	b.n	80089ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fb f98b 	bl	8003d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	e002      	b.n	80089f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e000      	b.n	80089f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089f2:	2302      	movs	r3, #2
  }
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3730      	adds	r7, #48	; 0x30
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a00:	b0c0      	sub	sp, #256	; 0x100
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a18:	68d9      	ldr	r1, [r3, #12]
 8008a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	ea40 0301 	orr.w	r3, r0, r1
 8008a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a54:	f021 010c 	bic.w	r1, r1, #12
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a62:	430b      	orrs	r3, r1
 8008a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a76:	6999      	ldr	r1, [r3, #24]
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	ea40 0301 	orr.w	r3, r0, r1
 8008a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	4b8f      	ldr	r3, [pc, #572]	; (8008cc8 <UART_SetConfig+0x2cc>)
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d005      	beq.n	8008a9c <UART_SetConfig+0xa0>
 8008a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4b8d      	ldr	r3, [pc, #564]	; (8008ccc <UART_SetConfig+0x2d0>)
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d104      	bne.n	8008aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a9c:	f7fd fdc4 	bl	8006628 <HAL_RCC_GetPCLK2Freq>
 8008aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008aa4:	e003      	b.n	8008aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008aa6:	f7fd fdab 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8008aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab8:	f040 810c 	bne.w	8008cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ace:	4622      	mov	r2, r4
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	1891      	adds	r1, r2, r2
 8008ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ad6:	415b      	adcs	r3, r3
 8008ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ade:	4621      	mov	r1, r4
 8008ae0:	eb12 0801 	adds.w	r8, r2, r1
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	eb43 0901 	adc.w	r9, r3, r1
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008afe:	4690      	mov	r8, r2
 8008b00:	4699      	mov	r9, r3
 8008b02:	4623      	mov	r3, r4
 8008b04:	eb18 0303 	adds.w	r3, r8, r3
 8008b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	eb49 0303 	adc.w	r3, r9, r3
 8008b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	18db      	adds	r3, r3, r3
 8008b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8008b30:	4613      	mov	r3, r2
 8008b32:	eb42 0303 	adc.w	r3, r2, r3
 8008b36:	657b      	str	r3, [r7, #84]	; 0x54
 8008b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b40:	f7f8 f882 	bl	8000c48 <__aeabi_uldivmod>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4b61      	ldr	r3, [pc, #388]	; (8008cd0 <UART_SetConfig+0x2d4>)
 8008b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b4e:	095b      	lsrs	r3, r3, #5
 8008b50:	011c      	lsls	r4, r3, #4
 8008b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b64:	4642      	mov	r2, r8
 8008b66:	464b      	mov	r3, r9
 8008b68:	1891      	adds	r1, r2, r2
 8008b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b6c:	415b      	adcs	r3, r3
 8008b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b74:	4641      	mov	r1, r8
 8008b76:	eb12 0a01 	adds.w	sl, r2, r1
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b94:	4692      	mov	sl, r2
 8008b96:	469b      	mov	fp, r3
 8008b98:	4643      	mov	r3, r8
 8008b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8008b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8008ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	18db      	adds	r3, r3, r3
 8008bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	eb42 0303 	adc.w	r3, r2, r3
 8008bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8008bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008bd6:	f7f8 f837 	bl	8000c48 <__aeabi_uldivmod>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	4b3b      	ldr	r3, [pc, #236]	; (8008cd0 <UART_SetConfig+0x2d4>)
 8008be2:	fba3 2301 	umull	r2, r3, r3, r1
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	2264      	movs	r2, #100	; 0x64
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
 8008bee:	1acb      	subs	r3, r1, r3
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008bf6:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <UART_SetConfig+0x2d4>)
 8008bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8008bfc:	095b      	lsrs	r3, r3, #5
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c04:	441c      	add	r4, r3
 8008c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c18:	4642      	mov	r2, r8
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	1891      	adds	r1, r2, r2
 8008c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c20:	415b      	adcs	r3, r3
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c28:	4641      	mov	r1, r8
 8008c2a:	1851      	adds	r1, r2, r1
 8008c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8008c2e:	4649      	mov	r1, r9
 8008c30:	414b      	adcs	r3, r1
 8008c32:	637b      	str	r3, [r7, #52]	; 0x34
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c40:	4659      	mov	r1, fp
 8008c42:	00cb      	lsls	r3, r1, #3
 8008c44:	4651      	mov	r1, sl
 8008c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c4a:	4651      	mov	r1, sl
 8008c4c:	00ca      	lsls	r2, r1, #3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4619      	mov	r1, r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	4642      	mov	r2, r8
 8008c56:	189b      	adds	r3, r3, r2
 8008c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c5c:	464b      	mov	r3, r9
 8008c5e:	460a      	mov	r2, r1
 8008c60:	eb42 0303 	adc.w	r3, r2, r3
 8008c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	18db      	adds	r3, r3, r3
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c82:	4613      	mov	r3, r2
 8008c84:	eb42 0303 	adc.w	r3, r2, r3
 8008c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c92:	f7f7 ffd9 	bl	8000c48 <__aeabi_uldivmod>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4b0d      	ldr	r3, [pc, #52]	; (8008cd0 <UART_SetConfig+0x2d4>)
 8008c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	2164      	movs	r1, #100	; 0x64
 8008ca4:	fb01 f303 	mul.w	r3, r1, r3
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	3332      	adds	r3, #50	; 0x32
 8008cae:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <UART_SetConfig+0x2d4>)
 8008cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	f003 0207 	and.w	r2, r3, #7
 8008cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4422      	add	r2, r4
 8008cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cc4:	e105      	b.n	8008ed2 <UART_SetConfig+0x4d6>
 8008cc6:	bf00      	nop
 8008cc8:	40011000 	.word	0x40011000
 8008ccc:	40011400 	.word	0x40011400
 8008cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	464b      	mov	r3, r9
 8008cea:	1891      	adds	r1, r2, r2
 8008cec:	6239      	str	r1, [r7, #32]
 8008cee:	415b      	adcs	r3, r3
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cf6:	4641      	mov	r1, r8
 8008cf8:	1854      	adds	r4, r2, r1
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	eb43 0501 	adc.w	r5, r3, r1
 8008d00:	f04f 0200 	mov.w	r2, #0
 8008d04:	f04f 0300 	mov.w	r3, #0
 8008d08:	00eb      	lsls	r3, r5, #3
 8008d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d0e:	00e2      	lsls	r2, r4, #3
 8008d10:	4614      	mov	r4, r2
 8008d12:	461d      	mov	r5, r3
 8008d14:	4643      	mov	r3, r8
 8008d16:	18e3      	adds	r3, r4, r3
 8008d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d1c:	464b      	mov	r3, r9
 8008d1e:	eb45 0303 	adc.w	r3, r5, r3
 8008d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d36:	f04f 0200 	mov.w	r2, #0
 8008d3a:	f04f 0300 	mov.w	r3, #0
 8008d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d42:	4629      	mov	r1, r5
 8008d44:	008b      	lsls	r3, r1, #2
 8008d46:	4621      	mov	r1, r4
 8008d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	008a      	lsls	r2, r1, #2
 8008d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d54:	f7f7 ff78 	bl	8000c48 <__aeabi_uldivmod>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4b60      	ldr	r3, [pc, #384]	; (8008ee0 <UART_SetConfig+0x4e4>)
 8008d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d62:	095b      	lsrs	r3, r3, #5
 8008d64:	011c      	lsls	r4, r3, #4
 8008d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d78:	4642      	mov	r2, r8
 8008d7a:	464b      	mov	r3, r9
 8008d7c:	1891      	adds	r1, r2, r2
 8008d7e:	61b9      	str	r1, [r7, #24]
 8008d80:	415b      	adcs	r3, r3
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d88:	4641      	mov	r1, r8
 8008d8a:	1851      	adds	r1, r2, r1
 8008d8c:	6139      	str	r1, [r7, #16]
 8008d8e:	4649      	mov	r1, r9
 8008d90:	414b      	adcs	r3, r1
 8008d92:	617b      	str	r3, [r7, #20]
 8008d94:	f04f 0200 	mov.w	r2, #0
 8008d98:	f04f 0300 	mov.w	r3, #0
 8008d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008da0:	4659      	mov	r1, fp
 8008da2:	00cb      	lsls	r3, r1, #3
 8008da4:	4651      	mov	r1, sl
 8008da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008daa:	4651      	mov	r1, sl
 8008dac:	00ca      	lsls	r2, r1, #3
 8008dae:	4610      	mov	r0, r2
 8008db0:	4619      	mov	r1, r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	4642      	mov	r2, r8
 8008db6:	189b      	adds	r3, r3, r2
 8008db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	460a      	mov	r2, r1
 8008dc0:	eb42 0303 	adc.w	r3, r2, r3
 8008dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008de0:	4649      	mov	r1, r9
 8008de2:	008b      	lsls	r3, r1, #2
 8008de4:	4641      	mov	r1, r8
 8008de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dea:	4641      	mov	r1, r8
 8008dec:	008a      	lsls	r2, r1, #2
 8008dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008df2:	f7f7 ff29 	bl	8000c48 <__aeabi_uldivmod>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4b39      	ldr	r3, [pc, #228]	; (8008ee0 <UART_SetConfig+0x4e4>)
 8008dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8008e00:	095b      	lsrs	r3, r3, #5
 8008e02:	2164      	movs	r1, #100	; 0x64
 8008e04:	fb01 f303 	mul.w	r3, r1, r3
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	3332      	adds	r3, #50	; 0x32
 8008e0e:	4a34      	ldr	r2, [pc, #208]	; (8008ee0 <UART_SetConfig+0x4e4>)
 8008e10:	fba2 2303 	umull	r2, r3, r2, r3
 8008e14:	095b      	lsrs	r3, r3, #5
 8008e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e1a:	441c      	add	r4, r3
 8008e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e20:	2200      	movs	r2, #0
 8008e22:	673b      	str	r3, [r7, #112]	; 0x70
 8008e24:	677a      	str	r2, [r7, #116]	; 0x74
 8008e26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e2a:	4642      	mov	r2, r8
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	1891      	adds	r1, r2, r2
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	415b      	adcs	r3, r3
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	1851      	adds	r1, r2, r1
 8008e3e:	6039      	str	r1, [r7, #0]
 8008e40:	4649      	mov	r1, r9
 8008e42:	414b      	adcs	r3, r1
 8008e44:	607b      	str	r3, [r7, #4]
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	f04f 0300 	mov.w	r3, #0
 8008e4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e52:	4659      	mov	r1, fp
 8008e54:	00cb      	lsls	r3, r1, #3
 8008e56:	4651      	mov	r1, sl
 8008e58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e5c:	4651      	mov	r1, sl
 8008e5e:	00ca      	lsls	r2, r1, #3
 8008e60:	4610      	mov	r0, r2
 8008e62:	4619      	mov	r1, r3
 8008e64:	4603      	mov	r3, r0
 8008e66:	4642      	mov	r2, r8
 8008e68:	189b      	adds	r3, r3, r2
 8008e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	460a      	mov	r2, r1
 8008e70:	eb42 0303 	adc.w	r3, r2, r3
 8008e74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8008e80:	667a      	str	r2, [r7, #100]	; 0x64
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e8e:	4649      	mov	r1, r9
 8008e90:	008b      	lsls	r3, r1, #2
 8008e92:	4641      	mov	r1, r8
 8008e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e98:	4641      	mov	r1, r8
 8008e9a:	008a      	lsls	r2, r1, #2
 8008e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ea0:	f7f7 fed2 	bl	8000c48 <__aeabi_uldivmod>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <UART_SetConfig+0x4e4>)
 8008eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	2164      	movs	r1, #100	; 0x64
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	3332      	adds	r3, #50	; 0x32
 8008ebc:	4a08      	ldr	r2, [pc, #32]	; (8008ee0 <UART_SetConfig+0x4e4>)
 8008ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	f003 020f 	and.w	r2, r3, #15
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4422      	add	r2, r4
 8008ed0:	609a      	str	r2, [r3, #8]
}
 8008ed2:	bf00      	nop
 8008ed4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ede:	bf00      	nop
 8008ee0:	51eb851f 	.word	0x51eb851f

08008ee4 <__errno>:
 8008ee4:	4b01      	ldr	r3, [pc, #4]	; (8008eec <__errno+0x8>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000038 	.word	0x20000038

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4d0d      	ldr	r5, [pc, #52]	; (8008f28 <__libc_init_array+0x38>)
 8008ef4:	4c0d      	ldr	r4, [pc, #52]	; (8008f2c <__libc_init_array+0x3c>)
 8008ef6:	1b64      	subs	r4, r4, r5
 8008ef8:	10a4      	asrs	r4, r4, #2
 8008efa:	2600      	movs	r6, #0
 8008efc:	42a6      	cmp	r6, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	4d0b      	ldr	r5, [pc, #44]	; (8008f30 <__libc_init_array+0x40>)
 8008f02:	4c0c      	ldr	r4, [pc, #48]	; (8008f34 <__libc_init_array+0x44>)
 8008f04:	f002 fde6 	bl	800bad4 <_init>
 8008f08:	1b64      	subs	r4, r4, r5
 8008f0a:	10a4      	asrs	r4, r4, #2
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	42a6      	cmp	r6, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f18:	4798      	blx	r3
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f22:	4798      	blx	r3
 8008f24:	3601      	adds	r6, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	0800bd70 	.word	0x0800bd70
 8008f2c:	0800bd70 	.word	0x0800bd70
 8008f30:	0800bd70 	.word	0x0800bd70
 8008f34:	0800bd74 	.word	0x0800bd74

08008f38 <memset>:
 8008f38:	4402      	add	r2, r0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d100      	bne.n	8008f42 <memset+0xa>
 8008f40:	4770      	bx	lr
 8008f42:	f803 1b01 	strb.w	r1, [r3], #1
 8008f46:	e7f9      	b.n	8008f3c <memset+0x4>

08008f48 <siprintf>:
 8008f48:	b40e      	push	{r1, r2, r3}
 8008f4a:	b500      	push	{lr}
 8008f4c:	b09c      	sub	sp, #112	; 0x70
 8008f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f50:	9002      	str	r0, [sp, #8]
 8008f52:	9006      	str	r0, [sp, #24]
 8008f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f58:	4809      	ldr	r0, [pc, #36]	; (8008f80 <siprintf+0x38>)
 8008f5a:	9107      	str	r1, [sp, #28]
 8008f5c:	9104      	str	r1, [sp, #16]
 8008f5e:	4909      	ldr	r1, [pc, #36]	; (8008f84 <siprintf+0x3c>)
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	a902      	add	r1, sp, #8
 8008f6c:	f000 f868 	bl	8009040 <_svfiprintf_r>
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	b01c      	add	sp, #112	; 0x70
 8008f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f7c:	b003      	add	sp, #12
 8008f7e:	4770      	bx	lr
 8008f80:	20000038 	.word	0x20000038
 8008f84:	ffff0208 	.word	0xffff0208

08008f88 <__ssputs_r>:
 8008f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	688e      	ldr	r6, [r1, #8]
 8008f8e:	429e      	cmp	r6, r3
 8008f90:	4682      	mov	sl, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	4690      	mov	r8, r2
 8008f96:	461f      	mov	r7, r3
 8008f98:	d838      	bhi.n	800900c <__ssputs_r+0x84>
 8008f9a:	898a      	ldrh	r2, [r1, #12]
 8008f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fa0:	d032      	beq.n	8009008 <__ssputs_r+0x80>
 8008fa2:	6825      	ldr	r5, [r4, #0]
 8008fa4:	6909      	ldr	r1, [r1, #16]
 8008fa6:	eba5 0901 	sub.w	r9, r5, r1
 8008faa:	6965      	ldr	r5, [r4, #20]
 8008fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	444b      	add	r3, r9
 8008fb8:	106d      	asrs	r5, r5, #1
 8008fba:	429d      	cmp	r5, r3
 8008fbc:	bf38      	it	cc
 8008fbe:	461d      	movcc	r5, r3
 8008fc0:	0553      	lsls	r3, r2, #21
 8008fc2:	d531      	bpl.n	8009028 <__ssputs_r+0xa0>
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	f000 fb63 	bl	8009690 <_malloc_r>
 8008fca:	4606      	mov	r6, r0
 8008fcc:	b950      	cbnz	r0, 8008fe4 <__ssputs_r+0x5c>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	f8ca 3000 	str.w	r3, [sl]
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe4:	6921      	ldr	r1, [r4, #16]
 8008fe6:	464a      	mov	r2, r9
 8008fe8:	f000 fabe 	bl	8009568 <memcpy>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	6126      	str	r6, [r4, #16]
 8008ffa:	6165      	str	r5, [r4, #20]
 8008ffc:	444e      	add	r6, r9
 8008ffe:	eba5 0509 	sub.w	r5, r5, r9
 8009002:	6026      	str	r6, [r4, #0]
 8009004:	60a5      	str	r5, [r4, #8]
 8009006:	463e      	mov	r6, r7
 8009008:	42be      	cmp	r6, r7
 800900a:	d900      	bls.n	800900e <__ssputs_r+0x86>
 800900c:	463e      	mov	r6, r7
 800900e:	6820      	ldr	r0, [r4, #0]
 8009010:	4632      	mov	r2, r6
 8009012:	4641      	mov	r1, r8
 8009014:	f000 fab6 	bl	8009584 <memmove>
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	1b9b      	subs	r3, r3, r6
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	4433      	add	r3, r6
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	2000      	movs	r0, #0
 8009026:	e7db      	b.n	8008fe0 <__ssputs_r+0x58>
 8009028:	462a      	mov	r2, r5
 800902a:	f000 fba5 	bl	8009778 <_realloc_r>
 800902e:	4606      	mov	r6, r0
 8009030:	2800      	cmp	r0, #0
 8009032:	d1e1      	bne.n	8008ff8 <__ssputs_r+0x70>
 8009034:	6921      	ldr	r1, [r4, #16]
 8009036:	4650      	mov	r0, sl
 8009038:	f000 fabe 	bl	80095b8 <_free_r>
 800903c:	e7c7      	b.n	8008fce <__ssputs_r+0x46>
	...

08009040 <_svfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	4698      	mov	r8, r3
 8009046:	898b      	ldrh	r3, [r1, #12]
 8009048:	061b      	lsls	r3, r3, #24
 800904a:	b09d      	sub	sp, #116	; 0x74
 800904c:	4607      	mov	r7, r0
 800904e:	460d      	mov	r5, r1
 8009050:	4614      	mov	r4, r2
 8009052:	d50e      	bpl.n	8009072 <_svfiprintf_r+0x32>
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	b963      	cbnz	r3, 8009072 <_svfiprintf_r+0x32>
 8009058:	2140      	movs	r1, #64	; 0x40
 800905a:	f000 fb19 	bl	8009690 <_malloc_r>
 800905e:	6028      	str	r0, [r5, #0]
 8009060:	6128      	str	r0, [r5, #16]
 8009062:	b920      	cbnz	r0, 800906e <_svfiprintf_r+0x2e>
 8009064:	230c      	movs	r3, #12
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800906c:	e0d1      	b.n	8009212 <_svfiprintf_r+0x1d2>
 800906e:	2340      	movs	r3, #64	; 0x40
 8009070:	616b      	str	r3, [r5, #20]
 8009072:	2300      	movs	r3, #0
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	2320      	movs	r3, #32
 8009078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800907c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009080:	2330      	movs	r3, #48	; 0x30
 8009082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800922c <_svfiprintf_r+0x1ec>
 8009086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800908a:	f04f 0901 	mov.w	r9, #1
 800908e:	4623      	mov	r3, r4
 8009090:	469a      	mov	sl, r3
 8009092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009096:	b10a      	cbz	r2, 800909c <_svfiprintf_r+0x5c>
 8009098:	2a25      	cmp	r2, #37	; 0x25
 800909a:	d1f9      	bne.n	8009090 <_svfiprintf_r+0x50>
 800909c:	ebba 0b04 	subs.w	fp, sl, r4
 80090a0:	d00b      	beq.n	80090ba <_svfiprintf_r+0x7a>
 80090a2:	465b      	mov	r3, fp
 80090a4:	4622      	mov	r2, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ff6d 	bl	8008f88 <__ssputs_r>
 80090ae:	3001      	adds	r0, #1
 80090b0:	f000 80aa 	beq.w	8009208 <_svfiprintf_r+0x1c8>
 80090b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b6:	445a      	add	r2, fp
 80090b8:	9209      	str	r2, [sp, #36]	; 0x24
 80090ba:	f89a 3000 	ldrb.w	r3, [sl]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 80a2 	beq.w	8009208 <_svfiprintf_r+0x1c8>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ce:	f10a 0a01 	add.w	sl, sl, #1
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090da:	931a      	str	r3, [sp, #104]	; 0x68
 80090dc:	4654      	mov	r4, sl
 80090de:	2205      	movs	r2, #5
 80090e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e4:	4851      	ldr	r0, [pc, #324]	; (800922c <_svfiprintf_r+0x1ec>)
 80090e6:	f7f7 f87b 	bl	80001e0 <memchr>
 80090ea:	9a04      	ldr	r2, [sp, #16]
 80090ec:	b9d8      	cbnz	r0, 8009126 <_svfiprintf_r+0xe6>
 80090ee:	06d0      	lsls	r0, r2, #27
 80090f0:	bf44      	itt	mi
 80090f2:	2320      	movmi	r3, #32
 80090f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f8:	0711      	lsls	r1, r2, #28
 80090fa:	bf44      	itt	mi
 80090fc:	232b      	movmi	r3, #43	; 0x2b
 80090fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009102:	f89a 3000 	ldrb.w	r3, [sl]
 8009106:	2b2a      	cmp	r3, #42	; 0x2a
 8009108:	d015      	beq.n	8009136 <_svfiprintf_r+0xf6>
 800910a:	9a07      	ldr	r2, [sp, #28]
 800910c:	4654      	mov	r4, sl
 800910e:	2000      	movs	r0, #0
 8009110:	f04f 0c0a 	mov.w	ip, #10
 8009114:	4621      	mov	r1, r4
 8009116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800911a:	3b30      	subs	r3, #48	; 0x30
 800911c:	2b09      	cmp	r3, #9
 800911e:	d94e      	bls.n	80091be <_svfiprintf_r+0x17e>
 8009120:	b1b0      	cbz	r0, 8009150 <_svfiprintf_r+0x110>
 8009122:	9207      	str	r2, [sp, #28]
 8009124:	e014      	b.n	8009150 <_svfiprintf_r+0x110>
 8009126:	eba0 0308 	sub.w	r3, r0, r8
 800912a:	fa09 f303 	lsl.w	r3, r9, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	46a2      	mov	sl, r4
 8009134:	e7d2      	b.n	80090dc <_svfiprintf_r+0x9c>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	1d19      	adds	r1, r3, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	9103      	str	r1, [sp, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfbb      	ittet	lt
 8009142:	425b      	neglt	r3, r3
 8009144:	f042 0202 	orrlt.w	r2, r2, #2
 8009148:	9307      	strge	r3, [sp, #28]
 800914a:	9307      	strlt	r3, [sp, #28]
 800914c:	bfb8      	it	lt
 800914e:	9204      	strlt	r2, [sp, #16]
 8009150:	7823      	ldrb	r3, [r4, #0]
 8009152:	2b2e      	cmp	r3, #46	; 0x2e
 8009154:	d10c      	bne.n	8009170 <_svfiprintf_r+0x130>
 8009156:	7863      	ldrb	r3, [r4, #1]
 8009158:	2b2a      	cmp	r3, #42	; 0x2a
 800915a:	d135      	bne.n	80091c8 <_svfiprintf_r+0x188>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	9203      	str	r2, [sp, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bfb8      	it	lt
 8009168:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800916c:	3402      	adds	r4, #2
 800916e:	9305      	str	r3, [sp, #20]
 8009170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800923c <_svfiprintf_r+0x1fc>
 8009174:	7821      	ldrb	r1, [r4, #0]
 8009176:	2203      	movs	r2, #3
 8009178:	4650      	mov	r0, sl
 800917a:	f7f7 f831 	bl	80001e0 <memchr>
 800917e:	b140      	cbz	r0, 8009192 <_svfiprintf_r+0x152>
 8009180:	2340      	movs	r3, #64	; 0x40
 8009182:	eba0 000a 	sub.w	r0, r0, sl
 8009186:	fa03 f000 	lsl.w	r0, r3, r0
 800918a:	9b04      	ldr	r3, [sp, #16]
 800918c:	4303      	orrs	r3, r0
 800918e:	3401      	adds	r4, #1
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009196:	4826      	ldr	r0, [pc, #152]	; (8009230 <_svfiprintf_r+0x1f0>)
 8009198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800919c:	2206      	movs	r2, #6
 800919e:	f7f7 f81f 	bl	80001e0 <memchr>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d038      	beq.n	8009218 <_svfiprintf_r+0x1d8>
 80091a6:	4b23      	ldr	r3, [pc, #140]	; (8009234 <_svfiprintf_r+0x1f4>)
 80091a8:	bb1b      	cbnz	r3, 80091f2 <_svfiprintf_r+0x1b2>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	3307      	adds	r3, #7
 80091ae:	f023 0307 	bic.w	r3, r3, #7
 80091b2:	3308      	adds	r3, #8
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b8:	4433      	add	r3, r6
 80091ba:	9309      	str	r3, [sp, #36]	; 0x24
 80091bc:	e767      	b.n	800908e <_svfiprintf_r+0x4e>
 80091be:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c2:	460c      	mov	r4, r1
 80091c4:	2001      	movs	r0, #1
 80091c6:	e7a5      	b.n	8009114 <_svfiprintf_r+0xd4>
 80091c8:	2300      	movs	r3, #0
 80091ca:	3401      	adds	r4, #1
 80091cc:	9305      	str	r3, [sp, #20]
 80091ce:	4619      	mov	r1, r3
 80091d0:	f04f 0c0a 	mov.w	ip, #10
 80091d4:	4620      	mov	r0, r4
 80091d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091da:	3a30      	subs	r2, #48	; 0x30
 80091dc:	2a09      	cmp	r2, #9
 80091de:	d903      	bls.n	80091e8 <_svfiprintf_r+0x1a8>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0c5      	beq.n	8009170 <_svfiprintf_r+0x130>
 80091e4:	9105      	str	r1, [sp, #20]
 80091e6:	e7c3      	b.n	8009170 <_svfiprintf_r+0x130>
 80091e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ec:	4604      	mov	r4, r0
 80091ee:	2301      	movs	r3, #1
 80091f0:	e7f0      	b.n	80091d4 <_svfiprintf_r+0x194>
 80091f2:	ab03      	add	r3, sp, #12
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	462a      	mov	r2, r5
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <_svfiprintf_r+0x1f8>)
 80091fa:	a904      	add	r1, sp, #16
 80091fc:	4638      	mov	r0, r7
 80091fe:	f3af 8000 	nop.w
 8009202:	1c42      	adds	r2, r0, #1
 8009204:	4606      	mov	r6, r0
 8009206:	d1d6      	bne.n	80091b6 <_svfiprintf_r+0x176>
 8009208:	89ab      	ldrh	r3, [r5, #12]
 800920a:	065b      	lsls	r3, r3, #25
 800920c:	f53f af2c 	bmi.w	8009068 <_svfiprintf_r+0x28>
 8009210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009212:	b01d      	add	sp, #116	; 0x74
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	ab03      	add	r3, sp, #12
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	462a      	mov	r2, r5
 800921e:	4b06      	ldr	r3, [pc, #24]	; (8009238 <_svfiprintf_r+0x1f8>)
 8009220:	a904      	add	r1, sp, #16
 8009222:	4638      	mov	r0, r7
 8009224:	f000 f87a 	bl	800931c <_printf_i>
 8009228:	e7eb      	b.n	8009202 <_svfiprintf_r+0x1c2>
 800922a:	bf00      	nop
 800922c:	0800bb28 	.word	0x0800bb28
 8009230:	0800bb32 	.word	0x0800bb32
 8009234:	00000000 	.word	0x00000000
 8009238:	08008f89 	.word	0x08008f89
 800923c:	0800bb2e 	.word	0x0800bb2e

08009240 <_printf_common>:
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	4616      	mov	r6, r2
 8009246:	4699      	mov	r9, r3
 8009248:	688a      	ldr	r2, [r1, #8]
 800924a:	690b      	ldr	r3, [r1, #16]
 800924c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009250:	4293      	cmp	r3, r2
 8009252:	bfb8      	it	lt
 8009254:	4613      	movlt	r3, r2
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800925c:	4607      	mov	r7, r0
 800925e:	460c      	mov	r4, r1
 8009260:	b10a      	cbz	r2, 8009266 <_printf_common+0x26>
 8009262:	3301      	adds	r3, #1
 8009264:	6033      	str	r3, [r6, #0]
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	0699      	lsls	r1, r3, #26
 800926a:	bf42      	ittt	mi
 800926c:	6833      	ldrmi	r3, [r6, #0]
 800926e:	3302      	addmi	r3, #2
 8009270:	6033      	strmi	r3, [r6, #0]
 8009272:	6825      	ldr	r5, [r4, #0]
 8009274:	f015 0506 	ands.w	r5, r5, #6
 8009278:	d106      	bne.n	8009288 <_printf_common+0x48>
 800927a:	f104 0a19 	add.w	sl, r4, #25
 800927e:	68e3      	ldr	r3, [r4, #12]
 8009280:	6832      	ldr	r2, [r6, #0]
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	42ab      	cmp	r3, r5
 8009286:	dc26      	bgt.n	80092d6 <_printf_common+0x96>
 8009288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800928c:	1e13      	subs	r3, r2, #0
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	bf18      	it	ne
 8009292:	2301      	movne	r3, #1
 8009294:	0692      	lsls	r2, r2, #26
 8009296:	d42b      	bmi.n	80092f0 <_printf_common+0xb0>
 8009298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800929c:	4649      	mov	r1, r9
 800929e:	4638      	mov	r0, r7
 80092a0:	47c0      	blx	r8
 80092a2:	3001      	adds	r0, #1
 80092a4:	d01e      	beq.n	80092e4 <_printf_common+0xa4>
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	68e5      	ldr	r5, [r4, #12]
 80092aa:	6832      	ldr	r2, [r6, #0]
 80092ac:	f003 0306 	and.w	r3, r3, #6
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	bf08      	it	eq
 80092b4:	1aad      	subeq	r5, r5, r2
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	6922      	ldr	r2, [r4, #16]
 80092ba:	bf0c      	ite	eq
 80092bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092c0:	2500      	movne	r5, #0
 80092c2:	4293      	cmp	r3, r2
 80092c4:	bfc4      	itt	gt
 80092c6:	1a9b      	subgt	r3, r3, r2
 80092c8:	18ed      	addgt	r5, r5, r3
 80092ca:	2600      	movs	r6, #0
 80092cc:	341a      	adds	r4, #26
 80092ce:	42b5      	cmp	r5, r6
 80092d0:	d11a      	bne.n	8009308 <_printf_common+0xc8>
 80092d2:	2000      	movs	r0, #0
 80092d4:	e008      	b.n	80092e8 <_printf_common+0xa8>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4652      	mov	r2, sl
 80092da:	4649      	mov	r1, r9
 80092dc:	4638      	mov	r0, r7
 80092de:	47c0      	blx	r8
 80092e0:	3001      	adds	r0, #1
 80092e2:	d103      	bne.n	80092ec <_printf_common+0xac>
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ec:	3501      	adds	r5, #1
 80092ee:	e7c6      	b.n	800927e <_printf_common+0x3e>
 80092f0:	18e1      	adds	r1, r4, r3
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	2030      	movs	r0, #48	; 0x30
 80092f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092fa:	4422      	add	r2, r4
 80092fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009304:	3302      	adds	r3, #2
 8009306:	e7c7      	b.n	8009298 <_printf_common+0x58>
 8009308:	2301      	movs	r3, #1
 800930a:	4622      	mov	r2, r4
 800930c:	4649      	mov	r1, r9
 800930e:	4638      	mov	r0, r7
 8009310:	47c0      	blx	r8
 8009312:	3001      	adds	r0, #1
 8009314:	d0e6      	beq.n	80092e4 <_printf_common+0xa4>
 8009316:	3601      	adds	r6, #1
 8009318:	e7d9      	b.n	80092ce <_printf_common+0x8e>
	...

0800931c <_printf_i>:
 800931c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	7e0f      	ldrb	r7, [r1, #24]
 8009322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009324:	2f78      	cmp	r7, #120	; 0x78
 8009326:	4691      	mov	r9, r2
 8009328:	4680      	mov	r8, r0
 800932a:	460c      	mov	r4, r1
 800932c:	469a      	mov	sl, r3
 800932e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009332:	d807      	bhi.n	8009344 <_printf_i+0x28>
 8009334:	2f62      	cmp	r7, #98	; 0x62
 8009336:	d80a      	bhi.n	800934e <_printf_i+0x32>
 8009338:	2f00      	cmp	r7, #0
 800933a:	f000 80d8 	beq.w	80094ee <_printf_i+0x1d2>
 800933e:	2f58      	cmp	r7, #88	; 0x58
 8009340:	f000 80a3 	beq.w	800948a <_printf_i+0x16e>
 8009344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800934c:	e03a      	b.n	80093c4 <_printf_i+0xa8>
 800934e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009352:	2b15      	cmp	r3, #21
 8009354:	d8f6      	bhi.n	8009344 <_printf_i+0x28>
 8009356:	a101      	add	r1, pc, #4	; (adr r1, 800935c <_printf_i+0x40>)
 8009358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093c9 	.word	0x080093c9
 8009364:	08009345 	.word	0x08009345
 8009368:	08009345 	.word	0x08009345
 800936c:	08009345 	.word	0x08009345
 8009370:	08009345 	.word	0x08009345
 8009374:	080093c9 	.word	0x080093c9
 8009378:	08009345 	.word	0x08009345
 800937c:	08009345 	.word	0x08009345
 8009380:	08009345 	.word	0x08009345
 8009384:	08009345 	.word	0x08009345
 8009388:	080094d5 	.word	0x080094d5
 800938c:	080093f9 	.word	0x080093f9
 8009390:	080094b7 	.word	0x080094b7
 8009394:	08009345 	.word	0x08009345
 8009398:	08009345 	.word	0x08009345
 800939c:	080094f7 	.word	0x080094f7
 80093a0:	08009345 	.word	0x08009345
 80093a4:	080093f9 	.word	0x080093f9
 80093a8:	08009345 	.word	0x08009345
 80093ac:	08009345 	.word	0x08009345
 80093b0:	080094bf 	.word	0x080094bf
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	1d1a      	adds	r2, r3, #4
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	602a      	str	r2, [r5, #0]
 80093bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093c4:	2301      	movs	r3, #1
 80093c6:	e0a3      	b.n	8009510 <_printf_i+0x1f4>
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	6829      	ldr	r1, [r5, #0]
 80093cc:	0606      	lsls	r6, r0, #24
 80093ce:	f101 0304 	add.w	r3, r1, #4
 80093d2:	d50a      	bpl.n	80093ea <_printf_i+0xce>
 80093d4:	680e      	ldr	r6, [r1, #0]
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	2e00      	cmp	r6, #0
 80093da:	da03      	bge.n	80093e4 <_printf_i+0xc8>
 80093dc:	232d      	movs	r3, #45	; 0x2d
 80093de:	4276      	negs	r6, r6
 80093e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e4:	485e      	ldr	r0, [pc, #376]	; (8009560 <_printf_i+0x244>)
 80093e6:	230a      	movs	r3, #10
 80093e8:	e019      	b.n	800941e <_printf_i+0x102>
 80093ea:	680e      	ldr	r6, [r1, #0]
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093f2:	bf18      	it	ne
 80093f4:	b236      	sxthne	r6, r6
 80093f6:	e7ef      	b.n	80093d8 <_printf_i+0xbc>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	6820      	ldr	r0, [r4, #0]
 80093fc:	1d19      	adds	r1, r3, #4
 80093fe:	6029      	str	r1, [r5, #0]
 8009400:	0601      	lsls	r1, r0, #24
 8009402:	d501      	bpl.n	8009408 <_printf_i+0xec>
 8009404:	681e      	ldr	r6, [r3, #0]
 8009406:	e002      	b.n	800940e <_printf_i+0xf2>
 8009408:	0646      	lsls	r6, r0, #25
 800940a:	d5fb      	bpl.n	8009404 <_printf_i+0xe8>
 800940c:	881e      	ldrh	r6, [r3, #0]
 800940e:	4854      	ldr	r0, [pc, #336]	; (8009560 <_printf_i+0x244>)
 8009410:	2f6f      	cmp	r7, #111	; 0x6f
 8009412:	bf0c      	ite	eq
 8009414:	2308      	moveq	r3, #8
 8009416:	230a      	movne	r3, #10
 8009418:	2100      	movs	r1, #0
 800941a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800941e:	6865      	ldr	r5, [r4, #4]
 8009420:	60a5      	str	r5, [r4, #8]
 8009422:	2d00      	cmp	r5, #0
 8009424:	bfa2      	ittt	ge
 8009426:	6821      	ldrge	r1, [r4, #0]
 8009428:	f021 0104 	bicge.w	r1, r1, #4
 800942c:	6021      	strge	r1, [r4, #0]
 800942e:	b90e      	cbnz	r6, 8009434 <_printf_i+0x118>
 8009430:	2d00      	cmp	r5, #0
 8009432:	d04d      	beq.n	80094d0 <_printf_i+0x1b4>
 8009434:	4615      	mov	r5, r2
 8009436:	fbb6 f1f3 	udiv	r1, r6, r3
 800943a:	fb03 6711 	mls	r7, r3, r1, r6
 800943e:	5dc7      	ldrb	r7, [r0, r7]
 8009440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009444:	4637      	mov	r7, r6
 8009446:	42bb      	cmp	r3, r7
 8009448:	460e      	mov	r6, r1
 800944a:	d9f4      	bls.n	8009436 <_printf_i+0x11a>
 800944c:	2b08      	cmp	r3, #8
 800944e:	d10b      	bne.n	8009468 <_printf_i+0x14c>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	07de      	lsls	r6, r3, #31
 8009454:	d508      	bpl.n	8009468 <_printf_i+0x14c>
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	6861      	ldr	r1, [r4, #4]
 800945a:	4299      	cmp	r1, r3
 800945c:	bfde      	ittt	le
 800945e:	2330      	movle	r3, #48	; 0x30
 8009460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009464:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009468:	1b52      	subs	r2, r2, r5
 800946a:	6122      	str	r2, [r4, #16]
 800946c:	f8cd a000 	str.w	sl, [sp]
 8009470:	464b      	mov	r3, r9
 8009472:	aa03      	add	r2, sp, #12
 8009474:	4621      	mov	r1, r4
 8009476:	4640      	mov	r0, r8
 8009478:	f7ff fee2 	bl	8009240 <_printf_common>
 800947c:	3001      	adds	r0, #1
 800947e:	d14c      	bne.n	800951a <_printf_i+0x1fe>
 8009480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009484:	b004      	add	sp, #16
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	4835      	ldr	r0, [pc, #212]	; (8009560 <_printf_i+0x244>)
 800948c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009490:	6829      	ldr	r1, [r5, #0]
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	f851 6b04 	ldr.w	r6, [r1], #4
 8009498:	6029      	str	r1, [r5, #0]
 800949a:	061d      	lsls	r5, r3, #24
 800949c:	d514      	bpl.n	80094c8 <_printf_i+0x1ac>
 800949e:	07df      	lsls	r7, r3, #31
 80094a0:	bf44      	itt	mi
 80094a2:	f043 0320 	orrmi.w	r3, r3, #32
 80094a6:	6023      	strmi	r3, [r4, #0]
 80094a8:	b91e      	cbnz	r6, 80094b2 <_printf_i+0x196>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	f023 0320 	bic.w	r3, r3, #32
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	2310      	movs	r3, #16
 80094b4:	e7b0      	b.n	8009418 <_printf_i+0xfc>
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	f043 0320 	orr.w	r3, r3, #32
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	2378      	movs	r3, #120	; 0x78
 80094c0:	4828      	ldr	r0, [pc, #160]	; (8009564 <_printf_i+0x248>)
 80094c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094c6:	e7e3      	b.n	8009490 <_printf_i+0x174>
 80094c8:	0659      	lsls	r1, r3, #25
 80094ca:	bf48      	it	mi
 80094cc:	b2b6      	uxthmi	r6, r6
 80094ce:	e7e6      	b.n	800949e <_printf_i+0x182>
 80094d0:	4615      	mov	r5, r2
 80094d2:	e7bb      	b.n	800944c <_printf_i+0x130>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	6826      	ldr	r6, [r4, #0]
 80094d8:	6961      	ldr	r1, [r4, #20]
 80094da:	1d18      	adds	r0, r3, #4
 80094dc:	6028      	str	r0, [r5, #0]
 80094de:	0635      	lsls	r5, r6, #24
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	d501      	bpl.n	80094e8 <_printf_i+0x1cc>
 80094e4:	6019      	str	r1, [r3, #0]
 80094e6:	e002      	b.n	80094ee <_printf_i+0x1d2>
 80094e8:	0670      	lsls	r0, r6, #25
 80094ea:	d5fb      	bpl.n	80094e4 <_printf_i+0x1c8>
 80094ec:	8019      	strh	r1, [r3, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	4615      	mov	r5, r2
 80094f4:	e7ba      	b.n	800946c <_printf_i+0x150>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	1d1a      	adds	r2, r3, #4
 80094fa:	602a      	str	r2, [r5, #0]
 80094fc:	681d      	ldr	r5, [r3, #0]
 80094fe:	6862      	ldr	r2, [r4, #4]
 8009500:	2100      	movs	r1, #0
 8009502:	4628      	mov	r0, r5
 8009504:	f7f6 fe6c 	bl	80001e0 <memchr>
 8009508:	b108      	cbz	r0, 800950e <_printf_i+0x1f2>
 800950a:	1b40      	subs	r0, r0, r5
 800950c:	6060      	str	r0, [r4, #4]
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	6123      	str	r3, [r4, #16]
 8009512:	2300      	movs	r3, #0
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009518:	e7a8      	b.n	800946c <_printf_i+0x150>
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	462a      	mov	r2, r5
 800951e:	4649      	mov	r1, r9
 8009520:	4640      	mov	r0, r8
 8009522:	47d0      	blx	sl
 8009524:	3001      	adds	r0, #1
 8009526:	d0ab      	beq.n	8009480 <_printf_i+0x164>
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	079b      	lsls	r3, r3, #30
 800952c:	d413      	bmi.n	8009556 <_printf_i+0x23a>
 800952e:	68e0      	ldr	r0, [r4, #12]
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	4298      	cmp	r0, r3
 8009534:	bfb8      	it	lt
 8009536:	4618      	movlt	r0, r3
 8009538:	e7a4      	b.n	8009484 <_printf_i+0x168>
 800953a:	2301      	movs	r3, #1
 800953c:	4632      	mov	r2, r6
 800953e:	4649      	mov	r1, r9
 8009540:	4640      	mov	r0, r8
 8009542:	47d0      	blx	sl
 8009544:	3001      	adds	r0, #1
 8009546:	d09b      	beq.n	8009480 <_printf_i+0x164>
 8009548:	3501      	adds	r5, #1
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	9903      	ldr	r1, [sp, #12]
 800954e:	1a5b      	subs	r3, r3, r1
 8009550:	42ab      	cmp	r3, r5
 8009552:	dcf2      	bgt.n	800953a <_printf_i+0x21e>
 8009554:	e7eb      	b.n	800952e <_printf_i+0x212>
 8009556:	2500      	movs	r5, #0
 8009558:	f104 0619 	add.w	r6, r4, #25
 800955c:	e7f5      	b.n	800954a <_printf_i+0x22e>
 800955e:	bf00      	nop
 8009560:	0800bb39 	.word	0x0800bb39
 8009564:	0800bb4a 	.word	0x0800bb4a

08009568 <memcpy>:
 8009568:	440a      	add	r2, r1
 800956a:	4291      	cmp	r1, r2
 800956c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009570:	d100      	bne.n	8009574 <memcpy+0xc>
 8009572:	4770      	bx	lr
 8009574:	b510      	push	{r4, lr}
 8009576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800957a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800957e:	4291      	cmp	r1, r2
 8009580:	d1f9      	bne.n	8009576 <memcpy+0xe>
 8009582:	bd10      	pop	{r4, pc}

08009584 <memmove>:
 8009584:	4288      	cmp	r0, r1
 8009586:	b510      	push	{r4, lr}
 8009588:	eb01 0402 	add.w	r4, r1, r2
 800958c:	d902      	bls.n	8009594 <memmove+0x10>
 800958e:	4284      	cmp	r4, r0
 8009590:	4623      	mov	r3, r4
 8009592:	d807      	bhi.n	80095a4 <memmove+0x20>
 8009594:	1e43      	subs	r3, r0, #1
 8009596:	42a1      	cmp	r1, r4
 8009598:	d008      	beq.n	80095ac <memmove+0x28>
 800959a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800959e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095a2:	e7f8      	b.n	8009596 <memmove+0x12>
 80095a4:	4402      	add	r2, r0
 80095a6:	4601      	mov	r1, r0
 80095a8:	428a      	cmp	r2, r1
 80095aa:	d100      	bne.n	80095ae <memmove+0x2a>
 80095ac:	bd10      	pop	{r4, pc}
 80095ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095b6:	e7f7      	b.n	80095a8 <memmove+0x24>

080095b8 <_free_r>:
 80095b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ba:	2900      	cmp	r1, #0
 80095bc:	d044      	beq.n	8009648 <_free_r+0x90>
 80095be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c2:	9001      	str	r0, [sp, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f1a1 0404 	sub.w	r4, r1, #4
 80095ca:	bfb8      	it	lt
 80095cc:	18e4      	addlt	r4, r4, r3
 80095ce:	f000 f913 	bl	80097f8 <__malloc_lock>
 80095d2:	4a1e      	ldr	r2, [pc, #120]	; (800964c <_free_r+0x94>)
 80095d4:	9801      	ldr	r0, [sp, #4]
 80095d6:	6813      	ldr	r3, [r2, #0]
 80095d8:	b933      	cbnz	r3, 80095e8 <_free_r+0x30>
 80095da:	6063      	str	r3, [r4, #4]
 80095dc:	6014      	str	r4, [r2, #0]
 80095de:	b003      	add	sp, #12
 80095e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095e4:	f000 b90e 	b.w	8009804 <__malloc_unlock>
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	d908      	bls.n	80095fe <_free_r+0x46>
 80095ec:	6825      	ldr	r5, [r4, #0]
 80095ee:	1961      	adds	r1, r4, r5
 80095f0:	428b      	cmp	r3, r1
 80095f2:	bf01      	itttt	eq
 80095f4:	6819      	ldreq	r1, [r3, #0]
 80095f6:	685b      	ldreq	r3, [r3, #4]
 80095f8:	1949      	addeq	r1, r1, r5
 80095fa:	6021      	streq	r1, [r4, #0]
 80095fc:	e7ed      	b.n	80095da <_free_r+0x22>
 80095fe:	461a      	mov	r2, r3
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	b10b      	cbz	r3, 8009608 <_free_r+0x50>
 8009604:	42a3      	cmp	r3, r4
 8009606:	d9fa      	bls.n	80095fe <_free_r+0x46>
 8009608:	6811      	ldr	r1, [r2, #0]
 800960a:	1855      	adds	r5, r2, r1
 800960c:	42a5      	cmp	r5, r4
 800960e:	d10b      	bne.n	8009628 <_free_r+0x70>
 8009610:	6824      	ldr	r4, [r4, #0]
 8009612:	4421      	add	r1, r4
 8009614:	1854      	adds	r4, r2, r1
 8009616:	42a3      	cmp	r3, r4
 8009618:	6011      	str	r1, [r2, #0]
 800961a:	d1e0      	bne.n	80095de <_free_r+0x26>
 800961c:	681c      	ldr	r4, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	6053      	str	r3, [r2, #4]
 8009622:	4421      	add	r1, r4
 8009624:	6011      	str	r1, [r2, #0]
 8009626:	e7da      	b.n	80095de <_free_r+0x26>
 8009628:	d902      	bls.n	8009630 <_free_r+0x78>
 800962a:	230c      	movs	r3, #12
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	e7d6      	b.n	80095de <_free_r+0x26>
 8009630:	6825      	ldr	r5, [r4, #0]
 8009632:	1961      	adds	r1, r4, r5
 8009634:	428b      	cmp	r3, r1
 8009636:	bf04      	itt	eq
 8009638:	6819      	ldreq	r1, [r3, #0]
 800963a:	685b      	ldreq	r3, [r3, #4]
 800963c:	6063      	str	r3, [r4, #4]
 800963e:	bf04      	itt	eq
 8009640:	1949      	addeq	r1, r1, r5
 8009642:	6021      	streq	r1, [r4, #0]
 8009644:	6054      	str	r4, [r2, #4]
 8009646:	e7ca      	b.n	80095de <_free_r+0x26>
 8009648:	b003      	add	sp, #12
 800964a:	bd30      	pop	{r4, r5, pc}
 800964c:	20000794 	.word	0x20000794

08009650 <sbrk_aligned>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	4e0e      	ldr	r6, [pc, #56]	; (800968c <sbrk_aligned+0x3c>)
 8009654:	460c      	mov	r4, r1
 8009656:	6831      	ldr	r1, [r6, #0]
 8009658:	4605      	mov	r5, r0
 800965a:	b911      	cbnz	r1, 8009662 <sbrk_aligned+0x12>
 800965c:	f000 f8bc 	bl	80097d8 <_sbrk_r>
 8009660:	6030      	str	r0, [r6, #0]
 8009662:	4621      	mov	r1, r4
 8009664:	4628      	mov	r0, r5
 8009666:	f000 f8b7 	bl	80097d8 <_sbrk_r>
 800966a:	1c43      	adds	r3, r0, #1
 800966c:	d00a      	beq.n	8009684 <sbrk_aligned+0x34>
 800966e:	1cc4      	adds	r4, r0, #3
 8009670:	f024 0403 	bic.w	r4, r4, #3
 8009674:	42a0      	cmp	r0, r4
 8009676:	d007      	beq.n	8009688 <sbrk_aligned+0x38>
 8009678:	1a21      	subs	r1, r4, r0
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f8ac 	bl	80097d8 <_sbrk_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d101      	bne.n	8009688 <sbrk_aligned+0x38>
 8009684:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009688:	4620      	mov	r0, r4
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	20000798 	.word	0x20000798

08009690 <_malloc_r>:
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009694:	1ccd      	adds	r5, r1, #3
 8009696:	f025 0503 	bic.w	r5, r5, #3
 800969a:	3508      	adds	r5, #8
 800969c:	2d0c      	cmp	r5, #12
 800969e:	bf38      	it	cc
 80096a0:	250c      	movcc	r5, #12
 80096a2:	2d00      	cmp	r5, #0
 80096a4:	4607      	mov	r7, r0
 80096a6:	db01      	blt.n	80096ac <_malloc_r+0x1c>
 80096a8:	42a9      	cmp	r1, r5
 80096aa:	d905      	bls.n	80096b8 <_malloc_r+0x28>
 80096ac:	230c      	movs	r3, #12
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	2600      	movs	r6, #0
 80096b2:	4630      	mov	r0, r6
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b8:	4e2e      	ldr	r6, [pc, #184]	; (8009774 <_malloc_r+0xe4>)
 80096ba:	f000 f89d 	bl	80097f8 <__malloc_lock>
 80096be:	6833      	ldr	r3, [r6, #0]
 80096c0:	461c      	mov	r4, r3
 80096c2:	bb34      	cbnz	r4, 8009712 <_malloc_r+0x82>
 80096c4:	4629      	mov	r1, r5
 80096c6:	4638      	mov	r0, r7
 80096c8:	f7ff ffc2 	bl	8009650 <sbrk_aligned>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	4604      	mov	r4, r0
 80096d0:	d14d      	bne.n	800976e <_malloc_r+0xde>
 80096d2:	6834      	ldr	r4, [r6, #0]
 80096d4:	4626      	mov	r6, r4
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	d140      	bne.n	800975c <_malloc_r+0xcc>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	4631      	mov	r1, r6
 80096de:	4638      	mov	r0, r7
 80096e0:	eb04 0803 	add.w	r8, r4, r3
 80096e4:	f000 f878 	bl	80097d8 <_sbrk_r>
 80096e8:	4580      	cmp	r8, r0
 80096ea:	d13a      	bne.n	8009762 <_malloc_r+0xd2>
 80096ec:	6821      	ldr	r1, [r4, #0]
 80096ee:	3503      	adds	r5, #3
 80096f0:	1a6d      	subs	r5, r5, r1
 80096f2:	f025 0503 	bic.w	r5, r5, #3
 80096f6:	3508      	adds	r5, #8
 80096f8:	2d0c      	cmp	r5, #12
 80096fa:	bf38      	it	cc
 80096fc:	250c      	movcc	r5, #12
 80096fe:	4629      	mov	r1, r5
 8009700:	4638      	mov	r0, r7
 8009702:	f7ff ffa5 	bl	8009650 <sbrk_aligned>
 8009706:	3001      	adds	r0, #1
 8009708:	d02b      	beq.n	8009762 <_malloc_r+0xd2>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	442b      	add	r3, r5
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	e00e      	b.n	8009730 <_malloc_r+0xa0>
 8009712:	6822      	ldr	r2, [r4, #0]
 8009714:	1b52      	subs	r2, r2, r5
 8009716:	d41e      	bmi.n	8009756 <_malloc_r+0xc6>
 8009718:	2a0b      	cmp	r2, #11
 800971a:	d916      	bls.n	800974a <_malloc_r+0xba>
 800971c:	1961      	adds	r1, r4, r5
 800971e:	42a3      	cmp	r3, r4
 8009720:	6025      	str	r5, [r4, #0]
 8009722:	bf18      	it	ne
 8009724:	6059      	strne	r1, [r3, #4]
 8009726:	6863      	ldr	r3, [r4, #4]
 8009728:	bf08      	it	eq
 800972a:	6031      	streq	r1, [r6, #0]
 800972c:	5162      	str	r2, [r4, r5]
 800972e:	604b      	str	r3, [r1, #4]
 8009730:	4638      	mov	r0, r7
 8009732:	f104 060b 	add.w	r6, r4, #11
 8009736:	f000 f865 	bl	8009804 <__malloc_unlock>
 800973a:	f026 0607 	bic.w	r6, r6, #7
 800973e:	1d23      	adds	r3, r4, #4
 8009740:	1af2      	subs	r2, r6, r3
 8009742:	d0b6      	beq.n	80096b2 <_malloc_r+0x22>
 8009744:	1b9b      	subs	r3, r3, r6
 8009746:	50a3      	str	r3, [r4, r2]
 8009748:	e7b3      	b.n	80096b2 <_malloc_r+0x22>
 800974a:	6862      	ldr	r2, [r4, #4]
 800974c:	42a3      	cmp	r3, r4
 800974e:	bf0c      	ite	eq
 8009750:	6032      	streq	r2, [r6, #0]
 8009752:	605a      	strne	r2, [r3, #4]
 8009754:	e7ec      	b.n	8009730 <_malloc_r+0xa0>
 8009756:	4623      	mov	r3, r4
 8009758:	6864      	ldr	r4, [r4, #4]
 800975a:	e7b2      	b.n	80096c2 <_malloc_r+0x32>
 800975c:	4634      	mov	r4, r6
 800975e:	6876      	ldr	r6, [r6, #4]
 8009760:	e7b9      	b.n	80096d6 <_malloc_r+0x46>
 8009762:	230c      	movs	r3, #12
 8009764:	603b      	str	r3, [r7, #0]
 8009766:	4638      	mov	r0, r7
 8009768:	f000 f84c 	bl	8009804 <__malloc_unlock>
 800976c:	e7a1      	b.n	80096b2 <_malloc_r+0x22>
 800976e:	6025      	str	r5, [r4, #0]
 8009770:	e7de      	b.n	8009730 <_malloc_r+0xa0>
 8009772:	bf00      	nop
 8009774:	20000794 	.word	0x20000794

08009778 <_realloc_r>:
 8009778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977c:	4680      	mov	r8, r0
 800977e:	4614      	mov	r4, r2
 8009780:	460e      	mov	r6, r1
 8009782:	b921      	cbnz	r1, 800978e <_realloc_r+0x16>
 8009784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009788:	4611      	mov	r1, r2
 800978a:	f7ff bf81 	b.w	8009690 <_malloc_r>
 800978e:	b92a      	cbnz	r2, 800979c <_realloc_r+0x24>
 8009790:	f7ff ff12 	bl	80095b8 <_free_r>
 8009794:	4625      	mov	r5, r4
 8009796:	4628      	mov	r0, r5
 8009798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800979c:	f000 f838 	bl	8009810 <_malloc_usable_size_r>
 80097a0:	4284      	cmp	r4, r0
 80097a2:	4607      	mov	r7, r0
 80097a4:	d802      	bhi.n	80097ac <_realloc_r+0x34>
 80097a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097aa:	d812      	bhi.n	80097d2 <_realloc_r+0x5a>
 80097ac:	4621      	mov	r1, r4
 80097ae:	4640      	mov	r0, r8
 80097b0:	f7ff ff6e 	bl	8009690 <_malloc_r>
 80097b4:	4605      	mov	r5, r0
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d0ed      	beq.n	8009796 <_realloc_r+0x1e>
 80097ba:	42bc      	cmp	r4, r7
 80097bc:	4622      	mov	r2, r4
 80097be:	4631      	mov	r1, r6
 80097c0:	bf28      	it	cs
 80097c2:	463a      	movcs	r2, r7
 80097c4:	f7ff fed0 	bl	8009568 <memcpy>
 80097c8:	4631      	mov	r1, r6
 80097ca:	4640      	mov	r0, r8
 80097cc:	f7ff fef4 	bl	80095b8 <_free_r>
 80097d0:	e7e1      	b.n	8009796 <_realloc_r+0x1e>
 80097d2:	4635      	mov	r5, r6
 80097d4:	e7df      	b.n	8009796 <_realloc_r+0x1e>
	...

080097d8 <_sbrk_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d06      	ldr	r5, [pc, #24]	; (80097f4 <_sbrk_r+0x1c>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	f7fa fd36 	bl	8004254 <_sbrk>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_sbrk_r+0x1a>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_sbrk_r+0x1a>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	2000079c 	.word	0x2000079c

080097f8 <__malloc_lock>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__malloc_lock+0x8>)
 80097fa:	f000 b811 	b.w	8009820 <__retarget_lock_acquire_recursive>
 80097fe:	bf00      	nop
 8009800:	200007a0 	.word	0x200007a0

08009804 <__malloc_unlock>:
 8009804:	4801      	ldr	r0, [pc, #4]	; (800980c <__malloc_unlock+0x8>)
 8009806:	f000 b80c 	b.w	8009822 <__retarget_lock_release_recursive>
 800980a:	bf00      	nop
 800980c:	200007a0 	.word	0x200007a0

08009810 <_malloc_usable_size_r>:
 8009810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009814:	1f18      	subs	r0, r3, #4
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfbc      	itt	lt
 800981a:	580b      	ldrlt	r3, [r1, r0]
 800981c:	18c0      	addlt	r0, r0, r3
 800981e:	4770      	bx	lr

08009820 <__retarget_lock_acquire_recursive>:
 8009820:	4770      	bx	lr

08009822 <__retarget_lock_release_recursive>:
 8009822:	4770      	bx	lr
 8009824:	0000      	movs	r0, r0
	...

08009828 <sin>:
 8009828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800982a:	ec53 2b10 	vmov	r2, r3, d0
 800982e:	4828      	ldr	r0, [pc, #160]	; (80098d0 <sin+0xa8>)
 8009830:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009834:	4281      	cmp	r1, r0
 8009836:	dc07      	bgt.n	8009848 <sin+0x20>
 8009838:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80098c8 <sin+0xa0>
 800983c:	2000      	movs	r0, #0
 800983e:	b005      	add	sp, #20
 8009840:	f85d eb04 	ldr.w	lr, [sp], #4
 8009844:	f001 bf34 	b.w	800b6b0 <__kernel_sin>
 8009848:	4822      	ldr	r0, [pc, #136]	; (80098d4 <sin+0xac>)
 800984a:	4281      	cmp	r1, r0
 800984c:	dd09      	ble.n	8009862 <sin+0x3a>
 800984e:	ee10 0a10 	vmov	r0, s0
 8009852:	4619      	mov	r1, r3
 8009854:	f7f6 fd18 	bl	8000288 <__aeabi_dsub>
 8009858:	ec41 0b10 	vmov	d0, r0, r1
 800985c:	b005      	add	sp, #20
 800985e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009862:	4668      	mov	r0, sp
 8009864:	f001 f84c 	bl	800a900 <__ieee754_rem_pio2>
 8009868:	f000 0003 	and.w	r0, r0, #3
 800986c:	2801      	cmp	r0, #1
 800986e:	d00c      	beq.n	800988a <sin+0x62>
 8009870:	2802      	cmp	r0, #2
 8009872:	d011      	beq.n	8009898 <sin+0x70>
 8009874:	b9f0      	cbnz	r0, 80098b4 <sin+0x8c>
 8009876:	ed9d 1b02 	vldr	d1, [sp, #8]
 800987a:	ed9d 0b00 	vldr	d0, [sp]
 800987e:	2001      	movs	r0, #1
 8009880:	f001 ff16 	bl	800b6b0 <__kernel_sin>
 8009884:	ec51 0b10 	vmov	r0, r1, d0
 8009888:	e7e6      	b.n	8009858 <sin+0x30>
 800988a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800988e:	ed9d 0b00 	vldr	d0, [sp]
 8009892:	f001 faf5 	bl	800ae80 <__kernel_cos>
 8009896:	e7f5      	b.n	8009884 <sin+0x5c>
 8009898:	ed9d 1b02 	vldr	d1, [sp, #8]
 800989c:	ed9d 0b00 	vldr	d0, [sp]
 80098a0:	2001      	movs	r0, #1
 80098a2:	f001 ff05 	bl	800b6b0 <__kernel_sin>
 80098a6:	ec53 2b10 	vmov	r2, r3, d0
 80098aa:	ee10 0a10 	vmov	r0, s0
 80098ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80098b2:	e7d1      	b.n	8009858 <sin+0x30>
 80098b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098b8:	ed9d 0b00 	vldr	d0, [sp]
 80098bc:	f001 fae0 	bl	800ae80 <__kernel_cos>
 80098c0:	e7f1      	b.n	80098a6 <sin+0x7e>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
	...
 80098d0:	3fe921fb 	.word	0x3fe921fb
 80098d4:	7fefffff 	.word	0x7fefffff

080098d8 <asin>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	ed2d 8b02 	vpush	{d8}
 80098de:	ec55 4b10 	vmov	r4, r5, d0
 80098e2:	f000 f8c9 	bl	8009a78 <__ieee754_asin>
 80098e6:	4622      	mov	r2, r4
 80098e8:	462b      	mov	r3, r5
 80098ea:	4620      	mov	r0, r4
 80098ec:	4629      	mov	r1, r5
 80098ee:	eeb0 8a40 	vmov.f32	s16, s0
 80098f2:	eef0 8a60 	vmov.f32	s17, s1
 80098f6:	f7f7 f919 	bl	8000b2c <__aeabi_dcmpun>
 80098fa:	b9a8      	cbnz	r0, 8009928 <asin+0x50>
 80098fc:	ec45 4b10 	vmov	d0, r4, r5
 8009900:	f001 ffc4 	bl	800b88c <fabs>
 8009904:	4b0c      	ldr	r3, [pc, #48]	; (8009938 <asin+0x60>)
 8009906:	ec51 0b10 	vmov	r0, r1, d0
 800990a:	2200      	movs	r2, #0
 800990c:	f7f7 f904 	bl	8000b18 <__aeabi_dcmpgt>
 8009910:	b150      	cbz	r0, 8009928 <asin+0x50>
 8009912:	f7ff fae7 	bl	8008ee4 <__errno>
 8009916:	ecbd 8b02 	vpop	{d8}
 800991a:	2321      	movs	r3, #33	; 0x21
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009922:	4806      	ldr	r0, [pc, #24]	; (800993c <asin+0x64>)
 8009924:	f002 b848 	b.w	800b9b8 <nan>
 8009928:	eeb0 0a48 	vmov.f32	s0, s16
 800992c:	eef0 0a68 	vmov.f32	s1, s17
 8009930:	ecbd 8b02 	vpop	{d8}
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	3ff00000 	.word	0x3ff00000
 800993c:	0800bb2d 	.word	0x0800bb2d

08009940 <pow>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	ed2d 8b02 	vpush	{d8}
 8009946:	eeb0 8a40 	vmov.f32	s16, s0
 800994a:	eef0 8a60 	vmov.f32	s17, s1
 800994e:	ec55 4b11 	vmov	r4, r5, d1
 8009952:	f000 faa5 	bl	8009ea0 <__ieee754_pow>
 8009956:	4622      	mov	r2, r4
 8009958:	462b      	mov	r3, r5
 800995a:	4620      	mov	r0, r4
 800995c:	4629      	mov	r1, r5
 800995e:	ec57 6b10 	vmov	r6, r7, d0
 8009962:	f7f7 f8e3 	bl	8000b2c <__aeabi_dcmpun>
 8009966:	2800      	cmp	r0, #0
 8009968:	d13b      	bne.n	80099e2 <pow+0xa2>
 800996a:	ec51 0b18 	vmov	r0, r1, d8
 800996e:	2200      	movs	r2, #0
 8009970:	2300      	movs	r3, #0
 8009972:	f7f7 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009976:	b1b8      	cbz	r0, 80099a8 <pow+0x68>
 8009978:	2200      	movs	r2, #0
 800997a:	2300      	movs	r3, #0
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	f7f7 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009984:	2800      	cmp	r0, #0
 8009986:	d146      	bne.n	8009a16 <pow+0xd6>
 8009988:	ec45 4b10 	vmov	d0, r4, r5
 800998c:	f001 ff87 	bl	800b89e <finite>
 8009990:	b338      	cbz	r0, 80099e2 <pow+0xa2>
 8009992:	2200      	movs	r2, #0
 8009994:	2300      	movs	r3, #0
 8009996:	4620      	mov	r0, r4
 8009998:	4629      	mov	r1, r5
 800999a:	f7f7 f89f 	bl	8000adc <__aeabi_dcmplt>
 800999e:	b300      	cbz	r0, 80099e2 <pow+0xa2>
 80099a0:	f7ff faa0 	bl	8008ee4 <__errno>
 80099a4:	2322      	movs	r3, #34	; 0x22
 80099a6:	e01b      	b.n	80099e0 <pow+0xa0>
 80099a8:	ec47 6b10 	vmov	d0, r6, r7
 80099ac:	f001 ff77 	bl	800b89e <finite>
 80099b0:	b9e0      	cbnz	r0, 80099ec <pow+0xac>
 80099b2:	eeb0 0a48 	vmov.f32	s0, s16
 80099b6:	eef0 0a68 	vmov.f32	s1, s17
 80099ba:	f001 ff70 	bl	800b89e <finite>
 80099be:	b1a8      	cbz	r0, 80099ec <pow+0xac>
 80099c0:	ec45 4b10 	vmov	d0, r4, r5
 80099c4:	f001 ff6b 	bl	800b89e <finite>
 80099c8:	b180      	cbz	r0, 80099ec <pow+0xac>
 80099ca:	4632      	mov	r2, r6
 80099cc:	463b      	mov	r3, r7
 80099ce:	4630      	mov	r0, r6
 80099d0:	4639      	mov	r1, r7
 80099d2:	f7f7 f8ab 	bl	8000b2c <__aeabi_dcmpun>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d0e2      	beq.n	80099a0 <pow+0x60>
 80099da:	f7ff fa83 	bl	8008ee4 <__errno>
 80099de:	2321      	movs	r3, #33	; 0x21
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	ecbd 8b02 	vpop	{d8}
 80099e6:	ec47 6b10 	vmov	d0, r6, r7
 80099ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ec:	2200      	movs	r2, #0
 80099ee:	2300      	movs	r3, #0
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f7 f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d0f2      	beq.n	80099e2 <pow+0xa2>
 80099fc:	eeb0 0a48 	vmov.f32	s0, s16
 8009a00:	eef0 0a68 	vmov.f32	s1, s17
 8009a04:	f001 ff4b 	bl	800b89e <finite>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d0ea      	beq.n	80099e2 <pow+0xa2>
 8009a0c:	ec45 4b10 	vmov	d0, r4, r5
 8009a10:	f001 ff45 	bl	800b89e <finite>
 8009a14:	e7c3      	b.n	800999e <pow+0x5e>
 8009a16:	4f01      	ldr	r7, [pc, #4]	; (8009a1c <pow+0xdc>)
 8009a18:	2600      	movs	r6, #0
 8009a1a:	e7e2      	b.n	80099e2 <pow+0xa2>
 8009a1c:	3ff00000 	.word	0x3ff00000

08009a20 <sqrt>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	ed2d 8b02 	vpush	{d8}
 8009a26:	ec55 4b10 	vmov	r4, r5, d0
 8009a2a:	f001 f975 	bl	800ad18 <__ieee754_sqrt>
 8009a2e:	4622      	mov	r2, r4
 8009a30:	462b      	mov	r3, r5
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	eeb0 8a40 	vmov.f32	s16, s0
 8009a3a:	eef0 8a60 	vmov.f32	s17, s1
 8009a3e:	f7f7 f875 	bl	8000b2c <__aeabi_dcmpun>
 8009a42:	b990      	cbnz	r0, 8009a6a <sqrt+0x4a>
 8009a44:	2200      	movs	r2, #0
 8009a46:	2300      	movs	r3, #0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7f7 f846 	bl	8000adc <__aeabi_dcmplt>
 8009a50:	b158      	cbz	r0, 8009a6a <sqrt+0x4a>
 8009a52:	f7ff fa47 	bl	8008ee4 <__errno>
 8009a56:	2321      	movs	r3, #33	; 0x21
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7f6 fef3 	bl	800084c <__aeabi_ddiv>
 8009a66:	ec41 0b18 	vmov	d8, r0, r1
 8009a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a6e:	eef0 0a68 	vmov.f32	s1, s17
 8009a72:	ecbd 8b02 	vpop	{d8}
 8009a76:	bd38      	pop	{r3, r4, r5, pc}

08009a78 <__ieee754_asin>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	ed2d 8b04 	vpush	{d8-d9}
 8009a80:	ec55 4b10 	vmov	r4, r5, d0
 8009a84:	4bcc      	ldr	r3, [pc, #816]	; (8009db8 <__ieee754_asin+0x340>)
 8009a86:	b083      	sub	sp, #12
 8009a88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009a8c:	4598      	cmp	r8, r3
 8009a8e:	9501      	str	r5, [sp, #4]
 8009a90:	dd35      	ble.n	8009afe <__ieee754_asin+0x86>
 8009a92:	ee10 3a10 	vmov	r3, s0
 8009a96:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009a9a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009a9e:	ea58 0303 	orrs.w	r3, r8, r3
 8009aa2:	d117      	bne.n	8009ad4 <__ieee754_asin+0x5c>
 8009aa4:	a3aa      	add	r3, pc, #680	; (adr r3, 8009d50 <__ieee754_asin+0x2d8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	ee10 0a10 	vmov	r0, s0
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	a3a8      	add	r3, pc, #672	; (adr r3, 8009d58 <__ieee754_asin+0x2e0>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7f6 fd99 	bl	80005f8 <__aeabi_dmul>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4630      	mov	r0, r6
 8009acc:	4639      	mov	r1, r7
 8009ace:	f7f6 fbdd 	bl	800028c <__adddf3>
 8009ad2:	e00b      	b.n	8009aec <__ieee754_asin+0x74>
 8009ad4:	ee10 2a10 	vmov	r2, s0
 8009ad8:	462b      	mov	r3, r5
 8009ada:	ee10 0a10 	vmov	r0, s0
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fbd2 	bl	8000288 <__aeabi_dsub>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	f7f6 feb0 	bl	800084c <__aeabi_ddiv>
 8009aec:	4604      	mov	r4, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	ec45 4b10 	vmov	d0, r4, r5
 8009af4:	b003      	add	sp, #12
 8009af6:	ecbd 8b04 	vpop	{d8-d9}
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	4baf      	ldr	r3, [pc, #700]	; (8009dbc <__ieee754_asin+0x344>)
 8009b00:	4598      	cmp	r8, r3
 8009b02:	dc11      	bgt.n	8009b28 <__ieee754_asin+0xb0>
 8009b04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009b08:	f280 80ae 	bge.w	8009c68 <__ieee754_asin+0x1f0>
 8009b0c:	a394      	add	r3, pc, #592	; (adr r3, 8009d60 <__ieee754_asin+0x2e8>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	ee10 0a10 	vmov	r0, s0
 8009b16:	4629      	mov	r1, r5
 8009b18:	f7f6 fbb8 	bl	800028c <__adddf3>
 8009b1c:	4ba8      	ldr	r3, [pc, #672]	; (8009dc0 <__ieee754_asin+0x348>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f7f6 fffa 	bl	8000b18 <__aeabi_dcmpgt>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1e3      	bne.n	8009af0 <__ieee754_asin+0x78>
 8009b28:	ec45 4b10 	vmov	d0, r4, r5
 8009b2c:	f001 feae 	bl	800b88c <fabs>
 8009b30:	49a3      	ldr	r1, [pc, #652]	; (8009dc0 <__ieee754_asin+0x348>)
 8009b32:	ec53 2b10 	vmov	r2, r3, d0
 8009b36:	2000      	movs	r0, #0
 8009b38:	f7f6 fba6 	bl	8000288 <__aeabi_dsub>
 8009b3c:	4ba1      	ldr	r3, [pc, #644]	; (8009dc4 <__ieee754_asin+0x34c>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f7f6 fd5a 	bl	80005f8 <__aeabi_dmul>
 8009b44:	a388      	add	r3, pc, #544	; (adr r3, 8009d68 <__ieee754_asin+0x2f0>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	f7f6 fd53 	bl	80005f8 <__aeabi_dmul>
 8009b52:	a387      	add	r3, pc, #540	; (adr r3, 8009d70 <__ieee754_asin+0x2f8>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fb98 	bl	800028c <__adddf3>
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	462b      	mov	r3, r5
 8009b60:	f7f6 fd4a 	bl	80005f8 <__aeabi_dmul>
 8009b64:	a384      	add	r3, pc, #528	; (adr r3, 8009d78 <__ieee754_asin+0x300>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	f7f6 fb8d 	bl	8000288 <__aeabi_dsub>
 8009b6e:	4622      	mov	r2, r4
 8009b70:	462b      	mov	r3, r5
 8009b72:	f7f6 fd41 	bl	80005f8 <__aeabi_dmul>
 8009b76:	a382      	add	r3, pc, #520	; (adr r3, 8009d80 <__ieee754_asin+0x308>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 fb86 	bl	800028c <__adddf3>
 8009b80:	4622      	mov	r2, r4
 8009b82:	462b      	mov	r3, r5
 8009b84:	f7f6 fd38 	bl	80005f8 <__aeabi_dmul>
 8009b88:	a37f      	add	r3, pc, #508	; (adr r3, 8009d88 <__ieee754_asin+0x310>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 fb7b 	bl	8000288 <__aeabi_dsub>
 8009b92:	4622      	mov	r2, r4
 8009b94:	462b      	mov	r3, r5
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	a37d      	add	r3, pc, #500	; (adr r3, 8009d90 <__ieee754_asin+0x318>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fb74 	bl	800028c <__adddf3>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	f7f6 fd26 	bl	80005f8 <__aeabi_dmul>
 8009bac:	a37a      	add	r3, pc, #488	; (adr r3, 8009d98 <__ieee754_asin+0x320>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	ec41 0b18 	vmov	d8, r0, r1
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	4629      	mov	r1, r5
 8009bba:	f7f6 fd1d 	bl	80005f8 <__aeabi_dmul>
 8009bbe:	a378      	add	r3, pc, #480	; (adr r3, 8009da0 <__ieee754_asin+0x328>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f7f6 fb60 	bl	8000288 <__aeabi_dsub>
 8009bc8:	4622      	mov	r2, r4
 8009bca:	462b      	mov	r3, r5
 8009bcc:	f7f6 fd14 	bl	80005f8 <__aeabi_dmul>
 8009bd0:	a375      	add	r3, pc, #468	; (adr r3, 8009da8 <__ieee754_asin+0x330>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fb59 	bl	800028c <__adddf3>
 8009bda:	4622      	mov	r2, r4
 8009bdc:	462b      	mov	r3, r5
 8009bde:	f7f6 fd0b 	bl	80005f8 <__aeabi_dmul>
 8009be2:	a373      	add	r3, pc, #460	; (adr r3, 8009db0 <__ieee754_asin+0x338>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fb4e 	bl	8000288 <__aeabi_dsub>
 8009bec:	4622      	mov	r2, r4
 8009bee:	462b      	mov	r3, r5
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	4b72      	ldr	r3, [pc, #456]	; (8009dc0 <__ieee754_asin+0x348>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f7f6 fb48 	bl	800028c <__adddf3>
 8009bfc:	ec45 4b10 	vmov	d0, r4, r5
 8009c00:	4606      	mov	r6, r0
 8009c02:	460f      	mov	r7, r1
 8009c04:	f001 f888 	bl	800ad18 <__ieee754_sqrt>
 8009c08:	4b6f      	ldr	r3, [pc, #444]	; (8009dc8 <__ieee754_asin+0x350>)
 8009c0a:	4598      	cmp	r8, r3
 8009c0c:	ec5b ab10 	vmov	sl, fp, d0
 8009c10:	f340 80dc 	ble.w	8009dcc <__ieee754_asin+0x354>
 8009c14:	4632      	mov	r2, r6
 8009c16:	463b      	mov	r3, r7
 8009c18:	ec51 0b18 	vmov	r0, r1, d8
 8009c1c:	f7f6 fe16 	bl	800084c <__aeabi_ddiv>
 8009c20:	4652      	mov	r2, sl
 8009c22:	465b      	mov	r3, fp
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	4652      	mov	r2, sl
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	f7f6 fb2e 	bl	800028c <__adddf3>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	f7f6 fb2a 	bl	800028c <__adddf3>
 8009c38:	a347      	add	r3, pc, #284	; (adr r3, 8009d58 <__ieee754_asin+0x2e0>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fb23 	bl	8000288 <__aeabi_dsub>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	a142      	add	r1, pc, #264	; (adr r1, 8009d50 <__ieee754_asin+0x2d8>)
 8009c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c4c:	f7f6 fb1c 	bl	8000288 <__aeabi_dsub>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfdc      	itt	le
 8009c56:	4602      	movle	r2, r0
 8009c58:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	bfdc      	itt	le
 8009c62:	4614      	movle	r4, r2
 8009c64:	461d      	movle	r5, r3
 8009c66:	e743      	b.n	8009af0 <__ieee754_asin+0x78>
 8009c68:	ee10 2a10 	vmov	r2, s0
 8009c6c:	ee10 0a10 	vmov	r0, s0
 8009c70:	462b      	mov	r3, r5
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7f6 fcc0 	bl	80005f8 <__aeabi_dmul>
 8009c78:	a33b      	add	r3, pc, #236	; (adr r3, 8009d68 <__ieee754_asin+0x2f0>)
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	f7f6 fcb9 	bl	80005f8 <__aeabi_dmul>
 8009c86:	a33a      	add	r3, pc, #232	; (adr r3, 8009d70 <__ieee754_asin+0x2f8>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f7f6 fafe 	bl	800028c <__adddf3>
 8009c90:	4632      	mov	r2, r6
 8009c92:	463b      	mov	r3, r7
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	a337      	add	r3, pc, #220	; (adr r3, 8009d78 <__ieee754_asin+0x300>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f7f6 faf3 	bl	8000288 <__aeabi_dsub>
 8009ca2:	4632      	mov	r2, r6
 8009ca4:	463b      	mov	r3, r7
 8009ca6:	f7f6 fca7 	bl	80005f8 <__aeabi_dmul>
 8009caa:	a335      	add	r3, pc, #212	; (adr r3, 8009d80 <__ieee754_asin+0x308>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 faec 	bl	800028c <__adddf3>
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	f7f6 fc9e 	bl	80005f8 <__aeabi_dmul>
 8009cbc:	a332      	add	r3, pc, #200	; (adr r3, 8009d88 <__ieee754_asin+0x310>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fae1 	bl	8000288 <__aeabi_dsub>
 8009cc6:	4632      	mov	r2, r6
 8009cc8:	463b      	mov	r3, r7
 8009cca:	f7f6 fc95 	bl	80005f8 <__aeabi_dmul>
 8009cce:	a330      	add	r3, pc, #192	; (adr r3, 8009d90 <__ieee754_asin+0x318>)
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	f7f6 fada 	bl	800028c <__adddf3>
 8009cd8:	4632      	mov	r2, r6
 8009cda:	463b      	mov	r3, r7
 8009cdc:	f7f6 fc8c 	bl	80005f8 <__aeabi_dmul>
 8009ce0:	a32d      	add	r3, pc, #180	; (adr r3, 8009d98 <__ieee754_asin+0x320>)
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	4680      	mov	r8, r0
 8009ce8:	4689      	mov	r9, r1
 8009cea:	4630      	mov	r0, r6
 8009cec:	4639      	mov	r1, r7
 8009cee:	f7f6 fc83 	bl	80005f8 <__aeabi_dmul>
 8009cf2:	a32b      	add	r3, pc, #172	; (adr r3, 8009da0 <__ieee754_asin+0x328>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fac6 	bl	8000288 <__aeabi_dsub>
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	f7f6 fc7a 	bl	80005f8 <__aeabi_dmul>
 8009d04:	a328      	add	r3, pc, #160	; (adr r3, 8009da8 <__ieee754_asin+0x330>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	f7f6 fabf 	bl	800028c <__adddf3>
 8009d0e:	4632      	mov	r2, r6
 8009d10:	463b      	mov	r3, r7
 8009d12:	f7f6 fc71 	bl	80005f8 <__aeabi_dmul>
 8009d16:	a326      	add	r3, pc, #152	; (adr r3, 8009db0 <__ieee754_asin+0x338>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	f7f6 fab4 	bl	8000288 <__aeabi_dsub>
 8009d20:	4632      	mov	r2, r6
 8009d22:	463b      	mov	r3, r7
 8009d24:	f7f6 fc68 	bl	80005f8 <__aeabi_dmul>
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <__ieee754_asin+0x348>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f7f6 faae 	bl	800028c <__adddf3>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	f7f6 fd88 	bl	800084c <__aeabi_ddiv>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	462b      	mov	r3, r5
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4620      	mov	r0, r4
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	e6bf      	b.n	8009ace <__ieee754_asin+0x56>
 8009d4e:	bf00      	nop
 8009d50:	54442d18 	.word	0x54442d18
 8009d54:	3ff921fb 	.word	0x3ff921fb
 8009d58:	33145c07 	.word	0x33145c07
 8009d5c:	3c91a626 	.word	0x3c91a626
 8009d60:	8800759c 	.word	0x8800759c
 8009d64:	7e37e43c 	.word	0x7e37e43c
 8009d68:	0dfdf709 	.word	0x0dfdf709
 8009d6c:	3f023de1 	.word	0x3f023de1
 8009d70:	7501b288 	.word	0x7501b288
 8009d74:	3f49efe0 	.word	0x3f49efe0
 8009d78:	b5688f3b 	.word	0xb5688f3b
 8009d7c:	3fa48228 	.word	0x3fa48228
 8009d80:	0e884455 	.word	0x0e884455
 8009d84:	3fc9c155 	.word	0x3fc9c155
 8009d88:	03eb6f7d 	.word	0x03eb6f7d
 8009d8c:	3fd4d612 	.word	0x3fd4d612
 8009d90:	55555555 	.word	0x55555555
 8009d94:	3fc55555 	.word	0x3fc55555
 8009d98:	b12e9282 	.word	0xb12e9282
 8009d9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009da0:	1b8d0159 	.word	0x1b8d0159
 8009da4:	3fe6066c 	.word	0x3fe6066c
 8009da8:	9c598ac8 	.word	0x9c598ac8
 8009dac:	40002ae5 	.word	0x40002ae5
 8009db0:	1c8a2d4b 	.word	0x1c8a2d4b
 8009db4:	40033a27 	.word	0x40033a27
 8009db8:	3fefffff 	.word	0x3fefffff
 8009dbc:	3fdfffff 	.word	0x3fdfffff
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	3fef3332 	.word	0x3fef3332
 8009dcc:	ee10 2a10 	vmov	r2, s0
 8009dd0:	ee10 0a10 	vmov	r0, s0
 8009dd4:	465b      	mov	r3, fp
 8009dd6:	4659      	mov	r1, fp
 8009dd8:	f7f6 fa58 	bl	800028c <__adddf3>
 8009ddc:	4632      	mov	r2, r6
 8009dde:	463b      	mov	r3, r7
 8009de0:	ec41 0b19 	vmov	d9, r0, r1
 8009de4:	ec51 0b18 	vmov	r0, r1, d8
 8009de8:	f7f6 fd30 	bl	800084c <__aeabi_ddiv>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	ec51 0b19 	vmov	r0, r1, d9
 8009df4:	f7f6 fc00 	bl	80005f8 <__aeabi_dmul>
 8009df8:	f04f 0800 	mov.w	r8, #0
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	460f      	mov	r7, r1
 8009e00:	4642      	mov	r2, r8
 8009e02:	465b      	mov	r3, fp
 8009e04:	4640      	mov	r0, r8
 8009e06:	4659      	mov	r1, fp
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7f6 fa38 	bl	8000288 <__aeabi_dsub>
 8009e18:	4642      	mov	r2, r8
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	460d      	mov	r5, r1
 8009e1e:	465b      	mov	r3, fp
 8009e20:	4650      	mov	r0, sl
 8009e22:	4659      	mov	r1, fp
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	4629      	mov	r1, r5
 8009e30:	f7f6 fd0c 	bl	800084c <__aeabi_ddiv>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	f7f6 fa28 	bl	800028c <__adddf3>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	a113      	add	r1, pc, #76	; (adr r1, 8009e90 <__ieee754_asin+0x418>)
 8009e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e46:	f7f6 fa1f 	bl	8000288 <__aeabi_dsub>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 fa19 	bl	8000288 <__aeabi_dsub>
 8009e56:	4642      	mov	r2, r8
 8009e58:	4604      	mov	r4, r0
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	4640      	mov	r0, r8
 8009e60:	4659      	mov	r1, fp
 8009e62:	f7f6 fa13 	bl	800028c <__adddf3>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	a10b      	add	r1, pc, #44	; (adr r1, 8009e98 <__ieee754_asin+0x420>)
 8009e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e70:	f7f6 fa0a 	bl	8000288 <__aeabi_dsub>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4620      	mov	r0, r4
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7f6 fa04 	bl	8000288 <__aeabi_dsub>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	a104      	add	r1, pc, #16	; (adr r1, 8009e98 <__ieee754_asin+0x420>)
 8009e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8a:	e6df      	b.n	8009c4c <__ieee754_asin+0x1d4>
 8009e8c:	f3af 8000 	nop.w
 8009e90:	33145c07 	.word	0x33145c07
 8009e94:	3c91a626 	.word	0x3c91a626
 8009e98:	54442d18 	.word	0x54442d18
 8009e9c:	3fe921fb 	.word	0x3fe921fb

08009ea0 <__ieee754_pow>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	ed2d 8b06 	vpush	{d8-d10}
 8009ea8:	b089      	sub	sp, #36	; 0x24
 8009eaa:	ed8d 1b00 	vstr	d1, [sp]
 8009eae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009eb2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009eb6:	ea58 0102 	orrs.w	r1, r8, r2
 8009eba:	ec57 6b10 	vmov	r6, r7, d0
 8009ebe:	d115      	bne.n	8009eec <__ieee754_pow+0x4c>
 8009ec0:	19b3      	adds	r3, r6, r6
 8009ec2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009ec6:	4152      	adcs	r2, r2
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	4b89      	ldr	r3, [pc, #548]	; (800a0f0 <__ieee754_pow+0x250>)
 8009ecc:	4193      	sbcs	r3, r2
 8009ece:	f080 84d2 	bcs.w	800a876 <__ieee754_pow+0x9d6>
 8009ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 f9d7 	bl	800028c <__adddf3>
 8009ede:	ec41 0b10 	vmov	d0, r0, r1
 8009ee2:	b009      	add	sp, #36	; 0x24
 8009ee4:	ecbd 8b06 	vpop	{d8-d10}
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eec:	4b81      	ldr	r3, [pc, #516]	; (800a0f4 <__ieee754_pow+0x254>)
 8009eee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009ef2:	429c      	cmp	r4, r3
 8009ef4:	ee10 aa10 	vmov	sl, s0
 8009ef8:	463d      	mov	r5, r7
 8009efa:	dc06      	bgt.n	8009f0a <__ieee754_pow+0x6a>
 8009efc:	d101      	bne.n	8009f02 <__ieee754_pow+0x62>
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	d1e7      	bne.n	8009ed2 <__ieee754_pow+0x32>
 8009f02:	4598      	cmp	r8, r3
 8009f04:	dc01      	bgt.n	8009f0a <__ieee754_pow+0x6a>
 8009f06:	d10f      	bne.n	8009f28 <__ieee754_pow+0x88>
 8009f08:	b172      	cbz	r2, 8009f28 <__ieee754_pow+0x88>
 8009f0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009f0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009f12:	ea55 050a 	orrs.w	r5, r5, sl
 8009f16:	d1dc      	bne.n	8009ed2 <__ieee754_pow+0x32>
 8009f18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f1c:	18db      	adds	r3, r3, r3
 8009f1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009f22:	4152      	adcs	r2, r2
 8009f24:	429d      	cmp	r5, r3
 8009f26:	e7d0      	b.n	8009eca <__ieee754_pow+0x2a>
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	da3b      	bge.n	8009fa4 <__ieee754_pow+0x104>
 8009f2c:	4b72      	ldr	r3, [pc, #456]	; (800a0f8 <__ieee754_pow+0x258>)
 8009f2e:	4598      	cmp	r8, r3
 8009f30:	dc51      	bgt.n	8009fd6 <__ieee754_pow+0x136>
 8009f32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009f36:	4598      	cmp	r8, r3
 8009f38:	f340 84ac 	ble.w	800a894 <__ieee754_pow+0x9f4>
 8009f3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009f40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f44:	2b14      	cmp	r3, #20
 8009f46:	dd0f      	ble.n	8009f68 <__ieee754_pow+0xc8>
 8009f48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009f4c:	fa22 f103 	lsr.w	r1, r2, r3
 8009f50:	fa01 f303 	lsl.w	r3, r1, r3
 8009f54:	4293      	cmp	r3, r2
 8009f56:	f040 849d 	bne.w	800a894 <__ieee754_pow+0x9f4>
 8009f5a:	f001 0101 	and.w	r1, r1, #1
 8009f5e:	f1c1 0302 	rsb	r3, r1, #2
 8009f62:	9304      	str	r3, [sp, #16]
 8009f64:	b182      	cbz	r2, 8009f88 <__ieee754_pow+0xe8>
 8009f66:	e05f      	b.n	800a028 <__ieee754_pow+0x188>
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	d15b      	bne.n	800a024 <__ieee754_pow+0x184>
 8009f6c:	f1c3 0314 	rsb	r3, r3, #20
 8009f70:	fa48 f103 	asr.w	r1, r8, r3
 8009f74:	fa01 f303 	lsl.w	r3, r1, r3
 8009f78:	4543      	cmp	r3, r8
 8009f7a:	f040 8488 	bne.w	800a88e <__ieee754_pow+0x9ee>
 8009f7e:	f001 0101 	and.w	r1, r1, #1
 8009f82:	f1c1 0302 	rsb	r3, r1, #2
 8009f86:	9304      	str	r3, [sp, #16]
 8009f88:	4b5c      	ldr	r3, [pc, #368]	; (800a0fc <__ieee754_pow+0x25c>)
 8009f8a:	4598      	cmp	r8, r3
 8009f8c:	d132      	bne.n	8009ff4 <__ieee754_pow+0x154>
 8009f8e:	f1b9 0f00 	cmp.w	r9, #0
 8009f92:	f280 8478 	bge.w	800a886 <__ieee754_pow+0x9e6>
 8009f96:	4959      	ldr	r1, [pc, #356]	; (800a0fc <__ieee754_pow+0x25c>)
 8009f98:	4632      	mov	r2, r6
 8009f9a:	463b      	mov	r3, r7
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	f7f6 fc55 	bl	800084c <__aeabi_ddiv>
 8009fa2:	e79c      	b.n	8009ede <__ieee754_pow+0x3e>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	d13d      	bne.n	800a028 <__ieee754_pow+0x188>
 8009fac:	4b51      	ldr	r3, [pc, #324]	; (800a0f4 <__ieee754_pow+0x254>)
 8009fae:	4598      	cmp	r8, r3
 8009fb0:	d1ea      	bne.n	8009f88 <__ieee754_pow+0xe8>
 8009fb2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009fb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009fba:	ea53 030a 	orrs.w	r3, r3, sl
 8009fbe:	f000 845a 	beq.w	800a876 <__ieee754_pow+0x9d6>
 8009fc2:	4b4f      	ldr	r3, [pc, #316]	; (800a100 <__ieee754_pow+0x260>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	dd08      	ble.n	8009fda <__ieee754_pow+0x13a>
 8009fc8:	f1b9 0f00 	cmp.w	r9, #0
 8009fcc:	f2c0 8457 	blt.w	800a87e <__ieee754_pow+0x9de>
 8009fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd4:	e783      	b.n	8009ede <__ieee754_pow+0x3e>
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	e7e5      	b.n	8009fa6 <__ieee754_pow+0x106>
 8009fda:	f1b9 0f00 	cmp.w	r9, #0
 8009fde:	f04f 0000 	mov.w	r0, #0
 8009fe2:	f04f 0100 	mov.w	r1, #0
 8009fe6:	f6bf af7a 	bge.w	8009ede <__ieee754_pow+0x3e>
 8009fea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009fee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ff2:	e774      	b.n	8009ede <__ieee754_pow+0x3e>
 8009ff4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009ff8:	d106      	bne.n	800a008 <__ieee754_pow+0x168>
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	4630      	mov	r0, r6
 800a000:	4639      	mov	r1, r7
 800a002:	f7f6 faf9 	bl	80005f8 <__aeabi_dmul>
 800a006:	e76a      	b.n	8009ede <__ieee754_pow+0x3e>
 800a008:	4b3e      	ldr	r3, [pc, #248]	; (800a104 <__ieee754_pow+0x264>)
 800a00a:	4599      	cmp	r9, r3
 800a00c:	d10c      	bne.n	800a028 <__ieee754_pow+0x188>
 800a00e:	2d00      	cmp	r5, #0
 800a010:	db0a      	blt.n	800a028 <__ieee754_pow+0x188>
 800a012:	ec47 6b10 	vmov	d0, r6, r7
 800a016:	b009      	add	sp, #36	; 0x24
 800a018:	ecbd 8b06 	vpop	{d8-d10}
 800a01c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	f000 be7a 	b.w	800ad18 <__ieee754_sqrt>
 800a024:	2300      	movs	r3, #0
 800a026:	9304      	str	r3, [sp, #16]
 800a028:	ec47 6b10 	vmov	d0, r6, r7
 800a02c:	f001 fc2e 	bl	800b88c <fabs>
 800a030:	ec51 0b10 	vmov	r0, r1, d0
 800a034:	f1ba 0f00 	cmp.w	sl, #0
 800a038:	d129      	bne.n	800a08e <__ieee754_pow+0x1ee>
 800a03a:	b124      	cbz	r4, 800a046 <__ieee754_pow+0x1a6>
 800a03c:	4b2f      	ldr	r3, [pc, #188]	; (800a0fc <__ieee754_pow+0x25c>)
 800a03e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a042:	429a      	cmp	r2, r3
 800a044:	d123      	bne.n	800a08e <__ieee754_pow+0x1ee>
 800a046:	f1b9 0f00 	cmp.w	r9, #0
 800a04a:	da05      	bge.n	800a058 <__ieee754_pow+0x1b8>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	2000      	movs	r0, #0
 800a052:	492a      	ldr	r1, [pc, #168]	; (800a0fc <__ieee754_pow+0x25c>)
 800a054:	f7f6 fbfa 	bl	800084c <__aeabi_ddiv>
 800a058:	2d00      	cmp	r5, #0
 800a05a:	f6bf af40 	bge.w	8009ede <__ieee754_pow+0x3e>
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a064:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a068:	4323      	orrs	r3, r4
 800a06a:	d108      	bne.n	800a07e <__ieee754_pow+0x1de>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4610      	mov	r0, r2
 800a072:	4619      	mov	r1, r3
 800a074:	f7f6 f908 	bl	8000288 <__aeabi_dsub>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	e78f      	b.n	8009f9e <__ieee754_pow+0xfe>
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	2b01      	cmp	r3, #1
 800a082:	f47f af2c 	bne.w	8009ede <__ieee754_pow+0x3e>
 800a086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a08a:	4619      	mov	r1, r3
 800a08c:	e727      	b.n	8009ede <__ieee754_pow+0x3e>
 800a08e:	0feb      	lsrs	r3, r5, #31
 800a090:	3b01      	subs	r3, #1
 800a092:	9306      	str	r3, [sp, #24]
 800a094:	9a06      	ldr	r2, [sp, #24]
 800a096:	9b04      	ldr	r3, [sp, #16]
 800a098:	4313      	orrs	r3, r2
 800a09a:	d102      	bne.n	800a0a2 <__ieee754_pow+0x202>
 800a09c:	4632      	mov	r2, r6
 800a09e:	463b      	mov	r3, r7
 800a0a0:	e7e6      	b.n	800a070 <__ieee754_pow+0x1d0>
 800a0a2:	4b19      	ldr	r3, [pc, #100]	; (800a108 <__ieee754_pow+0x268>)
 800a0a4:	4598      	cmp	r8, r3
 800a0a6:	f340 80fb 	ble.w	800a2a0 <__ieee754_pow+0x400>
 800a0aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a0ae:	4598      	cmp	r8, r3
 800a0b0:	4b13      	ldr	r3, [pc, #76]	; (800a100 <__ieee754_pow+0x260>)
 800a0b2:	dd0c      	ble.n	800a0ce <__ieee754_pow+0x22e>
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	dc0f      	bgt.n	800a0d8 <__ieee754_pow+0x238>
 800a0b8:	f1b9 0f00 	cmp.w	r9, #0
 800a0bc:	da0f      	bge.n	800a0de <__ieee754_pow+0x23e>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	b009      	add	sp, #36	; 0x24
 800a0c2:	ecbd 8b06 	vpop	{d8-d10}
 800a0c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	f001 bbd6 	b.w	800b87a <__math_oflow>
 800a0ce:	429c      	cmp	r4, r3
 800a0d0:	dbf2      	blt.n	800a0b8 <__ieee754_pow+0x218>
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <__ieee754_pow+0x25c>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	dd19      	ble.n	800a10c <__ieee754_pow+0x26c>
 800a0d8:	f1b9 0f00 	cmp.w	r9, #0
 800a0dc:	dcef      	bgt.n	800a0be <__ieee754_pow+0x21e>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	b009      	add	sp, #36	; 0x24
 800a0e2:	ecbd 8b06 	vpop	{d8-d10}
 800a0e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ea:	f001 bbbd 	b.w	800b868 <__math_uflow>
 800a0ee:	bf00      	nop
 800a0f0:	fff00000 	.word	0xfff00000
 800a0f4:	7ff00000 	.word	0x7ff00000
 800a0f8:	433fffff 	.word	0x433fffff
 800a0fc:	3ff00000 	.word	0x3ff00000
 800a100:	3fefffff 	.word	0x3fefffff
 800a104:	3fe00000 	.word	0x3fe00000
 800a108:	41e00000 	.word	0x41e00000
 800a10c:	4b60      	ldr	r3, [pc, #384]	; (800a290 <__ieee754_pow+0x3f0>)
 800a10e:	2200      	movs	r2, #0
 800a110:	f7f6 f8ba 	bl	8000288 <__aeabi_dsub>
 800a114:	a354      	add	r3, pc, #336	; (adr r3, 800a268 <__ieee754_pow+0x3c8>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	f7f6 fa6b 	bl	80005f8 <__aeabi_dmul>
 800a122:	a353      	add	r3, pc, #332	; (adr r3, 800a270 <__ieee754_pow+0x3d0>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	4606      	mov	r6, r0
 800a12a:	460f      	mov	r7, r1
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	f7f6 fa62 	bl	80005f8 <__aeabi_dmul>
 800a134:	4b57      	ldr	r3, [pc, #348]	; (800a294 <__ieee754_pow+0x3f4>)
 800a136:	4682      	mov	sl, r0
 800a138:	468b      	mov	fp, r1
 800a13a:	2200      	movs	r2, #0
 800a13c:	4620      	mov	r0, r4
 800a13e:	4629      	mov	r1, r5
 800a140:	f7f6 fa5a 	bl	80005f8 <__aeabi_dmul>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	a14b      	add	r1, pc, #300	; (adr r1, 800a278 <__ieee754_pow+0x3d8>)
 800a14a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a14e:	f7f6 f89b 	bl	8000288 <__aeabi_dsub>
 800a152:	4622      	mov	r2, r4
 800a154:	462b      	mov	r3, r5
 800a156:	f7f6 fa4f 	bl	80005f8 <__aeabi_dmul>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	2000      	movs	r0, #0
 800a160:	494d      	ldr	r1, [pc, #308]	; (800a298 <__ieee754_pow+0x3f8>)
 800a162:	f7f6 f891 	bl	8000288 <__aeabi_dsub>
 800a166:	4622      	mov	r2, r4
 800a168:	4680      	mov	r8, r0
 800a16a:	4689      	mov	r9, r1
 800a16c:	462b      	mov	r3, r5
 800a16e:	4620      	mov	r0, r4
 800a170:	4629      	mov	r1, r5
 800a172:	f7f6 fa41 	bl	80005f8 <__aeabi_dmul>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4640      	mov	r0, r8
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f6 fa3b 	bl	80005f8 <__aeabi_dmul>
 800a182:	a33f      	add	r3, pc, #252	; (adr r3, 800a280 <__ieee754_pow+0x3e0>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	4650      	mov	r0, sl
 800a192:	4659      	mov	r1, fp
 800a194:	f7f6 f878 	bl	8000288 <__aeabi_dsub>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4680      	mov	r8, r0
 800a19e:	4689      	mov	r9, r1
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 f872 	bl	800028c <__adddf3>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	463b      	mov	r3, r7
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	f7f6 f869 	bl	8000288 <__aeabi_dsub>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	f7f6 f863 	bl	8000288 <__aeabi_dsub>
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	9a06      	ldr	r2, [sp, #24]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	4682      	mov	sl, r0
 800a1cc:	468b      	mov	fp, r1
 800a1ce:	f040 81e7 	bne.w	800a5a0 <__ieee754_pow+0x700>
 800a1d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a288 <__ieee754_pow+0x3e8>
 800a1d6:	eeb0 8a47 	vmov.f32	s16, s14
 800a1da:	eef0 8a67 	vmov.f32	s17, s15
 800a1de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ec:	f7f6 f84c 	bl	8000288 <__aeabi_dsub>
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	462b      	mov	r3, r5
 800a1f4:	f7f6 fa00 	bl	80005f8 <__aeabi_dmul>
 800a1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	4689      	mov	r9, r1
 800a200:	4650      	mov	r0, sl
 800a202:	4659      	mov	r1, fp
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4640      	mov	r0, r8
 800a20e:	4649      	mov	r1, r9
 800a210:	f7f6 f83c 	bl	800028c <__adddf3>
 800a214:	4632      	mov	r2, r6
 800a216:	463b      	mov	r3, r7
 800a218:	4680      	mov	r8, r0
 800a21a:	4689      	mov	r9, r1
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 f9ea 	bl	80005f8 <__aeabi_dmul>
 800a224:	460b      	mov	r3, r1
 800a226:	4604      	mov	r4, r0
 800a228:	460d      	mov	r5, r1
 800a22a:	4602      	mov	r2, r0
 800a22c:	4649      	mov	r1, r9
 800a22e:	4640      	mov	r0, r8
 800a230:	f7f6 f82c 	bl	800028c <__adddf3>
 800a234:	4b19      	ldr	r3, [pc, #100]	; (800a29c <__ieee754_pow+0x3fc>)
 800a236:	4299      	cmp	r1, r3
 800a238:	ec45 4b19 	vmov	d9, r4, r5
 800a23c:	4606      	mov	r6, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	468b      	mov	fp, r1
 800a242:	f340 82f1 	ble.w	800a828 <__ieee754_pow+0x988>
 800a246:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a24a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a24e:	4303      	orrs	r3, r0
 800a250:	f000 81e4 	beq.w	800a61c <__ieee754_pow+0x77c>
 800a254:	ec51 0b18 	vmov	r0, r1, d8
 800a258:	2200      	movs	r2, #0
 800a25a:	2300      	movs	r3, #0
 800a25c:	f7f6 fc3e 	bl	8000adc <__aeabi_dcmplt>
 800a260:	3800      	subs	r0, #0
 800a262:	bf18      	it	ne
 800a264:	2001      	movne	r0, #1
 800a266:	e72b      	b.n	800a0c0 <__ieee754_pow+0x220>
 800a268:	60000000 	.word	0x60000000
 800a26c:	3ff71547 	.word	0x3ff71547
 800a270:	f85ddf44 	.word	0xf85ddf44
 800a274:	3e54ae0b 	.word	0x3e54ae0b
 800a278:	55555555 	.word	0x55555555
 800a27c:	3fd55555 	.word	0x3fd55555
 800a280:	652b82fe 	.word	0x652b82fe
 800a284:	3ff71547 	.word	0x3ff71547
 800a288:	00000000 	.word	0x00000000
 800a28c:	bff00000 	.word	0xbff00000
 800a290:	3ff00000 	.word	0x3ff00000
 800a294:	3fd00000 	.word	0x3fd00000
 800a298:	3fe00000 	.word	0x3fe00000
 800a29c:	408fffff 	.word	0x408fffff
 800a2a0:	4bd5      	ldr	r3, [pc, #852]	; (800a5f8 <__ieee754_pow+0x758>)
 800a2a2:	402b      	ands	r3, r5
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	b92b      	cbnz	r3, 800a2b4 <__ieee754_pow+0x414>
 800a2a8:	4bd4      	ldr	r3, [pc, #848]	; (800a5fc <__ieee754_pow+0x75c>)
 800a2aa:	f7f6 f9a5 	bl	80005f8 <__aeabi_dmul>
 800a2ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	1523      	asrs	r3, r4, #20
 800a2b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2ba:	4413      	add	r3, r2
 800a2bc:	9305      	str	r3, [sp, #20]
 800a2be:	4bd0      	ldr	r3, [pc, #832]	; (800a600 <__ieee754_pow+0x760>)
 800a2c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a2c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a2c8:	429c      	cmp	r4, r3
 800a2ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a2ce:	dd08      	ble.n	800a2e2 <__ieee754_pow+0x442>
 800a2d0:	4bcc      	ldr	r3, [pc, #816]	; (800a604 <__ieee754_pow+0x764>)
 800a2d2:	429c      	cmp	r4, r3
 800a2d4:	f340 8162 	ble.w	800a59c <__ieee754_pow+0x6fc>
 800a2d8:	9b05      	ldr	r3, [sp, #20]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	9305      	str	r3, [sp, #20]
 800a2de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a2e2:	2400      	movs	r4, #0
 800a2e4:	00e3      	lsls	r3, r4, #3
 800a2e6:	9307      	str	r3, [sp, #28]
 800a2e8:	4bc7      	ldr	r3, [pc, #796]	; (800a608 <__ieee754_pow+0x768>)
 800a2ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2ee:	ed93 7b00 	vldr	d7, [r3]
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	ec53 2b17 	vmov	r2, r3, d7
 800a2f8:	eeb0 9a47 	vmov.f32	s18, s14
 800a2fc:	eef0 9a67 	vmov.f32	s19, s15
 800a300:	4682      	mov	sl, r0
 800a302:	f7f5 ffc1 	bl	8000288 <__aeabi_dsub>
 800a306:	4652      	mov	r2, sl
 800a308:	4606      	mov	r6, r0
 800a30a:	460f      	mov	r7, r1
 800a30c:	462b      	mov	r3, r5
 800a30e:	ec51 0b19 	vmov	r0, r1, d9
 800a312:	f7f5 ffbb 	bl	800028c <__adddf3>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	2000      	movs	r0, #0
 800a31c:	49bb      	ldr	r1, [pc, #748]	; (800a60c <__ieee754_pow+0x76c>)
 800a31e:	f7f6 fa95 	bl	800084c <__aeabi_ddiv>
 800a322:	ec41 0b1a 	vmov	d10, r0, r1
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f6 f963 	bl	80005f8 <__aeabi_dmul>
 800a332:	2300      	movs	r3, #0
 800a334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a338:	9302      	str	r3, [sp, #8]
 800a33a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a33e:	46ab      	mov	fp, r5
 800a340:	106d      	asrs	r5, r5, #1
 800a342:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a346:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a34a:	ec41 0b18 	vmov	d8, r0, r1
 800a34e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a352:	2200      	movs	r2, #0
 800a354:	4640      	mov	r0, r8
 800a356:	4649      	mov	r1, r9
 800a358:	4614      	mov	r4, r2
 800a35a:	461d      	mov	r5, r3
 800a35c:	f7f6 f94c 	bl	80005f8 <__aeabi_dmul>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4630      	mov	r0, r6
 800a366:	4639      	mov	r1, r7
 800a368:	f7f5 ff8e 	bl	8000288 <__aeabi_dsub>
 800a36c:	ec53 2b19 	vmov	r2, r3, d9
 800a370:	4606      	mov	r6, r0
 800a372:	460f      	mov	r7, r1
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	f7f5 ff86 	bl	8000288 <__aeabi_dsub>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4650      	mov	r0, sl
 800a382:	4659      	mov	r1, fp
 800a384:	f7f5 ff80 	bl	8000288 <__aeabi_dsub>
 800a388:	4642      	mov	r2, r8
 800a38a:	464b      	mov	r3, r9
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4630      	mov	r0, r6
 800a396:	4639      	mov	r1, r7
 800a398:	f7f5 ff76 	bl	8000288 <__aeabi_dsub>
 800a39c:	ec53 2b1a 	vmov	r2, r3, d10
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	ec53 2b18 	vmov	r2, r3, d8
 800a3a8:	ec41 0b19 	vmov	d9, r0, r1
 800a3ac:	ec51 0b18 	vmov	r0, r1, d8
 800a3b0:	f7f6 f922 	bl	80005f8 <__aeabi_dmul>
 800a3b4:	a37c      	add	r3, pc, #496	; (adr r3, 800a5a8 <__ieee754_pow+0x708>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	460d      	mov	r5, r1
 800a3be:	f7f6 f91b 	bl	80005f8 <__aeabi_dmul>
 800a3c2:	a37b      	add	r3, pc, #492	; (adr r3, 800a5b0 <__ieee754_pow+0x710>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f5 ff60 	bl	800028c <__adddf3>
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	462b      	mov	r3, r5
 800a3d0:	f7f6 f912 	bl	80005f8 <__aeabi_dmul>
 800a3d4:	a378      	add	r3, pc, #480	; (adr r3, 800a5b8 <__ieee754_pow+0x718>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f7f5 ff57 	bl	800028c <__adddf3>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	f7f6 f909 	bl	80005f8 <__aeabi_dmul>
 800a3e6:	a376      	add	r3, pc, #472	; (adr r3, 800a5c0 <__ieee754_pow+0x720>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f5 ff4e 	bl	800028c <__adddf3>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f7f6 f900 	bl	80005f8 <__aeabi_dmul>
 800a3f8:	a373      	add	r3, pc, #460	; (adr r3, 800a5c8 <__ieee754_pow+0x728>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f5 ff45 	bl	800028c <__adddf3>
 800a402:	4622      	mov	r2, r4
 800a404:	462b      	mov	r3, r5
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	a371      	add	r3, pc, #452	; (adr r3, 800a5d0 <__ieee754_pow+0x730>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f7f5 ff3c 	bl	800028c <__adddf3>
 800a414:	4622      	mov	r2, r4
 800a416:	4606      	mov	r6, r0
 800a418:	460f      	mov	r7, r1
 800a41a:	462b      	mov	r3, r5
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f6 f8ea 	bl	80005f8 <__aeabi_dmul>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4630      	mov	r0, r6
 800a42a:	4639      	mov	r1, r7
 800a42c:	f7f6 f8e4 	bl	80005f8 <__aeabi_dmul>
 800a430:	4642      	mov	r2, r8
 800a432:	4604      	mov	r4, r0
 800a434:	460d      	mov	r5, r1
 800a436:	464b      	mov	r3, r9
 800a438:	ec51 0b18 	vmov	r0, r1, d8
 800a43c:	f7f5 ff26 	bl	800028c <__adddf3>
 800a440:	ec53 2b19 	vmov	r2, r3, d9
 800a444:	f7f6 f8d8 	bl	80005f8 <__aeabi_dmul>
 800a448:	4622      	mov	r2, r4
 800a44a:	462b      	mov	r3, r5
 800a44c:	f7f5 ff1e 	bl	800028c <__adddf3>
 800a450:	4642      	mov	r2, r8
 800a452:	4682      	mov	sl, r0
 800a454:	468b      	mov	fp, r1
 800a456:	464b      	mov	r3, r9
 800a458:	4640      	mov	r0, r8
 800a45a:	4649      	mov	r1, r9
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	4b6b      	ldr	r3, [pc, #428]	; (800a610 <__ieee754_pow+0x770>)
 800a462:	2200      	movs	r2, #0
 800a464:	4606      	mov	r6, r0
 800a466:	460f      	mov	r7, r1
 800a468:	f7f5 ff10 	bl	800028c <__adddf3>
 800a46c:	4652      	mov	r2, sl
 800a46e:	465b      	mov	r3, fp
 800a470:	f7f5 ff0c 	bl	800028c <__adddf3>
 800a474:	2000      	movs	r0, #0
 800a476:	4604      	mov	r4, r0
 800a478:	460d      	mov	r5, r1
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4640      	mov	r0, r8
 800a480:	4649      	mov	r1, r9
 800a482:	f7f6 f8b9 	bl	80005f8 <__aeabi_dmul>
 800a486:	4b62      	ldr	r3, [pc, #392]	; (800a610 <__ieee754_pow+0x770>)
 800a488:	4680      	mov	r8, r0
 800a48a:	4689      	mov	r9, r1
 800a48c:	2200      	movs	r2, #0
 800a48e:	4620      	mov	r0, r4
 800a490:	4629      	mov	r1, r5
 800a492:	f7f5 fef9 	bl	8000288 <__aeabi_dsub>
 800a496:	4632      	mov	r2, r6
 800a498:	463b      	mov	r3, r7
 800a49a:	f7f5 fef5 	bl	8000288 <__aeabi_dsub>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	4659      	mov	r1, fp
 800a4a6:	f7f5 feef 	bl	8000288 <__aeabi_dsub>
 800a4aa:	ec53 2b18 	vmov	r2, r3, d8
 800a4ae:	f7f6 f8a3 	bl	80005f8 <__aeabi_dmul>
 800a4b2:	4622      	mov	r2, r4
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	460f      	mov	r7, r1
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	ec51 0b19 	vmov	r0, r1, d9
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	f7f5 fedf 	bl	800028c <__adddf3>
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	460f      	mov	r7, r1
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f5 fed7 	bl	800028c <__adddf3>
 800a4de:	a33e      	add	r3, pc, #248	; (adr r3, 800a5d8 <__ieee754_pow+0x738>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	f7f6 f885 	bl	80005f8 <__aeabi_dmul>
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	ec41 0b18 	vmov	d8, r0, r1
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7f5 fec5 	bl	8000288 <__aeabi_dsub>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4630      	mov	r0, r6
 800a504:	4639      	mov	r1, r7
 800a506:	f7f5 febf 	bl	8000288 <__aeabi_dsub>
 800a50a:	a335      	add	r3, pc, #212	; (adr r3, 800a5e0 <__ieee754_pow+0x740>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f7f6 f872 	bl	80005f8 <__aeabi_dmul>
 800a514:	a334      	add	r3, pc, #208	; (adr r3, 800a5e8 <__ieee754_pow+0x748>)
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	4606      	mov	r6, r0
 800a51c:	460f      	mov	r7, r1
 800a51e:	4620      	mov	r0, r4
 800a520:	4629      	mov	r1, r5
 800a522:	f7f6 f869 	bl	80005f8 <__aeabi_dmul>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f5 fead 	bl	800028c <__adddf3>
 800a532:	9a07      	ldr	r2, [sp, #28]
 800a534:	4b37      	ldr	r3, [pc, #220]	; (800a614 <__ieee754_pow+0x774>)
 800a536:	4413      	add	r3, r2
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	f7f5 fea6 	bl	800028c <__adddf3>
 800a540:	4682      	mov	sl, r0
 800a542:	9805      	ldr	r0, [sp, #20]
 800a544:	468b      	mov	fp, r1
 800a546:	f7f5 ffed 	bl	8000524 <__aeabi_i2d>
 800a54a:	9a07      	ldr	r2, [sp, #28]
 800a54c:	4b32      	ldr	r3, [pc, #200]	; (800a618 <__ieee754_pow+0x778>)
 800a54e:	4413      	add	r3, r2
 800a550:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a554:	4606      	mov	r6, r0
 800a556:	460f      	mov	r7, r1
 800a558:	4652      	mov	r2, sl
 800a55a:	465b      	mov	r3, fp
 800a55c:	ec51 0b18 	vmov	r0, r1, d8
 800a560:	f7f5 fe94 	bl	800028c <__adddf3>
 800a564:	4642      	mov	r2, r8
 800a566:	464b      	mov	r3, r9
 800a568:	f7f5 fe90 	bl	800028c <__adddf3>
 800a56c:	4632      	mov	r2, r6
 800a56e:	463b      	mov	r3, r7
 800a570:	f7f5 fe8c 	bl	800028c <__adddf3>
 800a574:	2000      	movs	r0, #0
 800a576:	4632      	mov	r2, r6
 800a578:	463b      	mov	r3, r7
 800a57a:	4604      	mov	r4, r0
 800a57c:	460d      	mov	r5, r1
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	4642      	mov	r2, r8
 800a584:	464b      	mov	r3, r9
 800a586:	f7f5 fe7f 	bl	8000288 <__aeabi_dsub>
 800a58a:	ec53 2b18 	vmov	r2, r3, d8
 800a58e:	f7f5 fe7b 	bl	8000288 <__aeabi_dsub>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4650      	mov	r0, sl
 800a598:	4659      	mov	r1, fp
 800a59a:	e610      	b.n	800a1be <__ieee754_pow+0x31e>
 800a59c:	2401      	movs	r4, #1
 800a59e:	e6a1      	b.n	800a2e4 <__ieee754_pow+0x444>
 800a5a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a5f0 <__ieee754_pow+0x750>
 800a5a4:	e617      	b.n	800a1d6 <__ieee754_pow+0x336>
 800a5a6:	bf00      	nop
 800a5a8:	4a454eef 	.word	0x4a454eef
 800a5ac:	3fca7e28 	.word	0x3fca7e28
 800a5b0:	93c9db65 	.word	0x93c9db65
 800a5b4:	3fcd864a 	.word	0x3fcd864a
 800a5b8:	a91d4101 	.word	0xa91d4101
 800a5bc:	3fd17460 	.word	0x3fd17460
 800a5c0:	518f264d 	.word	0x518f264d
 800a5c4:	3fd55555 	.word	0x3fd55555
 800a5c8:	db6fabff 	.word	0xdb6fabff
 800a5cc:	3fdb6db6 	.word	0x3fdb6db6
 800a5d0:	33333303 	.word	0x33333303
 800a5d4:	3fe33333 	.word	0x3fe33333
 800a5d8:	e0000000 	.word	0xe0000000
 800a5dc:	3feec709 	.word	0x3feec709
 800a5e0:	dc3a03fd 	.word	0xdc3a03fd
 800a5e4:	3feec709 	.word	0x3feec709
 800a5e8:	145b01f5 	.word	0x145b01f5
 800a5ec:	be3e2fe0 	.word	0xbe3e2fe0
 800a5f0:	00000000 	.word	0x00000000
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	7ff00000 	.word	0x7ff00000
 800a5fc:	43400000 	.word	0x43400000
 800a600:	0003988e 	.word	0x0003988e
 800a604:	000bb679 	.word	0x000bb679
 800a608:	0800bb60 	.word	0x0800bb60
 800a60c:	3ff00000 	.word	0x3ff00000
 800a610:	40080000 	.word	0x40080000
 800a614:	0800bb80 	.word	0x0800bb80
 800a618:	0800bb70 	.word	0x0800bb70
 800a61c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a8f4 <__ieee754_pow+0xa54>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f5 fe31 	bl	800028c <__adddf3>
 800a62a:	4622      	mov	r2, r4
 800a62c:	ec41 0b1a 	vmov	d10, r0, r1
 800a630:	462b      	mov	r3, r5
 800a632:	4630      	mov	r0, r6
 800a634:	4639      	mov	r1, r7
 800a636:	f7f5 fe27 	bl	8000288 <__aeabi_dsub>
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	ec51 0b1a 	vmov	r0, r1, d10
 800a642:	f7f6 fa69 	bl	8000b18 <__aeabi_dcmpgt>
 800a646:	2800      	cmp	r0, #0
 800a648:	f47f ae04 	bne.w	800a254 <__ieee754_pow+0x3b4>
 800a64c:	4aa4      	ldr	r2, [pc, #656]	; (800a8e0 <__ieee754_pow+0xa40>)
 800a64e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a652:	4293      	cmp	r3, r2
 800a654:	f340 8108 	ble.w	800a868 <__ieee754_pow+0x9c8>
 800a658:	151b      	asrs	r3, r3, #20
 800a65a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a65e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a662:	fa4a f303 	asr.w	r3, sl, r3
 800a666:	445b      	add	r3, fp
 800a668:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a66c:	4e9d      	ldr	r6, [pc, #628]	; (800a8e4 <__ieee754_pow+0xa44>)
 800a66e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a672:	4116      	asrs	r6, r2
 800a674:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a678:	2000      	movs	r0, #0
 800a67a:	ea23 0106 	bic.w	r1, r3, r6
 800a67e:	f1c2 0214 	rsb	r2, r2, #20
 800a682:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a686:	fa4a fa02 	asr.w	sl, sl, r2
 800a68a:	f1bb 0f00 	cmp.w	fp, #0
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	bfb8      	it	lt
 800a698:	f1ca 0a00 	rsblt	sl, sl, #0
 800a69c:	f7f5 fdf4 	bl	8000288 <__aeabi_dsub>
 800a6a0:	ec41 0b19 	vmov	d9, r0, r1
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	ec51 0b19 	vmov	r0, r1, d9
 800a6ac:	f7f5 fdee 	bl	800028c <__adddf3>
 800a6b0:	a37b      	add	r3, pc, #492	; (adr r3, 800a8a0 <__ieee754_pow+0xa00>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	f7f5 ff9c 	bl	80005f8 <__aeabi_dmul>
 800a6c0:	ec53 2b19 	vmov	r2, r3, d9
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	f7f5 fddc 	bl	8000288 <__aeabi_dsub>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	4649      	mov	r1, r9
 800a6d8:	f7f5 fdd6 	bl	8000288 <__aeabi_dsub>
 800a6dc:	a372      	add	r3, pc, #456	; (adr r3, 800a8a8 <__ieee754_pow+0xa08>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	a372      	add	r3, pc, #456	; (adr r3, 800a8b0 <__ieee754_pow+0xa10>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	4680      	mov	r8, r0
 800a6ee:	4689      	mov	r9, r1
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	4649      	mov	r1, r9
 800a700:	f7f5 fdc4 	bl	800028c <__adddf3>
 800a704:	4604      	mov	r4, r0
 800a706:	460d      	mov	r5, r1
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f5 fdbc 	bl	800028c <__adddf3>
 800a714:	4632      	mov	r2, r6
 800a716:	463b      	mov	r3, r7
 800a718:	4680      	mov	r8, r0
 800a71a:	4689      	mov	r9, r1
 800a71c:	f7f5 fdb4 	bl	8000288 <__aeabi_dsub>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4620      	mov	r0, r4
 800a726:	4629      	mov	r1, r5
 800a728:	f7f5 fdae 	bl	8000288 <__aeabi_dsub>
 800a72c:	4642      	mov	r2, r8
 800a72e:	4606      	mov	r6, r0
 800a730:	460f      	mov	r7, r1
 800a732:	464b      	mov	r3, r9
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f5 ff5e 	bl	80005f8 <__aeabi_dmul>
 800a73c:	a35e      	add	r3, pc, #376	; (adr r3, 800a8b8 <__ieee754_pow+0xa18>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	4604      	mov	r4, r0
 800a744:	460d      	mov	r5, r1
 800a746:	f7f5 ff57 	bl	80005f8 <__aeabi_dmul>
 800a74a:	a35d      	add	r3, pc, #372	; (adr r3, 800a8c0 <__ieee754_pow+0xa20>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f7f5 fd9a 	bl	8000288 <__aeabi_dsub>
 800a754:	4622      	mov	r2, r4
 800a756:	462b      	mov	r3, r5
 800a758:	f7f5 ff4e 	bl	80005f8 <__aeabi_dmul>
 800a75c:	a35a      	add	r3, pc, #360	; (adr r3, 800a8c8 <__ieee754_pow+0xa28>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 fd93 	bl	800028c <__adddf3>
 800a766:	4622      	mov	r2, r4
 800a768:	462b      	mov	r3, r5
 800a76a:	f7f5 ff45 	bl	80005f8 <__aeabi_dmul>
 800a76e:	a358      	add	r3, pc, #352	; (adr r3, 800a8d0 <__ieee754_pow+0xa30>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fd88 	bl	8000288 <__aeabi_dsub>
 800a778:	4622      	mov	r2, r4
 800a77a:	462b      	mov	r3, r5
 800a77c:	f7f5 ff3c 	bl	80005f8 <__aeabi_dmul>
 800a780:	a355      	add	r3, pc, #340	; (adr r3, 800a8d8 <__ieee754_pow+0xa38>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fd81 	bl	800028c <__adddf3>
 800a78a:	4622      	mov	r2, r4
 800a78c:	462b      	mov	r3, r5
 800a78e:	f7f5 ff33 	bl	80005f8 <__aeabi_dmul>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4640      	mov	r0, r8
 800a798:	4649      	mov	r1, r9
 800a79a:	f7f5 fd75 	bl	8000288 <__aeabi_dsub>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	460d      	mov	r5, r1
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	f7f5 ff25 	bl	80005f8 <__aeabi_dmul>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	ec41 0b19 	vmov	d9, r0, r1
 800a7b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f7f5 fd64 	bl	8000288 <__aeabi_dsub>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	ec51 0b19 	vmov	r0, r1, d9
 800a7c8:	f7f6 f840 	bl	800084c <__aeabi_ddiv>
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	463b      	mov	r3, r7
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	4632      	mov	r2, r6
 800a7de:	463b      	mov	r3, r7
 800a7e0:	f7f5 fd54 	bl	800028c <__adddf3>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	f7f5 fd4c 	bl	8000288 <__aeabi_dsub>
 800a7f0:	4642      	mov	r2, r8
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	f7f5 fd48 	bl	8000288 <__aeabi_dsub>
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	493a      	ldr	r1, [pc, #232]	; (800a8e8 <__ieee754_pow+0xa48>)
 800a7fe:	2000      	movs	r0, #0
 800a800:	f7f5 fd42 	bl	8000288 <__aeabi_dsub>
 800a804:	ec41 0b10 	vmov	d0, r0, r1
 800a808:	ee10 3a90 	vmov	r3, s1
 800a80c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a814:	da2b      	bge.n	800a86e <__ieee754_pow+0x9ce>
 800a816:	4650      	mov	r0, sl
 800a818:	f001 f8d6 	bl	800b9c8 <scalbn>
 800a81c:	ec51 0b10 	vmov	r0, r1, d0
 800a820:	ec53 2b18 	vmov	r2, r3, d8
 800a824:	f7ff bbed 	b.w	800a002 <__ieee754_pow+0x162>
 800a828:	4b30      	ldr	r3, [pc, #192]	; (800a8ec <__ieee754_pow+0xa4c>)
 800a82a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a82e:	429e      	cmp	r6, r3
 800a830:	f77f af0c 	ble.w	800a64c <__ieee754_pow+0x7ac>
 800a834:	4b2e      	ldr	r3, [pc, #184]	; (800a8f0 <__ieee754_pow+0xa50>)
 800a836:	440b      	add	r3, r1
 800a838:	4303      	orrs	r3, r0
 800a83a:	d009      	beq.n	800a850 <__ieee754_pow+0x9b0>
 800a83c:	ec51 0b18 	vmov	r0, r1, d8
 800a840:	2200      	movs	r2, #0
 800a842:	2300      	movs	r3, #0
 800a844:	f7f6 f94a 	bl	8000adc <__aeabi_dcmplt>
 800a848:	3800      	subs	r0, #0
 800a84a:	bf18      	it	ne
 800a84c:	2001      	movne	r0, #1
 800a84e:	e447      	b.n	800a0e0 <__ieee754_pow+0x240>
 800a850:	4622      	mov	r2, r4
 800a852:	462b      	mov	r3, r5
 800a854:	f7f5 fd18 	bl	8000288 <__aeabi_dsub>
 800a858:	4642      	mov	r2, r8
 800a85a:	464b      	mov	r3, r9
 800a85c:	f7f6 f952 	bl	8000b04 <__aeabi_dcmpge>
 800a860:	2800      	cmp	r0, #0
 800a862:	f43f aef3 	beq.w	800a64c <__ieee754_pow+0x7ac>
 800a866:	e7e9      	b.n	800a83c <__ieee754_pow+0x99c>
 800a868:	f04f 0a00 	mov.w	sl, #0
 800a86c:	e71a      	b.n	800a6a4 <__ieee754_pow+0x804>
 800a86e:	ec51 0b10 	vmov	r0, r1, d0
 800a872:	4619      	mov	r1, r3
 800a874:	e7d4      	b.n	800a820 <__ieee754_pow+0x980>
 800a876:	491c      	ldr	r1, [pc, #112]	; (800a8e8 <__ieee754_pow+0xa48>)
 800a878:	2000      	movs	r0, #0
 800a87a:	f7ff bb30 	b.w	8009ede <__ieee754_pow+0x3e>
 800a87e:	2000      	movs	r0, #0
 800a880:	2100      	movs	r1, #0
 800a882:	f7ff bb2c 	b.w	8009ede <__ieee754_pow+0x3e>
 800a886:	4630      	mov	r0, r6
 800a888:	4639      	mov	r1, r7
 800a88a:	f7ff bb28 	b.w	8009ede <__ieee754_pow+0x3e>
 800a88e:	9204      	str	r2, [sp, #16]
 800a890:	f7ff bb7a 	b.w	8009f88 <__ieee754_pow+0xe8>
 800a894:	2300      	movs	r3, #0
 800a896:	f7ff bb64 	b.w	8009f62 <__ieee754_pow+0xc2>
 800a89a:	bf00      	nop
 800a89c:	f3af 8000 	nop.w
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	3fe62e43 	.word	0x3fe62e43
 800a8a8:	fefa39ef 	.word	0xfefa39ef
 800a8ac:	3fe62e42 	.word	0x3fe62e42
 800a8b0:	0ca86c39 	.word	0x0ca86c39
 800a8b4:	be205c61 	.word	0xbe205c61
 800a8b8:	72bea4d0 	.word	0x72bea4d0
 800a8bc:	3e663769 	.word	0x3e663769
 800a8c0:	c5d26bf1 	.word	0xc5d26bf1
 800a8c4:	3ebbbd41 	.word	0x3ebbbd41
 800a8c8:	af25de2c 	.word	0xaf25de2c
 800a8cc:	3f11566a 	.word	0x3f11566a
 800a8d0:	16bebd93 	.word	0x16bebd93
 800a8d4:	3f66c16c 	.word	0x3f66c16c
 800a8d8:	5555553e 	.word	0x5555553e
 800a8dc:	3fc55555 	.word	0x3fc55555
 800a8e0:	3fe00000 	.word	0x3fe00000
 800a8e4:	000fffff 	.word	0x000fffff
 800a8e8:	3ff00000 	.word	0x3ff00000
 800a8ec:	4090cbff 	.word	0x4090cbff
 800a8f0:	3f6f3400 	.word	0x3f6f3400
 800a8f4:	652b82fe 	.word	0x652b82fe
 800a8f8:	3c971547 	.word	0x3c971547
 800a8fc:	00000000 	.word	0x00000000

0800a900 <__ieee754_rem_pio2>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	ed2d 8b02 	vpush	{d8}
 800a908:	ec55 4b10 	vmov	r4, r5, d0
 800a90c:	4bca      	ldr	r3, [pc, #808]	; (800ac38 <__ieee754_rem_pio2+0x338>)
 800a90e:	b08b      	sub	sp, #44	; 0x2c
 800a910:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a914:	4598      	cmp	r8, r3
 800a916:	4682      	mov	sl, r0
 800a918:	9502      	str	r5, [sp, #8]
 800a91a:	dc08      	bgt.n	800a92e <__ieee754_rem_pio2+0x2e>
 800a91c:	2200      	movs	r2, #0
 800a91e:	2300      	movs	r3, #0
 800a920:	ed80 0b00 	vstr	d0, [r0]
 800a924:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a928:	f04f 0b00 	mov.w	fp, #0
 800a92c:	e028      	b.n	800a980 <__ieee754_rem_pio2+0x80>
 800a92e:	4bc3      	ldr	r3, [pc, #780]	; (800ac3c <__ieee754_rem_pio2+0x33c>)
 800a930:	4598      	cmp	r8, r3
 800a932:	dc78      	bgt.n	800aa26 <__ieee754_rem_pio2+0x126>
 800a934:	9b02      	ldr	r3, [sp, #8]
 800a936:	4ec2      	ldr	r6, [pc, #776]	; (800ac40 <__ieee754_rem_pio2+0x340>)
 800a938:	2b00      	cmp	r3, #0
 800a93a:	ee10 0a10 	vmov	r0, s0
 800a93e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ac00 <__ieee754_rem_pio2+0x300>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	4629      	mov	r1, r5
 800a946:	dd39      	ble.n	800a9bc <__ieee754_rem_pio2+0xbc>
 800a948:	f7f5 fc9e 	bl	8000288 <__aeabi_dsub>
 800a94c:	45b0      	cmp	r8, r6
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	d01b      	beq.n	800a98c <__ieee754_rem_pio2+0x8c>
 800a954:	a3ac      	add	r3, pc, #688	; (adr r3, 800ac08 <__ieee754_rem_pio2+0x308>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc95 	bl	8000288 <__aeabi_dsub>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	e9ca 2300 	strd	r2, r3, [sl]
 800a966:	4620      	mov	r0, r4
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f5 fc8d 	bl	8000288 <__aeabi_dsub>
 800a96e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ac08 <__ieee754_rem_pio2+0x308>)
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	f7f5 fc88 	bl	8000288 <__aeabi_dsub>
 800a978:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a97c:	f04f 0b01 	mov.w	fp, #1
 800a980:	4658      	mov	r0, fp
 800a982:	b00b      	add	sp, #44	; 0x2c
 800a984:	ecbd 8b02 	vpop	{d8}
 800a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac10 <__ieee754_rem_pio2+0x310>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fc79 	bl	8000288 <__aeabi_dsub>
 800a996:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x318>)
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	f7f5 fc72 	bl	8000288 <__aeabi_dsub>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	e9ca 2300 	strd	r2, r3, [sl]
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f5 fc6a 	bl	8000288 <__aeabi_dsub>
 800a9b4:	a398      	add	r3, pc, #608	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x318>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	e7db      	b.n	800a974 <__ieee754_rem_pio2+0x74>
 800a9bc:	f7f5 fc66 	bl	800028c <__adddf3>
 800a9c0:	45b0      	cmp	r8, r6
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	d016      	beq.n	800a9f6 <__ieee754_rem_pio2+0xf6>
 800a9c8:	a38f      	add	r3, pc, #572	; (adr r3, 800ac08 <__ieee754_rem_pio2+0x308>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fc5d 	bl	800028c <__adddf3>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	e9ca 2300 	strd	r2, r3, [sl]
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	f7f5 fc53 	bl	8000288 <__aeabi_dsub>
 800a9e2:	a389      	add	r3, pc, #548	; (adr r3, 800ac08 <__ieee754_rem_pio2+0x308>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	f7f5 fc50 	bl	800028c <__adddf3>
 800a9ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a9f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9f4:	e7c4      	b.n	800a980 <__ieee754_rem_pio2+0x80>
 800a9f6:	a386      	add	r3, pc, #536	; (adr r3, 800ac10 <__ieee754_rem_pio2+0x310>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 fc46 	bl	800028c <__adddf3>
 800aa00:	a385      	add	r3, pc, #532	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x318>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	4604      	mov	r4, r0
 800aa08:	460d      	mov	r5, r1
 800aa0a:	f7f5 fc3f 	bl	800028c <__adddf3>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	e9ca 2300 	strd	r2, r3, [sl]
 800aa16:	4620      	mov	r0, r4
 800aa18:	4629      	mov	r1, r5
 800aa1a:	f7f5 fc35 	bl	8000288 <__aeabi_dsub>
 800aa1e:	a37e      	add	r3, pc, #504	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x318>)
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	e7e0      	b.n	800a9e8 <__ieee754_rem_pio2+0xe8>
 800aa26:	4b87      	ldr	r3, [pc, #540]	; (800ac44 <__ieee754_rem_pio2+0x344>)
 800aa28:	4598      	cmp	r8, r3
 800aa2a:	f300 80d9 	bgt.w	800abe0 <__ieee754_rem_pio2+0x2e0>
 800aa2e:	f000 ff2d 	bl	800b88c <fabs>
 800aa32:	ec55 4b10 	vmov	r4, r5, d0
 800aa36:	ee10 0a10 	vmov	r0, s0
 800aa3a:	a379      	add	r3, pc, #484	; (adr r3, 800ac20 <__ieee754_rem_pio2+0x320>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	4629      	mov	r1, r5
 800aa42:	f7f5 fdd9 	bl	80005f8 <__aeabi_dmul>
 800aa46:	4b80      	ldr	r3, [pc, #512]	; (800ac48 <__ieee754_rem_pio2+0x348>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f7f5 fc1f 	bl	800028c <__adddf3>
 800aa4e:	f7f6 f883 	bl	8000b58 <__aeabi_d2iz>
 800aa52:	4683      	mov	fp, r0
 800aa54:	f7f5 fd66 	bl	8000524 <__aeabi_i2d>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	ec43 2b18 	vmov	d8, r2, r3
 800aa60:	a367      	add	r3, pc, #412	; (adr r3, 800ac00 <__ieee754_rem_pio2+0x300>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f7f5 fdc7 	bl	80005f8 <__aeabi_dmul>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4620      	mov	r0, r4
 800aa70:	4629      	mov	r1, r5
 800aa72:	f7f5 fc09 	bl	8000288 <__aeabi_dsub>
 800aa76:	a364      	add	r3, pc, #400	; (adr r3, 800ac08 <__ieee754_rem_pio2+0x308>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	460f      	mov	r7, r1
 800aa80:	ec51 0b18 	vmov	r0, r1, d8
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	f1bb 0f1f 	cmp.w	fp, #31
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	dc0d      	bgt.n	800aaae <__ieee754_rem_pio2+0x1ae>
 800aa92:	4b6e      	ldr	r3, [pc, #440]	; (800ac4c <__ieee754_rem_pio2+0x34c>)
 800aa94:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800aa98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9c:	4543      	cmp	r3, r8
 800aa9e:	d006      	beq.n	800aaae <__ieee754_rem_pio2+0x1ae>
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	462b      	mov	r3, r5
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	f7f5 fbee 	bl	8000288 <__aeabi_dsub>
 800aaac:	e00f      	b.n	800aace <__ieee754_rem_pio2+0x1ce>
 800aaae:	462b      	mov	r3, r5
 800aab0:	4622      	mov	r2, r4
 800aab2:	4630      	mov	r0, r6
 800aab4:	4639      	mov	r1, r7
 800aab6:	f7f5 fbe7 	bl	8000288 <__aeabi_dsub>
 800aaba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aabe:	9303      	str	r3, [sp, #12]
 800aac0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aac4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aac8:	f1b8 0f10 	cmp.w	r8, #16
 800aacc:	dc02      	bgt.n	800aad4 <__ieee754_rem_pio2+0x1d4>
 800aace:	e9ca 0100 	strd	r0, r1, [sl]
 800aad2:	e039      	b.n	800ab48 <__ieee754_rem_pio2+0x248>
 800aad4:	a34e      	add	r3, pc, #312	; (adr r3, 800ac10 <__ieee754_rem_pio2+0x310>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	ec51 0b18 	vmov	r0, r1, d8
 800aade:	f7f5 fd8b 	bl	80005f8 <__aeabi_dmul>
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4630      	mov	r0, r6
 800aaec:	4639      	mov	r1, r7
 800aaee:	f7f5 fbcb 	bl	8000288 <__aeabi_dsub>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4680      	mov	r8, r0
 800aaf8:	4689      	mov	r9, r1
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fbc3 	bl	8000288 <__aeabi_dsub>
 800ab02:	4622      	mov	r2, r4
 800ab04:	462b      	mov	r3, r5
 800ab06:	f7f5 fbbf 	bl	8000288 <__aeabi_dsub>
 800ab0a:	a343      	add	r3, pc, #268	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x318>)
 800ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	ec51 0b18 	vmov	r0, r1, d8
 800ab18:	f7f5 fd6e 	bl	80005f8 <__aeabi_dmul>
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	462b      	mov	r3, r5
 800ab20:	f7f5 fbb2 	bl	8000288 <__aeabi_dsub>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	4604      	mov	r4, r0
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	4649      	mov	r1, r9
 800ab30:	f7f5 fbaa 	bl	8000288 <__aeabi_dsub>
 800ab34:	9a03      	ldr	r2, [sp, #12]
 800ab36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b31      	cmp	r3, #49	; 0x31
 800ab3e:	dc24      	bgt.n	800ab8a <__ieee754_rem_pio2+0x28a>
 800ab40:	e9ca 0100 	strd	r0, r1, [sl]
 800ab44:	4646      	mov	r6, r8
 800ab46:	464f      	mov	r7, r9
 800ab48:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	4642      	mov	r2, r8
 800ab50:	464b      	mov	r3, r9
 800ab52:	4639      	mov	r1, r7
 800ab54:	f7f5 fb98 	bl	8000288 <__aeabi_dsub>
 800ab58:	462b      	mov	r3, r5
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	f7f5 fb94 	bl	8000288 <__aeabi_dsub>
 800ab60:	9b02      	ldr	r3, [sp, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab68:	f6bf af0a 	bge.w	800a980 <__ieee754_rem_pio2+0x80>
 800ab6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab70:	f8ca 3004 	str.w	r3, [sl, #4]
 800ab74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab78:	f8ca 8000 	str.w	r8, [sl]
 800ab7c:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab80:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab84:	f1cb 0b00 	rsb	fp, fp, #0
 800ab88:	e6fa      	b.n	800a980 <__ieee754_rem_pio2+0x80>
 800ab8a:	a327      	add	r3, pc, #156	; (adr r3, 800ac28 <__ieee754_rem_pio2+0x328>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	ec51 0b18 	vmov	r0, r1, d8
 800ab94:	f7f5 fd30 	bl	80005f8 <__aeabi_dmul>
 800ab98:	4604      	mov	r4, r0
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4640      	mov	r0, r8
 800aba2:	4649      	mov	r1, r9
 800aba4:	f7f5 fb70 	bl	8000288 <__aeabi_dsub>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4606      	mov	r6, r0
 800abae:	460f      	mov	r7, r1
 800abb0:	4640      	mov	r0, r8
 800abb2:	4649      	mov	r1, r9
 800abb4:	f7f5 fb68 	bl	8000288 <__aeabi_dsub>
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fb64 	bl	8000288 <__aeabi_dsub>
 800abc0:	a31b      	add	r3, pc, #108	; (adr r3, 800ac30 <__ieee754_rem_pio2+0x330>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	4604      	mov	r4, r0
 800abc8:	460d      	mov	r5, r1
 800abca:	ec51 0b18 	vmov	r0, r1, d8
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	4622      	mov	r2, r4
 800abd4:	462b      	mov	r3, r5
 800abd6:	f7f5 fb57 	bl	8000288 <__aeabi_dsub>
 800abda:	4604      	mov	r4, r0
 800abdc:	460d      	mov	r5, r1
 800abde:	e75f      	b.n	800aaa0 <__ieee754_rem_pio2+0x1a0>
 800abe0:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <__ieee754_rem_pio2+0x350>)
 800abe2:	4598      	cmp	r8, r3
 800abe4:	dd36      	ble.n	800ac54 <__ieee754_rem_pio2+0x354>
 800abe6:	ee10 2a10 	vmov	r2, s0
 800abea:	462b      	mov	r3, r5
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f7f5 fb4a 	bl	8000288 <__aeabi_dsub>
 800abf4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800abf8:	e9ca 0100 	strd	r0, r1, [sl]
 800abfc:	e694      	b.n	800a928 <__ieee754_rem_pio2+0x28>
 800abfe:	bf00      	nop
 800ac00:	54400000 	.word	0x54400000
 800ac04:	3ff921fb 	.word	0x3ff921fb
 800ac08:	1a626331 	.word	0x1a626331
 800ac0c:	3dd0b461 	.word	0x3dd0b461
 800ac10:	1a600000 	.word	0x1a600000
 800ac14:	3dd0b461 	.word	0x3dd0b461
 800ac18:	2e037073 	.word	0x2e037073
 800ac1c:	3ba3198a 	.word	0x3ba3198a
 800ac20:	6dc9c883 	.word	0x6dc9c883
 800ac24:	3fe45f30 	.word	0x3fe45f30
 800ac28:	2e000000 	.word	0x2e000000
 800ac2c:	3ba3198a 	.word	0x3ba3198a
 800ac30:	252049c1 	.word	0x252049c1
 800ac34:	397b839a 	.word	0x397b839a
 800ac38:	3fe921fb 	.word	0x3fe921fb
 800ac3c:	4002d97b 	.word	0x4002d97b
 800ac40:	3ff921fb 	.word	0x3ff921fb
 800ac44:	413921fb 	.word	0x413921fb
 800ac48:	3fe00000 	.word	0x3fe00000
 800ac4c:	0800bb90 	.word	0x0800bb90
 800ac50:	7fefffff 	.word	0x7fefffff
 800ac54:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ac58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ac5c:	ee10 0a10 	vmov	r0, s0
 800ac60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ac64:	ee10 6a10 	vmov	r6, s0
 800ac68:	460f      	mov	r7, r1
 800ac6a:	f7f5 ff75 	bl	8000b58 <__aeabi_d2iz>
 800ac6e:	f7f5 fc59 	bl	8000524 <__aeabi_i2d>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	4630      	mov	r0, r6
 800ac78:	4639      	mov	r1, r7
 800ac7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac7e:	f7f5 fb03 	bl	8000288 <__aeabi_dsub>
 800ac82:	4b23      	ldr	r3, [pc, #140]	; (800ad10 <__ieee754_rem_pio2+0x410>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	f7f5 fcb7 	bl	80005f8 <__aeabi_dmul>
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	f7f5 ff63 	bl	8000b58 <__aeabi_d2iz>
 800ac92:	f7f5 fc47 	bl	8000524 <__aeabi_i2d>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aca2:	f7f5 faf1 	bl	8000288 <__aeabi_dsub>
 800aca6:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <__ieee754_rem_pio2+0x410>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	f7f5 fca5 	bl	80005f8 <__aeabi_dmul>
 800acae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acb2:	ad04      	add	r5, sp, #16
 800acb4:	f04f 0803 	mov.w	r8, #3
 800acb8:	46a9      	mov	r9, r5
 800acba:	2600      	movs	r6, #0
 800acbc:	2700      	movs	r7, #0
 800acbe:	4632      	mov	r2, r6
 800acc0:	463b      	mov	r3, r7
 800acc2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800acc6:	46c3      	mov	fp, r8
 800acc8:	3d08      	subs	r5, #8
 800acca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800acce:	f7f5 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d1f3      	bne.n	800acbe <__ieee754_rem_pio2+0x3be>
 800acd6:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <__ieee754_rem_pio2+0x414>)
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	2302      	movs	r3, #2
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	4622      	mov	r2, r4
 800ace0:	465b      	mov	r3, fp
 800ace2:	4651      	mov	r1, sl
 800ace4:	4648      	mov	r0, r9
 800ace6:	f000 f993 	bl	800b010 <__kernel_rem_pio2>
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	4683      	mov	fp, r0
 800acf0:	f6bf ae46 	bge.w	800a980 <__ieee754_rem_pio2+0x80>
 800acf4:	e9da 2100 	ldrd	r2, r1, [sl]
 800acf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acfc:	e9ca 2300 	strd	r2, r3, [sl]
 800ad00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ad04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ad0c:	e73a      	b.n	800ab84 <__ieee754_rem_pio2+0x284>
 800ad0e:	bf00      	nop
 800ad10:	41700000 	.word	0x41700000
 800ad14:	0800bc10 	.word	0x0800bc10

0800ad18 <__ieee754_sqrt>:
 800ad18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	ec55 4b10 	vmov	r4, r5, d0
 800ad20:	4e55      	ldr	r6, [pc, #340]	; (800ae78 <__ieee754_sqrt+0x160>)
 800ad22:	43ae      	bics	r6, r5
 800ad24:	ee10 0a10 	vmov	r0, s0
 800ad28:	ee10 3a10 	vmov	r3, s0
 800ad2c:	462a      	mov	r2, r5
 800ad2e:	4629      	mov	r1, r5
 800ad30:	d110      	bne.n	800ad54 <__ieee754_sqrt+0x3c>
 800ad32:	ee10 2a10 	vmov	r2, s0
 800ad36:	462b      	mov	r3, r5
 800ad38:	f7f5 fc5e 	bl	80005f8 <__aeabi_dmul>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4620      	mov	r0, r4
 800ad42:	4629      	mov	r1, r5
 800ad44:	f7f5 faa2 	bl	800028c <__adddf3>
 800ad48:	4604      	mov	r4, r0
 800ad4a:	460d      	mov	r5, r1
 800ad4c:	ec45 4b10 	vmov	d0, r4, r5
 800ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad54:	2d00      	cmp	r5, #0
 800ad56:	dc10      	bgt.n	800ad7a <__ieee754_sqrt+0x62>
 800ad58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad5c:	4330      	orrs	r0, r6
 800ad5e:	d0f5      	beq.n	800ad4c <__ieee754_sqrt+0x34>
 800ad60:	b15d      	cbz	r5, 800ad7a <__ieee754_sqrt+0x62>
 800ad62:	ee10 2a10 	vmov	r2, s0
 800ad66:	462b      	mov	r3, r5
 800ad68:	ee10 0a10 	vmov	r0, s0
 800ad6c:	f7f5 fa8c 	bl	8000288 <__aeabi_dsub>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	f7f5 fd6a 	bl	800084c <__aeabi_ddiv>
 800ad78:	e7e6      	b.n	800ad48 <__ieee754_sqrt+0x30>
 800ad7a:	1512      	asrs	r2, r2, #20
 800ad7c:	d074      	beq.n	800ae68 <__ieee754_sqrt+0x150>
 800ad7e:	07d4      	lsls	r4, r2, #31
 800ad80:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ad84:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ad88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ad8c:	bf5e      	ittt	pl
 800ad8e:	0fda      	lsrpl	r2, r3, #31
 800ad90:	005b      	lslpl	r3, r3, #1
 800ad92:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ad96:	2400      	movs	r4, #0
 800ad98:	0fda      	lsrs	r2, r3, #31
 800ad9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ad9e:	107f      	asrs	r7, r7, #1
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	2516      	movs	r5, #22
 800ada4:	4620      	mov	r0, r4
 800ada6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800adaa:	1886      	adds	r6, r0, r2
 800adac:	428e      	cmp	r6, r1
 800adae:	bfde      	ittt	le
 800adb0:	1b89      	suble	r1, r1, r6
 800adb2:	18b0      	addle	r0, r6, r2
 800adb4:	18a4      	addle	r4, r4, r2
 800adb6:	0049      	lsls	r1, r1, #1
 800adb8:	3d01      	subs	r5, #1
 800adba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800adbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800adc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800adc6:	d1f0      	bne.n	800adaa <__ieee754_sqrt+0x92>
 800adc8:	462a      	mov	r2, r5
 800adca:	f04f 0e20 	mov.w	lr, #32
 800adce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800add2:	4281      	cmp	r1, r0
 800add4:	eb06 0c05 	add.w	ip, r6, r5
 800add8:	dc02      	bgt.n	800ade0 <__ieee754_sqrt+0xc8>
 800adda:	d113      	bne.n	800ae04 <__ieee754_sqrt+0xec>
 800addc:	459c      	cmp	ip, r3
 800adde:	d811      	bhi.n	800ae04 <__ieee754_sqrt+0xec>
 800ade0:	f1bc 0f00 	cmp.w	ip, #0
 800ade4:	eb0c 0506 	add.w	r5, ip, r6
 800ade8:	da43      	bge.n	800ae72 <__ieee754_sqrt+0x15a>
 800adea:	2d00      	cmp	r5, #0
 800adec:	db41      	blt.n	800ae72 <__ieee754_sqrt+0x15a>
 800adee:	f100 0801 	add.w	r8, r0, #1
 800adf2:	1a09      	subs	r1, r1, r0
 800adf4:	459c      	cmp	ip, r3
 800adf6:	bf88      	it	hi
 800adf8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800adfc:	eba3 030c 	sub.w	r3, r3, ip
 800ae00:	4432      	add	r2, r6
 800ae02:	4640      	mov	r0, r8
 800ae04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ae08:	f1be 0e01 	subs.w	lr, lr, #1
 800ae0c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ae10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae18:	d1db      	bne.n	800add2 <__ieee754_sqrt+0xba>
 800ae1a:	430b      	orrs	r3, r1
 800ae1c:	d006      	beq.n	800ae2c <__ieee754_sqrt+0x114>
 800ae1e:	1c50      	adds	r0, r2, #1
 800ae20:	bf13      	iteet	ne
 800ae22:	3201      	addne	r2, #1
 800ae24:	3401      	addeq	r4, #1
 800ae26:	4672      	moveq	r2, lr
 800ae28:	f022 0201 	bicne.w	r2, r2, #1
 800ae2c:	1063      	asrs	r3, r4, #1
 800ae2e:	0852      	lsrs	r2, r2, #1
 800ae30:	07e1      	lsls	r1, r4, #31
 800ae32:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ae36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ae3a:	bf48      	it	mi
 800ae3c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ae40:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ae44:	4614      	mov	r4, r2
 800ae46:	e781      	b.n	800ad4c <__ieee754_sqrt+0x34>
 800ae48:	0ad9      	lsrs	r1, r3, #11
 800ae4a:	3815      	subs	r0, #21
 800ae4c:	055b      	lsls	r3, r3, #21
 800ae4e:	2900      	cmp	r1, #0
 800ae50:	d0fa      	beq.n	800ae48 <__ieee754_sqrt+0x130>
 800ae52:	02cd      	lsls	r5, r1, #11
 800ae54:	d50a      	bpl.n	800ae6c <__ieee754_sqrt+0x154>
 800ae56:	f1c2 0420 	rsb	r4, r2, #32
 800ae5a:	fa23 f404 	lsr.w	r4, r3, r4
 800ae5e:	1e55      	subs	r5, r2, #1
 800ae60:	4093      	lsls	r3, r2
 800ae62:	4321      	orrs	r1, r4
 800ae64:	1b42      	subs	r2, r0, r5
 800ae66:	e78a      	b.n	800ad7e <__ieee754_sqrt+0x66>
 800ae68:	4610      	mov	r0, r2
 800ae6a:	e7f0      	b.n	800ae4e <__ieee754_sqrt+0x136>
 800ae6c:	0049      	lsls	r1, r1, #1
 800ae6e:	3201      	adds	r2, #1
 800ae70:	e7ef      	b.n	800ae52 <__ieee754_sqrt+0x13a>
 800ae72:	4680      	mov	r8, r0
 800ae74:	e7bd      	b.n	800adf2 <__ieee754_sqrt+0xda>
 800ae76:	bf00      	nop
 800ae78:	7ff00000 	.word	0x7ff00000
 800ae7c:	00000000 	.word	0x00000000

0800ae80 <__kernel_cos>:
 800ae80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	ec57 6b10 	vmov	r6, r7, d0
 800ae88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ae8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ae90:	ed8d 1b00 	vstr	d1, [sp]
 800ae94:	da07      	bge.n	800aea6 <__kernel_cos+0x26>
 800ae96:	ee10 0a10 	vmov	r0, s0
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	f7f5 fe5c 	bl	8000b58 <__aeabi_d2iz>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	f000 8088 	beq.w	800afb6 <__kernel_cos+0x136>
 800aea6:	4632      	mov	r2, r6
 800aea8:	463b      	mov	r3, r7
 800aeaa:	4630      	mov	r0, r6
 800aeac:	4639      	mov	r1, r7
 800aeae:	f7f5 fba3 	bl	80005f8 <__aeabi_dmul>
 800aeb2:	4b51      	ldr	r3, [pc, #324]	; (800aff8 <__kernel_cos+0x178>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	460d      	mov	r5, r1
 800aeba:	f7f5 fb9d 	bl	80005f8 <__aeabi_dmul>
 800aebe:	a340      	add	r3, pc, #256	; (adr r3, 800afc0 <__kernel_cos+0x140>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	4682      	mov	sl, r0
 800aec6:	468b      	mov	fp, r1
 800aec8:	4620      	mov	r0, r4
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7f5 fb94 	bl	80005f8 <__aeabi_dmul>
 800aed0:	a33d      	add	r3, pc, #244	; (adr r3, 800afc8 <__kernel_cos+0x148>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	f7f5 f9d9 	bl	800028c <__adddf3>
 800aeda:	4622      	mov	r2, r4
 800aedc:	462b      	mov	r3, r5
 800aede:	f7f5 fb8b 	bl	80005f8 <__aeabi_dmul>
 800aee2:	a33b      	add	r3, pc, #236	; (adr r3, 800afd0 <__kernel_cos+0x150>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 f9ce 	bl	8000288 <__aeabi_dsub>
 800aeec:	4622      	mov	r2, r4
 800aeee:	462b      	mov	r3, r5
 800aef0:	f7f5 fb82 	bl	80005f8 <__aeabi_dmul>
 800aef4:	a338      	add	r3, pc, #224	; (adr r3, 800afd8 <__kernel_cos+0x158>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 f9c7 	bl	800028c <__adddf3>
 800aefe:	4622      	mov	r2, r4
 800af00:	462b      	mov	r3, r5
 800af02:	f7f5 fb79 	bl	80005f8 <__aeabi_dmul>
 800af06:	a336      	add	r3, pc, #216	; (adr r3, 800afe0 <__kernel_cos+0x160>)
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f7f5 f9bc 	bl	8000288 <__aeabi_dsub>
 800af10:	4622      	mov	r2, r4
 800af12:	462b      	mov	r3, r5
 800af14:	f7f5 fb70 	bl	80005f8 <__aeabi_dmul>
 800af18:	a333      	add	r3, pc, #204	; (adr r3, 800afe8 <__kernel_cos+0x168>)
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f7f5 f9b5 	bl	800028c <__adddf3>
 800af22:	4622      	mov	r2, r4
 800af24:	462b      	mov	r3, r5
 800af26:	f7f5 fb67 	bl	80005f8 <__aeabi_dmul>
 800af2a:	4622      	mov	r2, r4
 800af2c:	462b      	mov	r3, r5
 800af2e:	f7f5 fb63 	bl	80005f8 <__aeabi_dmul>
 800af32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af36:	4604      	mov	r4, r0
 800af38:	460d      	mov	r5, r1
 800af3a:	4630      	mov	r0, r6
 800af3c:	4639      	mov	r1, r7
 800af3e:	f7f5 fb5b 	bl	80005f8 <__aeabi_dmul>
 800af42:	460b      	mov	r3, r1
 800af44:	4602      	mov	r2, r0
 800af46:	4629      	mov	r1, r5
 800af48:	4620      	mov	r0, r4
 800af4a:	f7f5 f99d 	bl	8000288 <__aeabi_dsub>
 800af4e:	4b2b      	ldr	r3, [pc, #172]	; (800affc <__kernel_cos+0x17c>)
 800af50:	4598      	cmp	r8, r3
 800af52:	4606      	mov	r6, r0
 800af54:	460f      	mov	r7, r1
 800af56:	dc10      	bgt.n	800af7a <__kernel_cos+0xfa>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4650      	mov	r0, sl
 800af5e:	4659      	mov	r1, fp
 800af60:	f7f5 f992 	bl	8000288 <__aeabi_dsub>
 800af64:	460b      	mov	r3, r1
 800af66:	4926      	ldr	r1, [pc, #152]	; (800b000 <__kernel_cos+0x180>)
 800af68:	4602      	mov	r2, r0
 800af6a:	2000      	movs	r0, #0
 800af6c:	f7f5 f98c 	bl	8000288 <__aeabi_dsub>
 800af70:	ec41 0b10 	vmov	d0, r0, r1
 800af74:	b003      	add	sp, #12
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	4b22      	ldr	r3, [pc, #136]	; (800b004 <__kernel_cos+0x184>)
 800af7c:	4920      	ldr	r1, [pc, #128]	; (800b000 <__kernel_cos+0x180>)
 800af7e:	4598      	cmp	r8, r3
 800af80:	bfcc      	ite	gt
 800af82:	4d21      	ldrgt	r5, [pc, #132]	; (800b008 <__kernel_cos+0x188>)
 800af84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800af88:	2400      	movs	r4, #0
 800af8a:	4622      	mov	r2, r4
 800af8c:	462b      	mov	r3, r5
 800af8e:	2000      	movs	r0, #0
 800af90:	f7f5 f97a 	bl	8000288 <__aeabi_dsub>
 800af94:	4622      	mov	r2, r4
 800af96:	4680      	mov	r8, r0
 800af98:	4689      	mov	r9, r1
 800af9a:	462b      	mov	r3, r5
 800af9c:	4650      	mov	r0, sl
 800af9e:	4659      	mov	r1, fp
 800afa0:	f7f5 f972 	bl	8000288 <__aeabi_dsub>
 800afa4:	4632      	mov	r2, r6
 800afa6:	463b      	mov	r3, r7
 800afa8:	f7f5 f96e 	bl	8000288 <__aeabi_dsub>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4640      	mov	r0, r8
 800afb2:	4649      	mov	r1, r9
 800afb4:	e7da      	b.n	800af6c <__kernel_cos+0xec>
 800afb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800aff0 <__kernel_cos+0x170>
 800afba:	e7db      	b.n	800af74 <__kernel_cos+0xf4>
 800afbc:	f3af 8000 	nop.w
 800afc0:	be8838d4 	.word	0xbe8838d4
 800afc4:	bda8fae9 	.word	0xbda8fae9
 800afc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800afcc:	3e21ee9e 	.word	0x3e21ee9e
 800afd0:	809c52ad 	.word	0x809c52ad
 800afd4:	3e927e4f 	.word	0x3e927e4f
 800afd8:	19cb1590 	.word	0x19cb1590
 800afdc:	3efa01a0 	.word	0x3efa01a0
 800afe0:	16c15177 	.word	0x16c15177
 800afe4:	3f56c16c 	.word	0x3f56c16c
 800afe8:	5555554c 	.word	0x5555554c
 800afec:	3fa55555 	.word	0x3fa55555
 800aff0:	00000000 	.word	0x00000000
 800aff4:	3ff00000 	.word	0x3ff00000
 800aff8:	3fe00000 	.word	0x3fe00000
 800affc:	3fd33332 	.word	0x3fd33332
 800b000:	3ff00000 	.word	0x3ff00000
 800b004:	3fe90000 	.word	0x3fe90000
 800b008:	3fd20000 	.word	0x3fd20000
 800b00c:	00000000 	.word	0x00000000

0800b010 <__kernel_rem_pio2>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	ed2d 8b02 	vpush	{d8}
 800b018:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b01c:	f112 0f14 	cmn.w	r2, #20
 800b020:	9308      	str	r3, [sp, #32]
 800b022:	9101      	str	r1, [sp, #4]
 800b024:	4bc4      	ldr	r3, [pc, #784]	; (800b338 <__kernel_rem_pio2+0x328>)
 800b026:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b028:	900b      	str	r0, [sp, #44]	; 0x2c
 800b02a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b02e:	9302      	str	r3, [sp, #8]
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b036:	bfa8      	it	ge
 800b038:	1ed4      	subge	r4, r2, #3
 800b03a:	9306      	str	r3, [sp, #24]
 800b03c:	bfb2      	itee	lt
 800b03e:	2400      	movlt	r4, #0
 800b040:	2318      	movge	r3, #24
 800b042:	fb94 f4f3 	sdivge	r4, r4, r3
 800b046:	f06f 0317 	mvn.w	r3, #23
 800b04a:	fb04 3303 	mla	r3, r4, r3, r3
 800b04e:	eb03 0a02 	add.w	sl, r3, r2
 800b052:	9b02      	ldr	r3, [sp, #8]
 800b054:	9a06      	ldr	r2, [sp, #24]
 800b056:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b328 <__kernel_rem_pio2+0x318>
 800b05a:	eb03 0802 	add.w	r8, r3, r2
 800b05e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b060:	1aa7      	subs	r7, r4, r2
 800b062:	ae22      	add	r6, sp, #136	; 0x88
 800b064:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b068:	2500      	movs	r5, #0
 800b06a:	4545      	cmp	r5, r8
 800b06c:	dd13      	ble.n	800b096 <__kernel_rem_pio2+0x86>
 800b06e:	9b08      	ldr	r3, [sp, #32]
 800b070:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b328 <__kernel_rem_pio2+0x318>
 800b074:	aa22      	add	r2, sp, #136	; 0x88
 800b076:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b07a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b07e:	f04f 0800 	mov.w	r8, #0
 800b082:	9b02      	ldr	r3, [sp, #8]
 800b084:	4598      	cmp	r8, r3
 800b086:	dc2f      	bgt.n	800b0e8 <__kernel_rem_pio2+0xd8>
 800b088:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b08c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b090:	462f      	mov	r7, r5
 800b092:	2600      	movs	r6, #0
 800b094:	e01b      	b.n	800b0ce <__kernel_rem_pio2+0xbe>
 800b096:	42ef      	cmn	r7, r5
 800b098:	d407      	bmi.n	800b0aa <__kernel_rem_pio2+0x9a>
 800b09a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b09e:	f7f5 fa41 	bl	8000524 <__aeabi_i2d>
 800b0a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b0a6:	3501      	adds	r5, #1
 800b0a8:	e7df      	b.n	800b06a <__kernel_rem_pio2+0x5a>
 800b0aa:	ec51 0b18 	vmov	r0, r1, d8
 800b0ae:	e7f8      	b.n	800b0a2 <__kernel_rem_pio2+0x92>
 800b0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b0b8:	f7f5 fa9e 	bl	80005f8 <__aeabi_dmul>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c4:	f7f5 f8e2 	bl	800028c <__adddf3>
 800b0c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0cc:	3601      	adds	r6, #1
 800b0ce:	9b06      	ldr	r3, [sp, #24]
 800b0d0:	429e      	cmp	r6, r3
 800b0d2:	f1a7 0708 	sub.w	r7, r7, #8
 800b0d6:	ddeb      	ble.n	800b0b0 <__kernel_rem_pio2+0xa0>
 800b0d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b0dc:	f108 0801 	add.w	r8, r8, #1
 800b0e0:	ecab 7b02 	vstmia	fp!, {d7}
 800b0e4:	3508      	adds	r5, #8
 800b0e6:	e7cc      	b.n	800b082 <__kernel_rem_pio2+0x72>
 800b0e8:	9b02      	ldr	r3, [sp, #8]
 800b0ea:	aa0e      	add	r2, sp, #56	; 0x38
 800b0ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0f0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b0f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b0f8:	9c02      	ldr	r4, [sp, #8]
 800b0fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b0fc:	00e3      	lsls	r3, r4, #3
 800b0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b100:	ab9a      	add	r3, sp, #616	; 0x268
 800b102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b106:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b10a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b10e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b110:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b114:	46c3      	mov	fp, r8
 800b116:	46a1      	mov	r9, r4
 800b118:	f1b9 0f00 	cmp.w	r9, #0
 800b11c:	f1a5 0508 	sub.w	r5, r5, #8
 800b120:	dc77      	bgt.n	800b212 <__kernel_rem_pio2+0x202>
 800b122:	ec47 6b10 	vmov	d0, r6, r7
 800b126:	4650      	mov	r0, sl
 800b128:	f000 fc4e 	bl	800b9c8 <scalbn>
 800b12c:	ec57 6b10 	vmov	r6, r7, d0
 800b130:	2200      	movs	r2, #0
 800b132:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b136:	ee10 0a10 	vmov	r0, s0
 800b13a:	4639      	mov	r1, r7
 800b13c:	f7f5 fa5c 	bl	80005f8 <__aeabi_dmul>
 800b140:	ec41 0b10 	vmov	d0, r0, r1
 800b144:	f000 fbb8 	bl	800b8b8 <floor>
 800b148:	4b7c      	ldr	r3, [pc, #496]	; (800b33c <__kernel_rem_pio2+0x32c>)
 800b14a:	ec51 0b10 	vmov	r0, r1, d0
 800b14e:	2200      	movs	r2, #0
 800b150:	f7f5 fa52 	bl	80005f8 <__aeabi_dmul>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 f894 	bl	8000288 <__aeabi_dsub>
 800b160:	460f      	mov	r7, r1
 800b162:	4606      	mov	r6, r0
 800b164:	f7f5 fcf8 	bl	8000b58 <__aeabi_d2iz>
 800b168:	9004      	str	r0, [sp, #16]
 800b16a:	f7f5 f9db 	bl	8000524 <__aeabi_i2d>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	4630      	mov	r0, r6
 800b174:	4639      	mov	r1, r7
 800b176:	f7f5 f887 	bl	8000288 <__aeabi_dsub>
 800b17a:	f1ba 0f00 	cmp.w	sl, #0
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	dd6d      	ble.n	800b260 <__kernel_rem_pio2+0x250>
 800b184:	1e62      	subs	r2, r4, #1
 800b186:	ab0e      	add	r3, sp, #56	; 0x38
 800b188:	9d04      	ldr	r5, [sp, #16]
 800b18a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b18e:	f1ca 0118 	rsb	r1, sl, #24
 800b192:	fa40 f301 	asr.w	r3, r0, r1
 800b196:	441d      	add	r5, r3
 800b198:	408b      	lsls	r3, r1
 800b19a:	1ac0      	subs	r0, r0, r3
 800b19c:	ab0e      	add	r3, sp, #56	; 0x38
 800b19e:	9504      	str	r5, [sp, #16]
 800b1a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b1a4:	f1ca 0317 	rsb	r3, sl, #23
 800b1a8:	fa40 fb03 	asr.w	fp, r0, r3
 800b1ac:	f1bb 0f00 	cmp.w	fp, #0
 800b1b0:	dd65      	ble.n	800b27e <__kernel_rem_pio2+0x26e>
 800b1b2:	9b04      	ldr	r3, [sp, #16]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	9304      	str	r3, [sp, #16]
 800b1ba:	4615      	mov	r5, r2
 800b1bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b1c0:	4294      	cmp	r4, r2
 800b1c2:	f300 809c 	bgt.w	800b2fe <__kernel_rem_pio2+0x2ee>
 800b1c6:	f1ba 0f00 	cmp.w	sl, #0
 800b1ca:	dd07      	ble.n	800b1dc <__kernel_rem_pio2+0x1cc>
 800b1cc:	f1ba 0f01 	cmp.w	sl, #1
 800b1d0:	f000 80c0 	beq.w	800b354 <__kernel_rem_pio2+0x344>
 800b1d4:	f1ba 0f02 	cmp.w	sl, #2
 800b1d8:	f000 80c6 	beq.w	800b368 <__kernel_rem_pio2+0x358>
 800b1dc:	f1bb 0f02 	cmp.w	fp, #2
 800b1e0:	d14d      	bne.n	800b27e <__kernel_rem_pio2+0x26e>
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	463b      	mov	r3, r7
 800b1e6:	4956      	ldr	r1, [pc, #344]	; (800b340 <__kernel_rem_pio2+0x330>)
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f7f5 f84d 	bl	8000288 <__aeabi_dsub>
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	460f      	mov	r7, r1
 800b1f2:	2d00      	cmp	r5, #0
 800b1f4:	d043      	beq.n	800b27e <__kernel_rem_pio2+0x26e>
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b330 <__kernel_rem_pio2+0x320>
 800b1fc:	f000 fbe4 	bl	800b9c8 <scalbn>
 800b200:	4630      	mov	r0, r6
 800b202:	4639      	mov	r1, r7
 800b204:	ec53 2b10 	vmov	r2, r3, d0
 800b208:	f7f5 f83e 	bl	8000288 <__aeabi_dsub>
 800b20c:	4606      	mov	r6, r0
 800b20e:	460f      	mov	r7, r1
 800b210:	e035      	b.n	800b27e <__kernel_rem_pio2+0x26e>
 800b212:	4b4c      	ldr	r3, [pc, #304]	; (800b344 <__kernel_rem_pio2+0x334>)
 800b214:	2200      	movs	r2, #0
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	f7f5 f9ed 	bl	80005f8 <__aeabi_dmul>
 800b21e:	f7f5 fc9b 	bl	8000b58 <__aeabi_d2iz>
 800b222:	f7f5 f97f 	bl	8000524 <__aeabi_i2d>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	ec43 2b18 	vmov	d8, r2, r3
 800b22e:	4b46      	ldr	r3, [pc, #280]	; (800b348 <__kernel_rem_pio2+0x338>)
 800b230:	2200      	movs	r2, #0
 800b232:	f7f5 f9e1 	bl	80005f8 <__aeabi_dmul>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4630      	mov	r0, r6
 800b23c:	4639      	mov	r1, r7
 800b23e:	f7f5 f823 	bl	8000288 <__aeabi_dsub>
 800b242:	f7f5 fc89 	bl	8000b58 <__aeabi_d2iz>
 800b246:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b24a:	f84b 0b04 	str.w	r0, [fp], #4
 800b24e:	ec51 0b18 	vmov	r0, r1, d8
 800b252:	f7f5 f81b 	bl	800028c <__adddf3>
 800b256:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	e75b      	b.n	800b118 <__kernel_rem_pio2+0x108>
 800b260:	d106      	bne.n	800b270 <__kernel_rem_pio2+0x260>
 800b262:	1e63      	subs	r3, r4, #1
 800b264:	aa0e      	add	r2, sp, #56	; 0x38
 800b266:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b26a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b26e:	e79d      	b.n	800b1ac <__kernel_rem_pio2+0x19c>
 800b270:	4b36      	ldr	r3, [pc, #216]	; (800b34c <__kernel_rem_pio2+0x33c>)
 800b272:	2200      	movs	r2, #0
 800b274:	f7f5 fc46 	bl	8000b04 <__aeabi_dcmpge>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d13d      	bne.n	800b2f8 <__kernel_rem_pio2+0x2e8>
 800b27c:	4683      	mov	fp, r0
 800b27e:	2200      	movs	r2, #0
 800b280:	2300      	movs	r3, #0
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	f7f5 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	f000 80c0 	beq.w	800b410 <__kernel_rem_pio2+0x400>
 800b290:	1e65      	subs	r5, r4, #1
 800b292:	462b      	mov	r3, r5
 800b294:	2200      	movs	r2, #0
 800b296:	9902      	ldr	r1, [sp, #8]
 800b298:	428b      	cmp	r3, r1
 800b29a:	da6c      	bge.n	800b376 <__kernel_rem_pio2+0x366>
 800b29c:	2a00      	cmp	r2, #0
 800b29e:	f000 8089 	beq.w	800b3b4 <__kernel_rem_pio2+0x3a4>
 800b2a2:	ab0e      	add	r3, sp, #56	; 0x38
 800b2a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b2a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 80ad 	beq.w	800b40c <__kernel_rem_pio2+0x3fc>
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b330 <__kernel_rem_pio2+0x320>
 800b2b8:	f000 fb86 	bl	800b9c8 <scalbn>
 800b2bc:	ab9a      	add	r3, sp, #616	; 0x268
 800b2be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b2c2:	ec57 6b10 	vmov	r6, r7, d0
 800b2c6:	00ec      	lsls	r4, r5, #3
 800b2c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b2cc:	46aa      	mov	sl, r5
 800b2ce:	f1ba 0f00 	cmp.w	sl, #0
 800b2d2:	f280 80d6 	bge.w	800b482 <__kernel_rem_pio2+0x472>
 800b2d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b328 <__kernel_rem_pio2+0x318>
 800b2da:	462e      	mov	r6, r5
 800b2dc:	2e00      	cmp	r6, #0
 800b2de:	f2c0 8104 	blt.w	800b4ea <__kernel_rem_pio2+0x4da>
 800b2e2:	ab72      	add	r3, sp, #456	; 0x1c8
 800b2e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b2e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b350 <__kernel_rem_pio2+0x340>
 800b2ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b2f0:	f04f 0800 	mov.w	r8, #0
 800b2f4:	1baf      	subs	r7, r5, r6
 800b2f6:	e0ea      	b.n	800b4ce <__kernel_rem_pio2+0x4be>
 800b2f8:	f04f 0b02 	mov.w	fp, #2
 800b2fc:	e759      	b.n	800b1b2 <__kernel_rem_pio2+0x1a2>
 800b2fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b302:	b955      	cbnz	r5, 800b31a <__kernel_rem_pio2+0x30a>
 800b304:	b123      	cbz	r3, 800b310 <__kernel_rem_pio2+0x300>
 800b306:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b30a:	f8c8 3000 	str.w	r3, [r8]
 800b30e:	2301      	movs	r3, #1
 800b310:	3201      	adds	r2, #1
 800b312:	f108 0804 	add.w	r8, r8, #4
 800b316:	461d      	mov	r5, r3
 800b318:	e752      	b.n	800b1c0 <__kernel_rem_pio2+0x1b0>
 800b31a:	1acb      	subs	r3, r1, r3
 800b31c:	f8c8 3000 	str.w	r3, [r8]
 800b320:	462b      	mov	r3, r5
 800b322:	e7f5      	b.n	800b310 <__kernel_rem_pio2+0x300>
 800b324:	f3af 8000 	nop.w
	...
 800b334:	3ff00000 	.word	0x3ff00000
 800b338:	0800bd58 	.word	0x0800bd58
 800b33c:	40200000 	.word	0x40200000
 800b340:	3ff00000 	.word	0x3ff00000
 800b344:	3e700000 	.word	0x3e700000
 800b348:	41700000 	.word	0x41700000
 800b34c:	3fe00000 	.word	0x3fe00000
 800b350:	0800bd18 	.word	0x0800bd18
 800b354:	1e62      	subs	r2, r4, #1
 800b356:	ab0e      	add	r3, sp, #56	; 0x38
 800b358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b360:	a90e      	add	r1, sp, #56	; 0x38
 800b362:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b366:	e739      	b.n	800b1dc <__kernel_rem_pio2+0x1cc>
 800b368:	1e62      	subs	r2, r4, #1
 800b36a:	ab0e      	add	r3, sp, #56	; 0x38
 800b36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b370:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b374:	e7f4      	b.n	800b360 <__kernel_rem_pio2+0x350>
 800b376:	a90e      	add	r1, sp, #56	; 0x38
 800b378:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	430a      	orrs	r2, r1
 800b380:	e789      	b.n	800b296 <__kernel_rem_pio2+0x286>
 800b382:	3301      	adds	r3, #1
 800b384:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b388:	2900      	cmp	r1, #0
 800b38a:	d0fa      	beq.n	800b382 <__kernel_rem_pio2+0x372>
 800b38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b38e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b392:	446a      	add	r2, sp
 800b394:	3a98      	subs	r2, #152	; 0x98
 800b396:	920a      	str	r2, [sp, #40]	; 0x28
 800b398:	9a08      	ldr	r2, [sp, #32]
 800b39a:	18e3      	adds	r3, r4, r3
 800b39c:	18a5      	adds	r5, r4, r2
 800b39e:	aa22      	add	r2, sp, #136	; 0x88
 800b3a0:	f104 0801 	add.w	r8, r4, #1
 800b3a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b3a8:	9304      	str	r3, [sp, #16]
 800b3aa:	9b04      	ldr	r3, [sp, #16]
 800b3ac:	4543      	cmp	r3, r8
 800b3ae:	da04      	bge.n	800b3ba <__kernel_rem_pio2+0x3aa>
 800b3b0:	461c      	mov	r4, r3
 800b3b2:	e6a3      	b.n	800b0fc <__kernel_rem_pio2+0xec>
 800b3b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e7e4      	b.n	800b384 <__kernel_rem_pio2+0x374>
 800b3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b3c0:	f7f5 f8b0 	bl	8000524 <__aeabi_i2d>
 800b3c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ca:	46ab      	mov	fp, r5
 800b3cc:	461c      	mov	r4, r3
 800b3ce:	f04f 0900 	mov.w	r9, #0
 800b3d2:	2600      	movs	r6, #0
 800b3d4:	2700      	movs	r7, #0
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	4599      	cmp	r9, r3
 800b3da:	dd06      	ble.n	800b3ea <__kernel_rem_pio2+0x3da>
 800b3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3de:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b3e2:	f108 0801 	add.w	r8, r8, #1
 800b3e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3e8:	e7df      	b.n	800b3aa <__kernel_rem_pio2+0x39a>
 800b3ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b3ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b3f2:	f7f5 f901 	bl	80005f8 <__aeabi_dmul>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	f7f4 ff45 	bl	800028c <__adddf3>
 800b402:	f109 0901 	add.w	r9, r9, #1
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	e7e4      	b.n	800b3d6 <__kernel_rem_pio2+0x3c6>
 800b40c:	3d01      	subs	r5, #1
 800b40e:	e748      	b.n	800b2a2 <__kernel_rem_pio2+0x292>
 800b410:	ec47 6b10 	vmov	d0, r6, r7
 800b414:	f1ca 0000 	rsb	r0, sl, #0
 800b418:	f000 fad6 	bl	800b9c8 <scalbn>
 800b41c:	ec57 6b10 	vmov	r6, r7, d0
 800b420:	4ba0      	ldr	r3, [pc, #640]	; (800b6a4 <__kernel_rem_pio2+0x694>)
 800b422:	ee10 0a10 	vmov	r0, s0
 800b426:	2200      	movs	r2, #0
 800b428:	4639      	mov	r1, r7
 800b42a:	f7f5 fb6b 	bl	8000b04 <__aeabi_dcmpge>
 800b42e:	b1f8      	cbz	r0, 800b470 <__kernel_rem_pio2+0x460>
 800b430:	4b9d      	ldr	r3, [pc, #628]	; (800b6a8 <__kernel_rem_pio2+0x698>)
 800b432:	2200      	movs	r2, #0
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	f7f5 fb8c 	bl	8000b58 <__aeabi_d2iz>
 800b440:	4680      	mov	r8, r0
 800b442:	f7f5 f86f 	bl	8000524 <__aeabi_i2d>
 800b446:	4b97      	ldr	r3, [pc, #604]	; (800b6a4 <__kernel_rem_pio2+0x694>)
 800b448:	2200      	movs	r2, #0
 800b44a:	f7f5 f8d5 	bl	80005f8 <__aeabi_dmul>
 800b44e:	460b      	mov	r3, r1
 800b450:	4602      	mov	r2, r0
 800b452:	4639      	mov	r1, r7
 800b454:	4630      	mov	r0, r6
 800b456:	f7f4 ff17 	bl	8000288 <__aeabi_dsub>
 800b45a:	f7f5 fb7d 	bl	8000b58 <__aeabi_d2iz>
 800b45e:	1c65      	adds	r5, r4, #1
 800b460:	ab0e      	add	r3, sp, #56	; 0x38
 800b462:	f10a 0a18 	add.w	sl, sl, #24
 800b466:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b46a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b46e:	e720      	b.n	800b2b2 <__kernel_rem_pio2+0x2a2>
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f5 fb70 	bl	8000b58 <__aeabi_d2iz>
 800b478:	ab0e      	add	r3, sp, #56	; 0x38
 800b47a:	4625      	mov	r5, r4
 800b47c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b480:	e717      	b.n	800b2b2 <__kernel_rem_pio2+0x2a2>
 800b482:	ab0e      	add	r3, sp, #56	; 0x38
 800b484:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b488:	f7f5 f84c 	bl	8000524 <__aeabi_i2d>
 800b48c:	4632      	mov	r2, r6
 800b48e:	463b      	mov	r3, r7
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	4b84      	ldr	r3, [pc, #528]	; (800b6a8 <__kernel_rem_pio2+0x698>)
 800b496:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b49a:	2200      	movs	r2, #0
 800b49c:	4630      	mov	r0, r6
 800b49e:	4639      	mov	r1, r7
 800b4a0:	f7f5 f8aa 	bl	80005f8 <__aeabi_dmul>
 800b4a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	460f      	mov	r7, r1
 800b4ac:	e70f      	b.n	800b2ce <__kernel_rem_pio2+0x2be>
 800b4ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b4b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b4b6:	f7f5 f89f 	bl	80005f8 <__aeabi_dmul>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4c2:	f7f4 fee3 	bl	800028c <__adddf3>
 800b4c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4ca:	f108 0801 	add.w	r8, r8, #1
 800b4ce:	9b02      	ldr	r3, [sp, #8]
 800b4d0:	4598      	cmp	r8, r3
 800b4d2:	dc01      	bgt.n	800b4d8 <__kernel_rem_pio2+0x4c8>
 800b4d4:	45b8      	cmp	r8, r7
 800b4d6:	ddea      	ble.n	800b4ae <__kernel_rem_pio2+0x49e>
 800b4d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b4dc:	ab4a      	add	r3, sp, #296	; 0x128
 800b4de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b4e2:	ed87 7b00 	vstr	d7, [r7]
 800b4e6:	3e01      	subs	r6, #1
 800b4e8:	e6f8      	b.n	800b2dc <__kernel_rem_pio2+0x2cc>
 800b4ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	dc0b      	bgt.n	800b508 <__kernel_rem_pio2+0x4f8>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dc35      	bgt.n	800b560 <__kernel_rem_pio2+0x550>
 800b4f4:	d059      	beq.n	800b5aa <__kernel_rem_pio2+0x59a>
 800b4f6:	9b04      	ldr	r3, [sp, #16]
 800b4f8:	f003 0007 	and.w	r0, r3, #7
 800b4fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b500:	ecbd 8b02 	vpop	{d8}
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b508:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d1f3      	bne.n	800b4f6 <__kernel_rem_pio2+0x4e6>
 800b50e:	ab4a      	add	r3, sp, #296	; 0x128
 800b510:	4423      	add	r3, r4
 800b512:	9306      	str	r3, [sp, #24]
 800b514:	461c      	mov	r4, r3
 800b516:	469a      	mov	sl, r3
 800b518:	9502      	str	r5, [sp, #8]
 800b51a:	9b02      	ldr	r3, [sp, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b522:	dc6b      	bgt.n	800b5fc <__kernel_rem_pio2+0x5ec>
 800b524:	46aa      	mov	sl, r5
 800b526:	f1ba 0f01 	cmp.w	sl, #1
 800b52a:	f1a4 0408 	sub.w	r4, r4, #8
 800b52e:	f300 8085 	bgt.w	800b63c <__kernel_rem_pio2+0x62c>
 800b532:	9c06      	ldr	r4, [sp, #24]
 800b534:	2000      	movs	r0, #0
 800b536:	3408      	adds	r4, #8
 800b538:	2100      	movs	r1, #0
 800b53a:	2d01      	cmp	r5, #1
 800b53c:	f300 809d 	bgt.w	800b67a <__kernel_rem_pio2+0x66a>
 800b540:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b544:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b548:	f1bb 0f00 	cmp.w	fp, #0
 800b54c:	f040 809b 	bne.w	800b686 <__kernel_rem_pio2+0x676>
 800b550:	9b01      	ldr	r3, [sp, #4]
 800b552:	e9c3 5600 	strd	r5, r6, [r3]
 800b556:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b55a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b55e:	e7ca      	b.n	800b4f6 <__kernel_rem_pio2+0x4e6>
 800b560:	3408      	adds	r4, #8
 800b562:	ab4a      	add	r3, sp, #296	; 0x128
 800b564:	441c      	add	r4, r3
 800b566:	462e      	mov	r6, r5
 800b568:	2000      	movs	r0, #0
 800b56a:	2100      	movs	r1, #0
 800b56c:	2e00      	cmp	r6, #0
 800b56e:	da36      	bge.n	800b5de <__kernel_rem_pio2+0x5ce>
 800b570:	f1bb 0f00 	cmp.w	fp, #0
 800b574:	d039      	beq.n	800b5ea <__kernel_rem_pio2+0x5da>
 800b576:	4602      	mov	r2, r0
 800b578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b57c:	9c01      	ldr	r4, [sp, #4]
 800b57e:	e9c4 2300 	strd	r2, r3, [r4]
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b58a:	f7f4 fe7d 	bl	8000288 <__aeabi_dsub>
 800b58e:	ae4c      	add	r6, sp, #304	; 0x130
 800b590:	2401      	movs	r4, #1
 800b592:	42a5      	cmp	r5, r4
 800b594:	da2c      	bge.n	800b5f0 <__kernel_rem_pio2+0x5e0>
 800b596:	f1bb 0f00 	cmp.w	fp, #0
 800b59a:	d002      	beq.n	800b5a2 <__kernel_rem_pio2+0x592>
 800b59c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	9b01      	ldr	r3, [sp, #4]
 800b5a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b5a8:	e7a5      	b.n	800b4f6 <__kernel_rem_pio2+0x4e6>
 800b5aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b5ae:	eb0d 0403 	add.w	r4, sp, r3
 800b5b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	2d00      	cmp	r5, #0
 800b5bc:	da09      	bge.n	800b5d2 <__kernel_rem_pio2+0x5c2>
 800b5be:	f1bb 0f00 	cmp.w	fp, #0
 800b5c2:	d002      	beq.n	800b5ca <__kernel_rem_pio2+0x5ba>
 800b5c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	e9c3 0100 	strd	r0, r1, [r3]
 800b5d0:	e791      	b.n	800b4f6 <__kernel_rem_pio2+0x4e6>
 800b5d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5d6:	f7f4 fe59 	bl	800028c <__adddf3>
 800b5da:	3d01      	subs	r5, #1
 800b5dc:	e7ed      	b.n	800b5ba <__kernel_rem_pio2+0x5aa>
 800b5de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5e2:	f7f4 fe53 	bl	800028c <__adddf3>
 800b5e6:	3e01      	subs	r6, #1
 800b5e8:	e7c0      	b.n	800b56c <__kernel_rem_pio2+0x55c>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	e7c5      	b.n	800b57c <__kernel_rem_pio2+0x56c>
 800b5f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b5f4:	f7f4 fe4a 	bl	800028c <__adddf3>
 800b5f8:	3401      	adds	r4, #1
 800b5fa:	e7ca      	b.n	800b592 <__kernel_rem_pio2+0x582>
 800b5fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b600:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b604:	9b02      	ldr	r3, [sp, #8]
 800b606:	3b01      	subs	r3, #1
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	4632      	mov	r2, r6
 800b60c:	463b      	mov	r3, r7
 800b60e:	4640      	mov	r0, r8
 800b610:	4649      	mov	r1, r9
 800b612:	f7f4 fe3b 	bl	800028c <__adddf3>
 800b616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	4640      	mov	r0, r8
 800b620:	4649      	mov	r1, r9
 800b622:	f7f4 fe31 	bl	8000288 <__aeabi_dsub>
 800b626:	4632      	mov	r2, r6
 800b628:	463b      	mov	r3, r7
 800b62a:	f7f4 fe2f 	bl	800028c <__adddf3>
 800b62e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b632:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b636:	ed8a 7b00 	vstr	d7, [sl]
 800b63a:	e76e      	b.n	800b51a <__kernel_rem_pio2+0x50a>
 800b63c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b640:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b644:	4640      	mov	r0, r8
 800b646:	4632      	mov	r2, r6
 800b648:	463b      	mov	r3, r7
 800b64a:	4649      	mov	r1, r9
 800b64c:	f7f4 fe1e 	bl	800028c <__adddf3>
 800b650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4640      	mov	r0, r8
 800b65a:	4649      	mov	r1, r9
 800b65c:	f7f4 fe14 	bl	8000288 <__aeabi_dsub>
 800b660:	4632      	mov	r2, r6
 800b662:	463b      	mov	r3, r7
 800b664:	f7f4 fe12 	bl	800028c <__adddf3>
 800b668:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b66c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b670:	ed84 7b00 	vstr	d7, [r4]
 800b674:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b678:	e755      	b.n	800b526 <__kernel_rem_pio2+0x516>
 800b67a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b67e:	f7f4 fe05 	bl	800028c <__adddf3>
 800b682:	3d01      	subs	r5, #1
 800b684:	e759      	b.n	800b53a <__kernel_rem_pio2+0x52a>
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	9a01      	ldr	r2, [sp, #4]
 800b68a:	601d      	str	r5, [r3, #0]
 800b68c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b690:	605c      	str	r4, [r3, #4]
 800b692:	609f      	str	r7, [r3, #8]
 800b694:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b698:	60d3      	str	r3, [r2, #12]
 800b69a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b69e:	6110      	str	r0, [r2, #16]
 800b6a0:	6153      	str	r3, [r2, #20]
 800b6a2:	e728      	b.n	800b4f6 <__kernel_rem_pio2+0x4e6>
 800b6a4:	41700000 	.word	0x41700000
 800b6a8:	3e700000 	.word	0x3e700000
 800b6ac:	00000000 	.word	0x00000000

0800b6b0 <__kernel_sin>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	ed2d 8b04 	vpush	{d8-d9}
 800b6b8:	eeb0 8a41 	vmov.f32	s16, s2
 800b6bc:	eef0 8a61 	vmov.f32	s17, s3
 800b6c0:	ec55 4b10 	vmov	r4, r5, d0
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b6ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b6ce:	9001      	str	r0, [sp, #4]
 800b6d0:	da06      	bge.n	800b6e0 <__kernel_sin+0x30>
 800b6d2:	ee10 0a10 	vmov	r0, s0
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	f7f5 fa3e 	bl	8000b58 <__aeabi_d2iz>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d051      	beq.n	800b784 <__kernel_sin+0xd4>
 800b6e0:	4622      	mov	r2, r4
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f7f4 ff86 	bl	80005f8 <__aeabi_dmul>
 800b6ec:	4682      	mov	sl, r0
 800b6ee:	468b      	mov	fp, r1
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	f7f4 ff7e 	bl	80005f8 <__aeabi_dmul>
 800b6fc:	a341      	add	r3, pc, #260	; (adr r3, 800b804 <__kernel_sin+0x154>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	4680      	mov	r8, r0
 800b704:	4689      	mov	r9, r1
 800b706:	4650      	mov	r0, sl
 800b708:	4659      	mov	r1, fp
 800b70a:	f7f4 ff75 	bl	80005f8 <__aeabi_dmul>
 800b70e:	a33f      	add	r3, pc, #252	; (adr r3, 800b80c <__kernel_sin+0x15c>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f7f4 fdb8 	bl	8000288 <__aeabi_dsub>
 800b718:	4652      	mov	r2, sl
 800b71a:	465b      	mov	r3, fp
 800b71c:	f7f4 ff6c 	bl	80005f8 <__aeabi_dmul>
 800b720:	a33c      	add	r3, pc, #240	; (adr r3, 800b814 <__kernel_sin+0x164>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fdb1 	bl	800028c <__adddf3>
 800b72a:	4652      	mov	r2, sl
 800b72c:	465b      	mov	r3, fp
 800b72e:	f7f4 ff63 	bl	80005f8 <__aeabi_dmul>
 800b732:	a33a      	add	r3, pc, #232	; (adr r3, 800b81c <__kernel_sin+0x16c>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fda6 	bl	8000288 <__aeabi_dsub>
 800b73c:	4652      	mov	r2, sl
 800b73e:	465b      	mov	r3, fp
 800b740:	f7f4 ff5a 	bl	80005f8 <__aeabi_dmul>
 800b744:	a337      	add	r3, pc, #220	; (adr r3, 800b824 <__kernel_sin+0x174>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd9f 	bl	800028c <__adddf3>
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	4606      	mov	r6, r0
 800b752:	460f      	mov	r7, r1
 800b754:	b9eb      	cbnz	r3, 800b792 <__kernel_sin+0xe2>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	4650      	mov	r0, sl
 800b75c:	4659      	mov	r1, fp
 800b75e:	f7f4 ff4b 	bl	80005f8 <__aeabi_dmul>
 800b762:	a325      	add	r3, pc, #148	; (adr r3, 800b7f8 <__kernel_sin+0x148>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f4 fd8e 	bl	8000288 <__aeabi_dsub>
 800b76c:	4642      	mov	r2, r8
 800b76e:	464b      	mov	r3, r9
 800b770:	f7f4 ff42 	bl	80005f8 <__aeabi_dmul>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4620      	mov	r0, r4
 800b77a:	4629      	mov	r1, r5
 800b77c:	f7f4 fd86 	bl	800028c <__adddf3>
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	ec45 4b10 	vmov	d0, r4, r5
 800b788:	b003      	add	sp, #12
 800b78a:	ecbd 8b04 	vpop	{d8-d9}
 800b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b792:	4b1b      	ldr	r3, [pc, #108]	; (800b800 <__kernel_sin+0x150>)
 800b794:	ec51 0b18 	vmov	r0, r1, d8
 800b798:	2200      	movs	r2, #0
 800b79a:	f7f4 ff2d 	bl	80005f8 <__aeabi_dmul>
 800b79e:	4632      	mov	r2, r6
 800b7a0:	ec41 0b19 	vmov	d9, r0, r1
 800b7a4:	463b      	mov	r3, r7
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	f7f4 ff25 	bl	80005f8 <__aeabi_dmul>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	ec51 0b19 	vmov	r0, r1, d9
 800b7b6:	f7f4 fd67 	bl	8000288 <__aeabi_dsub>
 800b7ba:	4652      	mov	r2, sl
 800b7bc:	465b      	mov	r3, fp
 800b7be:	f7f4 ff1b 	bl	80005f8 <__aeabi_dmul>
 800b7c2:	ec53 2b18 	vmov	r2, r3, d8
 800b7c6:	f7f4 fd5f 	bl	8000288 <__aeabi_dsub>
 800b7ca:	a30b      	add	r3, pc, #44	; (adr r3, 800b7f8 <__kernel_sin+0x148>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	f7f4 ff0e 	bl	80005f8 <__aeabi_dmul>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	f7f4 fd52 	bl	800028c <__adddf3>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	f7f4 fd4a 	bl	8000288 <__aeabi_dsub>
 800b7f4:	e7c4      	b.n	800b780 <__kernel_sin+0xd0>
 800b7f6:	bf00      	nop
 800b7f8:	55555549 	.word	0x55555549
 800b7fc:	3fc55555 	.word	0x3fc55555
 800b800:	3fe00000 	.word	0x3fe00000
 800b804:	5acfd57c 	.word	0x5acfd57c
 800b808:	3de5d93a 	.word	0x3de5d93a
 800b80c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b810:	3e5ae5e6 	.word	0x3e5ae5e6
 800b814:	57b1fe7d 	.word	0x57b1fe7d
 800b818:	3ec71de3 	.word	0x3ec71de3
 800b81c:	19c161d5 	.word	0x19c161d5
 800b820:	3f2a01a0 	.word	0x3f2a01a0
 800b824:	1110f8a6 	.word	0x1110f8a6
 800b828:	3f811111 	.word	0x3f811111

0800b82c <with_errno>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	4616      	mov	r6, r2
 800b834:	f7fd fb56 	bl	8008ee4 <__errno>
 800b838:	4629      	mov	r1, r5
 800b83a:	6006      	str	r6, [r0, #0]
 800b83c:	4620      	mov	r0, r4
 800b83e:	bd70      	pop	{r4, r5, r6, pc}

0800b840 <xflow>:
 800b840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b842:	4614      	mov	r4, r2
 800b844:	461d      	mov	r5, r3
 800b846:	b108      	cbz	r0, 800b84c <xflow+0xc>
 800b848:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b84c:	e9cd 2300 	strd	r2, r3, [sp]
 800b850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b854:	4620      	mov	r0, r4
 800b856:	4629      	mov	r1, r5
 800b858:	f7f4 fece 	bl	80005f8 <__aeabi_dmul>
 800b85c:	2222      	movs	r2, #34	; 0x22
 800b85e:	b003      	add	sp, #12
 800b860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b864:	f7ff bfe2 	b.w	800b82c <with_errno>

0800b868 <__math_uflow>:
 800b868:	b508      	push	{r3, lr}
 800b86a:	2200      	movs	r2, #0
 800b86c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b870:	f7ff ffe6 	bl	800b840 <xflow>
 800b874:	ec41 0b10 	vmov	d0, r0, r1
 800b878:	bd08      	pop	{r3, pc}

0800b87a <__math_oflow>:
 800b87a:	b508      	push	{r3, lr}
 800b87c:	2200      	movs	r2, #0
 800b87e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b882:	f7ff ffdd 	bl	800b840 <xflow>
 800b886:	ec41 0b10 	vmov	d0, r0, r1
 800b88a:	bd08      	pop	{r3, pc}

0800b88c <fabs>:
 800b88c:	ec51 0b10 	vmov	r0, r1, d0
 800b890:	ee10 2a10 	vmov	r2, s0
 800b894:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b898:	ec43 2b10 	vmov	d0, r2, r3
 800b89c:	4770      	bx	lr

0800b89e <finite>:
 800b89e:	b082      	sub	sp, #8
 800b8a0:	ed8d 0b00 	vstr	d0, [sp]
 800b8a4:	9801      	ldr	r0, [sp, #4]
 800b8a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b8aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b8ae:	0fc0      	lsrs	r0, r0, #31
 800b8b0:	b002      	add	sp, #8
 800b8b2:	4770      	bx	lr
 800b8b4:	0000      	movs	r0, r0
	...

0800b8b8 <floor>:
 800b8b8:	ec51 0b10 	vmov	r0, r1, d0
 800b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b8c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b8c8:	2e13      	cmp	r6, #19
 800b8ca:	ee10 5a10 	vmov	r5, s0
 800b8ce:	ee10 8a10 	vmov	r8, s0
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	dc32      	bgt.n	800b93c <floor+0x84>
 800b8d6:	2e00      	cmp	r6, #0
 800b8d8:	da14      	bge.n	800b904 <floor+0x4c>
 800b8da:	a333      	add	r3, pc, #204	; (adr r3, 800b9a8 <floor+0xf0>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fcd4 	bl	800028c <__adddf3>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f7f5 f916 	bl	8000b18 <__aeabi_dcmpgt>
 800b8ec:	b138      	cbz	r0, 800b8fe <floor+0x46>
 800b8ee:	2c00      	cmp	r4, #0
 800b8f0:	da57      	bge.n	800b9a2 <floor+0xea>
 800b8f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b8f6:	431d      	orrs	r5, r3
 800b8f8:	d001      	beq.n	800b8fe <floor+0x46>
 800b8fa:	4c2d      	ldr	r4, [pc, #180]	; (800b9b0 <floor+0xf8>)
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	4621      	mov	r1, r4
 800b900:	4628      	mov	r0, r5
 800b902:	e025      	b.n	800b950 <floor+0x98>
 800b904:	4f2b      	ldr	r7, [pc, #172]	; (800b9b4 <floor+0xfc>)
 800b906:	4137      	asrs	r7, r6
 800b908:	ea01 0307 	and.w	r3, r1, r7
 800b90c:	4303      	orrs	r3, r0
 800b90e:	d01f      	beq.n	800b950 <floor+0x98>
 800b910:	a325      	add	r3, pc, #148	; (adr r3, 800b9a8 <floor+0xf0>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fcb9 	bl	800028c <__adddf3>
 800b91a:	2200      	movs	r2, #0
 800b91c:	2300      	movs	r3, #0
 800b91e:	f7f5 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 800b922:	2800      	cmp	r0, #0
 800b924:	d0eb      	beq.n	800b8fe <floor+0x46>
 800b926:	2c00      	cmp	r4, #0
 800b928:	bfbe      	ittt	lt
 800b92a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b92e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b932:	19a4      	addlt	r4, r4, r6
 800b934:	ea24 0407 	bic.w	r4, r4, r7
 800b938:	2500      	movs	r5, #0
 800b93a:	e7e0      	b.n	800b8fe <floor+0x46>
 800b93c:	2e33      	cmp	r6, #51	; 0x33
 800b93e:	dd0b      	ble.n	800b958 <floor+0xa0>
 800b940:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b944:	d104      	bne.n	800b950 <floor+0x98>
 800b946:	ee10 2a10 	vmov	r2, s0
 800b94a:	460b      	mov	r3, r1
 800b94c:	f7f4 fc9e 	bl	800028c <__adddf3>
 800b950:	ec41 0b10 	vmov	d0, r0, r1
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b960:	fa23 f707 	lsr.w	r7, r3, r7
 800b964:	4207      	tst	r7, r0
 800b966:	d0f3      	beq.n	800b950 <floor+0x98>
 800b968:	a30f      	add	r3, pc, #60	; (adr r3, 800b9a8 <floor+0xf0>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f7f4 fc8d 	bl	800028c <__adddf3>
 800b972:	2200      	movs	r2, #0
 800b974:	2300      	movs	r3, #0
 800b976:	f7f5 f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d0bf      	beq.n	800b8fe <floor+0x46>
 800b97e:	2c00      	cmp	r4, #0
 800b980:	da02      	bge.n	800b988 <floor+0xd0>
 800b982:	2e14      	cmp	r6, #20
 800b984:	d103      	bne.n	800b98e <floor+0xd6>
 800b986:	3401      	adds	r4, #1
 800b988:	ea25 0507 	bic.w	r5, r5, r7
 800b98c:	e7b7      	b.n	800b8fe <floor+0x46>
 800b98e:	2301      	movs	r3, #1
 800b990:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b994:	fa03 f606 	lsl.w	r6, r3, r6
 800b998:	4435      	add	r5, r6
 800b99a:	4545      	cmp	r5, r8
 800b99c:	bf38      	it	cc
 800b99e:	18e4      	addcc	r4, r4, r3
 800b9a0:	e7f2      	b.n	800b988 <floor+0xd0>
 800b9a2:	2500      	movs	r5, #0
 800b9a4:	462c      	mov	r4, r5
 800b9a6:	e7aa      	b.n	800b8fe <floor+0x46>
 800b9a8:	8800759c 	.word	0x8800759c
 800b9ac:	7e37e43c 	.word	0x7e37e43c
 800b9b0:	bff00000 	.word	0xbff00000
 800b9b4:	000fffff 	.word	0x000fffff

0800b9b8 <nan>:
 800b9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9c0 <nan+0x8>
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	7ff80000 	.word	0x7ff80000

0800b9c8 <scalbn>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	ec55 4b10 	vmov	r4, r5, d0
 800b9ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	462b      	mov	r3, r5
 800b9d6:	b99a      	cbnz	r2, 800ba00 <scalbn+0x38>
 800b9d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b9dc:	4323      	orrs	r3, r4
 800b9de:	d036      	beq.n	800ba4e <scalbn+0x86>
 800b9e0:	4b39      	ldr	r3, [pc, #228]	; (800bac8 <scalbn+0x100>)
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	ee10 0a10 	vmov	r0, s0
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f7f4 fe05 	bl	80005f8 <__aeabi_dmul>
 800b9ee:	4b37      	ldr	r3, [pc, #220]	; (800bacc <scalbn+0x104>)
 800b9f0:	429e      	cmp	r6, r3
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	460d      	mov	r5, r1
 800b9f6:	da10      	bge.n	800ba1a <scalbn+0x52>
 800b9f8:	a32b      	add	r3, pc, #172	; (adr r3, 800baa8 <scalbn+0xe0>)
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	e03a      	b.n	800ba76 <scalbn+0xae>
 800ba00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba04:	428a      	cmp	r2, r1
 800ba06:	d10c      	bne.n	800ba22 <scalbn+0x5a>
 800ba08:	ee10 2a10 	vmov	r2, s0
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7f4 fc3c 	bl	800028c <__adddf3>
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
 800ba18:	e019      	b.n	800ba4e <scalbn+0x86>
 800ba1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba1e:	460b      	mov	r3, r1
 800ba20:	3a36      	subs	r2, #54	; 0x36
 800ba22:	4432      	add	r2, r6
 800ba24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba28:	428a      	cmp	r2, r1
 800ba2a:	dd08      	ble.n	800ba3e <scalbn+0x76>
 800ba2c:	2d00      	cmp	r5, #0
 800ba2e:	a120      	add	r1, pc, #128	; (adr r1, 800bab0 <scalbn+0xe8>)
 800ba30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba34:	da1c      	bge.n	800ba70 <scalbn+0xa8>
 800ba36:	a120      	add	r1, pc, #128	; (adr r1, 800bab8 <scalbn+0xf0>)
 800ba38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba3c:	e018      	b.n	800ba70 <scalbn+0xa8>
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	dd08      	ble.n	800ba54 <scalbn+0x8c>
 800ba42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba4e:	ec45 4b10 	vmov	d0, r4, r5
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ba58:	da19      	bge.n	800ba8e <scalbn+0xc6>
 800ba5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba5e:	429e      	cmp	r6, r3
 800ba60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ba64:	dd0a      	ble.n	800ba7c <scalbn+0xb4>
 800ba66:	a112      	add	r1, pc, #72	; (adr r1, 800bab0 <scalbn+0xe8>)
 800ba68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e2      	bne.n	800ba36 <scalbn+0x6e>
 800ba70:	a30f      	add	r3, pc, #60	; (adr r3, 800bab0 <scalbn+0xe8>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f7f4 fdbf 	bl	80005f8 <__aeabi_dmul>
 800ba7a:	e7cb      	b.n	800ba14 <scalbn+0x4c>
 800ba7c:	a10a      	add	r1, pc, #40	; (adr r1, 800baa8 <scalbn+0xe0>)
 800ba7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0b8      	beq.n	800b9f8 <scalbn+0x30>
 800ba86:	a10e      	add	r1, pc, #56	; (adr r1, 800bac0 <scalbn+0xf8>)
 800ba88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba8c:	e7b4      	b.n	800b9f8 <scalbn+0x30>
 800ba8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba92:	3236      	adds	r2, #54	; 0x36
 800ba94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <scalbn+0x108>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	e7e8      	b.n	800ba76 <scalbn+0xae>
 800baa4:	f3af 8000 	nop.w
 800baa8:	c2f8f359 	.word	0xc2f8f359
 800baac:	01a56e1f 	.word	0x01a56e1f
 800bab0:	8800759c 	.word	0x8800759c
 800bab4:	7e37e43c 	.word	0x7e37e43c
 800bab8:	8800759c 	.word	0x8800759c
 800babc:	fe37e43c 	.word	0xfe37e43c
 800bac0:	c2f8f359 	.word	0xc2f8f359
 800bac4:	81a56e1f 	.word	0x81a56e1f
 800bac8:	43500000 	.word	0x43500000
 800bacc:	ffff3cb0 	.word	0xffff3cb0
 800bad0:	3c900000 	.word	0x3c900000

0800bad4 <_init>:
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	bf00      	nop
 800bad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bada:	bc08      	pop	{r3}
 800badc:	469e      	mov	lr, r3
 800bade:	4770      	bx	lr

0800bae0 <_fini>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	bf00      	nop
 800bae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae6:	bc08      	pop	{r3}
 800bae8:	469e      	mov	lr, r3
 800baea:	4770      	bx	lr
